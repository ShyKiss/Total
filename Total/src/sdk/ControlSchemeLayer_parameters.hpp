#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControlSchemeLayer

#include "Basic.hpp"

#include "OPP_structs.hpp"


namespace SDK::Params
{

// Function ControlSchemeLayer.ControlSchemeLayer_C.ExecuteUbergraph_ControlSchemeLayer
// 0x0008 (0x0008 - 0x0000)
struct ControlSchemeLayer_C_ExecuteUbergraph_ControlSchemeLayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ControlSchemeLayer_C_ExecuteUbergraph_ControlSchemeLayer) == 0x000004, "Wrong alignment on ControlSchemeLayer_C_ExecuteUbergraph_ControlSchemeLayer");
static_assert(sizeof(ControlSchemeLayer_C_ExecuteUbergraph_ControlSchemeLayer) == 0x000008, "Wrong size on ControlSchemeLayer_C_ExecuteUbergraph_ControlSchemeLayer");
static_assert(offsetof(ControlSchemeLayer_C_ExecuteUbergraph_ControlSchemeLayer, EntryPoint) == 0x000000, "Member 'ControlSchemeLayer_C_ExecuteUbergraph_ControlSchemeLayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_ExecuteUbergraph_ControlSchemeLayer, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ControlSchemeLayer_C_ExecuteUbergraph_ControlSchemeLayer::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function ControlSchemeLayer.ControlSchemeLayer_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ControlSchemeLayer_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ControlSchemeLayer_C_PreConstruct) == 0x000001, "Wrong alignment on ControlSchemeLayer_C_PreConstruct");
static_assert(sizeof(ControlSchemeLayer_C_PreConstruct) == 0x000001, "Wrong size on ControlSchemeLayer_C_PreConstruct");
static_assert(offsetof(ControlSchemeLayer_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ControlSchemeLayer_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ControlSchemeLayer.ControlSchemeLayer_C.UpdateGamepadType
// 0x0080 (0x0080 - 0x0000)
struct ControlSchemeLayer_C_UpdateGamepadType final
{
public:
	class UTexture2D*                             Temp_object_Variable;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class URBGamepadSpecificData*           CallFunc_GetGamepadSpecificData_ReturnValue;       // 0x0028(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue_1;                   // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue_2;                   // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGamepadType                                  Temp_byte_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue_3;                   // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class URBGamepadSpecificData*           CallFunc_GetGamepadSpecificData_ReturnValue_1;     // 0x0078(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControlSchemeLayer_C_UpdateGamepadType) == 0x000008, "Wrong alignment on ControlSchemeLayer_C_UpdateGamepadType");
static_assert(sizeof(ControlSchemeLayer_C_UpdateGamepadType) == 0x000080, "Wrong size on ControlSchemeLayer_C_UpdateGamepadType");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, Temp_object_Variable) == 0x000000, "Member 'ControlSchemeLayer_C_UpdateGamepadType::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, Temp_object_Variable_1) == 0x000008, "Member 'ControlSchemeLayer_C_UpdateGamepadType::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, Temp_object_Variable_2) == 0x000010, "Member 'ControlSchemeLayer_C_UpdateGamepadType::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, Temp_object_Variable_3) == 0x000018, "Member 'ControlSchemeLayer_C_UpdateGamepadType::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, Temp_object_Variable_4) == 0x000020, "Member 'ControlSchemeLayer_C_UpdateGamepadType::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, CallFunc_GetGamepadSpecificData_ReturnValue) == 0x000028, "Member 'ControlSchemeLayer_C_UpdateGamepadType::CallFunc_GetGamepadSpecificData_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'ControlSchemeLayer_C_UpdateGamepadType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, CallFunc_AddChild_ReturnValue) == 0x000038, "Member 'ControlSchemeLayer_C_UpdateGamepadType::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000040, "Member 'ControlSchemeLayer_C_UpdateGamepadType::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, CallFunc_BooleanOR_ReturnValue) == 0x000041, "Member 'ControlSchemeLayer_C_UpdateGamepadType::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, CallFunc_AddChild_ReturnValue_1) == 0x000048, "Member 'ControlSchemeLayer_C_UpdateGamepadType::CallFunc_AddChild_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, Temp_object_Variable_5) == 0x000050, "Member 'ControlSchemeLayer_C_UpdateGamepadType::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, CallFunc_AddChild_ReturnValue_2) == 0x000058, "Member 'ControlSchemeLayer_C_UpdateGamepadType::CallFunc_AddChild_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, Temp_byte_Variable) == 0x000060, "Member 'ControlSchemeLayer_C_UpdateGamepadType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, CallFunc_AddChild_ReturnValue_3) == 0x000068, "Member 'ControlSchemeLayer_C_UpdateGamepadType::CallFunc_AddChild_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, K2Node_Select_Default) == 0x000070, "Member 'ControlSchemeLayer_C_UpdateGamepadType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ControlSchemeLayer_C_UpdateGamepadType, CallFunc_GetGamepadSpecificData_ReturnValue_1) == 0x000078, "Member 'ControlSchemeLayer_C_UpdateGamepadType::CallFunc_GetGamepadSpecificData_ReturnValue_1' has a wrong offset!");

}

