#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DetectionCrosshair

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass DetectionCrosshair.DetectionCrosshair_C
// 0x00C0 (0x03A8 - 0x02E8)
class UDetectionCrosshair_C final : public URBHUDElementWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       CrosshairFadeIn;                                   // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FadeIn;                                            // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 DarknessDetectionImage;                            // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInvalidationBox*                       InvalidationBox_DetectionCrosshair;                // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NPCAwareImage;                                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NPCAwareImage2;                                    // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           SoundFeedback_First;                               // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           SoundFeedback_Second;                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           SoundFeedback_Third;                               // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               SoundFeedbackGauges;                               // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UStaminaBar3_C*                         StaminaBar3;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 VisualDetectionImage;                              // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         IsInDarknessValue;                                 // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrosshairValue;                                    // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NPCHearingColor;                                   // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NormalColor;                                       // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UTexture2D*>                     VisualDetectionImages;                             // 0x0378(0x0010)(Edit, BlueprintVisible)
	TArray<class UTexture2D*>                     DarknessDetectionImages;                           // 0x0388(0x0010)(Edit, BlueprintVisible)
	float                                         NPCVisualDetectionSmoothed;                        // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DarknessDetectionSmoothed;                         // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DetectedDisplay;                                   // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldShow;                                       // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_DetectionCrosshair(int32 EntryPoint);
	void OnPlayerActionStatusChanged(EPlayerActionStatus Status);
	void Destruct();
	void OnIsAimingThowableChanged(bool NewAimingState);
	void Event_OnWatchedPlayerChanged(class ARBPlayer* OldPlayer, class ARBPlayer* NewPlayer);
	void Event_Show();
	void Event_Hide();
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Update_Crosshair(float DeltaTime);
	void UpdateSoundFeedback(float DeltaTime);
	void Update_CrosshairV2(float DeltaTime);
	void UpdateFeedbackProgressBar(class UProgressBar* FeedbackProgressBar, bool Increasing, float DeltaTime);
	void UpdateVisualDetection();
	void UpdateCrosshairV3(bool ShouldAnimate);

	bool ShouldShow() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DetectionCrosshair_C">();
	}
	static class UDetectionCrosshair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDetectionCrosshair_C>();
	}
};
static_assert(alignof(UDetectionCrosshair_C) == 0x000008, "Wrong alignment on UDetectionCrosshair_C");
static_assert(sizeof(UDetectionCrosshair_C) == 0x0003A8, "Wrong size on UDetectionCrosshair_C");
static_assert(offsetof(UDetectionCrosshair_C, UberGraphFrame) == 0x0002E8, "Member 'UDetectionCrosshair_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, CrosshairFadeIn) == 0x0002F0, "Member 'UDetectionCrosshair_C::CrosshairFadeIn' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, FadeIn) == 0x0002F8, "Member 'UDetectionCrosshair_C::FadeIn' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, DarknessDetectionImage) == 0x000300, "Member 'UDetectionCrosshair_C::DarknessDetectionImage' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, InvalidationBox_DetectionCrosshair) == 0x000308, "Member 'UDetectionCrosshair_C::InvalidationBox_DetectionCrosshair' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, NPCAwareImage) == 0x000310, "Member 'UDetectionCrosshair_C::NPCAwareImage' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, NPCAwareImage2) == 0x000318, "Member 'UDetectionCrosshair_C::NPCAwareImage2' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, SoundFeedback_First) == 0x000320, "Member 'UDetectionCrosshair_C::SoundFeedback_First' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, SoundFeedback_Second) == 0x000328, "Member 'UDetectionCrosshair_C::SoundFeedback_Second' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, SoundFeedback_Third) == 0x000330, "Member 'UDetectionCrosshair_C::SoundFeedback_Third' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, SoundFeedbackGauges) == 0x000338, "Member 'UDetectionCrosshair_C::SoundFeedbackGauges' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, StaminaBar3) == 0x000340, "Member 'UDetectionCrosshair_C::StaminaBar3' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, VisualDetectionImage) == 0x000348, "Member 'UDetectionCrosshair_C::VisualDetectionImage' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, IsInDarknessValue) == 0x000350, "Member 'UDetectionCrosshair_C::IsInDarknessValue' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, CrosshairValue) == 0x000354, "Member 'UDetectionCrosshair_C::CrosshairValue' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, NPCHearingColor) == 0x000358, "Member 'UDetectionCrosshair_C::NPCHearingColor' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, NormalColor) == 0x000368, "Member 'UDetectionCrosshair_C::NormalColor' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, VisualDetectionImages) == 0x000378, "Member 'UDetectionCrosshair_C::VisualDetectionImages' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, DarknessDetectionImages) == 0x000388, "Member 'UDetectionCrosshair_C::DarknessDetectionImages' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, NPCVisualDetectionSmoothed) == 0x000398, "Member 'UDetectionCrosshair_C::NPCVisualDetectionSmoothed' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, DarknessDetectionSmoothed) == 0x00039C, "Member 'UDetectionCrosshair_C::DarknessDetectionSmoothed' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, DetectedDisplay) == 0x0003A0, "Member 'UDetectionCrosshair_C::DetectedDisplay' has a wrong offset!");
static_assert(offsetof(UDetectionCrosshair_C, bShouldShow) == 0x0003A1, "Member 'UDetectionCrosshair_C::bShouldShow' has a wrong offset!");

}

