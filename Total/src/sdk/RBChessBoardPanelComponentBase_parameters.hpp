#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBChessBoardPanelComponentBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.SetPlayerAnimState
// 0x0018 (0x0018 - 0x0000)
struct RBChessBoardPanelComponentBase_C_SetPlayerAnimState final
{
public:
	EChessGamePlayerAnimState                     PlayerAnimState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3932[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChessPanel_GhostAnimBP_C*              CallFunc_GetChessGhostAnimBP_NewParam;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_SetPlayerAnimState) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_SetPlayerAnimState");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_SetPlayerAnimState) == 0x000018, "Wrong size on RBChessBoardPanelComponentBase_C_SetPlayerAnimState");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetPlayerAnimState, PlayerAnimState) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_SetPlayerAnimState::PlayerAnimState' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetPlayerAnimState, CallFunc_GetChessGhostAnimBP_NewParam) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_SetPlayerAnimState::CallFunc_GetChessGhostAnimBP_NewParam' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetPlayerAnimState, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_SetPlayerAnimState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.RefreshAllOtherPiecesPositions
// 0x0028 (0x0028 - 0x0000)
struct RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions final
{
public:
	class URBChessPieceComponent*                 PieceToIgnore;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBChessPieceComponent*                 CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions) == 0x000028, "Wrong size on RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions, PieceToIgnore) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions::PieceToIgnore' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions, Temp_int_Array_Index_Variable) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions, CallFunc_Array_Get_Item) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000021, "Member 'RBChessBoardPanelComponentBase_C_RefreshAllOtherPiecesPositions::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.MovePieceWithHand
// 0x0150 (0x0150 - 0x0000)
struct RBChessBoardPanelComponentBase_C_MovePieceWithHand final
{
public:
	class URBChessPieceComponent*                 Piece;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3933[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3934[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3935[0x5];                                     // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue_1;         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayer1_ReturnValue;                    // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3936[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue_2;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3937[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBoneIndex_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue;             // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00C0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_MovePieceWithHand) == 0x000010, "Wrong alignment on RBChessBoardPanelComponentBase_C_MovePieceWithHand");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_MovePieceWithHand) == 0x000150, "Wrong size on RBChessBoardPanelComponentBase_C_MovePieceWithHand");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, Piece) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::Piece' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, Temp_bool_Variable) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, Temp_bool_Variable_1) == 0x000009, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, Temp_name_Variable) == 0x00000C, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, Temp_name_Variable_1) == 0x000014, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_GetPawnInteracting_ReturnValue) == 0x000020, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_IsLocallyControlled_ReturnValue) == 0x000028, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_BooleanOR_ReturnValue) == 0x00002A, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_GetPawnInteracting_ReturnValue_1) == 0x000030, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_GetPawnInteracting_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000038, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_IsPlayer1_ReturnValue) == 0x000039, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_IsPlayer1_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_GetPawnInteracting_ReturnValue_2) == 0x000040, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_GetPawnInteracting_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, K2Node_DynamicCast_AsRB_Player) == 0x000048, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, K2Node_Select_Default) == 0x000054, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_GetBoneIndex_ReturnValue) == 0x00005C, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_GetBoneIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_GetBoneTransform_ReturnValue) == 0x000060, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_GetBoneTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_BreakTransform_Location) == 0x000090, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, K2Node_Select_Default_1) == 0x0000B4, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_MovePieceWithHand, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000C0, "Member 'RBChessBoardPanelComponentBase_C_MovePieceWithHand::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.SetClockTickingSoundActivated
// 0x002C (0x002C - 0x0000)
struct RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3938[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEventGlobal_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0018(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEventGlobal_ReturnValue_1;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated) == 0x000004, "Wrong alignment on RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated) == 0x00002C, "Wrong size on RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated, bActivated) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated::bActivated' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated, Temp_delegate_Variable) == 0x000004, "Member 'RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated, CallFunc_PostEventGlobal_ReturnValue) == 0x000014, "Member 'RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated::CallFunc_PostEventGlobal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated, Temp_delegate_Variable_1) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated, CallFunc_PostEventGlobal_ReturnValue_1) == 0x000028, "Member 'RBChessBoardPanelComponentBase_C_SetClockTickingSoundActivated::CallFunc_PostEventGlobal_ReturnValue_1' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.ManageClockTickingSound
// 0x0030 (0x0030 - 0x0000)
struct RBChessBoardPanelComponentBase_C_ManageClockTickingSound final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3939[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              CallFunc_GetPlayerInteracting_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393A[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              CallFunc_GetPlayerInteracting_ReturnValue_1;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue;     // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393B[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTeamRemainingTime_ReturnValue;         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_ManageClockTickingSound");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound) == 0x000030, "Wrong size on RBChessBoardPanelComponentBase_C_ManageClockTickingSound");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_GetPlayerInteracting_ReturnValue) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_GetPlayerInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_GetPlayerInteracting_ReturnValue_1) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_GetPlayerInteracting_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_IsLocallyControlled_ReturnValue) == 0x000020, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue) == 0x000021, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_IsValid_ReturnValue_1) == 0x000023, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000025, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_GetTeamRemainingTime_ReturnValue) == 0x000028, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_GetTeamRemainingTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00002C, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageClockTickingSound, CallFunc_BooleanAND_ReturnValue_1) == 0x00002D, "Member 'RBChessBoardPanelComponentBase_C_ManageClockTickingSound::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.OnChessGameStateChangedEvent
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponentBase_C_OnChessGameStateChangedEvent final
{
public:
	EChessGameState                               ChessGameState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_OnChessGameStateChangedEvent) == 0x000001, "Wrong alignment on RBChessBoardPanelComponentBase_C_OnChessGameStateChangedEvent");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_OnChessGameStateChangedEvent) == 0x000001, "Wrong size on RBChessBoardPanelComponentBase_C_OnChessGameStateChangedEvent");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnChessGameStateChangedEvent, ChessGameState) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_OnChessGameStateChangedEvent::ChessGameState' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.SnapGhostAnimsToState
// 0x0038 (0x0038 - 0x0000)
struct RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState final
{
public:
	class ARBPawn*                                RBPawn;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393D[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393E[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChessPanel_GhostAnimBP_C*              CallFunc_GetChessGhostAnimBP_NewParam;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState) == 0x000038, "Wrong size on RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState, RBPawn) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState::RBPawn' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState, K2Node_DynamicCast_AsRB_Player) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000020, "Member 'RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState, CallFunc_IsValid_ReturnValue_1) == 0x000028, "Member 'RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState, CallFunc_GetChessGhostAnimBP_NewParam) == 0x000030, "Member 'RBChessBoardPanelComponentBase_C_SnapGhostAnimsToState::CallFunc_GetChessGhostAnimBP_NewParam' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.OnRep_bWon
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponentBase_C_OnRep_bWon final
{
public:
	class UChessPanel_GhostAnimBP_C*              CallFunc_GetChessGhostAnimBP_NewParam;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_OnRep_bWon) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_OnRep_bWon");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_OnRep_bWon) == 0x000008, "Wrong size on RBChessBoardPanelComponentBase_C_OnRep_bWon");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnRep_bWon, CallFunc_GetChessGhostAnimBP_NewParam) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_OnRep_bWon::CallFunc_GetChessGhostAnimBP_NewParam' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.OnRep_bGameTied
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponentBase_C_OnRep_bGameTied final
{
public:
	class UChessPanel_GhostAnimBP_C*              CallFunc_GetChessGhostAnimBP_NewParam;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_OnRep_bGameTied) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_OnRep_bGameTied");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_OnRep_bGameTied) == 0x000008, "Wrong size on RBChessBoardPanelComponentBase_C_OnRep_bGameTied");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnRep_bGameTied, CallFunc_GetChessGhostAnimBP_NewParam) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_OnRep_bGameTied::CallFunc_GetChessGhostAnimBP_NewParam' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.GetChessGhostAnimBP
// 0x0038 (0x0038 - 0x0000)
struct RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP final
{
public:
	class UChessPanel_GhostAnimBP_C*              NewParam;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_393F[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChessPanel_GhostAnimBP_C*              K2Node_DynamicCast_AsChess_Panel_Ghost_Anim_BP;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP) == 0x000038, "Wrong size on RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP, NewParam) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP::NewParam' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP, CallFunc_GetPawnInteracting_ReturnValue) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP, K2Node_DynamicCast_AsRB_Player) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000020, "Member 'RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP, K2Node_DynamicCast_AsChess_Panel_Ghost_Anim_BP) == 0x000028, "Member 'RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP::K2Node_DynamicCast_AsChess_Panel_Ghost_Anim_BP' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'RBChessBoardPanelComponentBase_C_GetChessGhostAnimBP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.OnChessGameEndReasonChanged
// 0x0018 (0x0018 - 0x0000)
struct RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged final
{
public:
	EChessGameEndReason                           ChessGameEndReason;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EChessTeam                                    WinningTeam;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3940[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UChessPanel_GhostAnimBP_C*              CallFunc_GetChessGhostAnimBP_NewParam;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEndReasonDrawType_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged) == 0x000018, "Wrong size on RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged, ChessGameEndReason) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged::ChessGameEndReason' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged, WinningTeam) == 0x000001, "Member 'RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged::WinningTeam' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged, CallFunc_GetChessGhostAnimBP_NewParam) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged::CallFunc_GetChessGhostAnimBP_NewParam' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged, CallFunc_IsEndReasonDrawType_ReturnValue) == 0x000011, "Member 'RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged::CallFunc_IsEndReasonDrawType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'RBChessBoardPanelComponentBase_C_OnChessGameEndReasonChanged::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.ChessGameTurnTypeChanged
// 0x0040 (0x0040 - 0x0000)
struct RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged final
{
public:
	EChessGameTurnType                            NewTurnType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3941[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBChessBoard*                          Param_ChessBoard;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3942[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBChessBoardBase_C*                    K2Node_DynamicCast_AsRB_Chess_Board_Base;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3943[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue;     // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged) == 0x000040, "Wrong size on RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, NewTurnType) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::NewTurnType' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, Param_ChessBoard) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::Param_ChessBoard' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, CallFunc_GetPawnInteracting_ReturnValue) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, K2Node_DynamicCast_AsRB_Chess_Board_Base) == 0x000020, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::K2Node_DynamicCast_AsRB_Chess_Board_Base' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, K2Node_DynamicCast_AsRB_Player) == 0x000030, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, CallFunc_IsLocallyControlled_ReturnValue) == 0x000039, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue) == 0x00003A, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, CallFunc_Not_PreBool_ReturnValue) == 0x00003B, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00003C, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, CallFunc_BooleanAND_ReturnValue) == 0x00003D, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged, CallFunc_BooleanAND_ReturnValue_1) == 0x00003E, "Member 'RBChessBoardPanelComponentBase_C_ChessGameTurnTypeChanged::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.FlashKingRed
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponentBase_C_FlashKingRed final
{
public:
	float                                         CallFunc_GetElapsedTime_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_FlashKingRed) == 0x000004, "Wrong alignment on RBChessBoardPanelComponentBase_C_FlashKingRed");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_FlashKingRed) == 0x000008, "Wrong size on RBChessBoardPanelComponentBase_C_FlashKingRed");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_FlashKingRed, CallFunc_GetElapsedTime_ReturnValue) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_FlashKingRed::CallFunc_GetElapsedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_FlashKingRed, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'RBChessBoardPanelComponentBase_C_FlashKingRed::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.ManageHoldingPiece
// 0x0180 (0x0180 - 0x0000)
struct RBChessBoardPanelComponentBase_C_ManageHoldingPiece final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class FName                                   Temp_name_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventOnActor_ReturnValue;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3944[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URBChessPieceComponent*                 CallFunc_GetHoldingPiece_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameInProgress_ReturnValue;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3945[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBChessPieceComponent*                 CallFunc_GetHoldingPiece_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBChessPieceComponent*                 CallFunc_GetHoldingPiece_ReturnValue_2;            // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3946[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayer1_ReturnValue;                    // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3947[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue_1;         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3948[0x2];                                     // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable_1;                              // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3949[0x3];                                     // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetBoneIndex_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394A[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UChessPanel_GhostAnimBP_C*              CallFunc_GetChessGhostAnimBP_NewParam;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetBoneTransform_ReturnValue;             // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_394B[0x3];                                     // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00E8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece) == 0x000010, "Wrong alignment on RBChessBoardPanelComponentBase_C_ManageHoldingPiece");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece) == 0x000180, "Wrong size on RBChessBoardPanelComponentBase_C_ManageHoldingPiece");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, Temp_delegate_Variable) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, Temp_name_Variable) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_PostEventOnActor_ReturnValue) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_PostEventOnActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, Temp_bool_Variable) == 0x00001C, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_GetHoldingPiece_ReturnValue) == 0x000020, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_GetHoldingPiece_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_IsGameInProgress_ReturnValue) == 0x000028, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_IsGameInProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_GetHoldingPiece_ReturnValue_1) == 0x000030, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_GetHoldingPiece_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_GetHoldingPiece_ReturnValue_2) == 0x000038, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_GetHoldingPiece_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_GetPawnInteracting_ReturnValue) == 0x000048, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_IsLocallyControlled_ReturnValue) == 0x000050, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_IsValid_ReturnValue_1) == 0x000051, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_IsValid_ReturnValue_2) == 0x000052, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_IsPlayer1_ReturnValue) == 0x000053, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_IsPlayer1_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_GetPawnInteracting_ReturnValue_1) == 0x000058, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_GetPawnInteracting_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, K2Node_DynamicCast_AsRB_Player) == 0x000060, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_IsValid_ReturnValue_3) == 0x000069, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, Temp_name_Variable_1) == 0x00006C, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000074, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, K2Node_Select_Default) == 0x000078, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_GetBoneIndex_ReturnValue) == 0x000080, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_GetBoneIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_GetChessGhostAnimBP_NewParam) == 0x000088, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_GetChessGhostAnimBP_NewParam' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_GetBoneTransform_ReturnValue) == 0x000090, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_GetBoneTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_IsValid_ReturnValue_4) == 0x0000C0, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_BreakTransform_Location) == 0x0000C4, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_BreakTransform_Rotation) == 0x0000D0, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_BreakTransform_Scale) == 0x0000DC, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000E8, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ManageHoldingPiece, CallFunc_IsValid_ReturnValue_5) == 0x000170, "Member 'RBChessBoardPanelComponentBase_C_ManageHoldingPiece::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.TryRemoveHud
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponentBase_C_TryRemoveHud final
{
public:
	bool                                          Player1;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_TryRemoveHud) == 0x000001, "Wrong alignment on RBChessBoardPanelComponentBase_C_TryRemoveHud");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_TryRemoveHud) == 0x000001, "Wrong size on RBChessBoardPanelComponentBase_C_TryRemoveHud");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_TryRemoveHud, Player1) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_TryRemoveHud::Player1' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.ShowHUD
// 0x0040 (0x0040 - 0x0000)
struct RBChessBoardPanelComponentBase_C_ShowHUD final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_394C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChessMinigameWidget_C*                 CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_394D[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue;     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_394E[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBChessBoardBase_C*                    K2Node_DynamicCast_AsRB_Chess_Board_Base;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_ShowHUD) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_ShowHUD");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_ShowHUD) == 0x000040, "Wrong size on RBChessBoardPanelComponentBase_C_ShowHUD");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShowHUD, Show) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_ShowHUD::Show' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShowHUD, CallFunc_Create_ReturnValue) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_ShowHUD::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShowHUD, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_ShowHUD::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShowHUD, CallFunc_GetPawnInteracting_ReturnValue) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_ShowHUD::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShowHUD, K2Node_DynamicCast_AsRB_Player) == 0x000020, "Member 'RBChessBoardPanelComponentBase_C_ShowHUD::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShowHUD, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RBChessBoardPanelComponentBase_C_ShowHUD::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShowHUD, CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue) == 0x000029, "Member 'RBChessBoardPanelComponentBase_C_ShowHUD::CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShowHUD, K2Node_DynamicCast_AsRB_Chess_Board_Base) == 0x000030, "Member 'RBChessBoardPanelComponentBase_C_ShowHUD::K2Node_DynamicCast_AsRB_Chess_Board_Base' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShowHUD, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'RBChessBoardPanelComponentBase_C_ShowHUD::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.SetSpinningPromotingPiece
// 0x0018 (0x0018 - 0x0000)
struct RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece final
{
public:
	EChessPieceType                               PieceType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_394F[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBChessBoardBase_C*                    K2Node_DynamicCast_AsRB_Chess_Board_Base;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece) == 0x000018, "Wrong size on RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece, PieceType) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece::PieceType' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece, K2Node_DynamicCast_AsRB_Chess_Board_Base) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece::K2Node_DynamicCast_AsRB_Chess_Board_Base' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'RBChessBoardPanelComponentBase_C_SetSpinningPromotingPiece::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.PromotingPieceFocusChanged
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponentBase_C_PromotingPieceFocusChanged final
{
public:
	EChessPieceType                               PieceType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_PromotingPieceFocusChanged) == 0x000001, "Wrong alignment on RBChessBoardPanelComponentBase_C_PromotingPieceFocusChanged");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_PromotingPieceFocusChanged) == 0x000001, "Wrong size on RBChessBoardPanelComponentBase_C_PromotingPieceFocusChanged");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_PromotingPieceFocusChanged, PieceType) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_PromotingPieceFocusChanged::PieceType' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct RBChessBoardPanelComponentBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_ReceiveTick) == 0x000004, "Wrong alignment on RBChessBoardPanelComponentBase_C_ReceiveTick");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_ReceiveTick) == 0x000004, "Wrong size on RBChessBoardPanelComponentBase_C_ReceiveTick");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.Event_PlayerEnteredGame
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponentBase_C_Event_PlayerEnteredGame final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_Event_PlayerEnteredGame) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_Event_PlayerEnteredGame");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_Event_PlayerEnteredGame) == 0x000008, "Wrong size on RBChessBoardPanelComponentBase_C_Event_PlayerEnteredGame");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_Event_PlayerEnteredGame, Player) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_Event_PlayerEnteredGame::Player' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.Event_PlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponentBase_C_Event_PlayerLeftGame final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_Event_PlayerLeftGame) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_Event_PlayerLeftGame");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_Event_PlayerLeftGame) == 0x000008, "Wrong size on RBChessBoardPanelComponentBase_C_Event_PlayerLeftGame");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_Event_PlayerLeftGame, Player) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_Event_PlayerLeftGame::Player' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.Event_PlayerDropPieceAt
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponentBase_C_Event_PlayerDropPieceAt final
{
public:
	struct FVector2D                              Coords;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_Event_PlayerDropPieceAt) == 0x000004, "Wrong alignment on RBChessBoardPanelComponentBase_C_Event_PlayerDropPieceAt");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_Event_PlayerDropPieceAt) == 0x000008, "Wrong size on RBChessBoardPanelComponentBase_C_Event_PlayerDropPieceAt");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_Event_PlayerDropPieceAt, Coords) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_Event_PlayerDropPieceAt::Coords' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.Event_ShowMoveLeavesOwnKingChecked
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponentBase_C_Event_ShowMoveLeavesOwnKingChecked final
{
public:
	class URBChessPieceComponent*                 KingPiece;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_Event_ShowMoveLeavesOwnKingChecked) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_Event_ShowMoveLeavesOwnKingChecked");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_Event_ShowMoveLeavesOwnKingChecked) == 0x000008, "Wrong size on RBChessBoardPanelComponentBase_C_Event_ShowMoveLeavesOwnKingChecked");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_Event_ShowMoveLeavesOwnKingChecked, KingPiece) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_Event_ShowMoveLeavesOwnKingChecked::KingPiece' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.OnChessGameTurnTypeChanged_Event_0
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponentBase_C_OnChessGameTurnTypeChanged_Event_0 final
{
public:
	EChessGameTurnType                            ChessGameTurnType;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_OnChessGameTurnTypeChanged_Event_0) == 0x000001, "Wrong alignment on RBChessBoardPanelComponentBase_C_OnChessGameTurnTypeChanged_Event_0");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_OnChessGameTurnTypeChanged_Event_0) == 0x000001, "Wrong size on RBChessBoardPanelComponentBase_C_OnChessGameTurnTypeChanged_Event_0");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_OnChessGameTurnTypeChanged_Event_0, ChessGameTurnType) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_OnChessGameTurnTypeChanged_Event_0::ChessGameTurnType' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.BP_OnPawnInteractingChanged
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponentBase_C_BP_OnPawnInteractingChanged final
{
public:
	class ARBPawn*                                NewPawnInteracting;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_BP_OnPawnInteractingChanged) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_BP_OnPawnInteractingChanged");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_BP_OnPawnInteractingChanged) == 0x000008, "Wrong size on RBChessBoardPanelComponentBase_C_BP_OnPawnInteractingChanged");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_BP_OnPawnInteractingChanged, NewPawnInteracting) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_BP_OnPawnInteractingChanged::NewPawnInteracting' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponentBase_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on RBChessBoardPanelComponentBase_C_ReceiveEndPlay");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_ReceiveEndPlay) == 0x000001, "Wrong size on RBChessBoardPanelComponentBase_C_ReceiveEndPlay");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.ExecuteUbergraph_RBChessBoardPanelComponentBase
// 0x01A0 (0x01A0 - 0x0000)
struct RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3950[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0008(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(EChessGameTurnType ChessGameTurnType)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEventOnActor_ReturnValue;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x002C(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x003C(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEventGlobal_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventGlobal_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_3;                          // 0x0054(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	EChessPieceType                               K2Node_CustomEvent_PieceType;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3951[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEventGlobal_ReturnValue_2;            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult;    // 0x0080(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ARBPlayer*                              K2Node_Event_player_1;                             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_Event_player;                               // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue;     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue_1;   // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlledOrSpectated_ReturnValue; // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlledOrSpectated_ReturnValue_1; // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector2D                              K2Node_Event_coords;                               // 0x0120(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBChessPieceComponent*                 K2Node_Event_kingPiece;                            // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EChessPieceType PieceType)>    K2Node_CreateDelegate_OutputDelegate_1;            // 0x0130(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetGameTime_ReturnValue;                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EChessGameTurnType                            K2Node_CustomEvent_ChessGameTurnType;              // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3952[0x3];                                     // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EChessGameEndReason ChessGameEndReason, EChessTeam WinningTeam)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0148(0x0010)(ZeroConstructor, NoDestructor)
	class ARBPawn*                                K2Node_Event_newPawnInteracting;                   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3953[0x2];                                     // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EChessGameState ChessGameState)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0164(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3954[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              CallFunc_GetPlayerInteracting_ReturnValue;         // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3955[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UChessPanel_GhostAnimBP_C*              K2Node_DynamicCast_AsChess_Panel_Ghost_Anim_BP;    // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase) == 0x0001A0, "Wrong size on RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, EntryPoint) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_Event_EndPlayReason) == 0x000004, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, Temp_delegate_Variable) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_PostEventOnActor_ReturnValue) == 0x000028, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_PostEventOnActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, Temp_delegate_Variable_1) == 0x00002C, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, Temp_delegate_Variable_2) == 0x00003C, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_PostEventGlobal_ReturnValue) == 0x00004C, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_PostEventGlobal_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_PostEventGlobal_ReturnValue_1) == 0x000050, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_PostEventGlobal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, Temp_delegate_Variable_3) == 0x000054, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::Temp_delegate_Variable_3' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_CustomEvent_PieceType) == 0x000064, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_CustomEvent_PieceType' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_PostEventGlobal_ReturnValue_2) == 0x000068, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_PostEventGlobal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_Event_DeltaSeconds) == 0x00006C, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_MakeRotator_ReturnValue) == 0x000074, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_K2_AddRelativeRotation_SweepHitResult) == 0x000080, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_K2_AddRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_Event_player_1) == 0x000108, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_Event_player) == 0x000110, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue) == 0x000118, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue_1) == 0x000119, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_BP_IsFlaggedAsFakePlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_Not_PreBool_ReturnValue) == 0x00011A, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_Not_PreBool_ReturnValue_1) == 0x00011B, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_IsLocallyControlledOrSpectated_ReturnValue) == 0x00011C, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_IsLocallyControlledOrSpectated_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_IsLocallyControlledOrSpectated_ReturnValue_1) == 0x00011D, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_IsLocallyControlledOrSpectated_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_BooleanAND_ReturnValue) == 0x00011E, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_BooleanAND_ReturnValue_1) == 0x00011F, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_Event_coords) == 0x000120, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_Event_coords' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_Event_kingPiece) == 0x000128, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_Event_kingPiece' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_CreateDelegate_OutputDelegate_1) == 0x000130, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_GetGameTime_ReturnValue) == 0x000140, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_GetGameTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_CustomEvent_ChessGameTurnType) == 0x000144, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_CustomEvent_ChessGameTurnType' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_CreateDelegate_OutputDelegate_2) == 0x000148, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_Event_newPawnInteracting) == 0x000158, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_Event_newPawnInteracting' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_IsValid_ReturnValue) == 0x000160, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_IsDedicatedServer_ReturnValue) == 0x000161, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_CreateDelegate_OutputDelegate_3) == 0x000164, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_GetPlayerInteracting_ReturnValue) == 0x000178, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_GetPlayerInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000180, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, CallFunc_IsValid_ReturnValue_1) == 0x000188, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_DynamicCast_AsChess_Panel_Ghost_Anim_BP) == 0x000190, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_DynamicCast_AsChess_Panel_Ghost_Anim_BP' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase, K2Node_DynamicCast_bSuccess) == 0x000198, "Member 'RBChessBoardPanelComponentBase_C_ExecuteUbergraph_RBChessBoardPanelComponentBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.GetPingEnabled
// 0x0098 (0x0098 - 0x0000)
struct RBChessBoardPanelComponentBase_C_GetPingEnabled final
{
public:
	class ARBPlayer*                              PingOwner;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          OutIsEnabled;                                      // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x0091(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_GetPingEnabled) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_GetPingEnabled");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_GetPingEnabled) == 0x000098, "Wrong size on RBChessBoardPanelComponentBase_C_GetPingEnabled");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPingEnabled, PingOwner) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_GetPingEnabled::PingOwner' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPingEnabled, HitResult) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_GetPingEnabled::HitResult' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPingEnabled, OutIsEnabled) == 0x000090, "Member 'RBChessBoardPanelComponentBase_C_GetPingEnabled::OutIsEnabled' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPingEnabled, ReturnValue) == 0x000091, "Member 'RBChessBoardPanelComponentBase_C_GetPingEnabled::ReturnValue' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.GetPingItemName
// 0x0020 (0x0020 - 0x0000)
struct RBChessBoardPanelComponentBase_C_GetPingItemName final
{
public:
	class FText                                   OutName;                                           // 0x0000(0x0018)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_GetPingItemName) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_GetPingItemName");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_GetPingItemName) == 0x000020, "Wrong size on RBChessBoardPanelComponentBase_C_GetPingItemName");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPingItemName, OutName) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_GetPingItemName::OutName' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPingItemName, ReturnValue) == 0x000018, "Member 'RBChessBoardPanelComponentBase_C_GetPingItemName::ReturnValue' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.GetPlayerPingData
// 0x00C0 (0x00C0 - 0x0000)
struct RBChessBoardPanelComponentBase_C_GetPlayerPingData final
{
public:
	class ARBPlayer*                              PingOwner;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FPlayerPingData                        OutData;                                           // 0x0090(0x0028)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_GetPlayerPingData) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_GetPlayerPingData");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_GetPlayerPingData) == 0x0000C0, "Wrong size on RBChessBoardPanelComponentBase_C_GetPlayerPingData");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPlayerPingData, PingOwner) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_GetPlayerPingData::PingOwner' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPlayerPingData, HitResult) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_GetPlayerPingData::HitResult' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPlayerPingData, OutData) == 0x000090, "Member 'RBChessBoardPanelComponentBase_C_GetPlayerPingData::OutData' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPlayerPingData, ReturnValue) == 0x0000B8, "Member 'RBChessBoardPanelComponentBase_C_GetPlayerPingData::ReturnValue' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.GetPlayerPingWorldLocation
// 0x00A0 (0x00A0 - 0x0000)
struct RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation final
{
public:
	class ARBPlayer*                              PingOwner;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                OutLocation;                                       // 0x0090(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x009C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation) == 0x000008, "Wrong alignment on RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation) == 0x0000A0, "Wrong size on RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation, PingOwner) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation::PingOwner' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation, HitResult) == 0x000008, "Member 'RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation::HitResult' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation, OutLocation) == 0x000090, "Member 'RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation, ReturnValue) == 0x00009C, "Member 'RBChessBoardPanelComponentBase_C_GetPlayerPingWorldLocation::ReturnValue' has a wrong offset!");

// Function RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C.ShouldBPTick
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponentBase_C_ShouldBPTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBChessBoardPanelComponentBase_C_ShouldBPTick) == 0x000001, "Wrong alignment on RBChessBoardPanelComponentBase_C_ShouldBPTick");
static_assert(sizeof(RBChessBoardPanelComponentBase_C_ShouldBPTick) == 0x000001, "Wrong size on RBChessBoardPanelComponentBase_C_ShouldBPTick");
static_assert(offsetof(RBChessBoardPanelComponentBase_C_ShouldBPTick, ReturnValue) == 0x000000, "Member 'RBChessBoardPanelComponentBase_C_ShouldBPTick::ReturnValue' has a wrong offset!");

}

