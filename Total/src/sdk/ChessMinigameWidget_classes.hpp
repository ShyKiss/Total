#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChessMinigameWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "OPP_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ChessMinigameWidget.ChessMinigameWidget_C
// 0x00D0 (0x0330 - 0x0260)
class UChessMinigameWidget_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       GameOuttro;                                        // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       GameIntroAnim;                                     // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             ExitingText_TXT;                                   // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               GameNotificationMessageOverlay;                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_212;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               LeavingGameOverlay;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                LocalTeamBorder;                                   // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LocalTeamName_TXT;                                 // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               LocalTeamNameOverlay;                              // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LocalTeamRating_TXT;                               // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             LocalTeamTime_TXT_1;                               // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MatchCountdownText;                                // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Notification_TXT;                                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             OpponentName_TXT;                                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                OpposingTeamBorder;                                // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OpposingTeamNameOverlay;                           // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             OpposingTeamRating_TXT;                            // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             OpposingTeamTime_TXT;                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_162;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               RoundStartedCountdownOverlay;                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_160;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               WaitingForPlayerOverlay;                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ARBChessBoardBase_C*                    ChessBoard;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBChessBoardPanelComponent*            LocalPanel;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastExitingTimestamp;                              // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void RefreshPlayersRating();
	class FText Get_WaitingForPlayer_TXT_1_Text_0();
	class FText Get_MatchCountdownText_Text_0();
	float GetExitingPercent();
	void OnExitingChange(bool bExiting, float StartExitTimestamp);
	void SetBindLocalPanel(bool bBind);
	class FString GetCroppedName(const class FString& Param_Name, int32 MaxChars);
	void SetupPlayerNames();
	void OnPlayerConnectionEvent(class ARBPlayer* Player);
	void OnChessEndReasonChanged(EChessGameEndReason ChessGameEndReason, EChessTeam WinningTeam);
	void ChessGameTeamTurnChanged(EChessTeam Team);
	void ResetGame();
	void PlayOuttro();
	void PlayStartGame();
	void Play_Intro();
	class FText GetOpposingTeamTime();
	class FText GetLocalTeamTime();
	void OnChessGameStateChanged(EChessGameState ChessGameState);
	void Init(class ARBChessBoardBase_C* Param_ChessBoard, class URBChessBoardPanelComponent* Param_LocalPanel);
	void Construct();
	void BindEvents();
	void UnbindEvents();
	void Destruct();
	void ExecuteUbergraph_ChessMinigameWidget(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChessMinigameWidget_C">();
	}
	static class UChessMinigameWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChessMinigameWidget_C>();
	}
};
static_assert(alignof(UChessMinigameWidget_C) == 0x000008, "Wrong alignment on UChessMinigameWidget_C");
static_assert(sizeof(UChessMinigameWidget_C) == 0x000330, "Wrong size on UChessMinigameWidget_C");
static_assert(offsetof(UChessMinigameWidget_C, UberGraphFrame) == 0x000260, "Member 'UChessMinigameWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, GameOuttro) == 0x000268, "Member 'UChessMinigameWidget_C::GameOuttro' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, GameIntroAnim) == 0x000270, "Member 'UChessMinigameWidget_C::GameIntroAnim' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, ExitingText_TXT) == 0x000278, "Member 'UChessMinigameWidget_C::ExitingText_TXT' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, GameNotificationMessageOverlay) == 0x000280, "Member 'UChessMinigameWidget_C::GameNotificationMessageOverlay' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, Image_212) == 0x000288, "Member 'UChessMinigameWidget_C::Image_212' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, LeavingGameOverlay) == 0x000290, "Member 'UChessMinigameWidget_C::LeavingGameOverlay' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, LocalTeamBorder) == 0x000298, "Member 'UChessMinigameWidget_C::LocalTeamBorder' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, LocalTeamName_TXT) == 0x0002A0, "Member 'UChessMinigameWidget_C::LocalTeamName_TXT' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, LocalTeamNameOverlay) == 0x0002A8, "Member 'UChessMinigameWidget_C::LocalTeamNameOverlay' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, LocalTeamRating_TXT) == 0x0002B0, "Member 'UChessMinigameWidget_C::LocalTeamRating_TXT' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, LocalTeamTime_TXT_1) == 0x0002B8, "Member 'UChessMinigameWidget_C::LocalTeamTime_TXT_1' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, MatchCountdownText) == 0x0002C0, "Member 'UChessMinigameWidget_C::MatchCountdownText' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, Notification_TXT) == 0x0002C8, "Member 'UChessMinigameWidget_C::Notification_TXT' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, OpponentName_TXT) == 0x0002D0, "Member 'UChessMinigameWidget_C::OpponentName_TXT' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, OpposingTeamBorder) == 0x0002D8, "Member 'UChessMinigameWidget_C::OpposingTeamBorder' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, OpposingTeamNameOverlay) == 0x0002E0, "Member 'UChessMinigameWidget_C::OpposingTeamNameOverlay' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, OpposingTeamRating_TXT) == 0x0002E8, "Member 'UChessMinigameWidget_C::OpposingTeamRating_TXT' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, OpposingTeamTime_TXT) == 0x0002F0, "Member 'UChessMinigameWidget_C::OpposingTeamTime_TXT' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, ProgressBar_162) == 0x0002F8, "Member 'UChessMinigameWidget_C::ProgressBar_162' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, RoundStartedCountdownOverlay) == 0x000300, "Member 'UChessMinigameWidget_C::RoundStartedCountdownOverlay' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, TextBlock_160) == 0x000308, "Member 'UChessMinigameWidget_C::TextBlock_160' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, WaitingForPlayerOverlay) == 0x000310, "Member 'UChessMinigameWidget_C::WaitingForPlayerOverlay' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, ChessBoard) == 0x000318, "Member 'UChessMinigameWidget_C::ChessBoard' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, LocalPanel) == 0x000320, "Member 'UChessMinigameWidget_C::LocalPanel' has a wrong offset!");
static_assert(offsetof(UChessMinigameWidget_C, LastExitingTimestamp) == 0x000328, "Member 'UChessMinigameWidget_C::LastExitingTimestamp' has a wrong offset!");

}

