#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OverheadInfo

#include "Basic.hpp"

#include "OverheadInfo_classes.hpp"
#include "OverheadInfo_parameters.hpp"


namespace SDK
{

// Function OverheadInfo.OverheadInfo_C.ExecuteUbergraph_OverheadInfo
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverheadInfo_C::ExecuteUbergraph_OverheadInfo(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "ExecuteUbergraph_OverheadInfo");

	Params::OverheadInfo_C_ExecuteUbergraph_OverheadInfo Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OverheadInfo.OverheadInfo_C.Event_Hide
// (Event, Public, BlueprintEvent)

void UOverheadInfo_C::Event_Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.Event_Show
// (Event, Public, BlueprintEvent)

void UOverheadInfo_C::Event_Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_Show");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UOverheadInfo_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.UpdateTradeItem
// (Public, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::UpdateTradeItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "UpdateTradeItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.SetImposterName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CopiedName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UOverheadInfo_C::SetImposterName(const class FString& CopiedName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "SetImposterName");

	Params::OverheadInfo_C_SetImposterName Parms{};

	Parms.CopiedName = std::move(CopiedName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function OverheadInfo.OverheadInfo_C.InithHealthBarVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::InithHealthBarVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "InithHealthBarVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.UpdatePartyState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::UpdatePartyState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "UpdatePartyState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.UpdateElementVisibility
// (Public, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::UpdateElementVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "UpdateElementVisibility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.UpdateActiveSkillType
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::UpdateActiveSkillType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "UpdateActiveSkillType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.UpdateDistanceEffects_DEPRECATED_NOT_USED
// (Public, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::UpdateDistanceEffects_DEPRECATED_NOT_USED()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "UpdateDistanceEffects_DEPRECATED_NOT_USED");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.UpdateDisplay_old_DEPRECATED_NOT_USED
// (Public, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::UpdateDisplay_old_DEPRECATED_NOT_USED()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "UpdateDisplay_old_DEPRECATED_NOT_USED");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.Event_HUDSettingsUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::Event_HUDSettingsUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_HUDSettingsUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.Event_PlayerPartyStateUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::Event_PlayerPartyStateUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_PlayerPartyStateUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.Event_CurrentLoadoutChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::Event_CurrentLoadoutChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_CurrentLoadoutChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.Event_PlayerMaxHealthChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewMaxHealth                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverheadInfo_C::Event_PlayerMaxHealthChanged(float NewMaxHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_PlayerMaxHealthChanged");

	Params::OverheadInfo_C_Event_PlayerMaxHealthChanged Parms{};

	Parms.NewMaxHealth = NewMaxHealth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OverheadInfo.OverheadInfo_C.Event_PlayerIndicatorTypeChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerIndicatorType                    PlayerIndicatorType                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverheadInfo_C::Event_PlayerIndicatorTypeChanged(EPlayerIndicatorType PlayerIndicatorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_PlayerIndicatorTypeChanged");

	Params::OverheadInfo_C_Event_PlayerIndicatorTypeChanged Parms{};

	Parms.PlayerIndicatorType = PlayerIndicatorType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OverheadInfo.OverheadInfo_C.Event_PlayerStateUpdated
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::Event_PlayerStateUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_PlayerStateUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.Event_ImposterUpdated
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UOverheadInfo_C::Event_ImposterUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_ImposterUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OverheadInfo.OverheadInfo_C.Event_PlayerHealthChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewHealth                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSkipAnims                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UOverheadInfo_C::Event_PlayerHealthChanged(float NewHealth, bool bSkipAnims)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_PlayerHealthChanged");

	Params::OverheadInfo_C_Event_PlayerHealthChanged Parms{};

	Parms.NewHealth = NewHealth;
	Parms.bSkipAnims = bSkipAnims;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OverheadInfo.OverheadInfo_C.Event_InventoryUpdated
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInventoryUpdateEventType               InventoryEventType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverheadInfo_C::Event_InventoryUpdated(EInventoryUpdateEventType InventoryEventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "Event_InventoryUpdated");

	Params::OverheadInfo_C_Event_InventoryUpdated Parms{};

	Parms.InventoryEventType = InventoryEventType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OverheadInfo.OverheadInfo_C.UpdateActiveSkillIconDisplay
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EActiveSkillType                        Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UOverheadInfo_C::UpdateActiveSkillIconDisplay(EActiveSkillType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OverheadInfo_C", "UpdateActiveSkillIconDisplay");

	Params::OverheadInfo_C_UpdateActiveSkillIconDisplay Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}

}

