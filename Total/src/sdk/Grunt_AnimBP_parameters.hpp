#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Grunt_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function grunt_AnimBP.grunt_AnimBP_C.ExecuteUbergraph_grunt_AnimBP
// 0x0058 (0x0058 - 0x0000)
struct Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeToRange_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeToRange_ReturnValue_1;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldReactToLight_ShouldReactToLight;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30B9[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldAimWeapon_AimWeapon;                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30BA[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30BB[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBNPC*                                 K2Node_DynamicCast_AsRB_NPC;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP) == 0x000008, "Wrong alignment on Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP");
static_assert(sizeof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP) == 0x000058, "Wrong size on Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, EntryPoint) == 0x000000, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_RandomFloatInRange_ReturnValue) == 0x000004, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000008, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_NormalizeToRange_ReturnValue) == 0x000010, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, K2Node_Event_DeltaTimeX) == 0x000018, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_NormalizeToRange_ReturnValue_1) == 0x00001C, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_NormalizeToRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000020, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_ShouldReactToLight_ShouldReactToLight) == 0x000028, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_ShouldReactToLight_ShouldReactToLight' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_FInterpTo_ReturnValue) == 0x00002C, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_ShouldAimWeapon_AimWeapon) == 0x000030, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_ShouldAimWeapon_AimWeapon' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000034, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000038, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_FInterpTo_ReturnValue_1) == 0x000040, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, K2Node_DynamicCast_AsRB_NPC) == 0x000048, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::K2Node_DynamicCast_AsRB_NPC' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_IsValid_ReturnValue) == 0x000051, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000052, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000053, "Member 'Grunt_AnimBP_C_ExecuteUbergraph_grunt_AnimBP::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function grunt_AnimBP.grunt_AnimBP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct Grunt_AnimBP_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Grunt_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on Grunt_AnimBP_C_BlueprintUpdateAnimation");
static_assert(sizeof(Grunt_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on Grunt_AnimBP_C_BlueprintUpdateAnimation");
static_assert(offsetof(Grunt_AnimBP_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'Grunt_AnimBP_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function grunt_AnimBP.grunt_AnimBP_C.ShouldReactToLight
// 0x0007 (0x0007 - 0x0000)
struct Grunt_AnimBP_C_ShouldReactToLight final
{
public:
	bool                                          Param_ShouldReactToLight;                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanNOR_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Grunt_AnimBP_C_ShouldReactToLight) == 0x000001, "Wrong alignment on Grunt_AnimBP_C_ShouldReactToLight");
static_assert(sizeof(Grunt_AnimBP_C_ShouldReactToLight) == 0x000007, "Wrong size on Grunt_AnimBP_C_ShouldReactToLight");
static_assert(offsetof(Grunt_AnimBP_C_ShouldReactToLight, Param_ShouldReactToLight) == 0x000000, "Member 'Grunt_AnimBP_C_ShouldReactToLight::Param_ShouldReactToLight' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ShouldReactToLight, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'Grunt_AnimBP_C_ShouldReactToLight::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ShouldReactToLight, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000002, "Member 'Grunt_AnimBP_C_ShouldReactToLight::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ShouldReactToLight, CallFunc_BooleanNOR_ReturnValue) == 0x000003, "Member 'Grunt_AnimBP_C_ShouldReactToLight::CallFunc_BooleanNOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ShouldReactToLight, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'Grunt_AnimBP_C_ShouldReactToLight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ShouldReactToLight, CallFunc_BooleanAND_ReturnValue_1) == 0x000005, "Member 'Grunt_AnimBP_C_ShouldReactToLight::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ShouldReactToLight, CallFunc_BooleanAND_ReturnValue_2) == 0x000006, "Member 'Grunt_AnimBP_C_ShouldReactToLight::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function grunt_AnimBP.grunt_AnimBP_C.ShouldAimWeapon
// 0x0003 (0x0003 - 0x0000)
struct Grunt_AnimBP_C_ShouldAimWeapon final
{
public:
	bool                                          AimWeapon;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Grunt_AnimBP_C_ShouldAimWeapon) == 0x000001, "Wrong alignment on Grunt_AnimBP_C_ShouldAimWeapon");
static_assert(sizeof(Grunt_AnimBP_C_ShouldAimWeapon) == 0x000003, "Wrong size on Grunt_AnimBP_C_ShouldAimWeapon");
static_assert(offsetof(Grunt_AnimBP_C_ShouldAimWeapon, AimWeapon) == 0x000000, "Member 'Grunt_AnimBP_C_ShouldAimWeapon::AimWeapon' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ShouldAimWeapon, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'Grunt_AnimBP_C_ShouldAimWeapon::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_ShouldAimWeapon, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'Grunt_AnimBP_C_ShouldAimWeapon::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function grunt_AnimBP.grunt_AnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct Grunt_AnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Grunt_AnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on Grunt_AnimBP_C_AnimGraph");
static_assert(sizeof(Grunt_AnimBP_C_AnimGraph) == 0x000010, "Wrong size on Grunt_AnimBP_C_AnimGraph");
static_assert(offsetof(Grunt_AnimBP_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'Grunt_AnimBP_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function grunt_AnimBP.grunt_AnimBP_C.NightHunter_InLight
// 0x0020 (0x0020 - 0x0000)
struct Grunt_AnimBP_C_NightHunter_InLight final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_NightHunter_InLight;                         // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Grunt_AnimBP_C_NightHunter_InLight) == 0x000008, "Wrong alignment on Grunt_AnimBP_C_NightHunter_InLight");
static_assert(sizeof(Grunt_AnimBP_C_NightHunter_InLight) == 0x000020, "Wrong size on Grunt_AnimBP_C_NightHunter_InLight");
static_assert(offsetof(Grunt_AnimBP_C_NightHunter_InLight, InPose) == 0x000000, "Member 'Grunt_AnimBP_C_NightHunter_InLight::InPose' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_NightHunter_InLight, Param_NightHunter_InLight) == 0x000010, "Member 'Grunt_AnimBP_C_NightHunter_InLight::Param_NightHunter_InLight' has a wrong offset!");

// Function grunt_AnimBP.grunt_AnimBP_C.NightHunter_EnterLight
// 0x0020 (0x0020 - 0x0000)
struct Grunt_AnimBP_C_NightHunter_EnterLight final
{
public:
	struct FPoseLink                              Input;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_NightHunter_EnterLight;                      // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Grunt_AnimBP_C_NightHunter_EnterLight) == 0x000008, "Wrong alignment on Grunt_AnimBP_C_NightHunter_EnterLight");
static_assert(sizeof(Grunt_AnimBP_C_NightHunter_EnterLight) == 0x000020, "Wrong size on Grunt_AnimBP_C_NightHunter_EnterLight");
static_assert(offsetof(Grunt_AnimBP_C_NightHunter_EnterLight, Input) == 0x000000, "Member 'Grunt_AnimBP_C_NightHunter_EnterLight::Input' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_NightHunter_EnterLight, Param_NightHunter_EnterLight) == 0x000010, "Member 'Grunt_AnimBP_C_NightHunter_EnterLight::Param_NightHunter_EnterLight' has a wrong offset!");

// Function grunt_AnimBP.grunt_AnimBP_C.RangedWeaponLayer
// 0x0020 (0x0020 - 0x0000)
struct Grunt_AnimBP_C_RangedWeaponLayer final
{
public:
	struct FPoseLink                              Base_Locomotion;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Param_RangedWeaponLayer;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(Grunt_AnimBP_C_RangedWeaponLayer) == 0x000008, "Wrong alignment on Grunt_AnimBP_C_RangedWeaponLayer");
static_assert(sizeof(Grunt_AnimBP_C_RangedWeaponLayer) == 0x000020, "Wrong size on Grunt_AnimBP_C_RangedWeaponLayer");
static_assert(offsetof(Grunt_AnimBP_C_RangedWeaponLayer, Base_Locomotion) == 0x000000, "Member 'Grunt_AnimBP_C_RangedWeaponLayer::Base_Locomotion' has a wrong offset!");
static_assert(offsetof(Grunt_AnimBP_C_RangedWeaponLayer, Param_RangedWeaponLayer) == 0x000010, "Member 'Grunt_AnimBP_C_RangedWeaponLayer::Param_RangedWeaponLayer' has a wrong offset!");

}

