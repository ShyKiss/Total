#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineMeshBase_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SplineMeshData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MeshIndex_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SplineMeshBase_BP.SplineMeshBase_BP_C
// 0x0138 (0x0408 - 0x02D0)
class ASplineMeshBase_BP_C : public ARBSplineMeshActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSplineMeshData>                Meshes;                                            // 0x02E0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FMeshIndex>                     OverwriteMeshes;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible)
	bool                                          UseDetailsMesh;                                    // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C64[0x7];                                     // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            DetailsStaticMesh;                                 // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCollision;                                      // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C65[0x3];                                     // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DetailsMeshesDistance;                             // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               FowardAxis;                                        // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C66[0x7];                                     // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             MaterialOvewrite;                                  // 0x0320(0x0010)(Edit, BlueprintVisible)
	bool                                          CloseLoop;                                         // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C67[0x3];                                     // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MeshesScale;                                       // 0x0334(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLocation;                                      // 0x0340(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastTangent;                                       // 0x034C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndDistance;                                       // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipMesh;                                          // 0x035C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C68[0x3];                                     // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            CurrentStaticMesh;                                 // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FloorTangent;                                      // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          SnapOnGrid;                                        // 0x0369(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C69[0x2];                                     // 0x036A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridSize;                                          // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineCoordinateSpace                        GridSizeSpace;                                     // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C6A[0x3];                                     // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DetailsMeshOffset;                                 // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 SkipMeshAtPoint;                                   // 0x0378(0x0010)(Edit, BlueprintVisible)
	bool                                          SkipLastMesh;                                      // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C6B[0x3];                                     // 0x0389(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastFirstPointPosition;                            // 0x038C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CurrentPointsPositions;                            // 0x0398(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                NewWorldPosition;                                  // 0x03A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Zero;                                              // 0x03B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      DetailsVoid;                                       // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SkipDetailMesh;                                    // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C6C[0x3];                                     // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDrawDistance;                                   // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CastStaticShadow;                                  // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLightingChannels                      LightingChannels;                                  // 0x03D9(0x0001)(Edit, BlueprintVisible, NoDestructor)
	ELightmapType                                 LightmapType;                                      // 0x03DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMaterialDynamicDataForUV;                       // 0x03DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C6D[0x4];                                     // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASplineMeshBase_BP_C*                   Target;                                            // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USplineMeshComponent*>           SpawnedSplineMeshes;                               // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           DetailStaticMeshes;                                // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void FlattenTangent(class USplineComponent* Param_Spline);
	void SetSplinePosition();
	void ClearGeneratedMeshes();
	void Construct_Spline_Meshes();
	void SnapPointOnGrid(class USplineComponent* Param_Spline);
	void FindClosetMeshes(int32 A, class USplineComponent* Param_Target, TArray<struct FSplineMeshData>& Param_Meshes, int32* Param_Index);
	void AddStaticMesh(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, class UStaticMesh* NewMesh, int32 Param_Index);
	void AddDetailsMeshes(float Distance, const struct FVector& Location, const struct FRotator& Relative_Transform_Rotation);
	void UserConstructionScript();
	void PostToggled(bool bToggleEnabled);
	void ExecuteUbergraph_SplineMeshBase_BP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SplineMeshBase_BP_C">();
	}
	static class ASplineMeshBase_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineMeshBase_BP_C>();
	}
};
static_assert(alignof(ASplineMeshBase_BP_C) == 0x000008, "Wrong alignment on ASplineMeshBase_BP_C");
static_assert(sizeof(ASplineMeshBase_BP_C) == 0x000408, "Wrong size on ASplineMeshBase_BP_C");
static_assert(offsetof(ASplineMeshBase_BP_C, UberGraphFrame) == 0x0002D0, "Member 'ASplineMeshBase_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, Billboard) == 0x0002D8, "Member 'ASplineMeshBase_BP_C::Billboard' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, Meshes) == 0x0002E0, "Member 'ASplineMeshBase_BP_C::Meshes' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, OverwriteMeshes) == 0x0002F0, "Member 'ASplineMeshBase_BP_C::OverwriteMeshes' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, UseDetailsMesh) == 0x000300, "Member 'ASplineMeshBase_BP_C::UseDetailsMesh' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, DetailsStaticMesh) == 0x000308, "Member 'ASplineMeshBase_BP_C::DetailsStaticMesh' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, UseCollision) == 0x000310, "Member 'ASplineMeshBase_BP_C::UseCollision' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, DetailsMeshesDistance) == 0x000314, "Member 'ASplineMeshBase_BP_C::DetailsMeshesDistance' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, FowardAxis) == 0x000318, "Member 'ASplineMeshBase_BP_C::FowardAxis' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, MaterialOvewrite) == 0x000320, "Member 'ASplineMeshBase_BP_C::MaterialOvewrite' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, CloseLoop) == 0x000330, "Member 'ASplineMeshBase_BP_C::CloseLoop' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, MeshesScale) == 0x000334, "Member 'ASplineMeshBase_BP_C::MeshesScale' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, LastLocation) == 0x000340, "Member 'ASplineMeshBase_BP_C::LastLocation' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, LastTangent) == 0x00034C, "Member 'ASplineMeshBase_BP_C::LastTangent' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, EndDistance) == 0x000358, "Member 'ASplineMeshBase_BP_C::EndDistance' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, SkipMesh) == 0x00035C, "Member 'ASplineMeshBase_BP_C::SkipMesh' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, CurrentStaticMesh) == 0x000360, "Member 'ASplineMeshBase_BP_C::CurrentStaticMesh' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, FloorTangent) == 0x000368, "Member 'ASplineMeshBase_BP_C::FloorTangent' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, SnapOnGrid) == 0x000369, "Member 'ASplineMeshBase_BP_C::SnapOnGrid' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, GridSize) == 0x00036C, "Member 'ASplineMeshBase_BP_C::GridSize' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, GridSizeSpace) == 0x000370, "Member 'ASplineMeshBase_BP_C::GridSizeSpace' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, DetailsMeshOffset) == 0x000374, "Member 'ASplineMeshBase_BP_C::DetailsMeshOffset' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, SkipMeshAtPoint) == 0x000378, "Member 'ASplineMeshBase_BP_C::SkipMeshAtPoint' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, SkipLastMesh) == 0x000388, "Member 'ASplineMeshBase_BP_C::SkipLastMesh' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, LastFirstPointPosition) == 0x00038C, "Member 'ASplineMeshBase_BP_C::LastFirstPointPosition' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, CurrentPointsPositions) == 0x000398, "Member 'ASplineMeshBase_BP_C::CurrentPointsPositions' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, NewWorldPosition) == 0x0003A8, "Member 'ASplineMeshBase_BP_C::NewWorldPosition' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, Zero) == 0x0003B4, "Member 'ASplineMeshBase_BP_C::Zero' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, DetailsVoid) == 0x0003C0, "Member 'ASplineMeshBase_BP_C::DetailsVoid' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, SkipDetailMesh) == 0x0003D0, "Member 'ASplineMeshBase_BP_C::SkipDetailMesh' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, MaxDrawDistance) == 0x0003D4, "Member 'ASplineMeshBase_BP_C::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, CastStaticShadow) == 0x0003D8, "Member 'ASplineMeshBase_BP_C::CastStaticShadow' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, LightingChannels) == 0x0003D9, "Member 'ASplineMeshBase_BP_C::LightingChannels' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, LightmapType) == 0x0003DA, "Member 'ASplineMeshBase_BP_C::LightmapType' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, UseMaterialDynamicDataForUV) == 0x0003DB, "Member 'ASplineMeshBase_BP_C::UseMaterialDynamicDataForUV' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, Target) == 0x0003E0, "Member 'ASplineMeshBase_BP_C::Target' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, SpawnedSplineMeshes) == 0x0003E8, "Member 'ASplineMeshBase_BP_C::SpawnedSplineMeshes' has a wrong offset!");
static_assert(offsetof(ASplineMeshBase_BP_C, DetailStaticMeshes) == 0x0003F8, "Member 'ASplineMeshBase_BP_C::DetailStaticMeshes' has a wrong offset!");

}

