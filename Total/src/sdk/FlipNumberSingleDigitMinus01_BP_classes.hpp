#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlipNumberSingleDigitMinus01_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C
// 0x0050 (0x0298 - 0x0248)
class AFlipNumberSingleDigitMinus01_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FlipNumberBaseBottom;                              // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlipNumberRotating;                                // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlipNumberBaseTop;                                 // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Flip_Timeline_NewTrack_0_67445E5447B36C0DAD6AB690F73B51F8; // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Flip_Timeline__Direction_67445E5447B36C0DAD6AB690F73B51F8; // 0x0274(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CCD[0x3];                                     // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Flip_Timeline;                                     // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentInt;                                        // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlipSpeed;                                         // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IntToStopAt;                                       // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentNumFlips;                                   // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGoToSpinActive;                                   // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void FlipNumbersCoutdown(float DeltaTime);
	void ResetFlapPositionAndMaterials(int32 InInt);
	void SetNewPlayRate(float NewPlayRate);
	void SetNewInt(int32 NewDigit);
	void ApplyIntMaterials(int32 InInt);
	void FlipToInt(int32 Int);
	void FlipNumbers(float DeltaTime);
	void Flip_Timeline__FinishedFunc();
	void Flip_Timeline__UpdateFunc();
	void ReceiveTick(float DeltaSeconds);
	void Flip(int32 CurrentDigit);
	void ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FlipNumberSingleDigit-01_BP_C">();
	}
	static class AFlipNumberSingleDigitMinus01_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFlipNumberSingleDigitMinus01_BP_C>();
	}
};
static_assert(alignof(AFlipNumberSingleDigitMinus01_BP_C) == 0x000008, "Wrong alignment on AFlipNumberSingleDigitMinus01_BP_C");
static_assert(sizeof(AFlipNumberSingleDigitMinus01_BP_C) == 0x000298, "Wrong size on AFlipNumberSingleDigitMinus01_BP_C");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, UberGraphFrame) == 0x000248, "Member 'AFlipNumberSingleDigitMinus01_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, FlipNumberBaseBottom) == 0x000250, "Member 'AFlipNumberSingleDigitMinus01_BP_C::FlipNumberBaseBottom' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, FlipNumberRotating) == 0x000258, "Member 'AFlipNumberSingleDigitMinus01_BP_C::FlipNumberRotating' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, FlipNumberBaseTop) == 0x000260, "Member 'AFlipNumberSingleDigitMinus01_BP_C::FlipNumberBaseTop' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, DefaultSceneRoot) == 0x000268, "Member 'AFlipNumberSingleDigitMinus01_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, Flip_Timeline_NewTrack_0_67445E5447B36C0DAD6AB690F73B51F8) == 0x000270, "Member 'AFlipNumberSingleDigitMinus01_BP_C::Flip_Timeline_NewTrack_0_67445E5447B36C0DAD6AB690F73B51F8' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, Flip_Timeline__Direction_67445E5447B36C0DAD6AB690F73B51F8) == 0x000274, "Member 'AFlipNumberSingleDigitMinus01_BP_C::Flip_Timeline__Direction_67445E5447B36C0DAD6AB690F73B51F8' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, Flip_Timeline) == 0x000278, "Member 'AFlipNumberSingleDigitMinus01_BP_C::Flip_Timeline' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, CurrentInt) == 0x000280, "Member 'AFlipNumberSingleDigitMinus01_BP_C::CurrentInt' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, FlipSpeed) == 0x000284, "Member 'AFlipNumberSingleDigitMinus01_BP_C::FlipSpeed' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, IntToStopAt) == 0x000288, "Member 'AFlipNumberSingleDigitMinus01_BP_C::IntToStopAt' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, CurrentNumFlips) == 0x00028C, "Member 'AFlipNumberSingleDigitMinus01_BP_C::CurrentNumFlips' has a wrong offset!");
static_assert(offsetof(AFlipNumberSingleDigitMinus01_BP_C, bGoToSpinActive) == 0x000290, "Member 'AFlipNumberSingleDigitMinus01_BP_C::bGoToSpinActive' has a wrong offset!");

}

