#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SlidingLockMinusOperatableMinus01_BP

#include "Basic.hpp"

#include "SlidingLockMinusOperatableMinus01_BP_classes.hpp"
#include "SlidingLockMinusOperatableMinus01_BP_parameters.hpp"


namespace SDK
{

// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.OnRep_FrameMetalWorldTransform
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::OnRep_FrameMetalWorldTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "OnRep_FrameMetalWorldTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.OnRep_FrameMetalTransform
// (BlueprintCallable, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::OnRep_FrameMetalTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "OnRep_FrameMetalTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.RestorePhysicsComponentsSnapshot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::RestorePhysicsComponentsSnapshot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "RestorePhysicsComponentsSnapshot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.TakePhysicsComponentsSnapshot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::TakePhysicsComponentsSnapshot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "TakePhysicsComponentsSnapshot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.BP_OverrideEditorCompTranform
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CompName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bLocked                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       Transform                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor)

struct FTransform ASlidingLockMinusOperatableMinus01_BP_C::BP_OverrideEditorCompTranform(class FName CompName, bool bLocked, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "BP_OverrideEditorCompTranform");

	Params::SlidingLockMinusOperatableMinus01_BP_C_BP_OverrideEditorCompTranform Parms{};

	Parms.CompName = CompName;
	Parms.bLocked = bLocked;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.OnSetup
// (BlueprintCallable, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::OnSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "OnSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.BP_OnLock
// (Event, Public, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::BP_OnLock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "BP_OnLock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.BP_OnUnlock
// (Event, Public, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::BP_OnUnlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "BP_OnUnlock");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.BndEvt__Damageable_K2Node_ComponentBoundEvent_0_OnDamageableDestroyed__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class URBDamageableComponent*           DamageableComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASlidingLockMinusOperatableMinus01_BP_C::BndEvt__Damageable_K2Node_ComponentBoundEvent_0_OnDamageableDestroyed__DelegateSignature(class URBDamageableComponent* DamageableComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "BndEvt__Damageable_K2Node_ComponentBoundEvent_0_OnDamageableDestroyed__DelegateSignature");

	Params::SlidingLockMinusOperatableMinus01_BP_C_BndEvt__Damageable_K2Node_ComponentBoundEvent_0_OnDamageableDestroyed__DelegateSignature Parms{};

	Parms.DamageableComponent = DamageableComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.Event_SnapToState
// (Event, Public, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::Event_SnapToState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "Event_SnapToState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.Event_OnResetStage
// (Event, Public, BlueprintEvent)

void ASlidingLockMinusOperatableMinus01_BP_C::Event_OnResetStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "Event_OnResetStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C.ExecuteUbergraph_SlidingLock-Operatable-01_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASlidingLockMinusOperatableMinus01_BP_C::ExecuteUbergraph_SlidingLockMinusOperatableMinus01_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SlidingLock-Operatable-01_BP_C", "ExecuteUbergraph_SlidingLock-Operatable-01_BP");

	Params::SlidingLockMinusOperatableMinus01_BP_C_ExecuteUbergraph_SlidingLockMinusOperatableMinus01_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

