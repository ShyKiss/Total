#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BaseAmp_SkillItem_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BaseAmp_SkillItem_BP.BaseAmp_SkillItem_BP_C.ExecuteUbergraph_BaseAmp_SkillItem_BP
// 0x0058 (0x0058 - 0x0000)
struct BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ARBActiveSkill* ActiveSkill, bool bIsInCooldown)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                K2Node_CustomEvent_pawn;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPickup*                              K2Node_CustomEvent_item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBActiveSkill*                         K2Node_CustomEvent_ActiveSkill;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bIsInCooldown;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ARBPawn* Pawn, class ARBPickup* Item)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP) == 0x000008, "Wrong alignment on BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP");
static_assert(sizeof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP) == 0x000058, "Wrong size on BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, EntryPoint) == 0x000000, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, K2Node_CustomEvent_pawn) == 0x000018, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::K2Node_CustomEvent_pawn' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, K2Node_CustomEvent_item) == 0x000020, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::K2Node_CustomEvent_item' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, K2Node_DynamicCast_AsRB_Player) == 0x000028, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, K2Node_CustomEvent_ActiveSkill) == 0x000038, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::K2Node_CustomEvent_ActiveSkill' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, K2Node_CustomEvent_bIsInCooldown) == 0x000040, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::K2Node_CustomEvent_bIsInCooldown' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, CallFunc_IsValid_ReturnValue) == 0x000041, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP, K2Node_CreateDelegate_OutputDelegate_1) == 0x000044, "Member 'BaseAmp_SkillItem_BP_C_ExecuteUbergraph_BaseAmp_SkillItem_BP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BaseAmp_SkillItem_BP.BaseAmp_SkillItem_BP_C.CooldownChanged
// 0x0010 (0x0010 - 0x0000)
struct BaseAmp_SkillItem_BP_C_CooldownChanged final
{
public:
	class ARBActiveSkill*                         ActiveSkill;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInCooldown;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BaseAmp_SkillItem_BP_C_CooldownChanged) == 0x000008, "Wrong alignment on BaseAmp_SkillItem_BP_C_CooldownChanged");
static_assert(sizeof(BaseAmp_SkillItem_BP_C_CooldownChanged) == 0x000010, "Wrong size on BaseAmp_SkillItem_BP_C_CooldownChanged");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_CooldownChanged, ActiveSkill) == 0x000000, "Member 'BaseAmp_SkillItem_BP_C_CooldownChanged::ActiveSkill' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_CooldownChanged, bIsInCooldown) == 0x000008, "Member 'BaseAmp_SkillItem_BP_C_CooldownChanged::bIsInCooldown' has a wrong offset!");

// Function BaseAmp_SkillItem_BP.BaseAmp_SkillItem_BP_C.PlayerAssigned
// 0x0010 (0x0010 - 0x0000)
struct BaseAmp_SkillItem_BP_C_PlayerAssigned final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPickup*                              Item;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BaseAmp_SkillItem_BP_C_PlayerAssigned) == 0x000008, "Wrong alignment on BaseAmp_SkillItem_BP_C_PlayerAssigned");
static_assert(sizeof(BaseAmp_SkillItem_BP_C_PlayerAssigned) == 0x000010, "Wrong size on BaseAmp_SkillItem_BP_C_PlayerAssigned");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_PlayerAssigned, Pawn) == 0x000000, "Member 'BaseAmp_SkillItem_BP_C_PlayerAssigned::Pawn' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_PlayerAssigned, Item) == 0x000008, "Member 'BaseAmp_SkillItem_BP_C_PlayerAssigned::Item' has a wrong offset!");

// Function BaseAmp_SkillItem_BP.BaseAmp_SkillItem_BP_C.RefreshCooldown
// 0x0040 (0x0040 - 0x0000)
struct BaseAmp_SkillItem_BP_C_RefreshCooldown final
{
public:
	class ARBActiveSkill*                         ActiveSkill;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BaseAmp_SkillItem_BP_C_RefreshCooldown) == 0x000008, "Wrong alignment on BaseAmp_SkillItem_BP_C_RefreshCooldown");
static_assert(sizeof(BaseAmp_SkillItem_BP_C_RefreshCooldown) == 0x000040, "Wrong size on BaseAmp_SkillItem_BP_C_RefreshCooldown");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_RefreshCooldown, ActiveSkill) == 0x000000, "Member 'BaseAmp_SkillItem_BP_C_RefreshCooldown::ActiveSkill' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_RefreshCooldown, Temp_bool_Variable) == 0x000008, "Member 'BaseAmp_SkillItem_BP_C_RefreshCooldown::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_RefreshCooldown, Temp_struct_Variable) == 0x00000C, "Member 'BaseAmp_SkillItem_BP_C_RefreshCooldown::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_RefreshCooldown, Temp_struct_Variable_1) == 0x00001C, "Member 'BaseAmp_SkillItem_BP_C_RefreshCooldown::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BaseAmp_SkillItem_BP_C_RefreshCooldown, K2Node_Select_Default) == 0x00002C, "Member 'BaseAmp_SkillItem_BP_C_RefreshCooldown::K2Node_Select_Default' has a wrong offset!");

}

