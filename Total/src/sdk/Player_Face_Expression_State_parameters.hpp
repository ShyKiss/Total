#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Player_Face_Expression_State

#include "Basic.hpp"

#include "OPP_structs.hpp"


namespace SDK::Params
{

// Function Player_Face_Expression_State.Player_Face_Expression_State_C.GetNotifyName
// 0x0010 (0x0010 - 0x0000)
struct Player_Face_Expression_State_C_GetNotifyName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
};
static_assert(alignof(Player_Face_Expression_State_C_GetNotifyName) == 0x000008, "Wrong alignment on Player_Face_Expression_State_C_GetNotifyName");
static_assert(sizeof(Player_Face_Expression_State_C_GetNotifyName) == 0x000010, "Wrong size on Player_Face_Expression_State_C_GetNotifyName");
static_assert(offsetof(Player_Face_Expression_State_C_GetNotifyName, ReturnValue) == 0x000000, "Member 'Player_Face_Expression_State_C_GetNotifyName::ReturnValue' has a wrong offset!");

// Function Player_Face_Expression_State.Player_Face_Expression_State_C.Received_NotifyBegin
// 0x0020 (0x0020 - 0x0000)
struct Player_Face_Expression_State_C_Received_NotifyBegin final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimDeltaTime;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalDuration;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ExpressionStateOverride_ReturnValue;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Player_Face_Expression_State_C_Received_NotifyBegin) == 0x000008, "Wrong alignment on Player_Face_Expression_State_C_Received_NotifyBegin");
static_assert(sizeof(Player_Face_Expression_State_C_Received_NotifyBegin) == 0x000020, "Wrong size on Player_Face_Expression_State_C_Received_NotifyBegin");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyBegin, MeshComp) == 0x000000, "Member 'Player_Face_Expression_State_C_Received_NotifyBegin::MeshComp' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyBegin, Animation) == 0x000008, "Member 'Player_Face_Expression_State_C_Received_NotifyBegin::Animation' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyBegin, AnimDeltaTime) == 0x000010, "Member 'Player_Face_Expression_State_C_Received_NotifyBegin::AnimDeltaTime' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyBegin, TotalDuration) == 0x000014, "Member 'Player_Face_Expression_State_C_Received_NotifyBegin::TotalDuration' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyBegin, ReturnValue) == 0x000018, "Member 'Player_Face_Expression_State_C_Received_NotifyBegin::ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyBegin, CallFunc_ExpressionStateOverride_ReturnValue) == 0x000019, "Member 'Player_Face_Expression_State_C_Received_NotifyBegin::CallFunc_ExpressionStateOverride_ReturnValue' has a wrong offset!");

// Function Player_Face_Expression_State.Player_Face_Expression_State_C.Received_NotifyEnd
// 0x0018 (0x0018 - 0x0000)
struct Player_Face_Expression_State_C_Received_NotifyEnd final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimDeltaTime;                                     // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ExpressionStateOverride_ReturnValue;      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Player_Face_Expression_State_C_Received_NotifyEnd) == 0x000008, "Wrong alignment on Player_Face_Expression_State_C_Received_NotifyEnd");
static_assert(sizeof(Player_Face_Expression_State_C_Received_NotifyEnd) == 0x000018, "Wrong size on Player_Face_Expression_State_C_Received_NotifyEnd");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyEnd, MeshComp) == 0x000000, "Member 'Player_Face_Expression_State_C_Received_NotifyEnd::MeshComp' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyEnd, Animation) == 0x000008, "Member 'Player_Face_Expression_State_C_Received_NotifyEnd::Animation' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyEnd, AnimDeltaTime) == 0x000010, "Member 'Player_Face_Expression_State_C_Received_NotifyEnd::AnimDeltaTime' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyEnd, ReturnValue) == 0x000014, "Member 'Player_Face_Expression_State_C_Received_NotifyEnd::ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_Received_NotifyEnd, CallFunc_ExpressionStateOverride_ReturnValue) == 0x000015, "Member 'Player_Face_Expression_State_C_Received_NotifyEnd::CallFunc_ExpressionStateOverride_ReturnValue' has a wrong offset!");

// Function Player_Face_Expression_State.Player_Face_Expression_State_C.ExpressionStateOverride
// 0x0040 (0x0040 - 0x0000)
struct Player_Face_Expression_State_C_ExpressionStateOverride final
{
public:
	class USkeletalMeshComponent*                 Mesh_Comp;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSpecificGesture                        Which_Anim;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Expressing;                                     // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer_BP_C*                         K2Node_DynamicCast_AsRB_Player_BP;                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerFace_AnimBlueprint_C*            K2Node_DynamicCast_AsPlayer_Face_Anim_Blueprint;   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Player_Face_Expression_State_C_ExpressionStateOverride) == 0x000008, "Wrong alignment on Player_Face_Expression_State_C_ExpressionStateOverride");
static_assert(sizeof(Player_Face_Expression_State_C_ExpressionStateOverride) == 0x000040, "Wrong size on Player_Face_Expression_State_C_ExpressionStateOverride");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, Mesh_Comp) == 0x000000, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::Mesh_Comp' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, Which_Anim) == 0x000008, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::Which_Anim' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, Is_Expressing) == 0x000009, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::Is_Expressing' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, ReturnValue) == 0x00000A, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, K2Node_DynamicCast_AsRB_Player_BP) == 0x000018, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::K2Node_DynamicCast_AsRB_Player_BP' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, K2Node_DynamicCast_AsPlayer_Face_Anim_Blueprint) == 0x000030, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::K2Node_DynamicCast_AsPlayer_Face_Anim_Blueprint' has a wrong offset!");
static_assert(offsetof(Player_Face_Expression_State_C_ExpressionStateOverride, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'Player_Face_Expression_State_C_ExpressionStateOverride::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

}

