#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlipNumberSingleDigitMinus01_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.FlipNumbersCoutdown
// 0x00C4 (0x00C4 - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CCE[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CCF[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0034(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown) == 0x0000C4, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, DeltaTime) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::DeltaTime' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000004, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00000C, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000018, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00001C, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_Lerp_ReturnValue) == 0x000020, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_MakeRotator_ReturnValue) == 0x000024, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_FFloor_ReturnValue) == 0x000030, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000034, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_Round_ReturnValue) == 0x0000BC, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000C0, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbersCoutdown::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.ResetFlapPositionAndMaterials
// 0x009C (0x009C - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials final
{
public:
	int32                                         InInt;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials) == 0x00009C, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials, InInt) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials::InInt' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials, CallFunc_MakeRotator_ReturnValue) == 0x000004, "Member 'FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000014, "Member 'FlipNumberSingleDigitMinus01_BP_C_ResetFlapPositionAndMaterials::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.SetNewPlayRate
// 0x0004 (0x0004 - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_SetNewPlayRate final
{
public:
	float                                         NewPlayRate;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_SetNewPlayRate) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_SetNewPlayRate");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_SetNewPlayRate) == 0x000004, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_SetNewPlayRate");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_SetNewPlayRate, NewPlayRate) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_SetNewPlayRate::NewPlayRate' has a wrong offset!");

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.SetNewInt
// 0x0004 (0x0004 - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_SetNewInt final
{
public:
	int32                                         NewDigit;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_SetNewInt) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_SetNewInt");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_SetNewInt) == 0x000004, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_SetNewInt");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_SetNewInt, NewDigit) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_SetNewInt::NewDigit' has a wrong offset!");

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.ApplyIntMaterials
// 0x000C (0x000C - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials final
{
public:
	int32                                         InInt;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials) == 0x00000C, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials, InInt) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials::InInt' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000004, "Member 'FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000008, "Member 'FlipNumberSingleDigitMinus01_BP_C_ApplyIntMaterials::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.FlipToInt
// 0x0010 (0x0010 - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_FlipToInt final
{
public:
	int32                                         Int;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD0[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_FlipToInt) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_FlipToInt");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_FlipToInt) == 0x000010, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_FlipToInt");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipToInt, Int) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipToInt::Int' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipToInt, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipToInt::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipToInt, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000005, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipToInt::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipToInt, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipToInt::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipToInt, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipToInt::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.FlipNumbers
// 0x00C4 (0x00C4 - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_FlipNumbers final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD1[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3CD2[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0034(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_FlipNumbers");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers) == 0x0000C4, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_FlipNumbers");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, DeltaTime) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::DeltaTime' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000004, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00000C, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000018, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_Lerp_ReturnValue) == 0x000020, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_MakeRotator_ReturnValue) == 0x000024, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_FCeil_ReturnValue) == 0x000030, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000034, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_Round_ReturnValue) == 0x0000BC, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_FlipNumbers, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000C0, "Member 'FlipNumberSingleDigitMinus01_BP_C_FlipNumbers::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_ReceiveTick) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_ReceiveTick");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_ReceiveTick) == 0x000004, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_ReceiveTick");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.Flip
// 0x0004 (0x0004 - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_Flip final
{
public:
	int32                                         CurrentDigit;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_Flip) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_Flip");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_Flip) == 0x000004, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_Flip");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_Flip, CurrentDigit) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_Flip::CurrentDigit' has a wrong offset!");

// Function FlipNumberSingleDigit-01_BP.FlipNumberSingleDigit-01_BP_C.ExecuteUbergraph_FlipNumberSingleDigit-01_BP
// 0x00A4 (0x00A4 - 0x0000)
struct FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0018(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         K2Node_CustomEvent_CurrentDigit;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP) == 0x000004, "Wrong alignment on FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP");
static_assert(sizeof(FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP) == 0x0000A4, "Wrong size on FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP, EntryPoint) == 0x000000, "Member 'FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP, CallFunc_Lerp_ReturnValue) == 0x000004, "Member 'FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP, CallFunc_MakeRotator_ReturnValue) == 0x00000C, "Member 'FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000018, "Member 'FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP, K2Node_CustomEvent_CurrentDigit) == 0x0000A0, "Member 'FlipNumberSingleDigitMinus01_BP_C_ExecuteUbergraph_FlipNumberSingleDigitMinus01_BP::K2Node_CustomEvent_CurrentDigit' has a wrong offset!");

}

