#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DetectionCrosshair

#include "Basic.hpp"

#include "DetectionCrosshair_classes.hpp"
#include "DetectionCrosshair_parameters.hpp"


namespace SDK
{

// Function DetectionCrosshair.DetectionCrosshair_C.ExecuteUbergraph_DetectionCrosshair
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDetectionCrosshair_C::ExecuteUbergraph_DetectionCrosshair(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "ExecuteUbergraph_DetectionCrosshair");

	Params::DetectionCrosshair_C_ExecuteUbergraph_DetectionCrosshair Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.OnPlayerActionStatusChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerActionStatus                     Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDetectionCrosshair_C::OnPlayerActionStatusChanged(EPlayerActionStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "OnPlayerActionStatusChanged");

	Params::DetectionCrosshair_C_OnPlayerActionStatusChanged Parms{};

	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UDetectionCrosshair_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DetectionCrosshair.DetectionCrosshair_C.OnIsAimingThowableChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewAimingState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UDetectionCrosshair_C::OnIsAimingThowableChanged(bool NewAimingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "OnIsAimingThowableChanged");

	Params::DetectionCrosshair_C_OnIsAimingThowableChanged Parms{};

	Parms.NewAimingState = NewAimingState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.Event_OnWatchedPlayerChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class ARBPlayer*                        OldPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARBPlayer*                        NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDetectionCrosshair_C::Event_OnWatchedPlayerChanged(class ARBPlayer* OldPlayer, class ARBPlayer* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "Event_OnWatchedPlayerChanged");

	Params::DetectionCrosshair_C_Event_OnWatchedPlayerChanged Parms{};

	Parms.OldPlayer = OldPlayer;
	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.Event_Show
// (Event, Public, BlueprintEvent)

void UDetectionCrosshair_C::Event_Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "Event_Show");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DetectionCrosshair.DetectionCrosshair_C.Event_Hide
// (Event, Public, BlueprintEvent)

void UDetectionCrosshair_C::Event_Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "Event_Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DetectionCrosshair.DetectionCrosshair_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UDetectionCrosshair_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "PreConstruct");

	Params::DetectionCrosshair_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UDetectionCrosshair_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DetectionCrosshair.DetectionCrosshair_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDetectionCrosshair_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "Tick");

	Params::DetectionCrosshair_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.Update Crosshair
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDetectionCrosshair_C::Update_Crosshair(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "Update Crosshair");

	Params::DetectionCrosshair_C_Update_Crosshair Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.UpdateSoundFeedback
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDetectionCrosshair_C::UpdateSoundFeedback(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "UpdateSoundFeedback");

	Params::DetectionCrosshair_C_UpdateSoundFeedback Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.Update CrosshairV2
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDetectionCrosshair_C::Update_CrosshairV2(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "Update CrosshairV2");

	Params::DetectionCrosshair_C_Update_CrosshairV2 Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.UpdateFeedbackProgressBar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UProgressBar*                     FeedbackProgressBar                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Increasing                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDetectionCrosshair_C::UpdateFeedbackProgressBar(class UProgressBar* FeedbackProgressBar, bool Increasing, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "UpdateFeedbackProgressBar");

	Params::DetectionCrosshair_C_UpdateFeedbackProgressBar Parms{};

	Parms.FeedbackProgressBar = FeedbackProgressBar;
	Parms.Increasing = Increasing;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.UpdateVisualDetection
// (Public, BlueprintCallable, BlueprintEvent)

void UDetectionCrosshair_C::UpdateVisualDetection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "UpdateVisualDetection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DetectionCrosshair.DetectionCrosshair_C.UpdateCrosshairV3
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldAnimate                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UDetectionCrosshair_C::UpdateCrosshairV3(bool ShouldAnimate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "UpdateCrosshairV3");

	Params::DetectionCrosshair_C_UpdateCrosshairV3 Parms{};

	Parms.ShouldAnimate = ShouldAnimate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DetectionCrosshair.DetectionCrosshair_C.ShouldShow
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UDetectionCrosshair_C::ShouldShow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DetectionCrosshair_C", "ShouldShow");

	Params::DetectionCrosshair_C_ShouldShow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

