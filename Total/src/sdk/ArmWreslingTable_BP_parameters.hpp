#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArmWreslingTable_BP

#include "Basic.hpp"

#include "OPP_structs.hpp"


namespace SDK::Params
{

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.ArmWreslingTable_BP_AutoGenFunc
// 0x0020 (0x0020 - 0x0000)
struct ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc final
{
public:
	class ARBPawn*                                PawnInteracting;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArmWrestleSpectator_Ghost_AnimBP_C*    K2Node_DynamicCast_AsArm_Wrestle_Spectator_Ghost_Anim_BP; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc) == 0x000008, "Wrong alignment on ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc");
static_assert(sizeof(ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc) == 0x000020, "Wrong size on ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc");
static_assert(offsetof(ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc, PawnInteracting) == 0x000000, "Member 'ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc::PawnInteracting' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000008, "Member 'ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc, K2Node_DynamicCast_AsArm_Wrestle_Spectator_Ghost_Anim_BP) == 0x000010, "Member 'ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc::K2Node_DynamicCast_AsArm_Wrestle_Spectator_Ghost_Anim_BP' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ArmWreslingTable_BP_C_ArmWreslingTable_BP_AutoGenFunc::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.ApplyNoise
// 0x0010 (0x0010 - 0x0000)
struct ArmWreslingTable_BP_C_ApplyNoise final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWreslingTable_BP_C_ApplyNoise) == 0x000004, "Wrong alignment on ArmWreslingTable_BP_C_ApplyNoise");
static_assert(sizeof(ArmWreslingTable_BP_C_ApplyNoise) == 0x000010, "Wrong size on ArmWreslingTable_BP_C_ApplyNoise");
static_assert(offsetof(ArmWreslingTable_BP_C_ApplyNoise, DeltaTime) == 0x000000, "Member 'ArmWreslingTable_BP_C_ApplyNoise::DeltaTime' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ApplyNoise, CallFunc_RandomFloatInRange_ReturnValue) == 0x000004, "Member 'ArmWreslingTable_BP_C_ApplyNoise::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ApplyNoise, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'ArmWreslingTable_BP_C_ApplyNoise::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ApplyNoise, CallFunc_FInterpTo_ReturnValue) == 0x00000C, "Member 'ArmWreslingTable_BP_C_ApplyNoise::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.ApplyVisualPush
// 0x0014 (0x0014 - 0x0000)
struct ArmWreslingTable_BP_C_ApplyVisualPush final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_ApplyVisualPush) == 0x000004, "Wrong alignment on ArmWreslingTable_BP_C_ApplyVisualPush");
static_assert(sizeof(ArmWreslingTable_BP_C_ApplyVisualPush) == 0x000014, "Wrong size on ArmWreslingTable_BP_C_ApplyVisualPush");
static_assert(offsetof(ArmWreslingTable_BP_C_ApplyVisualPush, DeltaTime) == 0x000000, "Member 'ArmWreslingTable_BP_C_ApplyVisualPush::DeltaTime' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ApplyVisualPush, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'ArmWreslingTable_BP_C_ApplyVisualPush::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ApplyVisualPush, CallFunc_FInterpTo_ReturnValue) == 0x000008, "Member 'ArmWreslingTable_BP_C_ApplyVisualPush::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ApplyVisualPush, CallFunc_FInterpTo_ReturnValue_1) == 0x00000C, "Member 'ArmWreslingTable_BP_C_ApplyVisualPush::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ApplyVisualPush, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'ArmWreslingTable_BP_C_ApplyVisualPush::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.SetPawnReaction
// 0x0040 (0x0040 - 0x0000)
struct ArmWreslingTable_BP_C_SetPawnReaction final
{
public:
	bool                                          Win;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3894[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBInteractiblePanelComponent*          SpectatorComponent;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3895[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3896[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArmWrestleSpectator_Ghost_AnimBP_C*    K2Node_DynamicCast_AsArm_Wrestle_Spectator_Ghost_Anim_BP; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_SetPawnReaction) == 0x000008, "Wrong alignment on ArmWreslingTable_BP_C_SetPawnReaction");
static_assert(sizeof(ArmWreslingTable_BP_C_SetPawnReaction) == 0x000040, "Wrong size on ArmWreslingTable_BP_C_SetPawnReaction");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPawnReaction, Win) == 0x000000, "Member 'ArmWreslingTable_BP_C_SetPawnReaction::Win' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPawnReaction, SpectatorComponent) == 0x000008, "Member 'ArmWreslingTable_BP_C_SetPawnReaction::SpectatorComponent' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPawnReaction, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ArmWreslingTable_BP_C_SetPawnReaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPawnReaction, CallFunc_GetPawnInteracting_ReturnValue) == 0x000018, "Member 'ArmWreslingTable_BP_C_SetPawnReaction::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPawnReaction, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'ArmWreslingTable_BP_C_SetPawnReaction::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPawnReaction, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000028, "Member 'ArmWreslingTable_BP_C_SetPawnReaction::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPawnReaction, K2Node_DynamicCast_AsArm_Wrestle_Spectator_Ghost_Anim_BP) == 0x000030, "Member 'ArmWreslingTable_BP_C_SetPawnReaction::K2Node_DynamicCast_AsArm_Wrestle_Spectator_Ghost_Anim_BP' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPawnReaction, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'ArmWreslingTable_BP_C_SetPawnReaction::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.PlayReactions
// 0x0001 (0x0001 - 0x0000)
struct ArmWreslingTable_BP_C_PlayReactions final
{
public:
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_PlayReactions) == 0x000001, "Wrong alignment on ArmWreslingTable_BP_C_PlayReactions");
static_assert(sizeof(ArmWreslingTable_BP_C_PlayReactions) == 0x000001, "Wrong size on ArmWreslingTable_BP_C_PlayReactions");
static_assert(offsetof(ArmWreslingTable_BP_C_PlayReactions, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000000, "Member 'ArmWreslingTable_BP_C_PlayReactions::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.Reset Players
// 0x0038 (0x0038 - 0x0000)
struct ArmWreslingTable_BP_C_Reset_Players final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3897[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArmWreslingPanel_GhostAnimBP_C*        K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3898[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue_1;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArmWreslingPanel_GhostAnimBP_C*        K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP_1; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_Reset_Players) == 0x000008, "Wrong alignment on ArmWreslingTable_BP_C_Reset_Players");
static_assert(sizeof(ArmWreslingTable_BP_C_Reset_Players) == 0x000038, "Wrong size on ArmWreslingTable_BP_C_Reset_Players");
static_assert(offsetof(ArmWreslingTable_BP_C_Reset_Players, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ArmWreslingTable_BP_C_Reset_Players::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_Reset_Players, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000008, "Member 'ArmWreslingTable_BP_C_Reset_Players::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_Reset_Players, K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP) == 0x000010, "Member 'ArmWreslingTable_BP_C_Reset_Players::K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_Reset_Players, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ArmWreslingTable_BP_C_Reset_Players::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_Reset_Players, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'ArmWreslingTable_BP_C_Reset_Players::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_Reset_Players, CallFunc_GetGhostAnimBP_ReturnValue_1) == 0x000020, "Member 'ArmWreslingTable_BP_C_Reset_Players::CallFunc_GetGhostAnimBP_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_Reset_Players, K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP_1) == 0x000028, "Member 'ArmWreslingTable_BP_C_Reset_Players::K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_Reset_Players, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'ArmWreslingTable_BP_C_Reset_Players::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.EndRound
// 0x0050 (0x0050 - 0x0000)
struct ArmWreslingTable_BP_C_EndRound final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3899[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBPlayer*>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389A[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389B[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArmWreslingPanel_GhostAnimBP_C*        K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_EndRound) == 0x000008, "Wrong alignment on ArmWreslingTable_BP_C_EndRound");
static_assert(sizeof(ArmWreslingTable_BP_C_EndRound) == 0x000050, "Wrong size on ArmWreslingTable_BP_C_EndRound");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, Temp_int_Array_Index_Variable) == 0x000000, "Member 'ArmWreslingTable_BP_C_EndRound::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'ArmWreslingTable_BP_C_EndRound::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'ArmWreslingTable_BP_C_EndRound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, K2Node_MakeArray_Array) == 0x000010, "Member 'ArmWreslingTable_BP_C_EndRound::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'ArmWreslingTable_BP_C_EndRound::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, CallFunc_Array_Get_Item) == 0x000028, "Member 'ArmWreslingTable_BP_C_EndRound::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'ArmWreslingTable_BP_C_EndRound::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'ArmWreslingTable_BP_C_EndRound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000032, "Member 'ArmWreslingTable_BP_C_EndRound::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000038, "Member 'ArmWreslingTable_BP_C_EndRound::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP) == 0x000040, "Member 'ArmWreslingTable_BP_C_EndRound::K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_EndRound, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'ArmWreslingTable_BP_C_EndRound::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.StartRound
// 0x0050 (0x0050 - 0x0000)
struct ArmWreslingTable_BP_C_StartRound final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBPlayer*>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389D[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389E[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArmWreslingPanel_GhostAnimBP_C*        K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_StartRound) == 0x000008, "Wrong alignment on ArmWreslingTable_BP_C_StartRound");
static_assert(sizeof(ArmWreslingTable_BP_C_StartRound) == 0x000050, "Wrong size on ArmWreslingTable_BP_C_StartRound");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, Temp_int_Array_Index_Variable) == 0x000000, "Member 'ArmWreslingTable_BP_C_StartRound::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'ArmWreslingTable_BP_C_StartRound::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'ArmWreslingTable_BP_C_StartRound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, K2Node_MakeArray_Array) == 0x000010, "Member 'ArmWreslingTable_BP_C_StartRound::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ArmWreslingTable_BP_C_StartRound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, CallFunc_Array_Get_Item) == 0x000028, "Member 'ArmWreslingTable_BP_C_StartRound::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'ArmWreslingTable_BP_C_StartRound::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, CallFunc_IsValid_ReturnValue_1) == 0x000034, "Member 'ArmWreslingTable_BP_C_StartRound::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, CallFunc_Less_IntInt_ReturnValue) == 0x000035, "Member 'ArmWreslingTable_BP_C_StartRound::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000038, "Member 'ArmWreslingTable_BP_C_StartRound::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP) == 0x000040, "Member 'ArmWreslingTable_BP_C_StartRound::K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'ArmWreslingTable_BP_C_StartRound::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, CallFunc_IsValid_ReturnValue_2) == 0x000049, "Member 'ArmWreslingTable_BP_C_StartRound::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_StartRound, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'ArmWreslingTable_BP_C_StartRound::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.SetPlayersRatio
// 0x0048 (0x0048 - 0x0000)
struct ArmWreslingTable_BP_C_SetPlayersRatio final
{
public:
	float                                         Param_ArmWrestleRatio;                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389F[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArmWreslingPanel_GhostAnimBP_C*        K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A0[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue_1;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A1[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArmWreslingPanel_GhostAnimBP_C*        K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP_1; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_SetPlayersRatio) == 0x000008, "Wrong alignment on ArmWreslingTable_BP_C_SetPlayersRatio");
static_assert(sizeof(ArmWreslingTable_BP_C_SetPlayersRatio) == 0x000048, "Wrong size on ArmWreslingTable_BP_C_SetPlayersRatio");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, Param_ArmWrestleRatio) == 0x000000, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::Param_ArmWrestleRatio' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000010, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP) == 0x000018, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, CallFunc_GetGhostAnimBP_ReturnValue_1) == 0x000028, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::CallFunc_GetGhostAnimBP_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP_1) == 0x000038, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersRatio, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'ArmWreslingTable_BP_C_SetPlayersRatio::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.SetPlayersReady
// 0x0050 (0x0050 - 0x0000)
struct ArmWreslingTable_BP_C_SetPlayersReady final
{
public:
	bool                                          bReady;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARBPlayer*>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A3[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A4[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGhostAnimInstance*                   CallFunc_GetGhostAnimBP_ReturnValue;               // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArmWreslingPanel_GhostAnimBP_C*        K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_SetPlayersReady) == 0x000008, "Wrong alignment on ArmWreslingTable_BP_C_SetPlayersReady");
static_assert(sizeof(ArmWreslingTable_BP_C_SetPlayersReady) == 0x000050, "Wrong size on ArmWreslingTable_BP_C_SetPlayersReady");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, bReady) == 0x000000, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::bReady' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, Temp_int_Array_Index_Variable) == 0x000004, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, K2Node_MakeArray_Array) == 0x000010, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, CallFunc_Array_Get_Item) == 0x000028, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, CallFunc_IsValid_ReturnValue_1) == 0x000034, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, CallFunc_Less_IntInt_ReturnValue) == 0x000035, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, CallFunc_GetGhostAnimBP_ReturnValue) == 0x000038, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::CallFunc_GetGhostAnimBP_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP) == 0x000040, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::K2Node_DynamicCast_AsArm_Wresling_Panel_Ghost_Anim_BP' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, CallFunc_IsValid_ReturnValue_2) == 0x000049, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_SetPlayersReady, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'ArmWreslingTable_BP_C_SetPlayersReady::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.CustomEvent_0
// 0x0038 (0x0038 - 0x0000)
struct ArmWreslingTable_BP_C_CustomEvent_0 final
{
public:
	struct FArmWreslingPlayerRoundData            PlayerRoundData;                                   // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(ArmWreslingTable_BP_C_CustomEvent_0) == 0x000008, "Wrong alignment on ArmWreslingTable_BP_C_CustomEvent_0");
static_assert(sizeof(ArmWreslingTable_BP_C_CustomEvent_0) == 0x000038, "Wrong size on ArmWreslingTable_BP_C_CustomEvent_0");
static_assert(offsetof(ArmWreslingTable_BP_C_CustomEvent_0, PlayerRoundData) == 0x000000, "Member 'ArmWreslingTable_BP_C_CustomEvent_0::PlayerRoundData' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct ArmWreslingTable_BP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWreslingTable_BP_C_ReceiveTick) == 0x000004, "Wrong alignment on ArmWreslingTable_BP_C_ReceiveTick");
static_assert(sizeof(ArmWreslingTable_BP_C_ReceiveTick) == 0x000004, "Wrong size on ArmWreslingTable_BP_C_ReceiveTick");
static_assert(offsetof(ArmWreslingTable_BP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'ArmWreslingTable_BP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function ArmWreslingTable_BP.ArmWreslingTable_BP_C.ExecuteUbergraph_ArmWreslingTable_BP
// 0x00B0 (0x00B0 - 0x0000)
struct ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FArmWreslingPlayerRoundData& PlayerRoundData)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EArmWreslingTableState                        CallFunc_GetTableState_ReturnValue;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A6[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArmWreslingPlayerRoundData            K2Node_CustomEvent_playerRoundData;                // 0x0028(0x0038)(ConstParm, ContainsInstancedReference)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A7[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38A8[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ARBPawn* PawnInteracting)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x009C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP) == 0x000008, "Wrong alignment on ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP");
static_assert(sizeof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP) == 0x0000B0, "Wrong size on ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, EntryPoint) == 0x000000, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, Temp_bool_Variable) == 0x000004, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, Temp_float_Variable) == 0x000018, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, Temp_float_Variable_1) == 0x00001C, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_GetTableState_ReturnValue) == 0x000020, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_GetTableState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, K2Node_SwitchEnum_CmpSuccess) == 0x000021, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, K2Node_CustomEvent_playerRoundData) == 0x000028, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::K2Node_CustomEvent_playerRoundData' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, K2Node_Event_DeltaSeconds) == 0x000060, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, K2Node_SwitchEnum_CmpSuccess_1) == 0x000064, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Subtract_IntInt_ReturnValue) == 0x00006C, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Array_Get_Item) == 0x000070, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_FInterpTo_ReturnValue) == 0x000074, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000078, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00007C, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Lerp_ReturnValue) == 0x000080, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000084, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000088, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, K2Node_Select_Default) == 0x00008C, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000090, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Add_FloatFloat_ReturnValue) == 0x000094, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000098, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP, K2Node_CreateDelegate_OutputDelegate_1) == 0x00009C, "Member 'ArmWreslingTable_BP_C_ExecuteUbergraph_ArmWreslingTable_BP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

}

