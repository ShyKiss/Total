#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChessClock_BP

#include "Basic.hpp"

#include "OPP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ChessClock_BP.ChessClock_BP_C.OnWorldPopulateFinishedTimeSliced
// 0x0001 (0x0001 - 0x0000)
struct ChessClock_BP_C_OnWorldPopulateFinishedTimeSliced final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChessClock_BP_C_OnWorldPopulateFinishedTimeSliced) == 0x000001, "Wrong alignment on ChessClock_BP_C_OnWorldPopulateFinishedTimeSliced");
static_assert(sizeof(ChessClock_BP_C_OnWorldPopulateFinishedTimeSliced) == 0x000001, "Wrong size on ChessClock_BP_C_OnWorldPopulateFinishedTimeSliced");
static_assert(offsetof(ChessClock_BP_C_OnWorldPopulateFinishedTimeSliced, ReturnValue) == 0x000000, "Member 'ChessClock_BP_C_OnWorldPopulateFinishedTimeSliced::ReturnValue' has a wrong offset!");

// Function ChessClock_BP.ChessClock_BP_C.OnTeamTurnChanged
// 0x0002 (0x0002 - 0x0000)
struct ChessClock_BP_C_OnTeamTurnChanged final
{
public:
	EChessTeam                                    Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChessClock_BP_C_OnTeamTurnChanged) == 0x000001, "Wrong alignment on ChessClock_BP_C_OnTeamTurnChanged");
static_assert(sizeof(ChessClock_BP_C_OnTeamTurnChanged) == 0x000002, "Wrong size on ChessClock_BP_C_OnTeamTurnChanged");
static_assert(offsetof(ChessClock_BP_C_OnTeamTurnChanged, Team) == 0x000000, "Member 'ChessClock_BP_C_OnTeamTurnChanged::Team' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_OnTeamTurnChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'ChessClock_BP_C_OnTeamTurnChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ChessClock_BP.ChessClock_BP_C.OnGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ChessClock_BP_C_OnGameStateChanged final
{
public:
	EChessGameState                               ChessGameState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChessClock_BP_C_OnGameStateChanged) == 0x000001, "Wrong alignment on ChessClock_BP_C_OnGameStateChanged");
static_assert(sizeof(ChessClock_BP_C_OnGameStateChanged) == 0x000002, "Wrong size on ChessClock_BP_C_OnGameStateChanged");
static_assert(offsetof(ChessClock_BP_C_OnGameStateChanged, ChessGameState) == 0x000000, "Member 'ChessClock_BP_C_OnGameStateChanged::ChessGameState' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_OnGameStateChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'ChessClock_BP_C_OnGameStateChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ChessClock_BP.ChessClock_BP_C.ResetButtons
// 0x0140 (0x0140 - 0x0000)
struct ChessClock_BP_C_ResetButtons final
{
public:
	float                                         CallFunc_BreakVector_X;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x00B8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ChessClock_BP_C_ResetButtons) == 0x000004, "Wrong alignment on ChessClock_BP_C_ResetButtons");
static_assert(sizeof(ChessClock_BP_C_ResetButtons) == 0x000140, "Wrong size on ChessClock_BP_C_ResetButtons");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_BreakVector_X) == 0x000000, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_BreakVector_Y) == 0x000004, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_BreakVector_Z) == 0x000008, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_BreakVector_X_1) == 0x00000C, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_BreakVector_Y_1) == 0x000010, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_BreakVector_Z_1) == 0x000014, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_MakeVector_ReturnValue) == 0x000018, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_MakeVector_ReturnValue_1) == 0x000024, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000030, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ResetButtons, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0000B8, "Member 'ChessClock_BP_C_ResetButtons::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");

// Function ChessClock_BP.ChessClock_BP_C.SetButtonsTurnTo
// 0x0164 (0x0164 - 0x0000)
struct ChessClock_BP_C_SetButtonsTurnTo final
{
public:
	bool                                          bPlayer1;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34E8[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34E9[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34EA[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0054(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x00DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ChessClock_BP_C_SetButtonsTurnTo) == 0x000004, "Wrong alignment on ChessClock_BP_C_SetButtonsTurnTo");
static_assert(sizeof(ChessClock_BP_C_SetButtonsTurnTo) == 0x000164, "Wrong size on ChessClock_BP_C_SetButtonsTurnTo");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, bPlayer1) == 0x000000, "Member 'ChessClock_BP_C_SetButtonsTurnTo::bPlayer1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, Temp_bool_Variable) == 0x000001, "Member 'ChessClock_BP_C_SetButtonsTurnTo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, Temp_float_Variable) == 0x000004, "Member 'ChessClock_BP_C_SetButtonsTurnTo::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, Temp_float_Variable_1) == 0x000008, "Member 'ChessClock_BP_C_SetButtonsTurnTo::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, Temp_bool_Variable_1) == 0x00000C, "Member 'ChessClock_BP_C_SetButtonsTurnTo::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, Temp_float_Variable_2) == 0x000010, "Member 'ChessClock_BP_C_SetButtonsTurnTo::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, Temp_float_Variable_3) == 0x000014, "Member 'ChessClock_BP_C_SetButtonsTurnTo::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, K2Node_Select_Default) == 0x00001C, "Member 'ChessClock_BP_C_SetButtonsTurnTo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, K2Node_Select_Default_1) == 0x000020, "Member 'ChessClock_BP_C_SetButtonsTurnTo::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_BreakVector_X) == 0x000024, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_BreakVector_Y) == 0x000028, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_BreakVector_Z) == 0x00002C, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_BreakVector_X_1) == 0x000030, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_BreakVector_Y_1) == 0x000034, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_BreakVector_Z_1) == 0x000038, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_MakeVector_ReturnValue) == 0x00003C, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_MakeVector_ReturnValue_1) == 0x000048, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000054, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetButtonsTurnTo, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0000DC, "Member 'ChessClock_BP_C_SetButtonsTurnTo::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");

// Function ChessClock_BP.ChessClock_BP_C.UpdateTime
// 0x000C (0x000C - 0x0000)
struct ChessClock_BP_C_UpdateTime final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34EB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTeamRemainingTime_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTeamRemainingTime_ReturnValue_1;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChessClock_BP_C_UpdateTime) == 0x000004, "Wrong alignment on ChessClock_BP_C_UpdateTime");
static_assert(sizeof(ChessClock_BP_C_UpdateTime) == 0x00000C, "Wrong size on ChessClock_BP_C_UpdateTime");
static_assert(offsetof(ChessClock_BP_C_UpdateTime, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ChessClock_BP_C_UpdateTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_UpdateTime, CallFunc_GetTeamRemainingTime_ReturnValue) == 0x000004, "Member 'ChessClock_BP_C_UpdateTime::CallFunc_GetTeamRemainingTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_UpdateTime, CallFunc_GetTeamRemainingTime_ReturnValue_1) == 0x000008, "Member 'ChessClock_BP_C_UpdateTime::CallFunc_GetTeamRemainingTime_ReturnValue_1' has a wrong offset!");

// Function ChessClock_BP.ChessClock_BP_C.SetTimeForPlayer
// 0x0180 (0x0180 - 0x0000)
struct ChessClock_BP_C_SetTimeForPlayer final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayer1;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34EC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   SecondsNeedle;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MinuteNeedle;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NumSeconds;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NumMinutes;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34ED[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   K2Node_Select_Default_1;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue_1;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x00E0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChessClock_BP_C_SetTimeForPlayer) == 0x000008, "Wrong alignment on ChessClock_BP_C_SetTimeForPlayer");
static_assert(sizeof(ChessClock_BP_C_SetTimeForPlayer) == 0x000180, "Wrong size on ChessClock_BP_C_SetTimeForPlayer");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, TimeSeconds) == 0x000000, "Member 'ChessClock_BP_C_SetTimeForPlayer::TimeSeconds' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, IsPlayer1) == 0x000004, "Member 'ChessClock_BP_C_SetTimeForPlayer::IsPlayer1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, SecondsNeedle) == 0x000008, "Member 'ChessClock_BP_C_SetTimeForPlayer::SecondsNeedle' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, MinuteNeedle) == 0x000010, "Member 'ChessClock_BP_C_SetTimeForPlayer::MinuteNeedle' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, NumSeconds) == 0x000018, "Member 'ChessClock_BP_C_SetTimeForPlayer::NumSeconds' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, NumMinutes) == 0x00001C, "Member 'ChessClock_BP_C_SetTimeForPlayer::NumMinutes' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, Temp_bool_Variable) == 0x000020, "Member 'ChessClock_BP_C_SetTimeForPlayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, Temp_bool_Variable_1) == 0x000021, "Member 'ChessClock_BP_C_SetTimeForPlayer::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, K2Node_Select_Default) == 0x000028, "Member 'ChessClock_BP_C_SetTimeForPlayer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, K2Node_Select_Default_1) == 0x000030, "Member 'ChessClock_BP_C_SetTimeForPlayer::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_MapRangeClamped_ReturnValue) == 0x000038, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_MapRangeClamped_ReturnValue_1) == 0x00003C, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_MakeRotator_ReturnValue) == 0x000040, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_MakeRotator_ReturnValue_1) == 0x00004C, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000058, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0000E0, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000168, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00016C, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_FFloor_ReturnValue) == 0x000170, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_FFloor_ReturnValue_1) == 0x000174, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000178, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_SetTimeForPlayer, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00017C, "Member 'ChessClock_BP_C_SetTimeForPlayer::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");

// Function ChessClock_BP.ChessClock_BP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct ChessClock_BP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChessClock_BP_C_ReceiveTick) == 0x000004, "Wrong alignment on ChessClock_BP_C_ReceiveTick");
static_assert(sizeof(ChessClock_BP_C_ReceiveTick) == 0x000004, "Wrong size on ChessClock_BP_C_ReceiveTick");
static_assert(offsetof(ChessClock_BP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'ChessClock_BP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function ChessClock_BP.ChessClock_BP_C.SwitchButtonDelayed
// 0x0001 (0x0001 - 0x0000)
struct ChessClock_BP_C_SwitchButtonDelayed final
{
public:
	bool                                          bPlayer1;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChessClock_BP_C_SwitchButtonDelayed) == 0x000001, "Wrong alignment on ChessClock_BP_C_SwitchButtonDelayed");
static_assert(sizeof(ChessClock_BP_C_SwitchButtonDelayed) == 0x000001, "Wrong size on ChessClock_BP_C_SwitchButtonDelayed");
static_assert(offsetof(ChessClock_BP_C_SwitchButtonDelayed, bPlayer1) == 0x000000, "Member 'ChessClock_BP_C_SwitchButtonDelayed::bPlayer1' has a wrong offset!");

// Function ChessClock_BP.ChessClock_BP_C.ExecuteUbergraph_ChessClock_BP
// 0x0048 (0x0048 - 0x0000)
struct ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EChessGameState ChessGameState)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_34EE[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EChessTeam Team)>              K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_34EF[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetParentActor_ReturnValue;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBChessBoardBase_C*                    K2Node_DynamicCast_AsRB_Chess_Board_Base;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bPlayer1;                       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsClient_ReturnValue;                     // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsClient_ReturnValue_1;                   // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP) == 0x000008, "Wrong alignment on ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP");
static_assert(sizeof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP) == 0x000048, "Wrong size on ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, EntryPoint) == 0x000000, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, CallFunc_GetParentActor_ReturnValue) == 0x000030, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::CallFunc_GetParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, K2Node_DynamicCast_AsRB_Chess_Board_Base) == 0x000038, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::K2Node_DynamicCast_AsRB_Chess_Board_Base' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, K2Node_CustomEvent_bPlayer1) == 0x000041, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::K2Node_CustomEvent_bPlayer1' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, CallFunc_IsValid_ReturnValue) == 0x000042, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, CallFunc_IsClient_ReturnValue) == 0x000043, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::CallFunc_IsClient_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP, CallFunc_IsClient_ReturnValue_1) == 0x000044, "Member 'ChessClock_BP_C_ExecuteUbergraph_ChessClock_BP::CallFunc_IsClient_ReturnValue_1' has a wrong offset!");

}

