#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PerkList

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "OPP_structs.hpp"


namespace SDK::Params
{

// Function PerkList.PerkList_C.RefreshDisplay
// 0x0048 (0x0048 - 0x0000)
struct PerkList_C_RefreshDisplay final
{
public:
	bool                                          ShowGrid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3551[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3552[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3553[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerkCategoryButton_C*                  K2Node_DynamicCast_AsPerk_Category_Button;         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkList_C_RefreshDisplay) == 0x000008, "Wrong alignment on PerkList_C_RefreshDisplay");
static_assert(sizeof(PerkList_C_RefreshDisplay) == 0x000048, "Wrong size on PerkList_C_RefreshDisplay");
static_assert(offsetof(PerkList_C_RefreshDisplay, ShowGrid) == 0x000000, "Member 'PerkList_C_RefreshDisplay::ShowGrid' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, Temp_byte_Variable) == 0x000001, "Member 'PerkList_C_RefreshDisplay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, Temp_byte_Variable_1) == 0x000002, "Member 'PerkList_C_RefreshDisplay::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, Temp_bool_Variable) == 0x000003, "Member 'PerkList_C_RefreshDisplay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, Temp_byte_Variable_2) == 0x000004, "Member 'PerkList_C_RefreshDisplay::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, Temp_byte_Variable_3) == 0x000005, "Member 'PerkList_C_RefreshDisplay::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, K2Node_Select_Default) == 0x000006, "Member 'PerkList_C_RefreshDisplay::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, Temp_int_Array_Index_Variable) == 0x000008, "Member 'PerkList_C_RefreshDisplay::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'PerkList_C_RefreshDisplay::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'PerkList_C_RefreshDisplay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, Temp_bool_Variable_1) == 0x000014, "Member 'PerkList_C_RefreshDisplay::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, K2Node_Select_Default_1) == 0x000015, "Member 'PerkList_C_RefreshDisplay::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, CallFunc_GetAllChildren_ReturnValue) == 0x000018, "Member 'PerkList_C_RefreshDisplay::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, CallFunc_Array_Get_Item) == 0x000028, "Member 'PerkList_C_RefreshDisplay::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'PerkList_C_RefreshDisplay::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, K2Node_DynamicCast_AsPerk_Category_Button) == 0x000038, "Member 'PerkList_C_RefreshDisplay::K2Node_DynamicCast_AsPerk_Category_Button' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'PerkList_C_RefreshDisplay::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshDisplay, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'PerkList_C_RefreshDisplay::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function PerkList.PerkList_C.HandleGamepadFocus
// 0x0038 (0x0038 - 0x0000)
struct PerkList_C_HandleGamepadFocus final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3554[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_IsUsingGamepad_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3555[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3556[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue_1;                 // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_HandleGamepadFocus) == 0x000008, "Wrong alignment on PerkList_C_HandleGamepadFocus");
static_assert(sizeof(PerkList_C_HandleGamepadFocus) == 0x000038, "Wrong size on PerkList_C_HandleGamepadFocus");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, Temp_bool_Variable) == 0x000000, "Member 'PerkList_C_HandleGamepadFocus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, CallFunc_GetChildrenCount_ReturnValue) == 0x000004, "Member 'PerkList_C_HandleGamepadFocus::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, CallFunc_BP_IsUsingGamepad_ReturnValue) == 0x000008, "Member 'PerkList_C_HandleGamepadFocus::CallFunc_BP_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'PerkList_C_HandleGamepadFocus::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, CallFunc_Clamp_ReturnValue) == 0x000010, "Member 'PerkList_C_HandleGamepadFocus::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'PerkList_C_HandleGamepadFocus::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, CallFunc_GetChildAt_ReturnValue) == 0x000018, "Member 'PerkList_C_HandleGamepadFocus::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, CallFunc_IsVisible_ReturnValue) == 0x000020, "Member 'PerkList_C_HandleGamepadFocus::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, CallFunc_GetChildAt_ReturnValue_1) == 0x000028, "Member 'PerkList_C_HandleGamepadFocus::CallFunc_GetChildAt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleGamepadFocus, K2Node_Select_Default) == 0x000030, "Member 'PerkList_C_HandleGamepadFocus::K2Node_Select_Default' has a wrong offset!");

// Function PerkList.PerkList_C.HandleNavigationBack
// 0x0002 (0x0002 - 0x0000)
struct PerkList_C_HandleNavigationBack final
{
public:
	bool                                          CanExitMenu;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkList_C_HandleNavigationBack) == 0x000001, "Wrong alignment on PerkList_C_HandleNavigationBack");
static_assert(sizeof(PerkList_C_HandleNavigationBack) == 0x000002, "Wrong size on PerkList_C_HandleNavigationBack");
static_assert(offsetof(PerkList_C_HandleNavigationBack, CanExitMenu) == 0x000000, "Member 'PerkList_C_HandleNavigationBack::CanExitMenu' has a wrong offset!");
static_assert(offsetof(PerkList_C_HandleNavigationBack, CallFunc_IsVisible_ReturnValue) == 0x000001, "Member 'PerkList_C_HandleNavigationBack::CallFunc_IsVisible_ReturnValue' has a wrong offset!");

// Function PerkList.PerkList_C.CycleCategory
// 0x0034 (0x0034 - 0x0000)
struct PerkList_C_CycleCategory final
{
public:
	bool                                          Left;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3557[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3558[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3559[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_CycleCategory) == 0x000004, "Wrong alignment on PerkList_C_CycleCategory");
static_assert(sizeof(PerkList_C_CycleCategory) == 0x000034, "Wrong size on PerkList_C_CycleCategory");
static_assert(offsetof(PerkList_C_CycleCategory, Left) == 0x000000, "Member 'PerkList_C_CycleCategory::Left' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, Temp_bool_Variable) == 0x000001, "Member 'PerkList_C_CycleCategory::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, Temp_int_Variable) == 0x000004, "Member 'PerkList_C_CycleCategory::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, Temp_int_Variable_1) == 0x000008, "Member 'PerkList_C_CycleCategory::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_IsVisible_ReturnValue) == 0x00000C, "Member 'PerkList_C_CycleCategory::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, K2Node_Select_Default) == 0x000010, "Member 'PerkList_C_CycleCategory::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_Not_PreBool_ReturnValue) == 0x000014, "Member 'PerkList_C_CycleCategory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_MakeLiteralInt_ReturnValue) == 0x000018, "Member 'PerkList_C_CycleCategory::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_Subtract_IntInt_ReturnValue) == 0x00001C, "Member 'PerkList_C_CycleCategory::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000020, "Member 'PerkList_C_CycleCategory::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'PerkList_C_CycleCategory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'PerkList_C_CycleCategory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_Percent_IntInt_ReturnValue) == 0x00002C, "Member 'PerkList_C_CycleCategory::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_Conv_IntToByte_ReturnValue) == 0x000030, "Member 'PerkList_C_CycleCategory::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_CycleCategory, CallFunc_GetValidValue_ReturnValue) == 0x000031, "Member 'PerkList_C_CycleCategory::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");

// Function PerkList.PerkList_C.GamepadNav_HandleGridNavigation
// 0x0020 (0x0020 - 0x0000)
struct PerkList_C_GamepadNav_HandleGridNavigation final
{
public:
	EUINavigation                                 Param_Navigation;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GamepadNav_HandleUniformGridNavigation_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_GamepadNav_HandleGridNavigation) == 0x000008, "Wrong alignment on PerkList_C_GamepadNav_HandleGridNavigation");
static_assert(sizeof(PerkList_C_GamepadNav_HandleGridNavigation) == 0x000020, "Wrong size on PerkList_C_GamepadNav_HandleGridNavigation");
static_assert(offsetof(PerkList_C_GamepadNav_HandleGridNavigation, Param_Navigation) == 0x000000, "Member 'PerkList_C_GamepadNav_HandleGridNavigation::Param_Navigation' has a wrong offset!");
static_assert(offsetof(PerkList_C_GamepadNav_HandleGridNavigation, ReturnValue) == 0x000008, "Member 'PerkList_C_GamepadNav_HandleGridNavigation::ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_GamepadNav_HandleGridNavigation, CallFunc_GetChildrenCount_ReturnValue) == 0x000010, "Member 'PerkList_C_GamepadNav_HandleGridNavigation::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_GamepadNav_HandleGridNavigation, CallFunc_GamepadNav_HandleUniformGridNavigation_ReturnValue) == 0x000018, "Member 'PerkList_C_GamepadNav_HandleGridNavigation::CallFunc_GamepadNav_HandleUniformGridNavigation_ReturnValue' has a wrong offset!");

// Function PerkList.PerkList_C.OnFocusReceived
// 0x01B0 (0x01B0 - 0x0000)
struct PerkList_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(PerkList_C_OnFocusReceived) == 0x000008, "Wrong alignment on PerkList_C_OnFocusReceived");
static_assert(sizeof(PerkList_C_OnFocusReceived) == 0x0001B0, "Wrong size on PerkList_C_OnFocusReceived");
static_assert(offsetof(PerkList_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'PerkList_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(PerkList_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'PerkList_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(PerkList_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'PerkList_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'PerkList_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function PerkList.PerkList_C.OnPerkReleasedEvent
// 0x0128 (0x0128 - 0x0000)
struct PerkList_C_OnPerkReleasedEvent final
{
public:
	struct FMenuUpgradeItemInfo                   ItemInfo;                                          // 0x0000(0x0128)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(PerkList_C_OnPerkReleasedEvent) == 0x000008, "Wrong alignment on PerkList_C_OnPerkReleasedEvent");
static_assert(sizeof(PerkList_C_OnPerkReleasedEvent) == 0x000128, "Wrong size on PerkList_C_OnPerkReleasedEvent");
static_assert(offsetof(PerkList_C_OnPerkReleasedEvent, ItemInfo) == 0x000000, "Member 'PerkList_C_OnPerkReleasedEvent::ItemInfo' has a wrong offset!");

// Function PerkList.PerkList_C.OnPerkPressedEvent
// 0x0128 (0x0128 - 0x0000)
struct PerkList_C_OnPerkPressedEvent final
{
public:
	struct FMenuUpgradeItemInfo                   ItemInfo;                                          // 0x0000(0x0128)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(PerkList_C_OnPerkPressedEvent) == 0x000008, "Wrong alignment on PerkList_C_OnPerkPressedEvent");
static_assert(sizeof(PerkList_C_OnPerkPressedEvent) == 0x000128, "Wrong size on PerkList_C_OnPerkPressedEvent");
static_assert(offsetof(PerkList_C_OnPerkPressedEvent, ItemInfo) == 0x000000, "Member 'PerkList_C_OnPerkPressedEvent::ItemInfo' has a wrong offset!");

// Function PerkList.PerkList_C.OnPerkClickedEvent
// 0x0008 (0x0008 - 0x0000)
struct PerkList_C_OnPerkClickedEvent final
{
public:
	class UPerkUpgradeButton_C*                   Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_OnPerkClickedEvent) == 0x000008, "Wrong alignment on PerkList_C_OnPerkClickedEvent");
static_assert(sizeof(PerkList_C_OnPerkClickedEvent) == 0x000008, "Wrong size on PerkList_C_OnPerkClickedEvent");
static_assert(offsetof(PerkList_C_OnPerkClickedEvent, Button) == 0x000000, "Member 'PerkList_C_OnPerkClickedEvent::Button' has a wrong offset!");

// Function PerkList.PerkList_C.OnPerkUnhoveredEvent
// 0x0008 (0x0008 - 0x0000)
struct PerkList_C_OnPerkUnhoveredEvent final
{
public:
	class UPerkUpgradeButton_C*                   Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_OnPerkUnhoveredEvent) == 0x000008, "Wrong alignment on PerkList_C_OnPerkUnhoveredEvent");
static_assert(sizeof(PerkList_C_OnPerkUnhoveredEvent) == 0x000008, "Wrong size on PerkList_C_OnPerkUnhoveredEvent");
static_assert(offsetof(PerkList_C_OnPerkUnhoveredEvent, Button) == 0x000000, "Member 'PerkList_C_OnPerkUnhoveredEvent::Button' has a wrong offset!");

// Function PerkList.PerkList_C.OnPerkHoveredEvent
// 0x0008 (0x0008 - 0x0000)
struct PerkList_C_OnPerkHoveredEvent final
{
public:
	class UPerkUpgradeButton_C*                   Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_OnPerkHoveredEvent) == 0x000008, "Wrong alignment on PerkList_C_OnPerkHoveredEvent");
static_assert(sizeof(PerkList_C_OnPerkHoveredEvent) == 0x000008, "Wrong size on PerkList_C_OnPerkHoveredEvent");
static_assert(offsetof(PerkList_C_OnPerkHoveredEvent, Button) == 0x000000, "Member 'PerkList_C_OnPerkHoveredEvent::Button' has a wrong offset!");

// Function PerkList.PerkList_C.RefreshGrid
// 0x0098 (0x0098 - 0x0000)
struct PerkList_C_RefreshGrid final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRBPlayerLoadout                       CallFunc_GetMenuLoadout_ReturnValue;               // 0x0018(0x0018)()
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355C[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerkCategoryButton_C*                  K2Node_DynamicCast_AsPerk_Category_Button;         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_355D[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue_1;             // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355E[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_355F[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerkUpgradeButton_C*                   K2Node_DynamicCast_AsPerk_Upgrade_Button;          // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkList_C_RefreshGrid) == 0x000008, "Wrong alignment on PerkList_C_RefreshGrid");
static_assert(sizeof(PerkList_C_RefreshGrid) == 0x000098, "Wrong size on PerkList_C_RefreshGrid");
static_assert(offsetof(PerkList_C_RefreshGrid, Temp_int_Array_Index_Variable) == 0x000000, "Member 'PerkList_C_RefreshGrid::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'PerkList_C_RefreshGrid::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'PerkList_C_RefreshGrid::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'PerkList_C_RefreshGrid::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'PerkList_C_RefreshGrid::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'PerkList_C_RefreshGrid::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_GetMenuLoadout_ReturnValue) == 0x000018, "Member 'PerkList_C_RefreshGrid::CallFunc_GetMenuLoadout_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_GetAllChildren_ReturnValue) == 0x000030, "Member 'PerkList_C_RefreshGrid::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_Array_Get_Item) == 0x000040, "Member 'PerkList_C_RefreshGrid::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'PerkList_C_RefreshGrid::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, K2Node_DynamicCast_AsPerk_Category_Button) == 0x000050, "Member 'PerkList_C_RefreshGrid::K2Node_DynamicCast_AsPerk_Category_Button' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'PerkList_C_RefreshGrid::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_Less_IntInt_ReturnValue) == 0x000059, "Member 'PerkList_C_RefreshGrid::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_GetAllChildren_ReturnValue_1) == 0x000060, "Member 'PerkList_C_RefreshGrid::CallFunc_GetAllChildren_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_Array_Length_ReturnValue_1) == 0x000070, "Member 'PerkList_C_RefreshGrid::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'PerkList_C_RefreshGrid::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_Less_IntInt_ReturnValue_1) == 0x000080, "Member 'PerkList_C_RefreshGrid::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, K2Node_DynamicCast_AsPerk_Upgrade_Button) == 0x000088, "Member 'PerkList_C_RefreshGrid::K2Node_DynamicCast_AsPerk_Upgrade_Button' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'PerkList_C_RefreshGrid::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_RefreshGrid, CallFunc_Array_Contains_ReturnValue) == 0x000091, "Member 'PerkList_C_RefreshGrid::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function PerkList.PerkList_C.Init
// 0x0002 (0x0002 - 0x0000)
struct PerkList_C_Init final
{
public:
	bool                                          Param_bIsLoadout;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPerkCategory                                 InitialCategory;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_Init) == 0x000001, "Wrong alignment on PerkList_C_Init");
static_assert(sizeof(PerkList_C_Init) == 0x000002, "Wrong size on PerkList_C_Init");
static_assert(offsetof(PerkList_C_Init, Param_bIsLoadout) == 0x000000, "Member 'PerkList_C_Init::Param_bIsLoadout' has a wrong offset!");
static_assert(offsetof(PerkList_C_Init, InitialCategory) == 0x000001, "Member 'PerkList_C_Init::InitialCategory' has a wrong offset!");

// Function PerkList.PerkList_C.Setup
// 0x0320 (0x0320 - 0x0000)
struct PerkList_C_Setup final
{
public:
	EPerkCategory                                 WantedCategory;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EVerticalAlignment                            Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3560[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerkUpgradeButton_C*                   CallFunc_Create_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPerkUpgradeButton_C* PerkUpgradeButton)> K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_3;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3561[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EUINavigation Navigation)>     K2Node_CreateDelegate_OutputDelegate_1;            // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3562[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URBLocalProfile*                        CallFunc_GetProfile_ReturnValue;                   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FMenuUpgradeItemInfo& ItemInfo)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3563[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FMenuUpgradeItemInfo& ItemInfo)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x006C(0x0010)(ZeroConstructor, NoDestructor)
	EHorizontalAlignment                          K2Node_Select_Default;                             // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVerticalAlignment                            K2Node_Select_Default_1;                           // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3564[0x2];                                     // 0x007E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBPlayerLoadout                       CallFunc_GetMenuLoadout_ReturnValue;               // 0x0080(0x0018)()
	TDelegate<void(class UPerkUpgradeButton_C* Button)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0098(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UPerkUpgradeButton_C* Button)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class UPerkUpgradeButton_C* Button)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x00B8(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_GetFocusedChildIndex_ReturnValue;         // 0x00C8(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3565[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue;        // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UScrollBoxSlot*                         CallFunc_SlotAsScrollBoxSlot_ReturnValue;          // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBPlayerProgressionData*               CallFunc_GetLocalPlayerProgressionData_ReturnValue; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRBItemProgressionData>         CallFunc_FilterItemProgressionData_ReturnValue;    // 0x00E8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3566[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBItemProgressionData                 CallFunc_Array_Get_Item;                           // 0x0100(0x00E8)()
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasItemBeenDisplayedInMenu_ReturnValue;   // 0x01EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x01EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3567[0x1];                                     // 0x01EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMenuUpgradeItemInfo                   CallFunc_GetUpgradeItemInfo_ReturnValue;           // 0x01F0(0x0128)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkList_C_Setup) == 0x000008, "Wrong alignment on PerkList_C_Setup");
static_assert(sizeof(PerkList_C_Setup) == 0x000320, "Wrong size on PerkList_C_Setup");
static_assert(offsetof(PerkList_C_Setup, WantedCategory) == 0x000000, "Member 'PerkList_C_Setup::WantedCategory' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, Temp_byte_Variable) == 0x000001, "Member 'PerkList_C_Setup::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, Temp_bool_Variable) == 0x000002, "Member 'PerkList_C_Setup::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, Temp_byte_Variable_1) == 0x000003, "Member 'PerkList_C_Setup::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, Temp_byte_Variable_2) == 0x000004, "Member 'PerkList_C_Setup::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Create_ReturnValue) == 0x000008, "Member 'PerkList_C_Setup::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'PerkList_C_Setup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'PerkList_C_Setup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, Temp_int_Array_Index_Variable) == 0x000018, "Member 'PerkList_C_Setup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'PerkList_C_Setup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Divide_IntInt_ReturnValue) == 0x00002C, "Member 'PerkList_C_Setup::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Percent_IntInt_ReturnValue) == 0x000030, "Member 'PerkList_C_Setup::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, Temp_byte_Variable_3) == 0x000034, "Member 'PerkList_C_Setup::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_CreateDelegate_OutputDelegate_1) == 0x000038, "Member 'PerkList_C_Setup::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'PerkList_C_Setup::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, Temp_bool_Variable_1) == 0x000049, "Member 'PerkList_C_Setup::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_GetProfile_ReturnValue) == 0x000050, "Member 'PerkList_C_Setup::CallFunc_GetProfile_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_CreateDelegate_OutputDelegate_2) == 0x000058, "Member 'PerkList_C_Setup::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'PerkList_C_Setup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_CreateDelegate_OutputDelegate_3) == 0x00006C, "Member 'PerkList_C_Setup::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_Select_Default) == 0x00007C, "Member 'PerkList_C_Setup::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_Select_Default_1) == 0x00007D, "Member 'PerkList_C_Setup::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_GetMenuLoadout_ReturnValue) == 0x000080, "Member 'PerkList_C_Setup::CallFunc_GetMenuLoadout_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_CreateDelegate_OutputDelegate_4) == 0x000098, "Member 'PerkList_C_Setup::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000A8, "Member 'PerkList_C_Setup::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_CreateDelegate_OutputDelegate_6) == 0x0000B8, "Member 'PerkList_C_Setup::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_GetFocusedChildIndex_ReturnValue) == 0x0000C8, "Member 'PerkList_C_Setup::CallFunc_GetFocusedChildIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_AddChildToUniformGrid_ReturnValue) == 0x0000D0, "Member 'PerkList_C_Setup::CallFunc_AddChildToUniformGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_SlotAsScrollBoxSlot_ReturnValue) == 0x0000D8, "Member 'PerkList_C_Setup::CallFunc_SlotAsScrollBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_GetLocalPlayerProgressionData_ReturnValue) == 0x0000E0, "Member 'PerkList_C_Setup::CallFunc_GetLocalPlayerProgressionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_FilterItemProgressionData_ReturnValue) == 0x0000E8, "Member 'PerkList_C_Setup::CallFunc_FilterItemProgressionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Array_Length_ReturnValue) == 0x0000F8, "Member 'PerkList_C_Setup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Array_Get_Item) == 0x000100, "Member 'PerkList_C_Setup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Less_IntInt_ReturnValue) == 0x0001E8, "Member 'PerkList_C_Setup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Greater_IntInt_ReturnValue) == 0x0001E9, "Member 'PerkList_C_Setup::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_BooleanAND_ReturnValue) == 0x0001EA, "Member 'PerkList_C_Setup::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_HasItemBeenDisplayedInMenu_ReturnValue) == 0x0001EB, "Member 'PerkList_C_Setup::CallFunc_HasItemBeenDisplayedInMenu_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Array_Contains_ReturnValue) == 0x0001EC, "Member 'PerkList_C_Setup::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001ED, "Member 'PerkList_C_Setup::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_BooleanAND_ReturnValue_1) == 0x0001EE, "Member 'PerkList_C_Setup::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, CallFunc_GetUpgradeItemInfo_ReturnValue) == 0x0001F0, "Member 'PerkList_C_Setup::CallFunc_GetUpgradeItemInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_Setup, K2Node_SwitchEnum_CmpSuccess) == 0x000318, "Member 'PerkList_C_Setup::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function PerkList.PerkList_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct PerkList_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkList_C_PreConstruct) == 0x000001, "Wrong alignment on PerkList_C_PreConstruct");
static_assert(sizeof(PerkList_C_PreConstruct) == 0x000001, "Wrong size on PerkList_C_PreConstruct");
static_assert(offsetof(PerkList_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'PerkList_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function PerkList.PerkList_C.Event_InputSourceChanged
// 0x0001 (0x0001 - 0x0000)
struct PerkList_C_Event_InputSourceChanged final
{
public:
	bool                                          bIsGamepad;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkList_C_Event_InputSourceChanged) == 0x000001, "Wrong alignment on PerkList_C_Event_InputSourceChanged");
static_assert(sizeof(PerkList_C_Event_InputSourceChanged) == 0x000001, "Wrong size on PerkList_C_Event_InputSourceChanged");
static_assert(offsetof(PerkList_C_Event_InputSourceChanged, bIsGamepad) == 0x000000, "Member 'PerkList_C_Event_InputSourceChanged::bIsGamepad' has a wrong offset!");

// Function PerkList.PerkList_C.OnPerkCategoryClicked
// 0x0001 (0x0001 - 0x0000)
struct PerkList_C_OnPerkCategoryClicked final
{
public:
	EPerkCategory                                 Category;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_OnPerkCategoryClicked) == 0x000001, "Wrong alignment on PerkList_C_OnPerkCategoryClicked");
static_assert(sizeof(PerkList_C_OnPerkCategoryClicked) == 0x000001, "Wrong size on PerkList_C_OnPerkCategoryClicked");
static_assert(offsetof(PerkList_C_OnPerkCategoryClicked, Category) == 0x000000, "Member 'PerkList_C_OnPerkCategoryClicked::Category' has a wrong offset!");

// Function PerkList.PerkList_C.OnUpgradeBuyAnimationEnded
// 0x0008 (0x0008 - 0x0000)
struct PerkList_C_OnUpgradeBuyAnimationEnded final
{
public:
	class UPerkUpgradeButton_C*                   PerkUpgradeButton;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_OnUpgradeBuyAnimationEnded) == 0x000008, "Wrong alignment on PerkList_C_OnUpgradeBuyAnimationEnded");
static_assert(sizeof(PerkList_C_OnUpgradeBuyAnimationEnded) == 0x000008, "Wrong size on PerkList_C_OnUpgradeBuyAnimationEnded");
static_assert(offsetof(PerkList_C_OnUpgradeBuyAnimationEnded, PerkUpgradeButton) == 0x000000, "Member 'PerkList_C_OnUpgradeBuyAnimationEnded::PerkUpgradeButton' has a wrong offset!");

// Function PerkList.PerkList_C.ExecuteUbergraph_PerkList
// 0x0080 (0x0080 - 0x0000)
struct PerkList_C_ExecuteUbergraph_PerkList final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EScrollWhenFocusChanges                       Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3568[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EScrollWhenFocusChanges                       Temp_byte_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3569[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPerkCategory Category)>       K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsGamepad;                           // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsUsingGamepad_ReturnValue;            // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EScrollWhenFocusChanges                       K2Node_Select_Default;                             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_356A[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	EPerkCategory                                 K2Node_CustomEvent_category;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_356B[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPerkCategoryButton_C*                  K2Node_DynamicCast_AsPerk_Category_Button;         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_356C[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_356D[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerkUpgradeButton_C*                   K2Node_CustomEvent_PerkUpgradeButton;              // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildIndex_ReturnValue;                // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFocusedChildIndex_ReturnValue;         // 0x0074(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkList_C_ExecuteUbergraph_PerkList) == 0x000008, "Wrong alignment on PerkList_C_ExecuteUbergraph_PerkList");
static_assert(sizeof(PerkList_C_ExecuteUbergraph_PerkList) == 0x000080, "Wrong size on PerkList_C_ExecuteUbergraph_PerkList");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, EntryPoint) == 0x000000, "Member 'PerkList_C_ExecuteUbergraph_PerkList::EntryPoint' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'PerkList_C_ExecuteUbergraph_PerkList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, Temp_byte_Variable) == 0x000008, "Member 'PerkList_C_ExecuteUbergraph_PerkList::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'PerkList_C_ExecuteUbergraph_PerkList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, Temp_byte_Variable_1) == 0x000010, "Member 'PerkList_C_ExecuteUbergraph_PerkList::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'PerkList_C_ExecuteUbergraph_PerkList::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, Temp_int_Array_Index_Variable) == 0x000024, "Member 'PerkList_C_ExecuteUbergraph_PerkList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, Temp_bool_Variable) == 0x000028, "Member 'PerkList_C_ExecuteUbergraph_PerkList::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, K2Node_Event_IsDesignTime) == 0x000029, "Member 'PerkList_C_ExecuteUbergraph_PerkList::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, K2Node_Event_bIsGamepad) == 0x00002A, "Member 'PerkList_C_ExecuteUbergraph_PerkList::K2Node_Event_bIsGamepad' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, CallFunc_BP_IsUsingGamepad_ReturnValue) == 0x00002B, "Member 'PerkList_C_ExecuteUbergraph_PerkList::CallFunc_BP_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, K2Node_Select_Default) == 0x00002C, "Member 'PerkList_C_ExecuteUbergraph_PerkList::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, CallFunc_GetAllChildren_ReturnValue) == 0x000030, "Member 'PerkList_C_ExecuteUbergraph_PerkList::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, K2Node_CustomEvent_category) == 0x000040, "Member 'PerkList_C_ExecuteUbergraph_PerkList::K2Node_CustomEvent_category' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, CallFunc_Array_Get_Item) == 0x000048, "Member 'PerkList_C_ExecuteUbergraph_PerkList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, K2Node_DynamicCast_AsPerk_Category_Button) == 0x000050, "Member 'PerkList_C_ExecuteUbergraph_PerkList::K2Node_DynamicCast_AsPerk_Category_Button' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'PerkList_C_ExecuteUbergraph_PerkList::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'PerkList_C_ExecuteUbergraph_PerkList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'PerkList_C_ExecuteUbergraph_PerkList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, K2Node_CustomEvent_PerkUpgradeButton) == 0x000068, "Member 'PerkList_C_ExecuteUbergraph_PerkList::K2Node_CustomEvent_PerkUpgradeButton' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, CallFunc_GetChildIndex_ReturnValue) == 0x000070, "Member 'PerkList_C_ExecuteUbergraph_PerkList::CallFunc_GetChildIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, CallFunc_GetFocusedChildIndex_ReturnValue) == 0x000074, "Member 'PerkList_C_ExecuteUbergraph_PerkList::CallFunc_GetFocusedChildIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkList_C_ExecuteUbergraph_PerkList, CallFunc_Less_IntInt_ReturnValue_1) == 0x000078, "Member 'PerkList_C_ExecuteUbergraph_PerkList::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function PerkList.PerkList_C.OnPageChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PerkList_C_OnPageChanged__DelegateSignature final
{
public:
	bool                                          CategoryEntered;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkList_C_OnPageChanged__DelegateSignature) == 0x000001, "Wrong alignment on PerkList_C_OnPageChanged__DelegateSignature");
static_assert(sizeof(PerkList_C_OnPageChanged__DelegateSignature) == 0x000001, "Wrong size on PerkList_C_OnPageChanged__DelegateSignature");
static_assert(offsetof(PerkList_C_OnPageChanged__DelegateSignature, CategoryEntered) == 0x000000, "Member 'PerkList_C_OnPageChanged__DelegateSignature::CategoryEntered' has a wrong offset!");

// Function PerkList.PerkList_C.OnPerkCategoryChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PerkList_C_OnPerkCategoryChanged__DelegateSignature final
{
public:
	EPerkCategory                                 NewCategory;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_OnPerkCategoryChanged__DelegateSignature) == 0x000001, "Wrong alignment on PerkList_C_OnPerkCategoryChanged__DelegateSignature");
static_assert(sizeof(PerkList_C_OnPerkCategoryChanged__DelegateSignature) == 0x000001, "Wrong size on PerkList_C_OnPerkCategoryChanged__DelegateSignature");
static_assert(offsetof(PerkList_C_OnPerkCategoryChanged__DelegateSignature, NewCategory) == 0x000000, "Member 'PerkList_C_OnPerkCategoryChanged__DelegateSignature::NewCategory' has a wrong offset!");

// Function PerkList.PerkList_C.OnUpgradeClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PerkList_C_OnUpgradeClicked__DelegateSignature final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_OnUpgradeClicked__DelegateSignature) == 0x000004, "Wrong alignment on PerkList_C_OnUpgradeClicked__DelegateSignature");
static_assert(sizeof(PerkList_C_OnUpgradeClicked__DelegateSignature) == 0x000008, "Wrong size on PerkList_C_OnUpgradeClicked__DelegateSignature");
static_assert(offsetof(PerkList_C_OnUpgradeClicked__DelegateSignature, ItemId) == 0x000000, "Member 'PerkList_C_OnUpgradeClicked__DelegateSignature::ItemId' has a wrong offset!");

// Function PerkList.PerkList_C.OnUpgradeUnhovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PerkList_C_OnUpgradeUnhovered__DelegateSignature final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_OnUpgradeUnhovered__DelegateSignature) == 0x000004, "Wrong alignment on PerkList_C_OnUpgradeUnhovered__DelegateSignature");
static_assert(sizeof(PerkList_C_OnUpgradeUnhovered__DelegateSignature) == 0x000008, "Wrong size on PerkList_C_OnUpgradeUnhovered__DelegateSignature");
static_assert(offsetof(PerkList_C_OnUpgradeUnhovered__DelegateSignature, ItemId) == 0x000000, "Member 'PerkList_C_OnUpgradeUnhovered__DelegateSignature::ItemId' has a wrong offset!");

// Function PerkList.PerkList_C.OnUpgradeHovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PerkList_C_OnUpgradeHovered__DelegateSignature final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkList_C_OnUpgradeHovered__DelegateSignature) == 0x000004, "Wrong alignment on PerkList_C_OnUpgradeHovered__DelegateSignature");
static_assert(sizeof(PerkList_C_OnUpgradeHovered__DelegateSignature) == 0x000008, "Wrong size on PerkList_C_OnUpgradeHovered__DelegateSignature");
static_assert(offsetof(PerkList_C_OnUpgradeHovered__DelegateSignature, ItemId) == 0x000000, "Member 'PerkList_C_OnUpgradeHovered__DelegateSignature::ItemId' has a wrong offset!");

}

