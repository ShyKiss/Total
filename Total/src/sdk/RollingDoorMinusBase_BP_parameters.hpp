#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RollingDoorMinusBase_BP

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ConstructRepulsion_Editor
// 0x00C0 (0x00C0 - 0x0000)
struct RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor final
{
public:
	TArray<struct FRepulsionRule>                 RepulsionAnyoneBackwardOnly;                       // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<struct FRepulsionRule>                 RepulsionAnyoneForwardOnly;                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<struct FRepulsionRule>                 NoRepulsionRule;                                   // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<struct FRepulsionRule>                 RepulsionAnyoneBothSides;                          // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<struct FRepulsionRule>                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm)
	TArray<struct FRepulsionRule>                 K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ReferenceParm)
	TArray<struct FRepulsionRule>                 K2Node_MakeArray_Array_2;                          // 0x0060(0x0010)(ReferenceParm)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_1;          // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3198[0x2];                                     // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x007C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x009C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor");
static_assert(sizeof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor) == 0x0000C0, "Wrong size on RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, RepulsionAnyoneBackwardOnly) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::RepulsionAnyoneBackwardOnly' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, RepulsionAnyoneForwardOnly) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::RepulsionAnyoneForwardOnly' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, NoRepulsionRule) == 0x000020, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::NoRepulsionRule' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, RepulsionAnyoneBothSides) == 0x000030, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::RepulsionAnyoneBothSides' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, K2Node_MakeArray_Array) == 0x000040, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, K2Node_MakeArray_Array_1) == 0x000050, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, K2Node_MakeArray_Array_2) == 0x000060, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000070, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_Not_PreBool_ReturnValue) == 0x000071, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_Not_PreBool_ReturnValue_1) == 0x000072, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_BooleanAND_ReturnValue) == 0x000073, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_NotEqual_BoolBool_ReturnValue_1) == 0x000074, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_NotEqual_BoolBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_BooleanAND_ReturnValue_1) == 0x000075, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_SelectFloat_ReturnValue) == 0x000078, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_SelectColor_ReturnValue) == 0x00007C, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_MakeVector_ReturnValue) == 0x00008C, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_SelectFloat_ReturnValue_1) == 0x000098, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_SelectColor_ReturnValue_1) == 0x00009C, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_MakeVector_ReturnValue_1) == 0x0000AC, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_BooleanAND_ReturnValue_2) == 0x0000B8, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_BooleanOR_ReturnValue) == 0x0000B9, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_BooleanAND_ReturnValue_3) == 0x0000BA, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor, CallFunc_BooleanOR_ReturnValue_1) == 0x0000BB, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion_Editor::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.TryResetElectricalSwitches
// 0x0002 (0x0002 - 0x0000)
struct RollingDoorMinusBase_BP_C_TryResetElectricalSwitches final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_TryResetElectricalSwitches) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_TryResetElectricalSwitches");
static_assert(sizeof(RollingDoorMinusBase_BP_C_TryResetElectricalSwitches) == 0x000002, "Wrong size on RollingDoorMinusBase_BP_C_TryResetElectricalSwitches");
static_assert(offsetof(RollingDoorMinusBase_BP_C_TryResetElectricalSwitches, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_TryResetElectricalSwitches::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_TryResetElectricalSwitches, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'RollingDoorMinusBase_BP_C_TryResetElectricalSwitches::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetLightingSettings
// 0x0050 (0x0050 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetLightingSettings final
{
public:
	TArray<class UActorComponent*>                Components;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3199[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UActorComponent*>                CallFunc_GetComponentByClass_outComponents;        // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319A[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetLightingSettings) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_SetLightingSettings");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetLightingSettings) == 0x000050, "Wrong size on RollingDoorMinusBase_BP_C_SetLightingSettings");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, Components) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::Components' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, Temp_int_Array_Index_Variable) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, CallFunc_Array_Get_Item) == 0x000020, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, CallFunc_GetComponentByClass_outComponents) == 0x000028, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::CallFunc_GetComponentByClass_outComponents' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x000038, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetLightingSettings, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'RollingDoorMinusBase_BP_C_SetLightingSettings::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.RefreshTimedLightSelectorState
// 0x001C (0x001C - 0x0000)
struct RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState final
{
public:
	float                                         CallFunc_GetTimedOpenDuration_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedClosedDuration_ReturnValue;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState");
static_assert(sizeof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState) == 0x00001C, "Wrong size on RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, CallFunc_GetTimedOpenDuration_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::CallFunc_GetTimedOpenDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, CallFunc_GetTimedClosedDuration_ReturnValue) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::CallFunc_GetTimedClosedDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, CallFunc_SelectFloat_ReturnValue_1) == 0x000014, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, CallFunc_BooleanAND_ReturnValue) == 0x00001A, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState, K2Node_SwitchInteger_CmpSuccess) == 0x00001B, "Member 'RollingDoorMinusBase_BP_C_RefreshTimedLightSelectorState::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.DisplayTimeTimers
// 0x000C (0x000C - 0x0000)
struct RollingDoorMinusBase_BP_C_DisplayTimeTimers final
{
public:
	float                                         CallFunc_Get_Unlockable_Duration_Duration;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Unlockable_Duration_Duration_1;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_DisplayTimeTimers) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_DisplayTimeTimers");
static_assert(sizeof(RollingDoorMinusBase_BP_C_DisplayTimeTimers) == 0x00000C, "Wrong size on RollingDoorMinusBase_BP_C_DisplayTimeTimers");
static_assert(offsetof(RollingDoorMinusBase_BP_C_DisplayTimeTimers, CallFunc_Get_Unlockable_Duration_Duration) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_DisplayTimeTimers::CallFunc_Get_Unlockable_Duration_Duration' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_DisplayTimeTimers, CallFunc_Get_Unlockable_Duration_Duration_1) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_DisplayTimeTimers::CallFunc_Get_Unlockable_Duration_Duration_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_DisplayTimeTimers, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_DisplayTimeTimers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_DisplayTimeTimers, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'RollingDoorMinusBase_BP_C_DisplayTimeTimers::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Wrap Time Inital Offset
// 0x0024 (0x0024 - 0x0000)
struct RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset final
{
public:
	float                                         In;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrappedValue;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedLoopFullDuration_ReturnValue;     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedLoopFullDuration_ReturnValue_1;   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset");
static_assert(sizeof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset) == 0x000024, "Wrong size on RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset, In) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset::In' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset, Out) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset::Out' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset, WrappedValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset::WrappedValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset, CallFunc_GetTimedLoopFullDuration_ReturnValue) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset::CallFunc_GetTimedLoopFullDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset, CallFunc_Less_FloatFloat_ReturnValue) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset, CallFunc_GetTimedLoopFullDuration_ReturnValue_1) == 0x000018, "Member 'RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset::CallFunc_GetTimedLoopFullDuration_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00001C, "Member 'RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.AdjustInitialTimedOffset
// 0x005C (0x005C - 0x0000)
struct RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset final
{
public:
	float                                         TimedInitialOffset;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentTimeDelay;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Wrap_Time_Inital_Offset_Out;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedOpenDuration_ReturnValue;         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedOpenDuration_ReturnValue_1;       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedClosedDuration_ReturnValue;       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319C[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedOpenDuration_ReturnValue_2;       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedLoopFullDuration_ReturnValue;     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LevelRandomFloatRange_ReturnValue;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset");
static_assert(sizeof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset) == 0x00005C, "Wrong size on RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, TimedInitialOffset) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::TimedInitialOffset' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CurrentTimeDelay) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CurrentTimeDelay' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Wrap_Time_Inital_Offset_Out) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Wrap_Time_Inital_Offset_Out' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_GetTimedOpenDuration_ReturnValue) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_GetTimedOpenDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_GetTimedOpenDuration_ReturnValue_1) == 0x000014, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_GetTimedOpenDuration_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_GetTimedClosedDuration_ReturnValue) == 0x00001C, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_GetTimedClosedDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000020, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_SelectInt_ReturnValue) == 0x000024, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_GetTimedOpenDuration_ReturnValue_2) == 0x000028, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_GetTimedOpenDuration_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_GetTimedLoopFullDuration_ReturnValue) == 0x00002C, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_GetTimedLoopFullDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000038, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00003C, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000040, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_LevelRandomFloatRange_ReturnValue) == 0x000044, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_LevelRandomFloatRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000048, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x00004C, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000050, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000054, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Less_FloatFloat_ReturnValue) == 0x000058, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000059, "Member 'RollingDoorMinusBase_BP_C_AdjustInitialTimedOffset::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ConstructRepulsion
// 0x01C8 (0x01C8 - 0x0000)
struct RollingDoorMinusBase_BP_C_ConstructRepulsion final
{
public:
	TArray<struct FRepulsionRule>                 RepulsionAnyoneBackwardOnly;                       // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<struct FRepulsionRule>                 RepulsionAnyoneForwardOnly;                        // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<struct FRepulsionRule>                 NoRepulsionRule;                                   // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<struct FRepulsionRule>                 RepulsionAnyoneBothSides;                          // 0x0030(0x0010)(Edit, BlueprintVisible)
	TArray<struct FRepulsionRule>                 K2Node_MakeArray_Array;                            // 0x0040(0x0010)(ReferenceParm)
	TArray<struct FRepulsionRule>                 K2Node_MakeArray_Array_1;                          // 0x0050(0x0010)(ReferenceParm)
	TArray<struct FRepulsionRule>                 K2Node_MakeArray_Array_2;                          // 0x0060(0x0010)(ReferenceParm)
	struct FRepulsionRule                         CallFunc_AddRepulsionRule_ReturnValue;             // 0x0070(0x0030)()
	struct FRepulsionRule                         CallFunc_AddRepulsionRule_ReturnValue_1;           // 0x00A0(0x0030)()
	struct FRepulsionRule                         CallFunc_AddRepulsionRule_ReturnValue_2;           // 0x00D0(0x0030)()
	struct FRepulsionRule                         CallFunc_AddRepulsionRule_ReturnValue_3;           // 0x0100(0x0030)()
	struct FRepulsionRule                         CallFunc_AddRepulsionRule_ReturnValue_4;           // 0x0130(0x0030)()
	struct FRepulsionRule                         CallFunc_AddRepulsionRule_ReturnValue_5;           // 0x0160(0x0030)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319D[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRepulsionRule                         CallFunc_AddRepulsionRule_ReturnValue_6;           // 0x0198(0x0030)()
};
static_assert(alignof(RollingDoorMinusBase_BP_C_ConstructRepulsion) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_ConstructRepulsion");
static_assert(sizeof(RollingDoorMinusBase_BP_C_ConstructRepulsion) == 0x0001C8, "Wrong size on RollingDoorMinusBase_BP_C_ConstructRepulsion");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, RepulsionAnyoneBackwardOnly) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::RepulsionAnyoneBackwardOnly' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, RepulsionAnyoneForwardOnly) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::RepulsionAnyoneForwardOnly' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, NoRepulsionRule) == 0x000020, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::NoRepulsionRule' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, RepulsionAnyoneBothSides) == 0x000030, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::RepulsionAnyoneBothSides' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, K2Node_MakeArray_Array) == 0x000040, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, K2Node_MakeArray_Array_1) == 0x000050, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, K2Node_MakeArray_Array_2) == 0x000060, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, CallFunc_AddRepulsionRule_ReturnValue) == 0x000070, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::CallFunc_AddRepulsionRule_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, CallFunc_AddRepulsionRule_ReturnValue_1) == 0x0000A0, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::CallFunc_AddRepulsionRule_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, CallFunc_AddRepulsionRule_ReturnValue_2) == 0x0000D0, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::CallFunc_AddRepulsionRule_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, CallFunc_AddRepulsionRule_ReturnValue_3) == 0x000100, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::CallFunc_AddRepulsionRule_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, CallFunc_AddRepulsionRule_ReturnValue_4) == 0x000130, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::CallFunc_AddRepulsionRule_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, CallFunc_AddRepulsionRule_ReturnValue_5) == 0x000160, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::CallFunc_AddRepulsionRule_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, CallFunc_BooleanAND_ReturnValue) == 0x000190, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ConstructRepulsion, CallFunc_AddRepulsionRule_ReturnValue_6) == 0x000198, "Member 'RollingDoorMinusBase_BP_C_ConstructRepulsion::CallFunc_AddRepulsionRule_ReturnValue_6' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetShadowMode
// 0x0002 (0x0002 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetShadowMode final
{
public:
	bool                                          UseRealDoorShadow;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetShadowMode) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_SetShadowMode");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetShadowMode) == 0x000002, "Wrong size on RollingDoorMinusBase_BP_C_SetShadowMode");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetShadowMode, UseRealDoorShadow) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetShadowMode::UseRealDoorShadow' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetShadowMode, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'RollingDoorMinusBase_BP_C_SetShadowMode::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_SoundDetector_Front
// 0x009C (0x009C - 0x0000)
struct RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0014(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front) == 0x00009C, "Wrong size on RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front, CallFunc_MakeVector_ReturnValue) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000014, "Member 'RollingDoorMinusBase_BP_C_OnRep_SoundDetector_Front::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetCollisions
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetCollisions final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetCollisions) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_SetCollisions");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetCollisions) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_SetCollisions");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetCollisions, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetCollisions::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetSoundConnectors
// 0x00F0 (0x00F0 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetSoundConnectors final
{
public:
	struct FTransform                             Temp_struct_Variable;                              // 0x0000(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319F[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URBSoundConnectorComponent*             CallFunc_AddComponent_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0064(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetSoundConnectors) == 0x000010, "Wrong alignment on RollingDoorMinusBase_BP_C_SetSoundConnectors");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetSoundConnectors) == 0x0000F0, "Wrong size on RollingDoorMinusBase_BP_C_SetSoundConnectors");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, Temp_struct_Variable) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, Temp_int_Array_Index_Variable) == 0x000030, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, CallFunc_AddComponent_ReturnValue) == 0x000038, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, CallFunc_BreakVector2D_X) == 0x000044, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000050, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000064, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetSoundConnectors, CallFunc_Less_IntInt_ReturnValue) == 0x0000EC, "Member 'RollingDoorMinusBase_BP_C_SetSoundConnectors::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetGateAnimations
// 0x0020 (0x0020 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetGateAnimations final
{
public:
	class UAnimSequenceBase*                      NewAnimation;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetGateAnimations) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_SetGateAnimations");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetGateAnimations) == 0x000020, "Wrong size on RollingDoorMinusBase_BP_C_SetGateAnimations");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateAnimations, NewAnimation) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetGateAnimations::NewAnimation' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateAnimations, Temp_bool_Variable) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_SetGateAnimations::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateAnimations, Temp_float_Variable) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_SetGateAnimations::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateAnimations, Temp_float_Variable_1) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_SetGateAnimations::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateAnimations, K2Node_Select_Default) == 0x000014, "Member 'RollingDoorMinusBase_BP_C_SetGateAnimations::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateAnimations, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000018, "Member 'RollingDoorMinusBase_BP_C_SetGateAnimations::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetGateVisuals
// 0x0018 (0x0018 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetGateVisuals final
{
public:
	class UAnimSequenceBase*                      NewAnimation;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          NewSkelMesh;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetGateVisuals) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_SetGateVisuals");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetGateVisuals) == 0x000018, "Wrong size on RollingDoorMinusBase_BP_C_SetGateVisuals");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateVisuals, NewAnimation) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetGateVisuals::NewAnimation' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateVisuals, NewSkelMesh) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_SetGateVisuals::NewSkelMesh' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateVisuals, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_SetGateVisuals::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetGateVisuals, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'RollingDoorMinusBase_BP_C_SetGateVisuals::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Set Current Delay
// 0x0004 (0x0004 - 0x0000)
struct RollingDoorMinusBase_BP_C_Set_Current_Delay final
{
public:
	float                                         CallFunc_GetCurrentTimedDelay_Delay;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_Set_Current_Delay) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_Set_Current_Delay");
static_assert(sizeof(RollingDoorMinusBase_BP_C_Set_Current_Delay) == 0x000004, "Wrong size on RollingDoorMinusBase_BP_C_Set_Current_Delay");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Set_Current_Delay, CallFunc_GetCurrentTimedDelay_Delay) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_Set_Current_Delay::CallFunc_GetCurrentTimedDelay_Delay' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetMeshOffset
// 0x0010 (0x0010 - 0x0000)
struct RollingDoorMinusBase_BP_C_GetMeshOffset final
{
public:
	struct FVector                                NewParam;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_GetMeshOffset) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_GetMeshOffset");
static_assert(sizeof(RollingDoorMinusBase_BP_C_GetMeshOffset) == 0x000010, "Wrong size on RollingDoorMinusBase_BP_C_GetMeshOffset");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetMeshOffset, NewParam) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_GetMeshOffset::NewParam' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetMeshOffset, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_GetMeshOffset::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetTutorials
// 0x0090 (0x0090 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetTutorials final
{
public:
	ERollingGateVariatorType                      CallFunc_GetCurrentVariatorType_ReturnValue;       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Replace_ReturnValue;                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_FindTextInLocalizationTable_OutText;      // 0x0050(0x0018)()
	bool                                          CallFunc_FindTextInLocalizationTable_ReturnValue;  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A2[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTutorialTextData                      K2Node_MakeStruct_TutorialTextData;                // 0x0070(0x0020)()
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetTutorials) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_SetTutorials");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetTutorials) == 0x000090, "Wrong size on RollingDoorMinusBase_BP_C_SetTutorials");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, CallFunc_GetCurrentVariatorType_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::CallFunc_GetCurrentVariatorType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, CallFunc_Replace_ReturnValue) == 0x000018, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::CallFunc_Replace_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000038, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, CallFunc_Conv_StringToName_ReturnValue) == 0x000048, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, CallFunc_FindTextInLocalizationTable_OutText) == 0x000050, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::CallFunc_FindTextInLocalizationTable_OutText' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, CallFunc_FindTextInLocalizationTable_ReturnValue) == 0x000068, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::CallFunc_FindTextInLocalizationTable_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetTutorials, K2Node_MakeStruct_TutorialTextData) == 0x000070, "Member 'RollingDoorMinusBase_BP_C_SetTutorials::K2Node_MakeStruct_TutorialTextData' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetElectricalSwitchTransform
// 0x00A0 (0x00A0 - 0x0000)
struct RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform final
{
public:
	bool                                          bIsFront;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A3[0xF];                                     // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0070(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform) == 0x000010, "Wrong alignment on RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform");
static_assert(sizeof(RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform) == 0x0000A0, "Wrong size on RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform, bIsFront) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform::bIsFront' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform, OutTransform) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform::OutTransform' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000040, "Member 'RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000070, "Member 'RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetUnlockTimersFrozen
// 0x0003 (0x0003 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen) == 0x000003, "Wrong size on RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen, Value) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen::Value' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetUnlockTimersEnabled
// 0x0003 (0x0003 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled) == 0x000003, "Wrong size on RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled, Enabled) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Get Unlockable Duration
// 0x000C (0x000C - 0x0000)
struct RollingDoorMinusBase_BP_C_Get_Unlockable_Duration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERollingGateVariatorType                      CallFunc_GetCurrentVariatorType_ReturnValue;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A4[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_Get_Unlockable_Duration) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_Get_Unlockable_Duration");
static_assert(sizeof(RollingDoorMinusBase_BP_C_Get_Unlockable_Duration) == 0x00000C, "Wrong size on RollingDoorMinusBase_BP_C_Get_Unlockable_Duration");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Get_Unlockable_Duration, Duration) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_Get_Unlockable_Duration::Duration' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Get_Unlockable_Duration, CallFunc_GetCurrentVariatorType_ReturnValue) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_Get_Unlockable_Duration::CallFunc_GetCurrentVariatorType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Get_Unlockable_Duration, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000005, "Member 'RollingDoorMinusBase_BP_C_Get_Unlockable_Duration::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Get_Unlockable_Duration, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_Get_Unlockable_Duration::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.StartUnlockTimers
// 0x000C (0x000C - 0x0000)
struct RollingDoorMinusBase_BP_C_StartUnlockTimers final
{
public:
	float                                         CallFunc_Get_Unlockable_Duration_Duration;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Unlockable_Duration_Duration_1;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_StartUnlockTimers) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_StartUnlockTimers");
static_assert(sizeof(RollingDoorMinusBase_BP_C_StartUnlockTimers) == 0x00000C, "Wrong size on RollingDoorMinusBase_BP_C_StartUnlockTimers");
static_assert(offsetof(RollingDoorMinusBase_BP_C_StartUnlockTimers, CallFunc_Get_Unlockable_Duration_Duration) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_StartUnlockTimers::CallFunc_Get_Unlockable_Duration_Duration' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_StartUnlockTimers, CallFunc_Get_Unlockable_Duration_Duration_1) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_StartUnlockTimers::CallFunc_Get_Unlockable_Duration_Duration_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_StartUnlockTimers, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_StartUnlockTimers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_StartUnlockTimers, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'RollingDoorMinusBase_BP_C_StartUnlockTimers::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ResetUnlockSwitchCompletion
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_ResetUnlockSwitchCompletion final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_ResetUnlockSwitchCompletion) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_ResetUnlockSwitchCompletion");
static_assert(sizeof(RollingDoorMinusBase_BP_C_ResetUnlockSwitchCompletion) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_ResetUnlockSwitchCompletion");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ResetUnlockSwitchCompletion, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_ResetUnlockSwitchCompletion::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.UpdateUnlockSwitchInteractivity
// 0x0038 (0x0038 - 0x0000)
struct RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBPawn*>                        CallFunc_BP_GetInteractorPawns_ReturnValue;        // 0x0008(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A6[0x1];                                     // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBPawn*>                        CallFunc_BP_GetInteractorPawns_ReturnValue_1;      // 0x0020(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity");
static_assert(sizeof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity) == 0x000038, "Wrong size on RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_BP_GetInteractorPawns_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_BP_GetInteractorPawns_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_IsValid_ReturnValue_1) == 0x00001D, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_IsValid_ReturnValue_2) == 0x00001E, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_BP_GetInteractorPawns_ReturnValue_1) == 0x000020, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_BP_GetInteractorPawns_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000034, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity, CallFunc_IsValid_ReturnValue_3) == 0x000035, "Member 'RollingDoorMinusBase_BP_C_UpdateUnlockSwitchInteractivity::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.UpdateInteractiveSwitch
// 0x0030 (0x0030 - 0x0000)
struct RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch final
{
public:
	class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* Param_Instigator;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARBPawn*>                        CallFunc_BP_GetInteractorPawns_ReturnValue;        // 0x0010(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A7[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch");
static_assert(sizeof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch) == 0x000030, "Wrong size on RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch, Param_Instigator) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch::Param_Instigator' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch, Target) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch::Target' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch, CallFunc_BP_GetInteractorPawns_ReturnValue) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch::CallFunc_BP_GetInteractorPawns_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000028, "Member 'RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch, CallFunc_BooleanAND_ReturnValue) == 0x00002B, "Member 'RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_ElectricalSwitch_Back
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Back final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Back) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Back");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Back) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Back");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Back, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Back::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_ElectricalSwitch_Front
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Front final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Front) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Front");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Front) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Front");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Front, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnRep_ElectricalSwitch_Front::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_LightSelectorBack
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnRep_LightSelectorBack final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnRep_LightSelectorBack) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_OnRep_LightSelectorBack");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnRep_LightSelectorBack) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_OnRep_LightSelectorBack");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_LightSelectorBack, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnRep_LightSelectorBack::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_LightSelectorFront
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnRep_LightSelectorFront final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnRep_LightSelectorFront) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_OnRep_LightSelectorFront");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnRep_LightSelectorFront) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_OnRep_LightSelectorFront");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_LightSelectorFront, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnRep_LightSelectorFront::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_ToasterDetector_Front
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnRep_ToasterDetector_Front final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnRep_ToasterDetector_Front) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_OnRep_ToasterDetector_Front");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnRep_ToasterDetector_Front) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_OnRep_ToasterDetector_Front");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_ToasterDetector_Front, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnRep_ToasterDetector_Front::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_passagesCounter_Back
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnRep_passagesCounter_Back final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnRep_passagesCounter_Back) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_OnRep_passagesCounter_Back");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnRep_passagesCounter_Back) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_OnRep_passagesCounter_Back");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_passagesCounter_Back, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnRep_passagesCounter_Back::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_PassagesCounter_Front
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnRep_PassagesCounter_Front final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnRep_PassagesCounter_Front) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_OnRep_PassagesCounter_Front");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnRep_PassagesCounter_Front) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_OnRep_PassagesCounter_Front");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnRep_PassagesCounter_Front, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnRep_PassagesCounter_Front::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.InitVariatorType
// 0x0380 (0x0380 - 0x0000)
struct RollingDoorMinusBase_BP_C_InitVariatorType final
{
public:
	TArray<TSoftObjectPtr<class ARBTriggerable>>  ToTriggerOnAlerted;                                // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<TSoftObjectPtr<class ARBTriggerable>>  ToUntriggerOnAlerted;                              // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A8[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPlayerSoundDetectionState OldState, EPlayerSoundDetectionState NewState)> K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_31A9[0xC];                                     // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0040(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASoundDetector_BP_C*                    CallFunc_FinishSpawningActor_ReturnValue;          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetElectricalSwitchTransform_outTransform; // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetElectricalSwitchTransform_outTransform_1; // 0x00B0(0x0030)(IsPlainOldData, NoDestructor)
	ERollingGateVariatorType                      CallFunc_GetCurrentVariatorType_ReturnValue;       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AA[0x6];                                     // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable;                               // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x00F0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_2;     // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
	class UClass*                                 Temp_class_Variable_1;                             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATimerCountdownRollingDoorVariatorMinus01_BP_C* CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATimerCountdownRollingDoorVariatorMinus01_BP_C* CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31AB[0x8];                                     // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_3;     // 0x0180(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AC[0x7];                                     // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3; // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_Select_Default;                             // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATimedGateLights_BP_C*                  CallFunc_FinishSpawningActor_ReturnValue_3;        // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4; // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue_4;        // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5; // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* K2Node_DynamicCast_AsElectrical_Switch__Rollingdoor_Variator_01_BP; // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AD[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue_5;        // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* K2Node_DynamicCast_AsElectrical_Switch__Rollingdoor_Variator_01_BP_1; // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AE[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_4;     // 0x0210(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_6; // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATimedGateLights_BP_C*                  CallFunc_FinishSpawningActor_ReturnValue_6;        // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERollingGateVariatorType                      CallFunc_GetCurrentVariatorType_ReturnValue_1;     // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERollingGateVariatorType                      CallFunc_GetCurrentVariatorType_ReturnValue_2;     // 0x0252(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0253(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31AF[0x3];                                     // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ARollingDoorMinusBase_BP_C> CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0258(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B0[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAlertedStateActions                   K2Node_MakeStruct_AlertedStateActions;             // 0x0288(0x0020)()
	uint8                                         Pad_31B1[0x8];                                     // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_5;     // 0x02B0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_7; // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AToasterDetectorMinus01_BP_C*           CallFunc_FinishSpawningActor_ReturnValue_7;        // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_6;     // 0x02F0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_8; // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B2[0x8];                                     // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_7;     // 0x0330(0x0030)(IsPlainOldData, NoDestructor)
	class AFlipCounterMinusBP_C*                  CallFunc_FinishSpawningActor_ReturnValue_8;        // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_9; // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFlipCounterMinusBP_C*                  CallFunc_FinishSpawningActor_ReturnValue_9;        // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0379(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_InitVariatorType) == 0x000010, "Wrong alignment on RollingDoorMinusBase_BP_C_InitVariatorType");
static_assert(sizeof(RollingDoorMinusBase_BP_C_InitVariatorType) == 0x000380, "Wrong size on RollingDoorMinusBase_BP_C_InitVariatorType");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, ToTriggerOnAlerted) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::ToTriggerOnAlerted' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, ToUntriggerOnAlerted) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::ToUntriggerOnAlerted' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_IsDedicatedServer_ReturnValue) == 0x000020, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_HasAuthority_ReturnValue) == 0x000021, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000040, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000070, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue) == 0x000078, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_GetElectricalSwitchTransform_outTransform) == 0x000080, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_GetElectricalSwitchTransform_outTransform' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_GetElectricalSwitchTransform_outTransform_1) == 0x0000B0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_GetElectricalSwitchTransform_outTransform_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_GetCurrentVariatorType_ReturnValue) == 0x0000E0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_GetCurrentVariatorType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000E1, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, Temp_class_Variable) == 0x0000E8, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x0000F0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_K2_GetComponentToWorld_ReturnValue_2) == 0x000120, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_K2_GetComponentToWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, Temp_class_Variable_1) == 0x000150, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000158, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000160, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x000168, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x000170, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_K2_GetComponentToWorld_ReturnValue_3) == 0x000180, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_K2_GetComponentToWorld_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, Temp_bool_Variable) == 0x0001B0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3) == 0x0001B8, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, K2Node_Select_Default) == 0x0001C0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue_3) == 0x0001C8, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4) == 0x0001D0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue_4) == 0x0001D8, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5) == 0x0001E0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, K2Node_DynamicCast_AsElectrical_Switch__Rollingdoor_Variator_01_BP) == 0x0001E8, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::K2Node_DynamicCast_AsElectrical_Switch__Rollingdoor_Variator_01_BP' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, K2Node_DynamicCast_bSuccess) == 0x0001F0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue_5) == 0x0001F8, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, K2Node_DynamicCast_AsElectrical_Switch__Rollingdoor_Variator_01_BP_1) == 0x000200, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::K2Node_DynamicCast_AsElectrical_Switch__Rollingdoor_Variator_01_BP_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, K2Node_DynamicCast_bSuccess_1) == 0x000208, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_K2_GetComponentToWorld_ReturnValue_4) == 0x000210, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_K2_GetComponentToWorld_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_6) == 0x000240, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue_6) == 0x000248, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_GetCurrentVariatorType_ReturnValue_1) == 0x000250, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_GetCurrentVariatorType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, K2Node_SwitchEnum_CmpSuccess) == 0x000251, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_GetCurrentVariatorType_ReturnValue_2) == 0x000252, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_GetCurrentVariatorType_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000253, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, K2Node_SwitchEnum_CmpSuccess_1) == 0x000254, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000258, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_Array_AddUnique_ReturnValue) == 0x000280, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, K2Node_MakeStruct_AlertedStateActions) == 0x000288, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::K2Node_MakeStruct_AlertedStateActions' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_K2_GetComponentToWorld_ReturnValue_5) == 0x0002B0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_K2_GetComponentToWorld_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_7) == 0x0002E0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue_7) == 0x0002E8, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_K2_GetComponentToWorld_ReturnValue_6) == 0x0002F0, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_K2_GetComponentToWorld_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_8) == 0x000320, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_K2_GetComponentToWorld_ReturnValue_7) == 0x000330, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_K2_GetComponentToWorld_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue_8) == 0x000360, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_9) == 0x000368, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_FinishSpawningActor_ReturnValue_9) == 0x000370, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_FinishSpawningActor_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_IsValid_ReturnValue) == 0x000378, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_InitVariatorType, CallFunc_IsValid_ReturnValue_1) == 0x000379, "Member 'RollingDoorMinusBase_BP_C_InitVariatorType::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ClearVariatorTypes
// 0x0010 (0x0010 - 0x0000)
struct RollingDoorMinusBase_BP_C_ClearVariatorTypes final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B3[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_ClearVariatorTypes) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_ClearVariatorTypes");
static_assert(sizeof(RollingDoorMinusBase_BP_C_ClearVariatorTypes) == 0x000010, "Wrong size on RollingDoorMinusBase_BP_C_ClearVariatorTypes");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue_2) == 0x000002, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue_3) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue_4) == 0x000009, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_HasAuthority_ReturnValue) == 0x00000A, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue_5) == 0x00000B, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue_6) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue_7) == 0x00000D, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue_8) == 0x00000E, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ClearVariatorTypes, CallFunc_IsValid_ReturnValue_9) == 0x00000F, "Member 'RollingDoorMinusBase_BP_C_ClearVariatorTypes::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_IsOpen final
{
public:
	bool                                          Param_IsOpen;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_IsOpen) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_IsOpen");
static_assert(sizeof(RollingDoorMinusBase_BP_C_IsOpen) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_IsOpen");
static_assert(offsetof(RollingDoorMinusBase_BP_C_IsOpen, Param_IsOpen) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_IsOpen::Param_IsOpen' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.TryRefreshSoundConnector
// 0x0010 (0x0010 - 0x0000)
struct RollingDoorMinusBase_BP_C_TryRefreshSoundConnector final
{
public:
	class URBSoundConnectorComponent*             CallFunc_GetComponentByClass_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_TryRefreshSoundConnector) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_TryRefreshSoundConnector");
static_assert(sizeof(RollingDoorMinusBase_BP_C_TryRefreshSoundConnector) == 0x000010, "Wrong size on RollingDoorMinusBase_BP_C_TryRefreshSoundConnector");
static_assert(offsetof(RollingDoorMinusBase_BP_C_TryRefreshSoundConnector, CallFunc_GetComponentByClass_ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_TryRefreshSoundConnector::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_TryRefreshSoundConnector, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_TryRefreshSoundConnector::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_TryRefreshSoundConnector, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'RollingDoorMinusBase_BP_C_TryRefreshSoundConnector::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnTimelineUpdate
// 0x0008 (0x0008 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnTimelineUpdate final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnTimelineUpdate) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_OnTimelineUpdate");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnTimelineUpdate) == 0x000008, "Wrong size on RollingDoorMinusBase_BP_C_OnTimelineUpdate");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnTimelineUpdate, Ratio) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnTimelineUpdate::Ratio' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnTimelineUpdate, CallFunc_Lerp_ReturnValue) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_OnTimelineUpdate::CallFunc_Lerp_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.UserConstructionScript
// 0x0028 (0x0028 - 0x0000)
struct RollingDoorMinusBase_BP_C_UserConstructionScript final
{
public:
	struct FVector                                GateMeshOffset;                                    // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      NewAnimation;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          NewSkelMesh;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInEditor_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_UserConstructionScript) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_UserConstructionScript");
static_assert(sizeof(RollingDoorMinusBase_BP_C_UserConstructionScript) == 0x000028, "Wrong size on RollingDoorMinusBase_BP_C_UserConstructionScript");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UserConstructionScript, GateMeshOffset) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_UserConstructionScript::GateMeshOffset' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UserConstructionScript, NewAnimation) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_UserConstructionScript::NewAnimation' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UserConstructionScript, NewSkelMesh) == 0x000018, "Member 'RollingDoorMinusBase_BP_C_UserConstructionScript::NewSkelMesh' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_UserConstructionScript, CallFunc_IsInEditor_ReturnValue) == 0x000020, "Member 'RollingDoorMinusBase_BP_C_UserConstructionScript::CallFunc_IsInEditor_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnOperatableProgressChanged
// 0x0018 (0x0018 - 0x0000)
struct RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged final
{
public:
	class UObject*                                Operatable;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OldProgress;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentProgress;                                   // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSnap;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged");
static_assert(sizeof(RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged) == 0x000018, "Wrong size on RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged, Operatable) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged::Operatable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged, OldProgress) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged::OldProgress' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged, CurrentProgress) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged::CurrentProgress' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged, bSnap) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged::bSnap' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature final
{
public:
	class ARBPlayer*                              Param_Player;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature");
static_assert(sizeof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature) == 0x000008, "Wrong size on RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature");
static_assert(offsetof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature, Param_Player) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature::Param_Player' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature final
{
public:
	class ARBPlayer*                              Param_Player;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature");
static_assert(sizeof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature) == 0x000008, "Wrong size on RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature");
static_assert(offsetof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature, Param_Player) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature::Param_Player' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature final
{
public:
	class ARBPlayer*                              Param_Player;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature");
static_assert(sizeof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature) == 0x000008, "Wrong size on RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature");
static_assert(offsetof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature, Param_Player) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature::Param_Player' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature final
{
public:
	class ARBPlayer*                              Param_Player;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature");
static_assert(sizeof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature) == 0x000008, "Wrong size on RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature");
static_assert(offsetof(RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature, Param_Player) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature::Param_Player' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_ReceiveEndPlay");
static_assert(sizeof(RollingDoorMinusBase_BP_C_ReceiveEndPlay) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_ReceiveEndPlay");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BindSwitchEvents
// 0x0008 (0x0008 - 0x0000)
struct RollingDoorMinusBase_BP_C_BindSwitchEvents final
{
public:
	class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* SWITCH;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_BindSwitchEvents) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_BindSwitchEvents");
static_assert(sizeof(RollingDoorMinusBase_BP_C_BindSwitchEvents) == 0x000008, "Wrong size on RollingDoorMinusBase_BP_C_BindSwitchEvents");
static_assert(offsetof(RollingDoorMinusBase_BP_C_BindSwitchEvents, SWITCH) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_BindSwitchEvents::SWITCH' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnUnlockCompleted
// 0x0010 (0x0010 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnUnlockCompleted final
{
public:
	bool                                          bIsOn;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBOperatable*                          Operatable;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnUnlockCompleted) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_OnUnlockCompleted");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnUnlockCompleted) == 0x000010, "Wrong size on RollingDoorMinusBase_BP_C_OnUnlockCompleted");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnUnlockCompleted, bIsOn) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnUnlockCompleted::bIsOn' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnUnlockCompleted, Operatable) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_OnUnlockCompleted::Operatable' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnReplacedDoor
// 0x0008 (0x0008 - 0x0000)
struct RollingDoorMinusBase_BP_C_OnReplacedDoor final
{
public:
	class ARBDoor*                                Door;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_OnReplacedDoor) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_OnReplacedDoor");
static_assert(sizeof(RollingDoorMinusBase_BP_C_OnReplacedDoor) == 0x000008, "Wrong size on RollingDoorMinusBase_BP_C_OnReplacedDoor");
static_assert(offsetof(RollingDoorMinusBase_BP_C_OnReplacedDoor, Door) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_OnReplacedDoor::Door' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.newtimeTest
// 0x0004 (0x0004 - 0x0000)
struct RollingDoorMinusBase_BP_C_NewtimeTest final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_NewtimeTest) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_NewtimeTest");
static_assert(sizeof(RollingDoorMinusBase_BP_C_NewtimeTest) == 0x000004, "Wrong size on RollingDoorMinusBase_BP_C_NewtimeTest");
static_assert(offsetof(RollingDoorMinusBase_BP_C_NewtimeTest, NewTime) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_NewtimeTest::NewTime' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Sound Detected
// 0x0002 (0x0002 - 0x0000)
struct RollingDoorMinusBase_BP_C_Sound_Detected final
{
public:
	EPlayerSoundDetectionState                    OldState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSoundDetectionState                    NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_Sound_Detected) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_Sound_Detected");
static_assert(sizeof(RollingDoorMinusBase_BP_C_Sound_Detected) == 0x000002, "Wrong size on RollingDoorMinusBase_BP_C_Sound_Detected");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Sound_Detected, OldState) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_Sound_Detected::OldState' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_Sound_Detected, NewState) == 0x000001, "Member 'RollingDoorMinusBase_BP_C_Sound_Detected::NewState' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetVariatorActorsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RollingDoorMinusBase_BP_C_SetVariatorActorsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_SetVariatorActorsEnabled) == 0x000001, "Wrong alignment on RollingDoorMinusBase_BP_C_SetVariatorActorsEnabled");
static_assert(sizeof(RollingDoorMinusBase_BP_C_SetVariatorActorsEnabled) == 0x000001, "Wrong size on RollingDoorMinusBase_BP_C_SetVariatorActorsEnabled");
static_assert(offsetof(RollingDoorMinusBase_BP_C_SetVariatorActorsEnabled, bEnabled) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_SetVariatorActorsEnabled::bEnabled' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ExecuteUbergraph_RollingDoor-Base_BP
// 0x01C0 (0x01C0 - 0x0000)
struct RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B6[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0008(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0018(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	float                                         Temp_float_Variable;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B7[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x0030(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETimelineDirection                            Temp_byte_Variable_2;                              // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B8[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_operatable;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_oldProgress;                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_currentProgress;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSnap;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31B9[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimelineLength_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimelineLength_ReturnValue_1;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31BA[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              K2Node_ComponentBoundEvent_player_3;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_ComponentBoundEvent_player_2;               // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_ComponentBoundEvent_player_1;               // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_ComponentBoundEvent_player;                 // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_1;                           // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31BB[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable_3;                              // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable_4;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31BC[0x1];                                     // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31BD[0x2];                                     // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EPlayerSoundDetectionState OldState, EPlayerSoundDetectionState NewState)> K2Node_CreateDelegate_OutputDelegate;              // 0x00B0(0x0010)(ZeroConstructor, NoDestructor)
	ERollingGateVariatorType                      CallFunc_GetCurrentVariatorType_ReturnValue;       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31BE[0x6];                                     // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* K2Node_CustomEvent_Switch;                         // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_4;               // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31BF[0x1];                                     // 0x00D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bIsOn, class ARBOperatable* Operatable)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x00D8(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_5;               // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bIsOn;                          // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C0[0x2];                                     // 0x00EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBOperatable*                          K2Node_CustomEvent_operatable;                     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Unlockable_Duration_Duration;         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERollingGateVariatorType                      CallFunc_GetCurrentVariatorType_ReturnValue_1;     // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C1[0x2];                                     // 0x00FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0100(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C2[0x3];                                     // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0118(0x0010)(ZeroConstructor, NoDestructor)
	ERollingGateVariatorType                      CallFunc_GetCurrentVariatorType_ReturnValue_2;     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C3[0x6];                                     // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBDoor*                                K2Node_Event_door;                                 // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_3;                          // 0x0138(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C4[0x2];                                     // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             K2Node_Select_Default_2;                           // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default_3;                           // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C5[0x1];                                     // 0x0157(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_newTime;                        // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C6[0x3];                                     // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_4;                          // 0x0160(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	EPlayerSoundDetectionState                    K2Node_CustomEvent_oldState;                       // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSoundDetectionState                    K2Node_CustomEvent_newState;                       // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C7[0x1];                                     // 0x0173(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_5;                          // 0x0174(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEventOnActor_ReturnValue;             // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventOnActor_ReturnValue_1;           // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventOnActor_ReturnValue_2;           // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventOnActor_ReturnValue_3;           // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnabled;                             // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ERollingGateVariatorType                      CallFunc_GetCurrentVariatorType_ReturnValue_3;     // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C8[0x5];                                     // 0x019B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRBRollingGateVariatorActor> K2Node_DynamicCast_AsRB_Rolling_Gate_Variator_Actor; // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31C9[0x3];                                     // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEventOnActor_ReturnValue_4;           // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventOnActor_ReturnValue_5;           // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP) == 0x000008, "Wrong alignment on RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP");
static_assert(sizeof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP) == 0x0001C0, "Wrong size on RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, EntryPoint) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_bool_Variable) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_byte_Variable) == 0x000005, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_byte_Variable_1) == 0x000006, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_delegate_Variable) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_delegate_Variable_1) == 0x000018, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_float_Variable) == 0x000028, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_bool_Variable_1) == 0x00002C, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_delegate_Variable_2) == 0x000030, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_HasAuthority_ReturnValue) == 0x000040, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_bool_Variable_2) == 0x000041, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_bool_Variable_3) == 0x000042, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_byte_Variable_2) == 0x000043, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Event_operatable) == 0x000048, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Event_operatable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Event_oldProgress) == 0x000050, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Event_oldProgress' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Event_currentProgress) == 0x000054, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Event_currentProgress' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Event_bSnap) == 0x000058, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Event_bSnap' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Not_PreBool_ReturnValue) == 0x000059, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_GetTimelineLength_ReturnValue) == 0x00005C, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_GetTimelineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Select_Default) == 0x000060, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_GetTimelineLength_ReturnValue_1) == 0x000064, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_GetTimelineLength_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000068, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_ComponentBoundEvent_player_3) == 0x000070, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_ComponentBoundEvent_player_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_ComponentBoundEvent_player_2) == 0x000078, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_ComponentBoundEvent_player_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_ComponentBoundEvent_player_1) == 0x000080, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_ComponentBoundEvent_player_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_ComponentBoundEvent_player) == 0x000088, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_ComponentBoundEvent_player' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_SwitchInteger_CmpSuccess) == 0x000090, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Select_Default_1) == 0x000091, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Array_AddUnique_ReturnValue) == 0x000094, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000098, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Array_RemoveItem_ReturnValue) == 0x00009C, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Array_Contains_ReturnValue) == 0x00009D, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_byte_Variable_3) == 0x00009E, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Array_Contains_ReturnValue_1) == 0x00009F, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_byte_Variable_4) == 0x0000A0, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x0000A1, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000A2, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Add_IntInt_ReturnValue) == 0x0000A4, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_bool_Variable_4) == 0x0000A8, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Event_EndPlayReason) == 0x0000A9, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_HasAuthority_ReturnValue_1) == 0x0000AA, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue) == 0x0000AB, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_1) == 0x0000AC, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_HasAuthority_ReturnValue_2) == 0x0000AD, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_CreateDelegate_OutputDelegate) == 0x0000B0, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_GetCurrentVariatorType_ReturnValue) == 0x0000C0, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_GetCurrentVariatorType_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_SwitchEnum_CmpSuccess) == 0x0000C1, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_CustomEvent_Switch) == 0x0000C8, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_CustomEvent_Switch' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_2) == 0x0000D0, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_3) == 0x0000D1, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_HasAuthority_ReturnValue_3) == 0x0000D2, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_4) == 0x0000D3, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_5) == 0x0000D4, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_6) == 0x0000D5, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_HasAuthority_ReturnValue_4) == 0x0000D6, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_HasAuthority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000D8, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_7) == 0x0000E8, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_8) == 0x0000E9, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_HasAuthority_ReturnValue_5) == 0x0000EA, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_HasAuthority_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_9) == 0x0000EB, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_10) == 0x0000EC, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_CustomEvent_bIsOn) == 0x0000ED, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_CustomEvent_bIsOn' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_CustomEvent_operatable) == 0x0000F0, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_CustomEvent_operatable' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Get_Unlockable_Duration_Duration) == 0x0000F8, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Get_Unlockable_Duration_Duration' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_GetCurrentVariatorType_ReturnValue_1) == 0x0000FC, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_GetCurrentVariatorType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000FD, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000100, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Array_Length_ReturnValue) == 0x000110, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000114, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_CreateDelegate_OutputDelegate_2) == 0x000118, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_GetCurrentVariatorType_ReturnValue_2) == 0x000128, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_GetCurrentVariatorType_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_SwitchEnum_CmpSuccess_1) == 0x000129, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Event_door) == 0x000130, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Event_door' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_delegate_Variable_3) == 0x000138, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_delegate_Variable_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000148, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000149, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00014C, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_BooleanAND_ReturnValue) == 0x000150, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_BooleanAND_ReturnValue_1) == 0x000151, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Select_Default_2) == 0x000152, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Select_Default_3) == 0x000153, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Less_FloatFloat_ReturnValue) == 0x000154, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000155, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000156, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_CustomEvent_newTime) == 0x000158, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_CustomEvent_newTime' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_IsValid_ReturnValue_11) == 0x00015C, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_delegate_Variable_4) == 0x000160, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_delegate_Variable_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_CustomEvent_oldState) == 0x000170, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_CustomEvent_oldState' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_CustomEvent_newState) == 0x000171, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_CustomEvent_newState' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_SwitchEnum_CmpSuccess_2) == 0x000172, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, Temp_delegate_Variable_5) == 0x000174, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::Temp_delegate_Variable_5' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_PostEventOnActor_ReturnValue) == 0x000184, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_PostEventOnActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_PostEventOnActor_ReturnValue_1) == 0x000188, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_PostEventOnActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_PostEventOnActor_ReturnValue_2) == 0x00018C, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_PostEventOnActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_PostEventOnActor_ReturnValue_3) == 0x000190, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_PostEventOnActor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_SelectInt_ReturnValue) == 0x000194, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_Event_bEnabled) == 0x000198, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_Event_bEnabled' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_GetCurrentVariatorType_ReturnValue_3) == 0x000199, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_GetCurrentVariatorType_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_SwitchEnum_CmpSuccess_3) == 0x00019A, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_DynamicCast_AsRB_Rolling_Gate_Variator_Actor) == 0x0001A0, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_DynamicCast_AsRB_Rolling_Gate_Variator_Actor' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, K2Node_DynamicCast_bSuccess) == 0x0001B0, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_PostEventOnActor_ReturnValue_4) == 0x0001B4, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_PostEventOnActor_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP, CallFunc_PostEventOnActor_ReturnValue_5) == 0x0001B8, "Member 'RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP::CallFunc_PostEventOnActor_ReturnValue_5' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetTimedOpenDuration
// 0x0014 (0x0014 - 0x0000)
struct RollingDoorMinusBase_BP_C_GetTimedOpenDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedClosedDuration_ReturnValue;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_GetTimedOpenDuration) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_GetTimedOpenDuration");
static_assert(sizeof(RollingDoorMinusBase_BP_C_GetTimedOpenDuration) == 0x000014, "Wrong size on RollingDoorMinusBase_BP_C_GetTimedOpenDuration");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedOpenDuration, ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_GetTimedOpenDuration::ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedOpenDuration, CallFunc_GetTimedClosedDuration_ReturnValue) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_GetTimedOpenDuration::CallFunc_GetTimedClosedDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedOpenDuration, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_GetTimedOpenDuration::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedOpenDuration, CallFunc_RandomFloatInRange_ReturnValue) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_GetTimedOpenDuration::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedOpenDuration, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_GetTimedOpenDuration::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetTimedClosedDuration
// 0x000C (0x000C - 0x0000)
struct RollingDoorMinusBase_BP_C_GetTimedClosedDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_GetTimedClosedDuration) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_GetTimedClosedDuration");
static_assert(sizeof(RollingDoorMinusBase_BP_C_GetTimedClosedDuration) == 0x00000C, "Wrong size on RollingDoorMinusBase_BP_C_GetTimedClosedDuration");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedClosedDuration, ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_GetTimedClosedDuration::ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedClosedDuration, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_GetTimedClosedDuration::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedClosedDuration, CallFunc_RandomFloatInRange_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_GetTimedClosedDuration::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetCurrentTimedDelay
// 0x0010 (0x0010 - 0x0000)
struct RollingDoorMinusBase_BP_C_GetCurrentTimedDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedOpenDuration_ReturnValue;         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimedClosedDuration_ReturnValue;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_GetCurrentTimedDelay) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_GetCurrentTimedDelay");
static_assert(sizeof(RollingDoorMinusBase_BP_C_GetCurrentTimedDelay) == 0x000010, "Wrong size on RollingDoorMinusBase_BP_C_GetCurrentTimedDelay");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetCurrentTimedDelay, Delay) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_GetCurrentTimedDelay::Delay' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetCurrentTimedDelay, CallFunc_GetTimedOpenDuration_ReturnValue) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_GetCurrentTimedDelay::CallFunc_GetTimedOpenDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetCurrentTimedDelay, CallFunc_GetTimedClosedDuration_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_GetCurrentTimedDelay::CallFunc_GetTimedClosedDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetCurrentTimedDelay, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_GetCurrentTimedDelay::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetTimedLoopFullDuration
// 0x0014 (0x0014 - 0x0000)
struct RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration) == 0x000004, "Wrong alignment on RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration");
static_assert(sizeof(RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration) == 0x000014, "Wrong size on RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration, ReturnValue) == 0x000000, "Member 'RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration::ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000010, "Member 'RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");

}

