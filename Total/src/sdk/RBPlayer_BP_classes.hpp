#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBPlayer_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PlayerVisualDamageStruct_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RBPlayer_BP.RBPlayer_BP_C
// 0x0230 (0x7BA0 - 0x7970)
class ARBPlayer_BP_C final : public ARBPlayer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x7970(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Ngr_PlayerDamaged_Electric;                        // 0x7978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_AcidCamSplash;                                 // 0x7980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               UnderwaterBubbles;                                 // 0x7988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Watch;                                             // 0x7990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_UnderwaterBubble;                              // 0x7998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_TraproomGas;                                   // 0x79A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lens_R;                                            // 0x79A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lens_L;                                            // 0x79B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 NightVision1P;                                     // 0x79B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ProxyLightDir;                                     // 0x79C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ShadowPickupStatic;                                // 0x79C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ShadowPickupSkeletal;                              // 0x79D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_ElectricHit;                                   // 0x79D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPlayerSkelMeshComponent*             ESOP;                                              // 0x79E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ESOP_Battery;                                      // 0x79E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ESOP_Apparatus;                                    // 0x79F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HeadCap1P;                                         // 0x79F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HairMesh3P;                                        // 0x7A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 GloveMesh3P;                                       // 0x7A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    ProxyLight;                                        // 0x7A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Straps;                                            // 0x7A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 NightVision;                                       // 0x7A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 LegsMesh3P;                                        // 0x7A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 TorsoMesh3P;                                       // 0x7A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HeadMesh3P;                                        // 0x7A38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPlayerVisualDamageStruct>      DamagedBones;                                      // 0x7A40(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	FMulticastInlineDelegateProperty_             Deleteme;                                          // 0x7A50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class USceneComponent*>                ShadowMesh_Visual;                                 // 0x7A60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPrimitiveComponent*>            ShadowMesh_Shadow;                                 // 0x7A70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class USkeletalMeshComponent*>         ExtraCustomizationMeshes;                          // 0x7A80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          CreatedShadowMesh;                                 // 0x7A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasInitReplicated;                                 // 0x7A91(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasReceivedInitialCustomization;                   // 0x7A92(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A93[0x5];                                     // 0x7A93(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ShadowMeshCompleted;                               // 0x7A98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         CorpseSearchBloodHandStartTime;                    // 0x7AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredRightHandBloodIntensity;                    // 0x7AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CorpseSearchBloodDuration;                         // 0x7AB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentRightHandBloodIntensity;                    // 0x7AB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandBloodInterpSpeed;                              // 0x7AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7ABC[0x4];                                     // 0x7ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           DefaultNV1PMesh;                                   // 0x7AC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         NextBloodDripDelay;                                // 0x7AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastBloodDripTimestamp;                            // 0x7AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDownedStateSmearTimestamp;                     // 0x7AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7AF4[0x4];                                     // 0x7AF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceConstant*>      DynamicBloodSplatterMaterials;                     // 0x7AF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceConstant*>      DynamicBloodSplatterMaterials_Shuffled;            // 0x7B08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         NextDownedStateSmearDelay;                         // 0x7B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B1C[0x4];                                     // 0x7B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceConstant*>      DynamicStraightBloodSmearMaterials;                // 0x7B20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TravelledDist;                                     // 0x7B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamageVisualPreviousLocation;                      // 0x7B34(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DamageVisualPreviousRotation;                      // 0x7B40(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B4C[0x4];                                     // 0x7B4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceConstant*>      DynamicRoundBloodSmearMaterials;                   // 0x7B50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UPoseAsset*                             FacePoseAsset;                                     // 0x7B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastLocationDataTimestamp;                         // 0x7B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NextLongBloodDripDelay;                            // 0x7B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastLongBloodDripTimestamp;                        // 0x7B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B74[0x4];                                     // 0x7B74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   ApparatusShadowMesh;                               // 0x7B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MainShadowMesh;                                    // 0x7B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthRatio_Local;                                 // 0x7B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B8C[0x4];                                     // 0x7B8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CharacterBloodReleventVisualComponents;            // 0x7B90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void Deleteme__DelegateSignature();
	void ShadowMeshCompleted__DelegateSignature();
	void ExecuteUbergraph_RBPlayer_BP(int32 EntryPoint);
	void Event_OnActiveSkillRestrictionFinished();
	void Event_OnActiveSkillRestrictionStarted();
	void SkinnerMan();
	void Event_OnRemainingRespawnIncreased();
	void Event_OnActiveSkillActorChanged(class AActor* ActiveSkillActor_0);
	void Event_OnHealthRestored();
	void UnderwaterStateChanged(bool bIsUnderwater);
	void ApplyDefaultNV();
	void SetProxylightEnabled(bool Enabled);
	void Event_OnNVAnimationNotify(bool bWantsNvOn, ENightVisionAnimNotifyType Type);
	void NVAnimationDone();
	void OnNVAnimationDone_Event(bool IsNvActive);
	void Broadcast2DSound(class UAkAudioEvent* Event);
	void ShowProxyLight();
	void ReceiveTick(float DeltaSeconds);
	void UpdateShadowPickupEvent(class ARBPickup* OldItem, class ARBPickup* NewItem);
	void OnAffectedByPsychosisGas_BP();
	void OnExtraCustomizationMeshesAddedForSlot(const TArray<class USkeletalMeshComponent*>& AddedExtraMeshes, EPlayerCustomizationSlot Slot);
	void UpdateCustomization();
	void UpdatePerspective();
	void Event_OnFootstep(const struct FFootstepData& FootstepData);
	void Event_OnLastConsumedBatteryTypeChanged(EItemType batteryType);
	void BP_OnTrapRoomFailed();
	void ReceiveBeginPlay();
	void PlaySoundOnPlayer(class UAkAudioEvent* AkEvent);
	void Event_InitReplicated();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Event_StopSpectatingLocally();
	void Event_StartSpectatingLocally();
	void Event_OnCustomizationChanged();
	void BndEvt__NVComponent_K2Node_ComponentBoundEvent_0_OnNVStateChanged__DelegateSignature(bool bOn);
	void Event_OnTakeDamage(const struct FDamageInfo& Info);
	void Event_OnDie();
	void Event_OnPlayerPerspectiveChanged();
	void OnLoaded_E32B3EA245CB7B65286791842D20B97F(class UObject* Loaded);
	void UserConstructionScript();
	void SetInitialPlayerSettings();
	void Event_PlayHitReactionEffects(const struct FPlayerHitReactionParams& HitReaction, const struct FVector& AttackLoc, float HitRelativeAngle);
	void CustomizeCharacterModel(class URBCustomizationOutfit* OutfitOverride);
	void UpdateESOPBatteryType();
	void Update_Shadow_Mesh(bool ForceClean);
	void CreateShadowmeshCopyOfSkeletalMesh(class USkeletalMeshComponent*& InVisibleMesh, class USceneComponent*& InParent, class UClass* InAnimInstance, class USkeletalMeshComponent** OutShadowMeshComponent);
	void Remove_Shadow_Meshes();
	void CreateSkeletalMeshForShadow(class USkeletalMeshComponent* InVisibleMesh, class USceneComponent* InParent, bool bKeepRelativeTransform, class USkeletalMeshComponent** Out);
	void CreateShadowmeshCopyOfStaticMesh(class UStaticMeshComponent*& InVisualMesh, class USkeletalMeshComponent*& Parent, class UStaticMeshComponent** OutNewComponent);
	void ClearExtraCustomizationMeshes();
	void Should_Hide_Customization_Slot_in_1P(EPlayerCustomizationSlot Slot, bool* ShouldHide);
	void UpdateHeadCapMesh();
	void RefreshHeadCapVisibility();
	void UpdateCharacterBloodDamageMaterials();
	void UpdateBloodDrippingParticle();
	void UpdateShadowPickup(class ARBPickup* Old, class ARBPickup* New);
	class UPoseAsset* GetFacePoseAsset();
	void UpdateBloodHand(float DeltaTime);
	void ApplyBloodOnRightHand();
	void GetRelevantForDamageExtraMeshes(TArray<class USkeletalMeshComponent*>* SkeletalMeshes_);
	void ApplyDamageVFX(EDamageType InfoType, ENPCWeapon NPCWeapon, float DmdAmount, const struct FVector& DmgLocation, const struct FVector& DmgDirection, class AActor* SourceActor, bool bBloodParticles);
	void ApplyBloodDecal(class UMaterialInstanceConstant* MatDecal, float Scale, bool Rotate);
	void GetNextBloodSplatterShuffledMaterial(class UMaterialInstanceConstant** NewParam);
	void UpdateBloodSmearInDownedState();
	void UpdateBloodEffects(float DeltaTime);
	void UpdateESOPVisibility();
	void UpdateShadowActiveSkill();
	void CopyMaterialsToShadowMesh(class UMeshComponent* PlayerMesh, class UMeshComponent* ShadowMesh);
	void CopyPrimitiveDataToShadowMesh(class UMeshComponent* PlayerMesh, class UMeshComponent* ShadowMesh);
	void UpdateUnderwaterFX();
	void DebugShadowMesh();
	void OnRep_DamagedBones();
	void UpdateReleventComponentsForBloodMaterial();

	class USkeletalMeshComponent* GetMainShadowMesh() const;
	TArray<class UPrimitiveComponent*> GetAllShadowMeshes() const;
	class USkeletalMeshComponent* GetFaceFXSkeletalMeshComponent() const;
	class USkeletalMeshComponent* GetSkeletalMeshComponentForSlot(EPlayerCustomizationSlot Slot) const;
	struct FRBPlayerCustomizationInfo GetPlayerCustomizationInfo() const;
	class UStaticMeshComponent* GetWatchComponent() const;
	class USkeletalMeshComponent* GetMainParentSkeletalMesh() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RBPlayer_BP_C">();
	}
	static class ARBPlayer_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARBPlayer_BP_C>();
	}
};
static_assert(alignof(ARBPlayer_BP_C) == 0x000010, "Wrong alignment on ARBPlayer_BP_C");
static_assert(sizeof(ARBPlayer_BP_C) == 0x007BA0, "Wrong size on ARBPlayer_BP_C");
static_assert(offsetof(ARBPlayer_BP_C, UberGraphFrame) == 0x007970, "Member 'ARBPlayer_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Ngr_PlayerDamaged_Electric) == 0x007978, "Member 'ARBPlayer_BP_C::Ngr_PlayerDamaged_Electric' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Ngr_AcidCamSplash) == 0x007980, "Member 'ARBPlayer_BP_C::Ngr_AcidCamSplash' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, UnderwaterBubbles) == 0x007988, "Member 'ARBPlayer_BP_C::UnderwaterBubbles' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Watch) == 0x007990, "Member 'ARBPlayer_BP_C::Watch' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Ngr_UnderwaterBubble) == 0x007998, "Member 'ARBPlayer_BP_C::Ngr_UnderwaterBubble' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Ngr_TraproomGas) == 0x0079A0, "Member 'ARBPlayer_BP_C::Ngr_TraproomGas' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Lens_R) == 0x0079A8, "Member 'ARBPlayer_BP_C::Lens_R' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Lens_L) == 0x0079B0, "Member 'ARBPlayer_BP_C::Lens_L' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, NightVision1P) == 0x0079B8, "Member 'ARBPlayer_BP_C::NightVision1P' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ProxyLightDir) == 0x0079C0, "Member 'ARBPlayer_BP_C::ProxyLightDir' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ShadowPickupStatic) == 0x0079C8, "Member 'ARBPlayer_BP_C::ShadowPickupStatic' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ShadowPickupSkeletal) == 0x0079D0, "Member 'ARBPlayer_BP_C::ShadowPickupSkeletal' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Ngr_ElectricHit) == 0x0079D8, "Member 'ARBPlayer_BP_C::Ngr_ElectricHit' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ESOP) == 0x0079E0, "Member 'ARBPlayer_BP_C::ESOP' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ESOP_Battery) == 0x0079E8, "Member 'ARBPlayer_BP_C::ESOP_Battery' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ESOP_Apparatus) == 0x0079F0, "Member 'ARBPlayer_BP_C::ESOP_Apparatus' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, HeadCap1P) == 0x0079F8, "Member 'ARBPlayer_BP_C::HeadCap1P' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, HairMesh3P) == 0x007A00, "Member 'ARBPlayer_BP_C::HairMesh3P' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, GloveMesh3P) == 0x007A08, "Member 'ARBPlayer_BP_C::GloveMesh3P' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ProxyLight) == 0x007A10, "Member 'ARBPlayer_BP_C::ProxyLight' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Straps) == 0x007A18, "Member 'ARBPlayer_BP_C::Straps' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, NightVision) == 0x007A20, "Member 'ARBPlayer_BP_C::NightVision' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, LegsMesh3P) == 0x007A28, "Member 'ARBPlayer_BP_C::LegsMesh3P' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, TorsoMesh3P) == 0x007A30, "Member 'ARBPlayer_BP_C::TorsoMesh3P' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, HeadMesh3P) == 0x007A38, "Member 'ARBPlayer_BP_C::HeadMesh3P' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, DamagedBones) == 0x007A40, "Member 'ARBPlayer_BP_C::DamagedBones' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, Deleteme) == 0x007A50, "Member 'ARBPlayer_BP_C::Deleteme' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ShadowMesh_Visual) == 0x007A60, "Member 'ARBPlayer_BP_C::ShadowMesh_Visual' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ShadowMesh_Shadow) == 0x007A70, "Member 'ARBPlayer_BP_C::ShadowMesh_Shadow' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ExtraCustomizationMeshes) == 0x007A80, "Member 'ARBPlayer_BP_C::ExtraCustomizationMeshes' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, CreatedShadowMesh) == 0x007A90, "Member 'ARBPlayer_BP_C::CreatedShadowMesh' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, HasInitReplicated) == 0x007A91, "Member 'ARBPlayer_BP_C::HasInitReplicated' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, HasReceivedInitialCustomization) == 0x007A92, "Member 'ARBPlayer_BP_C::HasReceivedInitialCustomization' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ShadowMeshCompleted) == 0x007A98, "Member 'ARBPlayer_BP_C::ShadowMeshCompleted' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, CorpseSearchBloodHandStartTime) == 0x007AA8, "Member 'ARBPlayer_BP_C::CorpseSearchBloodHandStartTime' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, DesiredRightHandBloodIntensity) == 0x007AAC, "Member 'ARBPlayer_BP_C::DesiredRightHandBloodIntensity' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, CorpseSearchBloodDuration) == 0x007AB0, "Member 'ARBPlayer_BP_C::CorpseSearchBloodDuration' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, CurrentRightHandBloodIntensity) == 0x007AB4, "Member 'ARBPlayer_BP_C::CurrentRightHandBloodIntensity' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, HandBloodInterpSpeed) == 0x007AB8, "Member 'ARBPlayer_BP_C::HandBloodInterpSpeed' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, DefaultNV1PMesh) == 0x007AC0, "Member 'ARBPlayer_BP_C::DefaultNV1PMesh' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, NextBloodDripDelay) == 0x007AE8, "Member 'ARBPlayer_BP_C::NextBloodDripDelay' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, LastBloodDripTimestamp) == 0x007AEC, "Member 'ARBPlayer_BP_C::LastBloodDripTimestamp' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, LastDownedStateSmearTimestamp) == 0x007AF0, "Member 'ARBPlayer_BP_C::LastDownedStateSmearTimestamp' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, DynamicBloodSplatterMaterials) == 0x007AF8, "Member 'ARBPlayer_BP_C::DynamicBloodSplatterMaterials' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, DynamicBloodSplatterMaterials_Shuffled) == 0x007B08, "Member 'ARBPlayer_BP_C::DynamicBloodSplatterMaterials_Shuffled' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, NextDownedStateSmearDelay) == 0x007B18, "Member 'ARBPlayer_BP_C::NextDownedStateSmearDelay' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, DynamicStraightBloodSmearMaterials) == 0x007B20, "Member 'ARBPlayer_BP_C::DynamicStraightBloodSmearMaterials' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, TravelledDist) == 0x007B30, "Member 'ARBPlayer_BP_C::TravelledDist' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, DamageVisualPreviousLocation) == 0x007B34, "Member 'ARBPlayer_BP_C::DamageVisualPreviousLocation' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, DamageVisualPreviousRotation) == 0x007B40, "Member 'ARBPlayer_BP_C::DamageVisualPreviousRotation' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, DynamicRoundBloodSmearMaterials) == 0x007B50, "Member 'ARBPlayer_BP_C::DynamicRoundBloodSmearMaterials' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, FacePoseAsset) == 0x007B60, "Member 'ARBPlayer_BP_C::FacePoseAsset' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, LastLocationDataTimestamp) == 0x007B68, "Member 'ARBPlayer_BP_C::LastLocationDataTimestamp' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, NextLongBloodDripDelay) == 0x007B6C, "Member 'ARBPlayer_BP_C::NextLongBloodDripDelay' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, LastLongBloodDripTimestamp) == 0x007B70, "Member 'ARBPlayer_BP_C::LastLongBloodDripTimestamp' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, ApparatusShadowMesh) == 0x007B78, "Member 'ARBPlayer_BP_C::ApparatusShadowMesh' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, MainShadowMesh) == 0x007B80, "Member 'ARBPlayer_BP_C::MainShadowMesh' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, HealthRatio_Local) == 0x007B88, "Member 'ARBPlayer_BP_C::HealthRatio_Local' has a wrong offset!");
static_assert(offsetof(ARBPlayer_BP_C, CharacterBloodReleventVisualComponents) == 0x007B90, "Member 'ARBPlayer_BP_C::CharacterBloodReleventVisualComponents' has a wrong offset!");

}

