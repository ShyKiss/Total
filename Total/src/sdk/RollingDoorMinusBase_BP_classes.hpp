#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RollingDoorMinusBase_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"
#include "RollingDoorTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass RollingDoor-Base_BP.RollingDoor-Base_BP_C
// 0x0300 (0x07B0 - 0x04B0)
class ARollingDoorMinusBase_BP_C : public ARBTriggerableGate
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        PushForward;                                       // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PushBackward;                                      // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TopCollision;                                      // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      RBSound_Door;                                      // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ShadowCaster;                                      // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                SoundDetectorPrevis_Front;                         // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBDeadRepulsionBoxComponent*           RBDeadRepulsionBox;                                // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBTutorialZoneComponent*               RBTutorialZone;                                    // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BlockedGateMesh;                                   // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CartOverlapCollision;                              // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBEditorClearanceCollisionBoxComponent* SwitchClearance_Back;                              // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBEditorClearanceCollisionBoxComponent* SwitchClearance_Front;                             // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                TimerCountdownPrevis_Back;                         // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                TimerCountdownPrevis_Front;                        // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                ElectricalSwitchPrevis_Back;                       // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                ElectricalSwitchPrevis_Front;                      // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                LightSelectorPrevis_Back;                          // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                LightSelectorPrevis_Front;                         // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                ToasterDetectorPrevis_Front;                       // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                PassagesCounterPrevis_Back;                        // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActorPrevisComponent*                PassagesCounterPrevis_Front;                       // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Trigger_Front;                                     // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Trigger_Back;                                      // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPlayerTriggerComponent*              RBPlayerTrigger_Back;                              // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPlayerTriggerComponent*              RBPlayerTrigger_Front;                             // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBBoxNavMeshBlockingComponent*         RBBoxNavMeshBlocking;                              // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBNPCInterestPointComponent*           RBNPCInterestPoint;                                // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DoorFrame;                                         // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationTimeline_BlockNavMesh_E486C3F045836D4EE7E33AAB5B347A98; // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AnimationTimeline__Direction_E486C3F045836D4EE7E33AAB5B347A98; // 0x05A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3188[0x3];                                     // 0x05A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AnimationTimeline;                                 // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationDurationSeconds;                          // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProgressiveMovement;                               // 0x05B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3189[0x3];                                     // 0x05B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          TriggeredSequenceStartedAKEvent;                   // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          TriggeredSequenceStoppedAKEvent;                   // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          UntriggerSequenceStartedAKEvent;                   // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          UntriggerSequenceStoppedAKEvent;                   // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             AnimationCompletedForward;                         // 0x05D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             AnimationCompletedBackward;                        // 0x05E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bSoundPassthrough;                                 // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bSoundConnector;                                   // 0x05F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318A[0x2];                                     // 0x05FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SoundConnectorDimension;                           // 0x05FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318B[0x4];                                     // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      DestinationMaterial;                               // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     MainMaterial;                                      // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ERollingDoorTypes                             DoorSkeletalMesh;                                  // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318C[0x3];                                     // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SoundConnectorLocation;                            // 0x061C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldBeIgnoredForLot;                            // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318D[0x3];                                     // 0x0629(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumTriggerTime;                                // 0x062C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AdditionnalRandomTriggerTime;                      // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ICurrentGateState;                                 // 0x0634(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        PlayersInFrontTrigger;                             // 0x0638(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class UObject*>                        PlayersInBackTrigger;                              // 0x0648(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class ARBPlayer*                              Player;                                            // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountOfPassagesAllowed;                           // 0x0660(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAmountOfPassages;                           // 0x0664(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFlipCounterMinusBP_C*                  PassagesCounter_Front;                             // 0x0668(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class AFlipCounterMinusBP_C*                  PassagesCounter_Back;                              // 0x0670(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bDelayStarted;                                     // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_318E[0x7];                                     // 0x0679(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AToasterDetectorMinus01_BP_C*           ToasterDetector_Front;                             // 0x0680(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FAlertedStateActions                   ToasterAlertedStateActions;                        // 0x0688(0x0020)(Edit, BlueprintVisible, Net)
	float                                         InitialAnimationDurationSeconds;                   // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318F[0x4];                                     // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATimedGateLights_BP_C*                  LightSelectorFront;                                // 0x06B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ATimedGateLights_BP_C*                  LightSelectorBack;                                 // 0x06B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* ElectricalSwitch_Front;                            // 0x06C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* ElectricalSwitch_Back;                             // 0x06C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasSwitchInFront;                                 // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bHasSwitchInBack;                                  // 0x06D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3190[0x2];                                     // 0x06D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CablePositionOnGate;                               // 0x06D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LightSelectorState;                                // 0x06E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3191[0x4];                                     // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATimerCountdownRollingDoorVariatorMinus01_BP_C* TimerCountdown_Front;                              // 0x06E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATimerCountdownRollingDoorVariatorMinus01_BP_C* TimerCountdown_Back;                               // 0x06F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightsColor;                                       // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnlockableTime;                                    // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDoingUnlockSequence;                             // 0x070C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3192[0x3];                                     // 0x070D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RailUnlockableTime;                                // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3193[0x4];                                     // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBDoor*                                ReplacedDoor;                                      // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTutorialTextData                      Item;                                              // 0x0720(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTutorialTextData                      Struct_Ref;                                        // 0x0740(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bCanUseBlockedMesh;                                // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CloseInsteadOfOpen;                                // 0x0761(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3194[0x2];                                     // 0x0762(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentDelay;                                      // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartingState;                                     // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3195[0x4];                                     // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASoundDetector_BP_C*                    SoundDetector_Front;                               // 0x0770(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         SoundDetectorBack_Distance;                        // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanPushPlayerForward;                             // 0x077C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCanPushPlayerBackward;                            // 0x077D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bRepulsionSplitsPlayerAndNPCs;                     // 0x077E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RandomizeStartingState;                            // 0x077F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         FixedTriggerTimeOffset;                            // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SharedRandomInitialTimeOffset;                     // 0x0784(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasCustomOpenTime;                                 // 0x0785(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3196[0x2];                                     // 0x0786(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimedOpenDuration;                                 // 0x0788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightTimeOffset;                                   // 0x078C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bScripted;                                         // 0x0790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OverrideIdleSettings;                              // 0x0791(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3197[0x2];                                     // 0x0792(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIdleDetectionSettings                 IdleSettingsOverride;                              // 0x0794(0x0010)(Edit, BlueprintVisible, NoDestructor)
	bool                                          bComponentsCastStaticShadows;                      // 0x07A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ConstructRepulsion_Editor();
	void TryResetElectricalSwitches();
	void SetLightingSettings();
	void RefreshTimedLightSelectorState();
	void DisplayTimeTimers();
	void Wrap_Time_Inital_Offset(float In, float* Out);
	void AdjustInitialTimedOffset();
	void ConstructRepulsion();
	void SetShadowMode(bool UseRealDoorShadow);
	void OnRep_SoundDetector_Front();
	void SetCollisions();
	void SetSoundConnectors();
	void SetGateAnimations();
	void SetGateVisuals();
	void Set_Current_Delay();
	void GetMeshOffset(struct FVector* NewParam);
	void SetTutorials();
	void GetElectricalSwitchTransform(bool bIsFront, struct FTransform* OutTransform);
	void SetUnlockTimersFrozen(bool Value);
	void SetUnlockTimersEnabled(bool Enabled);
	void Get_Unlockable_Duration(float* Duration);
	void StartUnlockTimers();
	void ResetUnlockSwitchCompletion();
	void UpdateUnlockSwitchInteractivity();
	void OnRep_LightSelectorState();
	void UpdateInteractiveSwitch(class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* Param_Instigator, class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* Target);
	void OnRep_ElectricalSwitch_Back();
	void OnRep_ElectricalSwitch_Front();
	void OnRep_LightSelectorBack();
	void OnRep_LightSelectorFront();
	void OnRep_AnimationDurationSeconds();
	void OnRep_ToasterDetector_Front();
	void OnRep_passagesCounter_Back();
	void OnRep_PassagesCounter_Front();
	void InitVariatorType();
	void ClearVariatorTypes();
	void IsOpen(bool* Param_IsOpen);
	void TryRefreshSoundConnector();
	void OnTimelineUpdate(float Ratio);
	void UserConstructionScript();
	void AnimationTimeline__FinishedFunc();
	void AnimationTimeline__UpdateFunc();
	void AnimationTimeline__AllowNavMesh__EventFunc();
	void AnimationTimeline__NewTrack_0__EventFunc();
	void ReceiveBeginPlay();
	void Event_OnOperatableProgressChanged(class UObject* Operatable, float OldProgress, float CurrentProgress, bool bSnap);
	void ResetDoor();
	void Event_SnapToState();
	void Event_OnTriggerSequenceStarted();
	void Event_OnTriggered();
	void Event_OnUntriggered();
	void Event_OnUntriggerSequenceStarted();
	void Event_OnResetStage();
	void BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature(class ARBPlayer* Param_Player);
	void BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature(class ARBPlayer* Param_Player);
	void BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature(class ARBPlayer* Param_Player);
	void BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature(class ARBPlayer* Param_Player);
	void RandomTimedOpenClosed();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void StartDelay();
	void Event_OnCurrentVariatorTypeChanged();
	void OnInteractorChange();
	void BindSwitchEvents(class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* SWITCH);
	void OnUnlockCompleted(bool bIsOn, class ARBOperatable* Operatable);
	void Event_OnVariatorLogicEnabledChanged();
	void OnReplacedDoor(class ARBDoor* Door);
	void Event_OnBlockableStateChanged();
	void NewtimeTest(float NewTime);
	void Sound_Detected(EPlayerSoundDetectionState OldState, EPlayerSoundDetectionState NewState);
	void MultiCastDisplayInitialTimer();
	void SetVariatorActorsEnabled(bool bEnabled);
	void ExecuteUbergraph_RollingDoorMinusBase_BP(int32 EntryPoint);
	void AnimationCompletedBackward__DelegateSignature();
	void AnimationCompletedForward__DelegateSignature();

	float GetTimedOpenDuration() const;
	float GetTimedClosedDuration() const;
	void GetCurrentTimedDelay(float* Delay) const;
	float GetTimedLoopFullDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RollingDoor-Base_BP_C">();
	}
	static class ARollingDoorMinusBase_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARollingDoorMinusBase_BP_C>();
	}
};
static_assert(alignof(ARollingDoorMinusBase_BP_C) == 0x000010, "Wrong alignment on ARollingDoorMinusBase_BP_C");
static_assert(sizeof(ARollingDoorMinusBase_BP_C) == 0x0007B0, "Wrong size on ARollingDoorMinusBase_BP_C");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, UberGraphFrame) == 0x0004B0, "Member 'ARollingDoorMinusBase_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, PushForward) == 0x0004B8, "Member 'ARollingDoorMinusBase_BP_C::PushForward' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, PushBackward) == 0x0004C0, "Member 'ARollingDoorMinusBase_BP_C::PushBackward' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, TopCollision) == 0x0004C8, "Member 'ARollingDoorMinusBase_BP_C::TopCollision' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, RBSound_Door) == 0x0004D0, "Member 'ARollingDoorMinusBase_BP_C::RBSound_Door' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ShadowCaster) == 0x0004D8, "Member 'ARollingDoorMinusBase_BP_C::ShadowCaster' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, SoundDetectorPrevis_Front) == 0x0004E0, "Member 'ARollingDoorMinusBase_BP_C::SoundDetectorPrevis_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, RBDeadRepulsionBox) == 0x0004E8, "Member 'ARollingDoorMinusBase_BP_C::RBDeadRepulsionBox' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, RBTutorialZone) == 0x0004F0, "Member 'ARollingDoorMinusBase_BP_C::RBTutorialZone' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, BlockedGateMesh) == 0x0004F8, "Member 'ARollingDoorMinusBase_BP_C::BlockedGateMesh' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, CartOverlapCollision) == 0x000500, "Member 'ARollingDoorMinusBase_BP_C::CartOverlapCollision' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, SwitchClearance_Back) == 0x000508, "Member 'ARollingDoorMinusBase_BP_C::SwitchClearance_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, SwitchClearance_Front) == 0x000510, "Member 'ARollingDoorMinusBase_BP_C::SwitchClearance_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, TimerCountdownPrevis_Back) == 0x000518, "Member 'ARollingDoorMinusBase_BP_C::TimerCountdownPrevis_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, TimerCountdownPrevis_Front) == 0x000520, "Member 'ARollingDoorMinusBase_BP_C::TimerCountdownPrevis_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ElectricalSwitchPrevis_Back) == 0x000528, "Member 'ARollingDoorMinusBase_BP_C::ElectricalSwitchPrevis_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ElectricalSwitchPrevis_Front) == 0x000530, "Member 'ARollingDoorMinusBase_BP_C::ElectricalSwitchPrevis_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, LightSelectorPrevis_Back) == 0x000538, "Member 'ARollingDoorMinusBase_BP_C::LightSelectorPrevis_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, LightSelectorPrevis_Front) == 0x000540, "Member 'ARollingDoorMinusBase_BP_C::LightSelectorPrevis_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ToasterDetectorPrevis_Front) == 0x000548, "Member 'ARollingDoorMinusBase_BP_C::ToasterDetectorPrevis_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, PassagesCounterPrevis_Back) == 0x000550, "Member 'ARollingDoorMinusBase_BP_C::PassagesCounterPrevis_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, PassagesCounterPrevis_Front) == 0x000558, "Member 'ARollingDoorMinusBase_BP_C::PassagesCounterPrevis_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, Trigger_Front) == 0x000560, "Member 'ARollingDoorMinusBase_BP_C::Trigger_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, Trigger_Back) == 0x000568, "Member 'ARollingDoorMinusBase_BP_C::Trigger_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, RBPlayerTrigger_Back) == 0x000570, "Member 'ARollingDoorMinusBase_BP_C::RBPlayerTrigger_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, RBPlayerTrigger_Front) == 0x000578, "Member 'ARollingDoorMinusBase_BP_C::RBPlayerTrigger_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, RBBoxNavMeshBlocking) == 0x000580, "Member 'ARollingDoorMinusBase_BP_C::RBBoxNavMeshBlocking' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, RBNPCInterestPoint) == 0x000588, "Member 'ARollingDoorMinusBase_BP_C::RBNPCInterestPoint' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, DoorFrame) == 0x000590, "Member 'ARollingDoorMinusBase_BP_C::DoorFrame' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, SkeletalMesh) == 0x000598, "Member 'ARollingDoorMinusBase_BP_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, AnimationTimeline_BlockNavMesh_E486C3F045836D4EE7E33AAB5B347A98) == 0x0005A0, "Member 'ARollingDoorMinusBase_BP_C::AnimationTimeline_BlockNavMesh_E486C3F045836D4EE7E33AAB5B347A98' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, AnimationTimeline__Direction_E486C3F045836D4EE7E33AAB5B347A98) == 0x0005A4, "Member 'ARollingDoorMinusBase_BP_C::AnimationTimeline__Direction_E486C3F045836D4EE7E33AAB5B347A98' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, AnimationTimeline) == 0x0005A8, "Member 'ARollingDoorMinusBase_BP_C::AnimationTimeline' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, AnimationDurationSeconds) == 0x0005B0, "Member 'ARollingDoorMinusBase_BP_C::AnimationDurationSeconds' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ProgressiveMovement) == 0x0005B4, "Member 'ARollingDoorMinusBase_BP_C::ProgressiveMovement' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, TriggeredSequenceStartedAKEvent) == 0x0005B8, "Member 'ARollingDoorMinusBase_BP_C::TriggeredSequenceStartedAKEvent' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, TriggeredSequenceStoppedAKEvent) == 0x0005C0, "Member 'ARollingDoorMinusBase_BP_C::TriggeredSequenceStoppedAKEvent' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, UntriggerSequenceStartedAKEvent) == 0x0005C8, "Member 'ARollingDoorMinusBase_BP_C::UntriggerSequenceStartedAKEvent' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, UntriggerSequenceStoppedAKEvent) == 0x0005D0, "Member 'ARollingDoorMinusBase_BP_C::UntriggerSequenceStoppedAKEvent' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, AnimationCompletedForward) == 0x0005D8, "Member 'ARollingDoorMinusBase_BP_C::AnimationCompletedForward' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, AnimationCompletedBackward) == 0x0005E8, "Member 'ARollingDoorMinusBase_BP_C::AnimationCompletedBackward' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bSoundPassthrough) == 0x0005F8, "Member 'ARollingDoorMinusBase_BP_C::bSoundPassthrough' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bSoundConnector) == 0x0005F9, "Member 'ARollingDoorMinusBase_BP_C::bSoundConnector' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, SoundConnectorDimension) == 0x0005FC, "Member 'ARollingDoorMinusBase_BP_C::SoundConnectorDimension' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, DestinationMaterial) == 0x000608, "Member 'ARollingDoorMinusBase_BP_C::DestinationMaterial' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, MainMaterial) == 0x000610, "Member 'ARollingDoorMinusBase_BP_C::MainMaterial' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, DoorSkeletalMesh) == 0x000618, "Member 'ARollingDoorMinusBase_BP_C::DoorSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, SoundConnectorLocation) == 0x00061C, "Member 'ARollingDoorMinusBase_BP_C::SoundConnectorLocation' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bShouldBeIgnoredForLot) == 0x000628, "Member 'ARollingDoorMinusBase_BP_C::bShouldBeIgnoredForLot' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, MinimumTriggerTime) == 0x00062C, "Member 'ARollingDoorMinusBase_BP_C::MinimumTriggerTime' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, AdditionnalRandomTriggerTime) == 0x000630, "Member 'ARollingDoorMinusBase_BP_C::AdditionnalRandomTriggerTime' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ICurrentGateState) == 0x000634, "Member 'ARollingDoorMinusBase_BP_C::ICurrentGateState' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, PlayersInFrontTrigger) == 0x000638, "Member 'ARollingDoorMinusBase_BP_C::PlayersInFrontTrigger' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, PlayersInBackTrigger) == 0x000648, "Member 'ARollingDoorMinusBase_BP_C::PlayersInBackTrigger' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, Player) == 0x000658, "Member 'ARollingDoorMinusBase_BP_C::Player' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, AmountOfPassagesAllowed) == 0x000660, "Member 'ARollingDoorMinusBase_BP_C::AmountOfPassagesAllowed' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, CurrentAmountOfPassages) == 0x000664, "Member 'ARollingDoorMinusBase_BP_C::CurrentAmountOfPassages' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, PassagesCounter_Front) == 0x000668, "Member 'ARollingDoorMinusBase_BP_C::PassagesCounter_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, PassagesCounter_Back) == 0x000670, "Member 'ARollingDoorMinusBase_BP_C::PassagesCounter_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bDelayStarted) == 0x000678, "Member 'ARollingDoorMinusBase_BP_C::bDelayStarted' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ToasterDetector_Front) == 0x000680, "Member 'ARollingDoorMinusBase_BP_C::ToasterDetector_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ToasterAlertedStateActions) == 0x000688, "Member 'ARollingDoorMinusBase_BP_C::ToasterAlertedStateActions' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, InitialAnimationDurationSeconds) == 0x0006A8, "Member 'ARollingDoorMinusBase_BP_C::InitialAnimationDurationSeconds' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, LightSelectorFront) == 0x0006B0, "Member 'ARollingDoorMinusBase_BP_C::LightSelectorFront' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, LightSelectorBack) == 0x0006B8, "Member 'ARollingDoorMinusBase_BP_C::LightSelectorBack' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ElectricalSwitch_Front) == 0x0006C0, "Member 'ARollingDoorMinusBase_BP_C::ElectricalSwitch_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ElectricalSwitch_Back) == 0x0006C8, "Member 'ARollingDoorMinusBase_BP_C::ElectricalSwitch_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bHasSwitchInFront) == 0x0006D0, "Member 'ARollingDoorMinusBase_BP_C::bHasSwitchInFront' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bHasSwitchInBack) == 0x0006D1, "Member 'ARollingDoorMinusBase_BP_C::bHasSwitchInBack' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, CablePositionOnGate) == 0x0006D4, "Member 'ARollingDoorMinusBase_BP_C::CablePositionOnGate' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, LightSelectorState) == 0x0006E0, "Member 'ARollingDoorMinusBase_BP_C::LightSelectorState' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, TimerCountdown_Front) == 0x0006E8, "Member 'ARollingDoorMinusBase_BP_C::TimerCountdown_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, TimerCountdown_Back) == 0x0006F0, "Member 'ARollingDoorMinusBase_BP_C::TimerCountdown_Back' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, LightsColor) == 0x0006F8, "Member 'ARollingDoorMinusBase_BP_C::LightsColor' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, UnlockableTime) == 0x000708, "Member 'ARollingDoorMinusBase_BP_C::UnlockableTime' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, IsDoingUnlockSequence) == 0x00070C, "Member 'ARollingDoorMinusBase_BP_C::IsDoingUnlockSequence' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, RailUnlockableTime) == 0x000710, "Member 'ARollingDoorMinusBase_BP_C::RailUnlockableTime' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, ReplacedDoor) == 0x000718, "Member 'ARollingDoorMinusBase_BP_C::ReplacedDoor' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, Item) == 0x000720, "Member 'ARollingDoorMinusBase_BP_C::Item' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, Struct_Ref) == 0x000740, "Member 'ARollingDoorMinusBase_BP_C::Struct_Ref' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bCanUseBlockedMesh) == 0x000760, "Member 'ARollingDoorMinusBase_BP_C::bCanUseBlockedMesh' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, CloseInsteadOfOpen) == 0x000761, "Member 'ARollingDoorMinusBase_BP_C::CloseInsteadOfOpen' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, CurrentDelay) == 0x000764, "Member 'ARollingDoorMinusBase_BP_C::CurrentDelay' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, StartingState) == 0x000768, "Member 'ARollingDoorMinusBase_BP_C::StartingState' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, SoundDetector_Front) == 0x000770, "Member 'ARollingDoorMinusBase_BP_C::SoundDetector_Front' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, SoundDetectorBack_Distance) == 0x000778, "Member 'ARollingDoorMinusBase_BP_C::SoundDetectorBack_Distance' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bCanPushPlayerForward) == 0x00077C, "Member 'ARollingDoorMinusBase_BP_C::bCanPushPlayerForward' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bCanPushPlayerBackward) == 0x00077D, "Member 'ARollingDoorMinusBase_BP_C::bCanPushPlayerBackward' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bRepulsionSplitsPlayerAndNPCs) == 0x00077E, "Member 'ARollingDoorMinusBase_BP_C::bRepulsionSplitsPlayerAndNPCs' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, RandomizeStartingState) == 0x00077F, "Member 'ARollingDoorMinusBase_BP_C::RandomizeStartingState' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, FixedTriggerTimeOffset) == 0x000780, "Member 'ARollingDoorMinusBase_BP_C::FixedTriggerTimeOffset' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, SharedRandomInitialTimeOffset) == 0x000784, "Member 'ARollingDoorMinusBase_BP_C::SharedRandomInitialTimeOffset' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, HasCustomOpenTime) == 0x000785, "Member 'ARollingDoorMinusBase_BP_C::HasCustomOpenTime' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, TimedOpenDuration) == 0x000788, "Member 'ARollingDoorMinusBase_BP_C::TimedOpenDuration' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, LightTimeOffset) == 0x00078C, "Member 'ARollingDoorMinusBase_BP_C::LightTimeOffset' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bScripted) == 0x000790, "Member 'ARollingDoorMinusBase_BP_C::bScripted' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, OverrideIdleSettings) == 0x000791, "Member 'ARollingDoorMinusBase_BP_C::OverrideIdleSettings' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, IdleSettingsOverride) == 0x000794, "Member 'ARollingDoorMinusBase_BP_C::IdleSettingsOverride' has a wrong offset!");
static_assert(offsetof(ARollingDoorMinusBase_BP_C, bComponentsCastStaticShadows) == 0x0007A4, "Member 'ARollingDoorMinusBase_BP_C::bComponentsCastStaticShadows' has a wrong offset!");

}

