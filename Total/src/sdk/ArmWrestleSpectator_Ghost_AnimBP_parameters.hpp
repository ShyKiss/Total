#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArmWrestleSpectator_Ghost_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OPP_structs.hpp"


namespace SDK::Params
{

// Function ArmWrestleSpectator_Ghost_AnimBP.ArmWrestleSpectator_Ghost_AnimBP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ArmWrestleSpectator_Ghost_AnimBP_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ArmWrestleSpectator_Ghost_AnimBP_C_AnimGraph) == 0x000008, "Wrong alignment on ArmWrestleSpectator_Ghost_AnimBP_C_AnimGraph");
static_assert(sizeof(ArmWrestleSpectator_Ghost_AnimBP_C_AnimGraph) == 0x000010, "Wrong size on ArmWrestleSpectator_Ghost_AnimBP_C_AnimGraph");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ArmWrestleSpectator_Ghost_AnimBP.ArmWrestleSpectator_Ghost_AnimBP_C.ManageLookAt
// 0x0038 (0x0038 - 0x0000)
struct ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt final
{
public:
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BAB[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_NormalizeRotationAngle_ReturnValue;       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt) == 0x000008, "Wrong alignment on ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt");
static_assert(sizeof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt) == 0x000038, "Wrong size on ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, K2Node_DynamicCast_AsRB_Player) == 0x000000, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_BreakRotator_Roll) == 0x00000C, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_BreakRotator_Pitch) == 0x000010, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_BreakRotator_Yaw) == 0x000014, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_BreakRotator_Roll_1) == 0x000018, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_BreakRotator_Pitch_1) == 0x00001C, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_BreakRotator_Yaw_1) == 0x000020, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_BreakRotator_Roll_2) == 0x000024, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_BreakRotator_Pitch_2) == 0x000028, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_BreakRotator_Yaw_2) == 0x00002C, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000030, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt, CallFunc_NormalizeRotationAngle_ReturnValue) == 0x000034, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ManageLookAt::CallFunc_NormalizeRotationAngle_ReturnValue' has a wrong offset!");

// Function ArmWrestleSpectator_Ghost_AnimBP.ArmWrestleSpectator_Ghost_AnimBP_C.FinishGhost
// 0x000C (0x000C - 0x0000)
struct ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost final
{
public:
	EGhostFinishReason                            FinishReason;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BAC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GhostFinishCustomReason;                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost) == 0x000004, "Wrong alignment on ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost");
static_assert(sizeof(ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost) == 0x00000C, "Wrong size on ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost, FinishReason) == 0x000000, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost::FinishReason' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost, GhostFinishCustomReason) == 0x000004, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost::GhostFinishCustomReason' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost, ReturnValue) == 0x000008, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_FinishGhost::ReturnValue' has a wrong offset!");

// Function ArmWrestleSpectator_Ghost_AnimBP.ArmWrestleSpectator_Ghost_AnimBP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ArmWrestleSpectator_Ghost_AnimBP_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestleSpectator_Ghost_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ArmWrestleSpectator_Ghost_AnimBP_C_BlueprintUpdateAnimation");
static_assert(sizeof(ArmWrestleSpectator_Ghost_AnimBP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ArmWrestleSpectator_Ghost_AnimBP_C_BlueprintUpdateAnimation");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ArmWrestleSpectator_Ghost_AnimBP.ArmWrestleSpectator_Ghost_AnimBP_C.ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP
// 0x0018 (0x0018 - 0x0000)
struct ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GhostAnimTransition_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GhostAnimTransition_ReturnValue_1;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP) == 0x000004, "Wrong alignment on ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP");
static_assert(sizeof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP) == 0x000018, "Wrong size on ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, EntryPoint) == 0x000000, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue) == 0x000004, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_Less_FloatFloat_ReturnValue) == 0x000008, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000B, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1) == 0x00000C, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_GetRelevantAnimTimeRemaining_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000010, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_BooleanAND_ReturnValue_1) == 0x000011, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_GhostAnimTransition_ReturnValue) == 0x000012, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_GhostAnimTransition_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, CallFunc_GhostAnimTransition_ReturnValue_1) == 0x000013, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::CallFunc_GhostAnimTransition_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP, K2Node_Event_DeltaTimeX) == 0x000014, "Member 'ArmWrestleSpectator_Ghost_AnimBP_C_ExecuteUbergraph_ArmWrestleSpectator_Ghost_AnimBP::K2Node_Event_DeltaTimeX' has a wrong offset!");

}

