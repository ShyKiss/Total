#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NarrativeScreenBase_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass NarrativeScreenBase_BP.NarrativeScreenBase_BP_C
// 0x0118 (0x03F0 - 0x02D8)
class ANarrativeScreenBase_BP_C : public ARBNarrativeScreen
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URBSoundComponent*                      IndividualSound;                                   // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      GroupSound;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_ElecArc;                                       // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_ScreenExplo;                                   // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BrokenGlass;                                       // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TVScreen;                                          // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TVShell;                                           // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPropOptimizerComponent*              RBPropOptimizer;                                   // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_6B33AA2F42620535576D84A4973AB247; // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_6B33AA2F42620535576D84A4973AB247; // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D8[0x3];                                     // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenRefreshInTL_NewTrack_0_FB45BC9343241784990512A45022426B; // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ScreenRefreshInTL__Direction_FB45BC9343241784990512A45022426B; // 0x033C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D9[0x3];                                     // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScreenRefreshInTL;                                 // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ALight*>                         AssociatedLights;                                  // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class UStaticMeshComponent*>           Screens;                                           // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FLinearColor                           Emmisive;                                          // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsScreenOn_Local;                                  // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31DA[0x3];                                     // 0x0379(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenRefreshMin;                                  // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenRefreshLuminosity;                           // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenChromaticAberation;                          // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenNoiseDeform;                                 // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenDeform;                                      // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenInterlace;                                   // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31DB[0x4];                                     // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Lightfunction;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSilent;                                          // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31DC[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          IdleSoundStart;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          IdleSoundStop;                                     // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoopingIdleSoundPlaying;                         // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsManuallyMuted;                                   // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31DD[0x2];                                     // 0x03BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenRefreshMax;                                  // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisfunctionalTV;                                   // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsDisfunctionalTV;                                 // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31DE[0x2];                                     // 0x03C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreenRefreshPlayRate;                             // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitBeforeScreenBreak;                              // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31DF[0x4];                                     // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   MagnifierMeshComponent;                            // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNeverExplode;                                     // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31E0[0x3];                                     // 0x03D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrokenScreenCPD;                                   // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OnCPD;                                             // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpRefreshCPD;                                    // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bScreenExploded;                                   // 0x03E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bScreenCracked;                                    // 0x03E9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bAlwaysExplode;                                    // 0x03EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ResetScreenBreakEffects();
	void Update_Screens_MDD();
	void TurnOnLight(bool Condition);
	void SpawnLight();
	void LinkTextureToChannel();
	void UpdateTVOn(bool Force);
	void SetScreenMaterial(class UMaterialInterface* Material);
	void UserConstructionScript();
	void ScreenRefreshInTL__FinishedFunc();
	void ScreenRefreshInTL__UpdateFunc();
	void ScreenRefreshInTL__NewTrack_1__EventFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void ReceiveBeginPlay();
	void UpdateTVOnVisuals_Internal(bool IsOn);
	void Event_OnLinkedStatusChanged();
	void Event_OnIsOnChanged();
	void FlashRefreshJump();
	void ManualUnmute();
	void ManualMute();
	void StartDisfunctional();
	void StopDisfunctional();
	void Event_OnDamageCountChanged(int32 Count);
	void BndEvt__NarrativeScreenBase_BP_DamageableComponent_K2Node_ComponentBoundEvent_0_OnDamageableDestroyed__DelegateSignature(class URBDamageableComponent* Param_DamageableComponent);
	void PostToggled(bool bToggleEnabled);
	void ExecuteUbergraph_NarrativeScreenBase_BP(int32 EntryPoint);
	void RefreshMultiPositionGroup();
	void SnapScreenMeshesVisibility();
	void BreakOnServer();
	void OnRep_bScreenCracked();
	void OnRep_bScreenExploded();
	void AllowScreenExplosion(bool* bAllowScreenExplosion);
	void HandleDamageCountChanged_Cosmetic(int32 Count);

	void GetSimilarTVInRadius(float Radius, TArray<class ANarrativeScreenBase_BP_C*>* TVs) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NarrativeScreenBase_BP_C">();
	}
	static class ANarrativeScreenBase_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANarrativeScreenBase_BP_C>();
	}
};
static_assert(alignof(ANarrativeScreenBase_BP_C) == 0x000008, "Wrong alignment on ANarrativeScreenBase_BP_C");
static_assert(sizeof(ANarrativeScreenBase_BP_C) == 0x0003F0, "Wrong size on ANarrativeScreenBase_BP_C");
static_assert(offsetof(ANarrativeScreenBase_BP_C, UberGraphFrame) == 0x0002D8, "Member 'ANarrativeScreenBase_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, IndividualSound) == 0x0002E0, "Member 'ANarrativeScreenBase_BP_C::IndividualSound' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, GroupSound) == 0x0002E8, "Member 'ANarrativeScreenBase_BP_C::GroupSound' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, Ngr_ElecArc) == 0x0002F0, "Member 'ANarrativeScreenBase_BP_C::Ngr_ElecArc' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, Ngr_ScreenExplo) == 0x0002F8, "Member 'ANarrativeScreenBase_BP_C::Ngr_ScreenExplo' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, BrokenGlass) == 0x000300, "Member 'ANarrativeScreenBase_BP_C::BrokenGlass' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, TVScreen) == 0x000308, "Member 'ANarrativeScreenBase_BP_C::TVScreen' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, TVShell) == 0x000310, "Member 'ANarrativeScreenBase_BP_C::TVShell' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, RBPropOptimizer) == 0x000318, "Member 'ANarrativeScreenBase_BP_C::RBPropOptimizer' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, Scene) == 0x000320, "Member 'ANarrativeScreenBase_BP_C::Scene' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, Timeline_1_NewTrack_0_6B33AA2F42620535576D84A4973AB247) == 0x000328, "Member 'ANarrativeScreenBase_BP_C::Timeline_1_NewTrack_0_6B33AA2F42620535576D84A4973AB247' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, Timeline_1__Direction_6B33AA2F42620535576D84A4973AB247) == 0x00032C, "Member 'ANarrativeScreenBase_BP_C::Timeline_1__Direction_6B33AA2F42620535576D84A4973AB247' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, Timeline_1) == 0x000330, "Member 'ANarrativeScreenBase_BP_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenRefreshInTL_NewTrack_0_FB45BC9343241784990512A45022426B) == 0x000338, "Member 'ANarrativeScreenBase_BP_C::ScreenRefreshInTL_NewTrack_0_FB45BC9343241784990512A45022426B' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenRefreshInTL__Direction_FB45BC9343241784990512A45022426B) == 0x00033C, "Member 'ANarrativeScreenBase_BP_C::ScreenRefreshInTL__Direction_FB45BC9343241784990512A45022426B' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenRefreshInTL) == 0x000340, "Member 'ANarrativeScreenBase_BP_C::ScreenRefreshInTL' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, AssociatedLights) == 0x000348, "Member 'ANarrativeScreenBase_BP_C::AssociatedLights' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, Screens) == 0x000358, "Member 'ANarrativeScreenBase_BP_C::Screens' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, Emmisive) == 0x000368, "Member 'ANarrativeScreenBase_BP_C::Emmisive' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, IsScreenOn_Local) == 0x000378, "Member 'ANarrativeScreenBase_BP_C::IsScreenOn_Local' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenRefreshMin) == 0x00037C, "Member 'ANarrativeScreenBase_BP_C::ScreenRefreshMin' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenRefreshLuminosity) == 0x000380, "Member 'ANarrativeScreenBase_BP_C::ScreenRefreshLuminosity' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenChromaticAberation) == 0x000384, "Member 'ANarrativeScreenBase_BP_C::ScreenChromaticAberation' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenNoiseDeform) == 0x000388, "Member 'ANarrativeScreenBase_BP_C::ScreenNoiseDeform' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenDeform) == 0x00038C, "Member 'ANarrativeScreenBase_BP_C::ScreenDeform' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenInterlace) == 0x000390, "Member 'ANarrativeScreenBase_BP_C::ScreenInterlace' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, Lightfunction) == 0x000398, "Member 'ANarrativeScreenBase_BP_C::Lightfunction' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, IsSilent) == 0x0003A0, "Member 'ANarrativeScreenBase_BP_C::IsSilent' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, IdleSoundStart) == 0x0003A8, "Member 'ANarrativeScreenBase_BP_C::IdleSoundStart' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, IdleSoundStop) == 0x0003B0, "Member 'ANarrativeScreenBase_BP_C::IdleSoundStop' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, IsLoopingIdleSoundPlaying) == 0x0003B8, "Member 'ANarrativeScreenBase_BP_C::IsLoopingIdleSoundPlaying' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, IsManuallyMuted) == 0x0003B9, "Member 'ANarrativeScreenBase_BP_C::IsManuallyMuted' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenRefreshMax) == 0x0003BC, "Member 'ANarrativeScreenBase_BP_C::ScreenRefreshMax' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, DisfunctionalTV) == 0x0003C0, "Member 'ANarrativeScreenBase_BP_C::DisfunctionalTV' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, IsDisfunctionalTV) == 0x0003C1, "Member 'ANarrativeScreenBase_BP_C::IsDisfunctionalTV' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, ScreenRefreshPlayRate) == 0x0003C4, "Member 'ANarrativeScreenBase_BP_C::ScreenRefreshPlayRate' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, HitBeforeScreenBreak) == 0x0003C8, "Member 'ANarrativeScreenBase_BP_C::HitBeforeScreenBreak' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, MagnifierMeshComponent) == 0x0003D0, "Member 'ANarrativeScreenBase_BP_C::MagnifierMeshComponent' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, bNeverExplode) == 0x0003D8, "Member 'ANarrativeScreenBase_BP_C::bNeverExplode' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, BrokenScreenCPD) == 0x0003DC, "Member 'ANarrativeScreenBase_BP_C::BrokenScreenCPD' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, OnCPD) == 0x0003E0, "Member 'ANarrativeScreenBase_BP_C::OnCPD' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, JumpRefreshCPD) == 0x0003E4, "Member 'ANarrativeScreenBase_BP_C::JumpRefreshCPD' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, bScreenExploded) == 0x0003E8, "Member 'ANarrativeScreenBase_BP_C::bScreenExploded' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, bScreenCracked) == 0x0003E9, "Member 'ANarrativeScreenBase_BP_C::bScreenCracked' has a wrong offset!");
static_assert(offsetof(ANarrativeScreenBase_BP_C, bAlwaysExplode) == 0x0003EA, "Member 'ANarrativeScreenBase_BP_C::bAlwaysExplode' has a wrong offset!");

}

