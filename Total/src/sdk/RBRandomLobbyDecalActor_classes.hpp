#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBRandomLobbyDecalActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RBRandomLobbyDecalActor.RBRandomLobbyDecalActor_C
// 0x0038 (0x0280 - 0x0248)
class ARBRandomLobbyDecalActor_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DecalIndex;                                        // 0x0278(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void SetMaterial();
	void OnRep_DecalIndex();
	void Initialize();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_RBRandomLobbyDecalActor(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RBRandomLobbyDecalActor_C">();
	}
	static class ARBRandomLobbyDecalActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARBRandomLobbyDecalActor_C>();
	}
};
static_assert(alignof(ARBRandomLobbyDecalActor_C) == 0x000008, "Wrong alignment on ARBRandomLobbyDecalActor_C");
static_assert(sizeof(ARBRandomLobbyDecalActor_C) == 0x000280, "Wrong size on ARBRandomLobbyDecalActor_C");
static_assert(offsetof(ARBRandomLobbyDecalActor_C, UberGraphFrame) == 0x000248, "Member 'ARBRandomLobbyDecalActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARBRandomLobbyDecalActor_C, Billboard) == 0x000250, "Member 'ARBRandomLobbyDecalActor_C::Billboard' has a wrong offset!");
static_assert(offsetof(ARBRandomLobbyDecalActor_C, Decal) == 0x000258, "Member 'ARBRandomLobbyDecalActor_C::Decal' has a wrong offset!");
static_assert(offsetof(ARBRandomLobbyDecalActor_C, DefaultSceneRoot) == 0x000260, "Member 'ARBRandomLobbyDecalActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ARBRandomLobbyDecalActor_C, Materials) == 0x000268, "Member 'ARBRandomLobbyDecalActor_C::Materials' has a wrong offset!");
static_assert(offsetof(ARBRandomLobbyDecalActor_C, DecalIndex) == 0x000278, "Member 'ARBRandomLobbyDecalActor_C::DecalIndex' has a wrong offset!");

}

