#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WallMinus01_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ModuleMeshData_structs.hpp"
#include "ModuleMeshDataMinus02_structs.hpp"
#include "MeshPopulate_Parent_classes.hpp"
#include "WallSide_Enu_structs.hpp"
#include "WallEnd_Enu_structs.hpp"
#include "MeshPopulateDirection_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Wall-01_BP.Wall-01_BP_C
// 0x01D0 (0x05B0 - 0x03E0)
#pragma pack(push, 0x1)
class alignas(0x08) AWallMinus01_BP_C : public AMeshPopulate_Parent_C
{
public:
	bool                                          FinishWithInbetween;                               // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_395E[0x3];                                     // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumOfInBetween;                                    // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseInbetweenSpace;                                 // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HideInbetweenMeshes;                               // 0x03E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_395F[0x2];                                     // 0x03EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentInbetweenSize;                              // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FModuleMeshData>                WallPlank;                                         // 0x03F0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshData>                WallFrame;                                         // 0x0400(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshData>                WallFullFrame;                                     // 0x0410(0x0010)(Edit, BlueprintVisible)
	bool                                          UseBottomMolding;                                  // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseBottomMoldingInv;                               // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseUpperMolding;                                   // 0x0422(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseUpperMoldingInv;                                // 0x0423(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseBottomUpperExtreme;                             // 0x0424(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3960[0x3];                                     // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModuleMeshDataMinus02>         WallMeshes02A;                                     // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FModuleMeshDataMinus02>         WallMeshes02B;                                     // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FModuleMeshData>                InBetweenMeshes;                                   // 0x0448(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshDataMinus02>         InBetweenMeshes02;                                 // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FModuleMeshData>                BottomMeshes;                                      // 0x0468(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshDataMinus02>         BottomMeshes02;                                    // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FModuleMeshData>                UpperMeshes;                                       // 0x0488(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshDataMinus02>         UpperMeshes02;                                     // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         InbetweenSizeTotal;                                // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondTotal;                                       // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTopPlank;                                       // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	EWallSide_Enu                                 WallA;                                             // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWallSide_Enu                                 WallB;                                             // 0x04B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFullFrame;                                      // 0x04B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseWallB;                                          // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseWallA;                                          // 0x04B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EWallEnd_Enu                                  WallEnd01;                                         // 0x04B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWallEnd_Enu                                  WallEnd02;                                         // 0x04B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActiveState;                                      // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3961[0x3];                                     // 0x04B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtremeTopZ;                                       // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FModuleMeshData>                TopPlank;                                          // 0x04C0(0x0010)(Edit, BlueprintVisible)
	float                                         WallHeight;                                        // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InbetweenSize;                                     // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CornerIntMinus01;                                  // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CornerExtMinus01;                                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CornerFrameIntMinus01;                             // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CornerFrameExtMinus01;                             // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CornerFullFrameIntMinus01;                         // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CornerFullFrameExtMinus01;                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            InBetweenMeshesCorners;                            // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            InBetweenMeshesT;                                  // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOverwriteOnlyOnWall;                            // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3962[0x7];                                     // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            TopPlankCorner;                                    // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxScaledSecondSide;                               // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GapSize;                                           // 0x052C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TotalGapSize;                                      // 0x0538(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WallOffset;                                        // 0x0544(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            WallBottomCornerInt;                               // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            WallBottomCornerExt;                               // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            WallTopCornerInt;                                  // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            WallTopCornerExt;                                  // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WallScale;                                         // 0x0570(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SideWallOffset;                                    // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InBetOffset;                                       // 0x0580(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InBetScale;                                        // 0x058C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            WallEndNormal;                                     // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            WallEndNormal2;                                    // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoCollisionForUpperMeshes;                        // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNoCollisionForBottomMeshes;                       // 0x05A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          NewVar_0_0;                                        // 0x05AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExcludeStructForAutomaticCollision(TArray<struct FModuleMeshData>& Array);
	void AddAutomaticBoxCollisionExcludedStaticMeshes();
	void InvertYminus(const struct FVector& LastLocation);
	void InvertXminus();
	void SetInbetween(TArray<struct FStaticmeshArray_Stuc>& NewParam);
	void Add_Inbetween_Row();
	void AddGap(TArray<struct FStaticmeshArray_Stuc>& NewParam);
	void SetGap(TArray<struct FModuleMeshDataMinus02>& Param_WallMeshes02A, EMeshPopulateDirection Direction, int32* NumberOfInbetween, float* TotalInbetweenSize, struct FVector* GapTotal);
	void PushEndWallMeshes(const struct FTransform& WallEndMeshesTransform, class UStaticMesh* EndMesh, const struct FVector& SizeLeft, bool UseZScale, bool UseExtreme, float ExtremeZ, bool UseOverwriteMaterial, bool UseOverwriteLightmap, bool IsInbetweenMesh);
	bool GetStateName(class FString* StateA, class FString* StateB);
	void WallEnd(const struct FVector& Relative_Transform_Location, const struct FVector& NewSize);
	void SetVariable(struct FVector* NewSize);
	void UserConstructionScript();

	bool IsStateA() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Wall-01_BP_C">();
	}
	static class AWallMinus01_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWallMinus01_BP_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AWallMinus01_BP_C) == 0x000008, "Wrong alignment on AWallMinus01_BP_C");
static_assert(sizeof(AWallMinus01_BP_C) == 0x0005B0, "Wrong size on AWallMinus01_BP_C");
static_assert(offsetof(AWallMinus01_BP_C, FinishWithInbetween) == 0x0003E0, "Member 'AWallMinus01_BP_C::FinishWithInbetween' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, NumOfInBetween) == 0x0003E4, "Member 'AWallMinus01_BP_C::NumOfInBetween' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseInbetweenSpace) == 0x0003E8, "Member 'AWallMinus01_BP_C::UseInbetweenSpace' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, HideInbetweenMeshes) == 0x0003E9, "Member 'AWallMinus01_BP_C::HideInbetweenMeshes' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, CurrentInbetweenSize) == 0x0003EC, "Member 'AWallMinus01_BP_C::CurrentInbetweenSize' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallPlank) == 0x0003F0, "Member 'AWallMinus01_BP_C::WallPlank' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallFrame) == 0x000400, "Member 'AWallMinus01_BP_C::WallFrame' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallFullFrame) == 0x000410, "Member 'AWallMinus01_BP_C::WallFullFrame' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseBottomMolding) == 0x000420, "Member 'AWallMinus01_BP_C::UseBottomMolding' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseBottomMoldingInv) == 0x000421, "Member 'AWallMinus01_BP_C::UseBottomMoldingInv' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseUpperMolding) == 0x000422, "Member 'AWallMinus01_BP_C::UseUpperMolding' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseUpperMoldingInv) == 0x000423, "Member 'AWallMinus01_BP_C::UseUpperMoldingInv' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseBottomUpperExtreme) == 0x000424, "Member 'AWallMinus01_BP_C::UseBottomUpperExtreme' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallMeshes02A) == 0x000428, "Member 'AWallMinus01_BP_C::WallMeshes02A' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallMeshes02B) == 0x000438, "Member 'AWallMinus01_BP_C::WallMeshes02B' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, InBetweenMeshes) == 0x000448, "Member 'AWallMinus01_BP_C::InBetweenMeshes' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, InBetweenMeshes02) == 0x000458, "Member 'AWallMinus01_BP_C::InBetweenMeshes02' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, BottomMeshes) == 0x000468, "Member 'AWallMinus01_BP_C::BottomMeshes' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, BottomMeshes02) == 0x000478, "Member 'AWallMinus01_BP_C::BottomMeshes02' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UpperMeshes) == 0x000488, "Member 'AWallMinus01_BP_C::UpperMeshes' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UpperMeshes02) == 0x000498, "Member 'AWallMinus01_BP_C::UpperMeshes02' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, InbetweenSizeTotal) == 0x0004A8, "Member 'AWallMinus01_BP_C::InbetweenSizeTotal' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, SecondTotal) == 0x0004AC, "Member 'AWallMinus01_BP_C::SecondTotal' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseTopPlank) == 0x0004B0, "Member 'AWallMinus01_BP_C::UseTopPlank' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallA) == 0x0004B1, "Member 'AWallMinus01_BP_C::WallA' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallB) == 0x0004B2, "Member 'AWallMinus01_BP_C::WallB' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseFullFrame) == 0x0004B3, "Member 'AWallMinus01_BP_C::UseFullFrame' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseWallB) == 0x0004B4, "Member 'AWallMinus01_BP_C::UseWallB' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseWallA) == 0x0004B5, "Member 'AWallMinus01_BP_C::UseWallA' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallEnd01) == 0x0004B6, "Member 'AWallMinus01_BP_C::WallEnd01' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallEnd02) == 0x0004B7, "Member 'AWallMinus01_BP_C::WallEnd02' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, bActiveState) == 0x0004B8, "Member 'AWallMinus01_BP_C::bActiveState' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, ExtremeTopZ) == 0x0004BC, "Member 'AWallMinus01_BP_C::ExtremeTopZ' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, TopPlank) == 0x0004C0, "Member 'AWallMinus01_BP_C::TopPlank' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallHeight) == 0x0004D0, "Member 'AWallMinus01_BP_C::WallHeight' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, InbetweenSize) == 0x0004D4, "Member 'AWallMinus01_BP_C::InbetweenSize' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, CornerIntMinus01) == 0x0004D8, "Member 'AWallMinus01_BP_C::CornerIntMinus01' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, CornerExtMinus01) == 0x0004E0, "Member 'AWallMinus01_BP_C::CornerExtMinus01' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, CornerFrameIntMinus01) == 0x0004E8, "Member 'AWallMinus01_BP_C::CornerFrameIntMinus01' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, CornerFrameExtMinus01) == 0x0004F0, "Member 'AWallMinus01_BP_C::CornerFrameExtMinus01' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, CornerFullFrameIntMinus01) == 0x0004F8, "Member 'AWallMinus01_BP_C::CornerFullFrameIntMinus01' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, CornerFullFrameExtMinus01) == 0x000500, "Member 'AWallMinus01_BP_C::CornerFullFrameExtMinus01' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, InBetweenMeshesCorners) == 0x000508, "Member 'AWallMinus01_BP_C::InBetweenMeshesCorners' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, InBetweenMeshesT) == 0x000510, "Member 'AWallMinus01_BP_C::InBetweenMeshesT' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, UseOverwriteOnlyOnWall) == 0x000518, "Member 'AWallMinus01_BP_C::UseOverwriteOnlyOnWall' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, TopPlankCorner) == 0x000520, "Member 'AWallMinus01_BP_C::TopPlankCorner' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, MaxScaledSecondSide) == 0x000528, "Member 'AWallMinus01_BP_C::MaxScaledSecondSide' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, GapSize) == 0x00052C, "Member 'AWallMinus01_BP_C::GapSize' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, TotalGapSize) == 0x000538, "Member 'AWallMinus01_BP_C::TotalGapSize' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallOffset) == 0x000544, "Member 'AWallMinus01_BP_C::WallOffset' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallBottomCornerInt) == 0x000550, "Member 'AWallMinus01_BP_C::WallBottomCornerInt' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallBottomCornerExt) == 0x000558, "Member 'AWallMinus01_BP_C::WallBottomCornerExt' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallTopCornerInt) == 0x000560, "Member 'AWallMinus01_BP_C::WallTopCornerInt' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallTopCornerExt) == 0x000568, "Member 'AWallMinus01_BP_C::WallTopCornerExt' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallScale) == 0x000570, "Member 'AWallMinus01_BP_C::WallScale' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, SideWallOffset) == 0x00057C, "Member 'AWallMinus01_BP_C::SideWallOffset' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, InBetOffset) == 0x000580, "Member 'AWallMinus01_BP_C::InBetOffset' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, InBetScale) == 0x00058C, "Member 'AWallMinus01_BP_C::InBetScale' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallEndNormal) == 0x000598, "Member 'AWallMinus01_BP_C::WallEndNormal' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, WallEndNormal2) == 0x0005A0, "Member 'AWallMinus01_BP_C::WallEndNormal2' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, bNoCollisionForUpperMeshes) == 0x0005A8, "Member 'AWallMinus01_BP_C::bNoCollisionForUpperMeshes' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, bNoCollisionForBottomMeshes) == 0x0005A9, "Member 'AWallMinus01_BP_C::bNoCollisionForBottomMeshes' has a wrong offset!");
static_assert(offsetof(AWallMinus01_BP_C, NewVar_0_0) == 0x0005AA, "Member 'AWallMinus01_BP_C::NewVar_0_0' has a wrong offset!");

}

