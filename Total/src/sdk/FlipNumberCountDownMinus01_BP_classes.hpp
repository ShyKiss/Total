#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlipNumberCountDownMinus01_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FlipNumberCountDown-01_BP.FlipNumberCountDown-01_BP_C
// 0x00A0 (0x02E8 - 0x0248)
class AFlipNumberCountDownMinus01_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FlipNumberRotatingA;                               // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlipNumberRotatingB;                               // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlipNumberRotatingC;                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlipNumberRotatingD;                               // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FlipX2_timeline_NewTrack_2_9356492E4A333806349C96BA6B921C69; // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlipX2_timeline_NewTrack_1_9356492E4A333806349C96BA6B921C69; // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlipX2_timeline_NewTrack_0_9356492E4A333806349C96BA6B921C69; // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FlipX2_timeline__Direction_9356492E4A333806349C96BA6B921C69; // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3250[0x3];                                     // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FlipX2_timeline;                                   // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Flip_Timeline_NewTrack_1_7517CC3A431015FCC47497B90945C338; // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Flip_Timeline_NewTrack_0_7517CC3A431015FCC47497B90945C338; // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Flip_Timeline__Direction_7517CC3A431015FCC47497B90945C338; // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3251[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Flip_Timeline;                                     // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentInt;                                        // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsCountDown;                                      // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3252[0x3];                                     // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FlipTop;                                           // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    FlipBottom;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    FlipBehindTop;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    FlipBehindBottom;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetInt;                                         // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XNumber;                                           // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IntMax;                                            // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlayRate;                                          // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Distance;                                          // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingTimeline;                                 // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void CheckValidity();
	void FlipDecrement();
	void FlipIncrement();
	void FindIntDistance(int32 Current_Int, int32 Target_Int, int32* Param_Distance);
	void Next_Number(int32 Int, int32* IntOut);
	void Set_Next_Number_on_Mesh(int32 CurrentNumber);
	void SwapStaticmeshOrder();
	void ResetFlapPositionAndMaterials();
	void SetNewInt(int32 NewDigit);
	void FlipToInt(int32 Int);
	void Flip_Timeline__FinishedFunc();
	void Flip_Timeline__UpdateFunc();
	void FlipX2_timeline__FinishedFunc();
	void FlipX2_timeline__UpdateFunc();
	void ReceiveBeginPlay();
	void ResetAll(int32 Number);
	void XsetNumber(int32 Number);
	void FlipLoop();
	void PlayFlip();
	void PlayFlipX2();
	void Flip();
	void ExecuteUbergraph_FlipNumberCountDownMinus01_BP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FlipNumberCountDown-01_BP_C">();
	}
	static class AFlipNumberCountDownMinus01_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFlipNumberCountDownMinus01_BP_C>();
	}
};
static_assert(alignof(AFlipNumberCountDownMinus01_BP_C) == 0x000008, "Wrong alignment on AFlipNumberCountDownMinus01_BP_C");
static_assert(sizeof(AFlipNumberCountDownMinus01_BP_C) == 0x0002E8, "Wrong size on AFlipNumberCountDownMinus01_BP_C");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, UberGraphFrame) == 0x000248, "Member 'AFlipNumberCountDownMinus01_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipNumberRotatingA) == 0x000250, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipNumberRotatingA' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipNumberRotatingB) == 0x000258, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipNumberRotatingB' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipNumberRotatingC) == 0x000260, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipNumberRotatingC' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipNumberRotatingD) == 0x000268, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipNumberRotatingD' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, DefaultSceneRoot) == 0x000270, "Member 'AFlipNumberCountDownMinus01_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipX2_timeline_NewTrack_2_9356492E4A333806349C96BA6B921C69) == 0x000278, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipX2_timeline_NewTrack_2_9356492E4A333806349C96BA6B921C69' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipX2_timeline_NewTrack_1_9356492E4A333806349C96BA6B921C69) == 0x00027C, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipX2_timeline_NewTrack_1_9356492E4A333806349C96BA6B921C69' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipX2_timeline_NewTrack_0_9356492E4A333806349C96BA6B921C69) == 0x000280, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipX2_timeline_NewTrack_0_9356492E4A333806349C96BA6B921C69' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipX2_timeline__Direction_9356492E4A333806349C96BA6B921C69) == 0x000284, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipX2_timeline__Direction_9356492E4A333806349C96BA6B921C69' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipX2_timeline) == 0x000288, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipX2_timeline' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, Flip_Timeline_NewTrack_1_7517CC3A431015FCC47497B90945C338) == 0x000290, "Member 'AFlipNumberCountDownMinus01_BP_C::Flip_Timeline_NewTrack_1_7517CC3A431015FCC47497B90945C338' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, Flip_Timeline_NewTrack_0_7517CC3A431015FCC47497B90945C338) == 0x000294, "Member 'AFlipNumberCountDownMinus01_BP_C::Flip_Timeline_NewTrack_0_7517CC3A431015FCC47497B90945C338' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, Flip_Timeline__Direction_7517CC3A431015FCC47497B90945C338) == 0x000298, "Member 'AFlipNumberCountDownMinus01_BP_C::Flip_Timeline__Direction_7517CC3A431015FCC47497B90945C338' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, Flip_Timeline) == 0x0002A0, "Member 'AFlipNumberCountDownMinus01_BP_C::Flip_Timeline' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, CurrentInt) == 0x0002A8, "Member 'AFlipNumberCountDownMinus01_BP_C::CurrentInt' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, bIsCountDown) == 0x0002AC, "Member 'AFlipNumberCountDownMinus01_BP_C::bIsCountDown' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipTop) == 0x0002B0, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipTop' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipBottom) == 0x0002B8, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipBottom' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipBehindTop) == 0x0002C0, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipBehindTop' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, FlipBehindBottom) == 0x0002C8, "Member 'AFlipNumberCountDownMinus01_BP_C::FlipBehindBottom' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, TargetInt) == 0x0002D0, "Member 'AFlipNumberCountDownMinus01_BP_C::TargetInt' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, XNumber) == 0x0002D4, "Member 'AFlipNumberCountDownMinus01_BP_C::XNumber' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, IntMax) == 0x0002D8, "Member 'AFlipNumberCountDownMinus01_BP_C::IntMax' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, PlayRate) == 0x0002DC, "Member 'AFlipNumberCountDownMinus01_BP_C::PlayRate' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, Distance) == 0x0002E0, "Member 'AFlipNumberCountDownMinus01_BP_C::Distance' has a wrong offset!");
static_assert(offsetof(AFlipNumberCountDownMinus01_BP_C, IsPlayingTimeline) == 0x0002E4, "Member 'AFlipNumberCountDownMinus01_BP_C::IsPlayingTimeline' has a wrong offset!");

}

