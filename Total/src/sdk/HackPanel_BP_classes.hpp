#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HackPanel_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass HackPanel_BP.HackPanel_BP_C
// 0x0198 (0x03E8 - 0x0250)
class AHackPanel_BP_C final : public ARBActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               FlashSparks_PS;                                    // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoundBox;                                          // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_HurtPtc;                                       // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActiveSkillVisionComponent*          LockFrameActiveSkillVision;                        // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   NumberRollMinus01_BP;                              // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHackPanelComponent_BP_C*               RBHackPanel;                                       // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PadLock;                                           // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Anchor;                                            // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightMinus06;                                      // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActiveSkillVisionComponent*          RBActiveSkillVision;                               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightMinus05;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightMinus04;                                      // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightMinus03;                                      // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightMinus02;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightMinus01;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PsychosisGas_PS;                                   // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PadLockBar;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Needle;                                            // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        NeedlePivot;                                       // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      RBSound;                                           // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPlayerCameraLocationComponent*       Camera;                                            // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBOutlineComponent*                    RBOutline;                                         // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Unlocking_UnlockingBar_3669914F43EBD6D8B444ADAD39CA89B2; // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Unlocking__Direction_3669914F43EBD6D8B444ADAD39CA89B2; // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A7[0x3];                                     // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Unlocking;                                         // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonReleaseSoundTimestamp;                       // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A8[0x4];                                     // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           QuadrantMeshes;                                    // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         NumberOfSlice;                                     // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BotDistractorMaxDistance;                          // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AlarmDuration;                                     // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A9[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConfigurableBool                      ShouldTriggerAlarm;                                // 0x0350(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           Lights;                                            // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       LightsMaterial;                                    // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bPauseRefresh;                                     // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32AA[0x7];                                     // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANumberRollMinus01_BP_C*                NumberRoll;                                        // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPhysicalized;                                     // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bHasBeenUnlocked;                                  // 0x03E1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	int32 GetTripLeft(bool bUseDefault);
	void RefreshTripLeft(bool bUseDefault);
	void ResetToDefault();
	class FText GetTripLeftString(bool bUseDefault);
	void RefreshStageLeft(bool bUseDefault);
	void ButtonSound(class URBPasscodeButtonComponent* Button);
	void UserConstructionScript();
	void Unlocking__FinishedFunc();
	void Unlocking__UpdateFunc();
	void Unlocking__Unlocked__EventFunc();
	void ReceiveTick(float DeltaSeconds);
	void RefreshQuadrantMaterials();
	void ReceiveBeginPlay();
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_12_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_14_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_18_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_20_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_22_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_24_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_26_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_28_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_30_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanelComponent_BP_K2Node_ComponentBoundEvent_32_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void Physicalize(const struct FVector& AdditionalImpulse);
	void Event_OnResetStage();
	void BndEvt__RBHackPanel_K2Node_ComponentBoundEvent_0_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanel_BP_RBHackPanel_K2Node_ComponentBoundEvent_1_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanel_BP_RBHackPanel_K2Node_ComponentBoundEvent_2_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void BndEvt__HackPanel_BP_RBActiveSkillVision_K2Node_ComponentBoundEvent_3_ActiveSkillChanged__DelegateSignature(bool Enabled);
	void BndEvt__HackPanel_BP_RBHackPanel_K2Node_ComponentBoundEvent_4_OnPanelEvent__DelegateSignature(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void ExecuteUbergraph_HackPanel_BP(int32 EntryPoint);

	bool GetPingItemName(class FText* OutName) const;
	bool GetPingEnabled(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, bool* OutIsEnabled) const;
	bool GetPlayerPingData(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FPlayerPingData* OutData) const;
	bool GetPlayerPingWorldLocation(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FVector* OutLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HackPanel_BP_C">();
	}
	static class AHackPanel_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHackPanel_BP_C>();
	}
};
static_assert(alignof(AHackPanel_BP_C) == 0x000008, "Wrong alignment on AHackPanel_BP_C");
static_assert(sizeof(AHackPanel_BP_C) == 0x0003E8, "Wrong size on AHackPanel_BP_C");
static_assert(offsetof(AHackPanel_BP_C, UberGraphFrame) == 0x000250, "Member 'AHackPanel_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, FlashSparks_PS) == 0x000258, "Member 'AHackPanel_BP_C::FlashSparks_PS' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, BoundBox) == 0x000260, "Member 'AHackPanel_BP_C::BoundBox' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, Ngr_HurtPtc) == 0x000268, "Member 'AHackPanel_BP_C::Ngr_HurtPtc' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, LockFrameActiveSkillVision) == 0x000270, "Member 'AHackPanel_BP_C::LockFrameActiveSkillVision' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, NumberRollMinus01_BP) == 0x000278, "Member 'AHackPanel_BP_C::NumberRollMinus01_BP' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, RBHackPanel) == 0x000280, "Member 'AHackPanel_BP_C::RBHackPanel' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, PadLock) == 0x000288, "Member 'AHackPanel_BP_C::PadLock' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, Anchor) == 0x000290, "Member 'AHackPanel_BP_C::Anchor' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, LightMinus06) == 0x000298, "Member 'AHackPanel_BP_C::LightMinus06' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, RBActiveSkillVision) == 0x0002A0, "Member 'AHackPanel_BP_C::RBActiveSkillVision' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, LightMinus05) == 0x0002A8, "Member 'AHackPanel_BP_C::LightMinus05' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, LightMinus04) == 0x0002B0, "Member 'AHackPanel_BP_C::LightMinus04' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, LightMinus03) == 0x0002B8, "Member 'AHackPanel_BP_C::LightMinus03' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, LightMinus02) == 0x0002C0, "Member 'AHackPanel_BP_C::LightMinus02' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, LightMinus01) == 0x0002C8, "Member 'AHackPanel_BP_C::LightMinus01' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, PsychosisGas_PS) == 0x0002D0, "Member 'AHackPanel_BP_C::PsychosisGas_PS' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, Root) == 0x0002D8, "Member 'AHackPanel_BP_C::Root' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, PadLockBar) == 0x0002E0, "Member 'AHackPanel_BP_C::PadLockBar' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, SpotLight) == 0x0002E8, "Member 'AHackPanel_BP_C::SpotLight' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, Needle) == 0x0002F0, "Member 'AHackPanel_BP_C::Needle' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, NeedlePivot) == 0x0002F8, "Member 'AHackPanel_BP_C::NeedlePivot' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, RBSound) == 0x000300, "Member 'AHackPanel_BP_C::RBSound' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, Camera) == 0x000308, "Member 'AHackPanel_BP_C::Camera' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, RBOutline) == 0x000310, "Member 'AHackPanel_BP_C::RBOutline' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, Unlocking_UnlockingBar_3669914F43EBD6D8B444ADAD39CA89B2) == 0x000318, "Member 'AHackPanel_BP_C::Unlocking_UnlockingBar_3669914F43EBD6D8B444ADAD39CA89B2' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, Unlocking__Direction_3669914F43EBD6D8B444ADAD39CA89B2) == 0x00031C, "Member 'AHackPanel_BP_C::Unlocking__Direction_3669914F43EBD6D8B444ADAD39CA89B2' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, Unlocking) == 0x000320, "Member 'AHackPanel_BP_C::Unlocking' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, ButtonReleaseSoundTimestamp) == 0x000328, "Member 'AHackPanel_BP_C::ButtonReleaseSoundTimestamp' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, QuadrantMeshes) == 0x000330, "Member 'AHackPanel_BP_C::QuadrantMeshes' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, NumberOfSlice) == 0x000340, "Member 'AHackPanel_BP_C::NumberOfSlice' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, BotDistractorMaxDistance) == 0x000344, "Member 'AHackPanel_BP_C::BotDistractorMaxDistance' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, AlarmDuration) == 0x000348, "Member 'AHackPanel_BP_C::AlarmDuration' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, ShouldTriggerAlarm) == 0x000350, "Member 'AHackPanel_BP_C::ShouldTriggerAlarm' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, Lights) == 0x0003B0, "Member 'AHackPanel_BP_C::Lights' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, LightsMaterial) == 0x0003C0, "Member 'AHackPanel_BP_C::LightsMaterial' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, bPauseRefresh) == 0x0003D0, "Member 'AHackPanel_BP_C::bPauseRefresh' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, NumberRoll) == 0x0003D8, "Member 'AHackPanel_BP_C::NumberRoll' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, bPhysicalized) == 0x0003E0, "Member 'AHackPanel_BP_C::bPhysicalized' has a wrong offset!");
static_assert(offsetof(AHackPanel_BP_C, bHasBeenUnlocked) == 0x0003E1, "Member 'AHackPanel_BP_C::bHasBeenUnlocked' has a wrong offset!");

}

