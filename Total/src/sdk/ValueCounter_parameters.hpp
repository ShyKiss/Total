#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValueCounter

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function ValueCounter.ValueCounter_C.ExecuteUbergraph_ValueCounter
// 0x0008 (0x0008 - 0x0000)
struct ValueCounter_C_ExecuteUbergraph_ValueCounter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ValueCounter_C_ExecuteUbergraph_ValueCounter) == 0x000004, "Wrong alignment on ValueCounter_C_ExecuteUbergraph_ValueCounter");
static_assert(sizeof(ValueCounter_C_ExecuteUbergraph_ValueCounter) == 0x000008, "Wrong size on ValueCounter_C_ExecuteUbergraph_ValueCounter");
static_assert(offsetof(ValueCounter_C_ExecuteUbergraph_ValueCounter, EntryPoint) == 0x000000, "Member 'ValueCounter_C_ExecuteUbergraph_ValueCounter::EntryPoint' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_ExecuteUbergraph_ValueCounter, K2Node_Event_IsDesignTime) == 0x000004, "Member 'ValueCounter_C_ExecuteUbergraph_ValueCounter::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function ValueCounter.ValueCounter_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ValueCounter_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ValueCounter_C_PreConstruct) == 0x000001, "Wrong alignment on ValueCounter_C_PreConstruct");
static_assert(sizeof(ValueCounter_C_PreConstruct) == 0x000001, "Wrong size on ValueCounter_C_PreConstruct");
static_assert(offsetof(ValueCounter_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ValueCounter_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ValueCounter.ValueCounter_C.Setup
// 0x0028 (0x0028 - 0x0000)
struct ValueCounter_C_Setup final
{
public:
	int32                                         BarCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UValueCounterEntry_C*                   CallFunc_Create_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ValueCounter_C_Setup) == 0x000008, "Wrong alignment on ValueCounter_C_Setup");
static_assert(sizeof(ValueCounter_C_Setup) == 0x000028, "Wrong size on ValueCounter_C_Setup");
static_assert(offsetof(ValueCounter_C_Setup, BarCount) == 0x000000, "Member 'ValueCounter_C_Setup::BarCount' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_Setup, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'ValueCounter_C_Setup::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_Setup, Temp_int_Variable) == 0x000008, "Member 'ValueCounter_C_Setup::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_Setup, CallFunc_Create_ReturnValue) == 0x000010, "Member 'ValueCounter_C_Setup::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_Setup, CallFunc_AddChildToUniformGrid_ReturnValue) == 0x000018, "Member 'ValueCounter_C_Setup::CallFunc_AddChildToUniformGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_Setup, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000020, "Member 'ValueCounter_C_Setup::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_Setup, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'ValueCounter_C_Setup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function ValueCounter.ValueCounter_C.Refresh
// 0x0004 (0x0004 - 0x0000)
struct ValueCounter_C_Refresh final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ValueCounter_C_Refresh) == 0x000004, "Wrong alignment on ValueCounter_C_Refresh");
static_assert(sizeof(ValueCounter_C_Refresh) == 0x000004, "Wrong size on ValueCounter_C_Refresh");
static_assert(offsetof(ValueCounter_C_Refresh, NewIndex) == 0x000000, "Member 'ValueCounter_C_Refresh::NewIndex' has a wrong offset!");

// Function ValueCounter.ValueCounter_C.RefreshBar
// 0x0068 (0x0068 - 0x0000)
struct ValueCounter_C_RefreshBar final
{
public:
	bool                                          Highlight;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BarIndex;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default;                             // 0x0010(0x0028)()
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UValueCounterEntry_C*                   K2Node_DynamicCast_AsValue_Counter_Entry;          // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ValueCounter_C_RefreshBar) == 0x000008, "Wrong alignment on ValueCounter_C_RefreshBar");
static_assert(sizeof(ValueCounter_C_RefreshBar) == 0x000068, "Wrong size on ValueCounter_C_RefreshBar");
static_assert(offsetof(ValueCounter_C_RefreshBar, Highlight) == 0x000000, "Member 'ValueCounter_C_RefreshBar::Highlight' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_RefreshBar, BarIndex) == 0x000004, "Member 'ValueCounter_C_RefreshBar::BarIndex' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_RefreshBar, Temp_bool_Variable) == 0x000008, "Member 'ValueCounter_C_RefreshBar::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_RefreshBar, K2Node_Select_Default) == 0x000010, "Member 'ValueCounter_C_RefreshBar::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_RefreshBar, CallFunc_GetAllChildren_ReturnValue) == 0x000038, "Member 'ValueCounter_C_RefreshBar::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_RefreshBar, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000048, "Member 'ValueCounter_C_RefreshBar::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_RefreshBar, CallFunc_Array_Get_Item) == 0x000050, "Member 'ValueCounter_C_RefreshBar::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_RefreshBar, K2Node_DynamicCast_AsValue_Counter_Entry) == 0x000058, "Member 'ValueCounter_C_RefreshBar::K2Node_DynamicCast_AsValue_Counter_Entry' has a wrong offset!");
static_assert(offsetof(ValueCounter_C_RefreshBar, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'ValueCounter_C_RefreshBar::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

