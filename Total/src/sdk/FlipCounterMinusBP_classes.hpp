#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlipCounterMinusBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FlipCounter-BP.FlipCounter-BP_C
// 0x0048 (0x0290 - 0x0248)
class AFlipCounterMinusBP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   Flip_1;                                            // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Flip_10;                                           // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSpotLightComponent*                  RBSpotLight1;                                      // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSpotLightComponent*                  RBSpotLight;                                       // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLightRed;                                     // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLightGreen;                                   // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlipClockMinus02;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCountNumber;                                // 0x0288(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         InitialCountNumber;                                // 0x028C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	int32 GetCounter();
	void Decrement();
	void Increment();
	void OnRep_currentCountNumber();
	void OnRep_initialCountNumber();
	void ResetCount();
	void ReceiveBeginPlay();
	void Event_OnResetStage();
	void Update_Visual();
	void SetCounter(int32 Value);
	void ExecuteUbergraph_FlipCounterMinusBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FlipCounter-BP_C">();
	}
	static class AFlipCounterMinusBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFlipCounterMinusBP_C>();
	}
};
static_assert(alignof(AFlipCounterMinusBP_C) == 0x000008, "Wrong alignment on AFlipCounterMinusBP_C");
static_assert(sizeof(AFlipCounterMinusBP_C) == 0x000290, "Wrong size on AFlipCounterMinusBP_C");
static_assert(offsetof(AFlipCounterMinusBP_C, UberGraphFrame) == 0x000248, "Member 'AFlipCounterMinusBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, Flip_1) == 0x000250, "Member 'AFlipCounterMinusBP_C::Flip_1' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, Flip_10) == 0x000258, "Member 'AFlipCounterMinusBP_C::Flip_10' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, RBSpotLight1) == 0x000260, "Member 'AFlipCounterMinusBP_C::RBSpotLight1' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, RBSpotLight) == 0x000268, "Member 'AFlipCounterMinusBP_C::RBSpotLight' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, PointLightRed) == 0x000270, "Member 'AFlipCounterMinusBP_C::PointLightRed' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, PointLightGreen) == 0x000278, "Member 'AFlipCounterMinusBP_C::PointLightGreen' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, FlipClockMinus02) == 0x000280, "Member 'AFlipCounterMinusBP_C::FlipClockMinus02' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, CurrentCountNumber) == 0x000288, "Member 'AFlipCounterMinusBP_C::CurrentCountNumber' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, InitialCountNumber) == 0x00028C, "Member 'AFlipCounterMinusBP_C::InitialCountNumber' has a wrong offset!");

}

