#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Lobby_NPC_ReagentMinus01_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Lobby_NPC_Reagent-01_BP.Lobby_NPC_Reagent-01_BP_C.GetStateName
// 0x0028 (0x0028 - 0x0000)
struct Lobby_NPC_ReagentMinus01_BP_C_GetStateName final
{
public:
	class FString                                 StateA;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 StateB;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lobby_NPC_ReagentMinus01_BP_C_GetStateName) == 0x000008, "Wrong alignment on Lobby_NPC_ReagentMinus01_BP_C_GetStateName");
static_assert(sizeof(Lobby_NPC_ReagentMinus01_BP_C_GetStateName) == 0x000028, "Wrong size on Lobby_NPC_ReagentMinus01_BP_C_GetStateName");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_GetStateName, StateA) == 0x000000, "Member 'Lobby_NPC_ReagentMinus01_BP_C_GetStateName::StateA' has a wrong offset!");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_GetStateName, StateB) == 0x000010, "Member 'Lobby_NPC_ReagentMinus01_BP_C_GetStateName::StateB' has a wrong offset!");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_GetStateName, ReturnValue) == 0x000020, "Member 'Lobby_NPC_ReagentMinus01_BP_C_GetStateName::ReturnValue' has a wrong offset!");

// Function Lobby_NPC_Reagent-01_BP.Lobby_NPC_Reagent-01_BP_C.ApplySkinTone
// 0x0010 (0x0010 - 0x0000)
struct Lobby_NPC_ReagentMinus01_BP_C_ApplySkinTone final
{
public:
	TArray<class USkeletalMeshComponent*>         K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(Lobby_NPC_ReagentMinus01_BP_C_ApplySkinTone) == 0x000008, "Wrong alignment on Lobby_NPC_ReagentMinus01_BP_C_ApplySkinTone");
static_assert(sizeof(Lobby_NPC_ReagentMinus01_BP_C_ApplySkinTone) == 0x000010, "Wrong size on Lobby_NPC_ReagentMinus01_BP_C_ApplySkinTone");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_ApplySkinTone, K2Node_MakeArray_Array) == 0x000000, "Member 'Lobby_NPC_ReagentMinus01_BP_C_ApplySkinTone::K2Node_MakeArray_Array' has a wrong offset!");

// Function Lobby_NPC_Reagent-01_BP.Lobby_NPC_Reagent-01_BP_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct Lobby_NPC_ReagentMinus01_BP_C_UserConstructionScript final
{
public:
	struct FSingleAnimationPlayData               K2Node_MakeStruct_SingleAnimationPlayData;         // 0x0000(0x0018)(NoDestructor)
};
static_assert(alignof(Lobby_NPC_ReagentMinus01_BP_C_UserConstructionScript) == 0x000008, "Wrong alignment on Lobby_NPC_ReagentMinus01_BP_C_UserConstructionScript");
static_assert(sizeof(Lobby_NPC_ReagentMinus01_BP_C_UserConstructionScript) == 0x000018, "Wrong size on Lobby_NPC_ReagentMinus01_BP_C_UserConstructionScript");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_UserConstructionScript, K2Node_MakeStruct_SingleAnimationPlayData) == 0x000000, "Member 'Lobby_NPC_ReagentMinus01_BP_C_UserConstructionScript::K2Node_MakeStruct_SingleAnimationPlayData' has a wrong offset!");

// Function Lobby_NPC_Reagent-01_BP.Lobby_NPC_Reagent-01_BP_C.SetState
// 0x0001 (0x0001 - 0x0000)
struct Lobby_NPC_ReagentMinus01_BP_C_SetState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lobby_NPC_ReagentMinus01_BP_C_SetState) == 0x000001, "Wrong alignment on Lobby_NPC_ReagentMinus01_BP_C_SetState");
static_assert(sizeof(Lobby_NPC_ReagentMinus01_BP_C_SetState) == 0x000001, "Wrong size on Lobby_NPC_ReagentMinus01_BP_C_SetState");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_SetState, bStateA) == 0x000000, "Member 'Lobby_NPC_ReagentMinus01_BP_C_SetState::bStateA' has a wrong offset!");

// Function Lobby_NPC_Reagent-01_BP.Lobby_NPC_Reagent-01_BP_C.SetShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct Lobby_NPC_ReagentMinus01_BP_C_SetShouldBeIgnoredForLots final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lobby_NPC_ReagentMinus01_BP_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on Lobby_NPC_ReagentMinus01_BP_C_SetShouldBeIgnoredForLots");
static_assert(sizeof(Lobby_NPC_ReagentMinus01_BP_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong size on Lobby_NPC_ReagentMinus01_BP_C_SetShouldBeIgnoredForLots");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_SetShouldBeIgnoredForLots, bValue) == 0x000000, "Member 'Lobby_NPC_ReagentMinus01_BP_C_SetShouldBeIgnoredForLots::bValue' has a wrong offset!");

// Function Lobby_NPC_Reagent-01_BP.Lobby_NPC_Reagent-01_BP_C.PrepareState
// 0x0010 (0x0010 - 0x0000)
struct Lobby_NPC_ReagentMinus01_BP_C_PrepareState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29F4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RandomOwner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lobby_NPC_ReagentMinus01_BP_C_PrepareState) == 0x000008, "Wrong alignment on Lobby_NPC_ReagentMinus01_BP_C_PrepareState");
static_assert(sizeof(Lobby_NPC_ReagentMinus01_BP_C_PrepareState) == 0x000010, "Wrong size on Lobby_NPC_ReagentMinus01_BP_C_PrepareState");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_PrepareState, bStateA) == 0x000000, "Member 'Lobby_NPC_ReagentMinus01_BP_C_PrepareState::bStateA' has a wrong offset!");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_PrepareState, RandomOwner) == 0x000008, "Member 'Lobby_NPC_ReagentMinus01_BP_C_PrepareState::RandomOwner' has a wrong offset!");

// Function Lobby_NPC_Reagent-01_BP.Lobby_NPC_Reagent-01_BP_C.ExecuteUbergraph_Lobby_NPC_Reagent-01_BP
// 0x0010 (0x0010 - 0x0000)
struct Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bStateA_1;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bValue;                               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bStateA;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29F5[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_randomOwner;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP) == 0x000008, "Wrong alignment on Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP");
static_assert(sizeof(Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP) == 0x000010, "Wrong size on Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP, EntryPoint) == 0x000000, "Member 'Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP, K2Node_Event_bStateA_1) == 0x000004, "Member 'Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP::K2Node_Event_bStateA_1' has a wrong offset!");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP, K2Node_Event_bValue) == 0x000005, "Member 'Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP::K2Node_Event_bValue' has a wrong offset!");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP, K2Node_Event_bStateA) == 0x000006, "Member 'Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP::K2Node_Event_bStateA' has a wrong offset!");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP, K2Node_Event_randomOwner) == 0x000008, "Member 'Lobby_NPC_ReagentMinus01_BP_C_ExecuteUbergraph_Lobby_NPC_ReagentMinus01_BP::K2Node_Event_randomOwner' has a wrong offset!");

// Function Lobby_NPC_Reagent-01_BP.Lobby_NPC_Reagent-01_BP_C.IsStateA
// 0x0002 (0x0002 - 0x0000)
struct Lobby_NPC_ReagentMinus01_BP_C_IsStateA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsStateA_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lobby_NPC_ReagentMinus01_BP_C_IsStateA) == 0x000001, "Wrong alignment on Lobby_NPC_ReagentMinus01_BP_C_IsStateA");
static_assert(sizeof(Lobby_NPC_ReagentMinus01_BP_C_IsStateA) == 0x000002, "Wrong size on Lobby_NPC_ReagentMinus01_BP_C_IsStateA");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_IsStateA, ReturnValue) == 0x000000, "Member 'Lobby_NPC_ReagentMinus01_BP_C_IsStateA::ReturnValue' has a wrong offset!");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_IsStateA, CallFunc_BP_IsStateA_ReturnValue) == 0x000001, "Member 'Lobby_NPC_ReagentMinus01_BP_C_IsStateA::CallFunc_BP_IsStateA_ReturnValue' has a wrong offset!");

// Function Lobby_NPC_Reagent-01_BP.Lobby_NPC_Reagent-01_BP_C.ShouldBeIgnoredForLots
// 0x0002 (0x0002 - 0x0000)
struct Lobby_NPC_ReagentMinus01_BP_C_ShouldBeIgnoredForLots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_ShouldBeIgnoredForLots_ReturnValue;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Lobby_NPC_ReagentMinus01_BP_C_ShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on Lobby_NPC_ReagentMinus01_BP_C_ShouldBeIgnoredForLots");
static_assert(sizeof(Lobby_NPC_ReagentMinus01_BP_C_ShouldBeIgnoredForLots) == 0x000002, "Wrong size on Lobby_NPC_ReagentMinus01_BP_C_ShouldBeIgnoredForLots");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_ShouldBeIgnoredForLots, ReturnValue) == 0x000000, "Member 'Lobby_NPC_ReagentMinus01_BP_C_ShouldBeIgnoredForLots::ReturnValue' has a wrong offset!");
static_assert(offsetof(Lobby_NPC_ReagentMinus01_BP_C_ShouldBeIgnoredForLots, CallFunc_BP_ShouldBeIgnoredForLots_ReturnValue) == 0x000001, "Member 'Lobby_NPC_ReagentMinus01_BP_C_ShouldBeIgnoredForLots::CallFunc_BP_ShouldBeIgnoredForLots_ReturnValue' has a wrong offset!");

}

