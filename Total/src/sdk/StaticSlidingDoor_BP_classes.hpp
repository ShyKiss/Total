#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StaticSlidingDoor_BP

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass StaticSlidingDoor_BP.StaticSlidingDoor_BP_C
// 0x0030 (0x0278 - 0x0248)
class AStaticSlidingDoor_BP_C final : public AActor
{
public:
	class UStaticMeshComponent*                   SasDoorMinus02b;                                   // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SasDoorMinus01a;                                   // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RollingDoorFrameMinus01;                           // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SasDoorMinus02;                                    // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SasDoorMinus01;                                    // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"StaticSlidingDoor_BP_C">();
	}
	static class AStaticSlidingDoor_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStaticSlidingDoor_BP_C>();
	}
};
static_assert(alignof(AStaticSlidingDoor_BP_C) == 0x000008, "Wrong alignment on AStaticSlidingDoor_BP_C");
static_assert(sizeof(AStaticSlidingDoor_BP_C) == 0x000278, "Wrong size on AStaticSlidingDoor_BP_C");
static_assert(offsetof(AStaticSlidingDoor_BP_C, SasDoorMinus02b) == 0x000248, "Member 'AStaticSlidingDoor_BP_C::SasDoorMinus02b' has a wrong offset!");
static_assert(offsetof(AStaticSlidingDoor_BP_C, SasDoorMinus01a) == 0x000250, "Member 'AStaticSlidingDoor_BP_C::SasDoorMinus01a' has a wrong offset!");
static_assert(offsetof(AStaticSlidingDoor_BP_C, RollingDoorFrameMinus01) == 0x000258, "Member 'AStaticSlidingDoor_BP_C::RollingDoorFrameMinus01' has a wrong offset!");
static_assert(offsetof(AStaticSlidingDoor_BP_C, SasDoorMinus02) == 0x000260, "Member 'AStaticSlidingDoor_BP_C::SasDoorMinus02' has a wrong offset!");
static_assert(offsetof(AStaticSlidingDoor_BP_C, SasDoorMinus01) == 0x000268, "Member 'AStaticSlidingDoor_BP_C::SasDoorMinus01' has a wrong offset!");
static_assert(offsetof(AStaticSlidingDoor_BP_C, Root) == 0x000270, "Member 'AStaticSlidingDoor_BP_C::Root' has a wrong offset!");

}

