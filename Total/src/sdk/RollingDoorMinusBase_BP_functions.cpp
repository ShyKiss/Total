#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RollingDoorMinusBase_BP

#include "Basic.hpp"

#include "RollingDoorMinusBase_BP_classes.hpp"
#include "RollingDoorMinusBase_BP_parameters.hpp"


namespace SDK
{

// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ConstructRepulsion_Editor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::ConstructRepulsion_Editor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "ConstructRepulsion_Editor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.TryResetElectricalSwitches
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::TryResetElectricalSwitches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "TryResetElectricalSwitches");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetLightingSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::SetLightingSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetLightingSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.RefreshTimedLightSelectorState
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::RefreshTimedLightSelectorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "RefreshTimedLightSelectorState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.DisplayTimeTimers
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::DisplayTimeTimers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "DisplayTimeTimers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Wrap Time Inital Offset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::Wrap_Time_Inital_Offset(float In, float* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Wrap Time Inital Offset");

	Params::RollingDoorMinusBase_BP_C_Wrap_Time_Inital_Offset Parms{};

	Parms.In = In;

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.AdjustInitialTimedOffset
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::AdjustInitialTimedOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "AdjustInitialTimedOffset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ConstructRepulsion
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::ConstructRepulsion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "ConstructRepulsion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetShadowMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseRealDoorShadow                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARollingDoorMinusBase_BP_C::SetShadowMode(bool UseRealDoorShadow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetShadowMode");

	Params::RollingDoorMinusBase_BP_C_SetShadowMode Parms{};

	Parms.UseRealDoorShadow = UseRealDoorShadow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_SoundDetector_Front
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_SoundDetector_Front()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_SoundDetector_Front");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetCollisions
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::SetCollisions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetCollisions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetSoundConnectors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::SetSoundConnectors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetSoundConnectors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetGateAnimations
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::SetGateAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetGateAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetGateVisuals
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::SetGateVisuals()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetGateVisuals");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Set Current Delay
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Set_Current_Delay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Set Current Delay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetMeshOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::GetMeshOffset(struct FVector* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "GetMeshOffset");

	Params::RollingDoorMinusBase_BP_C_GetMeshOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetTutorials
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::SetTutorials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetTutorials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetElectricalSwitchTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bIsFront                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor)

void ARollingDoorMinusBase_BP_C::GetElectricalSwitchTransform(bool bIsFront, struct FTransform* OutTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "GetElectricalSwitchTransform");

	Params::RollingDoorMinusBase_BP_C_GetElectricalSwitchTransform Parms{};

	Parms.bIsFront = bIsFront;

	UObject::ProcessEvent(Func, &Parms);

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetUnlockTimersFrozen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARollingDoorMinusBase_BP_C::SetUnlockTimersFrozen(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetUnlockTimersFrozen");

	Params::RollingDoorMinusBase_BP_C_SetUnlockTimersFrozen Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetUnlockTimersEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARollingDoorMinusBase_BP_C::SetUnlockTimersEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetUnlockTimersEnabled");

	Params::RollingDoorMinusBase_BP_C_SetUnlockTimersEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Get Unlockable Duration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Duration                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::Get_Unlockable_Duration(float* Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Get Unlockable Duration");

	Params::RollingDoorMinusBase_BP_C_Get_Unlockable_Duration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Duration != nullptr)
		*Duration = Parms.Duration;
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.StartUnlockTimers
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::StartUnlockTimers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "StartUnlockTimers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ResetUnlockSwitchCompletion
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::ResetUnlockSwitchCompletion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "ResetUnlockSwitchCompletion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.UpdateUnlockSwitchInteractivity
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::UpdateUnlockSwitchInteractivity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "UpdateUnlockSwitchInteractivity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_LightSelectorState
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_LightSelectorState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_LightSelectorState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.UpdateInteractiveSwitch
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C*Param_Instigator                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C*Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::UpdateInteractiveSwitch(class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* Param_Instigator, class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "UpdateInteractiveSwitch");

	Params::RollingDoorMinusBase_BP_C_UpdateInteractiveSwitch Parms{};

	Parms.Param_Instigator = Param_Instigator;
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_ElectricalSwitch_Back
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_ElectricalSwitch_Back()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_ElectricalSwitch_Back");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_ElectricalSwitch_Front
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_ElectricalSwitch_Front()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_ElectricalSwitch_Front");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_LightSelectorBack
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_LightSelectorBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_LightSelectorBack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_LightSelectorFront
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_LightSelectorFront()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_LightSelectorFront");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_AnimationDurationSeconds
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_AnimationDurationSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_AnimationDurationSeconds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_ToasterDetector_Front
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_ToasterDetector_Front()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_ToasterDetector_Front");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_passagesCounter_Back
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_passagesCounter_Back()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_passagesCounter_Back");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnRep_PassagesCounter_Front
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnRep_PassagesCounter_Front()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnRep_PassagesCounter_Front");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.InitVariatorType
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::InitVariatorType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "InitVariatorType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ClearVariatorTypes
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::ClearVariatorTypes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "ClearVariatorTypes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.IsOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsOpen                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARollingDoorMinusBase_BP_C::IsOpen(bool* Param_IsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "IsOpen");

	Params::RollingDoorMinusBase_BP_C_IsOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsOpen != nullptr)
		*Param_IsOpen = Parms.Param_IsOpen;
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.TryRefreshSoundConnector
// (Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::TryRefreshSoundConnector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "TryRefreshSoundConnector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnTimelineUpdate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Ratio                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::OnTimelineUpdate(float Ratio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnTimelineUpdate");

	Params::RollingDoorMinusBase_BP_C_OnTimelineUpdate Parms{};

	Parms.Ratio = Ratio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.AnimationTimeline__FinishedFunc
// (BlueprintEvent)

void ARollingDoorMinusBase_BP_C::AnimationTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "AnimationTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.AnimationTimeline__UpdateFunc
// (BlueprintEvent)

void ARollingDoorMinusBase_BP_C::AnimationTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "AnimationTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.AnimationTimeline__AllowNavMesh__EventFunc
// (BlueprintEvent)

void ARollingDoorMinusBase_BP_C::AnimationTimeline__AllowNavMesh__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "AnimationTimeline__AllowNavMesh__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.AnimationTimeline__NewTrack_0__EventFunc
// (BlueprintEvent)

void ARollingDoorMinusBase_BP_C::AnimationTimeline__NewTrack_0__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "AnimationTimeline__NewTrack_0__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnOperatableProgressChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class UObject*                          Operatable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OldProgress                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentProgress                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSnap                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARollingDoorMinusBase_BP_C::Event_OnOperatableProgressChanged(class UObject* Operatable, float OldProgress, float CurrentProgress, bool bSnap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_OnOperatableProgressChanged");

	Params::RollingDoorMinusBase_BP_C_Event_OnOperatableProgressChanged Parms{};

	Parms.Operatable = Operatable;
	Parms.OldProgress = OldProgress;
	Parms.CurrentProgress = CurrentProgress;
	Parms.bSnap = bSnap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ResetDoor
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::ResetDoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "ResetDoor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_SnapToState
// (Event, Public, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Event_SnapToState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_SnapToState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnTriggerSequenceStarted
// (Event, Public, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Event_OnTriggerSequenceStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_OnTriggerSequenceStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnTriggered
// (Event, Public, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Event_OnTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_OnTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnUntriggered
// (Event, Public, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Event_OnUntriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_OnUntriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnUntriggerSequenceStarted
// (Event, Public, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Event_OnUntriggerSequenceStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_OnUntriggerSequenceStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnResetStage
// (Event, Public, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Event_OnResetStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_OnResetStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class ARBPlayer*                        Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature(class ARBPlayer* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature");

	Params::RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_0_OnPlayerTriggerVolumeActorEvent__DelegateSignature Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class ARBPlayer*                        Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature(class ARBPlayer* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature");

	Params::RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_3_OnPlayerTriggerVolumeActorEvent__DelegateSignature Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class ARBPlayer*                        Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature(class ARBPlayer* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature");

	Params::RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Front_K2Node_ComponentBoundEvent_4_OnPlayerTriggerVolumeActorEvent__DelegateSignature Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class ARBPlayer*                        Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature(class ARBPlayer* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature");

	Params::RollingDoorMinusBase_BP_C_BndEvt__RBPlayerTrigger_Back_K2Node_ComponentBoundEvent_5_OnPlayerTriggerVolumeActorEvent__DelegateSignature Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.RandomTimedOpenClosed
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::RandomTimedOpenClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "RandomTimedOpenClosed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "ReceiveEndPlay");

	Params::RollingDoorMinusBase_BP_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.StartDelay
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::StartDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "StartDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnCurrentVariatorTypeChanged
// (Event, Public, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Event_OnCurrentVariatorTypeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_OnCurrentVariatorTypeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnInteractorChange
// (BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::OnInteractorChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnInteractorChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.BindSwitchEvents
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C*SWITCH                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::BindSwitchEvents(class AElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C* SWITCH)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "BindSwitchEvents");

	Params::RollingDoorMinusBase_BP_C_BindSwitchEvents Parms{};

	Parms.SWITCH = SWITCH;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnUnlockCompleted
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsOn                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ARBOperatable*                    Operatable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::OnUnlockCompleted(bool bIsOn, class ARBOperatable* Operatable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnUnlockCompleted");

	Params::RollingDoorMinusBase_BP_C_OnUnlockCompleted Parms{};

	Parms.bIsOn = bIsOn;
	Parms.Operatable = Operatable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnVariatorLogicEnabledChanged
// (Event, Public, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Event_OnVariatorLogicEnabledChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_OnVariatorLogicEnabledChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.OnReplacedDoor
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARBDoor*                          Door                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::OnReplacedDoor(class ARBDoor* Door)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "OnReplacedDoor");

	Params::RollingDoorMinusBase_BP_C_OnReplacedDoor Parms{};

	Parms.Door = Door;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Event_OnBlockableStateChanged
// (Event, Public, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::Event_OnBlockableStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Event_OnBlockableStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.newtimeTest
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::NewtimeTest(float NewTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "newtimeTest");

	Params::RollingDoorMinusBase_BP_C_NewtimeTest Parms{};

	Parms.NewTime = NewTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.Sound Detected
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerSoundDetectionState              OldState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerSoundDetectionState              NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::Sound_Detected(EPlayerSoundDetectionState OldState, EPlayerSoundDetectionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "Sound Detected");

	Params::RollingDoorMinusBase_BP_C_Sound_Detected Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.MultiCastDisplayInitialTimer
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::MultiCastDisplayInitialTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "MultiCastDisplayInitialTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.SetVariatorActorsEnabled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ARollingDoorMinusBase_BP_C::SetVariatorActorsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "SetVariatorActorsEnabled");

	Params::RollingDoorMinusBase_BP_C_SetVariatorActorsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.ExecuteUbergraph_RollingDoor-Base_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::ExecuteUbergraph_RollingDoorMinusBase_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "ExecuteUbergraph_RollingDoor-Base_BP");

	Params::RollingDoorMinusBase_BP_C_ExecuteUbergraph_RollingDoorMinusBase_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.AnimationCompletedBackward__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::AnimationCompletedBackward__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "AnimationCompletedBackward__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.AnimationCompletedForward__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ARollingDoorMinusBase_BP_C::AnimationCompletedForward__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "AnimationCompletedForward__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetTimedOpenDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARollingDoorMinusBase_BP_C::GetTimedOpenDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "GetTimedOpenDuration");

	Params::RollingDoorMinusBase_BP_C_GetTimedOpenDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetTimedClosedDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARollingDoorMinusBase_BP_C::GetTimedClosedDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "GetTimedClosedDuration");

	Params::RollingDoorMinusBase_BP_C_GetTimedClosedDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetCurrentTimedDelay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Delay                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ARollingDoorMinusBase_BP_C::GetCurrentTimedDelay(float* Delay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "GetCurrentTimedDelay");

	Params::RollingDoorMinusBase_BP_C_GetCurrentTimedDelay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Delay != nullptr)
		*Delay = Parms.Delay;
}


// Function RollingDoor-Base_BP.RollingDoor-Base_BP_C.GetTimedLoopFullDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ARollingDoorMinusBase_BP_C::GetTimedLoopFullDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RollingDoor-Base_BP_C", "GetTimedLoopFullDuration");

	Params::RollingDoorMinusBase_BP_C_GetTimedLoopFullDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

