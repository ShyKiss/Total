#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleWallMinus01_BP

#include "Basic.hpp"

#include "ModuleMeshData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MeshPopulate_Parent_classes.hpp"
#include "ModuleMeshDataMinus02_structs.hpp"
#include "WallSide_Enu_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SimpleWall-01_BP.SimpleWall-01_BP_C
// 0x0098 (0x0468 - 0x03D0)
class ASimpleWallMinus01_BP_C : public AMeshPopulate_Parent_C
{
public:
	bool                                          FinishWithInbetween;                               // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumOfInBetween;                                    // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentInbetweenSize;                              // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBottomMolding;                                  // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseBottomMoldingInv;                               // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseUpperMolding;                                   // 0x03DE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseUpperMoldingInv;                                // 0x03DF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FModuleMeshDataMinus02>         WallMeshes;                                        // 0x03E0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshData>                BottomMeshes;                                      // 0x03F0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshData>                UpperMeshes;                                       // 0x0400(0x0010)(Edit, BlueprintVisible)
	float                                         InbetweenSizeTotal;                                // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondTotal;                                       // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTopPlank;                                       // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseFullFrame;                                      // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseWallB;                                          // 0x041A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseWallA;                                          // 0x041B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bActiveState;                                      // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41D[0x3];                                      // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExtremeTopZ;                                       // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModuleMeshData>                TopPlank;                                          // 0x0428(0x0010)(Edit, BlueprintVisible)
	bool                                          UseOverwriteOnlyOnWall;                            // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_439[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxScaledSecondSide;                               // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GapSize;                                           // 0x0440(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TotalGapSize;                                      // 0x044C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WallOffset;                                        // 0x0458(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWallSide_Enu                                 WallA;                                             // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWallSide_Enu                                 WallB;                                             // 0x0465(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNoCollisionForBottomMeshes;                       // 0x0466(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNoCollisionForUpperMeshes;                        // 0x0467(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();
	void AddAutomaticBoxCollisionExcludedStaticMeshes();
	void ExcludeStructForAutomaticCollision(TArray<struct FModuleMeshData>& Array);
	void NewFunction_0_0();
	bool GetStateName(class FString* StateA, class FString* StateB);
	void SetVariable();

	bool IsStateA() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SimpleWall-01_BP_C">();
	}
	static class ASimpleWallMinus01_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASimpleWallMinus01_BP_C>();
	}
};
static_assert(alignof(ASimpleWallMinus01_BP_C) == 0x000008, "Wrong alignment on ASimpleWallMinus01_BP_C");
static_assert(sizeof(ASimpleWallMinus01_BP_C) == 0x000468, "Wrong size on ASimpleWallMinus01_BP_C");
static_assert(offsetof(ASimpleWallMinus01_BP_C, FinishWithInbetween) == 0x0003D0, "Member 'ASimpleWallMinus01_BP_C::FinishWithInbetween' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, NumOfInBetween) == 0x0003D4, "Member 'ASimpleWallMinus01_BP_C::NumOfInBetween' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, CurrentInbetweenSize) == 0x0003D8, "Member 'ASimpleWallMinus01_BP_C::CurrentInbetweenSize' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UseBottomMolding) == 0x0003DC, "Member 'ASimpleWallMinus01_BP_C::UseBottomMolding' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UseBottomMoldingInv) == 0x0003DD, "Member 'ASimpleWallMinus01_BP_C::UseBottomMoldingInv' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UseUpperMolding) == 0x0003DE, "Member 'ASimpleWallMinus01_BP_C::UseUpperMolding' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UseUpperMoldingInv) == 0x0003DF, "Member 'ASimpleWallMinus01_BP_C::UseUpperMoldingInv' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, WallMeshes) == 0x0003E0, "Member 'ASimpleWallMinus01_BP_C::WallMeshes' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, BottomMeshes) == 0x0003F0, "Member 'ASimpleWallMinus01_BP_C::BottomMeshes' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UpperMeshes) == 0x000400, "Member 'ASimpleWallMinus01_BP_C::UpperMeshes' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, InbetweenSizeTotal) == 0x000410, "Member 'ASimpleWallMinus01_BP_C::InbetweenSizeTotal' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, SecondTotal) == 0x000414, "Member 'ASimpleWallMinus01_BP_C::SecondTotal' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UseTopPlank) == 0x000418, "Member 'ASimpleWallMinus01_BP_C::UseTopPlank' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UseFullFrame) == 0x000419, "Member 'ASimpleWallMinus01_BP_C::UseFullFrame' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UseWallB) == 0x00041A, "Member 'ASimpleWallMinus01_BP_C::UseWallB' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UseWallA) == 0x00041B, "Member 'ASimpleWallMinus01_BP_C::UseWallA' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, bActiveState) == 0x00041C, "Member 'ASimpleWallMinus01_BP_C::bActiveState' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, ExtremeTopZ) == 0x000420, "Member 'ASimpleWallMinus01_BP_C::ExtremeTopZ' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, TopPlank) == 0x000428, "Member 'ASimpleWallMinus01_BP_C::TopPlank' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, UseOverwriteOnlyOnWall) == 0x000438, "Member 'ASimpleWallMinus01_BP_C::UseOverwriteOnlyOnWall' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, MaxScaledSecondSide) == 0x00043C, "Member 'ASimpleWallMinus01_BP_C::MaxScaledSecondSide' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, GapSize) == 0x000440, "Member 'ASimpleWallMinus01_BP_C::GapSize' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, TotalGapSize) == 0x00044C, "Member 'ASimpleWallMinus01_BP_C::TotalGapSize' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, WallOffset) == 0x000458, "Member 'ASimpleWallMinus01_BP_C::WallOffset' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, WallA) == 0x000464, "Member 'ASimpleWallMinus01_BP_C::WallA' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, WallB) == 0x000465, "Member 'ASimpleWallMinus01_BP_C::WallB' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, bNoCollisionForBottomMeshes) == 0x000466, "Member 'ASimpleWallMinus01_BP_C::bNoCollisionForBottomMeshes' has a wrong offset!");
static_assert(offsetof(ASimpleWallMinus01_BP_C, bNoCollisionForUpperMeshes) == 0x000467, "Member 'ASimpleWallMinus01_BP_C::bNoCollisionForUpperMeshes' has a wrong offset!");

}

