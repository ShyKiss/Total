#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MateHealthBarElement

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "OPP_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass MateHealthBarElement.MateHealthBarElement_C
// 0x0060 (0x02C0 - 0x0260)
class UMateHealthBarElement_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Bracket;                                           // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInvalidationBox*                       InvalidationBox_MateHealthBarElement;              // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BracketMaterial;                                   // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TweenInProgress;                                   // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetValue;                                       // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OriginalValue;                                     // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             TweenCompleted;                                    // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Increasing;                                        // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BleedoutCompleted;                                 // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         BarHeight;                                         // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayedHealthEvent;                                // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TweenCompleted__DelegateSignature();
	void BleedoutCompleted__DelegateSignature();
	void ExecuteUbergraph_MateHealthBarElement(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	void Start_New_Tween(float NewValue, bool StartsOutsideBracket);
	void UpdateTween();
	void UpdateTints(bool IsInBleedout);
	void SetBarHeight(float DesiredSize_Y);
	void SetEntireBar(bool Fill);
	void ForceValue(float NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MateHealthBarElement_C">();
	}
	static class UMateHealthBarElement_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMateHealthBarElement_C>();
	}
};
static_assert(alignof(UMateHealthBarElement_C) == 0x000008, "Wrong alignment on UMateHealthBarElement_C");
static_assert(sizeof(UMateHealthBarElement_C) == 0x0002C0, "Wrong size on UMateHealthBarElement_C");
static_assert(offsetof(UMateHealthBarElement_C, UberGraphFrame) == 0x000260, "Member 'UMateHealthBarElement_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, Bracket) == 0x000268, "Member 'UMateHealthBarElement_C::Bracket' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, InvalidationBox_MateHealthBarElement) == 0x000270, "Member 'UMateHealthBarElement_C::InvalidationBox_MateHealthBarElement' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, BracketMaterial) == 0x000278, "Member 'UMateHealthBarElement_C::BracketMaterial' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, TweenInProgress) == 0x000280, "Member 'UMateHealthBarElement_C::TweenInProgress' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, TargetValue) == 0x000284, "Member 'UMateHealthBarElement_C::TargetValue' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, OriginalValue) == 0x000288, "Member 'UMateHealthBarElement_C::OriginalValue' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, TweenCompleted) == 0x000290, "Member 'UMateHealthBarElement_C::TweenCompleted' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, Increasing) == 0x0002A0, "Member 'UMateHealthBarElement_C::Increasing' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, BleedoutCompleted) == 0x0002A8, "Member 'UMateHealthBarElement_C::BleedoutCompleted' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, BarHeight) == 0x0002B8, "Member 'UMateHealthBarElement_C::BarHeight' has a wrong offset!");
static_assert(offsetof(UMateHealthBarElement_C, DelayedHealthEvent) == 0x0002BC, "Member 'UMateHealthBarElement_C::DelayedHealthEvent' has a wrong offset!");

}

