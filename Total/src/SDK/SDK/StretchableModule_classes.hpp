#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StretchableModule

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "LockAxis_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "StretchableLibraryMode_structs.hpp"
#include "StretchableModulesPartsRandomization_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass StretchableModule.StretchableModule_C
// 0x0118 (0x0348 - 0x0230)
class AStretchableModule_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0240(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxZDistance;                                      // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxYDistance;                                      // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxXDistance;                                      // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TileX;                                             // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TileY;                                             // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TileZ;                                             // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELockAxis                                     LockAxis;                                          // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridPrecision;                                     // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialOffset;                                     // 0x026C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitialRotation;                                   // 0x0278(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PreviousAnchor;                                    // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousActorPos;                                  // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMaterialOverride;                               // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceConstant*>      Material;                                          // 0x0298(0x0010)(Edit, BlueprintVisible)
	class UStaticMesh*                            StaticMesh;                                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELockAxis                                     PreviousLockAxis;                                  // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideLightmapResolution;                        // 0x02B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LightmapRes;                                       // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Pivot;                                             // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaterialTiling;                                    // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CollisionProfileName;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FStretchableModulesPartsRandomization> MeshLibrary;                                       // 0x02D0(0x0010)(Edit, BlueprintVisible)
	class UStaticMesh*                            CurrentStaticMesh;                                 // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFirstAssetRescaling;                            // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECanBeCharacterBase                           CanStepUpOn;                                       // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Mobility;                                          // 0x02EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EB[0x1];                                      // 0x02EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomMeshSeed;                                    // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumComponents;                                     // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           StaticmeshComponents;                              // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          UseLibraryMaterialOverride;                        // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    LibrarySpecialMeshes;                              // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MinStretchRatio;                                   // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DataTable;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStretchableLibraryMode                       MeshLibraryMode;                                   // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseMeshPivotPointForBounds;                       // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLightingChannels                      LightChannels;                                     // 0x0332(0x0001)(Edit, BlueprintVisible, NoDestructor)
	uint8                                         Pad_333[0x1];                                      // 0x0333(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DynamicData;                                       // 0x0334(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CastShadows;                                       // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void MoveAnchorGizmo();
	void AssingDynMatData();
	void AssignLightChannel();
	void RunConstructionScript();
	void CreateLibraryMeshes();
	void ShuffleSpecialMeshesSeed(TArray<class UStaticMesh*>& _Staticmeshes, TArray<class UStaticMesh*>* SuffledSM);
	void AssignPerLibMeshMaterialOverride();
	void ShuffleWithSeed();
	void GetStandardStaticmeshLibrary(TArray<class UStaticMesh*>* _PossibleMeshLibrary);
	void GetSpecialStaticmeshLibrary(TArray<class UStaticMesh*>* _PossibleMeshLibrary);
	void ReassignStaticMeshFromLibrary();
	void SetStaticMeshComponent();
	void GetScale(ELockAxis Axis, float CurrentModuleScale, bool UsingTiling, float* Scale);
	void GetOffset(ELockAxis Axis, float CurrentModuleScale, int32 MaxDistance, int32 NumLoop, bool IsTiling, float* Offset);
	void SetIsTiling(bool* IsTiling);
	void GetFinalTranslation(bool Tiling, float* X, float* Y, float* Z);
	void SetMaterialsToTriPlanarMapping();
	void FixTilingForAxisUsage();
	void CheckForPreviousLockAxis();
	void AddStaticMeshAtLocation(float Relative_Transform_Scale_X, float Relative_Transform_Scale_Z, float Relative_Transform_Scale_Y, float Relative_Transform_Location_X, float Relative_Transform_Location_Y, float Relative_Transform_Location_Z);
	void CreateComponents();
	void LimitGizmo();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_StretchableModule(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"StretchableModule_C">();
	}
	static class AStretchableModule_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AStretchableModule_C>();
	}
};
static_assert(alignof(AStretchableModule_C) == 0x000008, "Wrong alignment on AStretchableModule_C");
static_assert(sizeof(AStretchableModule_C) == 0x000348, "Wrong size on AStretchableModule_C");
static_assert(offsetof(AStretchableModule_C, UberGraphFrame) == 0x000230, "Member 'AStretchableModule_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, DefaultSceneRoot) == 0x000238, "Member 'AStretchableModule_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, End) == 0x000240, "Member 'AStretchableModule_C::End' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, MaxZDistance) == 0x00024C, "Member 'AStretchableModule_C::MaxZDistance' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, MaxYDistance) == 0x000250, "Member 'AStretchableModule_C::MaxYDistance' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, MaxXDistance) == 0x000254, "Member 'AStretchableModule_C::MaxXDistance' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, TileX) == 0x000258, "Member 'AStretchableModule_C::TileX' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, TileY) == 0x00025C, "Member 'AStretchableModule_C::TileY' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, TileZ) == 0x000260, "Member 'AStretchableModule_C::TileZ' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, LockAxis) == 0x000264, "Member 'AStretchableModule_C::LockAxis' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, GridPrecision) == 0x000268, "Member 'AStretchableModule_C::GridPrecision' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, InitialOffset) == 0x00026C, "Member 'AStretchableModule_C::InitialOffset' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, InitialRotation) == 0x000278, "Member 'AStretchableModule_C::InitialRotation' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, PreviousAnchor) == 0x000284, "Member 'AStretchableModule_C::PreviousAnchor' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, PreviousActorPos) == 0x000288, "Member 'AStretchableModule_C::PreviousActorPos' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, UseMaterialOverride) == 0x000294, "Member 'AStretchableModule_C::UseMaterialOverride' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, Material) == 0x000298, "Member 'AStretchableModule_C::Material' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, StaticMesh) == 0x0002A8, "Member 'AStretchableModule_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, PreviousLockAxis) == 0x0002B0, "Member 'AStretchableModule_C::PreviousLockAxis' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, OverrideLightmapResolution) == 0x0002B1, "Member 'AStretchableModule_C::OverrideLightmapResolution' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, LightmapRes) == 0x0002B4, "Member 'AStretchableModule_C::LightmapRes' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, Pivot) == 0x0002B8, "Member 'AStretchableModule_C::Pivot' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, MaterialTiling) == 0x0002C4, "Member 'AStretchableModule_C::MaterialTiling' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, CollisionProfileName) == 0x0002C8, "Member 'AStretchableModule_C::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, MeshLibrary) == 0x0002D0, "Member 'AStretchableModule_C::MeshLibrary' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, CurrentStaticMesh) == 0x0002E0, "Member 'AStretchableModule_C::CurrentStaticMesh' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, UseFirstAssetRescaling) == 0x0002E8, "Member 'AStretchableModule_C::UseFirstAssetRescaling' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, CanStepUpOn) == 0x0002E9, "Member 'AStretchableModule_C::CanStepUpOn' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, Mobility) == 0x0002EA, "Member 'AStretchableModule_C::Mobility' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, RandomMeshSeed) == 0x0002EC, "Member 'AStretchableModule_C::RandomMeshSeed' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, NumComponents) == 0x0002F0, "Member 'AStretchableModule_C::NumComponents' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, StaticmeshComponents) == 0x0002F8, "Member 'AStretchableModule_C::StaticmeshComponents' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, UseLibraryMaterialOverride) == 0x000308, "Member 'AStretchableModule_C::UseLibraryMaterialOverride' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, LibrarySpecialMeshes) == 0x000310, "Member 'AStretchableModule_C::LibrarySpecialMeshes' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, MinStretchRatio) == 0x000320, "Member 'AStretchableModule_C::MinStretchRatio' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, DataTable) == 0x000328, "Member 'AStretchableModule_C::DataTable' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, MeshLibraryMode) == 0x000330, "Member 'AStretchableModule_C::MeshLibraryMode' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, bUseMeshPivotPointForBounds) == 0x000331, "Member 'AStretchableModule_C::bUseMeshPivotPointForBounds' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, LightChannels) == 0x000332, "Member 'AStretchableModule_C::LightChannels' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, DynamicData) == 0x000334, "Member 'AStretchableModule_C::DynamicData' has a wrong offset!");
static_assert(offsetof(AStretchableModule_C, CastShadows) == 0x000344, "Member 'AStretchableModule_C::CastShadows' has a wrong offset!");

}

