#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ControllerMappingEntry

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function ControllerMappingEntry.ControllerMappingEntry_C.ExecuteUbergraph_ControllerMappingEntry
// 0x0078 (0x0078 - 0x0000)
struct ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETextJustify                                  Temp_byte_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  Temp_byte_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable_2;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          Temp_byte_Variable_3;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ETextJustify                                  Temp_byte_Variable_4;                              // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          Temp_byte_Variable_5;                              // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue_1;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default_1;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  K2Node_Select_Default_2;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHorizontalAlignment                          K2Node_Select_Default_3;                           // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  K2Node_Select_Default_4;                           // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHorizontalAlignment                          K2Node_Select_Default_5;                           // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_newDescription;                       // 0x0058(0x0018)(ConstParm)
	class UTexture2D*                             K2Node_Event_newIcon;                              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry) == 0x000008, "Wrong alignment on ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry");
static_assert(sizeof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry) == 0x000078, "Wrong size on ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, EntryPoint) == 0x000000, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_int_Variable) == 0x000004, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_int_Variable_1) == 0x000008, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_bool_Variable) == 0x00000C, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_int_Variable_2) == 0x000010, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_int_Variable_3) == 0x000014, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_bool_Variable_1) == 0x000018, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_byte_Variable) == 0x000019, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_byte_Variable_1) == 0x00001A, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_bool_Variable_2) == 0x00001B, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_byte_Variable_2) == 0x00001C, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_byte_Variable_3) == 0x00001D, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_bool_Variable_3) == 0x00001E, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_byte_Variable_4) == 0x00001F, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_bool_Variable_4) == 0x000020, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_byte_Variable_5) == 0x000021, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, K2Node_Event_IsDesignTime) == 0x000022, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, K2Node_Select_Default) == 0x000024, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000028, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, CallFunc_SlotAsGridSlot_ReturnValue_1) == 0x000030, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::CallFunc_SlotAsGridSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, Temp_bool_Variable_5) == 0x000038, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, K2Node_Select_Default_1) == 0x00003C, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, K2Node_Select_Default_2) == 0x000040, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x000048, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, K2Node_Select_Default_3) == 0x000051, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, K2Node_Select_Default_4) == 0x000052, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, K2Node_Select_Default_5) == 0x000053, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, K2Node_Event_newDescription) == 0x000058, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::K2Node_Event_newDescription' has a wrong offset!");
static_assert(offsetof(ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry, K2Node_Event_newIcon) == 0x000070, "Member 'ControllerMappingEntry_C_ExecuteUbergraph_ControllerMappingEntry::K2Node_Event_newIcon' has a wrong offset!");

// Function ControllerMappingEntry.ControllerMappingEntry_C.UpdateIcon
// 0x0008 (0x0008 - 0x0000)
struct ControllerMappingEntry_C_UpdateIcon final
{
public:
	class UTexture2D*                             NewIcon;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ControllerMappingEntry_C_UpdateIcon) == 0x000008, "Wrong alignment on ControllerMappingEntry_C_UpdateIcon");
static_assert(sizeof(ControllerMappingEntry_C_UpdateIcon) == 0x000008, "Wrong size on ControllerMappingEntry_C_UpdateIcon");
static_assert(offsetof(ControllerMappingEntry_C_UpdateIcon, NewIcon) == 0x000000, "Member 'ControllerMappingEntry_C_UpdateIcon::NewIcon' has a wrong offset!");

// Function ControllerMappingEntry.ControllerMappingEntry_C.Event_UpdateDescription
// 0x0018 (0x0018 - 0x0000)
struct ControllerMappingEntry_C_Event_UpdateDescription final
{
public:
	class FText                                   NewDescription;                                    // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ControllerMappingEntry_C_Event_UpdateDescription) == 0x000008, "Wrong alignment on ControllerMappingEntry_C_Event_UpdateDescription");
static_assert(sizeof(ControllerMappingEntry_C_Event_UpdateDescription) == 0x000018, "Wrong size on ControllerMappingEntry_C_Event_UpdateDescription");
static_assert(offsetof(ControllerMappingEntry_C_Event_UpdateDescription, NewDescription) == 0x000000, "Member 'ControllerMappingEntry_C_Event_UpdateDescription::NewDescription' has a wrong offset!");

// Function ControllerMappingEntry.ControllerMappingEntry_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ControllerMappingEntry_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ControllerMappingEntry_C_PreConstruct) == 0x000001, "Wrong alignment on ControllerMappingEntry_C_PreConstruct");
static_assert(sizeof(ControllerMappingEntry_C_PreConstruct) == 0x000001, "Wrong size on ControllerMappingEntry_C_PreConstruct");
static_assert(offsetof(ControllerMappingEntry_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ControllerMappingEntry_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

