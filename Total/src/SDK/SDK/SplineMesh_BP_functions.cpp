#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SplineMesh_BP

#include "Basic.hpp"

#include "SplineMesh_BP_classes.hpp"
#include "SplineMesh_BP_parameters.hpp"


namespace SDK
{

// Function SplineMesh_BP.SplineMesh_BP_C.SnapPointOnGrid
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASplineMesh_BP_C::SnapPointOnGrid(class USplineComponent* Spline_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMesh_BP_C", "SnapPointOnGrid");

	Params::SplineMesh_BP_C_SnapPointOnGrid Parms{};

	Parms.Spline_0 = Spline_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SplineMesh_BP.SplineMesh_BP_C.FindClosetMeshes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USplineComponent*                 Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FSplineMeshData>          Meshes_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASplineMesh_BP_C::FindClosetMeshes(int32 A, class USplineComponent* Target, TArray<struct FSplineMeshData>& Meshes_0, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMesh_BP_C", "FindClosetMeshes");

	Params::SplineMesh_BP_C_FindClosetMeshes Parms{};

	Parms.A = A;
	Parms.Target = Target;
	Parms.Meshes_0 = std::move(Meshes_0);

	UObject::ProcessEvent(Func, &Parms);

	Meshes_0 = std::move(Parms.Meshes_0);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function SplineMesh_BP.SplineMesh_BP_C.AddStaticMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          StartPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          StartTangent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndPos                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          EndTangent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      NewMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASplineMesh_BP_C::AddStaticMesh(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, class UStaticMesh* NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMesh_BP_C", "AddStaticMesh");

	Params::SplineMesh_BP_C_AddStaticMesh Parms{};

	Parms.StartPos = std::move(StartPos);
	Parms.StartTangent = std::move(StartTangent);
	Parms.EndPos = std::move(EndPos);
	Parms.EndTangent = std::move(EndTangent);
	Parms.NewMesh = NewMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SplineMesh_BP.SplineMesh_BP_C.AddMiddleMeshe
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Relative_Transform_Rotation                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ASplineMesh_BP_C::AddMiddleMeshe(float Distance, const struct FVector& Location, const struct FRotator& Relative_Transform_Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMesh_BP_C", "AddMiddleMeshe");

	Params::SplineMesh_BP_C_AddMiddleMeshe Parms{};

	Parms.Distance = Distance;
	Parms.Location = std::move(Location);
	Parms.Relative_Transform_Rotation = std::move(Relative_Transform_Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SplineMesh_BP.SplineMesh_BP_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASplineMesh_BP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SplineMesh_BP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

