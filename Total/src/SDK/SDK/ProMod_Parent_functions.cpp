#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProMod_Parent

#include "Basic.hpp"

#include "ProMod_Parent_classes.hpp"
#include "ProMod_Parent_parameters.hpp"


namespace SDK
{

// Function ProMod_Parent.ProMod_Parent_C.FixUp
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AProMod_Parent_C::FixUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "FixUp");

	Params::ProMod_Parent_C_FixUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProMod_Parent.ProMod_Parent_C.SetupCollision
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsDetail                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProMod_Parent_C::SetupCollision(class UPrimitiveComponent* Target, bool bIsDetail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "SetupCollision");

	Params::ProMod_Parent_C_SetupCollision Parms{};

	Parms.Target = Target;
	Parms.bIsDetail = bIsDetail;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.ApplyNewMeshSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   NewMeshComponent                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::ApplyNewMeshSettings(class UMeshComponent* NewMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "ApplyNewMeshSettings");

	Params::ProMod_Parent_C_ApplyNewMeshSettings Parms{};

	Parms.NewMeshComponent = NewMeshComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.MakePipeConnection2
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::MakePipeConnection2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "MakePipeConnection2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.CustRunConstruction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class AProMod_Parent_C>>Pipes                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AProMod_Parent_C::CustRunConstruction(TArray<TSoftObjectPtr<class AProMod_Parent_C>>& Pipes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "CustRunConstruction");

	Params::ProMod_Parent_C_CustRunConstruction Parms{};

	Parms.Pipes = std::move(Pipes);

	UObject::ProcessEvent(Func, &Parms);

	Pipes = std::move(Parms.Pipes);
}


// Function ProMod_Parent.ProMod_Parent_C.CleanOwningActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bChanged                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProMod_Parent_C::CleanOwningActors(bool* bChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "CleanOwningActors");

	Params::ProMod_Parent_C_CleanOwningActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bChanged != nullptr)
		*bChanged = Parms.bChanged;
}


// Function ProMod_Parent.ProMod_Parent_C.SetMaterialOverrides
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::SetMaterialOverrides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "SetMaterialOverrides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.AddManualDetail
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      NewMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         RotOffset                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::AddManualDetail(class UStaticMesh* NewMesh, const struct FRotator& RotOffset, const struct FVector& Scale, const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "AddManualDetail");

	Params::ProMod_Parent_C_AddManualDetail Parms{};

	Parms.NewMesh = NewMesh;
	Parms.RotOffset = std::move(RotOffset);
	Parms.Scale = std::move(Scale);
	Parms.Offset = std::move(Offset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.IsSameChannel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AProMod_Parent_C*                 CurrentModule                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProMod_Parent_C::IsSameChannel(class AProMod_Parent_C* CurrentModule, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "IsSameChannel");

	Params::ProMod_Parent_C_IsSameChannel Parms{};

	Parms.CurrentModule = CurrentModule;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function ProMod_Parent.ProMod_Parent_C.IsValidIntersection
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AProMod_Parent_C*                 TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          IntersectionPos                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::IsValidIntersection(class AProMod_Parent_C* TargetActor, bool* Valid, struct FVector* IntersectionPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "IsValidIntersection");

	Params::ProMod_Parent_C_IsValidIntersection Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (IntersectionPos != nullptr)
		*IntersectionPos = std::move(Parms.IntersectionPos);
}


// Function ProMod_Parent.ProMod_Parent_C.KeepTextureRatio
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::KeepTextureRatio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "KeepTextureRatio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.CreateDynamicMaterials
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::CreateDynamicMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "CreateDynamicMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.AddDetailComponent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   _minDistance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _Offset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      StaticMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   _Rotation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::AddDetailComponent(float _minDistance, float _Offset, class UStaticMesh* StaticMesh, float _Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "AddDetailComponent");

	Params::ProMod_Parent_C_AddDetailComponent Parms{};

	Parms._minDistance = _minDistance;
	Parms._Offset = _Offset;
	Parms.StaticMesh = StaticMesh;
	Parms._Rotation = _Rotation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.AddPipeDetails
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::AddPipeDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "AddPipeDetails");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.GetPipeVector
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AProMod_Parent_C*                 Pipe                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AProMod_Parent_C::GetPipeVector(class AProMod_Parent_C* Pipe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "GetPipeVector");

	Params::ProMod_Parent_C_GetPipeVector Parms{};

	Parms.Pipe = Pipe;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ProMod_Parent.ProMod_Parent_C.GetConnectorRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AProMod_Parent_C*                 LocalPipe                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AProMod_Parent_C*                 TargetPipe                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInvertedRoles                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   _PivotDistanceFromTarget                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProMod_Parent_C::GetConnectorRotation(class AProMod_Parent_C* LocalPipe, class AProMod_Parent_C* TargetPipe, bool IsInvertedRoles, float _PivotDistanceFromTarget, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "GetConnectorRotation");

	Params::ProMod_Parent_C_GetConnectorRotation Parms{};

	Parms.LocalPipe = LocalPipe;
	Parms.TargetPipe = TargetPipe;
	Parms.IsInvertedRoles = IsInvertedRoles;
	Parms._PivotDistanceFromTarget = _PivotDistanceFromTarget;

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function ProMod_Parent.ProMod_Parent_C.ClearAllComponents
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::ClearAllComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "ClearAllComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.RegisterToPipeModuleManager
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProMod_Parent_C::RegisterToPipeModuleManager(bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "RegisterToPipeModuleManager");

	Params::ProMod_Parent_C_RegisterToPipeModuleManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function ProMod_Parent.ProMod_Parent_C.CreateSplineMeshComp
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          WorldLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Tangent1                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          WorldLocation2                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Tangen2                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AProMod_Parent_C*                 TargetPipeModule                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShouldFlipSpline                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProMod_Parent_C::CreateSplineMeshComp(const struct FVector& WorldLocation, const struct FVector& Tangent1, const struct FVector& WorldLocation2, const struct FVector& Tangen2, class AProMod_Parent_C* TargetPipeModule, bool bShouldFlipSpline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "CreateSplineMeshComp");

	Params::ProMod_Parent_C_CreateSplineMeshComp Parms{};

	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Tangent1 = std::move(Tangent1);
	Parms.WorldLocation2 = std::move(WorldLocation2);
	Parms.Tangen2 = std::move(Tangen2);
	Parms.TargetPipeModule = TargetPipeModule;
	Parms.bShouldFlipSpline = bShouldFlipSpline;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.isCornerPipe
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AProMod_Parent_C*                 _TargetPipe                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCornerPipe_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          TargetLocation1                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetEndWorldLocation1                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ActorEndWorldLocation1                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ActorWorldLocation1                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AProMod_Parent_C*                 TargetPipe1                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bShouldFlipSpline                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProMod_Parent_C::IsCornerPipe(class AProMod_Parent_C* _TargetPipe, bool* IsCornerPipe_0, struct FVector* TargetLocation1, struct FVector* TargetEndWorldLocation1, struct FVector* ActorEndWorldLocation1, struct FVector* ActorWorldLocation1, class AProMod_Parent_C** TargetPipe1, bool* bShouldFlipSpline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "isCornerPipe");

	Params::ProMod_Parent_C_IsCornerPipe Parms{};

	Parms._TargetPipe = _TargetPipe;

	UObject::ProcessEvent(Func, &Parms);

	if (IsCornerPipe_0 != nullptr)
		*IsCornerPipe_0 = Parms.IsCornerPipe_0;

	if (TargetLocation1 != nullptr)
		*TargetLocation1 = std::move(Parms.TargetLocation1);

	if (TargetEndWorldLocation1 != nullptr)
		*TargetEndWorldLocation1 = std::move(Parms.TargetEndWorldLocation1);

	if (ActorEndWorldLocation1 != nullptr)
		*ActorEndWorldLocation1 = std::move(Parms.ActorEndWorldLocation1);

	if (ActorWorldLocation1 != nullptr)
		*ActorWorldLocation1 = std::move(Parms.ActorWorldLocation1);

	if (TargetPipe1 != nullptr)
		*TargetPipe1 = Parms.TargetPipe1;

	if (bShouldFlipSpline != nullptr)
		*bShouldFlipSpline = Parms.bShouldFlipSpline;
}


// Function ProMod_Parent.ProMod_Parent_C.IsCurrentAtFullExtentFromTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AProMod_Parent_C*                 TargetPipeModule1                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AProMod_Parent_C*                 TargetPipeModule2                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAtFullExtent                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   PivotDistanceFromTarget                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::IsCurrentAtFullExtentFromTarget(class AProMod_Parent_C* TargetPipeModule1, class AProMod_Parent_C* TargetPipeModule2, bool* IsAtFullExtent, float* PivotDistanceFromTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "IsCurrentAtFullExtentFromTarget");

	Params::ProMod_Parent_C_IsCurrentAtFullExtentFromTarget Parms{};

	Parms.TargetPipeModule1 = TargetPipeModule1;
	Parms.TargetPipeModule2 = TargetPipeModule2;

	UObject::ProcessEvent(Func, &Parms);

	if (IsAtFullExtent != nullptr)
		*IsAtFullExtent = Parms.IsAtFullExtent;

	if (PivotDistanceFromTarget != nullptr)
		*PivotDistanceFromTarget = Parms.PivotDistanceFromTarget;
}


// Function ProMod_Parent.ProMod_Parent_C.AddUniqueSMCAndActorToArray
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AProMod_Parent_C*                 TargetActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             StaticMeshComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USplineMeshComponent*             SplineMeshComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::AddUniqueSMCAndActorToArray(class AProMod_Parent_C* TargetActor, class UStaticMeshComponent* StaticMeshComponent, class USplineMeshComponent* SplineMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "AddUniqueSMCAndActorToArray");

	Params::ProMod_Parent_C_AddUniqueSMCAndActorToArray Parms{};

	Parms.TargetActor = TargetActor;
	Parms.StaticMeshComponent = StaticMeshComponent;
	Parms.SplineMeshComponent = SplineMeshComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.RebuildTargets
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::RebuildTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "RebuildTargets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.GetAxisFromVector
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AxisIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::GetAxisFromVector(const struct FVector& Vector, int32* AxisIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "GetAxisFromVector");

	Params::ProMod_Parent_C_GetAxisFromVector Parms{};

	Parms.Vector = std::move(Vector);

	UObject::ProcessEvent(Func, &Parms);

	if (AxisIndex != nullptr)
		*AxisIndex = Parms.AxisIndex;
}


// Function ProMod_Parent.ProMod_Parent_C.MakePipeConnection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class AProMod_Parent_C>>PipesRef                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AProMod_Parent_C::MakePipeConnection(TArray<TSoftObjectPtr<class AProMod_Parent_C>>& PipesRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "MakePipeConnection");

	Params::ProMod_Parent_C_MakePipeConnection Parms{};

	Parms.PipesRef = std::move(PipesRef);

	UObject::ProcessEvent(Func, &Parms);

	PipesRef = std::move(Parms.PipesRef);
}


// Function ProMod_Parent.ProMod_Parent_C.MoveAnchorGizmos
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::MoveAnchorGizmos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "MoveAnchorGizmos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.AssingDynMatData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::AssingDynMatData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "AssingDynMatData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.AssignLightChannel
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::AssignLightChannel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "AssignLightChannel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.CreateStretchingMeshesComponents
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::CreateStretchingMeshesComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "CreateStretchingMeshesComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.CreateLibraryMeshes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::CreateLibraryMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "CreateLibraryMeshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.ShuffleSpecialMeshesSeed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStaticMesh*>              _Staticmeshes                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UStaticMesh*>              SuffledSM                                              (Parm, OutParm)

void AProMod_Parent_C::ShuffleSpecialMeshesSeed(TArray<class UStaticMesh*>& _Staticmeshes, TArray<class UStaticMesh*>* SuffledSM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "ShuffleSpecialMeshesSeed");

	Params::ProMod_Parent_C_ShuffleSpecialMeshesSeed Parms{};

	Parms._Staticmeshes = std::move(_Staticmeshes);

	UObject::ProcessEvent(Func, &Parms);

	_Staticmeshes = std::move(Parms._Staticmeshes);

	if (SuffledSM != nullptr)
		*SuffledSM = std::move(Parms.SuffledSM);
}


// Function ProMod_Parent.ProMod_Parent_C.AssignPerLibMeshMaterialOverride
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::AssignPerLibMeshMaterialOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "AssignPerLibMeshMaterialOverride");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.ShuffleWithSeed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::ShuffleWithSeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "ShuffleWithSeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.GetStandardStaticmeshLibrary
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStaticMesh*>              _PossibleMeshLibrary                                   (Parm, OutParm)

void AProMod_Parent_C::GetStandardStaticmeshLibrary(TArray<class UStaticMesh*>* _PossibleMeshLibrary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "GetStandardStaticmeshLibrary");

	Params::ProMod_Parent_C_GetStandardStaticmeshLibrary Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (_PossibleMeshLibrary != nullptr)
		*_PossibleMeshLibrary = std::move(Parms._PossibleMeshLibrary);
}


// Function ProMod_Parent.ProMod_Parent_C.GetSpecialStaticmeshLibrary
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStaticMesh*>              _PossibleMeshLibrary                                   (Parm, OutParm)

void AProMod_Parent_C::GetSpecialStaticmeshLibrary(TArray<class UStaticMesh*>* _PossibleMeshLibrary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "GetSpecialStaticmeshLibrary");

	Params::ProMod_Parent_C_GetSpecialStaticmeshLibrary Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (_PossibleMeshLibrary != nullptr)
		*_PossibleMeshLibrary = std::move(Parms._PossibleMeshLibrary);
}


// Function ProMod_Parent.ProMod_Parent_C.ReassignStaticMeshFromLibrary
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::ReassignStaticMeshFromLibrary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "ReassignStaticMeshFromLibrary");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.SetStaticMeshComponent
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::SetStaticMeshComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "SetStaticMeshComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.GetScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELockAxis                               Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentModuleScale                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UsingTiling                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::GetScale(ELockAxis Axis, float CurrentModuleScale, bool UsingTiling, float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "GetScale");

	Params::ProMod_Parent_C_GetScale Parms{};

	Parms.Axis = Axis;
	Parms.CurrentModuleScale = CurrentModuleScale;
	Parms.UsingTiling = UsingTiling;

	UObject::ProcessEvent(Func, &Parms);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function ProMod_Parent.ProMod_Parent_C.GetOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELockAxis                               Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentModuleScale                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxDistance                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumLoop                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsTiling                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::GetOffset(ELockAxis Axis, float CurrentModuleScale, int32 MaxDistance, int32 NumLoop, bool IsTiling, float* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "GetOffset");

	Params::ProMod_Parent_C_GetOffset Parms{};

	Parms.Axis = Axis;
	Parms.CurrentModuleScale = CurrentModuleScale;
	Parms.MaxDistance = MaxDistance;
	Parms.NumLoop = NumLoop;
	Parms.IsTiling = IsTiling;

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = Parms.Offset;
}


// Function ProMod_Parent.ProMod_Parent_C.SetIsTiling
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTiling                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProMod_Parent_C::SetIsTiling(bool* IsTiling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "SetIsTiling");

	Params::ProMod_Parent_C_SetIsTiling Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTiling != nullptr)
		*IsTiling = Parms.IsTiling;
}


// Function ProMod_Parent.ProMod_Parent_C.GetFinalTranslation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Tiling_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   X                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::GetFinalTranslation(bool Tiling_0, float* X, float* Y, float* Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "GetFinalTranslation");

	Params::ProMod_Parent_C_GetFinalTranslation Parms{};

	Parms.Tiling_0 = Tiling_0;

	UObject::ProcessEvent(Func, &Parms);

	if (X != nullptr)
		*X = Parms.X;

	if (Y != nullptr)
		*Y = Parms.Y;

	if (Z != nullptr)
		*Z = Parms.Z;
}


// Function ProMod_Parent.ProMod_Parent_C.SetMaterialsToTriPlanarMapping
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::SetMaterialsToTriPlanarMapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "SetMaterialsToTriPlanarMapping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.FixTilingForAxisUsage
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::FixTilingForAxisUsage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "FixTilingForAxisUsage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.CheckForPreviousLockAxis
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::CheckForPreviousLockAxis()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "CheckForPreviousLockAxis");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.AddStaticMeshAtLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Relative_Transform_Scale_X                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Relative_Transform_Scale_Z                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Relative_Transform_Scale_Y                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Relative_Transform_Location_X                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Relative_Transform_Location_Y                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Relative_Transform_Location_Z                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::AddStaticMeshAtLocation(float Relative_Transform_Scale_X, float Relative_Transform_Scale_Z, float Relative_Transform_Scale_Y, float Relative_Transform_Location_X, float Relative_Transform_Location_Y, float Relative_Transform_Location_Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "AddStaticMeshAtLocation");

	Params::ProMod_Parent_C_AddStaticMeshAtLocation Parms{};

	Parms.Relative_Transform_Scale_X = Relative_Transform_Scale_X;
	Parms.Relative_Transform_Scale_Z = Relative_Transform_Scale_Z;
	Parms.Relative_Transform_Scale_Y = Relative_Transform_Scale_Y;
	Parms.Relative_Transform_Location_X = Relative_Transform_Location_X;
	Parms.Relative_Transform_Location_Y = Relative_Transform_Location_Y;
	Parms.Relative_Transform_Location_Z = Relative_Transform_Location_Z;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.CreateComponents
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::CreateComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "CreateComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.LimitGizmo
// (Public, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::LimitGizmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "LimitGizmo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AProMod_Parent_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.OnEditorPostLoad
// (Event, Public, BlueprintEvent)

void AProMod_Parent_C::OnEditorPostLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "OnEditorPostLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.OnPostActorsPasted
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   PastedActors                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AProMod_Parent_C::OnPostActorsPasted(const TArray<class AActor*>& PastedActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "OnPostActorsPasted");

	Params::ProMod_Parent_C_OnPostActorsPasted Parms{};

	Parms.PastedActors = std::move(PastedActors);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.PostDuplicated
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           DuplicationParent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::PostDuplicated(class AActor* DuplicationParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "PostDuplicated");

	Params::ProMod_Parent_C_PostDuplicated Parms{};

	Parms.DuplicationParent = DuplicationParent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AProMod_Parent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.PostEditMove
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bFinished                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AProMod_Parent_C::PostEditMove(bool bFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "PostEditMove");

	Params::ProMod_Parent_C_PostEditMove Parms{};

	Parms.bFinished = bFinished;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.PostAddedToLevel
// (Event, Public, BlueprintEvent)

void AProMod_Parent_C::PostAddedToLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "PostAddedToLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.TickSelected
// (Event, Public, BlueprintEvent)

void AProMod_Parent_C::TickSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "TickSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ProMod_Parent.ProMod_Parent_C.PostEditChange
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PropertyName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::PostEditChange(const class FName& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "PostEditChange");

	Params::ProMod_Parent_C_PostEditChange Parms{};

	Parms.PropertyName = PropertyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ProMod_Parent.ProMod_Parent_C.ExecuteUbergraph_ProMod_Parent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AProMod_Parent_C::ExecuteUbergraph_ProMod_Parent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProMod_Parent_C", "ExecuteUbergraph_ProMod_Parent");

	Params::ProMod_Parent_C_ExecuteUbergraph_ProMod_Parent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

