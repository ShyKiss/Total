#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlipCounterMinusBP

#include "Basic.hpp"

#include "OPP_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function FlipCounter-BP.FlipCounter-BP_C.ExecuteUbergraph_FlipCounter-BP
// 0x0098 (0x0098 - 0x0000)
struct FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bEnabled;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Event_value;                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         CallFunc_GetLinkedTriggerable_Triggerable;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool IsOn, class ARBTriggerable* Triggerable)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	class ARBTriggerableGate*                     K2Node_DynamicCast_AsRB_Triggerable_Gate;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsOn;                           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         K2Node_CustomEvent_triggerable;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBHackableComponent*                   K2Node_ComponentBoundEvent_hackableComponent;      // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHackState                                    CallFunc_GetCurrentHackState_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         CallFunc_GetLinkedTriggerable_Triggerable_1;       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARollingDoorMinusBase_BP_C*             K2Node_DynamicCast_AsRolling_Door__Base_BP;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         CallFunc_GetLinkedTriggerable_Triggerable_2;       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBHackableComponent*                   K2Node_Event_hackableComponent;                    // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARollingDoorMinusBase_BP_C*             K2Node_DynamicCast_AsRolling_Door__Base_BP_1;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP) == 0x000008, "Wrong alignment on FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP");
static_assert(sizeof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP) == 0x000098, "Wrong size on FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, EntryPoint) == 0x000000, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_HasAuthority_ReturnValue_1) == 0x000005, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_Event_bEnabled) == 0x000006, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_Event_bEnabled' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_Event_value) == 0x000008, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_Event_value' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_HasAuthority_ReturnValue_2) == 0x00000C, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00000D, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_HasAuthority_ReturnValue_3) == 0x00000E, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_GetLinkedTriggerable_Triggerable) == 0x000010, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_GetLinkedTriggerable_Triggerable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_DynamicCast_AsRB_Triggerable_Gate) == 0x000028, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_DynamicCast_AsRB_Triggerable_Gate' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_CustomEvent_IsOn) == 0x000031, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_CustomEvent_IsOn' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_CustomEvent_triggerable) == 0x000038, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_CustomEvent_triggerable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_ComponentBoundEvent_hackableComponent) == 0x000048, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_ComponentBoundEvent_hackableComponent' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_GetCurrentHackState_ReturnValue) == 0x000050, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_GetCurrentHackState_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_GetLinkedTriggerable_Triggerable_1) == 0x000058, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_GetLinkedTriggerable_Triggerable_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000060, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_DynamicCast_AsRolling_Door__Base_BP) == 0x000068, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_DynamicCast_AsRolling_Door__Base_BP' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_GetLinkedTriggerable_Triggerable_2) == 0x000078, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_GetLinkedTriggerable_Triggerable_2' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_Event_hackableComponent) == 0x000080, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_Event_hackableComponent' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_DynamicCast_AsRolling_Door__Base_BP_1) == 0x000088, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_DynamicCast_AsRolling_Door__Base_BP_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, K2Node_DynamicCast_bSuccess_2) == 0x000090, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP, CallFunc_Array_AddUnique_ReturnValue) == 0x000094, "Member 'FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.OnHackStateChanged
// 0x0008 (0x0008 - 0x0000)
struct FlipCounterMinusBP_C_OnHackStateChanged final
{
public:
	class URBHackableComponent*                   HackableComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_OnHackStateChanged) == 0x000008, "Wrong alignment on FlipCounterMinusBP_C_OnHackStateChanged");
static_assert(sizeof(FlipCounterMinusBP_C_OnHackStateChanged) == 0x000008, "Wrong size on FlipCounterMinusBP_C_OnHackStateChanged");
static_assert(offsetof(FlipCounterMinusBP_C_OnHackStateChanged, HackableComponent) == 0x000000, "Member 'FlipCounterMinusBP_C_OnHackStateChanged::HackableComponent' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.BndEvt__FlipCounter-BP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FlipCounterMinusBP_C_BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature final
{
public:
	class URBHackableComponent*                   HackableComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature) == 0x000008, "Wrong alignment on FlipCounterMinusBP_C_BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature");
static_assert(sizeof(FlipCounterMinusBP_C_BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature) == 0x000008, "Wrong size on FlipCounterMinusBP_C_BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature");
static_assert(offsetof(FlipCounterMinusBP_C_BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature, HackableComponent) == 0x000000, "Member 'FlipCounterMinusBP_C_BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature::HackableComponent' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.OnTriggerEvent
// 0x0010 (0x0010 - 0x0000)
struct FlipCounterMinusBP_C_OnTriggerEvent final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         Triggerable;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_OnTriggerEvent) == 0x000008, "Wrong alignment on FlipCounterMinusBP_C_OnTriggerEvent");
static_assert(sizeof(FlipCounterMinusBP_C_OnTriggerEvent) == 0x000010, "Wrong size on FlipCounterMinusBP_C_OnTriggerEvent");
static_assert(offsetof(FlipCounterMinusBP_C_OnTriggerEvent, IsOn) == 0x000000, "Member 'FlipCounterMinusBP_C_OnTriggerEvent::IsOn' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_OnTriggerEvent, Triggerable) == 0x000008, "Member 'FlipCounterMinusBP_C_OnTriggerEvent::Triggerable' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.SetCounter
// 0x0004 (0x0004 - 0x0000)
struct FlipCounterMinusBP_C_SetCounter final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_SetCounter) == 0x000004, "Wrong alignment on FlipCounterMinusBP_C_SetCounter");
static_assert(sizeof(FlipCounterMinusBP_C_SetCounter) == 0x000004, "Wrong size on FlipCounterMinusBP_C_SetCounter");
static_assert(offsetof(FlipCounterMinusBP_C_SetCounter, Value) == 0x000000, "Member 'FlipCounterMinusBP_C_SetCounter::Value' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.SetVariatorEnabled
// 0x0001 (0x0001 - 0x0000)
struct FlipCounterMinusBP_C_SetVariatorEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipCounterMinusBP_C_SetVariatorEnabled) == 0x000001, "Wrong alignment on FlipCounterMinusBP_C_SetVariatorEnabled");
static_assert(sizeof(FlipCounterMinusBP_C_SetVariatorEnabled) == 0x000001, "Wrong size on FlipCounterMinusBP_C_SetVariatorEnabled");
static_assert(offsetof(FlipCounterMinusBP_C_SetVariatorEnabled, bEnabled) == 0x000000, "Member 'FlipCounterMinusBP_C_SetVariatorEnabled::bEnabled' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.ResetCount
// 0x0001 (0x0001 - 0x0000)
struct FlipCounterMinusBP_C_ResetCount final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipCounterMinusBP_C_ResetCount) == 0x000001, "Wrong alignment on FlipCounterMinusBP_C_ResetCount");
static_assert(sizeof(FlipCounterMinusBP_C_ResetCount) == 0x000001, "Wrong size on FlipCounterMinusBP_C_ResetCount");
static_assert(offsetof(FlipCounterMinusBP_C_ResetCount, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'FlipCounterMinusBP_C_ResetCount::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.Increment
// 0x0008 (0x0008 - 0x0000)
struct FlipCounterMinusBP_C_Increment final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_Increment) == 0x000004, "Wrong alignment on FlipCounterMinusBP_C_Increment");
static_assert(sizeof(FlipCounterMinusBP_C_Increment) == 0x000008, "Wrong size on FlipCounterMinusBP_C_Increment");
static_assert(offsetof(FlipCounterMinusBP_C_Increment, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'FlipCounterMinusBP_C_Increment::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_Increment, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'FlipCounterMinusBP_C_Increment::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.Decrement
// 0x000C (0x000C - 0x0000)
struct FlipCounterMinusBP_C_Decrement final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipCounterMinusBP_C_Decrement) == 0x000004, "Wrong alignment on FlipCounterMinusBP_C_Decrement");
static_assert(sizeof(FlipCounterMinusBP_C_Decrement) == 0x00000C, "Wrong size on FlipCounterMinusBP_C_Decrement");
static_assert(offsetof(FlipCounterMinusBP_C_Decrement, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'FlipCounterMinusBP_C_Decrement::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_Decrement, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'FlipCounterMinusBP_C_Decrement::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_Decrement, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'FlipCounterMinusBP_C_Decrement::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.RefreshGateHackZoneSizes
// 0x0030 (0x0030 - 0x0000)
struct FlipCounterMinusBP_C_RefreshGateHackZoneSizes final
{
public:
	class ARBTriggerable*                         CallFunc_GetLinkedTriggerable_Triggerable;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARollingDoorMinusBase_BP_C*             K2Node_DynamicCast_AsRolling_Door__Base_BP;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes) == 0x000008, "Wrong alignment on FlipCounterMinusBP_C_RefreshGateHackZoneSizes");
static_assert(sizeof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes) == 0x000030, "Wrong size on FlipCounterMinusBP_C_RefreshGateHackZoneSizes");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes, CallFunc_GetLinkedTriggerable_Triggerable) == 0x000000, "Member 'FlipCounterMinusBP_C_RefreshGateHackZoneSizes::CallFunc_GetLinkedTriggerable_Triggerable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes, K2Node_DynamicCast_AsRolling_Door__Base_BP) == 0x000008, "Member 'FlipCounterMinusBP_C_RefreshGateHackZoneSizes::K2Node_DynamicCast_AsRolling_Door__Base_BP' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'FlipCounterMinusBP_C_RefreshGateHackZoneSizes::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'FlipCounterMinusBP_C_RefreshGateHackZoneSizes::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes, CallFunc_BreakVector_X) == 0x000018, "Member 'FlipCounterMinusBP_C_RefreshGateHackZoneSizes::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes, CallFunc_BreakVector_Y) == 0x00001C, "Member 'FlipCounterMinusBP_C_RefreshGateHackZoneSizes::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes, CallFunc_BreakVector_Z) == 0x000020, "Member 'FlipCounterMinusBP_C_RefreshGateHackZoneSizes::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshGateHackZoneSizes, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'FlipCounterMinusBP_C_RefreshGateHackZoneSizes::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.GetLinkedTriggerable
// 0x0028 (0x0028 - 0x0000)
struct FlipCounterMinusBP_C_GetLinkedTriggerable final
{
public:
	class ARBTriggerable*                         Triggerable;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBTriggerable*                         NULLL;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetAttachParentActor_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARollingDoorMinusBase_BP_C*             K2Node_DynamicCast_AsRolling_Door__Base_BP;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipCounterMinusBP_C_GetLinkedTriggerable) == 0x000008, "Wrong alignment on FlipCounterMinusBP_C_GetLinkedTriggerable");
static_assert(sizeof(FlipCounterMinusBP_C_GetLinkedTriggerable) == 0x000028, "Wrong size on FlipCounterMinusBP_C_GetLinkedTriggerable");
static_assert(offsetof(FlipCounterMinusBP_C_GetLinkedTriggerable, Triggerable) == 0x000000, "Member 'FlipCounterMinusBP_C_GetLinkedTriggerable::Triggerable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_GetLinkedTriggerable, NULLL) == 0x000008, "Member 'FlipCounterMinusBP_C_GetLinkedTriggerable::NULLL' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_GetLinkedTriggerable, CallFunc_GetAttachParentActor_ReturnValue) == 0x000010, "Member 'FlipCounterMinusBP_C_GetLinkedTriggerable::CallFunc_GetAttachParentActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_GetLinkedTriggerable, K2Node_DynamicCast_AsRolling_Door__Base_BP) == 0x000018, "Member 'FlipCounterMinusBP_C_GetLinkedTriggerable::K2Node_DynamicCast_AsRolling_Door__Base_BP' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_GetLinkedTriggerable, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'FlipCounterMinusBP_C_GetLinkedTriggerable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.SetNumber
// 0x0008 (0x0008 - 0x0000)
struct FlipCounterMinusBP_C_SetNumber final
{
public:
	int32                                         NewNumber;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipCounterMinusBP_C_SetNumber) == 0x000004, "Wrong alignment on FlipCounterMinusBP_C_SetNumber");
static_assert(sizeof(FlipCounterMinusBP_C_SetNumber) == 0x000008, "Wrong size on FlipCounterMinusBP_C_SetNumber");
static_assert(offsetof(FlipCounterMinusBP_C_SetNumber, NewNumber) == 0x000000, "Member 'FlipCounterMinusBP_C_SetNumber::NewNumber' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_SetNumber, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'FlipCounterMinusBP_C_SetNumber::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_SetNumber, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000005, "Member 'FlipCounterMinusBP_C_SetNumber::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.ResetNumber
// 0x0004 (0x0004 - 0x0000)
struct FlipCounterMinusBP_C_ResetNumber final
{
public:
	int32                                         NewNumber;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_ResetNumber) == 0x000004, "Wrong alignment on FlipCounterMinusBP_C_ResetNumber");
static_assert(sizeof(FlipCounterMinusBP_C_ResetNumber) == 0x000004, "Wrong size on FlipCounterMinusBP_C_ResetNumber");
static_assert(offsetof(FlipCounterMinusBP_C_ResetNumber, NewNumber) == 0x000000, "Member 'FlipCounterMinusBP_C_ResetNumber::NewNumber' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.OnRep_bDisabled
// 0x0018 (0x0018 - 0x0000)
struct FlipCounterMinusBP_C_OnRep_bDisabled final
{
public:
	EHackState                                    Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHackState                                    Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         CallFunc_GetLinkedTriggerable_Triggerable;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHackState                                    K2Node_Select_Default;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_OnRep_bDisabled) == 0x000008, "Wrong alignment on FlipCounterMinusBP_C_OnRep_bDisabled");
static_assert(sizeof(FlipCounterMinusBP_C_OnRep_bDisabled) == 0x000018, "Wrong size on FlipCounterMinusBP_C_OnRep_bDisabled");
static_assert(offsetof(FlipCounterMinusBP_C_OnRep_bDisabled, Temp_byte_Variable) == 0x000000, "Member 'FlipCounterMinusBP_C_OnRep_bDisabled::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_OnRep_bDisabled, Temp_byte_Variable_1) == 0x000001, "Member 'FlipCounterMinusBP_C_OnRep_bDisabled::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_OnRep_bDisabled, CallFunc_IsDedicatedServer_ReturnValue) == 0x000002, "Member 'FlipCounterMinusBP_C_OnRep_bDisabled::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_OnRep_bDisabled, CallFunc_GetLinkedTriggerable_Triggerable) == 0x000008, "Member 'FlipCounterMinusBP_C_OnRep_bDisabled::CallFunc_GetLinkedTriggerable_Triggerable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_OnRep_bDisabled, Temp_bool_Variable) == 0x000010, "Member 'FlipCounterMinusBP_C_OnRep_bDisabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_OnRep_bDisabled, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'FlipCounterMinusBP_C_OnRep_bDisabled::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_OnRep_bDisabled, CallFunc_Not_PreBool_ReturnValue_1) == 0x000012, "Member 'FlipCounterMinusBP_C_OnRep_bDisabled::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_OnRep_bDisabled, K2Node_Select_Default) == 0x000013, "Member 'FlipCounterMinusBP_C_OnRep_bDisabled::K2Node_Select_Default' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.UpdateVisual
// 0x0068 (0x0068 - 0x0000)
struct FlipCounterMinusBP_C_UpdateVisual final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsConsideredBeingActivelyHacked_out;      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlipNumberCountDownMinus01_BP_C*       K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlipNumberCountDownMinus01_BP_C*       K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_1; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_UpdateVisual) == 0x000008, "Wrong alignment on FlipCounterMinusBP_C_UpdateVisual");
static_assert(sizeof(FlipCounterMinusBP_C_UpdateVisual) == 0x000068, "Wrong size on FlipCounterMinusBP_C_UpdateVisual");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, Temp_bool_Variable) == 0x000000, "Member 'FlipCounterMinusBP_C_UpdateVisual::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, Temp_float_Variable) == 0x000004, "Member 'FlipCounterMinusBP_C_UpdateVisual::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, Temp_float_Variable_1) == 0x000008, "Member 'FlipCounterMinusBP_C_UpdateVisual::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, Temp_bool_Variable_1) == 0x00000C, "Member 'FlipCounterMinusBP_C_UpdateVisual::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, Temp_float_Variable_2) == 0x000010, "Member 'FlipCounterMinusBP_C_UpdateVisual::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, Temp_float_Variable_3) == 0x000014, "Member 'FlipCounterMinusBP_C_UpdateVisual::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_IsDedicatedServer_ReturnValue) == 0x000018, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_IsConsideredBeingActivelyHacked_out) == 0x000019, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_IsConsideredBeingActivelyHacked_out' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, K2Node_Select_Default) == 0x00001C, "Member 'FlipCounterMinusBP_C_UpdateVisual::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_Not_PreBool_ReturnValue_1) == 0x000020, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000021, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_Not_PreBool_ReturnValue_2) == 0x000023, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, K2Node_Select_Default_1) == 0x000024, "Member 'FlipCounterMinusBP_C_UpdateVisual::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_BooleanAND_ReturnValue_1) == 0x000028, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, K2Node_MakeStruct_LinearColor) == 0x00002C, "Member 'FlipCounterMinusBP_C_UpdateVisual::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_BooleanAND_ReturnValue_2) == 0x00003C, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_Not_PreBool_ReturnValue_3) == 0x00003D, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP) == 0x000040, "Member 'FlipCounterMinusBP_C_UpdateVisual::K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'FlipCounterMinusBP_C_UpdateVisual::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_1) == 0x000050, "Member 'FlipCounterMinusBP_C_UpdateVisual::K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'FlipCounterMinusBP_C_UpdateVisual::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_Divide_IntInt_ReturnValue) == 0x00005C, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_UpdateVisual, CallFunc_Percent_IntInt_ReturnValue) == 0x000060, "Member 'FlipCounterMinusBP_C_UpdateVisual::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.SetDisabled
// 0x0002 (0x0002 - 0x0000)
struct FlipCounterMinusBP_C_SetDisabled final
{
public:
	bool                                          bDisabled_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipCounterMinusBP_C_SetDisabled) == 0x000001, "Wrong alignment on FlipCounterMinusBP_C_SetDisabled");
static_assert(sizeof(FlipCounterMinusBP_C_SetDisabled) == 0x000002, "Wrong size on FlipCounterMinusBP_C_SetDisabled");
static_assert(offsetof(FlipCounterMinusBP_C_SetDisabled, bDisabled_0) == 0x000000, "Member 'FlipCounterMinusBP_C_SetDisabled::bDisabled_0' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_SetDisabled, CallFunc_HasAuthority_ReturnValue) == 0x000001, "Member 'FlipCounterMinusBP_C_SetDisabled::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.RefreshBrokenVFX
// 0x0002 (0x0002 - 0x0000)
struct FlipCounterMinusBP_C_RefreshBrokenVFX final
{
public:
	bool                                          CallFunc_IsConsideredBeingActivelyHacked_out;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipCounterMinusBP_C_RefreshBrokenVFX) == 0x000001, "Wrong alignment on FlipCounterMinusBP_C_RefreshBrokenVFX");
static_assert(sizeof(FlipCounterMinusBP_C_RefreshBrokenVFX) == 0x000002, "Wrong size on FlipCounterMinusBP_C_RefreshBrokenVFX");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshBrokenVFX, CallFunc_IsConsideredBeingActivelyHacked_out) == 0x000000, "Member 'FlipCounterMinusBP_C_RefreshBrokenVFX::CallFunc_IsConsideredBeingActivelyHacked_out' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_RefreshBrokenVFX, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'FlipCounterMinusBP_C_RefreshBrokenVFX::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.IsConsideredBeingActivelyHacked
// 0x0020 (0x0020 - 0x0000)
struct FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked final
{
public:
	bool                                          Out;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bActivelyBeingHacked;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBHackableComponent*                   CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHackState                                    CallFunc_GetCurrentHackState_ReturnValue;          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked) == 0x000008, "Wrong alignment on FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked");
static_assert(sizeof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked) == 0x000020, "Wrong size on FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, Out) == 0x000000, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::Out' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, bActivelyBeingHacked) == 0x000001, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::bActivelyBeingHacked' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, CallFunc_Array_Get_Item) == 0x000010, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, CallFunc_GetCurrentHackState_ReturnValue) == 0x00001E, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::CallFunc_GetCurrentHackState_ReturnValue' has a wrong offset!");
static_assert(offsetof(FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001F, "Member 'FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.GetCounter
// 0x0004 (0x0004 - 0x0000)
struct FlipCounterMinusBP_C_GetCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FlipCounterMinusBP_C_GetCounter) == 0x000004, "Wrong alignment on FlipCounterMinusBP_C_GetCounter");
static_assert(sizeof(FlipCounterMinusBP_C_GetCounter) == 0x000004, "Wrong size on FlipCounterMinusBP_C_GetCounter");
static_assert(offsetof(FlipCounterMinusBP_C_GetCounter, ReturnValue) == 0x000000, "Member 'FlipCounterMinusBP_C_GetCounter::ReturnValue' has a wrong offset!");

// Function FlipCounter-BP.FlipCounter-BP_C.GetVariatorEnabled
// 0x0001 (0x0001 - 0x0000)
struct FlipCounterMinusBP_C_GetVariatorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FlipCounterMinusBP_C_GetVariatorEnabled) == 0x000001, "Wrong alignment on FlipCounterMinusBP_C_GetVariatorEnabled");
static_assert(sizeof(FlipCounterMinusBP_C_GetVariatorEnabled) == 0x000001, "Wrong size on FlipCounterMinusBP_C_GetVariatorEnabled");
static_assert(offsetof(FlipCounterMinusBP_C_GetVariatorEnabled, ReturnValue) == 0x000000, "Member 'FlipCounterMinusBP_C_GetVariatorEnabled::ReturnValue' has a wrong offset!");

}

