#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CH_SpotlightTripodMinus01

#include "Basic.hpp"

#include "RBLight_BP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CH_SpotlightTripod-01.CH_SpotlightTripod-01_C
// 0x0030 (0x07A0 - 0x0770)
class ACH_SpotlightTripodMinus01_C final : public ARBLight_BP_C
{
public:
	class UStaticMeshComponent*                   StaticMesh_2;                                      // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh_1;                                      // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Static;                                  // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Movable;                                 // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh_0;                                      // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightWallMinus02;                                  // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CH_SpotlightTripod-01_C">();
	}
	static class ACH_SpotlightTripodMinus01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACH_SpotlightTripodMinus01_C>();
	}
};
static_assert(alignof(ACH_SpotlightTripodMinus01_C) == 0x000010, "Wrong alignment on ACH_SpotlightTripodMinus01_C");
static_assert(sizeof(ACH_SpotlightTripodMinus01_C) == 0x0007A0, "Wrong size on ACH_SpotlightTripodMinus01_C");
static_assert(offsetof(ACH_SpotlightTripodMinus01_C, StaticMesh_2) == 0x000770, "Member 'ACH_SpotlightTripodMinus01_C::StaticMesh_2' has a wrong offset!");
static_assert(offsetof(ACH_SpotlightTripodMinus01_C, StaticMesh_1) == 0x000778, "Member 'ACH_SpotlightTripodMinus01_C::StaticMesh_1' has a wrong offset!");
static_assert(offsetof(ACH_SpotlightTripodMinus01_C, SpotLight_Static) == 0x000780, "Member 'ACH_SpotlightTripodMinus01_C::SpotLight_Static' has a wrong offset!");
static_assert(offsetof(ACH_SpotlightTripodMinus01_C, SpotLight_Movable) == 0x000788, "Member 'ACH_SpotlightTripodMinus01_C::SpotLight_Movable' has a wrong offset!");
static_assert(offsetof(ACH_SpotlightTripodMinus01_C, StaticMesh_0) == 0x000790, "Member 'ACH_SpotlightTripodMinus01_C::StaticMesh_0' has a wrong offset!");
static_assert(offsetof(ACH_SpotlightTripodMinus01_C, LightWallMinus02) == 0x000798, "Member 'ACH_SpotlightTripodMinus01_C::LightWallMinus02' has a wrong offset!");

}

