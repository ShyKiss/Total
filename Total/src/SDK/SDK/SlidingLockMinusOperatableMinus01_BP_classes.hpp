#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SlidingLockMinusOperatableMinus01_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SlidingLock-Operatable-01_BP.SlidingLock-Operatable-01_BP_C
// 0x00D0 (0x0700 - 0x0630)
class ASlidingLockMinusOperatableMinus01_BP_C final : public ARBSlidingLock
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0630(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URBDamageableComponent*                 Damageable;                                        // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FrameMetal;                                        // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SlidingLockDecalMeshMinus01;                       // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Bar;                                               // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DoorMetal;                                         // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SlidingLockBarMinus01;                             // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             DoorMetalInitialRelativeTransform;                 // 0x0670(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             BarRelativeTransform;                              // 0x06A0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             FrameMetalWorldTransform;                          // 0x06D0(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_SlidingLockMinusOperatableMinus01_BP(int32 EntryPoint);
	void Event_OnResetStage();
	void Event_SnapToState();
	void BndEvt__Damageable_K2Node_ComponentBoundEvent_0_OnDamageableDestroyed__DelegateSignature(class URBDamageableComponent* DamageableComponent);
	void BP_OnUnlock();
	void BP_OnLock();
	void OnSetup();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	struct FTransform BP_OverrideEditorCompTranform(class FName CompName, bool bLocked, const struct FTransform& Transform);
	void TakePhysicsComponentsSnapshot();
	void RestorePhysicsComponentsSnapshot();
	void OnRep_FrameMetalTransform();
	void OnRep_FrameMetalWorldTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SlidingLock-Operatable-01_BP_C">();
	}
	static class ASlidingLockMinusOperatableMinus01_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASlidingLockMinusOperatableMinus01_BP_C>();
	}
};
static_assert(alignof(ASlidingLockMinusOperatableMinus01_BP_C) == 0x000010, "Wrong alignment on ASlidingLockMinusOperatableMinus01_BP_C");
static_assert(sizeof(ASlidingLockMinusOperatableMinus01_BP_C) == 0x000700, "Wrong size on ASlidingLockMinusOperatableMinus01_BP_C");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, UberGraphFrame) == 0x000630, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, Damageable) == 0x000638, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::Damageable' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, FrameMetal) == 0x000640, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::FrameMetal' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, SlidingLockDecalMeshMinus01) == 0x000648, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::SlidingLockDecalMeshMinus01' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, Bar) == 0x000650, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::Bar' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, DoorMetal) == 0x000658, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::DoorMetal' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, SlidingLockBarMinus01) == 0x000660, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::SlidingLockBarMinus01' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, Arrow) == 0x000668, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::Arrow' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, DoorMetalInitialRelativeTransform) == 0x000670, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::DoorMetalInitialRelativeTransform' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, BarRelativeTransform) == 0x0006A0, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::BarRelativeTransform' has a wrong offset!");
static_assert(offsetof(ASlidingLockMinusOperatableMinus01_BP_C, FrameMetalWorldTransform) == 0x0006D0, "Member 'ASlidingLockMinusOperatableMinus01_BP_C::FrameMetalWorldTransform' has a wrong offset!");

}

