#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ColorPastille

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "OPP_structs.hpp"


namespace SDK::Params
{

// Function ColorPastille.ColorPastille_C.OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ColorPastille_C_OnClicked__DelegateSignature final
{
public:
	class UColorPastille_C*                       ClickedPastille;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ColorPastille_C_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on ColorPastille_C_OnClicked__DelegateSignature");
static_assert(sizeof(ColorPastille_C_OnClicked__DelegateSignature) == 0x000008, "Wrong size on ColorPastille_C_OnClicked__DelegateSignature");
static_assert(offsetof(ColorPastille_C_OnClicked__DelegateSignature, ClickedPastille) == 0x000000, "Member 'ColorPastille_C_OnClicked__DelegateSignature::ClickedPastille' has a wrong offset!");

// Function ColorPastille.ColorPastille_C.OnHovered__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct ColorPastille_C_OnHovered__DelegateSignature final
{
public:
	struct FRBHairColorOption                     HoveredColor;                                      // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(ColorPastille_C_OnHovered__DelegateSignature) == 0x000004, "Wrong alignment on ColorPastille_C_OnHovered__DelegateSignature");
static_assert(sizeof(ColorPastille_C_OnHovered__DelegateSignature) == 0x000028, "Wrong size on ColorPastille_C_OnHovered__DelegateSignature");
static_assert(offsetof(ColorPastille_C_OnHovered__DelegateSignature, HoveredColor) == 0x000000, "Member 'ColorPastille_C_OnHovered__DelegateSignature::HoveredColor' has a wrong offset!");

// Function ColorPastille.ColorPastille_C.ExecuteUbergraph_ColorPastille
// 0x0004 (0x0004 - 0x0000)
struct ColorPastille_C_ExecuteUbergraph_ColorPastille final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ColorPastille_C_ExecuteUbergraph_ColorPastille) == 0x000004, "Wrong alignment on ColorPastille_C_ExecuteUbergraph_ColorPastille");
static_assert(sizeof(ColorPastille_C_ExecuteUbergraph_ColorPastille) == 0x000004, "Wrong size on ColorPastille_C_ExecuteUbergraph_ColorPastille");
static_assert(offsetof(ColorPastille_C_ExecuteUbergraph_ColorPastille, EntryPoint) == 0x000000, "Member 'ColorPastille_C_ExecuteUbergraph_ColorPastille::EntryPoint' has a wrong offset!");

// Function ColorPastille.ColorPastille_C.Init
// 0x0028 (0x0028 - 0x0000)
struct ColorPastille_C_Init final
{
public:
	struct FRBHairColorOption                     Hair_Color;                                        // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(ColorPastille_C_Init) == 0x000004, "Wrong alignment on ColorPastille_C_Init");
static_assert(sizeof(ColorPastille_C_Init) == 0x000028, "Wrong size on ColorPastille_C_Init");
static_assert(offsetof(ColorPastille_C_Init, Hair_Color) == 0x000000, "Member 'ColorPastille_C_Init::Hair_Color' has a wrong offset!");

// Function ColorPastille.ColorPastille_C.SetSelected
// 0x0002 (0x0002 - 0x0000)
struct ColorPastille_C_SetSelected final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ColorPastille_C_SetSelected) == 0x000001, "Wrong alignment on ColorPastille_C_SetSelected");
static_assert(sizeof(ColorPastille_C_SetSelected) == 0x000002, "Wrong size on ColorPastille_C_SetSelected");
static_assert(offsetof(ColorPastille_C_SetSelected, Selected) == 0x000000, "Member 'ColorPastille_C_SetSelected::Selected' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_SetSelected, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'ColorPastille_C_SetSelected::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function ColorPastille.ColorPastille_C.OnFocusReceived
// 0x01E0 (0x01E0 - 0x0000)
struct ColorPastille_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	class ARBMenuPlayerController*                CallFunc_GetLocalMenuController_ReturnValue;       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0100(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsUsingGamePad_ReturnValue;               // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0114(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0128(0x00B8)()
};
static_assert(alignof(ColorPastille_C_OnFocusReceived) == 0x000008, "Wrong alignment on ColorPastille_C_OnFocusReceived");
static_assert(sizeof(ColorPastille_C_OnFocusReceived) == 0x0001E0, "Wrong size on ColorPastille_C_OnFocusReceived");
static_assert(offsetof(ColorPastille_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'ColorPastille_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'ColorPastille_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'ColorPastille_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnFocusReceived, CallFunc_GetLocalMenuController_ReturnValue) == 0x0000F8, "Member 'ColorPastille_C_OnFocusReceived::CallFunc_GetLocalMenuController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnFocusReceived, K2Node_CreateDelegate_OutputDelegate) == 0x000100, "Member 'ColorPastille_C_OnFocusReceived::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnFocusReceived, CallFunc_IsUsingGamePad_ReturnValue) == 0x000110, "Member 'ColorPastille_C_OnFocusReceived::CallFunc_IsUsingGamePad_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnFocusReceived, K2Node_CreateDelegate_OutputDelegate_1) == 0x000114, "Member 'ColorPastille_C_OnFocusReceived::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x000128, "Member 'ColorPastille_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function ColorPastille.ColorPastille_C.OnFocusLost
// 0x0008 (0x0008 - 0x0000)
struct ColorPastille_C_OnFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(ColorPastille_C_OnFocusLost) == 0x000004, "Wrong alignment on ColorPastille_C_OnFocusLost");
static_assert(sizeof(ColorPastille_C_OnFocusLost) == 0x000008, "Wrong size on ColorPastille_C_OnFocusLost");
static_assert(offsetof(ColorPastille_C_OnFocusLost, InFocusEvent) == 0x000000, "Member 'ColorPastille_C_OnFocusLost::InFocusEvent' has a wrong offset!");

// Function ColorPastille.ColorPastille_C.SetHovered
// 0x0018 (0x0018 - 0x0000)
struct ColorPastille_C_SetHovered final
{
public:
	bool                                          IsHovered_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ColorPastille_C_SetHovered) == 0x000008, "Wrong alignment on ColorPastille_C_SetHovered");
static_assert(sizeof(ColorPastille_C_SetHovered) == 0x000018, "Wrong size on ColorPastille_C_SetHovered");
static_assert(offsetof(ColorPastille_C_SetHovered, IsHovered_0) == 0x000000, "Member 'ColorPastille_C_SetHovered::IsHovered_0' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_SetHovered, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'ColorPastille_C_SetHovered::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_SetHovered, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000010, "Member 'ColorPastille_C_SetHovered::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");

// Function ColorPastille.ColorPastille_C.OnAnalogValueChanged
// 0x01F8 (0x01F8 - 0x0000)
struct ColorPastille_C_OnAnalogValueChanged final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FAnalogInputEvent                      InAnalogInputEvent;                                // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	class ARBMenuPlayerController*                CallFunc_GetLocalMenuController_ReturnValue;       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            CallFunc_HandleGamepadCharacterRotationInput_ReturnValue; // 0x0138(0x00B8)()
	bool                                          CallFunc_IsUsingGamePad_ReturnValue;               // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ColorPastille_C_OnAnalogValueChanged) == 0x000008, "Wrong alignment on ColorPastille_C_OnAnalogValueChanged");
static_assert(sizeof(ColorPastille_C_OnAnalogValueChanged) == 0x0001F8, "Wrong size on ColorPastille_C_OnAnalogValueChanged");
static_assert(offsetof(ColorPastille_C_OnAnalogValueChanged, MyGeometry) == 0x000000, "Member 'ColorPastille_C_OnAnalogValueChanged::MyGeometry' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnAnalogValueChanged, InAnalogInputEvent) == 0x000038, "Member 'ColorPastille_C_OnAnalogValueChanged::InAnalogInputEvent' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnAnalogValueChanged, ReturnValue) == 0x000078, "Member 'ColorPastille_C_OnAnalogValueChanged::ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnAnalogValueChanged, CallFunc_GetLocalMenuController_ReturnValue) == 0x000130, "Member 'ColorPastille_C_OnAnalogValueChanged::CallFunc_GetLocalMenuController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnAnalogValueChanged, CallFunc_HandleGamepadCharacterRotationInput_ReturnValue) == 0x000138, "Member 'ColorPastille_C_OnAnalogValueChanged::CallFunc_HandleGamepadCharacterRotationInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_OnAnalogValueChanged, CallFunc_IsUsingGamePad_ReturnValue) == 0x0001F0, "Member 'ColorPastille_C_OnAnalogValueChanged::CallFunc_IsUsingGamePad_ReturnValue' has a wrong offset!");

// Function ColorPastille.ColorPastille_C.CreateTooltip
// 0x0038 (0x0038 - 0x0000)
struct ColorPastille_C_CreateTooltip final
{
public:
	class USimpleActionTooltip_C*                 CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)(ConstParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBMenuPlayerController*                CallFunc_GetLocalMenuController_ReturnValue;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUsingGamePad_ReturnValue;               // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ColorPastille_C_CreateTooltip) == 0x000008, "Wrong alignment on ColorPastille_C_CreateTooltip");
static_assert(sizeof(ColorPastille_C_CreateTooltip) == 0x000038, "Wrong size on ColorPastille_C_CreateTooltip");
static_assert(offsetof(ColorPastille_C_CreateTooltip, CallFunc_Create_ReturnValue) == 0x000000, "Member 'ColorPastille_C_CreateTooltip::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_CreateTooltip, Temp_text_Variable) == 0x000008, "Member 'ColorPastille_C_CreateTooltip::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_CreateTooltip, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ColorPastille_C_CreateTooltip::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_CreateTooltip, CallFunc_GetLocalMenuController_ReturnValue) == 0x000028, "Member 'ColorPastille_C_CreateTooltip::CallFunc_GetLocalMenuController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorPastille_C_CreateTooltip, CallFunc_IsUsingGamePad_ReturnValue) == 0x000030, "Member 'ColorPastille_C_CreateTooltip::CallFunc_IsUsingGamePad_ReturnValue' has a wrong offset!");

}

