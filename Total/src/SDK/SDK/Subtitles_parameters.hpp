#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Subtitles

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OPP_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function Subtitles.Subtitles_C.ExecuteUbergraph_Subtitles
// 0x0058 (0x0058 - 0x0000)
struct Subtitles_C_ExecuteUbergraph_Subtitles final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGameUserPreferences*                 CallFunc_GetRBGameUserPreferences_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class FString& CurrentSubtitle)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_GetSubtitlesBackground_ReturnValue;       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EUIFontSize                                   CallFunc_GetSubtitleSize_ReturnValue;              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URBMenuManager*                         CallFunc_GetMenuManager_ReturnValue;               // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_CurrentSubtitle;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Subtitles_C_ExecuteUbergraph_Subtitles) == 0x000008, "Wrong alignment on Subtitles_C_ExecuteUbergraph_Subtitles");
static_assert(sizeof(Subtitles_C_ExecuteUbergraph_Subtitles) == 0x000058, "Wrong size on Subtitles_C_ExecuteUbergraph_Subtitles");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, EntryPoint) == 0x000000, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::EntryPoint' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, CallFunc_GetRBGameUserPreferences_ReturnValue) == 0x000008, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::CallFunc_GetRBGameUserPreferences_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, CallFunc_GetSubtitlesBackground_ReturnValue) == 0x000024, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::CallFunc_GetSubtitlesBackground_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, CallFunc_GetSubtitleSize_ReturnValue) == 0x000025, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::CallFunc_GetSubtitleSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, Temp_bool_Variable) == 0x000038, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, Temp_byte_Variable) == 0x000039, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, Temp_byte_Variable_1) == 0x00003A, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, K2Node_Select_Default) == 0x00003B, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, CallFunc_GetMenuManager_ReturnValue) == 0x000040, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::CallFunc_GetMenuManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_ExecuteUbergraph_Subtitles, K2Node_CustomEvent_CurrentSubtitle) == 0x000048, "Member 'Subtitles_C_ExecuteUbergraph_Subtitles::K2Node_CustomEvent_CurrentSubtitle' has a wrong offset!");

// Function Subtitles.Subtitles_C.OnCurrentSubtitleUpdated
// 0x0010 (0x0010 - 0x0000)
struct Subtitles_C_OnCurrentSubtitleUpdated final
{
public:
	class FString                                 CurrentSubtitle;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Subtitles_C_OnCurrentSubtitleUpdated) == 0x000008, "Wrong alignment on Subtitles_C_OnCurrentSubtitleUpdated");
static_assert(sizeof(Subtitles_C_OnCurrentSubtitleUpdated) == 0x000010, "Wrong size on Subtitles_C_OnCurrentSubtitleUpdated");
static_assert(offsetof(Subtitles_C_OnCurrentSubtitleUpdated, CurrentSubtitle) == 0x000000, "Member 'Subtitles_C_OnCurrentSubtitleUpdated::CurrentSubtitle' has a wrong offset!");

// Function Subtitles.Subtitles_C.SetSubtitleText
// 0x0178 (0x0178 - 0x0000)
struct Subtitles_C_SetSubtitleText final
{
public:
	class FString                                 SubTitleText;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CJRemainingLine;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   MessageText;                                       // 0x0020(0x0018)(Edit, BlueprintVisible)
	class FString                                 CurrentLine;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBGameUserPreferences*                 CallFunc_GetRBGameUserPreferences_ReturnValue;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMaxCharactersPerLine_MaxCharactersPerLine; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetTextLanguage_ReturnValue;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_2;          // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B[0x1];                                       // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxCharactersPerLine_MaxCharactersPerLine_1; // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxCharactersPerLine_MaxCharactersPerLine_2; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_RightChop_ReturnValue;                    // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Left_ReturnValue;                         // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_TrimTrailing_ReturnValue;                 // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Trim_ReturnValue;                         // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_TrimTrailing_ReturnValue_1;               // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Trim_ReturnValue_1;                       // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue_1;                    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Len_ReturnValue_1;                        // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_ParseIntoArray_ReturnValue;               // 0x0118(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue_2;                        // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Subtitles_C_SetSubtitleText) == 0x000008, "Wrong alignment on Subtitles_C_SetSubtitleText");
static_assert(sizeof(Subtitles_C_SetSubtitleText) == 0x000178, "Wrong size on Subtitles_C_SetSubtitleText");
static_assert(offsetof(Subtitles_C_SetSubtitleText, SubTitleText) == 0x000000, "Member 'Subtitles_C_SetSubtitleText::SubTitleText' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CJRemainingLine) == 0x000010, "Member 'Subtitles_C_SetSubtitleText::CJRemainingLine' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, MessageText) == 0x000020, "Member 'Subtitles_C_SetSubtitleText::MessageText' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CurrentLine) == 0x000038, "Member 'Subtitles_C_SetSubtitleText::CurrentLine' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'Subtitles_C_SetSubtitleText::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_IsEmpty_ReturnValue) == 0x00004C, "Member 'Subtitles_C_SetSubtitleText::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, Temp_int_Array_Index_Variable) == 0x000054, "Member 'Subtitles_C_SetSubtitleText::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_GetRBGameUserPreferences_ReturnValue) == 0x000058, "Member 'Subtitles_C_SetSubtitleText::CallFunc_GetRBGameUserPreferences_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_GetMaxCharactersPerLine_MaxCharactersPerLine) == 0x000060, "Member 'Subtitles_C_SetSubtitleText::CallFunc_GetMaxCharactersPerLine_MaxCharactersPerLine' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_IsValid_ReturnValue) == 0x000064, "Member 'Subtitles_C_SetSubtitleText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_GetTextLanguage_ReturnValue) == 0x000068, "Member 'Subtitles_C_SetSubtitleText::CallFunc_GetTextLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000078, "Member 'Subtitles_C_SetSubtitleText::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000079, "Member 'Subtitles_C_SetSubtitleText::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_EqualEqual_StrStr_ReturnValue_2) == 0x00007A, "Member 'Subtitles_C_SetSubtitleText::CallFunc_EqualEqual_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_GetMaxCharactersPerLine_MaxCharactersPerLine_1) == 0x00007C, "Member 'Subtitles_C_SetSubtitleText::CallFunc_GetMaxCharactersPerLine_MaxCharactersPerLine_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_BooleanOR_ReturnValue) == 0x000080, "Member 'Subtitles_C_SetSubtitleText::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_GetMaxCharactersPerLine_MaxCharactersPerLine_2) == 0x000084, "Member 'Subtitles_C_SetSubtitleText::CallFunc_GetMaxCharactersPerLine_MaxCharactersPerLine_2' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_BooleanOR_ReturnValue_1) == 0x000088, "Member 'Subtitles_C_SetSubtitleText::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_RightChop_ReturnValue) == 0x000090, "Member 'Subtitles_C_SetSubtitleText::CallFunc_RightChop_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Left_ReturnValue) == 0x0000A0, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Left_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_TrimTrailing_ReturnValue) == 0x0000B0, "Member 'Subtitles_C_SetSubtitleText::CallFunc_TrimTrailing_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Trim_ReturnValue) == 0x0000C0, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Trim_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_TrimTrailing_ReturnValue_1) == 0x0000D0, "Member 'Subtitles_C_SetSubtitleText::CallFunc_TrimTrailing_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Trim_ReturnValue_1) == 0x0000E0, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Trim_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Len_ReturnValue) == 0x0000F0, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Greater_IntInt_ReturnValue) == 0x0000F4, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Concat_StrStr_ReturnValue) == 0x0000F8, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_IsEmpty_ReturnValue_1) == 0x000108, "Member 'Subtitles_C_SetSubtitleText::CallFunc_IsEmpty_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Len_ReturnValue_1) == 0x00010C, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Len_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, Temp_bool_Variable) == 0x000110, "Member 'Subtitles_C_SetSubtitleText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_ParseIntoArray_ReturnValue) == 0x000118, "Member 'Subtitles_C_SetSubtitleText::CallFunc_ParseIntoArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Array_Length_ReturnValue) == 0x000128, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Array_Get_Item) == 0x000130, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Less_IntInt_ReturnValue) == 0x000140, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000148, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, K2Node_Select_Default) == 0x000158, "Member 'Subtitles_C_SetSubtitleText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Len_ReturnValue_2) == 0x000168, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Len_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Add_IntInt_ReturnValue_1) == 0x00016C, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_Add_IntInt_ReturnValue_2) == 0x000170, "Member 'Subtitles_C_SetSubtitleText::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Subtitles_C_SetSubtitleText, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000174, "Member 'Subtitles_C_SetSubtitleText::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function Subtitles.Subtitles_C.UpdateTextSize
// 0x0070 (0x0070 - 0x0000)
struct Subtitles_C_UpdateTextSize final
{
public:
	EUIFontSize                                   Size;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGlobalUIConfig*                      CallFunc_GetGlobalUIConfig_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0018(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(Subtitles_C_UpdateTextSize) == 0x000008, "Wrong alignment on Subtitles_C_UpdateTextSize");
static_assert(sizeof(Subtitles_C_UpdateTextSize) == 0x000070, "Wrong size on Subtitles_C_UpdateTextSize");
static_assert(offsetof(Subtitles_C_UpdateTextSize, Size) == 0x000000, "Member 'Subtitles_C_UpdateTextSize::Size' has a wrong offset!");
static_assert(offsetof(Subtitles_C_UpdateTextSize, CallFunc_GetGlobalUIConfig_ReturnValue) == 0x000008, "Member 'Subtitles_C_UpdateTextSize::CallFunc_GetGlobalUIConfig_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_UpdateTextSize, CallFunc_Map_Find_Value) == 0x000010, "Member 'Subtitles_C_UpdateTextSize::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(Subtitles_C_UpdateTextSize, CallFunc_Map_Find_ReturnValue) == 0x000014, "Member 'Subtitles_C_UpdateTextSize::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_UpdateTextSize, K2Node_MakeStruct_SlateFontInfo) == 0x000018, "Member 'Subtitles_C_UpdateTextSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function Subtitles.Subtitles_C.GetMaxCharactersPerLine
// 0x000C (0x000C - 0x0000)
struct Subtitles_C_GetMaxCharactersPerLine final
{
public:
	int32                                         MaxCharactersPerLine;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCJKLanguage_ReturnValue;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Subtitles_C_GetMaxCharactersPerLine) == 0x000004, "Wrong alignment on Subtitles_C_GetMaxCharactersPerLine");
static_assert(sizeof(Subtitles_C_GetMaxCharactersPerLine) == 0x00000C, "Wrong size on Subtitles_C_GetMaxCharactersPerLine");
static_assert(offsetof(Subtitles_C_GetMaxCharactersPerLine, MaxCharactersPerLine) == 0x000000, "Member 'Subtitles_C_GetMaxCharactersPerLine::MaxCharactersPerLine' has a wrong offset!");
static_assert(offsetof(Subtitles_C_GetMaxCharactersPerLine, CallFunc_IsCJKLanguage_ReturnValue) == 0x000004, "Member 'Subtitles_C_GetMaxCharactersPerLine::CallFunc_IsCJKLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_GetMaxCharactersPerLine, CallFunc_SelectInt_ReturnValue) == 0x000008, "Member 'Subtitles_C_GetMaxCharactersPerLine::CallFunc_SelectInt_ReturnValue' has a wrong offset!");

// Function Subtitles.Subtitles_C.IsCJKLanguage
// 0x0028 (0x0028 - 0x0000)
struct Subtitles_C_IsCJKLanguage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGameUserPreferences*                 CallFunc_GetRBGameUserPreferences_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetTextLanguage_ReturnValue;              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_2;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_3;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Subtitles_C_IsCJKLanguage) == 0x000008, "Wrong alignment on Subtitles_C_IsCJKLanguage");
static_assert(sizeof(Subtitles_C_IsCJKLanguage) == 0x000028, "Wrong size on Subtitles_C_IsCJKLanguage");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, ReturnValue) == 0x000000, "Member 'Subtitles_C_IsCJKLanguage::ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_GetRBGameUserPreferences_ReturnValue) == 0x000008, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_GetRBGameUserPreferences_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_GetTextLanguage_ReturnValue) == 0x000010, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_GetTextLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000021, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000022, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_EqualEqual_StrStr_ReturnValue_2) == 0x000023, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_EqualEqual_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_EqualEqual_StrStr_ReturnValue_3) == 0x000024, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_EqualEqual_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_BooleanOR_ReturnValue) == 0x000025, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_BooleanOR_ReturnValue_1) == 0x000026, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_IsCJKLanguage, CallFunc_BooleanOR_ReturnValue_2) == 0x000027, "Member 'Subtitles_C_IsCJKLanguage::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function Subtitles.Subtitles_C.AddStringToMessage
// 0x0128 (0x0128 - 0x0000)
struct Subtitles_C_AddStringToMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 String;                                            // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0048(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A0(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F8(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0110(0x0018)()
};
static_assert(alignof(Subtitles_C_AddStringToMessage) == 0x000008, "Wrong alignment on Subtitles_C_AddStringToMessage");
static_assert(sizeof(Subtitles_C_AddStringToMessage) == 0x000128, "Wrong size on Subtitles_C_AddStringToMessage");
static_assert(offsetof(Subtitles_C_AddStringToMessage, Message) == 0x000000, "Member 'Subtitles_C_AddStringToMessage::Message' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, String) == 0x000018, "Member 'Subtitles_C_AddStringToMessage::String' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, Temp_bool_Variable) == 0x000028, "Member 'Subtitles_C_AddStringToMessage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'Subtitles_C_AddStringToMessage::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000048, "Member 'Subtitles_C_AddStringToMessage::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'Subtitles_C_AddStringToMessage::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A0, "Member 'Subtitles_C_AddStringToMessage::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, CallFunc_TextIsEmpty_ReturnValue) == 0x0000E0, "Member 'Subtitles_C_AddStringToMessage::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, K2Node_MakeArray_Array) == 0x0000E8, "Member 'Subtitles_C_AddStringToMessage::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, CallFunc_Format_ReturnValue) == 0x0000F8, "Member 'Subtitles_C_AddStringToMessage::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(Subtitles_C_AddStringToMessage, K2Node_Select_Default) == 0x000110, "Member 'Subtitles_C_AddStringToMessage::K2Node_Select_Default' has a wrong offset!");

}

