#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBGaugeBase

#include "Basic.hpp"


namespace SDK::Params
{

// Function RBGaugeBase.RBGaugeBase_C.SetValue_Server
// 0x0008 (0x0008 - 0x0000)
struct RBGaugeBase_C_SetValue_Server final
{
public:
	float                                         Value_Server_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBGaugeBase_C_SetValue_Server) == 0x000004, "Wrong alignment on RBGaugeBase_C_SetValue_Server");
static_assert(sizeof(RBGaugeBase_C_SetValue_Server) == 0x000008, "Wrong size on RBGaugeBase_C_SetValue_Server");
static_assert(offsetof(RBGaugeBase_C_SetValue_Server, Value_Server_0) == 0x000000, "Member 'RBGaugeBase_C_SetValue_Server::Value_Server_0' has a wrong offset!");
static_assert(offsetof(RBGaugeBase_C_SetValue_Server, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'RBGaugeBase_C_SetValue_Server::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBGaugeBase_C_SetValue_Server, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'RBGaugeBase_C_SetValue_Server::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function RBGaugeBase.RBGaugeBase_C.UpdateLocalNeedleValue
// 0x000C (0x000C - 0x0000)
struct RBGaugeBase_C_UpdateLocalNeedleValue final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBGaugeBase_C_UpdateLocalNeedleValue) == 0x000004, "Wrong alignment on RBGaugeBase_C_UpdateLocalNeedleValue");
static_assert(sizeof(RBGaugeBase_C_UpdateLocalNeedleValue) == 0x00000C, "Wrong size on RBGaugeBase_C_UpdateLocalNeedleValue");
static_assert(offsetof(RBGaugeBase_C_UpdateLocalNeedleValue, DeltaTime) == 0x000000, "Member 'RBGaugeBase_C_UpdateLocalNeedleValue::DeltaTime' has a wrong offset!");
static_assert(offsetof(RBGaugeBase_C_UpdateLocalNeedleValue, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'RBGaugeBase_C_UpdateLocalNeedleValue::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBGaugeBase_C_UpdateLocalNeedleValue, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000005, "Member 'RBGaugeBase_C_UpdateLocalNeedleValue::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBGaugeBase_C_UpdateLocalNeedleValue, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'RBGaugeBase_C_UpdateLocalNeedleValue::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBGaugeBase_C_UpdateLocalNeedleValue, CallFunc_FInterpTo_ReturnValue) == 0x000008, "Member 'RBGaugeBase_C_UpdateLocalNeedleValue::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");

// Function RBGaugeBase.RBGaugeBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct RBGaugeBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBGaugeBase_C_ReceiveTick) == 0x000004, "Wrong alignment on RBGaugeBase_C_ReceiveTick");
static_assert(sizeof(RBGaugeBase_C_ReceiveTick) == 0x000004, "Wrong size on RBGaugeBase_C_ReceiveTick");
static_assert(offsetof(RBGaugeBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'RBGaugeBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function RBGaugeBase.RBGaugeBase_C.ExecuteUbergraph_RBGaugeBase
// 0x0008 (0x0008 - 0x0000)
struct RBGaugeBase_C_ExecuteUbergraph_RBGaugeBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBGaugeBase_C_ExecuteUbergraph_RBGaugeBase) == 0x000004, "Wrong alignment on RBGaugeBase_C_ExecuteUbergraph_RBGaugeBase");
static_assert(sizeof(RBGaugeBase_C_ExecuteUbergraph_RBGaugeBase) == 0x000008, "Wrong size on RBGaugeBase_C_ExecuteUbergraph_RBGaugeBase");
static_assert(offsetof(RBGaugeBase_C_ExecuteUbergraph_RBGaugeBase, EntryPoint) == 0x000000, "Member 'RBGaugeBase_C_ExecuteUbergraph_RBGaugeBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(RBGaugeBase_C_ExecuteUbergraph_RBGaugeBase, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'RBGaugeBase_C_ExecuteUbergraph_RBGaugeBase::K2Node_Event_DeltaSeconds' has a wrong offset!");

}

