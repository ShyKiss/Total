#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hacking_SkillController_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Hacking_SkillController_BP.Hacking_SkillController_BP_C.ExecuteUbergraph_Hacking_SkillController_BP
// 0x0018 (0x0018 - 0x0000)
struct Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_hackableComponent;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidFocus_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP) == 0x000008, "Wrong alignment on Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP");
static_assert(sizeof(Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP) == 0x000018, "Wrong size on Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP");
static_assert(offsetof(Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP, EntryPoint) == 0x000000, "Member 'Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP, K2Node_Event_hackableComponent) == 0x000008, "Member 'Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP::K2Node_Event_hackableComponent' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP, CallFunc_IsValidFocus_ReturnValue) == 0x000010, "Member 'Hacking_SkillController_BP_C_ExecuteUbergraph_Hacking_SkillController_BP::CallFunc_IsValidFocus_ReturnValue' has a wrong offset!");

// Function Hacking_SkillController_BP.Hacking_SkillController_BP_C.Event_OnFocusedHackableChanged
// 0x0008 (0x0008 - 0x0000)
struct Hacking_SkillController_BP_C_Event_OnFocusedHackableChanged final
{
public:
	class UObject*                                HackableComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hacking_SkillController_BP_C_Event_OnFocusedHackableChanged) == 0x000008, "Wrong alignment on Hacking_SkillController_BP_C_Event_OnFocusedHackableChanged");
static_assert(sizeof(Hacking_SkillController_BP_C_Event_OnFocusedHackableChanged) == 0x000008, "Wrong size on Hacking_SkillController_BP_C_Event_OnFocusedHackableChanged");
static_assert(offsetof(Hacking_SkillController_BP_C_Event_OnFocusedHackableChanged, HackableComponent) == 0x000000, "Member 'Hacking_SkillController_BP_C_Event_OnFocusedHackableChanged::HackableComponent' has a wrong offset!");

// Function Hacking_SkillController_BP.Hacking_SkillController_BP_C.BP_TickItem
// 0x000C (0x000C - 0x0000)
struct Hacking_SkillController_BP_C_BP_TickItem final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          bKeepTicking;                                      // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TickProgress_bKeepTicking;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_TickItem_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TickLight_bKeepTicking;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hacking_SkillController_BP_C_BP_TickItem) == 0x000004, "Wrong alignment on Hacking_SkillController_BP_C_BP_TickItem");
static_assert(sizeof(Hacking_SkillController_BP_C_BP_TickItem) == 0x00000C, "Wrong size on Hacking_SkillController_BP_C_BP_TickItem");
static_assert(offsetof(Hacking_SkillController_BP_C_BP_TickItem, DeltaTime) == 0x000000, "Member 'Hacking_SkillController_BP_C_BP_TickItem::DeltaTime' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_BP_TickItem, ReturnValue) == 0x000004, "Member 'Hacking_SkillController_BP_C_BP_TickItem::ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_BP_TickItem, bKeepTicking) == 0x000005, "Member 'Hacking_SkillController_BP_C_BP_TickItem::bKeepTicking' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_BP_TickItem, CallFunc_IsDedicatedServer_ReturnValue) == 0x000006, "Member 'Hacking_SkillController_BP_C_BP_TickItem::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_BP_TickItem, CallFunc_TickProgress_bKeepTicking) == 0x000007, "Member 'Hacking_SkillController_BP_C_BP_TickItem::CallFunc_TickProgress_bKeepTicking' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_BP_TickItem, CallFunc_BP_TickItem_ReturnValue) == 0x000008, "Member 'Hacking_SkillController_BP_C_BP_TickItem::CallFunc_BP_TickItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_BP_TickItem, CallFunc_TickLight_bKeepTicking) == 0x000009, "Member 'Hacking_SkillController_BP_C_BP_TickItem::CallFunc_TickLight_bKeepTicking' has a wrong offset!");

// Function Hacking_SkillController_BP.Hacking_SkillController_BP_C.TickLight
// 0x0050 (0x0050 - 0x0000)
struct Hacking_SkillController_BP_C_TickLight final
{
public:
	bool                                          bKeepTicking;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTime_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PerlinNoise1D_ReturnValue;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hacking_SkillController_BP_C_TickLight) == 0x000004, "Wrong alignment on Hacking_SkillController_BP_C_TickLight");
static_assert(sizeof(Hacking_SkillController_BP_C_TickLight) == 0x000050, "Wrong size on Hacking_SkillController_BP_C_TickLight");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, bKeepTicking) == 0x000000, "Member 'Hacking_SkillController_BP_C_TickLight::bKeepTicking' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, CallFunc_GetGameTime_ReturnValue) == 0x000004, "Member 'Hacking_SkillController_BP_C_TickLight::CallFunc_GetGameTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, K2Node_MakeStruct_LinearColor) == 0x000008, "Member 'Hacking_SkillController_BP_C_TickLight::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'Hacking_SkillController_BP_C_TickLight::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, CallFunc_PerlinNoise1D_ReturnValue) == 0x00001C, "Member 'Hacking_SkillController_BP_C_TickLight::CallFunc_PerlinNoise1D_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, K2Node_MakeStruct_LinearColor_1) == 0x000020, "Member 'Hacking_SkillController_BP_C_TickLight::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000030, "Member 'Hacking_SkillController_BP_C_TickLight::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, CallFunc_Add_FloatFloat_ReturnValue) == 0x000034, "Member 'Hacking_SkillController_BP_C_TickLight::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'Hacking_SkillController_BP_C_TickLight::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, K2Node_MakeStruct_LinearColor_2) == 0x00003C, "Member 'Hacking_SkillController_BP_C_TickLight::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickLight, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00004C, "Member 'Hacking_SkillController_BP_C_TickLight::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function Hacking_SkillController_BP.Hacking_SkillController_BP_C.TickProgress
// 0x00BC (0x00BC - 0x0000)
struct Hacking_SkillController_BP_C_TickProgress final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bKeepTicking;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProgressRatio;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x002C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_GetProgressRatio_ReturnValue;             // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hacking_SkillController_BP_C_TickProgress) == 0x000004, "Wrong alignment on Hacking_SkillController_BP_C_TickProgress");
static_assert(sizeof(Hacking_SkillController_BP_C_TickProgress) == 0x0000BC, "Wrong size on Hacking_SkillController_BP_C_TickProgress");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, DeltaTime) == 0x000000, "Member 'Hacking_SkillController_BP_C_TickProgress::DeltaTime' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, bKeepTicking) == 0x000004, "Member 'Hacking_SkillController_BP_C_TickProgress::bKeepTicking' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, ProgressRatio) == 0x000008, "Member 'Hacking_SkillController_BP_C_TickProgress::ProgressRatio' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00000C, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00000D, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_BooleanOR_ReturnValue) == 0x000014, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000024, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000025, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_FInterpTo_ReturnValue) == 0x000028, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x00002C, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_GetProgressRatio_ReturnValue) == 0x0000B4, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_GetProgressRatio_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickProgress, CallFunc_FClamp_ReturnValue) == 0x0000B8, "Member 'Hacking_SkillController_BP_C_TickProgress::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function Hacking_SkillController_BP.Hacking_SkillController_BP_C.SetHasHackabledInFocus
// 0x0002 (0x0002 - 0x0000)
struct Hacking_SkillController_BP_C_SetHasHackabledInFocus final
{
public:
	bool                                          bNewHasHackableInFocus;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hacking_SkillController_BP_C_SetHasHackabledInFocus) == 0x000001, "Wrong alignment on Hacking_SkillController_BP_C_SetHasHackabledInFocus");
static_assert(sizeof(Hacking_SkillController_BP_C_SetHasHackabledInFocus) == 0x000002, "Wrong size on Hacking_SkillController_BP_C_SetHasHackabledInFocus");
static_assert(offsetof(Hacking_SkillController_BP_C_SetHasHackabledInFocus, bNewHasHackableInFocus) == 0x000000, "Member 'Hacking_SkillController_BP_C_SetHasHackabledInFocus::bNewHasHackableInFocus' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_SetHasHackabledInFocus, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'Hacking_SkillController_BP_C_SetHasHackabledInFocus::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function Hacking_SkillController_BP.Hacking_SkillController_BP_C.TickAudioProgress
// 0x0028 (0x0028 - 0x0000)
struct Hacking_SkillController_BP_C_TickAudioProgress final
{
public:
	bool                                          bHasProgress;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProgressRatio;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBSettings_Audio*                      CallFunc_GetRBSettings_Audio_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetProgressRatio_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              CallFunc_BP_GetPlayerOwner_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetProgressRatio_ReturnValue_1;           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hacking_SkillController_BP_C_TickAudioProgress) == 0x000008, "Wrong alignment on Hacking_SkillController_BP_C_TickAudioProgress");
static_assert(sizeof(Hacking_SkillController_BP_C_TickAudioProgress) == 0x000028, "Wrong size on Hacking_SkillController_BP_C_TickAudioProgress");
static_assert(offsetof(Hacking_SkillController_BP_C_TickAudioProgress, bHasProgress) == 0x000000, "Member 'Hacking_SkillController_BP_C_TickAudioProgress::bHasProgress' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickAudioProgress, ProgressRatio) == 0x000004, "Member 'Hacking_SkillController_BP_C_TickAudioProgress::ProgressRatio' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickAudioProgress, CallFunc_GetRBSettings_Audio_ReturnValue) == 0x000008, "Member 'Hacking_SkillController_BP_C_TickAudioProgress::CallFunc_GetRBSettings_Audio_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickAudioProgress, CallFunc_GetProgressRatio_ReturnValue) == 0x000010, "Member 'Hacking_SkillController_BP_C_TickAudioProgress::CallFunc_GetProgressRatio_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickAudioProgress, CallFunc_FClamp_ReturnValue) == 0x000014, "Member 'Hacking_SkillController_BP_C_TickAudioProgress::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickAudioProgress, CallFunc_BP_GetPlayerOwner_ReturnValue) == 0x000018, "Member 'Hacking_SkillController_BP_C_TickAudioProgress::CallFunc_BP_GetPlayerOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickAudioProgress, CallFunc_GetProgressRatio_ReturnValue_1) == 0x000020, "Member 'Hacking_SkillController_BP_C_TickAudioProgress::CallFunc_GetProgressRatio_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickAudioProgress, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000024, "Member 'Hacking_SkillController_BP_C_TickAudioProgress::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_TickAudioProgress, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000025, "Member 'Hacking_SkillController_BP_C_TickAudioProgress::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function Hacking_SkillController_BP.Hacking_SkillController_BP_C.RefreshAudioState
// 0x0020 (0x0020 - 0x0000)
struct Hacking_SkillController_BP_C_RefreshAudioState final
{
public:
	bool                                          bShouldHaveProgressLoop;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bShouldHaveFocusLoop;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              CallFunc_BP_GetPlayerOwner_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PlayLoopingSound_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_StopLoopingSound_ReturnValue;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PlayLoopingSound_ReturnValue_1;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_StopLoopingSound_ReturnValue_1;           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hacking_SkillController_BP_C_RefreshAudioState) == 0x000008, "Wrong alignment on Hacking_SkillController_BP_C_RefreshAudioState");
static_assert(sizeof(Hacking_SkillController_BP_C_RefreshAudioState) == 0x000020, "Wrong size on Hacking_SkillController_BP_C_RefreshAudioState");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshAudioState, bShouldHaveProgressLoop) == 0x000000, "Member 'Hacking_SkillController_BP_C_RefreshAudioState::bShouldHaveProgressLoop' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshAudioState, bShouldHaveFocusLoop) == 0x000001, "Member 'Hacking_SkillController_BP_C_RefreshAudioState::bShouldHaveFocusLoop' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshAudioState, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'Hacking_SkillController_BP_C_RefreshAudioState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshAudioState, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'Hacking_SkillController_BP_C_RefreshAudioState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshAudioState, CallFunc_BP_GetPlayerOwner_ReturnValue) == 0x000008, "Member 'Hacking_SkillController_BP_C_RefreshAudioState::CallFunc_BP_GetPlayerOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshAudioState, CallFunc_PlayLoopingSound_ReturnValue) == 0x000010, "Member 'Hacking_SkillController_BP_C_RefreshAudioState::CallFunc_PlayLoopingSound_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshAudioState, CallFunc_StopLoopingSound_ReturnValue) == 0x000014, "Member 'Hacking_SkillController_BP_C_RefreshAudioState::CallFunc_StopLoopingSound_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshAudioState, CallFunc_PlayLoopingSound_ReturnValue_1) == 0x000018, "Member 'Hacking_SkillController_BP_C_RefreshAudioState::CallFunc_PlayLoopingSound_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshAudioState, CallFunc_StopLoopingSound_ReturnValue_1) == 0x00001C, "Member 'Hacking_SkillController_BP_C_RefreshAudioState::CallFunc_StopLoopingSound_ReturnValue_1' has a wrong offset!");

// Function Hacking_SkillController_BP.Hacking_SkillController_BP_C.RefreshLightCount
// 0x0080 (0x0080 - 0x0000)
struct Hacking_SkillController_BP_C_RefreshLightCount final
{
public:
	float                                         UpgradedCooldown;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DesiredNumberOfLights;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_2;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Temp_object_Variable_3;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default_1;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCooldownOfHackableInFocus_ReturnValue; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URBSettings_Gameplay*                   CallFunc_GetRBSettings_Gameplay_ReturnValue;       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hacking_SkillController_BP_C_RefreshLightCount) == 0x000008, "Wrong alignment on Hacking_SkillController_BP_C_RefreshLightCount");
static_assert(sizeof(Hacking_SkillController_BP_C_RefreshLightCount) == 0x000080, "Wrong size on Hacking_SkillController_BP_C_RefreshLightCount");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, UpgradedCooldown) == 0x000000, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::UpgradedCooldown' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, DesiredNumberOfLights) == 0x000004, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::DesiredNumberOfLights' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_int_Variable) == 0x000008, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_int_Variable_1) == 0x00000C, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_int_Variable_2) == 0x000010, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_int_Variable_3) == 0x000014, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_object_Variable) == 0x000018, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_object_Variable_1) == 0x000020, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_object_Variable_2) == 0x000028, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_bool_Variable) == 0x000030, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_object_Variable_3) == 0x000038, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_int_Variable_4) == 0x000040, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, K2Node_Select_Default) == 0x000048, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, K2Node_Select_Default_1) == 0x000050, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000058, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, CallFunc_Add_IntInt_ReturnValue) == 0x00005C, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, CallFunc_GetCooldownOfHackableInFocus_ReturnValue) == 0x000060, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::CallFunc_GetCooldownOfHackableInFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, Temp_int_Variable_5) == 0x000064, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, K2Node_Select_Default_2) == 0x000068, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00006C, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, CallFunc_GetRBSettings_Gameplay_ReturnValue) == 0x000070, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::CallFunc_GetRBSettings_Gameplay_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000078, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hacking_SkillController_BP_C_RefreshLightCount, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000079, "Member 'Hacking_SkillController_BP_C_RefreshLightCount::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

}

