#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBGraffitisFeatureSwitchBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EGraffitisVisualType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "RBFeatureSwitchActorBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RBGraffitisFeatureSwitchBase.RBGraffitisFeatureSwitchBase_C
// 0x0070 (0x02A8 - 0x0238)
class ARBGraffitisFeatureSwitchBase_C : public ARBFeatureSwitchActorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          PingCollision;                                     // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPingComponent*                       RBPing;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DecalMesh;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EGraffitisVisualType                          GraffitiVisualType;                                // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceConstant*              Material;                                          // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh;                                              // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         ActivatedForFeatureSwitches;                       // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DecalColor;                                        // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DynamicData;                                       // 0x0294(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool OnWorldPopulateFinishedTimeSliced();
	void SetColorParameters();
	void ValidateFeatureSwitch();
	void ApplyMaterial();
	void SetVisualType();
	void UserConstructionScript();
	void OnWorldFullyLoaded();
	void OnWorldPopulateFinished();
	void ExecuteUbergraph_RBGraffitisFeatureSwitchBase(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RBGraffitisFeatureSwitchBase_C">();
	}
	static class ARBGraffitisFeatureSwitchBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARBGraffitisFeatureSwitchBase_C>();
	}
};
static_assert(alignof(ARBGraffitisFeatureSwitchBase_C) == 0x000008, "Wrong alignment on ARBGraffitisFeatureSwitchBase_C");
static_assert(sizeof(ARBGraffitisFeatureSwitchBase_C) == 0x0002A8, "Wrong size on ARBGraffitisFeatureSwitchBase_C");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, UberGraphFrame) == 0x000238, "Member 'ARBGraffitisFeatureSwitchBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, PingCollision) == 0x000240, "Member 'ARBGraffitisFeatureSwitchBase_C::PingCollision' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, RBPing) == 0x000248, "Member 'ARBGraffitisFeatureSwitchBase_C::RBPing' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, Billboard) == 0x000250, "Member 'ARBGraffitisFeatureSwitchBase_C::Billboard' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, DecalMesh) == 0x000258, "Member 'ARBGraffitisFeatureSwitchBase_C::DecalMesh' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, Decal) == 0x000260, "Member 'ARBGraffitisFeatureSwitchBase_C::Decal' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, GraffitiVisualType) == 0x000268, "Member 'ARBGraffitisFeatureSwitchBase_C::GraffitiVisualType' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, Material) == 0x000270, "Member 'ARBGraffitisFeatureSwitchBase_C::Material' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, Mesh) == 0x000278, "Member 'ARBGraffitisFeatureSwitchBase_C::Mesh' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, ActivatedForFeatureSwitches) == 0x000280, "Member 'ARBGraffitisFeatureSwitchBase_C::ActivatedForFeatureSwitches' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, DecalColor) == 0x000290, "Member 'ARBGraffitisFeatureSwitchBase_C::DecalColor' has a wrong offset!");
static_assert(offsetof(ARBGraffitisFeatureSwitchBase_C, DynamicData) == 0x000294, "Member 'ARBGraffitisFeatureSwitchBase_C::DynamicData' has a wrong offset!");

}

