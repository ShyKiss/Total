#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundTrap_Base_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SoundTrap_ENU_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"
#include "SoundTrap_Stuc_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SoundTrap_Base_BP.SoundTrap_Base_BP_C
// 0x01C0 (0x0420 - 0x0260)
class ASoundTrap_Base_BP_C : public ARBSoundTrap
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URBEditorClearanceCollisionBoxComponent* RBEditorClearanceCollisionBox;                     // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActiveSkillVisionComponent*          RBActiveSkillVision;                               // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPingComponent*                       RBPing;                                            // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Anchor;                                            // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ActiveSkillWaveSphere;                             // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRoomAssociationComponent*            RBRoomAssociation;                                 // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBObstacleVariatorComponent*           RBObstacleVariator;                                // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBObjectiveProximityComponent*         RBObjectiveProximity;                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBContinuousMovementSoundComponent*    RBContinuousMovementSound;                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRandomizableHelperComponent*         RBRandomizableHelper;                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  RadialForce;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 RopeComponent;                                     // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ESoundTrap_ENU                                Rope;                                              // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoundTrap_Stuc>                Attachements;                                      // 0x02E0(0x0010)(Edit, BlueprintVisible)
	int32                                         SelectMesh;                                        // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Sound;                                             // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBumped;                                           // 0x0300(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BumpedLocation;                                    // 0x0304(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          ObjectMovementStartedSound;                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          ObjectMovementStoppedSound;                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TrapSize;                                          // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CapsuleOffset;                                     // 0x0324(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          SkeletalMeshRef;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsAsset*                          PhysicalAssetRef;                                  // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RopeSize;                                          // 0x0340(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 AvailableRopeSize;                                 // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LesserRopeSize;                                    // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LesserRopeSizeIndex;                               // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMesh*>                  RopeSkeletalMeshRefs;                              // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UPhysicsAsset*>                  RopePhysicalAssetRefs;                             // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USkeletalMesh*>                  ChainSkeletalMeshRefs;                             // 0x0388(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ScaleFactor;                                       // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentHitLocation;                                // 0x039C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              CurrentHitPlayer;                                  // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastHitTimestamp;                                  // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayUntilReset;                                   // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESoundTrapActivator                           SoundTrapActivator;                                // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAnchor;                                         // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA[0x6];                                      // 0x03BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AnchorGizmo;                                       // 0x03C0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class UStaticMesh*                            AnchorRopeMesh;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            AnchorChainMesh;                                   // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            AnchorMeshOverwrite;                               // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReset;                                           // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnchorHeight;                                      // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRopeSize;                                       // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool GetStateName(class FString* StateA, class FString* StateB);
	void ConstructionClearanceBoxSize();
	void SnapToCeiling();
	void SnapToFloor();
	void SnapToGround_Internal(float GroundOffset, float MaxRandom);
	void SnapToCrouch();
	void Editor_RopeOverlap(bool* bOverlaps, class FString* OutOverlaps);
	bool BP_MapCheck(EMapCheckType CheckType, class FString* OutErrorMsg);
	void SetAnchor();
	void EnableRopePhysics(bool EnablePhysics);
	void ResetRopeToInitial();
	void SetScale();
	void SetGizmo();
	void ConstructSound();
	void Initialize();
	void OnBumped();
	void OnRep_bBumped();
	void UserConstructionScript();
	void PrepareState(bool bStateA, class AActor* RandomOwner);
	void SetState(bool bStateA);
	void ReceiveBeginPlay();
	void BndEvt__RBRandomizableHelper_K2Node_ComponentBoundEvent_3_OnRandomStateChangedEvent__DelegateSignature();
	void Server_SoundTrapActivated(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void SetShouldBeIgnoredForLots(bool bValue);
	void BP_OnHitByThrowable(const struct FVector& HitLocation, class ARBThrowableWeapon* ThrowableWeapon);
	void ProjectileHitSoundMulticast(const class FString& SwitchName);
	void ExecuteUbergraph_SoundTrap_Base_BP(int32 EntryPoint);

	bool IsRandomStateSet() const;
	bool IsStateA() const;
	bool ShouldBeIgnoredForLots() const;
	class UCapsuleComponent* BP_GetCollisionCapsule() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SoundTrap_Base_BP_C">();
	}
	static class ASoundTrap_Base_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASoundTrap_Base_BP_C>();
	}
};
static_assert(alignof(ASoundTrap_Base_BP_C) == 0x000010, "Wrong alignment on ASoundTrap_Base_BP_C");
static_assert(sizeof(ASoundTrap_Base_BP_C) == 0x000420, "Wrong size on ASoundTrap_Base_BP_C");
static_assert(offsetof(ASoundTrap_Base_BP_C, UberGraphFrame) == 0x000260, "Member 'ASoundTrap_Base_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RBEditorClearanceCollisionBox) == 0x000268, "Member 'ASoundTrap_Base_BP_C::RBEditorClearanceCollisionBox' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RBActiveSkillVision) == 0x000270, "Member 'ASoundTrap_Base_BP_C::RBActiveSkillVision' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RBPing) == 0x000278, "Member 'ASoundTrap_Base_BP_C::RBPing' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, Anchor) == 0x000280, "Member 'ASoundTrap_Base_BP_C::Anchor' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, ActiveSkillWaveSphere) == 0x000288, "Member 'ASoundTrap_Base_BP_C::ActiveSkillWaveSphere' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RBRoomAssociation) == 0x000290, "Member 'ASoundTrap_Base_BP_C::RBRoomAssociation' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RBObstacleVariator) == 0x000298, "Member 'ASoundTrap_Base_BP_C::RBObstacleVariator' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RBObjectiveProximity) == 0x0002A0, "Member 'ASoundTrap_Base_BP_C::RBObjectiveProximity' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RBContinuousMovementSound) == 0x0002A8, "Member 'ASoundTrap_Base_BP_C::RBContinuousMovementSound' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RBRandomizableHelper) == 0x0002B0, "Member 'ASoundTrap_Base_BP_C::RBRandomizableHelper' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RadialForce) == 0x0002B8, "Member 'ASoundTrap_Base_BP_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, Capsule) == 0x0002C0, "Member 'ASoundTrap_Base_BP_C::Capsule' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RopeComponent) == 0x0002C8, "Member 'ASoundTrap_Base_BP_C::RopeComponent' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, DefaultSceneRoot) == 0x0002D0, "Member 'ASoundTrap_Base_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, Rope) == 0x0002D8, "Member 'ASoundTrap_Base_BP_C::Rope' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, Attachements) == 0x0002E0, "Member 'ASoundTrap_Base_BP_C::Attachements' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, SelectMesh) == 0x0002F0, "Member 'ASoundTrap_Base_BP_C::SelectMesh' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, Sound) == 0x0002F8, "Member 'ASoundTrap_Base_BP_C::Sound' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, bBumped) == 0x000300, "Member 'ASoundTrap_Base_BP_C::bBumped' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, BumpedLocation) == 0x000304, "Member 'ASoundTrap_Base_BP_C::BumpedLocation' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, ObjectMovementStartedSound) == 0x000310, "Member 'ASoundTrap_Base_BP_C::ObjectMovementStartedSound' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, ObjectMovementStoppedSound) == 0x000318, "Member 'ASoundTrap_Base_BP_C::ObjectMovementStoppedSound' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, TrapSize) == 0x000320, "Member 'ASoundTrap_Base_BP_C::TrapSize' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, CapsuleOffset) == 0x000324, "Member 'ASoundTrap_Base_BP_C::CapsuleOffset' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, SkeletalMeshRef) == 0x000330, "Member 'ASoundTrap_Base_BP_C::SkeletalMeshRef' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, PhysicalAssetRef) == 0x000338, "Member 'ASoundTrap_Base_BP_C::PhysicalAssetRef' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RopeSize) == 0x000340, "Member 'ASoundTrap_Base_BP_C::RopeSize' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, AvailableRopeSize) == 0x000350, "Member 'ASoundTrap_Base_BP_C::AvailableRopeSize' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, LesserRopeSize) == 0x000360, "Member 'ASoundTrap_Base_BP_C::LesserRopeSize' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, LesserRopeSizeIndex) == 0x000364, "Member 'ASoundTrap_Base_BP_C::LesserRopeSizeIndex' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RopeSkeletalMeshRefs) == 0x000368, "Member 'ASoundTrap_Base_BP_C::RopeSkeletalMeshRefs' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, RopePhysicalAssetRefs) == 0x000378, "Member 'ASoundTrap_Base_BP_C::RopePhysicalAssetRefs' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, ChainSkeletalMeshRefs) == 0x000388, "Member 'ASoundTrap_Base_BP_C::ChainSkeletalMeshRefs' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, ScaleFactor) == 0x000398, "Member 'ASoundTrap_Base_BP_C::ScaleFactor' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, CurrentHitLocation) == 0x00039C, "Member 'ASoundTrap_Base_BP_C::CurrentHitLocation' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, CurrentHitPlayer) == 0x0003A8, "Member 'ASoundTrap_Base_BP_C::CurrentHitPlayer' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, LastHitTimestamp) == 0x0003B0, "Member 'ASoundTrap_Base_BP_C::LastHitTimestamp' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, DelayUntilReset) == 0x0003B4, "Member 'ASoundTrap_Base_BP_C::DelayUntilReset' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, SoundTrapActivator) == 0x0003B8, "Member 'ASoundTrap_Base_BP_C::SoundTrapActivator' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, UseAnchor) == 0x0003B9, "Member 'ASoundTrap_Base_BP_C::UseAnchor' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, AnchorGizmo) == 0x0003C0, "Member 'ASoundTrap_Base_BP_C::AnchorGizmo' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, AnchorRopeMesh) == 0x0003F0, "Member 'ASoundTrap_Base_BP_C::AnchorRopeMesh' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, AnchorChainMesh) == 0x0003F8, "Member 'ASoundTrap_Base_BP_C::AnchorChainMesh' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, AnchorMeshOverwrite) == 0x000400, "Member 'ASoundTrap_Base_BP_C::AnchorMeshOverwrite' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, IsReset) == 0x000408, "Member 'ASoundTrap_Base_BP_C::IsReset' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, AnchorHeight) == 0x00040C, "Member 'ASoundTrap_Base_BP_C::AnchorHeight' has a wrong offset!");
static_assert(offsetof(ASoundTrap_Base_BP_C, MaxRopeSize) == 0x000410, "Member 'ASoundTrap_Base_BP_C::MaxRopeSize' has a wrong offset!");

}

