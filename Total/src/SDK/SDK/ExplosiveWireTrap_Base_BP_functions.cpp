#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ExplosiveWireTrap_Base_BP

#include "Basic.hpp"

#include "ExplosiveWireTrap_Base_BP_classes.hpp"
#include "ExplosiveWireTrap_Base_BP_parameters.hpp"


namespace SDK
{

// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.FixUp
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AExplosiveWireTrap_Base_BP_C::FixUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "FixUp");

	Params::ExplosiveWireTrap_Base_BP_C_FixUp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.RefreshEyesMaterial
// (Public, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::RefreshEyesMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "RefreshEyesMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SetVisibilityIfExists
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USceneComponent*>          SceneComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    bNewVisibility                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AExplosiveWireTrap_Base_BP_C::SetVisibilityIfExists(TArray<class USceneComponent*>& SceneComponent, bool bNewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SetVisibilityIfExists");

	Params::ExplosiveWireTrap_Base_BP_C_SetVisibilityIfExists Parms{};

	Parms.SceneComponent = std::move(SceneComponent);
	Parms.bNewVisibility = bNewVisibility;

	UObject::ProcessEvent(Func, &Parms);

	SceneComponent = std::move(Parms.SceneComponent);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.ConstructExplosionDecals
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OnGround                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AExplosiveWireTrap_Base_BP_C::ConstructExplosionDecals(bool OnGround)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "ConstructExplosionDecals");

	Params::ExplosiveWireTrap_Base_BP_C_ConstructExplosionDecals Parms{};

	Parms.OnGround = OnGround;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SnapSideBToGround
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SnapSideBToGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SnapSideBToGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.GetOffsetFromGroundBasedOnBracket
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bSideA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AExplosiveWireTrap_Base_BP_C::GetOffsetFromGroundBasedOnBracket(bool bSideA, float* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "GetOffsetFromGroundBasedOnBracket");

	Params::ExplosiveWireTrap_Base_BP_C_GetOffsetFromGroundBasedOnBracket Parms{};

	Parms.bSideA = bSideA;

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = Parms.Offset;
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SnapSideAToGround
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SnapSideAToGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SnapSideAToGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SnapToGround
// (Public, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SnapToGround()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SnapToGround");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.GetOffsetFromWallBasedOnBracket
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bSideA                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Offset                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AExplosiveWireTrap_Base_BP_C::GetOffsetFromWallBasedOnBracket(bool bSideA, float* Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "GetOffsetFromWallBasedOnBracket");

	Params::ExplosiveWireTrap_Base_BP_C_GetOffsetFromWallBasedOnBracket Parms{};

	Parms.bSideA = bSideA;

	UObject::ProcessEvent(Func, &Parms);

	if (Offset != nullptr)
		*Offset = Parms.Offset;
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.ContructSingleAttachPart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ExplosiveWireTrap_AttachTypeEnum        AttachType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             MainAttach                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             Bracket                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             FullBracket                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AExplosiveWireTrap_Base_BP_C::ContructSingleAttachPart(ExplosiveWireTrap_AttachTypeEnum AttachType, class UStaticMeshComponent* MainAttach, class UStaticMeshComponent* Bracket, class UStaticMeshComponent* FullBracket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "ContructSingleAttachPart");

	Params::ExplosiveWireTrap_Base_BP_C_ContructSingleAttachPart Parms{};

	Parms.AttachType = AttachType;
	Parms.MainAttach = MainAttach;
	Parms.Bracket = Bracket;
	Parms.FullBracket = FullBracket;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.ConstructAttachParts
// (Public, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::ConstructAttachParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "ConstructAttachParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SetLoopingSound
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldLoop                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AExplosiveWireTrap_Base_BP_C::SetLoopingSound(bool bShouldLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SetLoopingSound");

	Params::ExplosiveWireTrap_Base_BP_C_SetLoopingSound Parms{};

	Parms.bShouldLoop = bShouldLoop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SetExplosionDecalVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bVisible                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AExplosiveWireTrap_Base_BP_C::SetExplosionDecalVisibility(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SetExplosionDecalVisibility");

	Params::ExplosiveWireTrap_Base_BP_C_SetExplosionDecalVisibility Parms{};

	Parms.bVisible = bVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SnapSideBToWall
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SnapSideBToWall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SnapSideBToWall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SnapSideAToWall
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SnapSideAToWall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SnapSideAToWall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SnapToWall
// (Public, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SnapToWall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SnapToWall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.ResetParts
// (Public, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::ResetParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "ResetParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SetPhysicalize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPhysics                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AExplosiveWireTrap_Base_BP_C::SetPhysicalize(class UPrimitiveComponent* Component, bool bPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SetPhysicalize");

	Params::ExplosiveWireTrap_Base_BP_C_SetPhysicalize Parms{};

	Parms.Component = Component;
	Parms.bPhysics = bPhysics;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SetInactiveState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SetInactiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SetInactiveState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SetBrokenState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SetBrokenState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SetBrokenState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SetTemporaryDisabledState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SetTemporaryDisabledState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SetTemporaryDisabledState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SetActiveState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SetActiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SetActiveState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.SetTriggeredState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::SetTriggeredState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "SetTriggeredState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.RecenterActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::RecenterActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "RecenterActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.OnCurrentStateChanged
// (Public, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::OnCurrentStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "OnCurrentStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.ConstructTrapParts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::ConstructTrapParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "ConstructTrapParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.OnEditorPostLoad
// (Event, Public, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::OnEditorPostLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "OnEditorPostLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.OnPostActorsPasted
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   PastedActors                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AExplosiveWireTrap_Base_BP_C::OnPostActorsPasted(const TArray<class AActor*>& PastedActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "OnPostActorsPasted");

	Params::ExplosiveWireTrap_Base_BP_C_OnPostActorsPasted Parms{};

	Parms.PastedActors = std::move(PastedActors);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.PostAddedToLevel
// (Event, Public, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::PostAddedToLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "PostAddedToLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.PostDuplicated
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           DuplicationParent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AExplosiveWireTrap_Base_BP_C::PostDuplicated(class AActor* DuplicationParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "PostDuplicated");

	Params::ExplosiveWireTrap_Base_BP_C_PostDuplicated Parms{};

	Parms.DuplicationParent = DuplicationParent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.PostEditChange
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             PropertyName                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AExplosiveWireTrap_Base_BP_C::PostEditChange(const class FName& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "PostEditChange");

	Params::ExplosiveWireTrap_Base_BP_C_PostEditChange Parms{};

	Parms.PropertyName = PropertyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.PostEditMove
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bFinished                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AExplosiveWireTrap_Base_BP_C::PostEditMove(bool bFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "PostEditMove");

	Params::ExplosiveWireTrap_Base_BP_C_PostEditMove Parms{};

	Parms.bFinished = bFinished;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.TickSelected
// (Event, Public, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::TickSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "TickSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.Event_OnCurrentStateChanged
// (Event, Public, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::Event_OnCurrentStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "Event_OnCurrentStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.Event_OnResetStage
// (Event, Public, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::Event_OnResetStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "Event_OnResetStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.BndEvt__ExplosiveWireTrap_Base_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class URBHackableComponent*             HackableComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AExplosiveWireTrap_Base_BP_C::BndEvt__ExplosiveWireTrap_Base_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature(class URBHackableComponent* HackableComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "BndEvt__ExplosiveWireTrap_Base_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature");

	Params::ExplosiveWireTrap_Base_BP_C_BndEvt__ExplosiveWireTrap_Base_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature Parms{};

	Parms.HackableComponent = HackableComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.DelayDisableCoverPhysics
// (BlueprintCallable, BlueprintEvent)

void AExplosiveWireTrap_Base_BP_C::DelayDisableCoverPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "DelayDisableCoverPhysics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.ExecuteUbergraph_ExplosiveWireTrap_Base_BP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AExplosiveWireTrap_Base_BP_C::ExecuteUbergraph_ExplosiveWireTrap_Base_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "ExecuteUbergraph_ExplosiveWireTrap_Base_BP");

	Params::ExplosiveWireTrap_Base_BP_C_ExecuteUbergraph_ExplosiveWireTrap_Base_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.GetFriendlyDeviceIconLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          Out_location                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AExplosiveWireTrap_Base_BP_C::GetFriendlyDeviceIconLocation(struct FVector* Out_location) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "GetFriendlyDeviceIconLocation");

	Params::ExplosiveWireTrap_Base_BP_C_GetFriendlyDeviceIconLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_location != nullptr)
		*Out_location = std::move(Parms.Out_location);

	return Parms.ReturnValue;
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.ShouldPingFollowActor
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    OutShouldFollow                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AExplosiveWireTrap_Base_BP_C::ShouldPingFollowActor(bool* OutShouldFollow) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "ShouldPingFollowActor");

	Params::ExplosiveWireTrap_Base_BP_C_ShouldPingFollowActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutShouldFollow != nullptr)
		*OutShouldFollow = Parms.OutShouldFollow;

	return Parms.ReturnValue;
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.GetPingEnabled
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ARBPlayer*                        PingOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    OutIsEnabled                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AExplosiveWireTrap_Base_BP_C::GetPingEnabled(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, bool* OutIsEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "GetPingEnabled");

	Params::ExplosiveWireTrap_Base_BP_C_GetPingEnabled Parms{};

	Parms.PingOwner = PingOwner;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsEnabled != nullptr)
		*OutIsEnabled = Parms.OutIsEnabled;

	return Parms.ReturnValue;
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.GetPingItemName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             OutName                                                (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AExplosiveWireTrap_Base_BP_C::GetPingItemName(class FText* OutName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "GetPingItemName");

	Params::ExplosiveWireTrap_Base_BP_C_GetPingItemName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutName != nullptr)
		*OutName = std::move(Parms.OutName);

	return Parms.ReturnValue;
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.GetPlayerPingData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ARBPlayer*                        PingOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// struct FPlayerPingData                  OutData                                                (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AExplosiveWireTrap_Base_BP_C::GetPlayerPingData(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FPlayerPingData* OutData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "GetPlayerPingData");

	Params::ExplosiveWireTrap_Base_BP_C_GetPlayerPingData Parms{};

	Parms.PingOwner = PingOwner;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (OutData != nullptr)
		*OutData = std::move(Parms.OutData);

	return Parms.ReturnValue;
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.GetPlayerPingWorldLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ARBPlayer*                        PingOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AExplosiveWireTrap_Base_BP_C::GetPlayerPingWorldLocation(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FVector* OutLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "GetPlayerPingWorldLocation");

	Params::ExplosiveWireTrap_Base_BP_C_GetPlayerPingWorldLocation Parms{};

	Parms.PingOwner = PingOwner;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	return Parms.ReturnValue;
}


// Function ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C.CanBeActivedInSpectra
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ARBSpectraSkill*                  SpectraOwner                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AExplosiveWireTrap_Base_BP_C::CanBeActivedInSpectra(const class ARBSpectraSkill* SpectraOwner) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExplosiveWireTrap_Base_BP_C", "CanBeActivedInSpectra");

	Params::ExplosiveWireTrap_Base_BP_C_CanBeActivedInSpectra Parms{};

	Parms.SpectraOwner = SpectraOwner;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

