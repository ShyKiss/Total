#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ExplosiveWireTrap_Base_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ExplosiveWireTrap_AttachTypeEnum_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ExplosiveWireTrap_Base_BP.ExplosiveWireTrap_Base_BP_C
// 0x0210 (0x0520 - 0x0310)
#pragma pack(push, 0x1)
class alignas(0x10) AExplosiveWireTrap_Base_BP_C : public ARBExplosiveWireTrap
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0310(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        HackVFXRootSideA;                                  // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HackVFXRootSideB;                                  // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      OnHackVFXSideA;                                    // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      OnRewireVFXSideA;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      OnHackVFXSideB;                                    // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      OnRewireVFXSideB;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FriendlyDeviceIconLocation;                        // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBHackableComponent*                   RBHackable;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SideBDisarmBox;                                    // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SideADisarmBox;                                    // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBEditorClearanceCollisionBoxComponent* RBEditorClearanceCollisionBox;                     // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FullBracketMeshSideB;                              // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BracketMeshSideB;                                  // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FullBracketMeshSideA;                              // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BracketMeshSideA;                                  // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttachMeshSideB;                                   // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttachMeshSideA;                                   // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SideBPing;                                         // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SideAPing;                                         // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        SideAExplosionFloorDecal;                          // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        SideBExplosionFloorDecal;                          // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPingComponent*                       RBPing;                                            // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      SoundSideB;                                        // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      SoundSideA;                                        // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_BrokenVFXSideA;                                // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_BrokenVFXSideB;                                // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBActiveSkillVisionComponent*          RBActiveSkillVision;                               // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBObjectiveProximityComponent*         RBObjectiveProximity;                              // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRoomAssociationComponent*            RBRoomAssociation;                                 // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBObstacleVariatorComponent*           RBObstacleVariator;                                // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_ExploSideB;                                    // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_ExploSideA;                                    // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        SideBExplosionDecal;                               // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        SideAExplosionDecal;                               // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LaserAnchorA;                                      // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LaserAnchorB;                                      // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SideBEye;                                          // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SideAEye;                                          // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SideACover;                                        // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SideBCover;                                        // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Icon;                                              // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ray;                                               // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SideBMesh;                                         // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SideAMesh;                                         // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_478[0x8];                                      // 0x0478(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SideALocation;                                     // 0x0480(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             SideBLocation;                                     // 0x04B0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	bool                                          Crouched;                                          // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicalizeStrength;                               // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          BreakSoundEvent;                                   // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          ExplosionSoundEvent;                               // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLoopingSound;                                     // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          StartLoop;                                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          StopLoop;                                          // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ExplosiveWireTrap_AttachTypeEnum              SideAAttachType;                                   // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ExplosiveWireTrap_AttachTypeEnum              SideBAttachType;                                   // 0x0511(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool FixUp();
	void RefreshEyesMaterial();
	void SetVisibilityIfExists(TArray<class USceneComponent*>& SceneComponent, bool bNewVisibility);
	void ConstructExplosionDecals(bool OnGround);
	void SnapSideBToGround();
	void GetOffsetFromGroundBasedOnBracket(bool bSideA, float* Offset);
	void SnapSideAToGround();
	void SnapToGround();
	void GetOffsetFromWallBasedOnBracket(bool bSideA, float* Offset);
	void ContructSingleAttachPart(ExplosiveWireTrap_AttachTypeEnum AttachType, class UStaticMeshComponent* MainAttach, class UStaticMeshComponent* Bracket, class UStaticMeshComponent* FullBracket);
	void ConstructAttachParts();
	void SetLoopingSound(bool bShouldLoop);
	void SetExplosionDecalVisibility(bool bVisible);
	void SnapSideBToWall();
	void SnapSideAToWall();
	void SnapToWall();
	void ResetParts();
	void SetPhysicalize(class UPrimitiveComponent* Component, bool bPhysics);
	void SetInactiveState();
	void SetBrokenState();
	void SetTemporaryDisabledState();
	void SetActiveState();
	void SetTriggeredState();
	void RecenterActor();
	void OnCurrentStateChanged();
	void ConstructTrapParts();
	void UserConstructionScript();
	void OnEditorPostLoad();
	void OnPostActorsPasted(const TArray<class AActor*>& PastedActors);
	void PostAddedToLevel();
	void PostDuplicated(class AActor* DuplicationParent);
	void PostEditChange(const class FName& PropertyName);
	void PostEditMove(bool bFinished);
	void TickSelected();
	void Event_OnCurrentStateChanged();
	void ReceiveBeginPlay();
	void Event_OnResetStage();
	void BndEvt__ExplosiveWireTrap_Base_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature(class URBHackableComponent* HackableComponent);
	void DelayDisableCoverPhysics();
	void ExecuteUbergraph_ExplosiveWireTrap_Base_BP(int32 EntryPoint);

	bool GetFriendlyDeviceIconLocation(struct FVector* Out_location) const;
	bool ShouldPingFollowActor(bool* OutShouldFollow) const;
	bool GetPingEnabled(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, bool* OutIsEnabled) const;
	bool GetPingItemName(class FText* OutName) const;
	bool GetPlayerPingData(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FPlayerPingData* OutData) const;
	bool GetPlayerPingWorldLocation(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FVector* OutLocation) const;
	bool CanBeActivedInSpectra(const class ARBSpectraSkill* SpectraOwner) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ExplosiveWireTrap_Base_BP_C">();
	}
	static class AExplosiveWireTrap_Base_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AExplosiveWireTrap_Base_BP_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AExplosiveWireTrap_Base_BP_C) == 0x000010, "Wrong alignment on AExplosiveWireTrap_Base_BP_C");
static_assert(sizeof(AExplosiveWireTrap_Base_BP_C) == 0x000520, "Wrong size on AExplosiveWireTrap_Base_BP_C");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, UberGraphFrame) == 0x000310, "Member 'AExplosiveWireTrap_Base_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, HackVFXRootSideA) == 0x000318, "Member 'AExplosiveWireTrap_Base_BP_C::HackVFXRootSideA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, HackVFXRootSideB) == 0x000320, "Member 'AExplosiveWireTrap_Base_BP_C::HackVFXRootSideB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, OnHackVFXSideA) == 0x000328, "Member 'AExplosiveWireTrap_Base_BP_C::OnHackVFXSideA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, OnRewireVFXSideA) == 0x000330, "Member 'AExplosiveWireTrap_Base_BP_C::OnRewireVFXSideA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, OnHackVFXSideB) == 0x000338, "Member 'AExplosiveWireTrap_Base_BP_C::OnHackVFXSideB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, OnRewireVFXSideB) == 0x000340, "Member 'AExplosiveWireTrap_Base_BP_C::OnRewireVFXSideB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, FriendlyDeviceIconLocation) == 0x000348, "Member 'AExplosiveWireTrap_Base_BP_C::FriendlyDeviceIconLocation' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, RBHackable) == 0x000350, "Member 'AExplosiveWireTrap_Base_BP_C::RBHackable' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideBDisarmBox) == 0x000358, "Member 'AExplosiveWireTrap_Base_BP_C::SideBDisarmBox' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideADisarmBox) == 0x000360, "Member 'AExplosiveWireTrap_Base_BP_C::SideADisarmBox' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, RBEditorClearanceCollisionBox) == 0x000368, "Member 'AExplosiveWireTrap_Base_BP_C::RBEditorClearanceCollisionBox' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, FullBracketMeshSideB) == 0x000370, "Member 'AExplosiveWireTrap_Base_BP_C::FullBracketMeshSideB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, BracketMeshSideB) == 0x000378, "Member 'AExplosiveWireTrap_Base_BP_C::BracketMeshSideB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, FullBracketMeshSideA) == 0x000380, "Member 'AExplosiveWireTrap_Base_BP_C::FullBracketMeshSideA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, BracketMeshSideA) == 0x000388, "Member 'AExplosiveWireTrap_Base_BP_C::BracketMeshSideA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, AttachMeshSideB) == 0x000390, "Member 'AExplosiveWireTrap_Base_BP_C::AttachMeshSideB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, AttachMeshSideA) == 0x000398, "Member 'AExplosiveWireTrap_Base_BP_C::AttachMeshSideA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideBPing) == 0x0003A0, "Member 'AExplosiveWireTrap_Base_BP_C::SideBPing' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideAPing) == 0x0003A8, "Member 'AExplosiveWireTrap_Base_BP_C::SideAPing' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideAExplosionFloorDecal) == 0x0003B0, "Member 'AExplosiveWireTrap_Base_BP_C::SideAExplosionFloorDecal' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideBExplosionFloorDecal) == 0x0003B8, "Member 'AExplosiveWireTrap_Base_BP_C::SideBExplosionFloorDecal' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, RBPing) == 0x0003C0, "Member 'AExplosiveWireTrap_Base_BP_C::RBPing' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SoundSideB) == 0x0003C8, "Member 'AExplosiveWireTrap_Base_BP_C::SoundSideB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SoundSideA) == 0x0003D0, "Member 'AExplosiveWireTrap_Base_BP_C::SoundSideA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, Ngr_BrokenVFXSideA) == 0x0003D8, "Member 'AExplosiveWireTrap_Base_BP_C::Ngr_BrokenVFXSideA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, Ngr_BrokenVFXSideB) == 0x0003E0, "Member 'AExplosiveWireTrap_Base_BP_C::Ngr_BrokenVFXSideB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, RBActiveSkillVision) == 0x0003E8, "Member 'AExplosiveWireTrap_Base_BP_C::RBActiveSkillVision' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, RBObjectiveProximity) == 0x0003F0, "Member 'AExplosiveWireTrap_Base_BP_C::RBObjectiveProximity' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, RBRoomAssociation) == 0x0003F8, "Member 'AExplosiveWireTrap_Base_BP_C::RBRoomAssociation' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, RBObstacleVariator) == 0x000400, "Member 'AExplosiveWireTrap_Base_BP_C::RBObstacleVariator' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, Ngr_ExploSideB) == 0x000408, "Member 'AExplosiveWireTrap_Base_BP_C::Ngr_ExploSideB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, Ngr_ExploSideA) == 0x000410, "Member 'AExplosiveWireTrap_Base_BP_C::Ngr_ExploSideA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideBExplosionDecal) == 0x000418, "Member 'AExplosiveWireTrap_Base_BP_C::SideBExplosionDecal' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideAExplosionDecal) == 0x000420, "Member 'AExplosiveWireTrap_Base_BP_C::SideAExplosionDecal' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, LaserAnchorA) == 0x000428, "Member 'AExplosiveWireTrap_Base_BP_C::LaserAnchorA' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, LaserAnchorB) == 0x000430, "Member 'AExplosiveWireTrap_Base_BP_C::LaserAnchorB' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideBEye) == 0x000438, "Member 'AExplosiveWireTrap_Base_BP_C::SideBEye' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideAEye) == 0x000440, "Member 'AExplosiveWireTrap_Base_BP_C::SideAEye' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideACover) == 0x000448, "Member 'AExplosiveWireTrap_Base_BP_C::SideACover' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideBCover) == 0x000450, "Member 'AExplosiveWireTrap_Base_BP_C::SideBCover' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, Icon) == 0x000458, "Member 'AExplosiveWireTrap_Base_BP_C::Icon' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, Ray) == 0x000460, "Member 'AExplosiveWireTrap_Base_BP_C::Ray' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideBMesh) == 0x000468, "Member 'AExplosiveWireTrap_Base_BP_C::SideBMesh' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideAMesh) == 0x000470, "Member 'AExplosiveWireTrap_Base_BP_C::SideAMesh' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideALocation) == 0x000480, "Member 'AExplosiveWireTrap_Base_BP_C::SideALocation' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideBLocation) == 0x0004B0, "Member 'AExplosiveWireTrap_Base_BP_C::SideBLocation' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, Crouched) == 0x0004E0, "Member 'AExplosiveWireTrap_Base_BP_C::Crouched' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, PhysicalizeStrength) == 0x0004E4, "Member 'AExplosiveWireTrap_Base_BP_C::PhysicalizeStrength' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, BreakSoundEvent) == 0x0004E8, "Member 'AExplosiveWireTrap_Base_BP_C::BreakSoundEvent' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, ExplosionSoundEvent) == 0x0004F0, "Member 'AExplosiveWireTrap_Base_BP_C::ExplosionSoundEvent' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, bLoopingSound) == 0x0004F8, "Member 'AExplosiveWireTrap_Base_BP_C::bLoopingSound' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, StartLoop) == 0x000500, "Member 'AExplosiveWireTrap_Base_BP_C::StartLoop' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, StopLoop) == 0x000508, "Member 'AExplosiveWireTrap_Base_BP_C::StopLoop' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideAAttachType) == 0x000510, "Member 'AExplosiveWireTrap_Base_BP_C::SideAAttachType' has a wrong offset!");
static_assert(offsetof(AExplosiveWireTrap_Base_BP_C, SideBAttachType) == 0x000511, "Member 'AExplosiveWireTrap_Base_BP_C::SideBAttachType' has a wrong offset!");

}

