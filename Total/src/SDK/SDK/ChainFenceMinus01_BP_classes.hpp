#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChainFenceMinus01_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ModuleMeshData_structs.hpp"
#include "MeshPopulate_Parent_classes.hpp"
#include "ModuleMeshDataMinus02_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ChainFence-01_BP.ChainFence-01_BP_C
// 0x00C8 (0x0498 - 0x03D0)
class AChainFenceMinus01_BP_C final : public AMeshPopulate_Parent_C
{
public:
	TArray<struct FModuleMeshData>                PolesMeshes;                                       // 0x03D0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshData>                FirstPolesMeshes;                                  // 0x03E0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshData>                LastPolesMeshes;                                   // 0x03F0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshDataMinus02>         GridMeshes;                                        // 0x0400(0x0010)(Edit, BlueprintVisible)
	TArray<struct FModuleMeshDataMinus02>         MidVerticalPoleMeshes;                             // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FModuleMeshData>                SidePoleMeshes;                                    // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UseTopPole;                                        // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseVerticalPole;                                   // 0x0431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseFirstVerticalPole;                              // 0x0432(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseLastVerticalPole;                               // 0x0433(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InvertLastVerticalPole;                            // 0x0434(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZSidePole;                                         // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBarbWire;                                       // 0x043C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43D[0x3];                                      // 0x043D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GridOffset;                                        // 0x0440(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActiveState;                                      // 0x044C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44D[0x3];                                      // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModuleMeshDataMinus02>         BarbwiresMeshes;                                   // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Alpha_Scale;                                       // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FModuleMeshDataMinus02>         FirstVerticalPoleMeshes;                           // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FModuleMeshDataMinus02>         LastVerticalPoleMeshes;                            // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                PoleOffset;                                        // 0x0488(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsePoleGizmo;                                      // 0x0494(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();
	void FindAlphaScale(TArray<struct FModuleMeshData>& Array, float* AlphaScale);
	void MakePoleArray(TArray<struct FModuleMeshData>& SourceDefault, TArray<struct FModuleMeshData>& Source, const TArray<struct FModuleMeshDataMinus02>& Target);
	void SetAutomaticCollisionMeshExclusions();
	bool GetStateName(class FString* StateA, class FString* StateB);

	bool IsStateA() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChainFence-01_BP_C">();
	}
	static class AChainFenceMinus01_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChainFenceMinus01_BP_C>();
	}
};
static_assert(alignof(AChainFenceMinus01_BP_C) == 0x000008, "Wrong alignment on AChainFenceMinus01_BP_C");
static_assert(sizeof(AChainFenceMinus01_BP_C) == 0x000498, "Wrong size on AChainFenceMinus01_BP_C");
static_assert(offsetof(AChainFenceMinus01_BP_C, PolesMeshes) == 0x0003D0, "Member 'AChainFenceMinus01_BP_C::PolesMeshes' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, FirstPolesMeshes) == 0x0003E0, "Member 'AChainFenceMinus01_BP_C::FirstPolesMeshes' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, LastPolesMeshes) == 0x0003F0, "Member 'AChainFenceMinus01_BP_C::LastPolesMeshes' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, GridMeshes) == 0x000400, "Member 'AChainFenceMinus01_BP_C::GridMeshes' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, MidVerticalPoleMeshes) == 0x000410, "Member 'AChainFenceMinus01_BP_C::MidVerticalPoleMeshes' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, SidePoleMeshes) == 0x000420, "Member 'AChainFenceMinus01_BP_C::SidePoleMeshes' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, UseTopPole) == 0x000430, "Member 'AChainFenceMinus01_BP_C::UseTopPole' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, UseVerticalPole) == 0x000431, "Member 'AChainFenceMinus01_BP_C::UseVerticalPole' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, UseFirstVerticalPole) == 0x000432, "Member 'AChainFenceMinus01_BP_C::UseFirstVerticalPole' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, UseLastVerticalPole) == 0x000433, "Member 'AChainFenceMinus01_BP_C::UseLastVerticalPole' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, InvertLastVerticalPole) == 0x000434, "Member 'AChainFenceMinus01_BP_C::InvertLastVerticalPole' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, ZSidePole) == 0x000438, "Member 'AChainFenceMinus01_BP_C::ZSidePole' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, UseBarbWire) == 0x00043C, "Member 'AChainFenceMinus01_BP_C::UseBarbWire' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, GridOffset) == 0x000440, "Member 'AChainFenceMinus01_BP_C::GridOffset' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, bActiveState) == 0x00044C, "Member 'AChainFenceMinus01_BP_C::bActiveState' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, BarbwiresMeshes) == 0x000450, "Member 'AChainFenceMinus01_BP_C::BarbwiresMeshes' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, Alpha_Scale) == 0x000460, "Member 'AChainFenceMinus01_BP_C::Alpha_Scale' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, FirstVerticalPoleMeshes) == 0x000468, "Member 'AChainFenceMinus01_BP_C::FirstVerticalPoleMeshes' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, LastVerticalPoleMeshes) == 0x000478, "Member 'AChainFenceMinus01_BP_C::LastVerticalPoleMeshes' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, PoleOffset) == 0x000488, "Member 'AChainFenceMinus01_BP_C::PoleOffset' has a wrong offset!");
static_assert(offsetof(AChainFenceMinus01_BP_C, UsePoleGizmo) == 0x000494, "Member 'AChainFenceMinus01_BP_C::UsePoleGizmo' has a wrong offset!");

}

