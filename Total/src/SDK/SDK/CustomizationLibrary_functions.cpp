#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomizationLibrary

#include "Basic.hpp"

#include "CustomizationLibrary_classes.hpp"
#include "CustomizationLibrary_parameters.hpp"


namespace SDK
{

// Function CustomizationLibrary.CustomizationLibrary_C.UpdateSkinAlbedo
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Head                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class USkeletalMeshComponent*>   OtherBodyParts                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCustomizationLibrary_C::UpdateSkinAlbedo(class USkeletalMeshComponent* Head, TArray<class USkeletalMeshComponent*>& OtherBodyParts, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CustomizationLibrary_C", "UpdateSkinAlbedo");

	Params::CustomizationLibrary_C_UpdateSkinAlbedo Parms{};

	Parms.Head = Head;
	Parms.OtherBodyParts = std::move(OtherBodyParts);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	OtherBodyParts = std::move(Parms.OtherBodyParts);
}


// Function CustomizationLibrary.CustomizationLibrary_C.AssignCustomAnimBPOrSetMasterPose
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Component                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USkeletalMesh*                    Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MasterPoseFallback                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCustomizationLibrary_C::AssignCustomAnimBPOrSetMasterPose(class USkeletalMeshComponent*& Component, class USkeletalMesh* Mesh, bool MasterPoseFallback, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CustomizationLibrary_C", "AssignCustomAnimBPOrSetMasterPose");

	Params::CustomizationLibrary_C_AssignCustomAnimBPOrSetMasterPose Parms{};

	Parms.Component = Component;
	Parms.Mesh = Mesh;
	Parms.MasterPoseFallback = MasterPoseFallback;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Component = Parms.Component;
}


// Function CustomizationLibrary.CustomizationLibrary_C.HandleGamepadCharacterRotationInput
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAnalogInputEvent                Analog_Input                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UCustomizationLibrary_C::HandleGamepadCharacterRotationInput(const struct FAnalogInputEvent& Analog_Input, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CustomizationLibrary_C", "HandleGamepadCharacterRotationInput");

	Params::CustomizationLibrary_C_HandleGamepadCharacterRotationInput Parms{};

	Parms.Analog_Input = std::move(Analog_Input);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CustomizationLibrary.CustomizationLibrary_C.GetClosestMenuCharacter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ActorLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AMenuCharacter_C*                 MenuCharacter                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCustomizationLibrary_C::GetClosestMenuCharacter(const struct FVector& ActorLocation, class UObject* __WorldContext, class AMenuCharacter_C** MenuCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomizationLibrary_C", "GetClosestMenuCharacter");

	Params::CustomizationLibrary_C_GetClosestMenuCharacter Parms{};

	Parms.ActorLocation = std::move(ActorLocation);
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	if (MenuCharacter != nullptr)
		*MenuCharacter = Parms.MenuCharacter;
}

}

