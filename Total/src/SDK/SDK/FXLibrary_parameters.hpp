#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FXLibrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function FXLibrary.FXLibrary_C.GetPPFXManager
// 0x0038 (0x0038 - 0x0000)
struct FXLibrary_C_GetPPFXManager final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APPManager_BP_C*                        Manager;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APPManager_BP_C*                        PPFXManager;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPostProcessUpdateManager*            CallFunc_GetPostProcessUpdateManager_ReturnValue;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APPManager_BP_C*                        K2Node_DynamicCast_AsPP_Manager_BP;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FXLibrary_C_GetPPFXManager) == 0x000008, "Wrong alignment on FXLibrary_C_GetPPFXManager");
static_assert(sizeof(FXLibrary_C_GetPPFXManager) == 0x000038, "Wrong size on FXLibrary_C_GetPPFXManager");
static_assert(offsetof(FXLibrary_C_GetPPFXManager, __WorldContext) == 0x000000, "Member 'FXLibrary_C_GetPPFXManager::__WorldContext' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetPPFXManager, Manager) == 0x000008, "Member 'FXLibrary_C_GetPPFXManager::Manager' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetPPFXManager, PPFXManager) == 0x000010, "Member 'FXLibrary_C_GetPPFXManager::PPFXManager' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetPPFXManager, CallFunc_GetPostProcessUpdateManager_ReturnValue) == 0x000018, "Member 'FXLibrary_C_GetPPFXManager::CallFunc_GetPostProcessUpdateManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetPPFXManager, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'FXLibrary_C_GetPPFXManager::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetPPFXManager, K2Node_DynamicCast_AsPP_Manager_BP) == 0x000028, "Member 'FXLibrary_C_GetPPFXManager::K2Node_DynamicCast_AsPP_Manager_BP' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetPPFXManager, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'FXLibrary_C_GetPPFXManager::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function FXLibrary.FXLibrary_C.RefreshScapegoatLights
// 0x0128 (0x0128 - 0x0000)
struct FXLibrary_C_RefreshScapegoatLights final
{
public:
	float                                         ProgressRatio;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentLevel;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bProgressLocked;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           Meshes;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	TArray<class ULightComponent*>                Lights;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ColorRatioNV;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RatioNV;                                           // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BurningLightIntensityLow;                          // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BurningLightColor;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BurningMeshMaterialColor;                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BurningThreshold;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlashRatio;                                        // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetScapegoatLockedBulbData_MeshMaterialData; // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetScapegoatLockedBulbData_LightColor;    // 0x0094(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScapegoatLockedBulbData_Intensity;     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULightComponent*                        CallFunc_Array_Get_Item;                           // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Get_Scapegoat_Bulb_Flash_Ratio_OutFlashRatio; // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        CallFunc_Array_Get_Item_2;                         // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        CallFunc_Array_Get_Item_3;                         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_4;                         // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetScapegoatBulbData_MeshMaterialColor;   // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetScapegoatBulbData_LightColor;          // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScapegoatBulbData_LightIntensity;      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_Array_Get_Item_5;                         // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FXLibrary_C_RefreshScapegoatLights) == 0x000008, "Wrong alignment on FXLibrary_C_RefreshScapegoatLights");
static_assert(sizeof(FXLibrary_C_RefreshScapegoatLights) == 0x000128, "Wrong size on FXLibrary_C_RefreshScapegoatLights");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, ProgressRatio) == 0x000000, "Member 'FXLibrary_C_RefreshScapegoatLights::ProgressRatio' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CurrentLevel) == 0x000004, "Member 'FXLibrary_C_RefreshScapegoatLights::CurrentLevel' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, bProgressLocked) == 0x000008, "Member 'FXLibrary_C_RefreshScapegoatLights::bProgressLocked' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, Meshes) == 0x000010, "Member 'FXLibrary_C_RefreshScapegoatLights::Meshes' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, Lights) == 0x000020, "Member 'FXLibrary_C_RefreshScapegoatLights::Lights' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, __WorldContext) == 0x000030, "Member 'FXLibrary_C_RefreshScapegoatLights::__WorldContext' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, ColorRatioNV) == 0x000038, "Member 'FXLibrary_C_RefreshScapegoatLights::ColorRatioNV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, RatioNV) == 0x000048, "Member 'FXLibrary_C_RefreshScapegoatLights::RatioNV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, BurningLightIntensityLow) == 0x00004C, "Member 'FXLibrary_C_RefreshScapegoatLights::BurningLightIntensityLow' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, BurningLightColor) == 0x000050, "Member 'FXLibrary_C_RefreshScapegoatLights::BurningLightColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, BurningMeshMaterialColor) == 0x000060, "Member 'FXLibrary_C_RefreshScapegoatLights::BurningMeshMaterialColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, BurningThreshold) == 0x000070, "Member 'FXLibrary_C_RefreshScapegoatLights::BurningThreshold' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, FlashRatio) == 0x000074, "Member 'FXLibrary_C_RefreshScapegoatLights::FlashRatio' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, Temp_int_Array_Index_Variable) == 0x000078, "Member 'FXLibrary_C_RefreshScapegoatLights::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000080, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_GetScapegoatLockedBulbData_MeshMaterialData) == 0x000084, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_GetScapegoatLockedBulbData_MeshMaterialData' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_GetScapegoatLockedBulbData_LightColor) == 0x000094, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_GetScapegoatLockedBulbData_LightColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_GetScapegoatLockedBulbData_Intensity) == 0x0000A4, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_GetScapegoatLockedBulbData_Intensity' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_MapRangeClamped_ReturnValue) == 0x0000A8, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Get_Scapegoat_Bulb_Flash_Ratio_OutFlashRatio) == 0x0000B8, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Get_Scapegoat_Bulb_Flash_Ratio_OutFlashRatio' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Array_Get_Item_2) == 0x0000C8, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Array_Get_Item_3) == 0x0000D0, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Array_Get_Item_4) == 0x0000D8, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000E0, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_SelectFloat_ReturnValue) == 0x0000E4, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_GetScapegoatBulbData_MeshMaterialColor) == 0x0000E8, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_GetScapegoatBulbData_MeshMaterialColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_GetScapegoatBulbData_LightColor) == 0x0000F8, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_GetScapegoatBulbData_LightColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_GetScapegoatBulbData_LightIntensity) == 0x000108, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_GetScapegoatBulbData_LightIntensity' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Array_Get_Item_5) == 0x000110, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000118, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_BooleanAND_ReturnValue) == 0x000119, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, Temp_int_Loop_Counter_Variable) == 0x00011C, "Member 'FXLibrary_C_RefreshScapegoatLights::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Less_IntInt_ReturnValue) == 0x000120, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_RefreshScapegoatLights, CallFunc_Add_IntInt_ReturnValue) == 0x000124, "Member 'FXLibrary_C_RefreshScapegoatLights::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function FXLibrary.FXLibrary_C.Get Scapegoat Bulb Flash Ratio
// 0x0060 (0x0060 - 0x0000)
struct FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProgressLock;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutFlashRatio;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewLocalVar_0;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTime_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue_1;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio) == 0x000008, "Wrong alignment on FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio");
static_assert(sizeof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio) == 0x000060, "Wrong size on FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, Value) == 0x000000, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::Value' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, ProgressLock) == 0x000004, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::ProgressLock' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, __WorldContext) == 0x000008, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::__WorldContext' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, OutFlashRatio) == 0x000010, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::OutFlashRatio' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, NewLocalVar_0) == 0x000014, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, Temp_bool_Variable) == 0x000018, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_GetGameTime_ReturnValue) == 0x00001C, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_GetGameTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Cos_ReturnValue) == 0x000024, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000028, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Cos_ReturnValue_1) == 0x000030, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Cos_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000038, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Sin_ReturnValue) == 0x000040, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000044, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000048, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000050, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_Lerp_ReturnValue) == 0x000054, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, K2Node_Select_Default) == 0x000058, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio, CallFunc_FClamp_ReturnValue) == 0x00005C, "Member 'FXLibrary_C_Get_Scapegoat_Bulb_Flash_Ratio::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function FXLibrary.FXLibrary_C.TrySpawnBloodSplatterDecal
// 0x0340 (0x0340 - 0x0000)
struct FXLibrary_C_TrySpawnBloodSplatterDecal final
{
public:
	bool                                          TraceForSurface;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OriginLocation;                                    // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceConstant*              Decal;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalSize;                                         // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomOffset;                                      // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSpawned;                                          // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DecalLocation;                                     // 0x003C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DecalNormal;                                       // 0x0048(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0060(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0070(0x0010)(ConstParm, ReferenceParm)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0098(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        CallFunc_SpawnDecalAtLocation_ReturnValue;         // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_AddRelativeLocation_SweepHitResult;    // 0x00D4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_AddRelativeRotation_SweepHitResult;    // 0x0184(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0218(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0234(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BF[0x1];                                      // 0x02BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x02D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x02E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0308(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FXLibrary_C_TrySpawnBloodSplatterDecal) == 0x000008, "Wrong alignment on FXLibrary_C_TrySpawnBloodSplatterDecal");
static_assert(sizeof(FXLibrary_C_TrySpawnBloodSplatterDecal) == 0x000340, "Wrong size on FXLibrary_C_TrySpawnBloodSplatterDecal");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, TraceForSurface) == 0x000000, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::TraceForSurface' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, OriginLocation) == 0x000004, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::OriginLocation' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, Direction) == 0x000010, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::Direction' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, Decal) == 0x000020, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::Decal' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, DecalSize) == 0x000028, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::DecalSize' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, RandomOffset) == 0x00002C, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::RandomOffset' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, __WorldContext) == 0x000030, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::__WorldContext' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, bSpawned) == 0x000038, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::bSpawned' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, DecalLocation) == 0x00003C, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::DecalLocation' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, DecalNormal) == 0x000048, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::DecalNormal' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, HitNormal) == 0x000054, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::HitNormal' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, HitLocation) == 0x000060, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::HitLocation' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, Temp_object_Variable) == 0x000070, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_MakeRotFromX_ReturnValue) == 0x000080, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00008C, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_Normal_ReturnValue) == 0x000098, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A4, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000A8, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_MakeVector_ReturnValue) == 0x0000AC, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_MakeVector_ReturnValue_1) == 0x0000B8, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_SpawnDecalAtLocation_ReturnValue) == 0x0000C8, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_SpawnDecalAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_IsValid_ReturnValue) == 0x0000D0, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_K2_AddRelativeLocation_SweepHitResult) == 0x0000D4, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_K2_AddRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x00015C, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000160, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_MakeRotator_ReturnValue) == 0x00016C, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_Add_VectorVector_ReturnValue) == 0x000178, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_K2_AddRelativeRotation_SweepHitResult) == 0x000184, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_K2_AddRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00020C, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, K2Node_MakeArray_Array) == 0x000218, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000228, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000234, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0002BC, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_bBlockingHit) == 0x0002BD, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002BE, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_Time) == 0x0002C0, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_Distance) == 0x0002C4, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_Location) == 0x0002C8, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_ImpactPoint) == 0x0002D4, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_Normal) == 0x0002E0, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_ImpactNormal) == 0x0002EC, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_PhysMat) == 0x0002F8, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_HitActor) == 0x000300, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_HitComponent) == 0x000308, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_HitBoneName) == 0x000310, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_HitItem) == 0x000318, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_ElementIndex) == 0x00031C, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_FaceIndex) == 0x000320, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_TraceStart) == 0x000324, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_TrySpawnBloodSplatterDecal, CallFunc_BreakHitResult_TraceEnd) == 0x000330, "Member 'FXLibrary_C_TrySpawnBloodSplatterDecal::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function FXLibrary.FXLibrary_C.GetScapegoatLockedBulbData
// 0x00F0 (0x00F0 - 0x0000)
struct FXLibrary_C_GetScapegoatLockedBulbData final
{
public:
	float                                         FlashRatio;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MeshMaterialData;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LockedLightIntensity_NV;                           // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LockedLightColor_NV;                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LockedMeshMaterialColor_NV;                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LockedLightIntensity;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LockedLightColor;                                  // 0x005C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LockedMeshMaterialColor;                           // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue_1;  // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue_2;  // 0x00AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x00BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue_3;  // 0x00CC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x00DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FXLibrary_C_GetScapegoatLockedBulbData) == 0x000008, "Wrong alignment on FXLibrary_C_GetScapegoatLockedBulbData");
static_assert(sizeof(FXLibrary_C_GetScapegoatLockedBulbData) == 0x0000F0, "Wrong size on FXLibrary_C_GetScapegoatLockedBulbData");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, FlashRatio) == 0x000000, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::FlashRatio' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, __WorldContext) == 0x000008, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::__WorldContext' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, MeshMaterialData) == 0x000010, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::MeshMaterialData' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, LightColor) == 0x000020, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::LightColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, Intensity) == 0x000030, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::Intensity' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, LockedLightIntensity_NV) == 0x000034, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::LockedLightIntensity_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, LockedLightColor_NV) == 0x000038, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::LockedLightColor_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, LockedMeshMaterialColor_NV) == 0x000048, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::LockedMeshMaterialColor_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, LockedLightIntensity) == 0x000058, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::LockedLightIntensity' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, LockedLightColor) == 0x00005C, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::LockedLightColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, LockedMeshMaterialColor) == 0x00006C, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::LockedMeshMaterialColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_GetScalarParameterValue_ReturnValue) == 0x00007C, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000080, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_Multiply_LinearColorFloat_ReturnValue_1) == 0x000090, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_Multiply_LinearColorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A0, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000A4, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_Lerp_ReturnValue) == 0x0000A8, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_Multiply_LinearColorFloat_ReturnValue_2) == 0x0000AC, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_Multiply_LinearColorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_LinearColorLerp_ReturnValue) == 0x0000BC, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_Multiply_LinearColorFloat_ReturnValue_3) == 0x0000CC, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_Multiply_LinearColorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatLockedBulbData, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0000DC, "Member 'FXLibrary_C_GetScapegoatLockedBulbData::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");

// Function FXLibrary.FXLibrary_C.GetScapegoatBulbData
// 0x0128 (0x0128 - 0x0000)
struct FXLibrary_C_GetScapegoatBulbData final
{
public:
	float                                         FlashRatio;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MeshMaterialColor;                                 // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity;                                    // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProgressLightIntensityLowActive_NV;                // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProgressLightIntensityHigh_NV;                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProgressLightIntensityLow_NV;                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProgressLightColorHigh_NV;                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProgressLightColorLow_NV;                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProgressMeshMaterialColorHigh_NV;                  // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProgressMeshMaterialColorLow_NV;                   // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProgressLightIntensityLowActive;                   // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProgressLightIntensityHigh;                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProgressLightIntensityLow;                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProgressLightColorHigh;                            // 0x008C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProgressLightColorLow;                             // 0x009C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProgressMeshMaterialColorHigh;                     // 0x00AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProgressMeshMaterialColorLow;                      // 0x00BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScalarParameterValue_ReturnValue;      // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x00D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x00F4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_2;            // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_3;            // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FXLibrary_C_GetScapegoatBulbData) == 0x000008, "Wrong alignment on FXLibrary_C_GetScapegoatBulbData");
static_assert(sizeof(FXLibrary_C_GetScapegoatBulbData) == 0x000128, "Wrong size on FXLibrary_C_GetScapegoatBulbData");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, FlashRatio) == 0x000000, "Member 'FXLibrary_C_GetScapegoatBulbData::FlashRatio' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, __WorldContext) == 0x000008, "Member 'FXLibrary_C_GetScapegoatBulbData::__WorldContext' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, MeshMaterialColor) == 0x000010, "Member 'FXLibrary_C_GetScapegoatBulbData::MeshMaterialColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, LightColor) == 0x000020, "Member 'FXLibrary_C_GetScapegoatBulbData::LightColor' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, LightIntensity) == 0x000030, "Member 'FXLibrary_C_GetScapegoatBulbData::LightIntensity' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightIntensityLowActive_NV) == 0x000034, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightIntensityLowActive_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightIntensityHigh_NV) == 0x000038, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightIntensityHigh_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightIntensityLow_NV) == 0x00003C, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightIntensityLow_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightColorHigh_NV) == 0x000040, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightColorHigh_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightColorLow_NV) == 0x000050, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightColorLow_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressMeshMaterialColorHigh_NV) == 0x000060, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressMeshMaterialColorHigh_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressMeshMaterialColorLow_NV) == 0x000070, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressMeshMaterialColorLow_NV' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightIntensityLowActive) == 0x000080, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightIntensityLowActive' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightIntensityHigh) == 0x000084, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightIntensityHigh' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightIntensityLow) == 0x000088, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightIntensityLow' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightColorHigh) == 0x00008C, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightColorHigh' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressLightColorLow) == 0x00009C, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressLightColorLow' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressMeshMaterialColorHigh) == 0x0000AC, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressMeshMaterialColorHigh' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, ProgressMeshMaterialColorLow) == 0x0000BC, "Member 'FXLibrary_C_GetScapegoatBulbData::ProgressMeshMaterialColorLow' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_GetScalarParameterValue_ReturnValue) == 0x0000CC, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000D0, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0000D1, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_LinearColorLerp_ReturnValue) == 0x0000D4, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_SelectFloat_ReturnValue) == 0x0000E4, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_Lerp_ReturnValue) == 0x0000E8, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_SelectFloat_ReturnValue_1) == 0x0000EC, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_Lerp_ReturnValue_1) == 0x0000F0, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0000F4, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_Lerp_ReturnValue_2) == 0x000104, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_LinearColorLerp_ReturnValue_2) == 0x000108, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_LinearColorLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FXLibrary_C_GetScapegoatBulbData, CallFunc_LinearColorLerp_ReturnValue_3) == 0x000118, "Member 'FXLibrary_C_GetScapegoatBulbData::CallFunc_LinearColorLerp_ReturnValue_3' has a wrong offset!");

}

