#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NumberRollMinus01_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass NumberRoll-01_BP.NumberRoll-01_BP_C
// 0x0058 (0x0288 - 0x0230)
class ANumberRollMinus01_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Root;                                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   One;                                               // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   One00;                                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   One0;                                              // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ActualNumber10;                                    // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActualNumber1;                                     // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActualNumber100;                                   // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetNumber;                                      // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomNumber;                                      // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomDelay;                                       // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     NumberMat;                                         // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Digit;                                             // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DigitDistance;                                     // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_NumberRollMinus01_BP(int32 EntryPoint);
	void SetColor(bool ChangeColor);
	void SetLit(bool Lit);
	void PushNumberRoll(int32 TargetNumber_0);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void UpdateActualNumber(float ActualNumber, float TargetNumber_0, float* NewActualNumber);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"NumberRoll-01_BP_C">();
	}
	static class ANumberRollMinus01_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANumberRollMinus01_BP_C>();
	}
};
static_assert(alignof(ANumberRollMinus01_BP_C) == 0x000008, "Wrong alignment on ANumberRollMinus01_BP_C");
static_assert(sizeof(ANumberRollMinus01_BP_C) == 0x000288, "Wrong size on ANumberRollMinus01_BP_C");
static_assert(offsetof(ANumberRollMinus01_BP_C, UberGraphFrame) == 0x000230, "Member 'ANumberRollMinus01_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, Root) == 0x000238, "Member 'ANumberRollMinus01_BP_C::Root' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, One) == 0x000240, "Member 'ANumberRollMinus01_BP_C::One' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, One00) == 0x000248, "Member 'ANumberRollMinus01_BP_C::One00' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, One0) == 0x000250, "Member 'ANumberRollMinus01_BP_C::One0' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, ActualNumber10) == 0x000258, "Member 'ANumberRollMinus01_BP_C::ActualNumber10' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, ActualNumber1) == 0x00025C, "Member 'ANumberRollMinus01_BP_C::ActualNumber1' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, ActualNumber100) == 0x000260, "Member 'ANumberRollMinus01_BP_C::ActualNumber100' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, TargetNumber) == 0x000264, "Member 'ANumberRollMinus01_BP_C::TargetNumber' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, Speed) == 0x000268, "Member 'ANumberRollMinus01_BP_C::Speed' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, RandomNumber) == 0x00026C, "Member 'ANumberRollMinus01_BP_C::RandomNumber' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, RandomDelay) == 0x000270, "Member 'ANumberRollMinus01_BP_C::RandomDelay' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, NumberMat) == 0x000278, "Member 'ANumberRollMinus01_BP_C::NumberMat' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, Digit) == 0x000280, "Member 'ANumberRollMinus01_BP_C::Digit' has a wrong offset!");
static_assert(offsetof(ANumberRollMinus01_BP_C, DigitDistance) == 0x000284, "Member 'ANumberRollMinus01_BP_C::DigitDistance' has a wrong offset!");

}

