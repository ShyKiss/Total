#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Decoder_QuestItem_BP

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.GetStateName
// 0x0028 (0x0028 - 0x0000)
struct Decoder_QuestItem_BP_C_GetStateName final
{
public:
	class FString                                 StateA;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 StateB;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_GetStateName) == 0x000008, "Wrong alignment on Decoder_QuestItem_BP_C_GetStateName");
static_assert(sizeof(Decoder_QuestItem_BP_C_GetStateName) == 0x000028, "Wrong size on Decoder_QuestItem_BP_C_GetStateName");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetStateName, StateA) == 0x000000, "Member 'Decoder_QuestItem_BP_C_GetStateName::StateA' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetStateName, StateB) == 0x000010, "Member 'Decoder_QuestItem_BP_C_GetStateName::StateB' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetStateName, ReturnValue) == 0x000020, "Member 'Decoder_QuestItem_BP_C_GetStateName::ReturnValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.FlipToCode
// 0x0010 (0x0010 - 0x0000)
struct Decoder_QuestItem_BP_C_FlipToCode final
{
public:
	class AFlipNumberCountDownMinus01_BP_C*       FlipNumber;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Int;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_FlipToCode) == 0x000008, "Wrong alignment on Decoder_QuestItem_BP_C_FlipToCode");
static_assert(sizeof(Decoder_QuestItem_BP_C_FlipToCode) == 0x000010, "Wrong size on Decoder_QuestItem_BP_C_FlipToCode");
static_assert(offsetof(Decoder_QuestItem_BP_C_FlipToCode, FlipNumber) == 0x000000, "Member 'Decoder_QuestItem_BP_C_FlipToCode::FlipNumber' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_FlipToCode, Int) == 0x000008, "Member 'Decoder_QuestItem_BP_C_FlipToCode::Int' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_FlipToCode, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00000C, "Member 'Decoder_QuestItem_BP_C_FlipToCode::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_FlipToCode, CallFunc_BooleanOR_ReturnValue) == 0x00000D, "Member 'Decoder_QuestItem_BP_C_FlipToCode::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.OnFlipCompleted
// 0x00B0 (0x00B0 - 0x0000)
struct Decoder_QuestItem_BP_C_OnFlipCompleted final
{
public:
	class AActor*                                 FlipNumberCounter;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDecoderProximityType                         DecoderLevel;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDecoderProximityType                         Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0010(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0020(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0038(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0048(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_1;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_2;                            // 0x0060(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x0070(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue_2;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_ByteByte_ReturnValue;        // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_ByteByte_ReturnValue_1;      // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_ByteByte_ReturnValue_2;      // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetClosestDecodable_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDecoderProximityType                         CallFunc_GetProximityLevel_ReturnValue;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDecoderProximityType                         K2Node_Select_Default;                             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue_2;                // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_OnFlipCompleted) == 0x000008, "Wrong alignment on Decoder_QuestItem_BP_C_OnFlipCompleted");
static_assert(sizeof(Decoder_QuestItem_BP_C_OnFlipCompleted) == 0x0000B0, "Wrong size on Decoder_QuestItem_BP_C_OnFlipCompleted");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, FlipNumberCounter) == 0x000000, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::FlipNumberCounter' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, DecoderLevel) == 0x000008, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::DecoderLevel' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, Temp_byte_Variable) == 0x000009, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, Temp_struct_Variable) == 0x000010, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, Temp_delegate_Variable) == 0x000020, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_MakeLiteralByte_ReturnValue) == 0x000030, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, Temp_struct_Variable_1) == 0x000038, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, Temp_delegate_Variable_1) == 0x000048, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_MakeLiteralByte_ReturnValue_1) == 0x000058, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_MakeLiteralByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, Temp_struct_Variable_2) == 0x000060, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, Temp_delegate_Variable_2) == 0x000070, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_MakeLiteralByte_ReturnValue_2) == 0x000080, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_MakeLiteralByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_BooleanOR_ReturnValue) == 0x000081, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_GreaterEqual_ByteByte_ReturnValue) == 0x000082, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_GreaterEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_GreaterEqual_ByteByte_ReturnValue_1) == 0x000083, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_GreaterEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_GreaterEqual_ByteByte_ReturnValue_2) == 0x000084, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_GreaterEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_GetClosestDecodable_ReturnValue) == 0x000088, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_GetClosestDecodable_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_GetProximityLevel_ReturnValue) == 0x000090, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_GetProximityLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_IsValid_ReturnValue) == 0x000091, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000092, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_BooleanAND_ReturnValue) == 0x000093, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_PostAkEvent_ReturnValue) == 0x000094, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000098, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, Temp_bool_Variable) == 0x000099, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_PostAkEvent_ReturnValue_1) == 0x00009C, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, K2Node_Select_Default) == 0x0000A0, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x0000A1, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_PostAkEvent_ReturnValue_2) == 0x0000A4, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_PostAkEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipCompleted, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x0000A8, "Member 'Decoder_QuestItem_BP_C_OnFlipCompleted::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.RefreshRTPCState
// 0x000C (0x000C - 0x0000)
struct Decoder_QuestItem_BP_C_RefreshRTPCState final
{
public:
	float                                         RTPCValue;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDesiredRTPCValue_value;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_RefreshRTPCState) == 0x000004, "Wrong alignment on Decoder_QuestItem_BP_C_RefreshRTPCState");
static_assert(sizeof(Decoder_QuestItem_BP_C_RefreshRTPCState) == 0x00000C, "Wrong size on Decoder_QuestItem_BP_C_RefreshRTPCState");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshRTPCState, RTPCValue) == 0x000000, "Member 'Decoder_QuestItem_BP_C_RefreshRTPCState::RTPCValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshRTPCState, CallFunc_GetDesiredRTPCValue_value) == 0x000004, "Member 'Decoder_QuestItem_BP_C_RefreshRTPCState::CallFunc_GetDesiredRTPCValue_value' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshRTPCState, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'Decoder_QuestItem_BP_C_RefreshRTPCState::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.GetDesiredRTPCValue
// 0x0054 (0x0054 - 0x0000)
struct Decoder_QuestItem_BP_C_GetDesiredRTPCValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDecoderProximityType                         Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDecoderProximityType                         Temp_byte_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_7;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_10;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_11;                            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_12;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_13;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BP_IsHolding_ReturnValue;                 // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDecoderProximityType                         CallFunc_GetProximityLevel_ReturnValue;            // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue) == 0x000004, "Wrong alignment on Decoder_QuestItem_BP_C_GetDesiredRTPCValue");
static_assert(sizeof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue) == 0x000054, "Wrong size on Decoder_QuestItem_BP_C_GetDesiredRTPCValue");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Value) == 0x000000, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Value' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_byte_Variable) == 0x000004, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable) == 0x000008, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_1) == 0x00000C, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_2) == 0x000010, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_3) == 0x000014, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_4) == 0x000018, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_5) == 0x00001C, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_6) == 0x000020, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_byte_Variable_1) == 0x000024, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_7) == 0x000028, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_8) == 0x00002C, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_9) == 0x000030, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_10) == 0x000034, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_10' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_11) == 0x000038, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_11' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_12) == 0x00003C, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_12' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, Temp_float_Variable_13) == 0x000040, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::Temp_float_Variable_13' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, CallFunc_BP_IsHolding_ReturnValue) == 0x000044, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::CallFunc_BP_IsHolding_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, CallFunc_GetProximityLevel_ReturnValue) == 0x000045, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::CallFunc_GetProximityLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, K2Node_Select_Default) == 0x000048, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, K2Node_Select_Default_1) == 0x00004C, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_GetDesiredRTPCValue, CallFunc_SelectFloat_ReturnValue) == 0x000050, "Member 'Decoder_QuestItem_BP_C_GetDesiredRTPCValue::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.UpdateSound
// 0x0030 (0x0030 - 0x0000)
struct Decoder_QuestItem_BP_C_UpdateSound final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDecoderProximityType                         Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDecoderProximityType                         Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDecoderProximityType                         Temp_byte_Variable_2;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetClosestDecodable_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDecoderProximityType                         CallFunc_GetProximityLevel_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsItemHeldInHand_ReturnValue;             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDecoderProximityType                         K2Node_Select_Default;                             // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsHolding_ReturnValue;                 // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default_2;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_PlayLoopingSoundOnActor_ReturnValue;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Decoder_QuestItem_BP_C_UpdateSound) == 0x000008, "Wrong alignment on Decoder_QuestItem_BP_C_UpdateSound");
static_assert(sizeof(Decoder_QuestItem_BP_C_UpdateSound) == 0x000030, "Wrong size on Decoder_QuestItem_BP_C_UpdateSound");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable) == 0x000000, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_byte_Variable) == 0x000001, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_byte_Variable_1) == 0x000002, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_1) == 0x000003, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_2) == 0x000004, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_3) == 0x000005, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_4) == 0x000006, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_5) == 0x000007, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_6) == 0x000008, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_7) == 0x000009, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_byte_Variable_2) == 0x00000A, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_8) == 0x00000B, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_9) == 0x00000C, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_10) == 0x00000D, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_11) == 0x00000E, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_12) == 0x00000F, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_13) == 0x000010, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, Temp_bool_Variable_14) == 0x000011, "Member 'Decoder_QuestItem_BP_C_UpdateSound::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_IsDedicatedServer_ReturnValue) == 0x000012, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_GetClosestDecodable_ReturnValue) == 0x000018, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_GetClosestDecodable_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_GetProximityLevel_ReturnValue) == 0x000020, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_GetProximityLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000021, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_IsItemHeldInHand_ReturnValue) == 0x000023, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_IsItemHeldInHand_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, K2Node_Select_Default) == 0x000025, "Member 'Decoder_QuestItem_BP_C_UpdateSound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, K2Node_Select_Default_1) == 0x000026, "Member 'Decoder_QuestItem_BP_C_UpdateSound::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_BP_IsHolding_ReturnValue) == 0x000027, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_BP_IsHolding_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, K2Node_Select_Default_2) == 0x000028, "Member 'Decoder_QuestItem_BP_C_UpdateSound::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_BooleanAND_ReturnValue_1) == 0x000029, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_BooleanOR_ReturnValue) == 0x00002A, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_BooleanAND_ReturnValue_2) == 0x00002B, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_UpdateSound, CallFunc_PlayLoopingSoundOnActor_ReturnValue) == 0x00002C, "Member 'Decoder_QuestItem_BP_C_UpdateSound::CallFunc_PlayLoopingSoundOnActor_ReturnValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.OnFlipNumber
// 0x0038 (0x0038 - 0x0000)
struct Decoder_QuestItem_BP_C_OnFlipNumber final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsItemHeldInHand_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	class ARBPawn*                                CallFunc_GetPawnOwner_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Decoder_QuestItem_BP_C_OnFlipNumber) == 0x000008, "Wrong alignment on Decoder_QuestItem_BP_C_OnFlipNumber");
static_assert(sizeof(Decoder_QuestItem_BP_C_OnFlipNumber) == 0x000038, "Wrong size on Decoder_QuestItem_BP_C_OnFlipNumber");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipNumber, Temp_delegate_Variable) == 0x000000, "Member 'Decoder_QuestItem_BP_C_OnFlipNumber::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipNumber, CallFunc_IsItemHeldInHand_ReturnValue) == 0x000010, "Member 'Decoder_QuestItem_BP_C_OnFlipNumber::CallFunc_IsItemHeldInHand_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipNumber, Temp_struct_Variable) == 0x000018, "Member 'Decoder_QuestItem_BP_C_OnFlipNumber::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipNumber, CallFunc_GetPawnOwner_ReturnValue) == 0x000028, "Member 'Decoder_QuestItem_BP_C_OnFlipNumber::CallFunc_GetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipNumber, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'Decoder_QuestItem_BP_C_OnFlipNumber::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_OnFlipNumber, CallFunc_PostAkEvent_ReturnValue) == 0x000034, "Member 'Decoder_QuestItem_BP_C_OnFlipNumber::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.SetCode
// 0x0048 (0x0048 - 0x0000)
struct Decoder_QuestItem_BP_C_SetCode final
{
public:
	bool                                          One00;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Zero10;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Zero01;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bInfiniteFlipElse;                                 // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DecodableObject;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IRBDecodable>          K2Node_DynamicCast_AsRB_Decodable;                 // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCode_ReturnValue;                      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_1;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_SetCode) == 0x000008, "Wrong alignment on Decoder_QuestItem_BP_C_SetCode");
static_assert(sizeof(Decoder_QuestItem_BP_C_SetCode) == 0x000048, "Wrong size on Decoder_QuestItem_BP_C_SetCode");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, One00) == 0x000000, "Member 'Decoder_QuestItem_BP_C_SetCode::One00' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, Zero10) == 0x000001, "Member 'Decoder_QuestItem_BP_C_SetCode::Zero10' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, Zero01) == 0x000002, "Member 'Decoder_QuestItem_BP_C_SetCode::Zero01' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, bInfiniteFlipElse) == 0x000003, "Member 'Decoder_QuestItem_BP_C_SetCode::bInfiniteFlipElse' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, DecodableObject) == 0x000008, "Member 'Decoder_QuestItem_BP_C_SetCode::DecodableObject' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, Temp_int_Variable) == 0x000010, "Member 'Decoder_QuestItem_BP_C_SetCode::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, K2Node_DynamicCast_AsRB_Decodable) == 0x000018, "Member 'Decoder_QuestItem_BP_C_SetCode::K2Node_DynamicCast_AsRB_Decodable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'Decoder_QuestItem_BP_C_SetCode::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, CallFunc_GetCode_ReturnValue) == 0x00002C, "Member 'Decoder_QuestItem_BP_C_SetCode::CallFunc_GetCode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, CallFunc_Percent_IntInt_ReturnValue) == 0x000030, "Member 'Decoder_QuestItem_BP_C_SetCode::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, CallFunc_Divide_IntInt_ReturnValue) == 0x000034, "Member 'Decoder_QuestItem_BP_C_SetCode::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000038, "Member 'Decoder_QuestItem_BP_C_SetCode::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, CallFunc_Percent_IntInt_ReturnValue_1) == 0x00003C, "Member 'Decoder_QuestItem_BP_C_SetCode::CallFunc_Percent_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetCode, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'Decoder_QuestItem_BP_C_SetCode::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.RefreshVisualState
// 0x0030 (0x0030 - 0x0000)
struct Decoder_QuestItem_BP_C_RefreshVisualState final
{
public:
	EDecoderProximityType                         Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetClosestDecodable_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_GetClosestDecodable_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_GetClosestDecodable_ReturnValue_2;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EDecoderProximityType                         CallFunc_GetProximityLevel_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDecoderProximityType                         K2Node_Select_Default;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_RefreshVisualState) == 0x000008, "Wrong alignment on Decoder_QuestItem_BP_C_RefreshVisualState");
static_assert(sizeof(Decoder_QuestItem_BP_C_RefreshVisualState) == 0x000030, "Wrong size on Decoder_QuestItem_BP_C_RefreshVisualState");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, Temp_byte_Variable) == 0x000000, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_IsDedicatedServer_ReturnValue) == 0x000001, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_GetClosestDecodable_ReturnValue) == 0x000008, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_GetClosestDecodable_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_GetClosestDecodable_ReturnValue_1) == 0x000010, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_GetClosestDecodable_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, Temp_bool_Variable) == 0x000019, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_IsValid_ReturnValue_2) == 0x00001B, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00001C, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_IsValid_ReturnValue_3) == 0x00001D, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_GetClosestDecodable_ReturnValue_2) == 0x000020, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_GetClosestDecodable_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_IsValid_ReturnValue_4) == 0x000028, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, CallFunc_GetProximityLevel_ReturnValue) == 0x000029, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::CallFunc_GetProximityLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, K2Node_Select_Default) == 0x00002A, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_RefreshVisualState, K2Node_SwitchEnum_CmpSuccess) == 0x00002B, "Member 'Decoder_QuestItem_BP_C_RefreshVisualState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.PrepareState
// 0x0010 (0x0010 - 0x0000)
struct Decoder_QuestItem_BP_C_PrepareState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RandomOwner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Decoder_QuestItem_BP_C_PrepareState) == 0x000008, "Wrong alignment on Decoder_QuestItem_BP_C_PrepareState");
static_assert(sizeof(Decoder_QuestItem_BP_C_PrepareState) == 0x000010, "Wrong size on Decoder_QuestItem_BP_C_PrepareState");
static_assert(offsetof(Decoder_QuestItem_BP_C_PrepareState, bStateA) == 0x000000, "Member 'Decoder_QuestItem_BP_C_PrepareState::bStateA' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_PrepareState, RandomOwner) == 0x000008, "Member 'Decoder_QuestItem_BP_C_PrepareState::RandomOwner' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.SetShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct Decoder_QuestItem_BP_C_SetShouldBeIgnoredForLots final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on Decoder_QuestItem_BP_C_SetShouldBeIgnoredForLots");
static_assert(sizeof(Decoder_QuestItem_BP_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong size on Decoder_QuestItem_BP_C_SetShouldBeIgnoredForLots");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetShouldBeIgnoredForLots, bValue) == 0x000000, "Member 'Decoder_QuestItem_BP_C_SetShouldBeIgnoredForLots::bValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.SetState
// 0x0001 (0x0001 - 0x0000)
struct Decoder_QuestItem_BP_C_SetState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_SetState) == 0x000001, "Wrong alignment on Decoder_QuestItem_BP_C_SetState");
static_assert(sizeof(Decoder_QuestItem_BP_C_SetState) == 0x000001, "Wrong size on Decoder_QuestItem_BP_C_SetState");
static_assert(offsetof(Decoder_QuestItem_BP_C_SetState, bStateA) == 0x000000, "Member 'Decoder_QuestItem_BP_C_SetState::bStateA' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.Event_OnItemHeldInHandChanged
// 0x0001 (0x0001 - 0x0000)
struct Decoder_QuestItem_BP_C_Event_OnItemHeldInHandChanged final
{
public:
	bool                                          bHeldInHand;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_Event_OnItemHeldInHandChanged) == 0x000001, "Wrong alignment on Decoder_QuestItem_BP_C_Event_OnItemHeldInHandChanged");
static_assert(sizeof(Decoder_QuestItem_BP_C_Event_OnItemHeldInHandChanged) == 0x000001, "Wrong size on Decoder_QuestItem_BP_C_Event_OnItemHeldInHandChanged");
static_assert(offsetof(Decoder_QuestItem_BP_C_Event_OnItemHeldInHandChanged, bHeldInHand) == 0x000000, "Member 'Decoder_QuestItem_BP_C_Event_OnItemHeldInHandChanged::bHeldInHand' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.ExecuteUbergraph_Decoder_QuestItem_BP
// 0x0188 (0x0188 - 0x0000)
struct Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0010(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0020(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0030(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0040(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0060(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0090(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x00A0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bStateA_1;                            // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_randomOwner;                          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bValue;                               // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bStateA;                              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsHolding_ReturnValue;                 // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00C8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlipNumberCountDownMinus01_BP_C*       K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP; // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlipNumberCountDownMinus01_BP_C*       K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_1; // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlipNumberCountDownMinus01_BP_C*       K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_2; // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bHeldInHand;                          // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP) == 0x000008, "Wrong alignment on Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP");
static_assert(sizeof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP) == 0x000188, "Wrong size on Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, EntryPoint) == 0x000000, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, CallFunc_MakeRotator_ReturnValue) == 0x000004, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, Temp_struct_Variable) == 0x000010, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, Temp_delegate_Variable) == 0x000020, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, Temp_struct_Variable_1) == 0x000030, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, Temp_delegate_Variable_1) == 0x000040, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_CreateDelegate_OutputDelegate) == 0x000050, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_CreateDelegate_OutputDelegate_1) == 0x000060, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_CreateDelegate_OutputDelegate_2) == 0x000070, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_CreateDelegate_OutputDelegate_3) == 0x000080, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_CreateDelegate_OutputDelegate_4) == 0x000090, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000A0, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000B0, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x0000B1, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_Event_bStateA_1) == 0x0000B2, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_Event_bStateA_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_Event_randomOwner) == 0x0000B8, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_Event_randomOwner' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_Event_bValue) == 0x0000C0, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_Event_bValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_Event_bStateA) == 0x0000C1, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_Event_bStateA' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, CallFunc_BP_IsHolding_ReturnValue) == 0x0000C2, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::CallFunc_BP_IsHolding_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, CallFunc_PostAkEvent_ReturnValue) == 0x0000C4, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000C8, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, CallFunc_PostAkEvent_ReturnValue_1) == 0x000150, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP) == 0x000158, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_DynamicCast_bSuccess) == 0x000160, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_1) == 0x000168, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_DynamicCast_bSuccess_1) == 0x000170, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_2) == 0x000178, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_DynamicCast_bSuccess_2) == 0x000180, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP, K2Node_Event_bHeldInHand) == 0x000181, "Member 'Decoder_QuestItem_BP_C_ExecuteUbergraph_Decoder_QuestItem_BP::K2Node_Event_bHeldInHand' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.IsRandomStateSet
// 0x0001 (0x0001 - 0x0000)
struct Decoder_QuestItem_BP_C_IsRandomStateSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_IsRandomStateSet) == 0x000001, "Wrong alignment on Decoder_QuestItem_BP_C_IsRandomStateSet");
static_assert(sizeof(Decoder_QuestItem_BP_C_IsRandomStateSet) == 0x000001, "Wrong size on Decoder_QuestItem_BP_C_IsRandomStateSet");
static_assert(offsetof(Decoder_QuestItem_BP_C_IsRandomStateSet, ReturnValue) == 0x000000, "Member 'Decoder_QuestItem_BP_C_IsRandomStateSet::ReturnValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.IsStateA
// 0x0002 (0x0002 - 0x0000)
struct Decoder_QuestItem_BP_C_IsStateA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsStateA_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_IsStateA) == 0x000001, "Wrong alignment on Decoder_QuestItem_BP_C_IsStateA");
static_assert(sizeof(Decoder_QuestItem_BP_C_IsStateA) == 0x000002, "Wrong size on Decoder_QuestItem_BP_C_IsStateA");
static_assert(offsetof(Decoder_QuestItem_BP_C_IsStateA, ReturnValue) == 0x000000, "Member 'Decoder_QuestItem_BP_C_IsStateA::ReturnValue' has a wrong offset!");
static_assert(offsetof(Decoder_QuestItem_BP_C_IsStateA, CallFunc_BP_IsStateA_ReturnValue) == 0x000001, "Member 'Decoder_QuestItem_BP_C_IsStateA::CallFunc_BP_IsStateA_ReturnValue' has a wrong offset!");

// Function Decoder_QuestItem_BP.Decoder_QuestItem_BP_C.ShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct Decoder_QuestItem_BP_C_ShouldBeIgnoredForLots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Decoder_QuestItem_BP_C_ShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on Decoder_QuestItem_BP_C_ShouldBeIgnoredForLots");
static_assert(sizeof(Decoder_QuestItem_BP_C_ShouldBeIgnoredForLots) == 0x000001, "Wrong size on Decoder_QuestItem_BP_C_ShouldBeIgnoredForLots");
static_assert(offsetof(Decoder_QuestItem_BP_C_ShouldBeIgnoredForLots, ReturnValue) == 0x000000, "Member 'Decoder_QuestItem_BP_C_ShouldBeIgnoredForLots::ReturnValue' has a wrong offset!");

}

