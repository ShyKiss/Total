#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PerkUpgradeButton

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "OPP_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function PerkUpgradeButton.PerkUpgradeButton_C.OnClickedEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PerkUpgradeButton_C_OnClickedEvent__DelegateSignature final
{
public:
	class UPerkUpgradeButton_C*                   Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkUpgradeButton_C_OnClickedEvent__DelegateSignature) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_OnClickedEvent__DelegateSignature");
static_assert(sizeof(PerkUpgradeButton_C_OnClickedEvent__DelegateSignature) == 0x000008, "Wrong size on PerkUpgradeButton_C_OnClickedEvent__DelegateSignature");
static_assert(offsetof(PerkUpgradeButton_C_OnClickedEvent__DelegateSignature, Button) == 0x000000, "Member 'PerkUpgradeButton_C_OnClickedEvent__DelegateSignature::Button' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.OnHoveredEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PerkUpgradeButton_C_OnHoveredEvent__DelegateSignature final
{
public:
	class UPerkUpgradeButton_C*                   Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkUpgradeButton_C_OnHoveredEvent__DelegateSignature) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_OnHoveredEvent__DelegateSignature");
static_assert(sizeof(PerkUpgradeButton_C_OnHoveredEvent__DelegateSignature) == 0x000008, "Wrong size on PerkUpgradeButton_C_OnHoveredEvent__DelegateSignature");
static_assert(offsetof(PerkUpgradeButton_C_OnHoveredEvent__DelegateSignature, Button) == 0x000000, "Member 'PerkUpgradeButton_C_OnHoveredEvent__DelegateSignature::Button' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.OnUnhoveredEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PerkUpgradeButton_C_OnUnhoveredEvent__DelegateSignature final
{
public:
	class UPerkUpgradeButton_C*                   Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkUpgradeButton_C_OnUnhoveredEvent__DelegateSignature) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_OnUnhoveredEvent__DelegateSignature");
static_assert(sizeof(PerkUpgradeButton_C_OnUnhoveredEvent__DelegateSignature) == 0x000008, "Wrong size on PerkUpgradeButton_C_OnUnhoveredEvent__DelegateSignature");
static_assert(offsetof(PerkUpgradeButton_C_OnUnhoveredEvent__DelegateSignature, Button) == 0x000000, "Member 'PerkUpgradeButton_C_OnUnhoveredEvent__DelegateSignature::Button' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.OnPressedEvent__DelegateSignature
// 0x0190 (0x0190 - 0x0000)
struct PerkUpgradeButton_C_OnPressedEvent__DelegateSignature final
{
public:
	struct FMenuUpgradeItemInfo                   ItemInfo_0;                                        // 0x0000(0x0190)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(PerkUpgradeButton_C_OnPressedEvent__DelegateSignature) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_OnPressedEvent__DelegateSignature");
static_assert(sizeof(PerkUpgradeButton_C_OnPressedEvent__DelegateSignature) == 0x000190, "Wrong size on PerkUpgradeButton_C_OnPressedEvent__DelegateSignature");
static_assert(offsetof(PerkUpgradeButton_C_OnPressedEvent__DelegateSignature, ItemInfo_0) == 0x000000, "Member 'PerkUpgradeButton_C_OnPressedEvent__DelegateSignature::ItemInfo_0' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.OnReleasedEvent__DelegateSignature
// 0x0190 (0x0190 - 0x0000)
struct PerkUpgradeButton_C_OnReleasedEvent__DelegateSignature final
{
public:
	struct FMenuUpgradeItemInfo                   ItemInfo_0;                                        // 0x0000(0x0190)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(PerkUpgradeButton_C_OnReleasedEvent__DelegateSignature) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_OnReleasedEvent__DelegateSignature");
static_assert(sizeof(PerkUpgradeButton_C_OnReleasedEvent__DelegateSignature) == 0x000190, "Wrong size on PerkUpgradeButton_C_OnReleasedEvent__DelegateSignature");
static_assert(offsetof(PerkUpgradeButton_C_OnReleasedEvent__DelegateSignature, ItemInfo_0) == 0x000000, "Member 'PerkUpgradeButton_C_OnReleasedEvent__DelegateSignature::ItemInfo_0' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.OnBuyAnimationEndedEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct PerkUpgradeButton_C_OnBuyAnimationEndedEvent__DelegateSignature final
{
public:
	class UPerkUpgradeButton_C*                   PerkUpgradeButton;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkUpgradeButton_C_OnBuyAnimationEndedEvent__DelegateSignature) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_OnBuyAnimationEndedEvent__DelegateSignature");
static_assert(sizeof(PerkUpgradeButton_C_OnBuyAnimationEndedEvent__DelegateSignature) == 0x000008, "Wrong size on PerkUpgradeButton_C_OnBuyAnimationEndedEvent__DelegateSignature");
static_assert(offsetof(PerkUpgradeButton_C_OnBuyAnimationEndedEvent__DelegateSignature, PerkUpgradeButton) == 0x000000, "Member 'PerkUpgradeButton_C_OnBuyAnimationEndedEvent__DelegateSignature::PerkUpgradeButton' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.ExecuteUbergraph_PerkUpgradeButton
// 0x0010 (0x0010 - 0x0000)
struct PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URBMenuManager*                         CallFunc_GetMenuManager_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton");
static_assert(sizeof(PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton) == 0x000010, "Wrong size on PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton");
static_assert(offsetof(PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton, EntryPoint) == 0x000000, "Member 'PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton::EntryPoint' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton, K2Node_Event_IsDesignTime) == 0x000004, "Member 'PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton, CallFunc_GetMenuManager_ReturnValue) == 0x000008, "Member 'PerkUpgradeButton_C_ExecuteUbergraph_PerkUpgradeButton::CallFunc_GetMenuManager_ReturnValue' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct PerkUpgradeButton_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkUpgradeButton_C_PreConstruct) == 0x000001, "Wrong alignment on PerkUpgradeButton_C_PreConstruct");
static_assert(sizeof(PerkUpgradeButton_C_PreConstruct) == 0x000001, "Wrong size on PerkUpgradeButton_C_PreConstruct");
static_assert(offsetof(PerkUpgradeButton_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'PerkUpgradeButton_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.Initialize
// 0x0598 (0x0598 - 0x0000)
struct PerkUpgradeButton_C_Initialize final
{
public:
	struct FMenuUpgradeItemInfo                   ItemUpgradeInfo;                                   // 0x0000(0x0190)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          InIsLoadout;                                       // 0x0190(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bInIsSlot;                                         // 0x0191(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_192[0x6];                                      // 0x0192(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayerState*                         PlayerState;                                       // 0x0198(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayerState*                         RB_Player_State;                                   // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EMenuUpgradeItemState                         Temp_byte_Variable;                                // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELoadoutElementType                           Temp_byte_Variable_1;                              // 0x01AB(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AE[0x2];                                      // 0x01AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMenuUpgradeItemInfo                   CallFunc_GetUpgradeItemInfoForPlayer_ReturnValue;  // 0x01B0(0x0190)()
	bool                                          CallFunc_HasRecentlyBoughtUpgradeOfType_ReturnValue; // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0342(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0343(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0344(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0345(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0346(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasUpgradeRecentlyBought_ReturnValue;     // 0x0347(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0349(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x034A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WasSeenInMenu_ReturnValue;                // 0x034B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x034C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x034D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x034E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x034F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class ARBPlayerState*                         CallFunc_GetLocalPlayerState_ReturnValue;          // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayerState*                         K2Node_Select_Default;                             // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBPlayerProgressionData*               CallFunc_GetPlayerProgressionData_ReturnValue;     // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBItemProgressionData                 CallFunc_GetItemProgressionData_ReturnValue;       // 0x0370(0x0170)(ConstParm)
	class URBGlobalUIConfig*                      CallFunc_GetGlobalUIConfig_ReturnValue;            // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x04E8(0x0028)()
	struct FSlateColor                            CallFunc_Map_Find_Value;                           // 0x0510(0x0028)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539[0x7];                                      // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0540(0x0028)()
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x0568(0x0028)()
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkUpgradeButton_C_Initialize) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_Initialize");
static_assert(sizeof(PerkUpgradeButton_C_Initialize) == 0x000598, "Wrong size on PerkUpgradeButton_C_Initialize");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, ItemUpgradeInfo) == 0x000000, "Member 'PerkUpgradeButton_C_Initialize::ItemUpgradeInfo' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, InIsLoadout) == 0x000190, "Member 'PerkUpgradeButton_C_Initialize::InIsLoadout' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, bInIsSlot) == 0x000191, "Member 'PerkUpgradeButton_C_Initialize::bInIsSlot' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, PlayerState) == 0x000198, "Member 'PerkUpgradeButton_C_Initialize::PlayerState' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, RB_Player_State) == 0x0001A0, "Member 'PerkUpgradeButton_C_Initialize::RB_Player_State' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, Temp_bool_Variable) == 0x0001A8, "Member 'PerkUpgradeButton_C_Initialize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x0001A9, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, Temp_byte_Variable) == 0x0001AA, "Member 'PerkUpgradeButton_C_Initialize::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, Temp_byte_Variable_1) == 0x0001AB, "Member 'PerkUpgradeButton_C_Initialize::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_Not_PreBool_ReturnValue) == 0x0001AC, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001AD, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_GetUpgradeItemInfoForPlayer_ReturnValue) == 0x0001B0, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_GetUpgradeItemInfoForPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_HasRecentlyBoughtUpgradeOfType_ReturnValue) == 0x000340, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_HasRecentlyBoughtUpgradeOfType_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000341, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_BooleanAND_ReturnValue) == 0x000342, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_BooleanAND_ReturnValue_1) == 0x000343, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_BooleanAND_ReturnValue_2) == 0x000344, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000345, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000346, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_WasUpgradeRecentlyBought_ReturnValue) == 0x000347, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_WasUpgradeRecentlyBought_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_BooleanOR_ReturnValue) == 0x000348, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_BooleanAND_ReturnValue_3) == 0x000349, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_BooleanAND_ReturnValue_4) == 0x00034A, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_WasSeenInMenu_ReturnValue) == 0x00034B, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_WasSeenInMenu_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_Not_PreBool_ReturnValue_2) == 0x00034C, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_BooleanAND_ReturnValue_5) == 0x00034D, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_BooleanAND_ReturnValue_6) == 0x00034E, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_BooleanOR_ReturnValue_1) == 0x00034F, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_GetLocalPlayerState_ReturnValue) == 0x000350, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_GetLocalPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, K2Node_Select_Default) == 0x000358, "Member 'PerkUpgradeButton_C_Initialize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_GetPlayerProgressionData_ReturnValue) == 0x000360, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_GetPlayerProgressionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000368, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_GetItemProgressionData_ReturnValue) == 0x000370, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_GetItemProgressionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_GetGlobalUIConfig_ReturnValue) == 0x0004E0, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_GetGlobalUIConfig_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, K2Node_MakeStruct_SlateColor) == 0x0004E8, "Member 'PerkUpgradeButton_C_Initialize::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_Map_Find_Value) == 0x000510, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_Map_Find_ReturnValue) == 0x000538, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, K2Node_MakeStruct_SlateColor_1) == 0x000540, "Member 'PerkUpgradeButton_C_Initialize::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, K2Node_Select_Default_1) == 0x000568, "Member 'PerkUpgradeButton_C_Initialize::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Initialize, CallFunc_NotEqual_NameName_ReturnValue) == 0x000590, "Member 'PerkUpgradeButton_C_Initialize::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.Initialize Locked Slot
// 0x0028 (0x0028 - 0x0000)
struct PerkUpgradeButton_C_Initialize_Locked_Slot final
{
public:
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0000(0x0028)()
};
static_assert(alignof(PerkUpgradeButton_C_Initialize_Locked_Slot) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_Initialize_Locked_Slot");
static_assert(sizeof(PerkUpgradeButton_C_Initialize_Locked_Slot) == 0x000028, "Wrong size on PerkUpgradeButton_C_Initialize_Locked_Slot");
static_assert(offsetof(PerkUpgradeButton_C_Initialize_Locked_Slot, K2Node_MakeStruct_SlateColor) == 0x000000, "Member 'PerkUpgradeButton_C_Initialize_Locked_Slot::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.InitializeEmptySlot
// 0x0058 (0x0058 - 0x0000)
struct PerkUpgradeButton_C_InitializeEmptySlot final
{
public:
	bool                                          DisplayPlus;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InIsLoadout;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	EPerkCategory                                 PerkCategory;                                      // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0018(0x0028)()
	bool                                          CallFunc_HasRecentlyBoughtUpgradeOfType_ReturnValue; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkUpgradeButton_C_InitializeEmptySlot) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_InitializeEmptySlot");
static_assert(sizeof(PerkUpgradeButton_C_InitializeEmptySlot) == 0x000058, "Wrong size on PerkUpgradeButton_C_InitializeEmptySlot");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, DisplayPlus) == 0x000000, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::DisplayPlus' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, InIsLoadout) == 0x000001, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::InIsLoadout' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, PerkCategory) == 0x000002, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::PerkCategory' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, Temp_bool_Variable) == 0x000003, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, Temp_object_Variable) == 0x000008, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, Temp_object_Variable_1) == 0x000010, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, K2Node_MakeStruct_SlateColor) == 0x000018, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, CallFunc_HasRecentlyBoughtUpgradeOfType_ReturnValue) == 0x000040, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::CallFunc_HasRecentlyBoughtUpgradeOfType_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, K2Node_Select_Default) == 0x000048, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_InitializeEmptySlot, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'PerkUpgradeButton_C_InitializeEmptySlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.SetIsEquipped
// 0x0001 (0x0001 - 0x0000)
struct PerkUpgradeButton_C_SetIsEquipped final
{
public:
	bool                                          IsEquipped;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkUpgradeButton_C_SetIsEquipped) == 0x000001, "Wrong alignment on PerkUpgradeButton_C_SetIsEquipped");
static_assert(sizeof(PerkUpgradeButton_C_SetIsEquipped) == 0x000001, "Wrong size on PerkUpgradeButton_C_SetIsEquipped");
static_assert(offsetof(PerkUpgradeButton_C_SetIsEquipped, IsEquipped) == 0x000000, "Member 'PerkUpgradeButton_C_SetIsEquipped::IsEquipped' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.GetIsEquipped
// 0x0001 (0x0001 - 0x0000)
struct PerkUpgradeButton_C_GetIsEquipped final
{
public:
	bool                                          IsEquipped;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkUpgradeButton_C_GetIsEquipped) == 0x000001, "Wrong alignment on PerkUpgradeButton_C_GetIsEquipped");
static_assert(sizeof(PerkUpgradeButton_C_GetIsEquipped) == 0x000001, "Wrong size on PerkUpgradeButton_C_GetIsEquipped");
static_assert(offsetof(PerkUpgradeButton_C_GetIsEquipped, IsEquipped) == 0x000000, "Member 'PerkUpgradeButton_C_GetIsEquipped::IsEquipped' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.OnFocusReceived
// 0x01D0 (0x01D0 - 0x0000)
struct PerkUpgradeButton_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00F8(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0108(0x0010)(ZeroConstructor, NoDestructor)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0118(0x00B8)()
};
static_assert(alignof(PerkUpgradeButton_C_OnFocusReceived) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_OnFocusReceived");
static_assert(sizeof(PerkUpgradeButton_C_OnFocusReceived) == 0x0001D0, "Wrong size on PerkUpgradeButton_C_OnFocusReceived");
static_assert(offsetof(PerkUpgradeButton_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'PerkUpgradeButton_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'PerkUpgradeButton_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'PerkUpgradeButton_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_OnFocusReceived, K2Node_CreateDelegate_OutputDelegate) == 0x0000F8, "Member 'PerkUpgradeButton_C_OnFocusReceived::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_OnFocusReceived, K2Node_CreateDelegate_OutputDelegate_1) == 0x000108, "Member 'PerkUpgradeButton_C_OnFocusReceived::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x000118, "Member 'PerkUpgradeButton_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.OnFocusLost
// 0x0008 (0x0008 - 0x0000)
struct PerkUpgradeButton_C_OnFocusLost final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(PerkUpgradeButton_C_OnFocusLost) == 0x000004, "Wrong alignment on PerkUpgradeButton_C_OnFocusLost");
static_assert(sizeof(PerkUpgradeButton_C_OnFocusLost) == 0x000008, "Wrong size on PerkUpgradeButton_C_OnFocusLost");
static_assert(offsetof(PerkUpgradeButton_C_OnFocusLost, InFocusEvent) == 0x000000, "Member 'PerkUpgradeButton_C_OnFocusLost::InFocusEvent' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.Setup
// 0x01C0 (0x01C0 - 0x0000)
struct PerkUpgradeButton_C_Setup final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMenuUpgradeItemState                         Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECurrencyType                                 Temp_byte_Variable_3;                              // 0x000C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMenuUpgradeItemState                         Temp_byte_Variable_4;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_16;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_18;                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URBPlayerProgressionData*               CallFunc_GetLocalPlayerProgressionData_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRBItemProgressionData                 CallFunc_GetItemProgressionData_ReturnValue;       // 0x0028(0x0170)(ConstParm)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x019D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19E[0x2];                                      // 0x019E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x01A0(0x0018)()
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_2;                           // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x01BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkUpgradeButton_C_Setup) == 0x000008, "Wrong alignment on PerkUpgradeButton_C_Setup");
static_assert(sizeof(PerkUpgradeButton_C_Setup) == 0x0001C0, "Wrong size on PerkUpgradeButton_C_Setup");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable) == 0x000000, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_byte_Variable) == 0x000001, "Member 'PerkUpgradeButton_C_Setup::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_byte_Variable_1) == 0x000002, "Member 'PerkUpgradeButton_C_Setup::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_byte_Variable_2) == 0x000003, "Member 'PerkUpgradeButton_C_Setup::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_1) == 0x000004, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_2) == 0x000005, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_3) == 0x000006, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_4) == 0x000007, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_5) == 0x000008, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_6) == 0x000009, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_7) == 0x00000A, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_8) == 0x00000B, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_byte_Variable_3) == 0x00000C, "Member 'PerkUpgradeButton_C_Setup::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_byte_Variable_4) == 0x00000D, "Member 'PerkUpgradeButton_C_Setup::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_9) == 0x00000E, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_10) == 0x00000F, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_11) == 0x000010, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_12) == 0x000011, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_13) == 0x000012, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_14) == 0x000013, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_15) == 0x000014, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_16) == 0x000015, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_17) == 0x000016, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_byte_Variable_5) == 0x000017, "Member 'PerkUpgradeButton_C_Setup::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_byte_Variable_6) == 0x000018, "Member 'PerkUpgradeButton_C_Setup::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_bool_Variable_18) == 0x000019, "Member 'PerkUpgradeButton_C_Setup::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_byte_Variable_7) == 0x00001A, "Member 'PerkUpgradeButton_C_Setup::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, Temp_byte_Variable_8) == 0x00001B, "Member 'PerkUpgradeButton_C_Setup::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, CallFunc_GetLocalPlayerProgressionData_ReturnValue) == 0x000020, "Member 'PerkUpgradeButton_C_Setup::CallFunc_GetLocalPlayerProgressionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, CallFunc_GetItemProgressionData_ReturnValue) == 0x000028, "Member 'PerkUpgradeButton_C_Setup::CallFunc_GetItemProgressionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, CallFunc_Map_Find_Value) == 0x000198, "Member 'PerkUpgradeButton_C_Setup::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, CallFunc_Map_Find_ReturnValue) == 0x00019C, "Member 'PerkUpgradeButton_C_Setup::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, K2Node_Select_Default) == 0x00019D, "Member 'PerkUpgradeButton_C_Setup::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, CallFunc_Conv_IntToText_ReturnValue) == 0x0001A0, "Member 'PerkUpgradeButton_C_Setup::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, CallFunc_BooleanAND_ReturnValue) == 0x0001B8, "Member 'PerkUpgradeButton_C_Setup::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, K2Node_Select_Default_1) == 0x0001B9, "Member 'PerkUpgradeButton_C_Setup::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, K2Node_Select_Default_2) == 0x0001BA, "Member 'PerkUpgradeButton_C_Setup::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, CallFunc_Not_PreBool_ReturnValue) == 0x0001BB, "Member 'PerkUpgradeButton_C_Setup::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, CallFunc_BooleanAND_ReturnValue_1) == 0x0001BC, "Member 'PerkUpgradeButton_C_Setup::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, K2Node_Select_Default_3) == 0x0001BD, "Member 'PerkUpgradeButton_C_Setup::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(PerkUpgradeButton_C_Setup, K2Node_Select_Default_4) == 0x0001BE, "Member 'PerkUpgradeButton_C_Setup::K2Node_Select_Default_4' has a wrong offset!");

// Function PerkUpgradeButton.PerkUpgradeButton_C.IsElementEmpty
// 0x0001 (0x0001 - 0x0000)
struct PerkUpgradeButton_C_IsElementEmpty final
{
public:
	bool                                          bIsEmpty;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkUpgradeButton_C_IsElementEmpty) == 0x000001, "Wrong alignment on PerkUpgradeButton_C_IsElementEmpty");
static_assert(sizeof(PerkUpgradeButton_C_IsElementEmpty) == 0x000001, "Wrong size on PerkUpgradeButton_C_IsElementEmpty");
static_assert(offsetof(PerkUpgradeButton_C_IsElementEmpty, bIsEmpty) == 0x000000, "Member 'PerkUpgradeButton_C_IsElementEmpty::bIsEmpty' has a wrong offset!");

}

