#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ClockMinus01_BP

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Clock-01_BP.Clock-01_BP_C.ExecuteUbergraph_Clock-01_BP
// 0x0038 (0x0038 - 0x0000)
struct ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0018(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IgnoreServerTime;               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsClient_ReturnValue;                     // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAssociatedAkEvent_ReturnValue;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_StopAssociatedAkEvent_ReturnValue;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP) == 0x000008, "Wrong alignment on ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP");
static_assert(sizeof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP) == 0x000038, "Wrong size on ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP");
static_assert(offsetof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP, EntryPoint) == 0x000000, "Member 'ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP, Temp_struct_Variable) == 0x000008, "Member 'ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP, Temp_delegate_Variable) == 0x000018, "Member 'ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP, K2Node_Event_DeltaSeconds) == 0x000028, "Member 'ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP, K2Node_CustomEvent_IgnoreServerTime) == 0x00002C, "Member 'ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP::K2Node_CustomEvent_IgnoreServerTime' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP, CallFunc_IsClient_ReturnValue) == 0x00002D, "Member 'ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP::CallFunc_IsClient_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP, CallFunc_PostAssociatedAkEvent_ReturnValue) == 0x000030, "Member 'ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP::CallFunc_PostAssociatedAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP, CallFunc_StopAssociatedAkEvent_ReturnValue) == 0x000034, "Member 'ClockMinus01_BP_C_ExecuteUbergraph_ClockMinus01_BP::CallFunc_StopAssociatedAkEvent_ReturnValue' has a wrong offset!");

// Function Clock-01_BP.Clock-01_BP_C.StartClock
// 0x0001 (0x0001 - 0x0000)
struct ClockMinus01_BP_C_StartClock final
{
public:
	bool                                          IgnoreServerTime;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ClockMinus01_BP_C_StartClock) == 0x000001, "Wrong alignment on ClockMinus01_BP_C_StartClock");
static_assert(sizeof(ClockMinus01_BP_C_StartClock) == 0x000001, "Wrong size on ClockMinus01_BP_C_StartClock");
static_assert(offsetof(ClockMinus01_BP_C_StartClock, IgnoreServerTime) == 0x000000, "Member 'ClockMinus01_BP_C_StartClock::IgnoreServerTime' has a wrong offset!");

// Function Clock-01_BP.Clock-01_BP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct ClockMinus01_BP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClockMinus01_BP_C_ReceiveTick) == 0x000004, "Wrong alignment on ClockMinus01_BP_C_ReceiveTick");
static_assert(sizeof(ClockMinus01_BP_C_ReceiveTick) == 0x000004, "Wrong size on ClockMinus01_BP_C_ReceiveTick");
static_assert(offsetof(ClockMinus01_BP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'ClockMinus01_BP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Clock-01_BP.Clock-01_BP_C.UpdateRotations
// 0x01F4 (0x01F4 - 0x0000)
struct ClockMinus01_BP_C_UpdateRotations final
{
public:
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_1;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_2;           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x00CC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_2;  // 0x016C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(ClockMinus01_BP_C_UpdateRotations) == 0x000004, "Wrong alignment on ClockMinus01_BP_C_UpdateRotations");
static_assert(sizeof(ClockMinus01_BP_C_UpdateRotations) == 0x0001F4, "Wrong size on ClockMinus01_BP_C_UpdateRotations");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000000, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000004, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000008, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x00000C, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_MakeLiteralFloat_ReturnValue_1) == 0x000014, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_MakeLiteralFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x00001C, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_MakeRotator_ReturnValue) == 0x000020, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00002C, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000030, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000B8, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_MakeRotator_ReturnValue_1) == 0x0000BC, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_MakeLiteralFloat_ReturnValue_2) == 0x0000C8, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_MakeLiteralFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0000CC, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x000154, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000158, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x00015C, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_MakeRotator_ReturnValue_2) == 0x000160, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateRotations, CallFunc_K2_SetRelativeRotation_SweepHitResult_2) == 0x00016C, "Member 'ClockMinus01_BP_C_UpdateRotations::CallFunc_K2_SetRelativeRotation_SweepHitResult_2' has a wrong offset!");

// Function Clock-01_BP.Clock-01_BP_C.IncrementTime
// 0x0008 (0x0008 - 0x0000)
struct ClockMinus01_BP_C_IncrementTime final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClockMinus01_BP_C_IncrementTime) == 0x000004, "Wrong alignment on ClockMinus01_BP_C_IncrementTime");
static_assert(sizeof(ClockMinus01_BP_C_IncrementTime) == 0x000008, "Wrong size on ClockMinus01_BP_C_IncrementTime");
static_assert(offsetof(ClockMinus01_BP_C_IncrementTime, Temp_float_Variable) == 0x000000, "Member 'ClockMinus01_BP_C_IncrementTime::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_IncrementTime, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'ClockMinus01_BP_C_IncrementTime::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");

// Function Clock-01_BP.Clock-01_BP_C.Set Time
// 0x0038 (0x0038 - 0x0000)
struct ClockMinus01_BP_C_Set_Time final
{
public:
	bool                                          IgnoreServerTime;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetServerTime_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FCeil_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ClockMinus01_BP_C_Set_Time) == 0x000004, "Wrong alignment on ClockMinus01_BP_C_Set_Time");
static_assert(sizeof(ClockMinus01_BP_C_Set_Time) == 0x000038, "Wrong size on ClockMinus01_BP_C_Set_Time");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, IgnoreServerTime) == 0x000000, "Member 'ClockMinus01_BP_C_Set_Time::IgnoreServerTime' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_GetServerTime_ReturnValue) == 0x000004, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_GetServerTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_BreakVector_X) == 0x000008, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_BreakVector_Y) == 0x00000C, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_BreakVector_Z) == 0x000010, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_FCeil_ReturnValue) == 0x000014, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_FCeil_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_SelectInt_ReturnValue) == 0x00001C, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000024, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000028, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_Add_FloatFloat_ReturnValue) == 0x00002C, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000030, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_Set_Time, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000034, "Member 'ClockMinus01_BP_C_Set_Time::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function Clock-01_BP.Clock-01_BP_C.UpdateLoopingSound
// 0x0048 (0x0048 - 0x0000)
struct ClockMinus01_BP_C_UpdateLoopingSound final
{
public:
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0010(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class ARBPlayer*                              CallFunc_GetSpectatedPlayer_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_StopAssociatedAkEvent_ReturnValue;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAssociatedAkEvent_ReturnValue;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              CallFunc_GetControlledPlayer_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue_1;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ClockMinus01_BP_C_UpdateLoopingSound) == 0x000008, "Wrong alignment on ClockMinus01_BP_C_UpdateLoopingSound");
static_assert(sizeof(ClockMinus01_BP_C_UpdateLoopingSound) == 0x000048, "Wrong size on ClockMinus01_BP_C_UpdateLoopingSound");
static_assert(offsetof(ClockMinus01_BP_C_UpdateLoopingSound, Temp_struct_Variable) == 0x000000, "Member 'ClockMinus01_BP_C_UpdateLoopingSound::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateLoopingSound, Temp_delegate_Variable) == 0x000010, "Member 'ClockMinus01_BP_C_UpdateLoopingSound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateLoopingSound, CallFunc_GetSpectatedPlayer_ReturnValue) == 0x000020, "Member 'ClockMinus01_BP_C_UpdateLoopingSound::CallFunc_GetSpectatedPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateLoopingSound, CallFunc_IsOverlappingActor_ReturnValue) == 0x000028, "Member 'ClockMinus01_BP_C_UpdateLoopingSound::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateLoopingSound, CallFunc_StopAssociatedAkEvent_ReturnValue) == 0x00002C, "Member 'ClockMinus01_BP_C_UpdateLoopingSound::CallFunc_StopAssociatedAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateLoopingSound, CallFunc_PostAssociatedAkEvent_ReturnValue) == 0x000030, "Member 'ClockMinus01_BP_C_UpdateLoopingSound::CallFunc_PostAssociatedAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateLoopingSound, CallFunc_GetControlledPlayer_ReturnValue) == 0x000038, "Member 'ClockMinus01_BP_C_UpdateLoopingSound::CallFunc_GetControlledPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateLoopingSound, CallFunc_IsOverlappingActor_ReturnValue_1) == 0x000040, "Member 'ClockMinus01_BP_C_UpdateLoopingSound::CallFunc_IsOverlappingActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ClockMinus01_BP_C_UpdateLoopingSound, CallFunc_BooleanOR_ReturnValue) == 0x000041, "Member 'ClockMinus01_BP_C_UpdateLoopingSound::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

