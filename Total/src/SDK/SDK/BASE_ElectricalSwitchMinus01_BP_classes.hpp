#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BASE_ElectricalSwitchMinus01_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnalogOperatableTriggerablesStruct_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BASE_ElectricalSwitch-01_BP.BASE_ElectricalSwitch-01_BP_C
// 0x0100 (0x0748 - 0x0648)
class ABASE_ElectricalSwitchMinus01_BP_C : public ARBOperatable
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0648(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URBPingComponent*                       RBPing;                                            // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AnimAnchor;                                        // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HandleMesh;                                        // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HingeMesh;                                         // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_DeactivateSpark;                               // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBOutlineComponent*                    RBOutline;                                         // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    PadLockPosition;                                   // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Corner;                                            // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wire5cm5mMinus01;                                  // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      RBSound;                                           // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Rotation;                                          // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnalogOperatableTriggerablesStruct> ProgressiveTriggers;                               // 0x06B0(0x0010)(Edit, BlueprintVisible)
	float                                         PreviousProgressValue;                             // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CablePosition;                                     // 0x06C4(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReMinusenableOnResetCompleted;                    // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bToggleBackTriggeredItemsOnReset;                  // 0x06D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D2[0x2];                                      // 0x06D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalDelayToReenableAfterReset;               // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnWaitingForResetCompletedChanged;                 // 0x06D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bWaitingForResetCompletedChanged;                  // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E9[0x3];                                      // 0x06E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfVisibleLights;                             // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UMaterialInstance*>   LightNames;                                        // 0x06F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInterface*                     UnlitMaterial;                                     // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnWaitingForResetCompletedChanged__DelegateSignature();
	void ExecuteUbergraph_BASE_ElectricalSwitchMinus01_BP(int32 EntryPoint);
	void Event_OnInteractorsChangedEvent();
	void ReceiveBeginPlay();
	void Event_OnResetStage();
	void Event_OnTimedReset();
	void Event_SnapToState();
	void Event_OnCompletedOperation(const TArray<class ARBPawn*>& Pawns);
	void SetTriggerableActivation(bool Condition, class ARBTriggerable* RBTriggerable);
	void Event_OnOperationProgressChanged(float CurrentProgressRatio);
	void UserConstructionScript();
	void SetCableHeight();
	void SetWaitingForResetCompleted(bool Value);
	void RefreshLightMaterial(int32 CurrentLight, class FName MaterialName, class UMaterialInterface* Material, bool* bChanged);
	void HasInteractingPawn(bool* Value);
	void RefreshLightDisplay();
	void ShouldAllLightBeOn(bool* bAllLightOn);

	bool TestPhysicsClearance(const class ARBPawn* InteractorPawn) const;
	bool GetInteractionPawnLocation(const class ARBPawn* Pawn, ESpecialMove SpecialMove, struct FVector* OutLocation, struct FVector* OutDirection) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BASE_ElectricalSwitch-01_BP_C">();
	}
	static class ABASE_ElectricalSwitchMinus01_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABASE_ElectricalSwitchMinus01_BP_C>();
	}
};
static_assert(alignof(ABASE_ElectricalSwitchMinus01_BP_C) == 0x000008, "Wrong alignment on ABASE_ElectricalSwitchMinus01_BP_C");
static_assert(sizeof(ABASE_ElectricalSwitchMinus01_BP_C) == 0x000748, "Wrong size on ABASE_ElectricalSwitchMinus01_BP_C");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, UberGraphFrame) == 0x000648, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, RBPing) == 0x000650, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::RBPing' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, AnimAnchor) == 0x000658, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::AnimAnchor' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, HandleMesh) == 0x000660, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::HandleMesh' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, HingeMesh) == 0x000668, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::HingeMesh' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, Ngr_DeactivateSpark) == 0x000670, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::Ngr_DeactivateSpark' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, RBOutline) == 0x000678, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::RBOutline' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, PadLockPosition) == 0x000680, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::PadLockPosition' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, Corner) == 0x000688, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::Corner' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, Wire5cm5mMinus01) == 0x000690, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::Wire5cm5mMinus01' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, RBSound) == 0x000698, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::RBSound' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, Rotation) == 0x0006A0, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, Speed) == 0x0006A8, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::Speed' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, ProgressiveTriggers) == 0x0006B0, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::ProgressiveTriggers' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, PreviousProgressValue) == 0x0006C0, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::PreviousProgressValue' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, CablePosition) == 0x0006C4, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::CablePosition' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, bReMinusenableOnResetCompleted) == 0x0006D0, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::bReMinusenableOnResetCompleted' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, bToggleBackTriggeredItemsOnReset) == 0x0006D1, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::bToggleBackTriggeredItemsOnReset' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, AdditionalDelayToReenableAfterReset) == 0x0006D4, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::AdditionalDelayToReenableAfterReset' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, OnWaitingForResetCompletedChanged) == 0x0006D8, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::OnWaitingForResetCompletedChanged' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, bWaitingForResetCompletedChanged) == 0x0006E8, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::bWaitingForResetCompletedChanged' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, NumberOfVisibleLights) == 0x0006EC, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::NumberOfVisibleLights' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, LightNames) == 0x0006F0, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::LightNames' has a wrong offset!");
static_assert(offsetof(ABASE_ElectricalSwitchMinus01_BP_C, UnlitMaterial) == 0x000740, "Member 'ABASE_ElectricalSwitchMinus01_BP_C::UnlitMaterial' has a wrong offset!");

}

