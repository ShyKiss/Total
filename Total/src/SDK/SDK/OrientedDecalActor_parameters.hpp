#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OrientedDecalActor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function OrientedDecalActor.OrientedDecalActor_C.ExecuteUbergraph_OrientedDecalActor
// 0x0018 (0x0018 - 0x0000)
struct OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bStateA_1;                            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_randomOwner;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bValue;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bStateA;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor) == 0x000008, "Wrong alignment on OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor");
static_assert(sizeof(OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor) == 0x000018, "Wrong size on OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor");
static_assert(offsetof(OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor, EntryPoint) == 0x000000, "Member 'OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor::EntryPoint' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor, K2Node_Event_bStateA_1) == 0x000005, "Member 'OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor::K2Node_Event_bStateA_1' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor, K2Node_Event_randomOwner) == 0x000008, "Member 'OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor::K2Node_Event_randomOwner' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor, K2Node_Event_bValue) == 0x000010, "Member 'OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor::K2Node_Event_bValue' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor, K2Node_Event_bStateA) == 0x000011, "Member 'OrientedDecalActor_C_ExecuteUbergraph_OrientedDecalActor::K2Node_Event_bStateA' has a wrong offset!");

// Function OrientedDecalActor.OrientedDecalActor_C.SetState
// 0x0001 (0x0001 - 0x0000)
struct OrientedDecalActor_C_SetState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OrientedDecalActor_C_SetState) == 0x000001, "Wrong alignment on OrientedDecalActor_C_SetState");
static_assert(sizeof(OrientedDecalActor_C_SetState) == 0x000001, "Wrong size on OrientedDecalActor_C_SetState");
static_assert(offsetof(OrientedDecalActor_C_SetState, bStateA) == 0x000000, "Member 'OrientedDecalActor_C_SetState::bStateA' has a wrong offset!");

// Function OrientedDecalActor.OrientedDecalActor_C.SetShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct OrientedDecalActor_C_SetShouldBeIgnoredForLots final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OrientedDecalActor_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on OrientedDecalActor_C_SetShouldBeIgnoredForLots");
static_assert(sizeof(OrientedDecalActor_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong size on OrientedDecalActor_C_SetShouldBeIgnoredForLots");
static_assert(offsetof(OrientedDecalActor_C_SetShouldBeIgnoredForLots, bValue) == 0x000000, "Member 'OrientedDecalActor_C_SetShouldBeIgnoredForLots::bValue' has a wrong offset!");

// Function OrientedDecalActor.OrientedDecalActor_C.PrepareState
// 0x0010 (0x0010 - 0x0000)
struct OrientedDecalActor_C_PrepareState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RandomOwner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OrientedDecalActor_C_PrepareState) == 0x000008, "Wrong alignment on OrientedDecalActor_C_PrepareState");
static_assert(sizeof(OrientedDecalActor_C_PrepareState) == 0x000010, "Wrong size on OrientedDecalActor_C_PrepareState");
static_assert(offsetof(OrientedDecalActor_C_PrepareState, bStateA) == 0x000000, "Member 'OrientedDecalActor_C_PrepareState::bStateA' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_PrepareState, RandomOwner) == 0x000008, "Member 'OrientedDecalActor_C_PrepareState::RandomOwner' has a wrong offset!");

// Function OrientedDecalActor.OrientedDecalActor_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct OrientedDecalActor_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OrientedDecalActor_C_UserConstructionScript) == 0x000001, "Wrong alignment on OrientedDecalActor_C_UserConstructionScript");
static_assert(sizeof(OrientedDecalActor_C_UserConstructionScript) == 0x000001, "Wrong size on OrientedDecalActor_C_UserConstructionScript");
static_assert(offsetof(OrientedDecalActor_C_UserConstructionScript, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'OrientedDecalActor_C_UserConstructionScript::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function OrientedDecalActor.OrientedDecalActor_C.CreateDynamicOrientedMaterial
// 0x0038 (0x0038 - 0x0000)
struct OrientedDecalActor_C_CreateDynamicOrientedMaterial final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDecalDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     CallFunc_GetDecalMaterial_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(OrientedDecalActor_C_CreateDynamicOrientedMaterial) == 0x000008, "Wrong alignment on OrientedDecalActor_C_CreateDynamicOrientedMaterial");
static_assert(sizeof(OrientedDecalActor_C_CreateDynamicOrientedMaterial) == 0x000038, "Wrong size on OrientedDecalActor_C_CreateDynamicOrientedMaterial");
static_assert(offsetof(OrientedDecalActor_C_CreateDynamicOrientedMaterial, CallFunc_CreateDecalDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'OrientedDecalActor_C_CreateDynamicOrientedMaterial::CallFunc_CreateDecalDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_CreateDynamicOrientedMaterial, CallFunc_GetDecalMaterial_ReturnValue) == 0x000008, "Member 'OrientedDecalActor_C_CreateDynamicOrientedMaterial::CallFunc_GetDecalMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_CreateDynamicOrientedMaterial, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x000010, "Member 'OrientedDecalActor_C_CreateDynamicOrientedMaterial::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_CreateDynamicOrientedMaterial, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'OrientedDecalActor_C_CreateDynamicOrientedMaterial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_CreateDynamicOrientedMaterial, CallFunc_GetForwardVector_ReturnValue) == 0x00001C, "Member 'OrientedDecalActor_C_CreateDynamicOrientedMaterial::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_CreateDynamicOrientedMaterial, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000028, "Member 'OrientedDecalActor_C_CreateDynamicOrientedMaterial::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");

// Function OrientedDecalActor.OrientedDecalActor_C.GetStateName
// 0x0028 (0x0028 - 0x0000)
struct OrientedDecalActor_C_GetStateName final
{
public:
	class FString                                 StateA;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 StateB;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OrientedDecalActor_C_GetStateName) == 0x000008, "Wrong alignment on OrientedDecalActor_C_GetStateName");
static_assert(sizeof(OrientedDecalActor_C_GetStateName) == 0x000028, "Wrong size on OrientedDecalActor_C_GetStateName");
static_assert(offsetof(OrientedDecalActor_C_GetStateName, StateA) == 0x000000, "Member 'OrientedDecalActor_C_GetStateName::StateA' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_GetStateName, StateB) == 0x000010, "Member 'OrientedDecalActor_C_GetStateName::StateB' has a wrong offset!");
static_assert(offsetof(OrientedDecalActor_C_GetStateName, ReturnValue) == 0x000020, "Member 'OrientedDecalActor_C_GetStateName::ReturnValue' has a wrong offset!");

// Function OrientedDecalActor.OrientedDecalActor_C.ShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct OrientedDecalActor_C_ShouldBeIgnoredForLots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OrientedDecalActor_C_ShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on OrientedDecalActor_C_ShouldBeIgnoredForLots");
static_assert(sizeof(OrientedDecalActor_C_ShouldBeIgnoredForLots) == 0x000001, "Wrong size on OrientedDecalActor_C_ShouldBeIgnoredForLots");
static_assert(offsetof(OrientedDecalActor_C_ShouldBeIgnoredForLots, ReturnValue) == 0x000000, "Member 'OrientedDecalActor_C_ShouldBeIgnoredForLots::ReturnValue' has a wrong offset!");

// Function OrientedDecalActor.OrientedDecalActor_C.IsStateA
// 0x0001 (0x0001 - 0x0000)
struct OrientedDecalActor_C_IsStateA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OrientedDecalActor_C_IsStateA) == 0x000001, "Wrong alignment on OrientedDecalActor_C_IsStateA");
static_assert(sizeof(OrientedDecalActor_C_IsStateA) == 0x000001, "Wrong size on OrientedDecalActor_C_IsStateA");
static_assert(offsetof(OrientedDecalActor_C_IsStateA, ReturnValue) == 0x000000, "Member 'OrientedDecalActor_C_IsStateA::ReturnValue' has a wrong offset!");

// Function OrientedDecalActor.OrientedDecalActor_C.IsRandomStateSet
// 0x0001 (0x0001 - 0x0000)
struct OrientedDecalActor_C_IsRandomStateSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(OrientedDecalActor_C_IsRandomStateSet) == 0x000001, "Wrong alignment on OrientedDecalActor_C_IsRandomStateSet");
static_assert(sizeof(OrientedDecalActor_C_IsRandomStateSet) == 0x000001, "Wrong size on OrientedDecalActor_C_IsRandomStateSet");
static_assert(offsetof(OrientedDecalActor_C_IsRandomStateSet, ReturnValue) == 0x000000, "Member 'OrientedDecalActor_C_IsRandomStateSet::ReturnValue' has a wrong offset!");

}

