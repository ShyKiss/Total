#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ReviveSyringeSpawner_BP

#include "Basic.hpp"

#include "ReviveSyringeSpawner_BP_classes.hpp"
#include "ReviveSyringeSpawner_BP_parameters.hpp"


namespace SDK
{

// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.SetupItemLightingChannels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::SetupItemLightingChannels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "SetupItemLightingChannels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.DisableLightOnServer
// (Public, BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::DisableLightOnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "DisableLightOnServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.OnRep_IsBroken_Server
// (BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::OnRep_IsBroken_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "OnRep_IsBroken_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.OnRep_NeedInsideLight
// (BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::OnRep_NeedInsideLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "OnRep_NeedInsideLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.UpdateLights
// (Public, BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::UpdateLights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "UpdateLights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.UpdateBrokenState
// (Public, BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::UpdateBrokenState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "UpdateBrokenState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.PlaySpecialMoveAnimation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARBPawn*                          InteractorPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpecialMove                            SpecialMove                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AReviveSyringeSpawner_BP_C::PlaySpecialMoveAnimation(class ARBPawn* InteractorPawn, ESpecialMove SpecialMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "PlaySpecialMoveAnimation");

	Params::ReviveSyringeSpawner_BP_C_PlaySpecialMoveAnimation Parms{};

	Parms.InteractorPawn = InteractorPawn;
	Parms.SpecialMove = SpecialMove;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.OnWorldPopulateFinished
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::OnWorldPopulateFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "OnWorldPopulateFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.ForceBreak_Server
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::ForceBreak_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "ForceBreak_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.Break
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Damager                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AReviveSyringeSpawner_BP_C::Break(class AActor* Damager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "Break");

	Params::ReviveSyringeSpawner_BP_C_Break Parms{};

	Parms.Damager = Damager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.Event_OnResetStage
// (Event, Public, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::Event_OnResetStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "Event_OnResetStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.PostToggled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bToggleEnabled                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AReviveSyringeSpawner_BP_C::PostToggled(bool bToggleEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "PostToggled");

	Params::ReviveSyringeSpawner_BP_C_PostToggled Parms{};

	Parms.bToggleEnabled = bToggleEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.OnPawnDoSpecialMoveAction
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ARBPawn*                          Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpecialMove                            SpecialMove                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AReviveSyringeSpawner_BP_C::OnPawnDoSpecialMoveAction(class ARBPawn* Pawn, ESpecialMove SpecialMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "OnPawnDoSpecialMoveAction");

	Params::ReviveSyringeSpawner_BP_C_OnPawnDoSpecialMoveAction Parms{};

	Parms.Pawn = Pawn;
	Parms.SpecialMove = SpecialMove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.Event_ItemPickedUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class ARBPawn*                          Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ARBPickup*                        Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AReviveSyringeSpawner_BP_C::Event_ItemPickedUp(class ARBPawn* Pawn, class ARBPickup* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "Event_ItemPickedUp");

	Params::ReviveSyringeSpawner_BP_C_Event_ItemPickedUp Parms{};

	Parms.Pawn = Pawn;
	Parms.Item = Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.ValidateBroken
// (BlueprintCallable, BlueprintEvent)

void AReviveSyringeSpawner_BP_C::ValidateBroken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "ValidateBroken");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.BndEvt__ReviveSyringeSpawner_BP_DamageableComponent_K2Node_ComponentBoundEvent_1_OnDamageableEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class URBDamageableComponent*           DamageableComponent_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AReviveSyringeSpawner_BP_C::BndEvt__ReviveSyringeSpawner_BP_DamageableComponent_K2Node_ComponentBoundEvent_1_OnDamageableEvent__DelegateSignature(class URBDamageableComponent* DamageableComponent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "BndEvt__ReviveSyringeSpawner_BP_DamageableComponent_K2Node_ComponentBoundEvent_1_OnDamageableEvent__DelegateSignature");

	Params::ReviveSyringeSpawner_BP_C_BndEvt__ReviveSyringeSpawner_BP_DamageableComponent_K2Node_ComponentBoundEvent_1_OnDamageableEvent__DelegateSignature Parms{};

	Parms.DamageableComponent_0 = DamageableComponent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.ExecuteUbergraph_ReviveSyringeSpawner_BP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AReviveSyringeSpawner_BP_C::ExecuteUbergraph_ReviveSyringeSpawner_BP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "ExecuteUbergraph_ReviveSyringeSpawner_BP");

	Params::ReviveSyringeSpawner_BP_C_ExecuteUbergraph_ReviveSyringeSpawner_BP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.GetLookAtLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutLookAtLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AReviveSyringeSpawner_BP_C::GetLookAtLocation(struct FVector* OutLookAtLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "GetLookAtLocation");

	Params::ReviveSyringeSpawner_BP_C_GetLookAtLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutLookAtLocation != nullptr)
		*OutLookAtLocation = std::move(Parms.OutLookAtLocation);
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.IsTogglingStaticShadowComponentAllowed
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AReviveSyringeSpawner_BP_C::IsTogglingStaticShadowComponentAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "IsTogglingStaticShadowComponentAllowed");

	Params::ReviveSyringeSpawner_BP_C_IsTogglingStaticShadowComponentAllowed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.ShouldSpawnPill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AReviveSyringeSpawner_BP_C::ShouldSpawnPill() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "ShouldSpawnPill");

	Params::ReviveSyringeSpawner_BP_C_ShouldSpawnPill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.GetPingEnabled
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ARBPlayer*                        PingOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    OutIsEnabled                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AReviveSyringeSpawner_BP_C::GetPingEnabled(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, bool* OutIsEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "GetPingEnabled");

	Params::ReviveSyringeSpawner_BP_C_GetPingEnabled Parms{};

	Parms.PingOwner = PingOwner;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (OutIsEnabled != nullptr)
		*OutIsEnabled = Parms.OutIsEnabled;

	return Parms.ReturnValue;
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.GetPlayerPingWorldLocation
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ARBPlayer*                        PingOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AReviveSyringeSpawner_BP_C::GetPlayerPingWorldLocation(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FVector* OutLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "GetPlayerPingWorldLocation");

	Params::ReviveSyringeSpawner_BP_C_GetPlayerPingWorldLocation Parms{};

	Parms.PingOwner = PingOwner;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	return Parms.ReturnValue;
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.GetPlayerPingData
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ARBPlayer*                        PingOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       HitResult                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// struct FPlayerPingData                  OutData                                                (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AReviveSyringeSpawner_BP_C::GetPlayerPingData(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FPlayerPingData* OutData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "GetPlayerPingData");

	Params::ReviveSyringeSpawner_BP_C_GetPlayerPingData Parms{};

	Parms.PingOwner = PingOwner;
	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);

	if (OutData != nullptr)
		*OutData = std::move(Parms.OutData);

	return Parms.ReturnValue;
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.IsOpen
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AReviveSyringeSpawner_BP_C::IsOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "IsOpen");

	Params::ReviveSyringeSpawner_BP_C_IsOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ReviveSyringeSpawner_BP.ReviveSyringeSpawner_BP_C.GetInteractionPawnLocation
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ARBPawn*                          Pawn                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpecialMove                            SpecialMove                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AReviveSyringeSpawner_BP_C::GetInteractionPawnLocation(const class ARBPawn* Pawn, ESpecialMove SpecialMove, struct FVector* OutLocation, struct FVector* OutDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReviveSyringeSpawner_BP_C", "GetInteractionPawnLocation");

	Params::ReviveSyringeSpawner_BP_C_GetInteractionPawnLocation Parms{};

	Parms.Pawn = Pawn;
	Parms.SpecialMove = SpecialMove;

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutDirection != nullptr)
		*OutDirection = std::move(Parms.OutDirection);

	return Parms.ReturnValue;
}

}

