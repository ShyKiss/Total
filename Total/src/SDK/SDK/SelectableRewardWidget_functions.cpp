#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SelectableRewardWidget

#include "Basic.hpp"

#include "SelectableRewardWidget_classes.hpp"
#include "SelectableRewardWidget_parameters.hpp"


namespace SDK
{

// Function SelectableRewardWidget.SelectableRewardWidget_C.OnHovered__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRewardUIData                    Reward_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class USelectableRewardWidget_C*        Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USelectableRewardWidget_C::OnHovered__DelegateSignature(const struct FRewardUIData& Reward_0, class USelectableRewardWidget_C* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "OnHovered__DelegateSignature");

	Params::SelectableRewardWidget_C_OnHovered__DelegateSignature Parms{};

	Parms.Reward_0 = std::move(Reward_0);
	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.OnUnhovered__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRewardUIData                    Reward_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class USelectableRewardWidget_C*        Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USelectableRewardWidget_C::OnUnhovered__DelegateSignature(const struct FRewardUIData& Reward_0, class USelectableRewardWidget_C* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "OnUnhovered__DelegateSignature");

	Params::SelectableRewardWidget_C_OnUnhovered__DelegateSignature Parms{};

	Parms.Reward_0 = std::move(Reward_0);
	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.OnClicked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void USelectableRewardWidget_C::OnClicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "OnClicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.ExecuteUbergraph_SelectableRewardWidget
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USelectableRewardWidget_C::ExecuteUbergraph_SelectableRewardWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "ExecuteUbergraph_SelectableRewardWidget");

	Params::SelectableRewardWidget_C_ExecuteUbergraph_SelectableRewardWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.BndEvt__SelectableRewardWidget_InteractionButton_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature
// (BlueprintEvent)

void USelectableRewardWidget_C::BndEvt__SelectableRewardWidget_InteractionButton_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "BndEvt__SelectableRewardWidget_InteractionButton_K2Node_ComponentBoundEvent_2_OnButtonClickedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USelectableRewardWidget_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "PreConstruct");

	Params::SelectableRewardWidget_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void USelectableRewardWidget_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.OnMenuInputSourceChanged
// (BlueprintCallable, BlueprintEvent)

void USelectableRewardWidget_C::OnMenuInputSourceChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "OnMenuInputSourceChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void USelectableRewardWidget_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.BndEvt__PerkCategoryButton_InteractionButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void USelectableRewardWidget_C::BndEvt__PerkCategoryButton_InteractionButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "BndEvt__PerkCategoryButton_InteractionButton_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.BndEvt__PerkCategoryButton_InteractionButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void USelectableRewardWidget_C::BndEvt__PerkCategoryButton_InteractionButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "BndEvt__PerkCategoryButton_InteractionButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.Init
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRewardUIData                    Reward_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void USelectableRewardWidget_C::Init(const struct FRewardUIData& Reward_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "Init");

	Params::SelectableRewardWidget_C_Init Parms{};

	Parms.Reward_0 = std::move(Reward_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.CanMergeWith
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRewardUIData                    RewardUIData                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    bCanMergeWith                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USelectableRewardWidget_C::CanMergeWith(const struct FRewardUIData& RewardUIData, bool* bCanMergeWith)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "CanMergeWith");

	Params::SelectableRewardWidget_C_CanMergeWith Parms{};

	Parms.RewardUIData = std::move(RewardUIData);

	UObject::ProcessEvent(Func, &Parms);

	if (bCanMergeWith != nullptr)
		*bCanMergeWith = Parms.bCanMergeWith;
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.MergeWith
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRewardUIData                    RewardUIData                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void USelectableRewardWidget_C::MergeWith(const struct FRewardUIData& RewardUIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "MergeWith");

	Params::SelectableRewardWidget_C_MergeWith Parms{};

	Parms.RewardUIData = std::move(RewardUIData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.PlayNewRewardAnimation
// (Public, BlueprintCallable, BlueprintEvent)

void USelectableRewardWidget_C::PlayNewRewardAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "PlayNewRewardAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.Refresh
// (Public, BlueprintCallable, BlueprintEvent)

void USelectableRewardWidget_C::Refresh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "Refresh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.SetHovered
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHovered_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USelectableRewardWidget_C::SetHovered(bool IsHovered_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "SetHovered");

	Params::SelectableRewardWidget_C_SetHovered Parms{};

	Parms.IsHovered_0 = IsHovered_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.SetFocused
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInFocused                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USelectableRewardWidget_C::SetFocused(bool bInFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "SetFocused");

	Params::SelectableRewardWidget_C_SetFocused Parms{};

	Parms.bInFocused = bInFocused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.IsConsideredHovered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bConsideredHovered                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void USelectableRewardWidget_C::IsConsideredHovered(bool* bConsideredHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "IsConsideredHovered");

	Params::SelectableRewardWidget_C_IsConsideredHovered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bConsideredHovered != nullptr)
		*bConsideredHovered = Parms.bConsideredHovered;
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.OnRemovedFromFocusPath
// (BlueprintCosmetic, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFocusEvent                      InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void USelectableRewardWidget_C::OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "OnRemovedFromFocusPath");

	Params::SelectableRewardWidget_C_OnRemovedFromFocusPath Parms{};

	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SelectableRewardWidget.SelectableRewardWidget_C.OnFocusReceived
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FFocusEvent                      InFocusEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply USelectableRewardWidget_C::OnFocusReceived(const struct FGeometry& MyGeometry, const struct FFocusEvent& InFocusEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelectableRewardWidget_C", "OnFocusReceived");

	Params::SelectableRewardWidget_C_OnFocusReceived Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InFocusEvent = std::move(InFocusEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

