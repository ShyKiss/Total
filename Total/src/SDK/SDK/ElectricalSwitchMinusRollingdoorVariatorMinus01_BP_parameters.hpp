#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ElectricalSwitchMinusRollingdoorVariatorMinus01_BP

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.ExecuteUbergraph_ElectricalSwitch-RollingdoorVariator-01_BP
// 0x0148 (0x0148 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0024(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAkExternalSourceInfo>          Temp_struct_Variable_1;                            // 0x0038(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0048(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URBHackableComponent*                   K2Node_ComponentBoundEvent_hackableComponent;      // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHackState                                    CallFunc_GetCurrentHackState_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B[0x1];                                       // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x006C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_bEnabled;                             // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URBHackableComponent*                   K2Node_Event_hackableComponent;                    // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         CallFunc_GetLinkedTriggerable_Triggerable;         // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ARBPawn*>                        K2Node_Event_pawns;                                // 0x0110(0x0010)(ConstParm, ReferenceParm)
	class ARollingDoorMinusBase_BP_C*             K2Node_DynamicCast_AsRolling_Door__Base_BP;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARollingDoorMinusBase_BP_C*             K2Node_DynamicCast_AsRolling_Door__Base_BP_1;      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsClosedOrOpening_IsOpen;                 // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP) == 0x000008, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP) == 0x000148, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, EntryPoint) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, Temp_struct_Variable) == 0x000008, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, Temp_delegate_Variable) == 0x000024, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, Temp_struct_Variable_1) == 0x000038, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, Temp_delegate_Variable_1) == 0x000048, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_IsDedicatedServer_ReturnValue) == 0x000058, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_HasAuthority_ReturnValue) == 0x000059, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x00005A, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, K2Node_ComponentBoundEvent_hackableComponent) == 0x000060, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::K2Node_ComponentBoundEvent_hackableComponent' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_GetCurrentHackState_ReturnValue) == 0x000068, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_GetCurrentHackState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000069, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_HasAuthority_ReturnValue_1) == 0x00006A, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x00006C, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, K2Node_Event_bEnabled) == 0x0000F4, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::K2Node_Event_bEnabled' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, K2Node_Event_hackableComponent) == 0x0000F8, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::K2Node_Event_hackableComponent' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_Array_AddUnique_ReturnValue) == 0x000100, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_GetLinkedTriggerable_Triggerable) == 0x000108, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_GetLinkedTriggerable_Triggerable' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, K2Node_Event_pawns) == 0x000110, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::K2Node_Event_pawns' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, K2Node_DynamicCast_AsRolling_Door__Base_BP) == 0x000120, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::K2Node_DynamicCast_AsRolling_Door__Base_BP' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, K2Node_DynamicCast_bSuccess) == 0x000128, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_PostAkEvent_ReturnValue) == 0x00012C, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_PostAkEvent_ReturnValue_1) == 0x000130, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, K2Node_DynamicCast_AsRolling_Door__Base_BP_1) == 0x000138, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::K2Node_DynamicCast_AsRolling_Door__Base_BP_1' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, K2Node_DynamicCast_bSuccess_1) == 0x000140, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP, CallFunc_IsClosedOrOpening_IsOpen) == 0x000141, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ExecuteUbergraph_ElectricalSwitchMinusRollingdoorVariatorMinus01_BP::CallFunc_IsClosedOrOpening_IsOpen' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.Event_OnCompletedOperation
// 0x0010 (0x0010 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_Event_OnCompletedOperation final
{
public:
	TArray<class ARBPawn*>                        Pawns;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_Event_OnCompletedOperation) == 0x000008, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_Event_OnCompletedOperation");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_Event_OnCompletedOperation) == 0x000010, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_Event_OnCompletedOperation");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_Event_OnCompletedOperation, Pawns) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_Event_OnCompletedOperation::Pawns' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.OnHackStateChanged
// 0x0008 (0x0008 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackStateChanged final
{
public:
	class URBHackableComponent*                   HackableComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackStateChanged) == 0x000008, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackStateChanged");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackStateChanged) == 0x000008, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackStateChanged");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackStateChanged, HackableComponent) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackStateChanged::HackableComponent' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.SetVariatorEnabled
// 0x0001 (0x0001 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetVariatorEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetVariatorEnabled) == 0x000001, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetVariatorEnabled");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetVariatorEnabled) == 0x000001, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetVariatorEnabled");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetVariatorEnabled, bEnabled) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetVariatorEnabled::bEnabled' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.BndEvt__ElectricalSwitch-RollingdoorVariator-01_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BndEvt__ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature final
{
public:
	class URBHackableComponent*                   HackableComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BndEvt__ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature) == 0x000008, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BndEvt__ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BndEvt__ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature) == 0x000008, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BndEvt__ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BndEvt__ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature, HackableComponent) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BndEvt__ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_RBHackable_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature::HackableComponent' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.SetLinkedTriggerable
// 0x0008 (0x0008 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetLinkedTriggerable final
{
public:
	class ARBTriggerable*                         LinkedTriggerable_0;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetLinkedTriggerable) == 0x000008, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetLinkedTriggerable");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetLinkedTriggerable) == 0x000008, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetLinkedTriggerable");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetLinkedTriggerable, LinkedTriggerable_0) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetLinkedTriggerable::LinkedTriggerable_0' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.OnHackedDisableStateChanged
// 0x0007 (0x0007 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged final
{
public:
	bool                                          bHackedDisabled;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHackState                                    Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHackState                                    Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHackState                                    K2Node_Select_Default;                             // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged) == 0x000001, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged) == 0x000007, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged, bHackedDisabled) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged::bHackedDisabled' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged, Temp_bool_Variable) == 0x000001, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged, Temp_byte_Variable) == 0x000003, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged, Temp_byte_Variable_1) == 0x000004, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged, CallFunc_HasAuthority_ReturnValue) == 0x000005, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged, K2Node_Select_Default) == 0x000006, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_OnHackedDisableStateChanged::K2Node_Select_Default' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.SetHaveClamps
// 0x0002 (0x0002 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetHaveClamps final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetHaveClamps) == 0x000001, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetHaveClamps");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetHaveClamps) == 0x000002, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetHaveClamps");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetHaveClamps, bNewVisibility) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetHaveClamps::bNewVisibility' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetHaveClamps, CallFunc_IsDedicatedServer_ReturnValue) == 0x000001, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_SetHaveClamps::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.RefreshHackedVisualState
// 0x0003 (0x0003 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsConsideredActivelyBeingHacked_Out;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState) == 0x000001, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState) == 0x000003, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState, CallFunc_IsConsideredActivelyBeingHacked_Out) == 0x000001, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState::CallFunc_IsConsideredActivelyBeingHacked_Out' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_RefreshHackedVisualState::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.IsConsideredActivelyBeingHacked
// 0x0028 (0x0028 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked final
{
public:
	bool                                          Out;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URBHackableComponent*                   CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHackState                                    CallFunc_GetCurrentHackState_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked) == 0x000008, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked) == 0x000028, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, Out) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::Out' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, Temp_int_Array_Index_Variable) == 0x000004, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, CallFunc_Array_Get_Item) == 0x000018, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, CallFunc_GetCurrentHackState_ReturnValue) == 0x000022, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::CallFunc_GetCurrentHackState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000023, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_IsConsideredActivelyBeingHacked::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.ShouldAllLightBeOn
// 0x0020 (0x0020 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn final
{
public:
	bool                                          bAllLightOn;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         CallFunc_GetLinkedTriggerable_Triggerable;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARollingDoorMinusBase_BP_C*             K2Node_DynamicCast_AsRolling_Door__Base_BP;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldAllLightBeOn_bAllLightOn;           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOpenOrOpening_IsOpen;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn) == 0x000008, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn) == 0x000020, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn, bAllLightOn) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn::bAllLightOn' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn, CallFunc_GetLinkedTriggerable_Triggerable) == 0x000008, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn::CallFunc_GetLinkedTriggerable_Triggerable' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn, K2Node_DynamicCast_AsRolling_Door__Base_BP) == 0x000010, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn::K2Node_DynamicCast_AsRolling_Door__Base_BP' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn, CallFunc_ShouldAllLightBeOn_bAllLightOn) == 0x000019, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn::CallFunc_ShouldAllLightBeOn_bAllLightOn' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn, CallFunc_IsOpenOrOpening_IsOpen) == 0x00001A, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_ShouldAllLightBeOn::CallFunc_IsOpenOrOpening_IsOpen' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.GetLinkedTriggerable
// 0x0008 (0x0008 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetLinkedTriggerable final
{
public:
	class ARBTriggerable*                         Triggerable;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetLinkedTriggerable) == 0x000008, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetLinkedTriggerable");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetLinkedTriggerable) == 0x000008, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetLinkedTriggerable");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetLinkedTriggerable, Triggerable) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetLinkedTriggerable::Triggerable' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.BP_ShouldProgressShowMaxedOut
// 0x0020 (0x0020 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         CallFunc_GetLinkedTriggerable_Triggerable;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARollingDoorMinusBase_BP_C*             K2Node_DynamicCast_AsRolling_Door__Base_BP;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOpenOrOpening_IsOpen;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut) == 0x000008, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut) == 0x000020, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut, ReturnValue) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut::ReturnValue' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut, CallFunc_GetLinkedTriggerable_Triggerable) == 0x000008, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut::CallFunc_GetLinkedTriggerable_Triggerable' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut, K2Node_DynamicCast_AsRolling_Door__Base_BP) == 0x000010, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut::K2Node_DynamicCast_AsRolling_Door__Base_BP' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut, CallFunc_IsOpenOrOpening_IsOpen) == 0x000019, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_BP_ShouldProgressShowMaxedOut::CallFunc_IsOpenOrOpening_IsOpen' has a wrong offset!");

// Function ElectricalSwitch-RollingdoorVariator-01_BP.ElectricalSwitch-RollingdoorVariator-01_BP_C.GetVariatorEnabled
// 0x0001 (0x0001 - 0x0000)
struct ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetVariatorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetVariatorEnabled) == 0x000001, "Wrong alignment on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetVariatorEnabled");
static_assert(sizeof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetVariatorEnabled) == 0x000001, "Wrong size on ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetVariatorEnabled");
static_assert(offsetof(ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetVariatorEnabled, ReturnValue) == 0x000000, "Member 'ElectricalSwitchMinusRollingdoorVariatorMinus01_BP_C_GetVariatorEnabled::ReturnValue' has a wrong offset!");

}

