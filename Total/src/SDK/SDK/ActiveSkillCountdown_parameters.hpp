#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ActiveSkillCountdown

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function ActiveSkillCountdown.ActiveSkillCountdown_C.ExecuteUbergraph_ActiveSkillCountdown
// 0x0040 (0x0040 - 0x0000)
struct ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown) == 0x000004, "Wrong alignment on ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown");
static_assert(sizeof(ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown) == 0x000040, "Wrong size on ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown");
static_assert(offsetof(ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown, EntryPoint) == 0x000000, "Member 'ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown::EntryPoint' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown, K2Node_Event_MyGeometry) == 0x000004, "Member 'ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'ActiveSkillCountdown_C_ExecuteUbergraph_ActiveSkillCountdown::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function ActiveSkillCountdown.ActiveSkillCountdown_C.Tick
// 0x003C (0x003C - 0x0000)
struct ActiveSkillCountdown_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActiveSkillCountdown_C_Tick) == 0x000004, "Wrong alignment on ActiveSkillCountdown_C_Tick");
static_assert(sizeof(ActiveSkillCountdown_C_Tick) == 0x00003C, "Wrong size on ActiveSkillCountdown_C_Tick");
static_assert(offsetof(ActiveSkillCountdown_C_Tick, MyGeometry) == 0x000000, "Member 'ActiveSkillCountdown_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_Tick, InDeltaTime) == 0x000038, "Member 'ActiveSkillCountdown_C_Tick::InDeltaTime' has a wrong offset!");

// Function ActiveSkillCountdown.ActiveSkillCountdown_C.On AS Cooldown State Changed
// 0x0010 (0x0010 - 0x0000)
struct ActiveSkillCountdown_C_On_AS_Cooldown_State_Changed final
{
public:
	bool                                          IsInCooldown;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBActiveSkill*                         NewActiveSkill;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ActiveSkillCountdown_C_On_AS_Cooldown_State_Changed) == 0x000008, "Wrong alignment on ActiveSkillCountdown_C_On_AS_Cooldown_State_Changed");
static_assert(sizeof(ActiveSkillCountdown_C_On_AS_Cooldown_State_Changed) == 0x000010, "Wrong size on ActiveSkillCountdown_C_On_AS_Cooldown_State_Changed");
static_assert(offsetof(ActiveSkillCountdown_C_On_AS_Cooldown_State_Changed, IsInCooldown) == 0x000000, "Member 'ActiveSkillCountdown_C_On_AS_Cooldown_State_Changed::IsInCooldown' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_On_AS_Cooldown_State_Changed, NewActiveSkill) == 0x000008, "Member 'ActiveSkillCountdown_C_On_AS_Cooldown_State_Changed::NewActiveSkill' has a wrong offset!");

// Function ActiveSkillCountdown.ActiveSkillCountdown_C.UpdateCounter
// 0x00A8 (0x00A8 - 0x0000)
struct ActiveSkillCountdown_C_UpdateCounter final
{
public:
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0000(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInfiniteCooldown_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCooldownTimeRemaining_ReturnValue;     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0028(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
};
static_assert(alignof(ActiveSkillCountdown_C_UpdateCounter) == 0x000008, "Wrong alignment on ActiveSkillCountdown_C_UpdateCounter");
static_assert(sizeof(ActiveSkillCountdown_C_UpdateCounter) == 0x0000A8, "Wrong size on ActiveSkillCountdown_C_UpdateCounter");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_GetText_ReturnValue) == 0x000000, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_TextIsEmpty_ReturnValue) == 0x000018, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_IsInfiniteCooldown_ReturnValue) == 0x00001A, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_IsInfiniteCooldown_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_GetCooldownTimeRemaining_ReturnValue) == 0x00001C, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_GetCooldownTimeRemaining_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000021, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_BooleanOR_ReturnValue) == 0x000022, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_Conv_FloatToText_ReturnValue) == 0x000028, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'ActiveSkillCountdown_C_UpdateCounter::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, K2Node_MakeArray_Array) == 0x000080, "Member 'ActiveSkillCountdown_C_UpdateCounter::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ActiveSkillCountdown_C_UpdateCounter, CallFunc_Format_ReturnValue) == 0x000090, "Member 'ActiveSkillCountdown_C_UpdateCounter::CallFunc_Format_ReturnValue' has a wrong offset!");

}

