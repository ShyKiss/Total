#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SASChair_GhostAnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass SASChair_GhostAnimBP.SASChair_GhostAnimBP_C
// 0x0A00 (0x0CF0 - 0x02F0)
class USASChair_GhostAnimBP_C final : public URBGhostAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02F8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0328(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0350(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0378(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x03A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x03C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x03F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0418(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x0440(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x04C0(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x04F0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0570(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x05A0(0x0080)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x0620(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x06A0(0x00A8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0748(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x0778(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x07F8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0828(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x08A8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x08D8(0x0080)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0958(0x00A8)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0A00(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0A80(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0AB0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0B30(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0B60(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0BE0(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0C10(0x00B0)()
	bool                                          NeedExit;                                          // 0x0CC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CC1[0x3];                                      // 0x0CC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnAngle;                                         // 0x0CC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             NewEventDispatcher_0;                              // 0x0CC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          InvertedAngle;                                     // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldFaceTV;                                     // 0x0CD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CDA[0x6];                                      // 0x0CDA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URBSASChairPanelComponent*              SASChairPanelComponent;                            // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayerFinishedTransition;                         // 0x0CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bPlayerPlayedEnterAnim;                            // 0x0CE9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bSkipToExit;                                       // 0x0CEA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	bool FinishGhost(EGhostFinishReason FinishReason, int32 GhostFinishCustomReason);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_SASChair_GhostAnimBP_AnimGraphNode_TransitionResult_249F5DB54979633BDD82D883290DEA33();
	void AnimNotify_Finished();
	void BP_InitializeGhost();
	void OnShouldFaceTVChanged(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void AnimNotify_EnteredTVState();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_SASChair_GhostAnimBP(int32 EntryPoint);
	void NewEventDispatcher_0__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SASChair_GhostAnimBP_C">();
	}
	static class USASChair_GhostAnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USASChair_GhostAnimBP_C>();
	}
};
static_assert(alignof(USASChair_GhostAnimBP_C) == 0x000010, "Wrong alignment on USASChair_GhostAnimBP_C");
static_assert(sizeof(USASChair_GhostAnimBP_C) == 0x000CF0, "Wrong size on USASChair_GhostAnimBP_C");
static_assert(offsetof(USASChair_GhostAnimBP_C, UberGraphFrame) == 0x0002F0, "Member 'USASChair_GhostAnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_Root) == 0x0002F8, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_TransitionResult_6) == 0x000328, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_TransitionResult_5) == 0x000350, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_TransitionResult_4) == 0x000378, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_TransitionResult_3) == 0x0003A0, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_TransitionResult_2) == 0x0003C8, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_TransitionResult_1) == 0x0003F0, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_TransitionResult) == 0x000418, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer_9) == 0x000440, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_StateResult_7) == 0x0004C0, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer_8) == 0x0004F0, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_StateResult_6) == 0x000570, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer_7) == 0x0005A0, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer_6) == 0x000620, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_BlendListByBool_1) == 0x0006A0, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_StateResult_5) == 0x000748, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer_5) == 0x000778, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_StateResult_4) == 0x0007F8, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer_4) == 0x000828, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_StateResult_3) == 0x0008A8, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x0008D8, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_BlendListByBool) == 0x000958, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x000A00, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_StateResult_2) == 0x000A80, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000AB0, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_StateResult_1) == 0x000B30, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_SequencePlayer) == 0x000B60, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_StateResult) == 0x000BE0, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, AnimGraphNode_StateMachine) == 0x000C10, "Member 'USASChair_GhostAnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, NeedExit) == 0x000CC0, "Member 'USASChair_GhostAnimBP_C::NeedExit' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, TurnAngle) == 0x000CC4, "Member 'USASChair_GhostAnimBP_C::TurnAngle' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, NewEventDispatcher_0) == 0x000CC8, "Member 'USASChair_GhostAnimBP_C::NewEventDispatcher_0' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, InvertedAngle) == 0x000CD8, "Member 'USASChair_GhostAnimBP_C::InvertedAngle' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, bShouldFaceTV) == 0x000CD9, "Member 'USASChair_GhostAnimBP_C::bShouldFaceTV' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, SASChairPanelComponent) == 0x000CE0, "Member 'USASChair_GhostAnimBP_C::SASChairPanelComponent' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, bPlayerFinishedTransition) == 0x000CE8, "Member 'USASChair_GhostAnimBP_C::bPlayerFinishedTransition' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, bPlayerPlayedEnterAnim) == 0x000CE9, "Member 'USASChair_GhostAnimBP_C::bPlayerPlayedEnterAnim' has a wrong offset!");
static_assert(offsetof(USASChair_GhostAnimBP_C, bSkipToExit) == 0x000CEA, "Member 'USASChair_GhostAnimBP_C::bSkipToExit' has a wrong offset!");

}

