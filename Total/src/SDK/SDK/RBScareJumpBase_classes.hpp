#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBScareJumpBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RBScareJumpBase.RBScareJumpBase_C
// 0x0050 (0x0510 - 0x04C0)
#pragma pack(push, 0x1)
class alignas(0x10) ARBScareJumpBase_C : public ARBJumpScareTriggerable
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URBImpactTriggerableComponent*          RBImpactTriggerable;                               // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPropOptimizerComponent*              RBPropOptimizer;                                   // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         UntriggerDelay;                                    // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewAssets;                                     // 0x04DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AKEvent_Triggered;                                 // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AKEvent_Untriggered;                               // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AKEvent_LoopStart;                                 // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AKEvent_LoopStop;                                  // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AKEvent_InitialLoop;                               // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetPreviewAssetsVisibility(bool Preview);
	void UserConstructionScript();
	void Event_OnTriggered();
	void ReceiveBeginPlay();
	void Event_OnUntriggered();
	void Event_OnResetStage();
	void BndEvt__RBScareJumpBase_RBImpactTriggerable_K2Node_ComponentBoundEvent_0_ImpactTriggerableEvent__DelegateSignature(class URBImpactTriggerableComponent* Component);
	void ExecuteUbergraph_RBScareJumpBase(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RBScareJumpBase_C">();
	}
	static class ARBScareJumpBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARBScareJumpBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ARBScareJumpBase_C) == 0x000010, "Wrong alignment on ARBScareJumpBase_C");
static_assert(sizeof(ARBScareJumpBase_C) == 0x000510, "Wrong size on ARBScareJumpBase_C");
static_assert(offsetof(ARBScareJumpBase_C, UberGraphFrame) == 0x0004C0, "Member 'ARBScareJumpBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARBScareJumpBase_C, RBImpactTriggerable) == 0x0004C8, "Member 'ARBScareJumpBase_C::RBImpactTriggerable' has a wrong offset!");
static_assert(offsetof(ARBScareJumpBase_C, RBPropOptimizer) == 0x0004D0, "Member 'ARBScareJumpBase_C::RBPropOptimizer' has a wrong offset!");
static_assert(offsetof(ARBScareJumpBase_C, UntriggerDelay) == 0x0004D8, "Member 'ARBScareJumpBase_C::UntriggerDelay' has a wrong offset!");
static_assert(offsetof(ARBScareJumpBase_C, PreviewAssets) == 0x0004DC, "Member 'ARBScareJumpBase_C::PreviewAssets' has a wrong offset!");
static_assert(offsetof(ARBScareJumpBase_C, AKEvent_Triggered) == 0x0004E0, "Member 'ARBScareJumpBase_C::AKEvent_Triggered' has a wrong offset!");
static_assert(offsetof(ARBScareJumpBase_C, AKEvent_Untriggered) == 0x0004E8, "Member 'ARBScareJumpBase_C::AKEvent_Untriggered' has a wrong offset!");
static_assert(offsetof(ARBScareJumpBase_C, AKEvent_LoopStart) == 0x0004F0, "Member 'ARBScareJumpBase_C::AKEvent_LoopStart' has a wrong offset!");
static_assert(offsetof(ARBScareJumpBase_C, AKEvent_LoopStop) == 0x0004F8, "Member 'ARBScareJumpBase_C::AKEvent_LoopStop' has a wrong offset!");
static_assert(offsetof(ARBScareJumpBase_C, AKEvent_InitialLoop) == 0x000500, "Member 'ARBScareJumpBase_C::AKEvent_InitialLoop' has a wrong offset!");

}

