#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Placeable_PsychosisMine_BP

#include "Basic.hpp"

#include "OPP_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.BP_MapCheck
// 0x00C0 (0x00C0 - 0x0000)
struct Placeable_PsychosisMine_BP_C_BP_MapCheck final
{
public:
	EMapCheckType                                 CheckType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutErrorMsg;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Editor_CheckOverlap_overlaps;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Editor_CheckOverlap_outOverlapList;       // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_BP_MapCheck) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_BP_MapCheck");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_BP_MapCheck) == 0x0000C0, "Wrong size on Placeable_PsychosisMine_BP_C_BP_MapCheck");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, CheckType) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::CheckType' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, OutErrorMsg) == 0x000008, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::OutErrorMsg' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, ReturnValue) == 0x000018, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, CallFunc_Editor_CheckOverlap_overlaps) == 0x000019, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::CallFunc_Editor_CheckOverlap_overlaps' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, CallFunc_Editor_CheckOverlap_outOverlapList) == 0x000020, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::CallFunc_Editor_CheckOverlap_outOverlapList' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, K2Node_MakeArray_Array) == 0x000088, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, CallFunc_Format_ReturnValue) == 0x000098, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BP_MapCheck, CallFunc_Conv_TextToString_ReturnValue) == 0x0000B0, "Member 'Placeable_PsychosisMine_BP_C_BP_MapCheck::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.FixUp
// 0x0001 (0x0001 - 0x0000)
struct Placeable_PsychosisMine_BP_C_FixUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_FixUp) == 0x000001, "Wrong alignment on Placeable_PsychosisMine_BP_C_FixUp");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_FixUp) == 0x000001, "Wrong size on Placeable_PsychosisMine_BP_C_FixUp");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_FixUp, ReturnValue) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_FixUp::ReturnValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.GetStateName
// 0x0028 (0x0028 - 0x0000)
struct Placeable_PsychosisMine_BP_C_GetStateName final
{
public:
	class FString                                 StateA;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 StateB;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_GetStateName) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_GetStateName");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_GetStateName) == 0x000028, "Wrong size on Placeable_PsychosisMine_BP_C_GetStateName");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetStateName, StateA) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_GetStateName::StateA' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetStateName, StateB) == 0x000010, "Member 'Placeable_PsychosisMine_BP_C_GetStateName::StateB' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetStateName, ReturnValue) == 0x000020, "Member 'Placeable_PsychosisMine_BP_C_GetStateName::ReturnValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.Editor_DrawOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct Placeable_PsychosisMine_BP_C_Editor_DrawOverlap final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Editor_CheckOverlap_overlaps;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Editor_CheckOverlap_outOverlapList;       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_Editor_DrawOverlap");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap) == 0x0000A8, "Wrong size on Placeable_PsychosisMine_BP_C_Editor_DrawOverlap");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, Temp_bool_Variable) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, Temp_struct_Variable) == 0x000004, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, Temp_struct_Variable_1) == 0x000014, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_Editor_CheckOverlap_overlaps) == 0x000024, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_Editor_CheckOverlap_overlaps' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_Editor_CheckOverlap_outOverlapList) == 0x000028, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_Editor_CheckOverlap_outOverlapList' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_K2_GetComponentScale_ReturnValue) == 0x000038, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_BreakVector_X) == 0x000044, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_BreakVector_Y) == 0x000048, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_BreakVector_Z) == 0x00004C, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, K2Node_Select_Default) == 0x000050, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000064, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_MakeVector_ReturnValue) == 0x000068, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_MakeVector_ReturnValue_1) == 0x000074, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000080, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000084, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_Add_VectorVector_ReturnValue) == 0x000090, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_DrawOverlap, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00009C, "Member 'Placeable_PsychosisMine_BP_C_Editor_DrawOverlap::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.Editor_CheckOverlap
// 0x0340 (0x0340 - 0x0000)
struct Placeable_PsychosisMine_BP_C_Editor_CheckOverlap final
{
public:
	bool                                          Overlaps;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutOverlapList;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 OverlapList;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          bOverlaps;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UPrimitiveComponent*>              CallFunc_GatherComponentOverlaps_out_overlappingComponent; // 0x0040(0x0050)(ContainsInstancedReference)
	TArray<class UPrimitiveComponent*>            CallFunc_Set_ToArray_Result;                       // 0x0090(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00E0(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x00F8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0110(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0150(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_2;          // 0x0190(0x0018)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_3;          // 0x01A8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x01C0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0200(0x0040)(HasGetValueTypeHash)
	ECollisionEnabled                             CallFunc_GetCollisionEnabled_ReturnValue;          // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0248(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0258(0x0018)()
	bool                                          K2Node_Select_Default;                             // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanActorCollisionOverlapInEditor_ReturnValue; // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_4;          // 0x0290(0x0018)()
	class FName                                   Temp_name_Variable;                                // 0x02A8(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x02B0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x02F0(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0308(0x0018)()
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0328(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_Editor_CheckOverlap");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap) == 0x000340, "Wrong size on Placeable_PsychosisMine_BP_C_Editor_CheckOverlap");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, Overlaps) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::Overlaps' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, OutOverlapList) == 0x000008, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::OutOverlapList' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, OverlapList) == 0x000018, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::OverlapList' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, bOverlaps) == 0x000028, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::bOverlaps' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, Temp_byte_Variable) == 0x000029, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, Temp_bool_Variable) == 0x00002A, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, Temp_bool_Variable_1) == 0x00002B, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, Temp_bool_Variable_2) == 0x00002C, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, Temp_bool_Variable_3) == 0x00002D, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, Temp_int_Array_Index_Variable) == 0x000030, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_GatherComponentOverlaps_out_overlappingComponent) == 0x000040, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_GatherComponentOverlaps_out_overlappingComponent' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Set_ToArray_Result) == 0x000090, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Array_Length_ReturnValue) == 0x0000A8, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Less_IntInt_ReturnValue) == 0x0000AC, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_GetOwner_ReturnValue) == 0x0000B0, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_GetOwner_ReturnValue_1) == 0x0000B8, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_GetDisplayName_ReturnValue) == 0x0000C0, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_GetDisplayName_ReturnValue_1) == 0x0000D0, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Conv_StringToText_ReturnValue) == 0x0000E0, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0000F8, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, K2Node_MakeStruct_FormatArgumentData) == 0x000110, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, K2Node_MakeStruct_FormatArgumentData_1) == 0x000150, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Conv_StringToText_ReturnValue_2) == 0x000190, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Conv_StringToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Conv_StringToText_ReturnValue_3) == 0x0001A8, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Conv_StringToText_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, K2Node_MakeStruct_FormatArgumentData_2) == 0x0001C0, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, K2Node_MakeStruct_FormatArgumentData_3) == 0x000200, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_GetCollisionEnabled_ReturnValue) == 0x000240, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_GetCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, K2Node_MakeArray_Array) == 0x000248, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Format_ReturnValue) == 0x000258, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, K2Node_Select_Default) == 0x000270, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Conv_TextToString_ReturnValue) == 0x000278, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_CanActorCollisionOverlapInEditor_ReturnValue) == 0x000288, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_CanActorCollisionOverlapInEditor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Conv_StringToText_ReturnValue_4) == 0x000290, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Conv_StringToText_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, Temp_name_Variable) == 0x0002A8, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, K2Node_MakeStruct_FormatArgumentData_4) == 0x0002B0, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, K2Node_MakeArray_Array_1) == 0x0002F0, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Array_Contains_ReturnValue) == 0x000300, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Format_ReturnValue_1) == 0x000308, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_BooleanOR_ReturnValue) == 0x000320, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000328, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_Editor_CheckOverlap, CallFunc_IsEmpty_ReturnValue) == 0x000338, "Member 'Placeable_PsychosisMine_BP_C_Editor_CheckOverlap::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.UpdateMeshVisibility
// 0x0002 (0x0002 - 0x0000)
struct Placeable_PsychosisMine_BP_C_UpdateMeshVisibility final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsStateA_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_UpdateMeshVisibility) == 0x000001, "Wrong alignment on Placeable_PsychosisMine_BP_C_UpdateMeshVisibility");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_UpdateMeshVisibility) == 0x000002, "Wrong size on Placeable_PsychosisMine_BP_C_UpdateMeshVisibility");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UpdateMeshVisibility, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_UpdateMeshVisibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UpdateMeshVisibility, CallFunc_BP_IsStateA_ReturnValue) == 0x000001, "Member 'Placeable_PsychosisMine_BP_C_UpdateMeshVisibility::CallFunc_BP_IsStateA_ReturnValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.UserConstructionScript
// 0x0038 (0x0038 - 0x0000)
struct Placeable_PsychosisMine_BP_C_UserConstructionScript final
{
public:
	struct FColor                                 NoOverlapColor_0;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 OverlapColor;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPsychosisMineTriggerRadius_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_UserConstructionScript) == 0x000004, "Wrong alignment on Placeable_PsychosisMine_BP_C_UserConstructionScript");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_UserConstructionScript) == 0x000038, "Wrong size on Placeable_PsychosisMine_BP_C_UserConstructionScript");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, NoOverlapColor_0) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::NoOverlapColor_0' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, OverlapColor) == 0x000004, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::OverlapColor' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, CallFunc_GetPsychosisMineTriggerRadius_ReturnValue) == 0x000008, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::CallFunc_GetPsychosisMineTriggerRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, CallFunc_K2_GetComponentScale_ReturnValue) == 0x00000C, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue) == 0x000018, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, CallFunc_BreakVector_X) == 0x00001C, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, CallFunc_BreakVector_Y) == 0x000020, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, CallFunc_BreakVector_Z) == 0x000024, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x00002C, "Member 'Placeable_PsychosisMine_BP_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.OnPostActorsPasted
// 0x0010 (0x0010 - 0x0000)
struct Placeable_PsychosisMine_BP_C_OnPostActorsPasted final
{
public:
	TArray<class AActor*>                         PastedActors;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_OnPostActorsPasted) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_OnPostActorsPasted");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_OnPostActorsPasted) == 0x000010, "Wrong size on Placeable_PsychosisMine_BP_C_OnPostActorsPasted");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_OnPostActorsPasted, PastedActors) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_OnPostActorsPasted::PastedActors' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.PostDuplicated
// 0x0008 (0x0008 - 0x0000)
struct Placeable_PsychosisMine_BP_C_PostDuplicated final
{
public:
	class AActor*                                 DuplicationParent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_PostDuplicated) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_PostDuplicated");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_PostDuplicated) == 0x000008, "Wrong size on Placeable_PsychosisMine_BP_C_PostDuplicated");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_PostDuplicated, DuplicationParent) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_PostDuplicated::DuplicationParent' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.PostEditChange
// 0x0008 (0x0008 - 0x0000)
struct Placeable_PsychosisMine_BP_C_PostEditChange final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_PostEditChange) == 0x000004, "Wrong alignment on Placeable_PsychosisMine_BP_C_PostEditChange");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_PostEditChange) == 0x000008, "Wrong size on Placeable_PsychosisMine_BP_C_PostEditChange");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_PostEditChange, PropertyName) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_PostEditChange::PropertyName' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.PostEditMove
// 0x0001 (0x0001 - 0x0000)
struct Placeable_PsychosisMine_BP_C_PostEditMove final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_PostEditMove) == 0x000001, "Wrong alignment on Placeable_PsychosisMine_BP_C_PostEditMove");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_PostEditMove) == 0x000001, "Wrong size on Placeable_PsychosisMine_BP_C_PostEditMove");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_PostEditMove, bFinished) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_PostEditMove::bFinished' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.PrepareState
// 0x0010 (0x0010 - 0x0000)
struct Placeable_PsychosisMine_BP_C_PrepareState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RandomOwner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_PrepareState) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_PrepareState");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_PrepareState) == 0x000010, "Wrong size on Placeable_PsychosisMine_BP_C_PrepareState");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_PrepareState, bStateA) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_PrepareState::bStateA' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_PrepareState, RandomOwner) == 0x000008, "Member 'Placeable_PsychosisMine_BP_C_PrepareState::RandomOwner' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.SetState
// 0x0001 (0x0001 - 0x0000)
struct Placeable_PsychosisMine_BP_C_SetState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_SetState) == 0x000001, "Wrong alignment on Placeable_PsychosisMine_BP_C_SetState");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_SetState) == 0x000001, "Wrong size on Placeable_PsychosisMine_BP_C_SetState");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_SetState, bStateA) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_SetState::bStateA' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.SetShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct Placeable_PsychosisMine_BP_C_SetShouldBeIgnoredForLots final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on Placeable_PsychosisMine_BP_C_SetShouldBeIgnoredForLots");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong size on Placeable_PsychosisMine_BP_C_SetShouldBeIgnoredForLots");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_SetShouldBeIgnoredForLots, bValue) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_SetShouldBeIgnoredForLots::bValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.BndEvt__Placeable_PsychosisMine_BP_RBHackable_K2Node_ComponentBoundEvent_1_OnCurrentHackStateChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Placeable_PsychosisMine_BP_C_BndEvt__Placeable_PsychosisMine_BP_RBHackable_K2Node_ComponentBoundEvent_1_OnCurrentHackStateChanged__DelegateSignature final
{
public:
	class URBHackableComponent*                   HackableComponent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_BndEvt__Placeable_PsychosisMine_BP_RBHackable_K2Node_ComponentBoundEvent_1_OnCurrentHackStateChanged__DelegateSignature) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_BndEvt__Placeable_PsychosisMine_BP_RBHackable_K2Node_ComponentBoundEvent_1_OnCurrentHackStateChanged__DelegateSignature");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_BndEvt__Placeable_PsychosisMine_BP_RBHackable_K2Node_ComponentBoundEvent_1_OnCurrentHackStateChanged__DelegateSignature) == 0x000008, "Wrong size on Placeable_PsychosisMine_BP_C_BndEvt__Placeable_PsychosisMine_BP_RBHackable_K2Node_ComponentBoundEvent_1_OnCurrentHackStateChanged__DelegateSignature");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_BndEvt__Placeable_PsychosisMine_BP_RBHackable_K2Node_ComponentBoundEvent_1_OnCurrentHackStateChanged__DelegateSignature, HackableComponent) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_BndEvt__Placeable_PsychosisMine_BP_RBHackable_K2Node_ComponentBoundEvent_1_OnCurrentHackStateChanged__DelegateSignature::HackableComponent' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.ExecuteUbergraph_Placeable_PsychosisMine_BP
// 0x0050 (0x0050 - 0x0000)
struct Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_Event_pastedActors;                         // 0x0008(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 K2Node_Event_duplicationParent;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_propertyName;                         // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFinished;                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bStateA_1;                            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_randomOwner;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bStateA;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bValue;                               // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsStateA_ReturnValue;                  // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URBHackableComponent*                   K2Node_ComponentBoundEvent_hackableComponent;      // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHackState                                    CallFunc_GetCurrentHackState_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP) == 0x000050, "Wrong size on Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, EntryPoint) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, CallFunc_IsDedicatedServer_ReturnValue) == 0x000005, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_Event_pastedActors) == 0x000008, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_Event_pastedActors' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_Event_duplicationParent) == 0x000018, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_Event_duplicationParent' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_Event_propertyName) == 0x000020, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_Event_propertyName' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_Event_bFinished) == 0x000028, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_Event_bFinished' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_Event_bStateA_1) == 0x000029, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_Event_bStateA_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_Event_randomOwner) == 0x000030, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_Event_randomOwner' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_Event_bStateA) == 0x000038, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_Event_bStateA' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_Event_bValue) == 0x000039, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_Event_bValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, CallFunc_BP_IsStateA_ReturnValue) == 0x00003A, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::CallFunc_BP_IsStateA_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_ComponentBoundEvent_hackableComponent) == 0x000040, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_ComponentBoundEvent_hackableComponent' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, CallFunc_GetCurrentHackState_ReturnValue) == 0x000048, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::CallFunc_GetCurrentHackState_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000049, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP, K2Node_SwitchEnum_CmpSuccess) == 0x00004A, "Member 'Placeable_PsychosisMine_BP_C_ExecuteUbergraph_Placeable_PsychosisMine_BP::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.IsRandomStateSet
// 0x0001 (0x0001 - 0x0000)
struct Placeable_PsychosisMine_BP_C_IsRandomStateSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_IsRandomStateSet) == 0x000001, "Wrong alignment on Placeable_PsychosisMine_BP_C_IsRandomStateSet");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_IsRandomStateSet) == 0x000001, "Wrong size on Placeable_PsychosisMine_BP_C_IsRandomStateSet");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_IsRandomStateSet, ReturnValue) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_IsRandomStateSet::ReturnValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.IsStateA
// 0x0002 (0x0002 - 0x0000)
struct Placeable_PsychosisMine_BP_C_IsStateA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsStateA_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_IsStateA) == 0x000001, "Wrong alignment on Placeable_PsychosisMine_BP_C_IsStateA");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_IsStateA) == 0x000002, "Wrong size on Placeable_PsychosisMine_BP_C_IsStateA");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_IsStateA, ReturnValue) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_IsStateA::ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_IsStateA, CallFunc_BP_IsStateA_ReturnValue) == 0x000001, "Member 'Placeable_PsychosisMine_BP_C_IsStateA::CallFunc_BP_IsStateA_ReturnValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.ShouldBeIgnoredForLots
// 0x0002 (0x0002 - 0x0000)
struct Placeable_PsychosisMine_BP_C_ShouldBeIgnoredForLots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_ShouldBeIgnoredForLots_ReturnValue;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_ShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on Placeable_PsychosisMine_BP_C_ShouldBeIgnoredForLots");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_ShouldBeIgnoredForLots) == 0x000002, "Wrong size on Placeable_PsychosisMine_BP_C_ShouldBeIgnoredForLots");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ShouldBeIgnoredForLots, ReturnValue) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_ShouldBeIgnoredForLots::ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_ShouldBeIgnoredForLots, CallFunc_BP_ShouldBeIgnoredForLots_ReturnValue) == 0x000001, "Member 'Placeable_PsychosisMine_BP_C_ShouldBeIgnoredForLots::CallFunc_BP_ShouldBeIgnoredForLots_ReturnValue' has a wrong offset!");

// Function Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C.GetPlayerPingData
// 0x0150 (0x0150 - 0x0000)
struct Placeable_PsychosisMine_BP_C_GetPlayerPingData final
{
public:
	class ARBPlayer*                              PingOwner;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FPlayerPingData                        OutData;                                           // 0x0090(0x0030)(Parm, OutParm)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x00C4(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x00CC(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsUniqueVariatorTypeActive_ReturnValue;   // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsUniqueVariatorTypeActive_ReturnValue_1; // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class URBGlobalUIConfig*                      CallFunc_GetGlobalUIConfig_ReturnValue;            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPlayerPingData                        CallFunc_Map_Find_Value;                           // 0x00E0(0x0030)()
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerPingData                        CallFunc_Map_Find_Value_1;                         // 0x0118(0x0030)()
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Placeable_PsychosisMine_BP_C_GetPlayerPingData) == 0x000008, "Wrong alignment on Placeable_PsychosisMine_BP_C_GetPlayerPingData");
static_assert(sizeof(Placeable_PsychosisMine_BP_C_GetPlayerPingData) == 0x000150, "Wrong size on Placeable_PsychosisMine_BP_C_GetPlayerPingData");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, PingOwner) == 0x000000, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::PingOwner' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, HitResult) == 0x000008, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::HitResult' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, OutData) == 0x000090, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::OutData' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, ReturnValue) == 0x0000C0, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, Temp_name_Variable) == 0x0000C4, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, Temp_name_Variable_1) == 0x0000CC, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, CallFunc_IsUniqueVariatorTypeActive_ReturnValue) == 0x0000D4, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::CallFunc_IsUniqueVariatorTypeActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, CallFunc_IsUniqueVariatorTypeActive_ReturnValue_1) == 0x0000D5, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::CallFunc_IsUniqueVariatorTypeActive_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, CallFunc_GetGlobalUIConfig_ReturnValue) == 0x0000D8, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::CallFunc_GetGlobalUIConfig_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, CallFunc_Map_Find_Value) == 0x0000E0, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, CallFunc_Map_Find_ReturnValue) == 0x000110, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, CallFunc_Map_Find_Value_1) == 0x000118, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(Placeable_PsychosisMine_BP_C_GetPlayerPingData, CallFunc_Map_Find_ReturnValue_1) == 0x000148, "Member 'Placeable_PsychosisMine_BP_C_GetPlayerPingData::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");

}

