#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hidespot_Base_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Hidespot_Base_BP.Hidespot_Base_BP_C
// 0x0070 (0x02A0 - 0x0230)
class AHidespot_Base_BP_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        EnabledRoot;                                       // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBEditorClearanceCollisionBoxComponent* ClearanceBox;                                      // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRandomizableHelperComponent*         RBRandomizableHelper;                              // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRoomAssociationComponent*            RBRoomAssociation;                                 // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DisabledRoot;                                      // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBInvestigationComponent*              HidespotInvestigation;                             // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         HidespotRandomSeed;                                // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCustomDisableMeshes;                              // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bShowDisabledVisuals;                              // 0x0275(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          bForceDisabled;                                    // 0x0276(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bToggledEnabled;                                   // 0x0277(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bCanBeUsedByPouncer;                               // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DenyInteractionText;                               // 0x0280(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          RemoveDisabledMeshFromServer;                      // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bWarnOnForceDisabled;                              // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          DisableInsteadOfToggling;                          // 0x029A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bShowEnabledVisuals;                               // 0x029B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	bool                                          bCustomEnableMeshes;                               // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool GetStateName(class FString* StateA, class FString* StateB);
	bool FixUp();
	void RandomizeEnabledMeshes(class USceneComponent* RandomizationRoot, int32 RandomSeedOffset);
	void UpdateInteractionIgnoreComponents(class URBHidespotComponent* Hidespot);
	void Editor_RefreshEnabledMeshesVisibility(bool* bShowEnabledVisuals_0);
	void IntitializeClearanceBoxes();
	void DisabledAttachedComponentsFromServer(class USceneComponent* Parent);
	void DisableExtraComponentsFromServer();
	void SetupMasterPose();
	void GatherAvailableRandomizationSceneComp(class USceneComponent* Root_0, TArray<class USceneComponent*>* Availables, TArray<class USceneComponent*>* Discarded);
	void TrySetupRandomizedSkeletalMeshFromRoot(class USceneComponent* InComponent);
	void TrySetupRandomizedSkeletalMesh(class USceneComponent* InComponent);
	void WakeUpDisabledSkeletalMesh(class USceneComponent* OverrideDisableRoot);
	void Editor_RefreshDisabledMeshesVisibility(bool* bShowDisabledVisuals_0);
	void SetDisabledMeshesState(bool bDisabled, class USceneComponent* RandomizationRootOverride);
	void RandomizeDisabledMeshes(class USceneComponent* RandomizationRoot, int32 RandomSeedOffset);
	void TryGenerateRandomSeed();
	void UserConstructionScript();
	void PrepareState(bool bStateA, class AActor* RandomOwner);
	void OnPostActorsPasted(const TArray<class AActor*>& PastedActors);
	void PostAddedToLevel();
	void PostEditChange(const class FName& PropertyName);
	void PostEditMove(bool bFinished);
	void TickSelected();
	void PostDuplicated(class AActor* DuplicationParent);
	void Event_OnResetStage();
	void PostToggled(bool bToggleEnabled);
	void SetShouldBeIgnoredForLots(bool bValue);
	void SetState(bool bStateA);
	void OnEditorPostLoad();
	void ExecuteUbergraph_Hidespot_Base_BP(int32 EntryPoint);

	bool ShouldPingFollowActor(bool* OutShouldFollow) const;
	bool GetPingItemName(class FText* OutName) const;
	bool GetPingEnabled(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, bool* OutIsEnabled) const;
	bool GetPlayerPingData(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FPlayerPingData* OutData) const;
	bool GetPlayerPingWorldLocation(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FVector* OutLocation) const;
	bool IsRandomStateSet() const;
	bool IsStateA() const;
	bool ShouldBeIgnoredForLots() const;
	bool IsTogglingStaticShadowComponentAllowed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Hidespot_Base_BP_C">();
	}
	static class AHidespot_Base_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHidespot_Base_BP_C>();
	}
};
static_assert(alignof(AHidespot_Base_BP_C) == 0x000008, "Wrong alignment on AHidespot_Base_BP_C");
static_assert(sizeof(AHidespot_Base_BP_C) == 0x0002A0, "Wrong size on AHidespot_Base_BP_C");
static_assert(offsetof(AHidespot_Base_BP_C, UberGraphFrame) == 0x000230, "Member 'AHidespot_Base_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, EnabledRoot) == 0x000238, "Member 'AHidespot_Base_BP_C::EnabledRoot' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, ClearanceBox) == 0x000240, "Member 'AHidespot_Base_BP_C::ClearanceBox' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, RBRandomizableHelper) == 0x000248, "Member 'AHidespot_Base_BP_C::RBRandomizableHelper' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, RBRoomAssociation) == 0x000250, "Member 'AHidespot_Base_BP_C::RBRoomAssociation' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, DisabledRoot) == 0x000258, "Member 'AHidespot_Base_BP_C::DisabledRoot' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, HidespotInvestigation) == 0x000260, "Member 'AHidespot_Base_BP_C::HidespotInvestigation' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, Root) == 0x000268, "Member 'AHidespot_Base_BP_C::Root' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, HidespotRandomSeed) == 0x000270, "Member 'AHidespot_Base_BP_C::HidespotRandomSeed' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, bCustomDisableMeshes) == 0x000274, "Member 'AHidespot_Base_BP_C::bCustomDisableMeshes' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, bShowDisabledVisuals) == 0x000275, "Member 'AHidespot_Base_BP_C::bShowDisabledVisuals' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, bForceDisabled) == 0x000276, "Member 'AHidespot_Base_BP_C::bForceDisabled' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, bToggledEnabled) == 0x000277, "Member 'AHidespot_Base_BP_C::bToggledEnabled' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, bCanBeUsedByPouncer) == 0x000278, "Member 'AHidespot_Base_BP_C::bCanBeUsedByPouncer' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, DenyInteractionText) == 0x000280, "Member 'AHidespot_Base_BP_C::DenyInteractionText' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, RemoveDisabledMeshFromServer) == 0x000298, "Member 'AHidespot_Base_BP_C::RemoveDisabledMeshFromServer' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, bWarnOnForceDisabled) == 0x000299, "Member 'AHidespot_Base_BP_C::bWarnOnForceDisabled' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, DisableInsteadOfToggling) == 0x00029A, "Member 'AHidespot_Base_BP_C::DisableInsteadOfToggling' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, bShowEnabledVisuals) == 0x00029B, "Member 'AHidespot_Base_BP_C::bShowEnabledVisuals' has a wrong offset!");
static_assert(offsetof(AHidespot_Base_BP_C, bCustomEnableMeshes) == 0x00029C, "Member 'AHidespot_Base_BP_C::bCustomEnableMeshes' has a wrong offset!");

}

