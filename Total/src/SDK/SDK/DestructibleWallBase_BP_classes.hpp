#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DestructibleWallBase_BP

#include "Basic.hpp"

#include "OPP_structs.hpp"
#include "OPP_classes.hpp"
#include "Engine_structs.hpp"
#include "GenericBreakableObstaclesBonesStruct_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass DestructibleWallBase_BP.DestructibleWallBase_BP_C
// 0x01F8 (0x0828 - 0x0630)
class ADestructibleWallBase_BP_C : public ARBBreakableObstacle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0630(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URBDoorSeparatingPlaneComponent*        RBDoorSeparatingPlane;                             // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBDoorLightingComponent*               RBDoorLighting;                                    // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPingComponent*                       RBPing;                                            // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Collision;                                         // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_LastHit;                                         // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FourthHitParticles;                                // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ThirdHitParticles;                                 // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SecondHitParticles;                                // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FirstHitParticles;                                 // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Back;                                              // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Front;                                             // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBDestructibleComponent*               RBDestructible;                                    // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_B725ADCE40EE854CF4933E953ED44EBF; // 0x06A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_B725ADCE40EE854CF4933E953ED44EBF; // 0x06A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A5[0x3];                                      // 0x06A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastDurabilityRatio;                               // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PlanksToMove01;                                    // 0x06B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PlanksToBreak01;                                   // 0x06C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PlanksToMove02;                                    // 0x06D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PlanksToBreak02;                                   // 0x06E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PlanksToMove03;                                    // 0x06F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PlanksToBreak03;                                   // 0x0708(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PlanksToMove04;                                    // 0x0718(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PlanksToBreak04;                                   // 0x0728(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         HitIndex;                                          // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGenericBreakableObstaclesBonesStruct> ForwardPlanks;                                     // 0x0740(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                StartingLocation;                                  // 0x0750(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75C[0x4];                                      // 0x075C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGenericBreakableObstaclesBonesStruct> BackwardPlanks;                                    // 0x0760(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           DoNotMove;                                         // 0x0770(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraShakeData                       ShakeData;                                         // 0x0780(0x0098)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	FMulticastInlineDelegateProperty_             Broken;                                            // 0x0818(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BreakAllPlanks();
	void BreakPlanks(TArray<class FName>& BoneNames);
	void BreakPlank(class FName BoneName);
	void ResetLigthingSettings();
	void UserConstructionScript();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void SecondHit(const struct FVector& Vector);
	void Shake();
	void ThirdHit(const struct FVector& Vector);
	void FourthHit(const struct FVector& Vector);
	void ForceBreak();
	void BndEvt__DamageableComponent_K2Node_ComponentBoundEvent_3_OnDamageableDamaged__DelegateSignature(class URBDamageableComponent* DamageableComponent_0, bool IsDestroyed);
	void Event_SnapToState();
	void UpdateDuratility();
	void Event_OnResetStage();
	void Event_OnBreakObject(class AActor* SourceActor);
	void ReceiveBeginPlay();
	void PlankHit(const TArray<class FName>& PlankToMove, const TArray<class FName>& PlanksToBreak, const struct FVector& A);
	void FirsHit(const struct FVector& Vector);
	void ExecuteUbergraph_DestructibleWallBase_BP(int32 EntryPoint);
	void Broken__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DestructibleWallBase_BP_C">();
	}
	static class ADestructibleWallBase_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADestructibleWallBase_BP_C>();
	}
};
static_assert(alignof(ADestructibleWallBase_BP_C) == 0x000008, "Wrong alignment on ADestructibleWallBase_BP_C");
static_assert(sizeof(ADestructibleWallBase_BP_C) == 0x000828, "Wrong size on ADestructibleWallBase_BP_C");
static_assert(offsetof(ADestructibleWallBase_BP_C, UberGraphFrame) == 0x000630, "Member 'ADestructibleWallBase_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, RBDoorSeparatingPlane) == 0x000638, "Member 'ADestructibleWallBase_BP_C::RBDoorSeparatingPlane' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, RBDoorLighting) == 0x000640, "Member 'ADestructibleWallBase_BP_C::RBDoorLighting' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, RBPing) == 0x000648, "Member 'ADestructibleWallBase_BP_C::RBPing' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, Collision) == 0x000650, "Member 'ADestructibleWallBase_BP_C::Collision' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, P_LastHit) == 0x000658, "Member 'ADestructibleWallBase_BP_C::P_LastHit' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, FourthHitParticles) == 0x000660, "Member 'ADestructibleWallBase_BP_C::FourthHitParticles' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, ThirdHitParticles) == 0x000668, "Member 'ADestructibleWallBase_BP_C::ThirdHitParticles' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, SecondHitParticles) == 0x000670, "Member 'ADestructibleWallBase_BP_C::SecondHitParticles' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, FirstHitParticles) == 0x000678, "Member 'ADestructibleWallBase_BP_C::FirstHitParticles' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, Arrow) == 0x000680, "Member 'ADestructibleWallBase_BP_C::Arrow' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, Back) == 0x000688, "Member 'ADestructibleWallBase_BP_C::Back' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, Front) == 0x000690, "Member 'ADestructibleWallBase_BP_C::Front' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, RBDestructible) == 0x000698, "Member 'ADestructibleWallBase_BP_C::RBDestructible' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, Timeline_0_NewTrack_0_B725ADCE40EE854CF4933E953ED44EBF) == 0x0006A0, "Member 'ADestructibleWallBase_BP_C::Timeline_0_NewTrack_0_B725ADCE40EE854CF4933E953ED44EBF' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, Timeline_0__Direction_B725ADCE40EE854CF4933E953ED44EBF) == 0x0006A4, "Member 'ADestructibleWallBase_BP_C::Timeline_0__Direction_B725ADCE40EE854CF4933E953ED44EBF' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, Timeline_0) == 0x0006A8, "Member 'ADestructibleWallBase_BP_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, LastDurabilityRatio) == 0x0006B0, "Member 'ADestructibleWallBase_BP_C::LastDurabilityRatio' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, PlanksToMove01) == 0x0006B8, "Member 'ADestructibleWallBase_BP_C::PlanksToMove01' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, PlanksToBreak01) == 0x0006C8, "Member 'ADestructibleWallBase_BP_C::PlanksToBreak01' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, PlanksToMove02) == 0x0006D8, "Member 'ADestructibleWallBase_BP_C::PlanksToMove02' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, PlanksToBreak02) == 0x0006E8, "Member 'ADestructibleWallBase_BP_C::PlanksToBreak02' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, PlanksToMove03) == 0x0006F8, "Member 'ADestructibleWallBase_BP_C::PlanksToMove03' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, PlanksToBreak03) == 0x000708, "Member 'ADestructibleWallBase_BP_C::PlanksToBreak03' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, PlanksToMove04) == 0x000718, "Member 'ADestructibleWallBase_BP_C::PlanksToMove04' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, PlanksToBreak04) == 0x000728, "Member 'ADestructibleWallBase_BP_C::PlanksToBreak04' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, HitIndex) == 0x000738, "Member 'ADestructibleWallBase_BP_C::HitIndex' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, ForwardPlanks) == 0x000740, "Member 'ADestructibleWallBase_BP_C::ForwardPlanks' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, StartingLocation) == 0x000750, "Member 'ADestructibleWallBase_BP_C::StartingLocation' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, BackwardPlanks) == 0x000760, "Member 'ADestructibleWallBase_BP_C::BackwardPlanks' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, DoNotMove) == 0x000770, "Member 'ADestructibleWallBase_BP_C::DoNotMove' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, ShakeData) == 0x000780, "Member 'ADestructibleWallBase_BP_C::ShakeData' has a wrong offset!");
static_assert(offsetof(ADestructibleWallBase_BP_C, Broken) == 0x000818, "Member 'ADestructibleWallBase_BP_C::Broken' has a wrong offset!");

}

