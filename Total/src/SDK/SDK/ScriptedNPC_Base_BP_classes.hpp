#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScriptedNPC_Base_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ScriptedNPC_Base_BP.ScriptedNPC_Base_BP_C
// 0x0060 (0x0388 - 0x0328)
class AScriptedNPC_Base_BP_C final : public ARBScriptedAnimStation
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsInLoopB;                                         // 0x0330(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          Exiting;                                           // 0x0331(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBBot*                                 bot;                                               // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnFinished;                                        // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HasSentFinished;                                   // 0x0350(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         ComponentExiting;                                  // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          CanOnlyExitAtLoopEnd;                              // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UScriptedNPC_Base_AnimBP_C*>     ScriptedNPCAnimBps;                                // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasEverStarted;                                    // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bForceNoAcceptDecals;                              // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void OnFinished__DelegateSignature();
	void ExecuteUbergraph_ScriptedNPC_Base_BP(int32 EntryPoint);
	void DelayedStop();
	void ReceiveBeginPlay();
	void DelayedCheckVariables();
	void DetachBot();
	void Event_OnResetStage();
	void Event_StartedScriptedAnim();
	void StartExiting();
	void EnterLoopB();
	void UserConstructionScript();
	void NotifyExitFinished(class USkeletalMeshComponent* Component);
	void OnRep_hasSentFinished();
	void OnRep_IsInLoopB();
	void OnRep_Exiting();
	void DisableDecalsOnSkelmeshes();
	void OnExitingChanged();
	void PlayAnimOnSpecificMesh(class UAnimSequenceBase* Anim, class FName Tag);
	void CannotBeInterrupted(bool CannotBeInterrupted_0);
	void AttachAccessory(int32 WhichAccessorySlot);
	void DetachAccessory(int32 WhichAccessorySlot);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ScriptedNPC_Base_BP_C">();
	}
	static class AScriptedNPC_Base_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScriptedNPC_Base_BP_C>();
	}
};
static_assert(alignof(AScriptedNPC_Base_BP_C) == 0x000008, "Wrong alignment on AScriptedNPC_Base_BP_C");
static_assert(sizeof(AScriptedNPC_Base_BP_C) == 0x000388, "Wrong size on AScriptedNPC_Base_BP_C");
static_assert(offsetof(AScriptedNPC_Base_BP_C, UberGraphFrame) == 0x000328, "Member 'AScriptedNPC_Base_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, IsInLoopB) == 0x000330, "Member 'AScriptedNPC_Base_BP_C::IsInLoopB' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, Exiting) == 0x000331, "Member 'AScriptedNPC_Base_BP_C::Exiting' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, bot) == 0x000338, "Member 'AScriptedNPC_Base_BP_C::bot' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, OnFinished) == 0x000340, "Member 'AScriptedNPC_Base_BP_C::OnFinished' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, HasSentFinished) == 0x000350, "Member 'AScriptedNPC_Base_BP_C::HasSentFinished' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, ComponentExiting) == 0x000358, "Member 'AScriptedNPC_Base_BP_C::ComponentExiting' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, CanOnlyExitAtLoopEnd) == 0x000368, "Member 'AScriptedNPC_Base_BP_C::CanOnlyExitAtLoopEnd' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, ScriptedNPCAnimBps) == 0x000370, "Member 'AScriptedNPC_Base_BP_C::ScriptedNPCAnimBps' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, HasEverStarted) == 0x000380, "Member 'AScriptedNPC_Base_BP_C::HasEverStarted' has a wrong offset!");
static_assert(offsetof(AScriptedNPC_Base_BP_C, bForceNoAcceptDecals) == 0x000381, "Member 'AScriptedNPC_Base_BP_C::bForceNoAcceptDecals' has a wrong offset!");

}

