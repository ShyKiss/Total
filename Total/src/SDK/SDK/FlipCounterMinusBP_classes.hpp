#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlipCounterMinusBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "OPP_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FlipCounter-BP.FlipCounter-BP_C
// 0x0088 (0x02B8 - 0x0230)
class AFlipCounterMinusBP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      OnHackVFX;                                         // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      RBSound;                                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      HackedVFX;                                         // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBHackableComponent*                   DeviceHackZone;                                    // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBHackableComponent*                   GateHackZone;                                      // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Flip_1;                                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Flip_10;                                           // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSpotLightComponent*                  RBSpotLight1;                                      // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSpotLightComponent*                  RBSpotLight;                                       // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLightRed;                                     // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLightGreen;                                   // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlipClockMinus02;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCountNumber;                                // 0x0298(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         InitialCountNumber;                                // 0x029C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bDisabled;                                         // 0x02A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URBHackableComponent*>           HackableComponents;                                // 0x02A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_FlipCounterMinusBP(int32 EntryPoint);
	void OnHackStateChanged(class URBHackableComponent* HackableComponent);
	void BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature(class URBHackableComponent* HackableComponent);
	void OnTriggerEvent(bool IsOn, class ARBTriggerable* Triggerable);
	void SetCounter(int32 Value);
	void Event_OnResetStage();
	void ReceiveBeginPlay();
	void SetVariatorEnabled(bool bEnabled);
	void ResetCount();
	void OnRep_initialCountNumber();
	void OnRep_currentCountNumber();
	void Increment();
	void Decrement();
	void RefreshGateHackZoneSizes();
	void GetLinkedTriggerable(class ARBTriggerable** Triggerable);
	void SetNumber(int32 NewNumber);
	void ResetNumber(int32 NewNumber);
	void OnRep_bDisabled();
	void UpdateVisual();
	void SetDisabled(bool bDisabled_0);
	void RefreshBrokenVFX();
	void IsConsideredBeingActivelyHacked(bool* Out);
	int32 GetCounter();

	bool GetVariatorEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FlipCounter-BP_C">();
	}
	static class AFlipCounterMinusBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFlipCounterMinusBP_C>();
	}
};
static_assert(alignof(AFlipCounterMinusBP_C) == 0x000008, "Wrong alignment on AFlipCounterMinusBP_C");
static_assert(sizeof(AFlipCounterMinusBP_C) == 0x0002B8, "Wrong size on AFlipCounterMinusBP_C");
static_assert(offsetof(AFlipCounterMinusBP_C, UberGraphFrame) == 0x000230, "Member 'AFlipCounterMinusBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, OnHackVFX) == 0x000238, "Member 'AFlipCounterMinusBP_C::OnHackVFX' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, RBSound) == 0x000240, "Member 'AFlipCounterMinusBP_C::RBSound' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, HackedVFX) == 0x000248, "Member 'AFlipCounterMinusBP_C::HackedVFX' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, DeviceHackZone) == 0x000250, "Member 'AFlipCounterMinusBP_C::DeviceHackZone' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, GateHackZone) == 0x000258, "Member 'AFlipCounterMinusBP_C::GateHackZone' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, Flip_1) == 0x000260, "Member 'AFlipCounterMinusBP_C::Flip_1' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, Flip_10) == 0x000268, "Member 'AFlipCounterMinusBP_C::Flip_10' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, RBSpotLight1) == 0x000270, "Member 'AFlipCounterMinusBP_C::RBSpotLight1' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, RBSpotLight) == 0x000278, "Member 'AFlipCounterMinusBP_C::RBSpotLight' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, PointLightRed) == 0x000280, "Member 'AFlipCounterMinusBP_C::PointLightRed' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, PointLightGreen) == 0x000288, "Member 'AFlipCounterMinusBP_C::PointLightGreen' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, FlipClockMinus02) == 0x000290, "Member 'AFlipCounterMinusBP_C::FlipClockMinus02' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, CurrentCountNumber) == 0x000298, "Member 'AFlipCounterMinusBP_C::CurrentCountNumber' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, InitialCountNumber) == 0x00029C, "Member 'AFlipCounterMinusBP_C::InitialCountNumber' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, bDisabled) == 0x0002A0, "Member 'AFlipCounterMinusBP_C::bDisabled' has a wrong offset!");
static_assert(offsetof(AFlipCounterMinusBP_C, HackableComponents) == 0x0002A8, "Member 'AFlipCounterMinusBP_C::HackableComponents' has a wrong offset!");

}

