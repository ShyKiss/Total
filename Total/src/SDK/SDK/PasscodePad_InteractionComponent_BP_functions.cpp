#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PasscodePad_InteractionComponent_BP

#include "Basic.hpp"

#include "PasscodePad_InteractionComponent_BP_classes.hpp"
#include "PasscodePad_InteractionComponent_BP_parameters.hpp"


namespace SDK
{

// Function PasscodePad_InteractionComponent_BP.PasscodePad_InteractionComponent_BP_C.GetInteractionPawnLocation
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ARBPawn*                          Pawn                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESpecialMove                            SpecialMove                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UPasscodePad_InteractionComponent_BP_C::GetInteractionPawnLocation(const class ARBPawn* Pawn, ESpecialMove SpecialMove, struct FVector* OutLocation, struct FVector* OutDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PasscodePad_InteractionComponent_BP_C", "GetInteractionPawnLocation");

	Params::PasscodePad_InteractionComponent_BP_C_GetInteractionPawnLocation Parms{};

	Parms.Pawn = Pawn;
	Parms.SpecialMove = SpecialMove;

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutDirection != nullptr)
		*OutDirection = std::move(Parms.OutDirection);

	return Parms.ReturnValue;
}

}

