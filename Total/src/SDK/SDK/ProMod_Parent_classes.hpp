#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProMod_Parent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "LockAxis_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "StretchableLibraryMode_structs.hpp"
#include "PipeModuleDetailParameters_structs.hpp"
#include "StretchableModulesPartsRandomization_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ProMod_Parent.ProMod_Parent_C
// 0x0268 (0x04B0 - 0x0248)
class AProMod_Parent_C : public ARBPipeModule
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector                                End;                                               // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxZDistance;                                      // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxYDistance;                                      // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxTilingDistance;                                 // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Tiling;                                            // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TileY;                                             // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TileZ;                                             // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELockAxis                                     LockAxis;                                          // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridPrecision;                                     // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialOffset;                                     // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitialRotation;                                   // 0x0288(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PreviousAnchor;                                    // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousActorPos;                                  // 0x0298(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMaterialOverride;                               // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseMaterialOverrideOnDetails;                      // 0x02A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A6[0x2];                                      // 0x02A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceConstant*>      Materials;                                         // 0x02A8(0x0010)(Edit, BlueprintVisible)
	ELockAxis                                     PreviousLockAxis;                                  // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceConstant*>      MaterialsSplines;                                  // 0x02C0(0x0010)(Edit, BlueprintVisible)
	bool                                          OverrideLightmapResolution;                        // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pivot;                                             // 0x02D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CollisionProfileName;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FStretchableModulesPartsRandomization> MeshLibrary;                                       // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UStaticMesh*                            CurrentStaticMesh;                                 // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFirstAssetRescaling;                            // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECanBeCharacterBase                           CanStepUpOn;                                       // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Mobility;                                          // 0x0302(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_303[0x1];                                      // 0x0303(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomMeshSeed;                                    // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumComponents;                                     // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           StaticmeshComponents;                              // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMesh*>                    LibrarySpecialMeshes;                              // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           TempMeshComponents;                                // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class USplineMeshComponent*>           TempSplineComponents;                              // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       MainPipeMaterials;                                 // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UseLibraryMaterialOverride;                        // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinStretchRatio;                                   // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DataTable;                                         // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStretchableLibraryMode                       MeshLibraryMode;                                   // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLightingChannels                      LightChannels;                                     // 0x0371(0x0001)(Edit, BlueprintVisible, NoDestructor)
	uint8                                         Pad_372[0x2];                                      // 0x0372(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DynamicData;                                       // 0x0374(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class AProMod_Parent_C>> OwningActors;                                      // 0x0388(0x0010)(Edit, BlueprintVisible)
	float                                         ElbowMaxDistance;                                  // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ElbowTangent;                                      // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Channels;                                          // 0x03A0(0x0010)(Edit, BlueprintVisible)
	float                                         EndPipeThreshold;                                  // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StraightPipe;                                      // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            TConnector;                                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            XConnector;                                        // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            PipeConnector;                                     // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            ElbowPipe;                                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FPipeModuleDetailParameters>    ProceduralDetails;                                 // 0x03E0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FTransform>                     Detail;                                            // 0x03F0(0x0010)(Edit, BlueprintVisible)
	TArray<class UStaticMesh*>                    ManualDetails;                                     // 0x0400(0x0010)(Edit, BlueprintVisible)
	TArray<TSoftObjectPtr<class AProMod_Parent_C>> ConnectorList;                                     // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInterface*                     ElbowMaterialOverride;                             // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class AProMod_Manager_C>       ProModManager;                                     // 0x0428(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class AProMod_Parent_C>        TargetActor2;                                      // 0x0450(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FixTwist;                                          // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseDetailRotation;                                // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseEndSegmentDetailMesh;                          // 0x047A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Hack;                                              // 0x047B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStaticShadow;                                     // 0x047C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47D[0x3];                                      // 0x047D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Start_Roll;                                        // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End_Roll;                                          // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Start_Scale;                                       // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              End_Scale;                                         // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SplineUpVector;                                    // 0x0498(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCollisionEnabled;                                 // 0x04A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bDetailsCollisionEnabled;                          // 0x04A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	ELightmapType                                 Default_Lightmap_Type;                             // 0x04A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x04A7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DiffuseBoost;                                      // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool FixUp();
	void SetupCollision(class UPrimitiveComponent* Target, bool bIsDetail);
	void ApplyNewMeshSettings(class UMeshComponent* NewMeshComponent);
	void MakePipeConnection2();
	void CustRunConstruction(TArray<TSoftObjectPtr<class AProMod_Parent_C>>& Pipes);
	void CleanOwningActors(bool* bChanged);
	void SetMaterialOverrides();
	void AddManualDetail(class UStaticMesh* NewMesh, const struct FRotator& RotOffset, const struct FVector& Scale, const struct FVector& Offset);
	void IsSameChannel(class AProMod_Parent_C* CurrentModule, bool* IsValid);
	void IsValidIntersection(class AProMod_Parent_C* TargetActor, bool* Valid, struct FVector* IntersectionPos);
	void KeepTextureRatio();
	void CreateDynamicMaterials();
	void AddDetailComponent(float _minDistance, float _Offset, class UStaticMesh* StaticMesh, float _Rotation);
	void AddPipeDetails();
	struct FVector GetPipeVector(class AProMod_Parent_C* Pipe);
	void GetConnectorRotation(class AProMod_Parent_C* LocalPipe, class AProMod_Parent_C* TargetPipe, bool IsInvertedRoles, float _PivotDistanceFromTarget, struct FRotator* Rotation);
	void ClearAllComponents();
	void RegisterToPipeModuleManager(bool* Valid);
	void CreateSplineMeshComp(const struct FVector& WorldLocation, const struct FVector& Tangent1, const struct FVector& WorldLocation2, const struct FVector& Tangen2, class AProMod_Parent_C* TargetPipeModule, bool bShouldFlipSpline);
	void IsCornerPipe(class AProMod_Parent_C* _TargetPipe, bool* IsCornerPipe_0, struct FVector* TargetLocation1, struct FVector* TargetEndWorldLocation1, struct FVector* ActorEndWorldLocation1, struct FVector* ActorWorldLocation1, class AProMod_Parent_C** TargetPipe1, bool* bShouldFlipSpline);
	void IsCurrentAtFullExtentFromTarget(class AProMod_Parent_C* TargetPipeModule1, class AProMod_Parent_C* TargetPipeModule2, bool* IsAtFullExtent, float* PivotDistanceFromTarget);
	void AddUniqueSMCAndActorToArray(class AProMod_Parent_C* TargetActor, class UStaticMeshComponent* StaticMeshComponent, class USplineMeshComponent* SplineMeshComponent);
	void RebuildTargets();
	void GetAxisFromVector(const struct FVector& Vector, int32* AxisIndex);
	void MakePipeConnection(TArray<TSoftObjectPtr<class AProMod_Parent_C>>& PipesRef);
	void MoveAnchorGizmos();
	void AssingDynMatData();
	void AssignLightChannel();
	void CreateStretchingMeshesComponents();
	void CreateLibraryMeshes();
	void ShuffleSpecialMeshesSeed(TArray<class UStaticMesh*>& _Staticmeshes, TArray<class UStaticMesh*>* SuffledSM);
	void AssignPerLibMeshMaterialOverride();
	void ShuffleWithSeed();
	void GetStandardStaticmeshLibrary(TArray<class UStaticMesh*>* _PossibleMeshLibrary);
	void GetSpecialStaticmeshLibrary(TArray<class UStaticMesh*>* _PossibleMeshLibrary);
	void ReassignStaticMeshFromLibrary();
	void SetStaticMeshComponent();
	void GetScale(ELockAxis Axis, float CurrentModuleScale, bool UsingTiling, float* Scale);
	void GetOffset(ELockAxis Axis, float CurrentModuleScale, int32 MaxDistance, int32 NumLoop, bool IsTiling, float* Offset);
	void SetIsTiling(bool* IsTiling);
	void GetFinalTranslation(bool Tiling_0, float* X, float* Y, float* Z);
	void SetMaterialsToTriPlanarMapping();
	void FixTilingForAxisUsage();
	void CheckForPreviousLockAxis();
	void AddStaticMeshAtLocation(float Relative_Transform_Scale_X, float Relative_Transform_Scale_Z, float Relative_Transform_Scale_Y, float Relative_Transform_Location_X, float Relative_Transform_Location_Y, float Relative_Transform_Location_Z);
	void CreateComponents();
	void LimitGizmo();
	void UserConstructionScript();
	void OnEditorPostLoad();
	void OnPostActorsPasted(const TArray<class AActor*>& PastedActors);
	void PostDuplicated(class AActor* DuplicationParent);
	void ReceiveBeginPlay();
	void PostEditMove(bool bFinished);
	void PostAddedToLevel();
	void TickSelected();
	void PostEditChange(const class FName& PropertyName);
	void ExecuteUbergraph_ProMod_Parent(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ProMod_Parent_C">();
	}
	static class AProMod_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProMod_Parent_C>();
	}
};
static_assert(alignof(AProMod_Parent_C) == 0x000008, "Wrong alignment on AProMod_Parent_C");
static_assert(sizeof(AProMod_Parent_C) == 0x0004B0, "Wrong size on AProMod_Parent_C");
static_assert(offsetof(AProMod_Parent_C, UberGraphFrame) == 0x000248, "Member 'AProMod_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, End) == 0x000250, "Member 'AProMod_Parent_C::End' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, MaxZDistance) == 0x00025C, "Member 'AProMod_Parent_C::MaxZDistance' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, MaxYDistance) == 0x000260, "Member 'AProMod_Parent_C::MaxYDistance' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, MaxTilingDistance) == 0x000264, "Member 'AProMod_Parent_C::MaxTilingDistance' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Tiling) == 0x000268, "Member 'AProMod_Parent_C::Tiling' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, TileY) == 0x00026C, "Member 'AProMod_Parent_C::TileY' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, TileZ) == 0x000270, "Member 'AProMod_Parent_C::TileZ' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, LockAxis) == 0x000274, "Member 'AProMod_Parent_C::LockAxis' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, GridPrecision) == 0x000278, "Member 'AProMod_Parent_C::GridPrecision' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, InitialOffset) == 0x00027C, "Member 'AProMod_Parent_C::InitialOffset' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, InitialRotation) == 0x000288, "Member 'AProMod_Parent_C::InitialRotation' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, PreviousAnchor) == 0x000294, "Member 'AProMod_Parent_C::PreviousAnchor' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, PreviousActorPos) == 0x000298, "Member 'AProMod_Parent_C::PreviousActorPos' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, UseMaterialOverride) == 0x0002A4, "Member 'AProMod_Parent_C::UseMaterialOverride' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, UseMaterialOverrideOnDetails) == 0x0002A5, "Member 'AProMod_Parent_C::UseMaterialOverrideOnDetails' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Materials) == 0x0002A8, "Member 'AProMod_Parent_C::Materials' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, PreviousLockAxis) == 0x0002B8, "Member 'AProMod_Parent_C::PreviousLockAxis' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, MaterialsSplines) == 0x0002C0, "Member 'AProMod_Parent_C::MaterialsSplines' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, OverrideLightmapResolution) == 0x0002D0, "Member 'AProMod_Parent_C::OverrideLightmapResolution' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Pivot) == 0x0002D4, "Member 'AProMod_Parent_C::Pivot' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, CollisionProfileName) == 0x0002E0, "Member 'AProMod_Parent_C::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, MeshLibrary) == 0x0002E8, "Member 'AProMod_Parent_C::MeshLibrary' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, CurrentStaticMesh) == 0x0002F8, "Member 'AProMod_Parent_C::CurrentStaticMesh' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, UseFirstAssetRescaling) == 0x000300, "Member 'AProMod_Parent_C::UseFirstAssetRescaling' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, CanStepUpOn) == 0x000301, "Member 'AProMod_Parent_C::CanStepUpOn' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Mobility) == 0x000302, "Member 'AProMod_Parent_C::Mobility' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, RandomMeshSeed) == 0x000304, "Member 'AProMod_Parent_C::RandomMeshSeed' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, NumComponents) == 0x000308, "Member 'AProMod_Parent_C::NumComponents' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, StaticmeshComponents) == 0x000310, "Member 'AProMod_Parent_C::StaticmeshComponents' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, LibrarySpecialMeshes) == 0x000320, "Member 'AProMod_Parent_C::LibrarySpecialMeshes' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, TempMeshComponents) == 0x000330, "Member 'AProMod_Parent_C::TempMeshComponents' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, TempSplineComponents) == 0x000340, "Member 'AProMod_Parent_C::TempSplineComponents' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, MainPipeMaterials) == 0x000350, "Member 'AProMod_Parent_C::MainPipeMaterials' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, UseLibraryMaterialOverride) == 0x000360, "Member 'AProMod_Parent_C::UseLibraryMaterialOverride' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, MinStretchRatio) == 0x000364, "Member 'AProMod_Parent_C::MinStretchRatio' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, DataTable) == 0x000368, "Member 'AProMod_Parent_C::DataTable' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, MeshLibraryMode) == 0x000370, "Member 'AProMod_Parent_C::MeshLibraryMode' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, LightChannels) == 0x000371, "Member 'AProMod_Parent_C::LightChannels' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, DynamicData) == 0x000374, "Member 'AProMod_Parent_C::DynamicData' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, OwningActors) == 0x000388, "Member 'AProMod_Parent_C::OwningActors' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, ElbowMaxDistance) == 0x000398, "Member 'AProMod_Parent_C::ElbowMaxDistance' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, ElbowTangent) == 0x00039C, "Member 'AProMod_Parent_C::ElbowTangent' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Channels) == 0x0003A0, "Member 'AProMod_Parent_C::Channels' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, EndPipeThreshold) == 0x0003B0, "Member 'AProMod_Parent_C::EndPipeThreshold' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, StraightPipe) == 0x0003B8, "Member 'AProMod_Parent_C::StraightPipe' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, TConnector) == 0x0003C0, "Member 'AProMod_Parent_C::TConnector' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, XConnector) == 0x0003C8, "Member 'AProMod_Parent_C::XConnector' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, PipeConnector) == 0x0003D0, "Member 'AProMod_Parent_C::PipeConnector' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, ElbowPipe) == 0x0003D8, "Member 'AProMod_Parent_C::ElbowPipe' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, ProceduralDetails) == 0x0003E0, "Member 'AProMod_Parent_C::ProceduralDetails' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Detail) == 0x0003F0, "Member 'AProMod_Parent_C::Detail' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, ManualDetails) == 0x000400, "Member 'AProMod_Parent_C::ManualDetails' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, ConnectorList) == 0x000410, "Member 'AProMod_Parent_C::ConnectorList' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, ElbowMaterialOverride) == 0x000420, "Member 'AProMod_Parent_C::ElbowMaterialOverride' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, ProModManager) == 0x000428, "Member 'AProMod_Parent_C::ProModManager' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, TargetActor2) == 0x000450, "Member 'AProMod_Parent_C::TargetActor2' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, FixTwist) == 0x000478, "Member 'AProMod_Parent_C::FixTwist' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, bUseDetailRotation) == 0x000479, "Member 'AProMod_Parent_C::bUseDetailRotation' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, bUseEndSegmentDetailMesh) == 0x00047A, "Member 'AProMod_Parent_C::bUseEndSegmentDetailMesh' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Hack) == 0x00047B, "Member 'AProMod_Parent_C::Hack' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, bStaticShadow) == 0x00047C, "Member 'AProMod_Parent_C::bStaticShadow' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Start_Roll) == 0x000480, "Member 'AProMod_Parent_C::Start_Roll' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, End_Roll) == 0x000484, "Member 'AProMod_Parent_C::End_Roll' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Start_Scale) == 0x000488, "Member 'AProMod_Parent_C::Start_Scale' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, End_Scale) == 0x000490, "Member 'AProMod_Parent_C::End_Scale' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, SplineUpVector) == 0x000498, "Member 'AProMod_Parent_C::SplineUpVector' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, bCollisionEnabled) == 0x0004A4, "Member 'AProMod_Parent_C::bCollisionEnabled' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, bDetailsCollisionEnabled) == 0x0004A5, "Member 'AProMod_Parent_C::bDetailsCollisionEnabled' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Default_Lightmap_Type) == 0x0004A6, "Member 'AProMod_Parent_C::Default_Lightmap_Type' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, Debug) == 0x0004A7, "Member 'AProMod_Parent_C::Debug' has a wrong offset!");
static_assert(offsetof(AProMod_Parent_C, DiffuseBoost) == 0x0004A8, "Member 'AProMod_Parent_C::DiffuseBoost' has a wrong offset!");

}

