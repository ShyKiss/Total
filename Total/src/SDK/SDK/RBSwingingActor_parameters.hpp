#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBSwingingActor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function RBSwingingActor.RBSwingingActor_C.FixUp
// 0x0001 (0x0001 - 0x0000)
struct RBSwingingActor_C_FixUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBSwingingActor_C_FixUp) == 0x000001, "Wrong alignment on RBSwingingActor_C_FixUp");
static_assert(sizeof(RBSwingingActor_C_FixUp) == 0x000001, "Wrong size on RBSwingingActor_C_FixUp");
static_assert(offsetof(RBSwingingActor_C_FixUp, ReturnValue) == 0x000000, "Member 'RBSwingingActor_C_FixUp::ReturnValue' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.SetInitialTransforms
// 0x0114 (0x0114 - 0x0000)
struct RBSwingingActor_C_SetInitialTransforms final
{
public:
	bool                                          CallFunc_HasRotationMovement_bHasMovement;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasTranslationMovement_bHasMovement;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0004(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x008C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(RBSwingingActor_C_SetInitialTransforms) == 0x000004, "Wrong alignment on RBSwingingActor_C_SetInitialTransforms");
static_assert(sizeof(RBSwingingActor_C_SetInitialTransforms) == 0x000114, "Wrong size on RBSwingingActor_C_SetInitialTransforms");
static_assert(offsetof(RBSwingingActor_C_SetInitialTransforms, CallFunc_HasRotationMovement_bHasMovement) == 0x000000, "Member 'RBSwingingActor_C_SetInitialTransforms::CallFunc_HasRotationMovement_bHasMovement' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetInitialTransforms, CallFunc_HasTranslationMovement_bHasMovement) == 0x000001, "Member 'RBSwingingActor_C_SetInitialTransforms::CallFunc_HasTranslationMovement_bHasMovement' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetInitialTransforms, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000004, "Member 'RBSwingingActor_C_SetInitialTransforms::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetInitialTransforms, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x00008C, "Member 'RBSwingingActor_C_SetInitialTransforms::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.SetupLightingSettings
// 0x0038 (0x0038 - 0x0000)
struct RBSwingingActor_C_SetupLightingSettings final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBSwingingActor_C_SetupLightingSettings) == 0x000008, "Wrong alignment on RBSwingingActor_C_SetupLightingSettings");
static_assert(sizeof(RBSwingingActor_C_SetupLightingSettings) == 0x000038, "Wrong size on RBSwingingActor_C_SetupLightingSettings");
static_assert(offsetof(RBSwingingActor_C_SetupLightingSettings, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RBSwingingActor_C_SetupLightingSettings::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupLightingSettings, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'RBSwingingActor_C_SetupLightingSettings::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupLightingSettings, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RBSwingingActor_C_SetupLightingSettings::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupLightingSettings, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'RBSwingingActor_C_SetupLightingSettings::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupLightingSettings, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RBSwingingActor_C_SetupLightingSettings::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupLightingSettings, CallFunc_Array_Get_Item) == 0x000028, "Member 'RBSwingingActor_C_SetupLightingSettings::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupLightingSettings, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'RBSwingingActor_C_SetupLightingSettings::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.HasTranslationMovement
// 0x0054 (0x0054 - 0x0000)
struct RBSwingingActor_C_HasTranslationMovement final
{
public:
	bool                                          bHasMovement;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_3;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_4;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_5;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_6;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBSwingingActor_C_HasTranslationMovement) == 0x000004, "Wrong alignment on RBSwingingActor_C_HasTranslationMovement");
static_assert(sizeof(RBSwingingActor_C_HasTranslationMovement) == 0x000054, "Wrong size on RBSwingingActor_C_HasTranslationMovement");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, bHasMovement) == 0x000000, "Member 'RBSwingingActor_C_HasTranslationMovement::bHasMovement' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Abs_ReturnValue) == 0x000004, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_BreakVector_X) == 0x000008, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_BreakVector_Y) == 0x00000C, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_BreakVector_Z) == 0x000010, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Abs_ReturnValue_1) == 0x000018, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Abs_ReturnValue_2) == 0x00001C, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Abs_ReturnValue_3) == 0x000020, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_BreakVector_X_1) == 0x000028, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_BreakVector_Y_1) == 0x00002C, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_BreakVector_Z_1) == 0x000030, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000034, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Abs_ReturnValue_4) == 0x000038, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Abs_ReturnValue_5) == 0x00003C, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Abs_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Abs_ReturnValue_6) == 0x000040, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Abs_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000044, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000048, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x00004C, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000050, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasTranslationMovement, CallFunc_BooleanAND_ReturnValue) == 0x000051, "Member 'RBSwingingActor_C_HasTranslationMovement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.HasRotationMovement
// 0x0054 (0x0054 - 0x0000)
struct RBSwingingActor_C_HasRotationMovement final
{
public:
	bool                                          bHasMovement;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_3;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_4;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_5;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_6;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBSwingingActor_C_HasRotationMovement) == 0x000004, "Wrong alignment on RBSwingingActor_C_HasRotationMovement");
static_assert(sizeof(RBSwingingActor_C_HasRotationMovement) == 0x000054, "Wrong size on RBSwingingActor_C_HasRotationMovement");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, bHasMovement) == 0x000000, "Member 'RBSwingingActor_C_HasRotationMovement::bHasMovement' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Abs_ReturnValue) == 0x000004, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_BreakRotator_Roll) == 0x000008, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_BreakRotator_Pitch) == 0x00000C, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_BreakRotator_Yaw) == 0x000010, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Abs_ReturnValue_1) == 0x000018, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Abs_ReturnValue_2) == 0x00001C, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Abs_ReturnValue_3) == 0x000020, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_BreakRotator_Roll_1) == 0x000028, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_BreakRotator_Pitch_1) == 0x00002C, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_BreakRotator_Yaw_1) == 0x000030, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000034, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Abs_ReturnValue_4) == 0x000038, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Abs_ReturnValue_5) == 0x00003C, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Abs_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Abs_ReturnValue_6) == 0x000040, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Abs_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000044, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000048, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x00004C, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000050, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_HasRotationMovement, CallFunc_BooleanAND_ReturnValue) == 0x000051, "Member 'RBSwingingActor_C_HasRotationMovement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.SetupCollisions
// 0x0048 (0x0048 - 0x0000)
struct RBSwingingActor_C_SetupCollisions final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBSwingingActor_C_SetupCollisions) == 0x000008, "Wrong alignment on RBSwingingActor_C_SetupCollisions");
static_assert(sizeof(RBSwingingActor_C_SetupCollisions) == 0x000048, "Wrong size on RBSwingingActor_C_SetupCollisions");
static_assert(offsetof(RBSwingingActor_C_SetupCollisions, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RBSwingingActor_C_SetupCollisions::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupCollisions, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'RBSwingingActor_C_SetupCollisions::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupCollisions, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RBSwingingActor_C_SetupCollisions::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupCollisions, CallFunc_GetChildrenComponents_Children) == 0x000010, "Member 'RBSwingingActor_C_SetupCollisions::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupCollisions, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'RBSwingingActor_C_SetupCollisions::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupCollisions, CallFunc_Array_Get_Item) == 0x000028, "Member 'RBSwingingActor_C_SetupCollisions::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupCollisions, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'RBSwingingActor_C_SetupCollisions::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupCollisions, K2Node_DynamicCast_AsPrimitive_Component) == 0x000038, "Member 'RBSwingingActor_C_SetupCollisions::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_SetupCollisions, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RBSwingingActor_C_SetupCollisions::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.OnPostActorsPasted
// 0x0010 (0x0010 - 0x0000)
struct RBSwingingActor_C_OnPostActorsPasted final
{
public:
	TArray<class AActor*>                         PastedActors;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(RBSwingingActor_C_OnPostActorsPasted) == 0x000008, "Wrong alignment on RBSwingingActor_C_OnPostActorsPasted");
static_assert(sizeof(RBSwingingActor_C_OnPostActorsPasted) == 0x000010, "Wrong size on RBSwingingActor_C_OnPostActorsPasted");
static_assert(offsetof(RBSwingingActor_C_OnPostActorsPasted, PastedActors) == 0x000000, "Member 'RBSwingingActor_C_OnPostActorsPasted::PastedActors' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.PostDuplicated
// 0x0008 (0x0008 - 0x0000)
struct RBSwingingActor_C_PostDuplicated final
{
public:
	class AActor*                                 DuplicationParent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBSwingingActor_C_PostDuplicated) == 0x000008, "Wrong alignment on RBSwingingActor_C_PostDuplicated");
static_assert(sizeof(RBSwingingActor_C_PostDuplicated) == 0x000008, "Wrong size on RBSwingingActor_C_PostDuplicated");
static_assert(offsetof(RBSwingingActor_C_PostDuplicated, DuplicationParent) == 0x000000, "Member 'RBSwingingActor_C_PostDuplicated::DuplicationParent' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.PostEditMove
// 0x0001 (0x0001 - 0x0000)
struct RBSwingingActor_C_PostEditMove final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBSwingingActor_C_PostEditMove) == 0x000001, "Wrong alignment on RBSwingingActor_C_PostEditMove");
static_assert(sizeof(RBSwingingActor_C_PostEditMove) == 0x000001, "Wrong size on RBSwingingActor_C_PostEditMove");
static_assert(offsetof(RBSwingingActor_C_PostEditMove, bFinished) == 0x000000, "Member 'RBSwingingActor_C_PostEditMove::bFinished' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.PostEditChange
// 0x0008 (0x0008 - 0x0000)
struct RBSwingingActor_C_PostEditChange final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBSwingingActor_C_PostEditChange) == 0x000004, "Wrong alignment on RBSwingingActor_C_PostEditChange");
static_assert(sizeof(RBSwingingActor_C_PostEditChange) == 0x000008, "Wrong size on RBSwingingActor_C_PostEditChange");
static_assert(offsetof(RBSwingingActor_C_PostEditChange, PropertyName) == 0x000000, "Member 'RBSwingingActor_C_PostEditChange::PropertyName' has a wrong offset!");

// Function RBSwingingActor.RBSwingingActor_C.ExecuteUbergraph_RBSwingingActor
// 0x0158 (0x0158 - 0x0000)
struct RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_Event_pastedActors;                         // 0x0008(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 K2Node_Event_duplicationParent;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFinished;                            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x00C4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_HasRotationMovement_bHasMovement;         // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasTranslationMovement_bHasMovement;      // 0x014D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14E[0x2];                                      // 0x014E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_propertyName;                         // 0x0150(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor) == 0x000008, "Wrong alignment on RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor");
static_assert(sizeof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor) == 0x000158, "Wrong size on RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, EntryPoint) == 0x000000, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::EntryPoint' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, CallFunc_RandomFloatInRange_ReturnValue) == 0x000004, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, K2Node_Event_pastedActors) == 0x000008, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::K2Node_Event_pastedActors' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, K2Node_Event_duplicationParent) == 0x000018, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::K2Node_Event_duplicationParent' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, K2Node_Event_bFinished) == 0x000020, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::K2Node_Event_bFinished' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, CallFunc_IsDedicatedServer_ReturnValue) == 0x000021, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, CallFunc_RLerp_ReturnValue) == 0x000024, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000030, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, CallFunc_VLerp_ReturnValue) == 0x0000B8, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0000C4, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, CallFunc_HasRotationMovement_bHasMovement) == 0x00014C, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::CallFunc_HasRotationMovement_bHasMovement' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, CallFunc_HasTranslationMovement_bHasMovement) == 0x00014D, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::CallFunc_HasTranslationMovement_bHasMovement' has a wrong offset!");
static_assert(offsetof(RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor, K2Node_Event_propertyName) == 0x000150, "Member 'RBSwingingActor_C_ExecuteUbergraph_RBSwingingActor::K2Node_Event_propertyName' has a wrong offset!");

}

