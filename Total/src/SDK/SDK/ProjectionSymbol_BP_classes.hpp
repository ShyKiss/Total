#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProjectionSymbol_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ProjectionSymbolExclusionState_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ProjectionSymbol_BP.ProjectionSymbol_BP_C
// 0x0308 (0x0610 - 0x0308)
class AProjectionSymbol_BP_C final : public ARBCodeProjector
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URBObjectiveActorComponent*             RBObjectiveActor;                                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EndPlane;                                          // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBEditorClearanceCollisionBoxComponent* RBEditorClearanceCollisionBox;                     // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRandomizableHelperComponent*         RBRandomizableHelper;                              // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StartPlane;                                        // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Decal;                                             // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         EyeHeight;                                         // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FrontClipping;                                     // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndClipping;                                       // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Bias;                                              // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalAngle;                                       // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Texture;                                           // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugCamera;                                       // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomFarClippingPlane;                            // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DecalMaterial;                                     // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACaptureTextureDepth_C*                 Capture;                                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 TexturePath;                                       // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 TextureName;                                       // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         OrthoWidth;                                        // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShadowMatrix4;                                     // 0x03D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShadowMatrix3;                                     // 0x03E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShadowMatrix2;                                     // 0x03F4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ShadowMatrix1;                                     // 0x0404(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ProjectionTarget;                                  // 0x0414(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalScale;                                        // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecalRoll;                                         // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugFrontClipping;                                // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                TextureDepth;                                      // 0x0430(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class AActor>>          ExcludeList;                                       // 0x0458(0x0010)(Edit, BlueprintVisible)
	struct FClueData                              Clue;                                              // 0x0468(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, NoDestructor)
	TMap<class ARBDoor*, EProjectionSymbolExclusionState> CachedExcludeDoors;                                // 0x0470(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         MaxDecodingDistance;                               // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDecodingAngle;                                  // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               LoadedTextureDept;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UTexture*>            ClueToTextureMap;                                  // 0x04D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<EProjectionSymbolExclusionState>       ExcludeListConditionForDecoding;                   // 0x0520(0x0010)(Edit, BlueprintVisible)
	float                                         MaxVerticalDecodingAngle;                          // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorPosition;                                     // 0x0534(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FConfigurableInt                       SectionIndex;                                      // 0x0540(0x00C8)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         CaptureFov;                                        // 0x0608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	class URBPlayerInvestigationZoneComponent* GetAssociatedInvestigationComponent();
	struct FClueData GetClue();
	bool OnWorldPopulateFinishedTimeSliced();
	bool GetStateName(class FString* StateA, class FString* StateB);
	void HideAllExcludedActors();
	void GetFullExcludeList(TArray<TSoftObjectPtr<class AActor>>* FullExcludeList);
	void FindFov();
	bool FixUp();
	void Set_Gizmo();
	void ForceActive();
	void ClearDebugProjectFlags();
	void ResetEditorTexture();
	void PreviousClue();
	void NextClue();
	void UpdateClueTexutre();
	void SetMaterial(bool Force);
	void GetDepthTexture();
	void CaptureDepth();
	void UserConstructionScript();
	void OnLoaded_AB95D07B4D3F3F42212E9F9F4E4F3361(class UObject* Loaded);
	void PrepareState(bool bStateA, class AActor* RandomOwner);
	void SetShouldBeIgnoredForLots(bool bValue);
	void OnWorldPopulateFinished();
	void SetClue(const struct FClueData& ClueData);
	void LoadTextureDepth();
	void OnWorldFullyLoaded();
	void SetState(bool bStateA);
	void PostDuplicated(class AActor* DuplicationParent);
	void OnEditorPostLoad();
	void TestForceActive();
	void TestForceNextClue();
	void TestForceInactive();
	void ExecuteUbergraph_ProjectionSymbol_BP(int32 EntryPoint);

	bool IsRandomStateSet() const;
	bool IsStateA() const;
	bool ShouldBeIgnoredForLots() const;
	int32 GetObjectiveTypeIndex() const;
	struct FVector GetPerfectPlayerLocation(class ARBPlayer* Player) const;
	bool IsDoorFullyClosed(class ARBDoor* Door) const;
	bool IsDoorFullyOpen(class ARBDoor* Door) const;
	void DoorAllowDecoding(class ARBDoor* Door, EProjectionSymbolExclusionState Condition, bool* bDecodingAvailable) const;
	bool IsFullyDecodable() const;
	bool IsDecodableEnabled() const;
	struct FVector GetProjectionForward(const struct FVector& EyeLocation, const struct FVector& EyeForward) const;
	struct FVector GetProjectionOrigin(const struct FVector& EyeLocation, const struct FVector& EyeForward) const;
	int32 GetCode() const;
	EDecoderProximityType GetDecoderProximity(const class ARBPawn* Pawn) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ProjectionSymbol_BP_C">();
	}
	static class AProjectionSymbol_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProjectionSymbol_BP_C>();
	}
};
static_assert(alignof(AProjectionSymbol_BP_C) == 0x000008, "Wrong alignment on AProjectionSymbol_BP_C");
static_assert(sizeof(AProjectionSymbol_BP_C) == 0x000610, "Wrong size on AProjectionSymbol_BP_C");
static_assert(offsetof(AProjectionSymbol_BP_C, UberGraphFrame) == 0x000308, "Member 'AProjectionSymbol_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, RBObjectiveActor) == 0x000310, "Member 'AProjectionSymbol_BP_C::RBObjectiveActor' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, EndPlane) == 0x000318, "Member 'AProjectionSymbol_BP_C::EndPlane' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, RBEditorClearanceCollisionBox) == 0x000320, "Member 'AProjectionSymbol_BP_C::RBEditorClearanceCollisionBox' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, RBRandomizableHelper) == 0x000328, "Member 'AProjectionSymbol_BP_C::RBRandomizableHelper' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Root) == 0x000330, "Member 'AProjectionSymbol_BP_C::Root' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, StartPlane) == 0x000338, "Member 'AProjectionSymbol_BP_C::StartPlane' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Camera) == 0x000340, "Member 'AProjectionSymbol_BP_C::Camera' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Billboard) == 0x000348, "Member 'AProjectionSymbol_BP_C::Billboard' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Decal) == 0x000350, "Member 'AProjectionSymbol_BP_C::Decal' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, EyeHeight) == 0x000358, "Member 'AProjectionSymbol_BP_C::EyeHeight' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, FrontClipping) == 0x00035C, "Member 'AProjectionSymbol_BP_C::FrontClipping' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, EndClipping) == 0x000360, "Member 'AProjectionSymbol_BP_C::EndClipping' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Bias) == 0x000364, "Member 'AProjectionSymbol_BP_C::Bias' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, NormalAngle) == 0x000368, "Member 'AProjectionSymbol_BP_C::NormalAngle' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Distance) == 0x00036C, "Member 'AProjectionSymbol_BP_C::Distance' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Color) == 0x000370, "Member 'AProjectionSymbol_BP_C::Color' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Material) == 0x000380, "Member 'AProjectionSymbol_BP_C::Material' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Texture) == 0x000388, "Member 'AProjectionSymbol_BP_C::Texture' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, DebugCamera) == 0x000390, "Member 'AProjectionSymbol_BP_C::DebugCamera' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, CustomFarClippingPlane) == 0x000394, "Member 'AProjectionSymbol_BP_C::CustomFarClippingPlane' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Size) == 0x000398, "Member 'AProjectionSymbol_BP_C::Size' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, DecalMaterial) == 0x0003A0, "Member 'AProjectionSymbol_BP_C::DecalMaterial' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Capture) == 0x0003A8, "Member 'AProjectionSymbol_BP_C::Capture' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, TexturePath) == 0x0003B0, "Member 'AProjectionSymbol_BP_C::TexturePath' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, TextureName) == 0x0003C0, "Member 'AProjectionSymbol_BP_C::TextureName' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, OrthoWidth) == 0x0003D0, "Member 'AProjectionSymbol_BP_C::OrthoWidth' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, ShadowMatrix4) == 0x0003D4, "Member 'AProjectionSymbol_BP_C::ShadowMatrix4' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, ShadowMatrix3) == 0x0003E4, "Member 'AProjectionSymbol_BP_C::ShadowMatrix3' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, ShadowMatrix2) == 0x0003F4, "Member 'AProjectionSymbol_BP_C::ShadowMatrix2' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, ShadowMatrix1) == 0x000404, "Member 'AProjectionSymbol_BP_C::ShadowMatrix1' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, ProjectionTarget) == 0x000414, "Member 'AProjectionSymbol_BP_C::ProjectionTarget' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, DecalScale) == 0x000420, "Member 'AProjectionSymbol_BP_C::DecalScale' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, DecalRoll) == 0x000424, "Member 'AProjectionSymbol_BP_C::DecalRoll' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, DebugFrontClipping) == 0x000428, "Member 'AProjectionSymbol_BP_C::DebugFrontClipping' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, TextureDepth) == 0x000430, "Member 'AProjectionSymbol_BP_C::TextureDepth' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, ExcludeList) == 0x000458, "Member 'AProjectionSymbol_BP_C::ExcludeList' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, Clue) == 0x000468, "Member 'AProjectionSymbol_BP_C::Clue' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, CachedExcludeDoors) == 0x000470, "Member 'AProjectionSymbol_BP_C::CachedExcludeDoors' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, MaxDecodingDistance) == 0x0004C0, "Member 'AProjectionSymbol_BP_C::MaxDecodingDistance' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, MaxDecodingAngle) == 0x0004C4, "Member 'AProjectionSymbol_BP_C::MaxDecodingAngle' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, LoadedTextureDept) == 0x0004C8, "Member 'AProjectionSymbol_BP_C::LoadedTextureDept' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, ClueToTextureMap) == 0x0004D0, "Member 'AProjectionSymbol_BP_C::ClueToTextureMap' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, ExcludeListConditionForDecoding) == 0x000520, "Member 'AProjectionSymbol_BP_C::ExcludeListConditionForDecoding' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, MaxVerticalDecodingAngle) == 0x000530, "Member 'AProjectionSymbol_BP_C::MaxVerticalDecodingAngle' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, ActorPosition) == 0x000534, "Member 'AProjectionSymbol_BP_C::ActorPosition' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, SectionIndex) == 0x000540, "Member 'AProjectionSymbol_BP_C::SectionIndex' has a wrong offset!");
static_assert(offsetof(AProjectionSymbol_BP_C, CaptureFov) == 0x000608, "Member 'AProjectionSymbol_BP_C::CaptureFov' has a wrong offset!");

}

