#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ESOP_Barricade_AnimBP

#include "Basic.hpp"

#include "ESOPBarricadeState_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ESOP_Barricade_AnimBP.ESOP_Barricade_AnimBP_C
// 0x0AB0 (0x0D70 - 0x02C0)
class UESOP_Barricade_AnimBP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02C8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x02F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0320(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0348(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0370(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0398(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x03C0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x03E8(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0410(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x04F8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0528(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x05A8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x05D8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0658(0x0030)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0688(0x0050)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x06D8(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0708(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0788(0x0030)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x07B8(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0838(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0868(0x00B0)()
	struct FAnimNode_BlendSpaceEvaluator          AnimGraphNode_BlendSpaceEvaluator_2;               // 0x0918(0x00F0)()
	struct FAnimNode_BlendSpaceEvaluator          AnimGraphNode_BlendSpaceEvaluator_1;               // 0x0A08(0x00F0)()
	struct FAnimNode_BlendSpaceEvaluator          AnimGraphNode_BlendSpaceEvaluator;                 // 0x0AF8(0x00F0)()
	struct FAnimNode_BlendBoneByChannel           AnimGraphNode_BlendBoneByChannel_2;                // 0x0BE8(0x0068)()
	struct FAnimNode_BlendBoneByChannel           AnimGraphNode_BlendBoneByChannel_1;                // 0x0C50(0x0068)()
	struct FAnimNode_BlendBoneByChannel           AnimGraphNode_BlendBoneByChannel;                  // 0x0CB8(0x0068)()
	float                                         VerticalRatio;                                     // 0x0D20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalRatio;                                   // 0x0D24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Width;                                             // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightUp;                                          // 0x0D2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightDown;                                        // 0x0D30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredHorizontalRatio;                            // 0x0D34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DesiredVerticalRatio;                              // 0x0D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalRatioInterpSpeed;                        // 0x0D3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              PlayerOwner;                                       // 0x0D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPickup*                              Item;                                              // 0x0D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HoldExplicitTime;                                  // 0x0D50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESOPBarricadeState                            State;                                             // 0x0D54(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D55[0x3];                                      // 0x0D55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VerticalProgressStart;                             // 0x0D58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bExit;                                             // 0x0D5C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5D[0x3];                                      // 0x0D5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            VerticalRatioCurve;                                // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ESOP_Barricade_AnimBP(int32 EntryPoint);
	void BlueprintInitializeAnimation();
	void AnimNotify_Completed();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ESOP_Barricade_AnimBP_AnimGraphNode_TransitionResult_85AB10E4467D71B2C1BB0795E3C89380();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ESOP_Barricade_AnimBP_AnimGraphNode_TransitionResult_6A3AC6674E52FEBFDBD1DFAA95BC0D38();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ESOP_Barricade_AnimBP_AnimGraphNode_TransitionResult_BA8A3F07477D9CD0FCD8D3B1284F51FB();
	void SetSizes(float Width_0, float HeightUp_0, float HeightDown_0);
	void Initialize(class ARBDoorBlockerSkillItem* Item_0);
	void SetState(ESOPBarricadeState AnimSequence);
	void SetHoldExpliciteTime(float HoldExplicitTime_0);
	void TriggerExit();
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ESOP_Barricade_AnimBP_C">();
	}
	static class UESOP_Barricade_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UESOP_Barricade_AnimBP_C>();
	}
};
static_assert(alignof(UESOP_Barricade_AnimBP_C) == 0x000010, "Wrong alignment on UESOP_Barricade_AnimBP_C");
static_assert(sizeof(UESOP_Barricade_AnimBP_C) == 0x000D70, "Wrong size on UESOP_Barricade_AnimBP_C");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, UberGraphFrame) == 0x0002C0, "Member 'UESOP_Barricade_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_Root) == 0x0002C8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_TransitionResult_6) == 0x0002F8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_TransitionResult_5) == 0x000320, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_TransitionResult_4) == 0x000348, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_TransitionResult_3) == 0x000370, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_TransitionResult_2) == 0x000398, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_TransitionResult_1) == 0x0003C0, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_TransitionResult) == 0x0003E8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x000410, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_StateResult_5) == 0x0004F8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_SequencePlayer_3) == 0x000528, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_StateResult_4) == 0x0005A8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_SequencePlayer_2) == 0x0005D8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_StateResult_3) == 0x000658, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_SequenceEvaluator) == 0x000688, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_StateResult_2) == 0x0006D8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_SequencePlayer_1) == 0x000708, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_StateResult_1) == 0x000788, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_SequencePlayer) == 0x0007B8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_StateResult) == 0x000838, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_StateMachine) == 0x000868, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_BlendSpaceEvaluator_2) == 0x000918, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_BlendSpaceEvaluator_2' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_BlendSpaceEvaluator_1) == 0x000A08, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_BlendSpaceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_BlendSpaceEvaluator) == 0x000AF8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_BlendSpaceEvaluator' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_BlendBoneByChannel_2) == 0x000BE8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_BlendBoneByChannel_2' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_BlendBoneByChannel_1) == 0x000C50, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_BlendBoneByChannel_1' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, AnimGraphNode_BlendBoneByChannel) == 0x000CB8, "Member 'UESOP_Barricade_AnimBP_C::AnimGraphNode_BlendBoneByChannel' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, VerticalRatio) == 0x000D20, "Member 'UESOP_Barricade_AnimBP_C::VerticalRatio' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, HorizontalRatio) == 0x000D24, "Member 'UESOP_Barricade_AnimBP_C::HorizontalRatio' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, Width) == 0x000D28, "Member 'UESOP_Barricade_AnimBP_C::Width' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, HeightUp) == 0x000D2C, "Member 'UESOP_Barricade_AnimBP_C::HeightUp' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, HeightDown) == 0x000D30, "Member 'UESOP_Barricade_AnimBP_C::HeightDown' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, DesiredHorizontalRatio) == 0x000D34, "Member 'UESOP_Barricade_AnimBP_C::DesiredHorizontalRatio' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, DesiredVerticalRatio) == 0x000D38, "Member 'UESOP_Barricade_AnimBP_C::DesiredVerticalRatio' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, HorizontalRatioInterpSpeed) == 0x000D3C, "Member 'UESOP_Barricade_AnimBP_C::HorizontalRatioInterpSpeed' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, PlayerOwner) == 0x000D40, "Member 'UESOP_Barricade_AnimBP_C::PlayerOwner' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, Item) == 0x000D48, "Member 'UESOP_Barricade_AnimBP_C::Item' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, HoldExplicitTime) == 0x000D50, "Member 'UESOP_Barricade_AnimBP_C::HoldExplicitTime' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, State) == 0x000D54, "Member 'UESOP_Barricade_AnimBP_C::State' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, VerticalProgressStart) == 0x000D58, "Member 'UESOP_Barricade_AnimBP_C::VerticalProgressStart' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, bExit) == 0x000D5C, "Member 'UESOP_Barricade_AnimBP_C::bExit' has a wrong offset!");
static_assert(offsetof(UESOP_Barricade_AnimBP_C, VerticalRatioCurve) == 0x000D60, "Member 'UESOP_Barricade_AnimBP_C::VerticalRatioCurve' has a wrong offset!");

}

