#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChainFenceMinus01_BP

#include "Basic.hpp"

#include "ChainFenceMinus01_BP_classes.hpp"
#include "ChainFenceMinus01_BP_parameters.hpp"


namespace SDK
{

// Function ChainFence-01_BP.ChainFence-01_BP_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AChainFenceMinus01_BP_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainFence-01_BP_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChainFence-01_BP.ChainFence-01_BP_C.FindAlphaScale
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FModuleMeshData>          Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// float                                   AlphaScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AChainFenceMinus01_BP_C::FindAlphaScale(TArray<struct FModuleMeshData>& Array, float* AlphaScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainFence-01_BP_C", "FindAlphaScale");

	Params::ChainFenceMinus01_BP_C_FindAlphaScale Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (AlphaScale != nullptr)
		*AlphaScale = Parms.AlphaScale;
}


// Function ChainFence-01_BP.ChainFence-01_BP_C.MakePoleArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FModuleMeshData>          SourceDefault                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FModuleMeshData>          Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FModuleMeshDataMinus02>   Target                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AChainFenceMinus01_BP_C::MakePoleArray(TArray<struct FModuleMeshData>& SourceDefault, TArray<struct FModuleMeshData>& Source, const TArray<struct FModuleMeshDataMinus02>& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainFence-01_BP_C", "MakePoleArray");

	Params::ChainFenceMinus01_BP_C_MakePoleArray Parms{};

	Parms.SourceDefault = std::move(SourceDefault);
	Parms.Source = std::move(Source);
	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);

	SourceDefault = std::move(Parms.SourceDefault);
	Source = std::move(Parms.Source);
}


// Function ChainFence-01_BP.ChainFence-01_BP_C.SetAutomaticCollisionMeshExclusions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AChainFenceMinus01_BP_C::SetAutomaticCollisionMeshExclusions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainFence-01_BP_C", "SetAutomaticCollisionMeshExclusions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChainFence-01_BP.ChainFence-01_BP_C.GetStateName
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StateA                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           StateB                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AChainFenceMinus01_BP_C::GetStateName(class FString* StateA, class FString* StateB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainFence-01_BP_C", "GetStateName");

	Params::ChainFenceMinus01_BP_C_GetStateName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StateA != nullptr)
		*StateA = std::move(Parms.StateA);

	if (StateB != nullptr)
		*StateB = std::move(Parms.StateB);

	return Parms.ReturnValue;
}


// Function ChainFence-01_BP.ChainFence-01_BP_C.IsStateA
// (HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AChainFenceMinus01_BP_C::IsStateA() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainFence-01_BP_C", "IsStateA");

	Params::ChainFenceMinus01_BP_C_IsStateA Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

