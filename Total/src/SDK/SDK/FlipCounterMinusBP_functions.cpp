#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlipCounterMinusBP

#include "Basic.hpp"

#include "FlipCounterMinusBP_classes.hpp"
#include "FlipCounterMinusBP_parameters.hpp"


namespace SDK
{

// Function FlipCounter-BP.FlipCounter-BP_C.ExecuteUbergraph_FlipCounter-BP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFlipCounterMinusBP_C::ExecuteUbergraph_FlipCounterMinusBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "ExecuteUbergraph_FlipCounter-BP");

	Params::FlipCounterMinusBP_C_ExecuteUbergraph_FlipCounterMinusBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlipCounter-BP.FlipCounter-BP_C.OnHackStateChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class URBHackableComponent*             HackableComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFlipCounterMinusBP_C::OnHackStateChanged(class URBHackableComponent* HackableComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "OnHackStateChanged");

	Params::FlipCounterMinusBP_C_OnHackStateChanged Parms{};

	Parms.HackableComponent = HackableComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlipCounter-BP.FlipCounter-BP_C.BndEvt__FlipCounter-BP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class URBHackableComponent*             HackableComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFlipCounterMinusBP_C::BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature(class URBHackableComponent* HackableComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "BndEvt__FlipCounter-BP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature");

	Params::FlipCounterMinusBP_C_BndEvt__FlipCounterMinusBP_DeviceHackZone_K2Node_ComponentBoundEvent_0_OnCurrentHackStateChanged__DelegateSignature Parms{};

	Parms.HackableComponent = HackableComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlipCounter-BP.FlipCounter-BP_C.OnTriggerEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ARBTriggerable*                   Triggerable                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFlipCounterMinusBP_C::OnTriggerEvent(bool IsOn, class ARBTriggerable* Triggerable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "OnTriggerEvent");

	Params::FlipCounterMinusBP_C_OnTriggerEvent Parms{};

	Parms.IsOn = IsOn;
	Parms.Triggerable = Triggerable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlipCounter-BP.FlipCounter-BP_C.SetCounter
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFlipCounterMinusBP_C::SetCounter(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "SetCounter");

	Params::FlipCounterMinusBP_C_SetCounter Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlipCounter-BP.FlipCounter-BP_C.Event_OnResetStage
// (Event, Public, BlueprintEvent)

void AFlipCounterMinusBP_C::Event_OnResetStage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "Event_OnResetStage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AFlipCounterMinusBP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.SetVariatorEnabled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AFlipCounterMinusBP_C::SetVariatorEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "SetVariatorEnabled");

	Params::FlipCounterMinusBP_C_SetVariatorEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlipCounter-BP.FlipCounter-BP_C.ResetCount
// (Public, BlueprintCallable, BlueprintEvent)

void AFlipCounterMinusBP_C::ResetCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "ResetCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.OnRep_initialCountNumber
// (BlueprintCallable, BlueprintEvent)

void AFlipCounterMinusBP_C::OnRep_initialCountNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "OnRep_initialCountNumber");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.OnRep_currentCountNumber
// (BlueprintCallable, BlueprintEvent)

void AFlipCounterMinusBP_C::OnRep_currentCountNumber()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "OnRep_currentCountNumber");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.Increment
// (Public, BlueprintCallable, BlueprintEvent)

void AFlipCounterMinusBP_C::Increment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "Increment");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.Decrement
// (Public, BlueprintCallable, BlueprintEvent)

void AFlipCounterMinusBP_C::Decrement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "Decrement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.RefreshGateHackZoneSizes
// (Public, BlueprintCallable, BlueprintEvent)

void AFlipCounterMinusBP_C::RefreshGateHackZoneSizes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "RefreshGateHackZoneSizes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.GetLinkedTriggerable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ARBTriggerable*                   Triggerable                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFlipCounterMinusBP_C::GetLinkedTriggerable(class ARBTriggerable** Triggerable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "GetLinkedTriggerable");

	Params::FlipCounterMinusBP_C_GetLinkedTriggerable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Triggerable != nullptr)
		*Triggerable = Parms.Triggerable;
}


// Function FlipCounter-BP.FlipCounter-BP_C.SetNumber
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewNumber                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFlipCounterMinusBP_C::SetNumber(int32 NewNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "SetNumber");

	Params::FlipCounterMinusBP_C_SetNumber Parms{};

	Parms.NewNumber = NewNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlipCounter-BP.FlipCounter-BP_C.ResetNumber
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewNumber                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AFlipCounterMinusBP_C::ResetNumber(int32 NewNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "ResetNumber");

	Params::FlipCounterMinusBP_C_ResetNumber Parms{};

	Parms.NewNumber = NewNumber;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlipCounter-BP.FlipCounter-BP_C.OnRep_bDisabled
// (BlueprintCallable, BlueprintEvent)

void AFlipCounterMinusBP_C::OnRep_bDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "OnRep_bDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.UpdateVisual
// (Public, BlueprintCallable, BlueprintEvent)

void AFlipCounterMinusBP_C::UpdateVisual()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "UpdateVisual");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.SetDisabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bDisabled_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AFlipCounterMinusBP_C::SetDisabled(bool bDisabled_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "SetDisabled");

	Params::FlipCounterMinusBP_C_SetDisabled Parms{};

	Parms.bDisabled_0 = bDisabled_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function FlipCounter-BP.FlipCounter-BP_C.RefreshBrokenVFX
// (Public, BlueprintCallable, BlueprintEvent)

void AFlipCounterMinusBP_C::RefreshBrokenVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "RefreshBrokenVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FlipCounter-BP.FlipCounter-BP_C.IsConsideredBeingActivelyHacked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Out                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AFlipCounterMinusBP_C::IsConsideredBeingActivelyHacked(bool* Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "IsConsideredBeingActivelyHacked");

	Params::FlipCounterMinusBP_C_IsConsideredBeingActivelyHacked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out != nullptr)
		*Out = Parms.Out;
}


// Function FlipCounter-BP.FlipCounter-BP_C.GetCounter
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 AFlipCounterMinusBP_C::GetCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "GetCounter");

	Params::FlipCounterMinusBP_C_GetCounter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function FlipCounter-BP.FlipCounter-BP_C.GetVariatorEnabled
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool AFlipCounterMinusBP_C::GetVariatorEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipCounter-BP_C", "GetVariatorEnabled");

	Params::FlipCounterMinusBP_C_GetVariatorEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

