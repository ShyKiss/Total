#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MannequinBP_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MannequinBP_Base.MannequinBP_Base_C
// 0x0110 (0x0340 - 0x0230)
class AMannequinBP_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Accessory_SM_RightHand;                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Accessory_SM_LeftHand;                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      RBSound;                                           // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Accessory6_SkelMesh;                               // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Accessory5_SkelMesh;                               // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Accessory4_SkelMesh;                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Neck;                                              // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Accessory3_SkelMesh;                               // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Accessory2_SkelMesh;                               // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Accessory1_SkelMesh;                               // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Head;                                              // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hand_R;                                            // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 UpperBody;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Legs;                                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Arm_L;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Arm_R;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hand_L;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Accessory2_StaticMesh;                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Accessory1_StaticMesh;                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mesh;                                              // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      NavmeshCapsule;                                    // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMannequinSetupAsset_C*                 Mannequin_Definition;                              // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAllowPrecomputedVisibility;                       // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         SkelMeshAccessories;                               // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class USkeletalMeshComponent*>         UsedParts;                                         // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           StaticMeshAccessories;                             // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class USkeletalMeshComponent*>         AllSkeletalMeshes;                                 // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          bReceivesDecals;                                   // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PlayLoopingIdleSound;                              // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLightingChannels                      LightingChannels;                                  // 0x033A(0x0001)(Edit, BlueprintVisible, NoDestructor)

public:
	bool BP_MapCheck(EMapCheckType CheckType, class FString* OutErrorMsg);
	void GameStartInit();
	void SetCommonMeshData();
	void SetAnimation(class UAnimationAsset* Animation_Data_Anim_To_Play);
	void SetMasterPose();
	void SetPose(class UAnimationAsset* Animation_Data_Anim_To_Play);
	void DressStaticMeshPart(int32 Index_0, class UStaticMesh* NewMesh, class FName SocketName, const TMap<class FName, class UMaterialInstance*>& TargetMap);
	void Init();
	void RemoveEmptyComponents();
	void DressSkelMeshPart(class USkeletalMesh* SkelMesh, const TMap<class FName, class UMaterialInstance*>& Materials, class USkeletalMeshComponent* SkelMeshPart);
	void DressMannequin();
	void UserConstructionScript();
	void BP_PrepareMapCheck();
	void ReceiveBeginPlay();
	void LoopingSFXManualStart();
	void LoopingSFXManualStop();
	void ExecuteUbergraph_MannequinBP_Base(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MannequinBP_Base_C">();
	}
	static class AMannequinBP_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMannequinBP_Base_C>();
	}
};
static_assert(alignof(AMannequinBP_Base_C) == 0x000008, "Wrong alignment on AMannequinBP_Base_C");
static_assert(sizeof(AMannequinBP_Base_C) == 0x000340, "Wrong size on AMannequinBP_Base_C");
static_assert(offsetof(AMannequinBP_Base_C, UberGraphFrame) == 0x000230, "Member 'AMannequinBP_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory_SM_RightHand) == 0x000238, "Member 'AMannequinBP_Base_C::Accessory_SM_RightHand' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory_SM_LeftHand) == 0x000240, "Member 'AMannequinBP_Base_C::Accessory_SM_LeftHand' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, RBSound) == 0x000248, "Member 'AMannequinBP_Base_C::RBSound' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory6_SkelMesh) == 0x000250, "Member 'AMannequinBP_Base_C::Accessory6_SkelMesh' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory5_SkelMesh) == 0x000258, "Member 'AMannequinBP_Base_C::Accessory5_SkelMesh' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory4_SkelMesh) == 0x000260, "Member 'AMannequinBP_Base_C::Accessory4_SkelMesh' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Neck) == 0x000268, "Member 'AMannequinBP_Base_C::Neck' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory3_SkelMesh) == 0x000270, "Member 'AMannequinBP_Base_C::Accessory3_SkelMesh' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory2_SkelMesh) == 0x000278, "Member 'AMannequinBP_Base_C::Accessory2_SkelMesh' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory1_SkelMesh) == 0x000280, "Member 'AMannequinBP_Base_C::Accessory1_SkelMesh' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Head) == 0x000288, "Member 'AMannequinBP_Base_C::Head' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Hand_R) == 0x000290, "Member 'AMannequinBP_Base_C::Hand_R' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, UpperBody) == 0x000298, "Member 'AMannequinBP_Base_C::UpperBody' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Legs) == 0x0002A0, "Member 'AMannequinBP_Base_C::Legs' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Arm_L) == 0x0002A8, "Member 'AMannequinBP_Base_C::Arm_L' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Arm_R) == 0x0002B0, "Member 'AMannequinBP_Base_C::Arm_R' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Hand_L) == 0x0002B8, "Member 'AMannequinBP_Base_C::Hand_L' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory2_StaticMesh) == 0x0002C0, "Member 'AMannequinBP_Base_C::Accessory2_StaticMesh' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Accessory1_StaticMesh) == 0x0002C8, "Member 'AMannequinBP_Base_C::Accessory1_StaticMesh' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Mesh) == 0x0002D0, "Member 'AMannequinBP_Base_C::Mesh' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, NavmeshCapsule) == 0x0002D8, "Member 'AMannequinBP_Base_C::NavmeshCapsule' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, DefaultSceneRoot) == 0x0002E0, "Member 'AMannequinBP_Base_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, Mannequin_Definition) == 0x0002E8, "Member 'AMannequinBP_Base_C::Mannequin_Definition' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, bAllowPrecomputedVisibility) == 0x0002F0, "Member 'AMannequinBP_Base_C::bAllowPrecomputedVisibility' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, SkelMeshAccessories) == 0x0002F8, "Member 'AMannequinBP_Base_C::SkelMeshAccessories' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, UsedParts) == 0x000308, "Member 'AMannequinBP_Base_C::UsedParts' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, StaticMeshAccessories) == 0x000318, "Member 'AMannequinBP_Base_C::StaticMeshAccessories' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, AllSkeletalMeshes) == 0x000328, "Member 'AMannequinBP_Base_C::AllSkeletalMeshes' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, bReceivesDecals) == 0x000338, "Member 'AMannequinBP_Base_C::bReceivesDecals' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, PlayLoopingIdleSound) == 0x000339, "Member 'AMannequinBP_Base_C::PlayLoopingIdleSound' has a wrong offset!");
static_assert(offsetof(AMannequinBP_Base_C, LightingChannels) == 0x00033A, "Member 'AMannequinBP_Base_C::LightingChannels' has a wrong offset!");

}

