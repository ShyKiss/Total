#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Clue_NarrativeScreen_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "NarrativeScreenMinus01_BP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Clue_NarrativeScreen_BP.Clue_NarrativeScreen_BP_C
// 0x0030 (0x0440 - 0x0410)
class AClue_NarrativeScreen_BP_C : public ANarrativeScreenMinus01_BP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Clue_NarrativeScreen_BP_C;          // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URBRandomizableHelperComponent*         RBRandomizableHelper;                              // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPlayerInvestigationZoneComponent*    RBPlayerInvestigationZone;                         // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FText                                   PingText;                                          // 0x0428(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	bool GetStateName(class FString* StateA, class FString* StateB);
	class URBPlayerInvestigationZoneComponent* GetAssociatedInvestigationComponent();
	struct FClueData GetClue();
	void PrepareState(bool bStateA, class AActor* RandomOwner);
	void SetClue(const struct FClueData& ClueData);
	void SetShouldBeIgnoredForLots(bool bValue);
	void SetState(bool bStateA);
	void ExecuteUbergraph_Clue_NarrativeScreen_BP(int32 EntryPoint);

	bool ShouldPingFollowActor(bool* OutShouldFollow) const;
	bool GetPingEnabled(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, bool* OutIsEnabled) const;
	bool GetPingItemName(class FText* OutName) const;
	bool GetPlayerPingData(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FPlayerPingData* OutData) const;
	bool GetPlayerPingWorldLocation(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FVector* OutLocation) const;
	bool IsRandomStateSet() const;
	bool IsStateA() const;
	bool ShouldBeIgnoredForLots() const;
	void GetCluePure(struct FClueData* Clue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Clue_NarrativeScreen_BP_C">();
	}
	static class AClue_NarrativeScreen_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AClue_NarrativeScreen_BP_C>();
	}
};
static_assert(alignof(AClue_NarrativeScreen_BP_C) == 0x000008, "Wrong alignment on AClue_NarrativeScreen_BP_C");
static_assert(sizeof(AClue_NarrativeScreen_BP_C) == 0x000440, "Wrong size on AClue_NarrativeScreen_BP_C");
static_assert(offsetof(AClue_NarrativeScreen_BP_C, UberGraphFrame_Clue_NarrativeScreen_BP_C) == 0x000410, "Member 'AClue_NarrativeScreen_BP_C::UberGraphFrame_Clue_NarrativeScreen_BP_C' has a wrong offset!");
static_assert(offsetof(AClue_NarrativeScreen_BP_C, RBRandomizableHelper) == 0x000418, "Member 'AClue_NarrativeScreen_BP_C::RBRandomizableHelper' has a wrong offset!");
static_assert(offsetof(AClue_NarrativeScreen_BP_C, RBPlayerInvestigationZone) == 0x000420, "Member 'AClue_NarrativeScreen_BP_C::RBPlayerInvestigationZone' has a wrong offset!");
static_assert(offsetof(AClue_NarrativeScreen_BP_C, PingText) == 0x000428, "Member 'AClue_NarrativeScreen_BP_C::PingText' has a wrong offset!");

}

