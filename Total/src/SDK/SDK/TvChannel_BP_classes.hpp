#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TvChannel_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "TextBox_structs.hpp"
#include "TextAnim_Struc_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass tvChannel_BP.tvChannel_BP_C
// 0x01F8 (0x04C0 - 0x02C8)
#pragma pack(push, 0x1)
class alignas(0x10) ATvChannel_BP_C : public ARBNarrativeScreenChannel
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URBSoundComponent*                      MasterSound;                                       // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TVScreenTest;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AnimTime;                                          // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentText;                                       // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ScreenMaterial;                                    // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               DefaultImage;                                      // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               StandByImage;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   StandByText;                                       // 0x0310(0x0018)(Edit, BlueprintVisible)
	float                                         StandByTextColor;                                  // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StandByFontScale;                                  // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RenderTextureSize;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ScaleFactor;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ImageUVSize;                                       // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPixelFormat                                  Pixel_Format;                                      // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTextBox                               TextBox;                                           // 0x0350(0x0090)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UCanvasRenderTarget2D*                  RenterTexture;                                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMovie;                                           // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x3];                                      // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastRow;                                           // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBinkMediaPlayer*                       BinkMediaPlayerMinus01;                            // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               TvMovieTexture;                                    // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCreatedTexture;                                 // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              BaseRenderTextureSize;                             // 0x0404(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenRefreshLuminosity;                           // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenChromaticAberation;                          // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenNoiseDeform;                                 // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenDeform;                                      // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenInterlace;                                   // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ScreenMaterialDynamic;                             // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTextAnim_Struc>                Countdown;                                         // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAkAudioEvent*                          IdleSoundStart;                                    // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          IdleSoundStop;                                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoopingIdleSoundPlaying;                         // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseEastermanFlash;                                 // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsManuallyMuted;                                   // 0x044A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugShowTvScreen;                                 // 0x044B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         LastIndex;                                         // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingMovie;                                    // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTextAnim_Struc>                Target_Array;                                      // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FTextAnim_Struc>                AnimationArray;                                    // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMediaSource*                           BinkEasterman;                                     // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBinkMediaPlayer*                       BinkMediaPlayerEasterman;                          // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               TextureEasterman;                                  // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               Border_RLTB;                                       // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTextAnim_Struc>                Text_Anim_Array;                                   // 0x04A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               StreamingMaterial;                                 // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void FormatText(const class FText& Text, class FText* OutText);
	void StreamingTextures();
	void PostSoundToComponent(class UAkAudioEvent* Sound, bool bIsVO, class URBSoundComponent* SoundComponent);
	void UpdateMaterial(float TextIntensity, class UTexture* Texture, bool Noise, bool Rorschard, bool MovieFlash, const struct FLinearColor& TextColor);
	void UpdateTextFunc(const class FText& Text, float Scale);
	void SetSoundVolume(bool ShouldBeHeard, class AActor* Actor__self_);
	void GetElapsedAnimTime(float* Time);
	void Set_Material_Dynamic_Parameter(float Height, float ChromaticAberation, float NoiseDeform, float RefreshJumpLuminosity, float Interlace, class UTexture* TVmovie);
	void PlaySoundFromTV(class UAkAudioEvent* Sound, bool PlayOnNarrator, bool PlayAsVO);
	void PlayRandomAnim(class UDataTable* Data_Table, bool LoopSingleAnimation, bool OnlySingleRow);
	void ShouldLoopAnim(bool* Value);
	void ValidateTexture();
	void GetRandomDataTableRow(class UDataTable* Data_Table, class FName* RowName);
	void Create_Dynamic_Texture();
	void Set_Test_Screen_Mat(class UMaterialInterface* Material);
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void StartMovie(const TArray<struct FTextAnim_Struc>& TextAnim, class UMediaSource* Movie, class UAkAudioEvent* MovieSound);
	void StartTextAnimation(const TArray<struct FTextAnim_Struc>& TargetArray);
	void EndMovie();
	void PlayCurrentAnim();
	void CreateTextTexture();
	void DrawRenderTarget();
	void Event_OnCurrentlyPlayingDataChanged();
	void OnAnimationFinished();
	void PlayCountdown(int32 Countdown_0);
	void StopMovie();
	void LoopAnim();
	void StopAnim();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnLoop();
	void OnTextLanguageUpdated();
	void UpdateMaterialParameter(float TextColor, class UTexture* Texture, bool Noise, bool Rorschard, bool MovieFlash);
	void UpdateText(const class FText& Text, float __0__Font_Scale);
	void ExecuteUbergraph_tvChannel_BP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"tvChannel_BP_C">();
	}
	static class ATvChannel_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATvChannel_BP_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ATvChannel_BP_C) == 0x000010, "Wrong alignment on ATvChannel_BP_C");
static_assert(sizeof(ATvChannel_BP_C) == 0x0004C0, "Wrong size on ATvChannel_BP_C");
static_assert(offsetof(ATvChannel_BP_C, UberGraphFrame) == 0x0002C8, "Member 'ATvChannel_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, MasterSound) == 0x0002D0, "Member 'ATvChannel_BP_C::MasterSound' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, TVScreenTest) == 0x0002D8, "Member 'ATvChannel_BP_C::TVScreenTest' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, Billboard) == 0x0002E0, "Member 'ATvChannel_BP_C::Billboard' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, Scene) == 0x0002E8, "Member 'ATvChannel_BP_C::Scene' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, AnimTime) == 0x0002F0, "Member 'ATvChannel_BP_C::AnimTime' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, CurrentText) == 0x0002F4, "Member 'ATvChannel_BP_C::CurrentText' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, ScreenMaterial) == 0x0002F8, "Member 'ATvChannel_BP_C::ScreenMaterial' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, DefaultImage) == 0x000300, "Member 'ATvChannel_BP_C::DefaultImage' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, StandByImage) == 0x000308, "Member 'ATvChannel_BP_C::StandByImage' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, StandByText) == 0x000310, "Member 'ATvChannel_BP_C::StandByText' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, StandByTextColor) == 0x000328, "Member 'ATvChannel_BP_C::StandByTextColor' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, StandByFontScale) == 0x00032C, "Member 'ATvChannel_BP_C::StandByFontScale' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, RenderTextureSize) == 0x000330, "Member 'ATvChannel_BP_C::RenderTextureSize' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, ScaleFactor) == 0x000338, "Member 'ATvChannel_BP_C::ScaleFactor' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, ImageUVSize) == 0x000340, "Member 'ATvChannel_BP_C::ImageUVSize' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, Pixel_Format) == 0x000348, "Member 'ATvChannel_BP_C::Pixel_Format' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, TextBox) == 0x000350, "Member 'ATvChannel_BP_C::TextBox' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, RenterTexture) == 0x0003E0, "Member 'ATvChannel_BP_C::RenterTexture' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, IsMovie) == 0x0003E8, "Member 'ATvChannel_BP_C::IsMovie' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, LastRow) == 0x0003EC, "Member 'ATvChannel_BP_C::LastRow' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, BinkMediaPlayerMinus01) == 0x0003F0, "Member 'ATvChannel_BP_C::BinkMediaPlayerMinus01' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, TvMovieTexture) == 0x0003F8, "Member 'ATvChannel_BP_C::TvMovieTexture' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, HasCreatedTexture) == 0x000400, "Member 'ATvChannel_BP_C::HasCreatedTexture' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, BaseRenderTextureSize) == 0x000404, "Member 'ATvChannel_BP_C::BaseRenderTextureSize' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, ScreenRefreshLuminosity) == 0x00040C, "Member 'ATvChannel_BP_C::ScreenRefreshLuminosity' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, ScreenChromaticAberation) == 0x000410, "Member 'ATvChannel_BP_C::ScreenChromaticAberation' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, ScreenNoiseDeform) == 0x000414, "Member 'ATvChannel_BP_C::ScreenNoiseDeform' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, ScreenDeform) == 0x000418, "Member 'ATvChannel_BP_C::ScreenDeform' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, ScreenInterlace) == 0x00041C, "Member 'ATvChannel_BP_C::ScreenInterlace' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, ScreenMaterialDynamic) == 0x000420, "Member 'ATvChannel_BP_C::ScreenMaterialDynamic' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, Countdown) == 0x000428, "Member 'ATvChannel_BP_C::Countdown' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, IdleSoundStart) == 0x000438, "Member 'ATvChannel_BP_C::IdleSoundStart' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, IdleSoundStop) == 0x000440, "Member 'ATvChannel_BP_C::IdleSoundStop' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, IsLoopingIdleSoundPlaying) == 0x000448, "Member 'ATvChannel_BP_C::IsLoopingIdleSoundPlaying' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, UseEastermanFlash) == 0x000449, "Member 'ATvChannel_BP_C::UseEastermanFlash' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, IsManuallyMuted) == 0x00044A, "Member 'ATvChannel_BP_C::IsManuallyMuted' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, DebugShowTvScreen) == 0x00044B, "Member 'ATvChannel_BP_C::DebugShowTvScreen' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, LastIndex) == 0x00044C, "Member 'ATvChannel_BP_C::LastIndex' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, IsPlayingMovie) == 0x000450, "Member 'ATvChannel_BP_C::IsPlayingMovie' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, Target_Array) == 0x000458, "Member 'ATvChannel_BP_C::Target_Array' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, AnimationArray) == 0x000468, "Member 'ATvChannel_BP_C::AnimationArray' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, BinkEasterman) == 0x000478, "Member 'ATvChannel_BP_C::BinkEasterman' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, BinkMediaPlayerEasterman) == 0x000480, "Member 'ATvChannel_BP_C::BinkMediaPlayerEasterman' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, TextureEasterman) == 0x000488, "Member 'ATvChannel_BP_C::TextureEasterman' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, Border_RLTB) == 0x000490, "Member 'ATvChannel_BP_C::Border_RLTB' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, Text_Anim_Array) == 0x0004A0, "Member 'ATvChannel_BP_C::Text_Anim_Array' has a wrong offset!");
static_assert(offsetof(ATvChannel_BP_C, StreamingMaterial) == 0x0004B0, "Member 'ATvChannel_BP_C::StreamingMaterial' has a wrong offset!");

}

