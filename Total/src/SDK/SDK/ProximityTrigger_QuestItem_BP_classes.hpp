#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProximityTrigger_QuestItem_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ProximityTrigger_QuestItem_BP.ProximityTrigger_QuestItem_BP_C
// 0x02D0 (0x0FA0 - 0x0CD0)
class AProximityTrigger_QuestItem_BP_C final : public ARBProximityDetectorItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0CD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   FogLight;                                          // 0x0CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPingComponent*                       RBPing;                                            // 0x0CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Ngr_TriggerActivated;                              // 0x0CE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScapegoatDevice_NeedleMinus01;                     // 0x0CF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScapegoatDevice_DetonatorMinus01;                  // 0x0CF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScapegoatDevice_TriggerMinus01;                    // 0x0D00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      RBSound;                                           // 0x0D08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScapegoatDevice_BigLightMinus01;                   // 0x0D10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBObjectiveActorComponent*             RBObjectiveActor;                                  // 0x0D18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   InWorldMesh;                                       // 0x0D20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRandomizableHelperComponent*         RBRandomizableHelper;                              // 0x0D28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ButtonPressed_ButtonAngle_CAF46FA346C8B00F704ECD8FA213CCF5; // 0x0D30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ButtonPressed__Direction_CAF46FA346C8B00F704ECD8FA213CCF5; // 0x0D34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D35[0x3];                                      // 0x0D35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ButtonPressed;                                     // 0x0D38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FConfigurableFloat                     AlarmIntervalMin;                                  // 0x0D40(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FConfigurableFloat                     AlarmIntervalMax;                                  // 0x0E08(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         TriggerCount;                                      // 0x0ED0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delay;                                             // 0x0ED4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShakeThreshold;                                    // 0x0ED8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ActiveLightColor;                                  // 0x0EDC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InactiveLightColor;                                // 0x0EEC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EFC[0x4];                                      // 0x0EFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkEventProgressLoopStart;                          // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventProgressLoopStop;                           // 0x0F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayingLoopingProgressSound;                      // 0x0F10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F11[0x3];                                      // 0x0F11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RTPCProgressLoopName;                              // 0x0F14(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1C[0x4];                                      // 0x0F1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkEventButtonPressed;                              // 0x0F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventButtonRelease;                              // 0x0F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventLEDTurnOff;                                 // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventLEDTurnOn;                                  // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasPlayedLEDTurnOnSound;                          // 0x0F40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F41[0x7];                                      // 0x0F41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkEventAlarmDeviceOnSuccessStart;                  // 0x0F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventAlarmDeviceOnSuccessStop;                   // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventCookSuccess;                                // 0x0F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventProximityLoopStart;                         // 0x0F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventProximityLoopStop;                          // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayingLoopingProximitySound;                   // 0x0F70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F71[0x7];                                      // 0x0F71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkEventProgressLoopStart02;                        // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventProgressLoopStop02;                         // 0x0F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventProgressLoopStart03;                        // 0x0F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEventProgressLoopStop03;                         // 0x0F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverheating;                                      // 0x0F98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F99[0x3];                                      // 0x0F99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverheatDuration;                                  // 0x0F9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool GetStateName(class FString* StateA, class FString* StateB);
	void RefreshDeviceVisualState(bool bForce);
	void GetLightColor(struct FLinearColor* MaterialColor, struct FLinearColor* LightColor, float* LightIntensity);
	void PlayLoopingProximitySound(EProximityDetectorDeviceState Index_0);
	void PlayLEDSound();
	void UpdateProgressLoopRTPC();
	void UpdateArrowLocation();
	void RefreshScreenState(EProximityDetectorDeviceState OldValue, EProximityDetectorDeviceState NewValue);
	void RefreshLightState(EProximityDetectorDeviceState OldValue, EProximityDetectorDeviceState NewValue);
	void RefreshAudioState(EProximityDetectorDeviceState OldValue, EProximityDetectorDeviceState NewValue);
	void UserConstructionScript();
	void ButtonPressed__FinishedFunc();
	void ButtonPressed__UpdateFunc();
	void PrepareState(bool bStateA, class AActor* RandomOwner);
	void SetShouldBeIgnoredForLots(bool bValue);
	void SetState(bool bStateA);
	void BP_OnHoldStateChanged();
	void BP_OnDeviceStateChanged();
	void ReceiveTick(float DeltaSeconds);
	void BP_OnProgressChanged();
	void BP_OnCompletedLevel();
	void ExecuteUbergraph_ProximityTrigger_QuestItem_BP(int32 EntryPoint);

	bool IsRandomStateSet() const;
	bool IsStateA() const;
	bool ShouldBeIgnoredForLots() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ProximityTrigger_QuestItem_BP_C">();
	}
	static class AProximityTrigger_QuestItem_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProximityTrigger_QuestItem_BP_C>();
	}
};
static_assert(alignof(AProximityTrigger_QuestItem_BP_C) == 0x000010, "Wrong alignment on AProximityTrigger_QuestItem_BP_C");
static_assert(sizeof(AProximityTrigger_QuestItem_BP_C) == 0x000FA0, "Wrong size on AProximityTrigger_QuestItem_BP_C");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, UberGraphFrame) == 0x000CD0, "Member 'AProximityTrigger_QuestItem_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, FogLight) == 0x000CD8, "Member 'AProximityTrigger_QuestItem_BP_C::FogLight' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, RBPing) == 0x000CE0, "Member 'AProximityTrigger_QuestItem_BP_C::RBPing' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, Ngr_TriggerActivated) == 0x000CE8, "Member 'AProximityTrigger_QuestItem_BP_C::Ngr_TriggerActivated' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, ScapegoatDevice_NeedleMinus01) == 0x000CF0, "Member 'AProximityTrigger_QuestItem_BP_C::ScapegoatDevice_NeedleMinus01' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, ScapegoatDevice_DetonatorMinus01) == 0x000CF8, "Member 'AProximityTrigger_QuestItem_BP_C::ScapegoatDevice_DetonatorMinus01' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, ScapegoatDevice_TriggerMinus01) == 0x000D00, "Member 'AProximityTrigger_QuestItem_BP_C::ScapegoatDevice_TriggerMinus01' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, RBSound) == 0x000D08, "Member 'AProximityTrigger_QuestItem_BP_C::RBSound' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, ScapegoatDevice_BigLightMinus01) == 0x000D10, "Member 'AProximityTrigger_QuestItem_BP_C::ScapegoatDevice_BigLightMinus01' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, RBObjectiveActor) == 0x000D18, "Member 'AProximityTrigger_QuestItem_BP_C::RBObjectiveActor' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, InWorldMesh) == 0x000D20, "Member 'AProximityTrigger_QuestItem_BP_C::InWorldMesh' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, RBRandomizableHelper) == 0x000D28, "Member 'AProximityTrigger_QuestItem_BP_C::RBRandomizableHelper' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, ButtonPressed_ButtonAngle_CAF46FA346C8B00F704ECD8FA213CCF5) == 0x000D30, "Member 'AProximityTrigger_QuestItem_BP_C::ButtonPressed_ButtonAngle_CAF46FA346C8B00F704ECD8FA213CCF5' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, ButtonPressed__Direction_CAF46FA346C8B00F704ECD8FA213CCF5) == 0x000D34, "Member 'AProximityTrigger_QuestItem_BP_C::ButtonPressed__Direction_CAF46FA346C8B00F704ECD8FA213CCF5' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, ButtonPressed) == 0x000D38, "Member 'AProximityTrigger_QuestItem_BP_C::ButtonPressed' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AlarmIntervalMin) == 0x000D40, "Member 'AProximityTrigger_QuestItem_BP_C::AlarmIntervalMin' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AlarmIntervalMax) == 0x000E08, "Member 'AProximityTrigger_QuestItem_BP_C::AlarmIntervalMax' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, TriggerCount) == 0x000ED0, "Member 'AProximityTrigger_QuestItem_BP_C::TriggerCount' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, Delay) == 0x000ED4, "Member 'AProximityTrigger_QuestItem_BP_C::Delay' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, ShakeThreshold) == 0x000ED8, "Member 'AProximityTrigger_QuestItem_BP_C::ShakeThreshold' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, ActiveLightColor) == 0x000EDC, "Member 'AProximityTrigger_QuestItem_BP_C::ActiveLightColor' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, InactiveLightColor) == 0x000EEC, "Member 'AProximityTrigger_QuestItem_BP_C::InactiveLightColor' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventProgressLoopStart) == 0x000F00, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventProgressLoopStart' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventProgressLoopStop) == 0x000F08, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventProgressLoopStop' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, bPlayingLoopingProgressSound) == 0x000F10, "Member 'AProximityTrigger_QuestItem_BP_C::bPlayingLoopingProgressSound' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, RTPCProgressLoopName) == 0x000F14, "Member 'AProximityTrigger_QuestItem_BP_C::RTPCProgressLoopName' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventButtonPressed) == 0x000F20, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventButtonPressed' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventButtonRelease) == 0x000F28, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventButtonRelease' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventLEDTurnOff) == 0x000F30, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventLEDTurnOff' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventLEDTurnOn) == 0x000F38, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventLEDTurnOn' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, bHasPlayedLEDTurnOnSound) == 0x000F40, "Member 'AProximityTrigger_QuestItem_BP_C::bHasPlayedLEDTurnOnSound' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventAlarmDeviceOnSuccessStart) == 0x000F48, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventAlarmDeviceOnSuccessStart' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventAlarmDeviceOnSuccessStop) == 0x000F50, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventAlarmDeviceOnSuccessStop' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventCookSuccess) == 0x000F58, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventCookSuccess' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventProximityLoopStart) == 0x000F60, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventProximityLoopStart' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventProximityLoopStop) == 0x000F68, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventProximityLoopStop' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, bIsPlayingLoopingProximitySound) == 0x000F70, "Member 'AProximityTrigger_QuestItem_BP_C::bIsPlayingLoopingProximitySound' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventProgressLoopStart02) == 0x000F78, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventProgressLoopStart02' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventProgressLoopStop02) == 0x000F80, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventProgressLoopStop02' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventProgressLoopStart03) == 0x000F88, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventProgressLoopStart03' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, AkEventProgressLoopStop03) == 0x000F90, "Member 'AProximityTrigger_QuestItem_BP_C::AkEventProgressLoopStop03' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, bOverheating) == 0x000F98, "Member 'AProximityTrigger_QuestItem_BP_C::bOverheating' has a wrong offset!");
static_assert(offsetof(AProximityTrigger_QuestItem_BP_C, OverheatDuration) == 0x000F9C, "Member 'AProximityTrigger_QuestItem_BP_C::OverheatDuration' has a wrong offset!");

}

