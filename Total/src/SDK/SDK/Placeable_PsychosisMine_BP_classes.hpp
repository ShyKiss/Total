#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Placeable_PsychosisMine_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BaseMinusPsychosisMine_BP_classes.hpp"
#include "OPP_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Placeable_PsychosisMine_BP.Placeable_PsychosisMine_BP_C
// 0x0080 (0x0528 - 0x04A8)
class APlaceable_PsychosisMine_BP_C final : public ABaseMinusPsychosisMine_BP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Placeable_PsychosisMine_BP_C;       // 0x04A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      OnHackVFX;                                         // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      OnRewireVFX;                                       // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HackVFXRoot;                                       // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBHackableComponent*                   RBHackable;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBEditorClearanceCollisionBoxComponent* RBEditorClearanceCollisionBox;                     // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   OverlapCylinder;                                   // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBEditorClearanceCollisionBoxComponent* MetalLightFloorCheck;                              // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBEditorClearanceCollisionBoxComponent* GroundCheckClearance;                              // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBPingComponent*                       RBPing;                                            // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBObjectiveProximityComponent*         RBObjectiveProximity;                              // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    EditorIcon;                                        // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRoomAssociationComponent*            Room_Association;                                  // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBObstacleVariatorComponent*           Obstacle_Variator;                                 // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRandomizableHelperComponent*         Randomizable_Helper;                               // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 NoOverlapColor;                                    // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool BP_MapCheck(EMapCheckType CheckType, class FString* OutErrorMsg);
	bool FixUp();
	bool GetStateName(class FString* StateA, class FString* StateB);
	void Editor_DrawOverlap();
	void Editor_CheckOverlap(bool* Overlaps, class FString* OutOverlapList);
	void UpdateMeshVisibility();
	void UserConstructionScript();
	void BP_PrepareMapCheck();
	void OnEditorPostLoad();
	void OnPostActorsPasted(const TArray<class AActor*>& PastedActors);
	void PostAddedToLevel();
	void PostDuplicated(class AActor* DuplicationParent);
	void PostEditChange(const class FName& PropertyName);
	void PostEditMove(bool bFinished);
	void PrepareState(bool bStateA, class AActor* RandomOwner);
	void SetState(bool bStateA);
	void SetShouldBeIgnoredForLots(bool bValue);
	void BndEvt__Placeable_PsychosisMine_BP_Randomizable_Helper_K2Node_ComponentBoundEvent_0_OnRandomStateChangedEvent__DelegateSignature();
	void TickSelected();
	void Event_OnActivate();
	void Event_OnBreak();
	void BndEvt__Placeable_PsychosisMine_BP_RBHackable_K2Node_ComponentBoundEvent_1_OnCurrentHackStateChanged__DelegateSignature(class URBHackableComponent* HackableComponent);
	void ExecuteUbergraph_Placeable_PsychosisMine_BP(int32 EntryPoint);

	bool IsRandomStateSet() const;
	bool IsStateA() const;
	bool ShouldBeIgnoredForLots() const;
	bool GetPlayerPingData(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FPlayerPingData* OutData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Placeable_PsychosisMine_BP_C">();
	}
	static class APlaceable_PsychosisMine_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlaceable_PsychosisMine_BP_C>();
	}
};
static_assert(alignof(APlaceable_PsychosisMine_BP_C) == 0x000008, "Wrong alignment on APlaceable_PsychosisMine_BP_C");
static_assert(sizeof(APlaceable_PsychosisMine_BP_C) == 0x000528, "Wrong size on APlaceable_PsychosisMine_BP_C");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, UberGraphFrame_Placeable_PsychosisMine_BP_C) == 0x0004A8, "Member 'APlaceable_PsychosisMine_BP_C::UberGraphFrame_Placeable_PsychosisMine_BP_C' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, OnHackVFX) == 0x0004B0, "Member 'APlaceable_PsychosisMine_BP_C::OnHackVFX' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, OnRewireVFX) == 0x0004B8, "Member 'APlaceable_PsychosisMine_BP_C::OnRewireVFX' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, HackVFXRoot) == 0x0004C0, "Member 'APlaceable_PsychosisMine_BP_C::HackVFXRoot' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, RBHackable) == 0x0004C8, "Member 'APlaceable_PsychosisMine_BP_C::RBHackable' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, RBEditorClearanceCollisionBox) == 0x0004D0, "Member 'APlaceable_PsychosisMine_BP_C::RBEditorClearanceCollisionBox' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, OverlapCylinder) == 0x0004D8, "Member 'APlaceable_PsychosisMine_BP_C::OverlapCylinder' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, MetalLightFloorCheck) == 0x0004E0, "Member 'APlaceable_PsychosisMine_BP_C::MetalLightFloorCheck' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, GroundCheckClearance) == 0x0004E8, "Member 'APlaceable_PsychosisMine_BP_C::GroundCheckClearance' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, RBPing) == 0x0004F0, "Member 'APlaceable_PsychosisMine_BP_C::RBPing' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, RBObjectiveProximity) == 0x0004F8, "Member 'APlaceable_PsychosisMine_BP_C::RBObjectiveProximity' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, EditorIcon) == 0x000500, "Member 'APlaceable_PsychosisMine_BP_C::EditorIcon' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, Room_Association) == 0x000508, "Member 'APlaceable_PsychosisMine_BP_C::Room_Association' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, Obstacle_Variator) == 0x000510, "Member 'APlaceable_PsychosisMine_BP_C::Obstacle_Variator' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, Randomizable_Helper) == 0x000518, "Member 'APlaceable_PsychosisMine_BP_C::Randomizable_Helper' has a wrong offset!");
static_assert(offsetof(APlaceable_PsychosisMine_BP_C, NoOverlapColor) == 0x000520, "Member 'APlaceable_PsychosisMine_BP_C::NoOverlapColor' has a wrong offset!");

}

