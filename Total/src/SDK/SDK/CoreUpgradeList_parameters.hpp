#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CoreUpgradeList

#include "Basic.hpp"

#include "OPP_structs.hpp"
#include "AkAudio_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function CoreUpgradeList.CoreUpgradeList_C.HandleGamepadFocus
// 0x0010 (0x0010 - 0x0000)
struct CoreUpgradeList_C_HandleGamepadFocus final
{
public:
	bool                                          CallFunc_BP_IsUsingGamepad_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_HandleGamepadFocus) == 0x000008, "Wrong alignment on CoreUpgradeList_C_HandleGamepadFocus");
static_assert(sizeof(CoreUpgradeList_C_HandleGamepadFocus) == 0x000010, "Wrong size on CoreUpgradeList_C_HandleGamepadFocus");
static_assert(offsetof(CoreUpgradeList_C_HandleGamepadFocus, CallFunc_BP_IsUsingGamepad_ReturnValue) == 0x000000, "Member 'CoreUpgradeList_C_HandleGamepadFocus::CallFunc_BP_IsUsingGamepad_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_HandleGamepadFocus, CallFunc_GetChildAt_ReturnValue) == 0x000008, "Member 'CoreUpgradeList_C_HandleGamepadFocus::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.CycleTier
// 0x0040 (0x0040 - 0x0000)
struct CoreUpgradeList_C_CycleTier final
{
public:
	bool                                          Left;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBGlobalUIConfig*                      CallFunc_GetGlobalUIConfig_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0028(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventGlobal_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_CycleTier) == 0x000008, "Wrong alignment on CoreUpgradeList_C_CycleTier");
static_assert(sizeof(CoreUpgradeList_C_CycleTier) == 0x000040, "Wrong size on CoreUpgradeList_C_CycleTier");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, Left) == 0x000000, "Member 'CoreUpgradeList_C_CycleTier::Left' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, Temp_bool_Variable) == 0x000001, "Member 'CoreUpgradeList_C_CycleTier::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, Temp_int_Variable) == 0x000004, "Member 'CoreUpgradeList_C_CycleTier::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, Temp_int_Variable_1) == 0x000008, "Member 'CoreUpgradeList_C_CycleTier::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, K2Node_Select_Default) == 0x00000C, "Member 'CoreUpgradeList_C_CycleTier::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'CoreUpgradeList_C_CycleTier::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'CoreUpgradeList_C_CycleTier::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, CallFunc_GetGlobalUIConfig_ReturnValue) == 0x000018, "Member 'CoreUpgradeList_C_CycleTier::CallFunc_GetGlobalUIConfig_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'CoreUpgradeList_C_CycleTier::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, CallFunc_Percent_IntInt_ReturnValue) == 0x000024, "Member 'CoreUpgradeList_C_CycleTier::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, Temp_delegate_Variable) == 0x000028, "Member 'CoreUpgradeList_C_CycleTier::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, CallFunc_Add_IntInt_ReturnValue_2) == 0x000038, "Member 'CoreUpgradeList_C_CycleTier::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_CycleTier, CallFunc_PostEventGlobal_ReturnValue) == 0x00003C, "Member 'CoreUpgradeList_C_CycleTier::CallFunc_PostEventGlobal_ReturnValue' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnFocusReceived
// 0x01B0 (0x01B0 - 0x0000)
struct CoreUpgradeList_C_OnFocusReceived final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FFocusEvent                            InFocusEvent;                                      // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FEventReply                            ReturnValue;                                       // 0x0040(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x00F8(0x00B8)()
};
static_assert(alignof(CoreUpgradeList_C_OnFocusReceived) == 0x000008, "Wrong alignment on CoreUpgradeList_C_OnFocusReceived");
static_assert(sizeof(CoreUpgradeList_C_OnFocusReceived) == 0x0001B0, "Wrong size on CoreUpgradeList_C_OnFocusReceived");
static_assert(offsetof(CoreUpgradeList_C_OnFocusReceived, MyGeometry) == 0x000000, "Member 'CoreUpgradeList_C_OnFocusReceived::MyGeometry' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_OnFocusReceived, InFocusEvent) == 0x000038, "Member 'CoreUpgradeList_C_OnFocusReceived::InFocusEvent' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_OnFocusReceived, ReturnValue) == 0x000040, "Member 'CoreUpgradeList_C_OnFocusReceived::ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_OnFocusReceived, CallFunc_Handled_ReturnValue) == 0x0000F8, "Member 'CoreUpgradeList_C_OnFocusReceived::CallFunc_Handled_ReturnValue' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnUpgradeReleasedEvent
// 0x0198 (0x0198 - 0x0000)
struct CoreUpgradeList_C_OnUpgradeReleasedEvent final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMenuUpgradeItemInfo                   CallFunc_GetUpgradeItemInfo_ReturnValue;           // 0x0008(0x0190)()
};
static_assert(alignof(CoreUpgradeList_C_OnUpgradeReleasedEvent) == 0x000008, "Wrong alignment on CoreUpgradeList_C_OnUpgradeReleasedEvent");
static_assert(sizeof(CoreUpgradeList_C_OnUpgradeReleasedEvent) == 0x000198, "Wrong size on CoreUpgradeList_C_OnUpgradeReleasedEvent");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradeReleasedEvent, ItemId) == 0x000000, "Member 'CoreUpgradeList_C_OnUpgradeReleasedEvent::ItemId' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradeReleasedEvent, CallFunc_GetUpgradeItemInfo_ReturnValue) == 0x000008, "Member 'CoreUpgradeList_C_OnUpgradeReleasedEvent::CallFunc_GetUpgradeItemInfo_ReturnValue' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnUpgradePressedEvent
// 0x0198 (0x0198 - 0x0000)
struct CoreUpgradeList_C_OnUpgradePressedEvent final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMenuUpgradeItemInfo                   CallFunc_GetUpgradeItemInfo_ReturnValue;           // 0x0008(0x0190)()
};
static_assert(alignof(CoreUpgradeList_C_OnUpgradePressedEvent) == 0x000008, "Wrong alignment on CoreUpgradeList_C_OnUpgradePressedEvent");
static_assert(sizeof(CoreUpgradeList_C_OnUpgradePressedEvent) == 0x000198, "Wrong size on CoreUpgradeList_C_OnUpgradePressedEvent");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradePressedEvent, ItemId) == 0x000000, "Member 'CoreUpgradeList_C_OnUpgradePressedEvent::ItemId' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradePressedEvent, CallFunc_GetUpgradeItemInfo_ReturnValue) == 0x000008, "Member 'CoreUpgradeList_C_OnUpgradePressedEvent::CallFunc_GetUpgradeItemInfo_ReturnValue' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnUpgradeClickedEvent
// 0x0008 (0x0008 - 0x0000)
struct CoreUpgradeList_C_OnUpgradeClickedEvent final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_OnUpgradeClickedEvent) == 0x000004, "Wrong alignment on CoreUpgradeList_C_OnUpgradeClickedEvent");
static_assert(sizeof(CoreUpgradeList_C_OnUpgradeClickedEvent) == 0x000008, "Wrong size on CoreUpgradeList_C_OnUpgradeClickedEvent");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradeClickedEvent, ItemId) == 0x000000, "Member 'CoreUpgradeList_C_OnUpgradeClickedEvent::ItemId' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnUpgradeUnhoveredEvent
// 0x0008 (0x0008 - 0x0000)
struct CoreUpgradeList_C_OnUpgradeUnhoveredEvent final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_OnUpgradeUnhoveredEvent) == 0x000004, "Wrong alignment on CoreUpgradeList_C_OnUpgradeUnhoveredEvent");
static_assert(sizeof(CoreUpgradeList_C_OnUpgradeUnhoveredEvent) == 0x000008, "Wrong size on CoreUpgradeList_C_OnUpgradeUnhoveredEvent");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradeUnhoveredEvent, ItemId) == 0x000000, "Member 'CoreUpgradeList_C_OnUpgradeUnhoveredEvent::ItemId' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnUpgradeHoveredEvent
// 0x0008 (0x0008 - 0x0000)
struct CoreUpgradeList_C_OnUpgradeHoveredEvent final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_OnUpgradeHoveredEvent) == 0x000004, "Wrong alignment on CoreUpgradeList_C_OnUpgradeHoveredEvent");
static_assert(sizeof(CoreUpgradeList_C_OnUpgradeHoveredEvent) == 0x000008, "Wrong size on CoreUpgradeList_C_OnUpgradeHoveredEvent");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradeHoveredEvent, ItemId) == 0x000000, "Member 'CoreUpgradeList_C_OnUpgradeHoveredEvent::ItemId' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.Refresh
// 0x0048 (0x0048 - 0x0000)
struct CoreUpgradeList_C_Refresh final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUpgradeButton_C*                       K2Node_DynamicCast_AsUpgrade_Button;               // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CoreUpgradeList_C_Refresh) == 0x000008, "Wrong alignment on CoreUpgradeList_C_Refresh");
static_assert(sizeof(CoreUpgradeList_C_Refresh) == 0x000048, "Wrong size on CoreUpgradeList_C_Refresh");
static_assert(offsetof(CoreUpgradeList_C_Refresh, Temp_int_Array_Index_Variable) == 0x000000, "Member 'CoreUpgradeList_C_Refresh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Refresh, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'CoreUpgradeList_C_Refresh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Refresh, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'CoreUpgradeList_C_Refresh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Refresh, CallFunc_GetAllChildren_ReturnValue) == 0x000010, "Member 'CoreUpgradeList_C_Refresh::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Refresh, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'CoreUpgradeList_C_Refresh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Refresh, CallFunc_Array_Get_Item) == 0x000028, "Member 'CoreUpgradeList_C_Refresh::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Refresh, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'CoreUpgradeList_C_Refresh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Refresh, K2Node_DynamicCast_AsUpgrade_Button) == 0x000038, "Member 'CoreUpgradeList_C_Refresh::K2Node_DynamicCast_AsUpgrade_Button' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Refresh, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'CoreUpgradeList_C_Refresh::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.Init
// 0x0008 (0x0008 - 0x0000)
struct CoreUpgradeList_C_Init final
{
public:
	bool                                          bIsLoadout_0;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Tier_0;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_Init) == 0x000004, "Wrong alignment on CoreUpgradeList_C_Init");
static_assert(sizeof(CoreUpgradeList_C_Init) == 0x000008, "Wrong size on CoreUpgradeList_C_Init");
static_assert(offsetof(CoreUpgradeList_C_Init, bIsLoadout_0) == 0x000000, "Member 'CoreUpgradeList_C_Init::bIsLoadout_0' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Init, Tier_0) == 0x000004, "Member 'CoreUpgradeList_C_Init::Tier_0' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.Setup
// 0x0200 (0x0200 - 0x0000)
struct CoreUpgradeList_C_Setup final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName ItemId)>           K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class FName ItemId)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class FName ItemId)>           K2Node_CreateDelegate_OutputDelegate_2;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class FName ItemId)>           K2Node_CreateDelegate_OutputDelegate_3;            // 0x003C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class FName ItemId)>           K2Node_CreateDelegate_OutputDelegate_4;            // 0x004C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUpgradeButton_C*                       CallFunc_Create_ReturnValue;                       // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBPlayerProgressionData*               CallFunc_GetLocalPlayerProgressionData_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FRBItemProgressionData>         CallFunc_FilterItemProgressionData_ReturnValue;    // 0x0070(0x0010)(ReferenceParm)
	struct FRBItemProgressionData                 CallFunc_Array_Get_Item;                           // 0x0080(0x0170)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F5[0x3];                                      // 0x01F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_Setup) == 0x000008, "Wrong alignment on CoreUpgradeList_C_Setup");
static_assert(sizeof(CoreUpgradeList_C_Setup) == 0x000200, "Wrong size on CoreUpgradeList_C_Setup");
static_assert(offsetof(CoreUpgradeList_C_Setup, Temp_int_Array_Index_Variable) == 0x000000, "Member 'CoreUpgradeList_C_Setup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'CoreUpgradeList_C_Setup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'CoreUpgradeList_C_Setup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'CoreUpgradeList_C_Setup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'CoreUpgradeList_C_Setup::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, K2Node_CreateDelegate_OutputDelegate_2) == 0x00002C, "Member 'CoreUpgradeList_C_Setup::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, K2Node_CreateDelegate_OutputDelegate_3) == 0x00003C, "Member 'CoreUpgradeList_C_Setup::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, K2Node_CreateDelegate_OutputDelegate_4) == 0x00004C, "Member 'CoreUpgradeList_C_Setup::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, CallFunc_Create_ReturnValue) == 0x000060, "Member 'CoreUpgradeList_C_Setup::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, CallFunc_GetLocalPlayerProgressionData_ReturnValue) == 0x000068, "Member 'CoreUpgradeList_C_Setup::CallFunc_GetLocalPlayerProgressionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, CallFunc_FilterItemProgressionData_ReturnValue) == 0x000070, "Member 'CoreUpgradeList_C_Setup::CallFunc_FilterItemProgressionData_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, CallFunc_Array_Get_Item) == 0x000080, "Member 'CoreUpgradeList_C_Setup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, CallFunc_Array_Length_ReturnValue) == 0x0001F0, "Member 'CoreUpgradeList_C_Setup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, CallFunc_Less_IntInt_ReturnValue) == 0x0001F4, "Member 'CoreUpgradeList_C_Setup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_Setup, CallFunc_AddChild_ReturnValue) == 0x0001F8, "Member 'CoreUpgradeList_C_Setup::CallFunc_AddChild_ReturnValue' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct CoreUpgradeList_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CoreUpgradeList_C_PreConstruct) == 0x000001, "Wrong alignment on CoreUpgradeList_C_PreConstruct");
static_assert(sizeof(CoreUpgradeList_C_PreConstruct) == 0x000001, "Wrong size on CoreUpgradeList_C_PreConstruct");
static_assert(offsetof(CoreUpgradeList_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'CoreUpgradeList_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.ExecuteUbergraph_CoreUpgradeList
// 0x0008 (0x0008 - 0x0000)
struct CoreUpgradeList_C_ExecuteUbergraph_CoreUpgradeList final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CoreUpgradeList_C_ExecuteUbergraph_CoreUpgradeList) == 0x000004, "Wrong alignment on CoreUpgradeList_C_ExecuteUbergraph_CoreUpgradeList");
static_assert(sizeof(CoreUpgradeList_C_ExecuteUbergraph_CoreUpgradeList) == 0x000008, "Wrong size on CoreUpgradeList_C_ExecuteUbergraph_CoreUpgradeList");
static_assert(offsetof(CoreUpgradeList_C_ExecuteUbergraph_CoreUpgradeList, EntryPoint) == 0x000000, "Member 'CoreUpgradeList_C_ExecuteUbergraph_CoreUpgradeList::EntryPoint' has a wrong offset!");
static_assert(offsetof(CoreUpgradeList_C_ExecuteUbergraph_CoreUpgradeList, K2Node_Event_IsDesignTime) == 0x000004, "Member 'CoreUpgradeList_C_ExecuteUbergraph_CoreUpgradeList::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnTierChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct CoreUpgradeList_C_OnTierChanged__DelegateSignature final
{
public:
	int32                                         NewTier;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_OnTierChanged__DelegateSignature) == 0x000004, "Wrong alignment on CoreUpgradeList_C_OnTierChanged__DelegateSignature");
static_assert(sizeof(CoreUpgradeList_C_OnTierChanged__DelegateSignature) == 0x000004, "Wrong size on CoreUpgradeList_C_OnTierChanged__DelegateSignature");
static_assert(offsetof(CoreUpgradeList_C_OnTierChanged__DelegateSignature, NewTier) == 0x000000, "Member 'CoreUpgradeList_C_OnTierChanged__DelegateSignature::NewTier' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnUpgradeClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct CoreUpgradeList_C_OnUpgradeClicked__DelegateSignature final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_OnUpgradeClicked__DelegateSignature) == 0x000004, "Wrong alignment on CoreUpgradeList_C_OnUpgradeClicked__DelegateSignature");
static_assert(sizeof(CoreUpgradeList_C_OnUpgradeClicked__DelegateSignature) == 0x000008, "Wrong size on CoreUpgradeList_C_OnUpgradeClicked__DelegateSignature");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradeClicked__DelegateSignature, ItemId) == 0x000000, "Member 'CoreUpgradeList_C_OnUpgradeClicked__DelegateSignature::ItemId' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnUpgradeUnhovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct CoreUpgradeList_C_OnUpgradeUnhovered__DelegateSignature final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_OnUpgradeUnhovered__DelegateSignature) == 0x000004, "Wrong alignment on CoreUpgradeList_C_OnUpgradeUnhovered__DelegateSignature");
static_assert(sizeof(CoreUpgradeList_C_OnUpgradeUnhovered__DelegateSignature) == 0x000008, "Wrong size on CoreUpgradeList_C_OnUpgradeUnhovered__DelegateSignature");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradeUnhovered__DelegateSignature, ItemId) == 0x000000, "Member 'CoreUpgradeList_C_OnUpgradeUnhovered__DelegateSignature::ItemId' has a wrong offset!");

// Function CoreUpgradeList.CoreUpgradeList_C.OnUpgradeHovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct CoreUpgradeList_C_OnUpgradeHovered__DelegateSignature final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CoreUpgradeList_C_OnUpgradeHovered__DelegateSignature) == 0x000004, "Wrong alignment on CoreUpgradeList_C_OnUpgradeHovered__DelegateSignature");
static_assert(sizeof(CoreUpgradeList_C_OnUpgradeHovered__DelegateSignature) == 0x000008, "Wrong size on CoreUpgradeList_C_OnUpgradeHovered__DelegateSignature");
static_assert(offsetof(CoreUpgradeList_C_OnUpgradeHovered__DelegateSignature, ItemId) == 0x000000, "Member 'CoreUpgradeList_C_OnUpgradeHovered__DelegateSignature::ItemId' has a wrong offset!");

}

