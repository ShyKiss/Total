#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HackPanelMinus02_GhostAnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass HackPanel-02_GhostAnimBP.HackPanel-02_GhostAnimBP_C
// 0x0D30 (0x1020 - 0x02F0)
class UHackPanelMinus02_GhostAnimBP_C final : public URBGhostAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x02F8(0x0030)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0328(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x0350(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x0378(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x03A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x03C8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x03F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0418(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0440(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0468(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0490(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x04B8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x04E0(0x0080)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0560(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_7;                  // 0x0590(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0678(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_6;                  // 0x06A8(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0790(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_5;                  // 0x07C0(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x08A8(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_4;                  // 0x08D8(0x00E8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x09C0(0x00A8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0A68(0x00A8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_3;                  // 0x0B10(0x00E8)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x0BF8(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0CE0(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0D10(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0DF8(0x0030)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0E28(0x00E8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0F10(0x0030)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0F40(0x00B0)()
	class URBAnimInstancePlayer*                  PlayerAnimBP;                                      // 0x0FF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBHackPanelComponent*                  HackPanel;                                         // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RelativeHeight;                                    // 0x1000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3317[0x4];                                     // 0x1004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHackPanel_BP_C*                        HackActor;                                         // 0x1008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnFloor;                                         // 0x1010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsCompleted;                                       // 0x1011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSoftWin;                                         // 0x1012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSoftFail;                                        // 0x1013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMasterKey;                                       // 0x1014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSoftComplete;                                    // 0x1015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	bool FinishGhost(EGhostFinishReason FinishReason, int32 GhostFinishCustomReason);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_HackPanelMinus02_GhostAnimBP_AnimGraphNode_TransitionResult_180D392748E14FFDEEFEDD8282C505F7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_HackPanelMinus02_GhostAnimBP_AnimGraphNode_BlendListByBool_95A43F584624DE3DB36C0286487F5509();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_HackPanelMinus02_GhostAnimBP_AnimGraphNode_TransitionResult_04FC446749FC77D79D5B3BAEF75D2924();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_HackPanelMinus02_GhostAnimBP_AnimGraphNode_TransitionResult_82E12932416CB3033E600795B1745E18();
	void Stop_Animation();
	void BP_InitializeGhost();
	void AnimNotify_FailDone();
	void AnimNotify_SuccessDone();
	void OnGhostAnimNotify(EGhostAnimEvent AnimEvent, const class FName& AnimEventName);
	void DetachPanel();
	void AttachPanel();
	void AnimNotify_Finish();
	void BP_ClearGhost();
	void OnStageSucceeded_Event(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void AnimNotify_EnterHold();
	void OnSoftFail_Event(class URBInteractiblePanelComponent* Panel, class ARBPawn* PawnInteracting);
	void ExecuteUbergraph_HackPanelMinus02_GhostAnimBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HackPanel-02_GhostAnimBP_C">();
	}
	static class UHackPanelMinus02_GhostAnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHackPanelMinus02_GhostAnimBP_C>();
	}
};
static_assert(alignof(UHackPanelMinus02_GhostAnimBP_C) == 0x000010, "Wrong alignment on UHackPanelMinus02_GhostAnimBP_C");
static_assert(sizeof(UHackPanelMinus02_GhostAnimBP_C) == 0x001020, "Wrong size on UHackPanelMinus02_GhostAnimBP_C");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, UberGraphFrame) == 0x0002F0, "Member 'UHackPanelMinus02_GhostAnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_Root) == 0x0002F8, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_10) == 0x000328, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_9) == 0x000350, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_8) == 0x000378, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_7) == 0x0003A0, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_6) == 0x0003C8, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_5) == 0x0003F0, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_4) == 0x000418, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_3) == 0x000440, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_2) == 0x000468, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult_1) == 0x000490, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_TransitionResult) == 0x0004B8, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_SequencePlayer) == 0x0004E0, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_StateResult_6) == 0x000560, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendSpacePlayer_7) == 0x000590, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendSpacePlayer_7' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_StateResult_5) == 0x000678, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendSpacePlayer_6) == 0x0006A8, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendSpacePlayer_6' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_StateResult_4) == 0x000790, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendSpacePlayer_5) == 0x0007C0, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendSpacePlayer_5' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_StateResult_3) == 0x0008A8, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendSpacePlayer_4) == 0x0008D8, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendSpacePlayer_4' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendListByBool_1) == 0x0009C0, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendListByBool) == 0x000A68, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendSpacePlayer_3) == 0x000B10, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendSpacePlayer_3' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendSpacePlayer_2) == 0x000BF8, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_StateResult_2) == 0x000CE0, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000D10, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_StateResult_1) == 0x000DF8, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_BlendSpacePlayer) == 0x000E28, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_StateResult) == 0x000F10, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, AnimGraphNode_StateMachine) == 0x000F40, "Member 'UHackPanelMinus02_GhostAnimBP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, PlayerAnimBP) == 0x000FF0, "Member 'UHackPanelMinus02_GhostAnimBP_C::PlayerAnimBP' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, HackPanel) == 0x000FF8, "Member 'UHackPanelMinus02_GhostAnimBP_C::HackPanel' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, RelativeHeight) == 0x001000, "Member 'UHackPanelMinus02_GhostAnimBP_C::RelativeHeight' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, HackActor) == 0x001008, "Member 'UHackPanelMinus02_GhostAnimBP_C::HackActor' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, IsOnFloor) == 0x001010, "Member 'UHackPanelMinus02_GhostAnimBP_C::IsOnFloor' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, IsCompleted) == 0x001011, "Member 'UHackPanelMinus02_GhostAnimBP_C::IsCompleted' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, IsSoftWin) == 0x001012, "Member 'UHackPanelMinus02_GhostAnimBP_C::IsSoftWin' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, IsSoftFail) == 0x001013, "Member 'UHackPanelMinus02_GhostAnimBP_C::IsSoftFail' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, IsMasterKey) == 0x001014, "Member 'UHackPanelMinus02_GhostAnimBP_C::IsMasterKey' has a wrong offset!");
static_assert(offsetof(UHackPanelMinus02_GhostAnimBP_C, IsSoftComplete) == 0x001015, "Member 'UHackPanelMinus02_GhostAnimBP_C::IsSoftComplete' has a wrong offset!");

}

