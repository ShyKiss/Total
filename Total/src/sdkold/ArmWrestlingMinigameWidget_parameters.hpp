#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArmWrestlingMinigameWidget

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.UpdateLeavingUI
// 0x0002 (0x0002 - 0x0000)
struct ArmWrestlingMinigameWidget_C_UpdateLeavingUI final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayerLeaving_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_UpdateLeavingUI) == 0x000001, "Wrong alignment on ArmWrestlingMinigameWidget_C_UpdateLeavingUI");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_UpdateLeavingUI) == 0x000002, "Wrong size on ArmWrestlingMinigameWidget_C_UpdateLeavingUI");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateLeavingUI, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_UpdateLeavingUI::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateLeavingUI, CallFunc_IsPlayerLeaving_ReturnValue) == 0x000001, "Member 'ArmWrestlingMinigameWidget_C_UpdateLeavingUI::CallFunc_IsPlayerLeaving_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.GetExitingPercent
// 0x0018 (0x0018 - 0x0000)
struct ArmWrestlingMinigameWidget_C_GetExitingPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C26[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetElapsedPawnTime_ReturnValue;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_GetExitingPercent) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_GetExitingPercent");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_GetExitingPercent) == 0x000018, "Wrong size on ArmWrestlingMinigameWidget_C_GetExitingPercent");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetExitingPercent, ReturnValue) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_GetExitingPercent::ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetExitingPercent, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ArmWrestlingMinigameWidget_C_GetExitingPercent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetExitingPercent, CallFunc_GetPawnInteracting_ReturnValue) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_GetExitingPercent::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetExitingPercent, CallFunc_GetElapsedPawnTime_ReturnValue) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_GetExitingPercent::CallFunc_GetElapsedPawnTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetExitingPercent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'ArmWrestlingMinigameWidget_C_GetExitingPercent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.OnStartExitingGame
// 0x0060 (0x0060 - 0x0000)
struct ArmWrestlingMinigameWidget_C_OnStartExitingGame final
{
public:
	bool                                          bExiting;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C27[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartExitTimestamp;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C28[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0028(0x0018)()
	EArmWreslingTableState                        CallFunc_GetTableState_ReturnValue;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsArmWreslingRoundInProgress_ReturnValue; // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C29[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0048(0x0018)()
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_OnStartExitingGame) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_OnStartExitingGame");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_OnStartExitingGame) == 0x000060, "Wrong size on ArmWrestlingMinigameWidget_C_OnStartExitingGame");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnStartExitingGame, bExiting) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_OnStartExitingGame::bExiting' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnStartExitingGame, StartExitTimestamp) == 0x000004, "Member 'ArmWrestlingMinigameWidget_C_OnStartExitingGame::StartExitTimestamp' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnStartExitingGame, Temp_bool_Variable) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_OnStartExitingGame::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnStartExitingGame, Temp_text_Variable) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_OnStartExitingGame::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnStartExitingGame, Temp_text_Variable_1) == 0x000028, "Member 'ArmWrestlingMinigameWidget_C_OnStartExitingGame::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnStartExitingGame, CallFunc_GetTableState_ReturnValue) == 0x000040, "Member 'ArmWrestlingMinigameWidget_C_OnStartExitingGame::CallFunc_GetTableState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnStartExitingGame, CallFunc_IsArmWreslingRoundInProgress_ReturnValue) == 0x000041, "Member 'ArmWrestlingMinigameWidget_C_OnStartExitingGame::CallFunc_IsArmWreslingRoundInProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnStartExitingGame, K2Node_SwitchEnum_CmpSuccess) == 0x000042, "Member 'ArmWrestlingMinigameWidget_C_OnStartExitingGame::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnStartExitingGame, K2Node_Select_Default) == 0x000048, "Member 'ArmWrestlingMinigameWidget_C_OnStartExitingGame::K2Node_Select_Default' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.SetupPlayerNames
// 0x0098 (0x0098 - 0x0000)
struct ArmWrestlingMinigameWidget_C_SetupPlayerNames final
{
public:
	class ARBPlayer*                              CallFunc_GetOpponentPlayer_RBPlayer;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2A[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetGamePlayerName_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatPlayerDisplayName_formatedDisplayName; // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2B[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0038(0x0018)()
	class ARBPlayer*                              CallFunc_GetPlayerInteracting_ReturnValue;         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2C[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetGamePlayerName_ReturnValue_1;          // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatPlayerDisplayName_formatedDisplayName_1; // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0080(0x0018)()
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_SetupPlayerNames) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_SetupPlayerNames");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_SetupPlayerNames) == 0x000098, "Wrong size on ArmWrestlingMinigameWidget_C_SetupPlayerNames");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_GetOpponentPlayer_RBPlayer) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_GetOpponentPlayer_RBPlayer' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_GetGamePlayerName_ReturnValue) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_GetGamePlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_FormatPlayerDisplayName_formatedDisplayName) == 0x000020, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_FormatPlayerDisplayName_formatedDisplayName' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_IsValid_ReturnValue_2) == 0x000030, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_Conv_StringToText_ReturnValue) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_GetPlayerInteracting_ReturnValue) == 0x000050, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_GetPlayerInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_IsValid_ReturnValue_3) == 0x000058, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_GetGamePlayerName_ReturnValue_1) == 0x000060, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_GetGamePlayerName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_FormatPlayerDisplayName_formatedDisplayName_1) == 0x000070, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_FormatPlayerDisplayName_formatedDisplayName_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_SetupPlayerNames, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000080, "Member 'ArmWrestlingMinigameWidget_C_SetupPlayerNames::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.UpdateRTPCs
// 0x0018 (0x0018 - 0x0000)
struct ArmWrestlingMinigameWidget_C_UpdateRTPCs final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedRoundTime_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayer1_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2E[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_UpdateRTPCs) == 0x000004, "Wrong alignment on ArmWrestlingMinigameWidget_C_UpdateRTPCs");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_UpdateRTPCs) == 0x000018, "Wrong size on ArmWrestlingMinigameWidget_C_UpdateRTPCs");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateRTPCs, Temp_bool_Variable) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_UpdateRTPCs::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateRTPCs, CallFunc_GetElapsedRoundTime_ReturnValue) == 0x000004, "Member 'ArmWrestlingMinigameWidget_C_UpdateRTPCs::CallFunc_GetElapsedRoundTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateRTPCs, CallFunc_Less_FloatFloat_ReturnValue) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_UpdateRTPCs::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateRTPCs, CallFunc_IsPlayer1_ReturnValue) == 0x000009, "Member 'ArmWrestlingMinigameWidget_C_UpdateRTPCs::CallFunc_IsPlayer1_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateRTPCs, CallFunc_MapRangeClamped_ReturnValue) == 0x00000C, "Member 'ArmWrestlingMinigameWidget_C_UpdateRTPCs::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateRTPCs, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_UpdateRTPCs::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateRTPCs, K2Node_Select_Default) == 0x000014, "Member 'ArmWrestlingMinigameWidget_C_UpdateRTPCs::K2Node_Select_Default' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.UpdateStats
// 0x0118 (0x0118 - 0x0000)
struct ArmWrestlingMinigameWidget_C_UpdateStats final
{
public:
	class ARBArmWreslingTable*                    Param_Table;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOpponentRating_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetRating_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C2F[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0080(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0098(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00B0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x00F0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0100(0x0018)()
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_UpdateStats) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_UpdateStats");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_UpdateStats) == 0x000118, "Wrong size on ArmWrestlingMinigameWidget_C_UpdateStats");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, Param_Table) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::Param_Table' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, CallFunc_GetOpponentRating_ReturnValue) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::CallFunc_GetOpponentRating_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, CallFunc_GetRating_ReturnValue) == 0x00000C, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::CallFunc_GetRating_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000028, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, K2Node_MakeArray_Array) == 0x000070, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000080, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, CallFunc_Format_ReturnValue) == 0x000098, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000B0, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, K2Node_MakeArray_Array_1) == 0x0000F0, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateStats, CallFunc_Format_ReturnValue_1) == 0x000100, "Member 'ArmWrestlingMinigameWidget_C_UpdateStats::CallFunc_Format_ReturnValue_1' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.OnPlayerDisconnected
// 0x0020 (0x0020 - 0x0000)
struct ArmWrestlingMinigameWidget_C_OnPlayerDisconnected final
{
public:
	class ARBArmWreslingTable*                    Param_Table;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBArmWreslingPanelComponent*           Panel;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              InteractingPlayer;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_OnPlayerDisconnected) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_OnPlayerDisconnected");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_OnPlayerDisconnected) == 0x000020, "Wrong size on ArmWrestlingMinigameWidget_C_OnPlayerDisconnected");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnPlayerDisconnected, Param_Table) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_OnPlayerDisconnected::Param_Table' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnPlayerDisconnected, Panel) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_OnPlayerDisconnected::Panel' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnPlayerDisconnected, InteractingPlayer) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_OnPlayerDisconnected::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_OnPlayerDisconnected, CallFunc_IsLocallyControlled_ReturnValue) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_OnPlayerDisconnected::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.UpdateHitZoneImages
// 0x0088 (0x0088 - 0x0000)
struct ArmWrestlingMinigameWidget_C_UpdateHitZoneImages final
{
public:
	int32                                         NumZones;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C30[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C31[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C32[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C33[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_7;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C34[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_UpdateHitZoneImages");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages) == 0x000088, "Wrong size on ArmWrestlingMinigameWidget_C_UpdateHitZoneImages");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, NumZones) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::NumZones' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_bool_Variable) == 0x000004, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_object_Variable) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_object_Variable_1) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_bool_Variable_1) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_float_Variable) == 0x00001C, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_float_Variable_1) == 0x000020, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_bool_Variable_2) == 0x000024, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_float_Variable_2) == 0x000028, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_float_Variable_3) == 0x00002C, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_int_Variable) == 0x000030, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_object_Variable_2) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_object_Variable_3) == 0x000040, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_object_Variable_4) == 0x000048, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_object_Variable_5) == 0x000050, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_object_Variable_6) == 0x000058, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, Temp_object_Variable_7) == 0x000060, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, K2Node_Select_Default) == 0x000068, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000070, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, K2Node_Select_Default_1) == 0x000078, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, K2Node_Select_Default_2) == 0x000080, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZoneImages, K2Node_Select_Default_3) == 0x000084, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZoneImages::K2Node_Select_Default_3' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.PlayerConnectionEvent
// 0x0020 (0x0020 - 0x0000)
struct ArmWrestlingMinigameWidget_C_PlayerConnectionEvent final
{
public:
	class ARBArmWreslingTable*                    Param_Table;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBArmWreslingPanelComponent*           Panel;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              InteractingPlayer;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_PlayerConnectionEvent) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_PlayerConnectionEvent");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_PlayerConnectionEvent) == 0x000020, "Wrong size on ArmWrestlingMinigameWidget_C_PlayerConnectionEvent");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerConnectionEvent, Param_Table) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_PlayerConnectionEvent::Param_Table' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerConnectionEvent, Panel) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_PlayerConnectionEvent::Panel' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerConnectionEvent, InteractingPlayer) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_PlayerConnectionEvent::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerConnectionEvent, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_PlayerConnectionEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerConnectionEvent, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'ArmWrestlingMinigameWidget_C_PlayerConnectionEvent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerConnectionEvent, CallFunc_IsValid_ReturnValue_2) == 0x00001A, "Member 'ArmWrestlingMinigameWidget_C_PlayerConnectionEvent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerConnectionEvent, CallFunc_BooleanAND_ReturnValue) == 0x00001B, "Member 'ArmWrestlingMinigameWidget_C_PlayerConnectionEvent::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.PlayerInputCallback
// 0x0098 (0x0098 - 0x0000)
struct ArmWrestlingMinigameWidget_C_PlayerInputCallback final
{
public:
	struct FArmWreslingPlayerRoundData            PlayerRoundData;                                   // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C35[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C36[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C37[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C38[0x6];                                     // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UHorizontalBox*                         K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                K2Node_Select_Default_1;                           // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveChildAt_ReturnValue;                // 0x0085(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RemoveChildAt_ReturnValue_1;              // 0x0086(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C39[0x1];                                     // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue_1;           // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_PlayerInputCallback) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_PlayerInputCallback");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_PlayerInputCallback) == 0x000098, "Wrong size on ArmWrestlingMinigameWidget_C_PlayerInputCallback");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, PlayerRoundData) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::PlayerRoundData' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, Temp_bool_Variable) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, Temp_float_Variable) == 0x00003C, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, K2Node_SwitchEnum_CmpSuccess) == 0x000040, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_Array_Length_ReturnValue) == 0x000044, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, Temp_float_Variable_1) == 0x000048, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_Array_Get_Item) == 0x000050, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, Temp_bool_Variable_1) == 0x000054, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, Temp_bool_Variable_2) == 0x000055, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_GetPawnInteracting_ReturnValue) == 0x000058, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, K2Node_DynamicCast_AsRB_Player) == 0x000060, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000069, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, K2Node_Select_Default) == 0x000070, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, K2Node_Select_Default_1) == 0x000078, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_GetChildrenCount_ReturnValue) == 0x000080, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_Greater_IntInt_ReturnValue) == 0x000084, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_RemoveChildAt_ReturnValue) == 0x000085, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_RemoveChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_RemoveChildAt_ReturnValue_1) == 0x000086, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_RemoveChildAt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, K2Node_Select_Default_2) == 0x000088, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_GetChildrenCount_ReturnValue_1) == 0x00008C, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_GetChildrenCount_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_PlayerInputCallback, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000090, "Member 'ArmWrestlingMinigameWidget_C_PlayerInputCallback::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.AddConsecutiveHitFeedbackInBox
// 0x0048 (0x0048 - 0x0000)
struct ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox final
{
public:
	class UHorizontalBox*                         HorizontalBox;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitIndex;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C3A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       AnimToPlay;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C3B[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize;                  // 0x001C(0x0008)(NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C3C[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UArmWrestling_WinFeedbackWidget_C*      CallFunc_Create_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_SlotAsHorizontalBoxSlot_ReturnValue;      // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox) == 0x000048, "Wrong size on ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, HorizontalBox) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::HorizontalBox' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, HitIndex) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::HitIndex' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, AnimToPlay) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::AnimToPlay' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000019, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, K2Node_MakeStruct_SlateChildSize) == 0x00001C, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::K2Node_MakeStruct_SlateChildSize' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000024, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, CallFunc_Create_ReturnValue) == 0x000028, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, CallFunc_SlotAsHorizontalBoxSlot_ReturnValue) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::CallFunc_SlotAsHorizontalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000040, "Member 'ArmWrestlingMinigameWidget_C_AddConsecutiveHitFeedbackInBox::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.Success Event
// 0x0098 (0x0098 - 0x0000)
struct ArmWrestlingMinigameWidget_C_Success_Event final
{
public:
	class URBArmWreslingPanelComponent*           Panel;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CursorPosition;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Multiplier;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InputLevel;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C3D[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Temp_object_Variable_2;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Temp_object_Variable_3;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Temp_object_Variable_4;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Temp_object_Variable_5;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          Temp_object_Variable_6;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0068(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventGlobal_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C3E[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_Success_Event) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_Success_Event");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_Success_Event) == 0x000098, "Wrong size on ArmWrestlingMinigameWidget_C_Success_Event");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Panel) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Panel' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, CursorPosition) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::CursorPosition' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Multiplier) == 0x00000C, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Multiplier' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, InputLevel) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::InputLevel' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Temp_int_Variable) == 0x000014, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, CallFunc_Clamp_ReturnValue) == 0x00001C, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Temp_object_Variable) == 0x000020, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000028, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Temp_object_Variable_1) == 0x000030, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Temp_object_Variable_2) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Temp_object_Variable_3) == 0x000040, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Temp_object_Variable_4) == 0x000048, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Temp_object_Variable_5) == 0x000050, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Temp_object_Variable_6) == 0x000058, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, K2Node_Select_Default) == 0x000060, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, Temp_delegate_Variable) == 0x000068, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, CallFunc_PlayAnimation_ReturnValue) == 0x000078, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, CallFunc_PostEventGlobal_ReturnValue) == 0x000080, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::CallFunc_PostEventGlobal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, CallFunc_GetPawnInteracting_ReturnValue) == 0x000088, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Success_Event, CallFunc_IsLocallyControlled_ReturnValue) == 0x000090, "Member 'ArmWrestlingMinigameWidget_C_Success_Event::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.UpdateHitZone
// 0x000C (0x000C - 0x0000)
struct ArmWrestlingMinigameWidget_C_UpdateHitZone final
{
public:
	float                                         EndZoneOffset;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndZoneSize;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_UpdateHitZone) == 0x000004, "Wrong alignment on ArmWrestlingMinigameWidget_C_UpdateHitZone");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_UpdateHitZone) == 0x00000C, "Wrong size on ArmWrestlingMinigameWidget_C_UpdateHitZone");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZone, EndZoneOffset) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZone::EndZoneOffset' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZone, EndZoneSize) == 0x000004, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZone::EndZoneSize' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateHitZone, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_UpdateHitZone::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.GetOpposingPanel
// 0x0018 (0x0018 - 0x0000)
struct ArmWrestlingMinigameWidget_C_GetOpposingPanel final
{
public:
	class URBArmWreslingPanelComponent*           Panel;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C3F[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URBArmWreslingPanelComponent*           K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_GetOpposingPanel) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_GetOpposingPanel");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_GetOpposingPanel) == 0x000018, "Wrong size on ArmWrestlingMinigameWidget_C_GetOpposingPanel");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetOpposingPanel, Panel) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_GetOpposingPanel::Panel' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetOpposingPanel, Temp_bool_Variable) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_GetOpposingPanel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetOpposingPanel, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'ArmWrestlingMinigameWidget_C_GetOpposingPanel::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetOpposingPanel, K2Node_Select_Default) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_GetOpposingPanel::K2Node_Select_Default' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.Shake Camera
// 0x0188 (0x0188 - 0x0000)
struct ArmWrestlingMinigameWidget_C_Shake_Camera final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C40[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C41[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCameraShakeData>               K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ConstParm, ReferenceParm)
	struct FCameraShakeData                       CallFunc_Array_Random_OutItem;                     // 0x0038(0x0090)(NoDestructor)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C42[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCameraShakeData>               K2Node_MakeArray_Array_1;                          // 0x00D0(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C43[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraShakeData                       CallFunc_Array_Random_OutItem_1;                   // 0x00F0(0x0090)(NoDestructor)
	int32                                         CallFunc_Array_Random_OutIndex_1;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_Shake_Camera) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_Shake_Camera");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_Shake_Camera) == 0x000188, "Wrong size on ArmWrestlingMinigameWidget_C_Shake_Camera");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, Amount) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::Amount' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_GetPawnInteracting_ReturnValue) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, K2Node_DynamicCast_AsRB_Player) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000021, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000022, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000023, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, K2Node_MakeArray_Array) == 0x000028, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_Array_Random_OutItem) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_Array_Random_OutIndex) == 0x0000C8, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, K2Node_MakeArray_Array_1) == 0x0000D0, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000E0, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_Array_Random_OutItem_1) == 0x0000F0, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_Array_Random_OutItem_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Shake_Camera, CallFunc_Array_Random_OutIndex_1) == 0x000180, "Member 'ArmWrestlingMinigameWidget_C_Shake_Camera::CallFunc_Array_Random_OutIndex_1' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.Round Ended Event
// 0x0118 (0x0118 - 0x0000)
struct ArmWrestlingMinigameWidget_C_Round_Ended_Event final
{
public:
	struct FArmWreslingPlayerRoundData            Player1RoundData;                                  // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FArmWreslingPlayerRoundData            Player2RoundData;                                  // 0x0038(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FArmWreslingPlayerRoundData            OpposingPlayerRoundData;                           // 0x0070(0x0038)(Edit, BlueprintVisible, ContainsInstancedReference)
	struct FArmWreslingPlayerRoundData            LocalPlayerRoundData;                              // 0x00A8(0x0038)(Edit, BlueprintVisible, ContainsInstancedReference)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x00E0(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEventGlobal_ReturnValue;              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C44[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C45[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_Round_Ended_Event) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_Round_Ended_Event");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_Round_Ended_Event) == 0x000118, "Wrong size on ArmWrestlingMinigameWidget_C_Round_Ended_Event");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, Player1RoundData) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::Player1RoundData' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, Player2RoundData) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::Player2RoundData' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, OpposingPlayerRoundData) == 0x000070, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::OpposingPlayerRoundData' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, LocalPlayerRoundData) == 0x0000A8, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::LocalPlayerRoundData' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, Temp_delegate_Variable) == 0x0000E0, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, CallFunc_PostEventGlobal_ReturnValue) == 0x0000F0, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::CallFunc_PostEventGlobal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, CallFunc_GetPawnInteracting_ReturnValue) == 0x0000F8, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, CallFunc_IsLocallyControlled_ReturnValue) == 0x000100, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, CallFunc_PlayAnimation_ReturnValue) == 0x000108, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Round_Ended_Event, CallFunc_GetEndTime_ReturnValue) == 0x000110, "Member 'ArmWrestlingMinigameWidget_C_Round_Ended_Event::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.TableStateChangedEvent
// 0x0068 (0x0068 - 0x0000)
struct ArmWrestlingMinigameWidget_C_TableStateChangedEvent final
{
public:
	class ARBArmWreslingTable*                    Param_Table;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0008(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	EArmWreslingTableState                        CallFunc_GetTableState_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C46[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEventGlobal_ReturnValue;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C47[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBHUDWidget*                           CallFunc_GetHUDWidget_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBHUDWidget*                           CallFunc_GetHUDWidget_ReturnValue_1;               // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPlayerHud_C*                           K2Node_DynamicCast_AsPlayer_Hud;                   // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C48[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerHud_C*                           K2Node_DynamicCast_AsPlayer_Hud_1;                 // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C49[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_TableStateChangedEvent");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent) == 0x000068, "Wrong size on ArmWrestlingMinigameWidget_C_TableStateChangedEvent");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, Param_Table) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::Param_Table' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, Temp_delegate_Variable) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, CallFunc_GetTableState_ReturnValue) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::CallFunc_GetTableState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, CallFunc_PostEventGlobal_ReturnValue) == 0x00001C, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::CallFunc_PostEventGlobal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, K2Node_SwitchEnum_CmpSuccess) == 0x000020, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, CallFunc_GetHUDWidget_ReturnValue) == 0x000028, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::CallFunc_GetHUDWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, CallFunc_GetHUDWidget_ReturnValue_1) == 0x000030, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::CallFunc_GetHUDWidget_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, K2Node_DynamicCast_AsPlayer_Hud) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::K2Node_DynamicCast_AsPlayer_Hud' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, K2Node_DynamicCast_AsPlayer_Hud_1) == 0x000048, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::K2Node_DynamicCast_AsPlayer_Hud_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, CallFunc_GetPawnInteracting_ReturnValue) == 0x000058, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_TableStateChangedEvent, CallFunc_IsLocallyControlled_ReturnValue) == 0x000060, "Member 'ArmWrestlingMinigameWidget_C_TableStateChangedEvent::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.FailedEvent
// 0x00A0 (0x00A0 - 0x0000)
struct ArmWrestlingMinigameWidget_C_FailedEvent final
{
public:
	class URBArmWreslingPanelComponent*           Panel;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartCursorPosition;                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndCursorPosition;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EArmWreslingPanelInputFailType                FailType;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C4A[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C4B[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C4C[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x002C(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEventGlobal_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0040(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x0050(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEventGlobal_ReturnValue_1;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEventGlobal_ReturnValue_2;            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                K2Node_Select_Default;                             // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue_1;         // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C4D[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue_2;         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_2;        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C4E[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_FailedEvent) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_FailedEvent");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_FailedEvent) == 0x0000A0, "Wrong size on ArmWrestlingMinigameWidget_C_FailedEvent");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, Panel) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::Panel' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, StartCursorPosition) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::StartCursorPosition' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, EndCursorPosition) == 0x00000C, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::EndCursorPosition' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, FailType) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::FailType' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, Temp_bool_Variable) == 0x000011, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000012, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_Lerp_ReturnValue) == 0x000014, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_GetPawnInteracting_ReturnValue) == 0x000020, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_IsLocallyControlled_ReturnValue) == 0x000028, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, Temp_delegate_Variable) == 0x00002C, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_PostEventGlobal_ReturnValue) == 0x00003C, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_PostEventGlobal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, Temp_delegate_Variable_1) == 0x000040, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, Temp_delegate_Variable_2) == 0x000050, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_PostEventGlobal_ReturnValue_1) == 0x000060, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_PostEventGlobal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_PostEventGlobal_ReturnValue_2) == 0x000064, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_PostEventGlobal_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, K2Node_Select_Default) == 0x000068, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_PlayAnimation_ReturnValue) == 0x000070, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_GetPawnInteracting_ReturnValue_1) == 0x000078, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_GetPawnInteracting_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000080, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_GetPawnInteracting_ReturnValue_2) == 0x000088, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_GetPawnInteracting_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_IsLocallyControlled_ReturnValue_2) == 0x000090, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_IsLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_FailedEvent, CallFunc_PlayAnimation_ReturnValue_1) == 0x000098, "Member 'ArmWrestlingMinigameWidget_C_FailedEvent::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.BindArmWrestlingEvents
// 0x00C8 (0x00C8 - 0x0000)
struct ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents final
{
public:
	bool                                          Unbind;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C4F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3C50[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AArmWreslingTable_BP_C*                 K2Node_DynamicCast_AsArm_Wresling_Table_BP;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C51[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bExiting, float StartExitTimestamp)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ARBArmWreslingTable* Table)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class URBArmWreslingPanelComponent* Panel, float CursorPosition, float Multiplier, int32 InputLevel)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(struct FArmWreslingPlayerRoundData& PlayerRoundData)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ARBArmWreslingTable* Table, class URBArmWreslingPanelComponent* Panel, class ARBPlayer* InteractingPlayer)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x0064(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ARBArmWreslingTable* Table, class URBArmWreslingPanelComponent* Panel, class ARBPlayer* InteractingPlayer)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(float EndZoneOffset, int32 EndZoneSize)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x0084(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(struct FArmWreslingPlayerRoundData& Player1RoundData, struct FArmWreslingPlayerRoundData& Player2RoundData)> K2Node_CreateDelegate_OutputDelegate_8;            // 0x0094(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ARBArmWreslingTable* Table)> K2Node_CreateDelegate_OutputDelegate_9;            // 0x00A4(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class URBArmWreslingPanelComponent* Panel, float StartCursorPosition, float EndCursorPosition, EArmWreslingPanelInputFailType FailType)> K2Node_CreateDelegate_OutputDelegate_10;           // 0x00B4(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents) == 0x0000C8, "Wrong size on ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, Unbind) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::Unbind' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_DynamicCast_AsArm_Wresling_Table_BP) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_DynamicCast_AsArm_Wresling_Table_BP' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_2) == 0x000034, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_3) == 0x000044, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_4) == 0x000054, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_5) == 0x000064, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_6) == 0x000074, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_7) == 0x000084, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_8) == 0x000094, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_9) == 0x0000A4, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents, K2Node_CreateDelegate_OutputDelegate_10) == 0x0000B4, "Member 'ArmWrestlingMinigameWidget_C_BindArmWrestlingEvents::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.GetOpponentPlayer
// 0x0028 (0x0028 - 0x0000)
struct ArmWrestlingMinigameWidget_C_GetOpponentPlayer final
{
public:
	class ARBPlayer*                              RBPlayer;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBArmWreslingPanelComponent*           CallFunc_GetOpposingPanel_Panel;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_GetOpponentPlayer) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_GetOpponentPlayer");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_GetOpponentPlayer) == 0x000028, "Wrong size on ArmWrestlingMinigameWidget_C_GetOpponentPlayer");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetOpponentPlayer, RBPlayer) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_GetOpponentPlayer::RBPlayer' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetOpponentPlayer, CallFunc_GetOpposingPanel_Panel) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_GetOpponentPlayer::CallFunc_GetOpposingPanel_Panel' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetOpponentPlayer, CallFunc_GetPawnInteracting_ReturnValue) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_GetOpponentPlayer::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetOpponentPlayer, K2Node_DynamicCast_AsRB_Player) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_GetOpponentPlayer::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_GetOpponentPlayer, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'ArmWrestlingMinigameWidget_C_GetOpponentPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.UpdateNeedle
// 0x0010 (0x0010 - 0x0000)
struct ArmWrestlingMinigameWidget_C_UpdateNeedle final
{
public:
	float                                         NewLocalVar_0;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCursorPosition_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EArmWreslingTableState                        CallFunc_GetTableState_ReturnValue;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_UpdateNeedle) == 0x000004, "Wrong alignment on ArmWrestlingMinigameWidget_C_UpdateNeedle");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_UpdateNeedle) == 0x000010, "Wrong size on ArmWrestlingMinigameWidget_C_UpdateNeedle");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateNeedle, NewLocalVar_0) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_UpdateNeedle::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateNeedle, CallFunc_GetCursorPosition_ReturnValue) == 0x000004, "Member 'ArmWrestlingMinigameWidget_C_UpdateNeedle::CallFunc_GetCursorPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateNeedle, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_UpdateNeedle::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateNeedle, CallFunc_GetTableState_ReturnValue) == 0x00000C, "Member 'ArmWrestlingMinigameWidget_C_UpdateNeedle::CallFunc_GetTableState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateNeedle, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000D, "Member 'ArmWrestlingMinigameWidget_C_UpdateNeedle::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.UpdateWinner
// 0x0150 (0x0150 - 0x0000)
struct ArmWrestlingMinigameWidget_C_UpdateWinner final
{
public:
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C52[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0018(0x0018)()
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C53[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0038(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0048(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAnyChildren_ReturnValue;               // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyChildren_ReturnValue_1;             // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C54[0x4];                                     // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetGamePlayerName_ReturnValue;            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C55[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00D0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00E8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0128(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0138(0x0018)()
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_UpdateWinner) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_UpdateWinner");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_UpdateWinner) == 0x000150, "Wrong size on ArmWrestlingMinigameWidget_C_UpdateWinner");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, K2Node_MakeArray_Array) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, Temp_bool_Variable) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_Format_ReturnValue) == 0x000018, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, Temp_byte_Variable) == 0x000030, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, Temp_byte_Variable_1) == 0x000031, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, Temp_bool_Variable_1) == 0x000032, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, Temp_byte_Variable_2) == 0x000033, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, Temp_byte_Variable_3) == 0x000034, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, K2Node_MakeArray_Array_1) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_Format_ReturnValue_1) == 0x000048, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_PlayAnimation_ReturnValue) == 0x0000A0, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_HasAnyChildren_ReturnValue) == 0x0000A8, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_HasAnyChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_HasAnyChildren_ReturnValue_1) == 0x0000A9, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_HasAnyChildren_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, K2Node_Select_Default) == 0x0000AA, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, K2Node_Select_Default_1) == 0x0000AB, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_PlayAnimation_ReturnValue_1) == 0x0000B0, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_GetGamePlayerName_ReturnValue) == 0x0000B8, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_GetGamePlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_IsValid_ReturnValue) == 0x0000C8, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_Conv_StringToText_ReturnValue) == 0x0000D0, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000E8, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, K2Node_MakeArray_Array_2) == 0x000128, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateWinner, CallFunc_Format_ReturnValue_2) == 0x000138, "Member 'ArmWrestlingMinigameWidget_C_UpdateWinner::CallFunc_Format_ReturnValue_2' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.UpdateTimer
// 0x0028 (0x0028 - 0x0000)
struct ArmWrestlingMinigameWidget_C_UpdateTimer final
{
public:
	float                                         CallFunc_GetElapsedRoundTime_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EArmWreslingTableState                        CallFunc_GetTableState_ReturnValue;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C56[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0010(0x0018)()
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_UpdateTimer) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_UpdateTimer");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_UpdateTimer) == 0x000028, "Wrong size on ArmWrestlingMinigameWidget_C_UpdateTimer");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateTimer, CallFunc_GetElapsedRoundTime_ReturnValue) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_UpdateTimer::CallFunc_GetElapsedRoundTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateTimer, CallFunc_GetTableState_ReturnValue) == 0x000004, "Member 'ArmWrestlingMinigameWidget_C_UpdateTimer::CallFunc_GetTableState_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateTimer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'ArmWrestlingMinigameWidget_C_UpdateTimer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateTimer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'ArmWrestlingMinigameWidget_C_UpdateTimer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateTimer, CallFunc_Abs_ReturnValue) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_UpdateTimer::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateTimer, CallFunc_Round_ReturnValue) == 0x00000C, "Member 'ArmWrestlingMinigameWidget_C_UpdateTimer::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_UpdateTimer, CallFunc_Conv_IntToText_ReturnValue) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_UpdateTimer::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.Init
// 0x0010 (0x0010 - 0x0000)
struct ArmWrestlingMinigameWidget_C_Init final
{
public:
	class ARBArmWreslingTable*                    Param_Table;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArmWreslingPanelComponent_BP_C*        Param_LocalPanel;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_Init) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_Init");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_Init) == 0x000010, "Wrong size on ArmWrestlingMinigameWidget_C_Init");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Init, Param_Table) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_Init::Param_Table' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Init, Param_LocalPanel) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_Init::Param_LocalPanel' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.Tick
// 0x003C (0x003C - 0x0000)
struct ArmWrestlingMinigameWidget_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_Tick) == 0x000004, "Wrong alignment on ArmWrestlingMinigameWidget_C_Tick");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_Tick) == 0x00003C, "Wrong size on ArmWrestlingMinigameWidget_C_Tick");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Tick, MyGeometry) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_Tick, InDeltaTime) == 0x000038, "Member 'ArmWrestlingMinigameWidget_C_Tick::InDeltaTime' has a wrong offset!");

// Function ArmWrestlingMinigameWidget.ArmWrestlingMinigameWidget_C.ExecuteUbergraph_ArmWrestlingMinigameWidget
// 0x0058 (0x0058 - 0x0000)
struct ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C57[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0010(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C58[0x1];                                     // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget) == 0x000008, "Wrong alignment on ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget");
static_assert(sizeof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget) == 0x000058, "Wrong size on ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget, EntryPoint) == 0x000000, "Member 'ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget, K2Node_Event_MyGeometry) == 0x000010, "Member 'ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget, K2Node_Event_InDeltaTime) == 0x000048, "Member 'ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget, CallFunc_IsValid_ReturnValue) == 0x00004C, "Member 'ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget, CallFunc_IsValid_ReturnValue_1) == 0x00004D, "Member 'ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget, CallFunc_BooleanAND_ReturnValue) == 0x00004E, "Member 'ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget, CallFunc_PlayAnimation_ReturnValue_1) == 0x000050, "Member 'ArmWrestlingMinigameWidget_C_ExecuteUbergraph_ArmWrestlingMinigameWidget::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");

}

