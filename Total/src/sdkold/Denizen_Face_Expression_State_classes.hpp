#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Denizen_Face_Expression_State

#include "Basic.hpp"

#include "Denizen_Expressions_Enum_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Denizen_Face_Expression_State.Denizen_Face_Expression_State_C
// 0x0008 (0x0038 - 0x0030)
class UDenizen_Face_Expression_State_C final : public UAnimNotifyState
{
public:
	EDenizen_Expressions_Enum                     WhichExpression;                                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9C[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HowMuchExpression;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool ExpressionStateOverride(class USkeletalMeshComponent* Mesh_Comp, EDenizen_Expressions_Enum Which_Anim, bool Is_Expressing, float Param_HowMuchExpression) const;
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float AnimDeltaTime) const;
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float AnimDeltaTime, float TotalDuration) const;
	class FString GetNotifyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Denizen_Face_Expression_State_C">();
	}
	static class UDenizen_Face_Expression_State_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDenizen_Face_Expression_State_C>();
	}
};
static_assert(alignof(UDenizen_Face_Expression_State_C) == 0x000008, "Wrong alignment on UDenizen_Face_Expression_State_C");
static_assert(sizeof(UDenizen_Face_Expression_State_C) == 0x000038, "Wrong size on UDenizen_Face_Expression_State_C");
static_assert(offsetof(UDenizen_Face_Expression_State_C, WhichExpression) == 0x000030, "Member 'UDenizen_Face_Expression_State_C::WhichExpression' has a wrong offset!");
static_assert(offsetof(UDenizen_Face_Expression_State_C, HowMuchExpression) == 0x000034, "Member 'UDenizen_Face_Expression_State_C::HowMuchExpression' has a wrong offset!");

}

