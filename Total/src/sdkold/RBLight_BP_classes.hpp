#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBLight_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RBLight_BP.RBLight_BP_C
// 0x01B0 (0x07A0 - 0x05F0)
class ARBLight_BP_C : public ARBLight
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   LightBulb;                                         // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightMesh;                                         // 0x0600(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DebugArrow;                                        // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      AmbDustCone;                                       // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      AmbDustSphere;                                     // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBSoundComponent*                      RBSound;                                           // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URBRandomizableHelperComponent*         RBRandomizableHelper;                              // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CableSMeshComp;                                    // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AnchorSMeshComp;                                   // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bVisible_OLD;                                      // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321E[0x7];                                     // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             LightVisibilityChanged;                            // 0x0650(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bUseDynamicLighting_OLD;                           // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bBakeIndirectOnMovables_OLD;                       // 0x0661(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsFlickering_OLD;                                 // 0x0662(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bNoStaticLightingWhenFlickering_OLD;               // 0x0663(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseVolumetricFogLights_OLD;                        // 0x0664(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseVolumetricFog_OLD;                              // 0x0665(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DONTBakeFog_OLD;                                   // 0x0666(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseAnchorAndCables;                                // 0x0667(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                AnchorPosition;                                    // 0x0668(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity_OLD;                                // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensityScale_OLD;                           // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_OLD;                                         // 0x067C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321F[0x4];                                     // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULightComponent*>                AllLights_0;                                       // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class ULightComponent*>                DynamicLights_OLD;                                 // 0x06A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class ULightComponent*>                StaticLights_OLD;                                  // 0x06B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class ULightComponent*>                DualLights_OLD;                                    // 0x06C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class URBVolumetricFogLightComponent*> FogLights_OLD;                                     // 0x06D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         RadiusScaleMultiplier_OLD;                         // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickeringIntensity_OLD;                           // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlickeringSpeed_OLD;                               // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VolumetricFogIntensity_OLD;                        // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ConeAngle_OLD;                                     // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShadowResolutionScale_OLD;                         // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShadowBias_OLD;                                    // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IndirectLightingIntensity_OLD;                     // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FlickeringCurve_OLD;                               // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            AnchorStaticMesh;                                  // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CableStaticMesh;                                   // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDrawDistanceFadeStart_OLD;                      // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDrawDistanceFadeEnd_OLD;                        // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLightingChannels                      LightingChannels_OLD;                              // 0x0720(0x0001)(Edit, BlueprintVisible, NoDestructor)
	bool                                          ForceSound;                                        // 0x0721(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          VolumetricFogCastShadows_OLD;                      // 0x0722(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Use_ConeShape;                                     // 0x0723(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         EmitterConeFar;                                    // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EmitterConeAngle;                                  // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ConeShapeOffset;                                   // 0x072C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRateCone;                                     // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ConeShapeBiasRadius;                               // 0x073C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_SphereShape;                                   // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3220[0x3];                                     // 0x0741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnRateSphere;                                   // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SphereEmitterRadius;                               // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DustSize;                                          // 0x074C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DustColor;                                         // 0x0750(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELightClipPlaneMode                           ClipPlane_OLD;                                     // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3221[0x3];                                     // 0x0761(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClipPlaneDistance_OLD;                             // 0x0764(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseBulb;                                           // 0x0768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animation_Set_Material_Dynamic_Data_A_OLD;         // 0x0769(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animation_Set_Material_Dynamic_Data_B_OLD;         // 0x076A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animation_Set_Material_Dynamic_Data_G_OLD;         // 0x076B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Animation_Set_Material_Dynamic_Data_R_OLD;         // 0x076C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3222[0x3];                                     // 0x076D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Animated_Material_Dynamic_Data_Intensity_OLD;      // 0x0770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLinkFogLightColor_OLD;                            // 0x0774(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3223[0x3];                                     // 0x0775(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDrawDistanceMultiplier_OLD;                     // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverrideAll_OLD;                                  // 0x077C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOverrideIntensities_OLD;                          // 0x077D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOverrideColor_OLD;                                // 0x077E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOverrideFog_OLD;                                  // 0x077F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOverrideConeOpening_OLD;                          // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bOverrideRadius_OLD;                               // 0x0781(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3224[0x6];                                     // 0x0782(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AnimationCurve_OLD;                                // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayingAnimationCurve_OLD;                      // 0x0790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3225[0x3];                                     // 0x0791(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationCurveStartTime_OLD;                       // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReflectionDiffuseBrightness_OLD;                   // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldResetWithStageOverride_OLD;                 // 0x079C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ValuesMigratedV1;                                  // 0x079D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bUseSound;                                         // 0x079E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	bool GetStateName(class FString* StateA, class FString* StateB);
	bool BP_MapCheck(EMapCheckType CheckType, class FString* OutErrorMsg);
	void MigrateOldValues();
	void SetUseBulb();
	void GetClipPlaneDistance();
	void SetDustParticle(bool IsRuntime);
	void ConstructAudio();
	void SetVisible(bool Visible);
	void Initialize(bool IsRuntime);
	void SetAnchorAndCablePosition(bool bIsRuntime);
	void UserConstructionScript();
	void OnPostActorsPasted(const TArray<class AActor*>& PastedActors);
	void PostAddedToLevel();
	void PostDuplicated(class AActor* DuplicationParent);
	void PostEditChange(const class FName& PropertyName);
	void PostEditMove(bool bFinished);
	void TickSelected();
	void LightingScenarioChanged();
	void PrepareState(bool bStateA, class AActor* RandomOwner);
	void SetShouldBeIgnoredForLots(bool bValue);
	void SetState(bool bStateA);
	void OnEditorPostLoad();
	void OnBPConstruction();
	void ExecuteUbergraph_RBLight_BP(int32 EntryPoint);
	void LightVisibilityChanged__DelegateSignature();
	bool FixUp();

	bool IsStateA() const;
	bool ShouldBeIgnoredForLots() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RBLight_BP_C">();
	}
	static class ARBLight_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARBLight_BP_C>();
	}
};
static_assert(alignof(ARBLight_BP_C) == 0x000010, "Wrong alignment on ARBLight_BP_C");
static_assert(sizeof(ARBLight_BP_C) == 0x0007A0, "Wrong size on ARBLight_BP_C");
static_assert(offsetof(ARBLight_BP_C, UberGraphFrame) == 0x0005F0, "Member 'ARBLight_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, LightBulb) == 0x0005F8, "Member 'ARBLight_BP_C::LightBulb' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, LightMesh) == 0x000600, "Member 'ARBLight_BP_C::LightMesh' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, DebugArrow) == 0x000608, "Member 'ARBLight_BP_C::DebugArrow' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, AmbDustCone) == 0x000610, "Member 'ARBLight_BP_C::AmbDustCone' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, AmbDustSphere) == 0x000618, "Member 'ARBLight_BP_C::AmbDustSphere' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, RBSound) == 0x000620, "Member 'ARBLight_BP_C::RBSound' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, RBRandomizableHelper) == 0x000628, "Member 'ARBLight_BP_C::RBRandomizableHelper' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, CableSMeshComp) == 0x000630, "Member 'ARBLight_BP_C::CableSMeshComp' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, AnchorSMeshComp) == 0x000638, "Member 'ARBLight_BP_C::AnchorSMeshComp' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, DefaultSceneRoot) == 0x000640, "Member 'ARBLight_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bVisible_OLD) == 0x000648, "Member 'ARBLight_BP_C::bVisible_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, LightVisibilityChanged) == 0x000650, "Member 'ARBLight_BP_C::LightVisibilityChanged' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bUseDynamicLighting_OLD) == 0x000660, "Member 'ARBLight_BP_C::bUseDynamicLighting_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bBakeIndirectOnMovables_OLD) == 0x000661, "Member 'ARBLight_BP_C::bBakeIndirectOnMovables_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bIsFlickering_OLD) == 0x000662, "Member 'ARBLight_BP_C::bIsFlickering_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bNoStaticLightingWhenFlickering_OLD) == 0x000663, "Member 'ARBLight_BP_C::bNoStaticLightingWhenFlickering_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, UseVolumetricFogLights_OLD) == 0x000664, "Member 'ARBLight_BP_C::UseVolumetricFogLights_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, UseVolumetricFog_OLD) == 0x000665, "Member 'ARBLight_BP_C::UseVolumetricFog_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, DONTBakeFog_OLD) == 0x000666, "Member 'ARBLight_BP_C::DONTBakeFog_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, UseAnchorAndCables) == 0x000667, "Member 'ARBLight_BP_C::UseAnchorAndCables' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, AnchorPosition) == 0x000668, "Member 'ARBLight_BP_C::AnchorPosition' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, LightIntensity_OLD) == 0x000674, "Member 'ARBLight_BP_C::LightIntensity_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, LightIntensityScale_OLD) == 0x000678, "Member 'ARBLight_BP_C::LightIntensityScale_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, Color_OLD) == 0x00067C, "Member 'ARBLight_BP_C::Color_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, AllLights_0) == 0x000690, "Member 'ARBLight_BP_C::AllLights_0' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, DynamicLights_OLD) == 0x0006A0, "Member 'ARBLight_BP_C::DynamicLights_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, StaticLights_OLD) == 0x0006B0, "Member 'ARBLight_BP_C::StaticLights_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, DualLights_OLD) == 0x0006C0, "Member 'ARBLight_BP_C::DualLights_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, FogLights_OLD) == 0x0006D0, "Member 'ARBLight_BP_C::FogLights_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, RadiusScaleMultiplier_OLD) == 0x0006E0, "Member 'ARBLight_BP_C::RadiusScaleMultiplier_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, FlickeringIntensity_OLD) == 0x0006E4, "Member 'ARBLight_BP_C::FlickeringIntensity_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, FlickeringSpeed_OLD) == 0x0006E8, "Member 'ARBLight_BP_C::FlickeringSpeed_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, VolumetricFogIntensity_OLD) == 0x0006EC, "Member 'ARBLight_BP_C::VolumetricFogIntensity_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ConeAngle_OLD) == 0x0006F0, "Member 'ARBLight_BP_C::ConeAngle_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ShadowResolutionScale_OLD) == 0x0006F4, "Member 'ARBLight_BP_C::ShadowResolutionScale_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ShadowBias_OLD) == 0x0006F8, "Member 'ARBLight_BP_C::ShadowBias_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, IndirectLightingIntensity_OLD) == 0x0006FC, "Member 'ARBLight_BP_C::IndirectLightingIntensity_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, FlickeringCurve_OLD) == 0x000700, "Member 'ARBLight_BP_C::FlickeringCurve_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, AnchorStaticMesh) == 0x000708, "Member 'ARBLight_BP_C::AnchorStaticMesh' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, CableStaticMesh) == 0x000710, "Member 'ARBLight_BP_C::CableStaticMesh' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, MaxDrawDistanceFadeStart_OLD) == 0x000718, "Member 'ARBLight_BP_C::MaxDrawDistanceFadeStart_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, MaxDrawDistanceFadeEnd_OLD) == 0x00071C, "Member 'ARBLight_BP_C::MaxDrawDistanceFadeEnd_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, LightingChannels_OLD) == 0x000720, "Member 'ARBLight_BP_C::LightingChannels_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ForceSound) == 0x000721, "Member 'ARBLight_BP_C::ForceSound' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, VolumetricFogCastShadows_OLD) == 0x000722, "Member 'ARBLight_BP_C::VolumetricFogCastShadows_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, Use_ConeShape) == 0x000723, "Member 'ARBLight_BP_C::Use_ConeShape' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, EmitterConeFar) == 0x000724, "Member 'ARBLight_BP_C::EmitterConeFar' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, EmitterConeAngle) == 0x000728, "Member 'ARBLight_BP_C::EmitterConeAngle' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ConeShapeOffset) == 0x00072C, "Member 'ARBLight_BP_C::ConeShapeOffset' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, SpawnRateCone) == 0x000738, "Member 'ARBLight_BP_C::SpawnRateCone' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ConeShapeBiasRadius) == 0x00073C, "Member 'ARBLight_BP_C::ConeShapeBiasRadius' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, Use_SphereShape) == 0x000740, "Member 'ARBLight_BP_C::Use_SphereShape' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, SpawnRateSphere) == 0x000744, "Member 'ARBLight_BP_C::SpawnRateSphere' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, SphereEmitterRadius) == 0x000748, "Member 'ARBLight_BP_C::SphereEmitterRadius' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, DustSize) == 0x00074C, "Member 'ARBLight_BP_C::DustSize' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, DustColor) == 0x000750, "Member 'ARBLight_BP_C::DustColor' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ClipPlane_OLD) == 0x000760, "Member 'ARBLight_BP_C::ClipPlane_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ClipPlaneDistance_OLD) == 0x000764, "Member 'ARBLight_BP_C::ClipPlaneDistance_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, UseBulb) == 0x000768, "Member 'ARBLight_BP_C::UseBulb' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, Animation_Set_Material_Dynamic_Data_A_OLD) == 0x000769, "Member 'ARBLight_BP_C::Animation_Set_Material_Dynamic_Data_A_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, Animation_Set_Material_Dynamic_Data_B_OLD) == 0x00076A, "Member 'ARBLight_BP_C::Animation_Set_Material_Dynamic_Data_B_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, Animation_Set_Material_Dynamic_Data_G_OLD) == 0x00076B, "Member 'ARBLight_BP_C::Animation_Set_Material_Dynamic_Data_G_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, Animation_Set_Material_Dynamic_Data_R_OLD) == 0x00076C, "Member 'ARBLight_BP_C::Animation_Set_Material_Dynamic_Data_R_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, Animated_Material_Dynamic_Data_Intensity_OLD) == 0x000770, "Member 'ARBLight_BP_C::Animated_Material_Dynamic_Data_Intensity_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bLinkFogLightColor_OLD) == 0x000774, "Member 'ARBLight_BP_C::bLinkFogLightColor_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, MaxDrawDistanceMultiplier_OLD) == 0x000778, "Member 'ARBLight_BP_C::MaxDrawDistanceMultiplier_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bOverrideAll_OLD) == 0x00077C, "Member 'ARBLight_BP_C::bOverrideAll_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bOverrideIntensities_OLD) == 0x00077D, "Member 'ARBLight_BP_C::bOverrideIntensities_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bOverrideColor_OLD) == 0x00077E, "Member 'ARBLight_BP_C::bOverrideColor_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bOverrideFog_OLD) == 0x00077F, "Member 'ARBLight_BP_C::bOverrideFog_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bOverrideConeOpening_OLD) == 0x000780, "Member 'ARBLight_BP_C::bOverrideConeOpening_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bOverrideRadius_OLD) == 0x000781, "Member 'ARBLight_BP_C::bOverrideRadius_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, AnimationCurve_OLD) == 0x000788, "Member 'ARBLight_BP_C::AnimationCurve_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bIsPlayingAnimationCurve_OLD) == 0x000790, "Member 'ARBLight_BP_C::bIsPlayingAnimationCurve_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, AnimationCurveStartTime_OLD) == 0x000794, "Member 'ARBLight_BP_C::AnimationCurveStartTime_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ReflectionDiffuseBrightness_OLD) == 0x000798, "Member 'ARBLight_BP_C::ReflectionDiffuseBrightness_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bShouldResetWithStageOverride_OLD) == 0x00079C, "Member 'ARBLight_BP_C::bShouldResetWithStageOverride_OLD' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, ValuesMigratedV1) == 0x00079D, "Member 'ARBLight_BP_C::ValuesMigratedV1' has a wrong offset!");
static_assert(offsetof(ARBLight_BP_C, bUseSound) == 0x00079E, "Member 'ARBLight_BP_C::bUseSound' has a wrong offset!");

}

