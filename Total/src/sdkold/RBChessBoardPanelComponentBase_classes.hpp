#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBChessBoardPanelComponentBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass RBChessBoardPanelComponentBase.RBChessBoardPanelComponentBase_C
// 0x0060 (0x0A60 - 0x0A00)
class URBChessBoardPanelComponentBase_C final : public URBChessBoardPanelComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A00(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bSpinPromotingPiece;                               // 0x0A08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392E[0x7];                                     // 0x0A09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   PromotingSMComp;                                   // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChessMinigameWidget_C*                 Widget;                                            // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UChessPanel_GhostAnimBP_C*              GhostAnimBP;                                       // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFlashKingRed;                                     // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_392F[0x7];                                     // 0x0A29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBChessPieceComponent*                 King_Piece;                                        // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlashKingRedTimestamp;                             // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3930[0x4];                                     // 0x0A3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URBChessPieceComponent*                 LastUsedMovingPiece;                               // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bGameTied;                                         // 0x0A48(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bWon;                                              // 0x0A49(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bClockSoundEnabled;                                // 0x0A4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3931[0x5];                                     // 0x0A4B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URBChessPieceComponent*                 RevertingPiece;                                    // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SetPlayerAnimState(EChessGamePlayerAnimState PlayerAnimState);
	void RefreshAllOtherPiecesPositions(class URBChessPieceComponent* PieceToIgnore);
	void MovePieceWithHand(class URBChessPieceComponent* Piece);
	void SetClockTickingSoundActivated(bool bActivated);
	void ManageClockTickingSound();
	void OnChessGameStateChangedEvent(EChessGameState ChessGameState);
	void SnapGhostAnimsToState(class ARBPawn* RBPawn);
	void OnRep_bWon();
	void OnRep_bGameTied();
	void GetChessGhostAnimBP(class UChessPanel_GhostAnimBP_C** NewParam);
	void OnChessGameEndReasonChanged(EChessGameEndReason ChessGameEndReason, EChessTeam WinningTeam);
	void ChessGameTurnTypeChanged(EChessGameTurnType NewTurnType, class ARBChessBoard* Param_ChessBoard);
	void FlashKingRed();
	void ManageHoldingPiece();
	void TryRemoveHud(bool Player1);
	void ShowHUD(bool Show);
	void SetSpinningPromotingPiece(EChessPieceType PieceType);
	void PromotingPieceFocusChanged(EChessPieceType PieceType);
	void ReceiveTick(float DeltaSeconds);
	void Event_PlayerEnteredGame(class ARBPlayer* Player);
	void Event_PlayerLeftGame(class ARBPlayer* Player);
	void OnWorldPopulateFinished();
	void Event_PlayerDropPieceAt(const struct FVector2D& Coords);
	void Event_ShowMoveLeavesOwnKingChecked(class URBChessPieceComponent* KingPiece);
	void OnChessGameTurnTypeChanged_Event_0(EChessGameTurnType ChessGameTurnType);
	void BindEvents();
	void BP_OnPawnInteractingChanged(class ARBPawn* NewPawnInteracting);
	void BP_ChessGamePlayerAnimStateChanged();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ExecuteUbergraph_RBChessBoardPanelComponentBase(int32 EntryPoint);

	bool GetPingEnabled(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, bool* OutIsEnabled) const;
	bool GetPingItemName(class FText* OutName) const;
	bool GetPlayerPingData(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FPlayerPingData* OutData) const;
	bool GetPlayerPingWorldLocation(class ARBPlayer* PingOwner, const struct FHitResult& HitResult, struct FVector* OutLocation) const;
	bool ShouldBPTick() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"RBChessBoardPanelComponentBase_C">();
	}
	static class URBChessBoardPanelComponentBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<URBChessBoardPanelComponentBase_C>();
	}
};
static_assert(alignof(URBChessBoardPanelComponentBase_C) == 0x000010, "Wrong alignment on URBChessBoardPanelComponentBase_C");
static_assert(sizeof(URBChessBoardPanelComponentBase_C) == 0x000A60, "Wrong size on URBChessBoardPanelComponentBase_C");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, UberGraphFrame) == 0x000A00, "Member 'URBChessBoardPanelComponentBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, bSpinPromotingPiece) == 0x000A08, "Member 'URBChessBoardPanelComponentBase_C::bSpinPromotingPiece' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, PromotingSMComp) == 0x000A10, "Member 'URBChessBoardPanelComponentBase_C::PromotingSMComp' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, Widget) == 0x000A18, "Member 'URBChessBoardPanelComponentBase_C::Widget' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, GhostAnimBP) == 0x000A20, "Member 'URBChessBoardPanelComponentBase_C::GhostAnimBP' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, bFlashKingRed) == 0x000A28, "Member 'URBChessBoardPanelComponentBase_C::bFlashKingRed' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, King_Piece) == 0x000A30, "Member 'URBChessBoardPanelComponentBase_C::King_Piece' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, FlashKingRedTimestamp) == 0x000A38, "Member 'URBChessBoardPanelComponentBase_C::FlashKingRedTimestamp' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, LastUsedMovingPiece) == 0x000A40, "Member 'URBChessBoardPanelComponentBase_C::LastUsedMovingPiece' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, bGameTied) == 0x000A48, "Member 'URBChessBoardPanelComponentBase_C::bGameTied' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, bWon) == 0x000A49, "Member 'URBChessBoardPanelComponentBase_C::bWon' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, bClockSoundEnabled) == 0x000A4A, "Member 'URBChessBoardPanelComponentBase_C::bClockSoundEnabled' has a wrong offset!");
static_assert(offsetof(URBChessBoardPanelComponentBase_C, RevertingPiece) == 0x000A50, "Member 'URBChessBoardPanelComponentBase_C::RevertingPiece' has a wrong offset!");

}

