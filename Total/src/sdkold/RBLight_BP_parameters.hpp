#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RBLight_BP

#include "Basic.hpp"

#include "OPP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RBLight_BP.RBLight_BP_C.GetStateName
// 0x0048 (0x0048 - 0x0000)
struct RBLight_BP_C_GetStateName final
{
public:
	class FString                                 StateA;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 StateB;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3226[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_MakeLiteralString_ReturnValue;            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_MakeLiteralString_ReturnValue_1;          // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(RBLight_BP_C_GetStateName) == 0x000008, "Wrong alignment on RBLight_BP_C_GetStateName");
static_assert(sizeof(RBLight_BP_C_GetStateName) == 0x000048, "Wrong size on RBLight_BP_C_GetStateName");
static_assert(offsetof(RBLight_BP_C_GetStateName, StateA) == 0x000000, "Member 'RBLight_BP_C_GetStateName::StateA' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetStateName, StateB) == 0x000010, "Member 'RBLight_BP_C_GetStateName::StateB' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetStateName, ReturnValue) == 0x000020, "Member 'RBLight_BP_C_GetStateName::ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetStateName, CallFunc_MakeLiteralString_ReturnValue) == 0x000028, "Member 'RBLight_BP_C_GetStateName::CallFunc_MakeLiteralString_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetStateName, CallFunc_MakeLiteralString_ReturnValue_1) == 0x000038, "Member 'RBLight_BP_C_GetStateName::CallFunc_MakeLiteralString_ReturnValue_1' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.BP_MapCheck
// 0x0058 (0x0058 - 0x0000)
struct RBLight_BP_C_BP_MapCheck final
{
public:
	EMapCheckType                                 CheckType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3227[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutErrorMsg;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3228[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPointLightComponent*>           CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPointLightComponent*                   CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3229[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USpotLightComponent*                    K2Node_DynamicCast_AsSpot_Light_Component;         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_BP_MapCheck) == 0x000008, "Wrong alignment on RBLight_BP_C_BP_MapCheck");
static_assert(sizeof(RBLight_BP_C_BP_MapCheck) == 0x000058, "Wrong size on RBLight_BP_C_BP_MapCheck");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, CheckType) == 0x000000, "Member 'RBLight_BP_C_BP_MapCheck::CheckType' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, OutErrorMsg) == 0x000008, "Member 'RBLight_BP_C_BP_MapCheck::OutErrorMsg' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, ReturnValue) == 0x000018, "Member 'RBLight_BP_C_BP_MapCheck::ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'RBLight_BP_C_BP_MapCheck::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'RBLight_BP_C_BP_MapCheck::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'RBLight_BP_C_BP_MapCheck::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000028, "Member 'RBLight_BP_C_BP_MapCheck::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, CallFunc_Array_Get_Item) == 0x000038, "Member 'RBLight_BP_C_BP_MapCheck::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'RBLight_BP_C_BP_MapCheck::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'RBLight_BP_C_BP_MapCheck::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, K2Node_DynamicCast_AsSpot_Light_Component) == 0x000048, "Member 'RBLight_BP_C_BP_MapCheck::K2Node_DynamicCast_AsSpot_Light_Component' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'RBLight_BP_C_BP_MapCheck::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000051, "Member 'RBLight_BP_C_BP_MapCheck::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'RBLight_BP_C_BP_MapCheck::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_BP_MapCheck, CallFunc_BooleanAND_ReturnValue_1) == 0x000053, "Member 'RBLight_BP_C_BP_MapCheck::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.MigrateOldValues
// 0x000C (0x000C - 0x0000)
struct RBLight_BP_C_MigrateOldValues final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_322A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBLight_BP_C_MigrateOldValues) == 0x000004, "Wrong alignment on RBLight_BP_C_MigrateOldValues");
static_assert(sizeof(RBLight_BP_C_MigrateOldValues) == 0x00000C, "Wrong size on RBLight_BP_C_MigrateOldValues");
static_assert(offsetof(RBLight_BP_C_MigrateOldValues, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'RBLight_BP_C_MigrateOldValues::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_MigrateOldValues, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'RBLight_BP_C_MigrateOldValues::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_MigrateOldValues, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'RBLight_BP_C_MigrateOldValues::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.SetUseBulb
// 0x0058 (0x0058 - 0x0000)
struct RBLight_BP_C_SetUseBulb final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_322B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UActorComponent*>                CallFunc_GetComponentByClass_outComponents;        // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UActorComponent*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetObjectName_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_322C[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_322D[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_SetUseBulb) == 0x000008, "Wrong alignment on RBLight_BP_C_SetUseBulb");
static_assert(sizeof(RBLight_BP_C_SetUseBulb) == 0x000058, "Wrong size on RBLight_BP_C_SetUseBulb");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, Temp_int_Array_Index_Variable) == 0x000000, "Member 'RBLight_BP_C_SetUseBulb::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'RBLight_BP_C_SetUseBulb::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'RBLight_BP_C_SetUseBulb::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, CallFunc_GetComponentByClass_outComponents) == 0x000010, "Member 'RBLight_BP_C_SetUseBulb::CallFunc_GetComponentByClass_outComponents' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, CallFunc_Array_Get_Item) == 0x000020, "Member 'RBLight_BP_C_SetUseBulb::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, CallFunc_GetObjectName_ReturnValue) == 0x000028, "Member 'RBLight_BP_C_SetUseBulb::CallFunc_GetObjectName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x000038, "Member 'RBLight_BP_C_SetUseBulb::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'RBLight_BP_C_SetUseBulb::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, CallFunc_FindSubstring_ReturnValue) == 0x000044, "Member 'RBLight_BP_C_SetUseBulb::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000048, "Member 'RBLight_BP_C_SetUseBulb::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, CallFunc_Array_Length_ReturnValue) == 0x00004C, "Member 'RBLight_BP_C_SetUseBulb::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetUseBulb, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'RBLight_BP_C_SetUseBulb::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.GetClipPlaneDistance
// 0x0200 (0x0200 - 0x0000)
struct RBLight_BP_C_GetClipPlaneDistance final
{
public:
	TArray<float>                                 HitDistances;                                      // 0x0000(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        Rays;                                              // 0x0010(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USpotLightComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	class ULightComponent*                        CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_322E[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_322F[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_MaxOfFloatArray_IndexOfMaxValue;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MaxOfFloatArray_MaxValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3230[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x00C0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3231[0x1];                                     // 0x015B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0164(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3232[0x4];                                     // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance_ReturnValue;              // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBLight_BP_C_GetClipPlaneDistance) == 0x000008, "Wrong alignment on RBLight_BP_C_GetClipPlaneDistance");
static_assert(sizeof(RBLight_BP_C_GetClipPlaneDistance) == 0x000200, "Wrong size on RBLight_BP_C_GetClipPlaneDistance");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, HitDistances) == 0x000000, "Member 'RBLight_BP_C_GetClipPlaneDistance::HitDistances' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, Rays) == 0x000010, "Member 'RBLight_BP_C_GetClipPlaneDistance::Rays' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, K2Node_MakeArray_Array) == 0x000020, "Member 'RBLight_BP_C_GetClipPlaneDistance::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, Temp_int_Array_Index_Variable) == 0x000030, "Member 'RBLight_BP_C_GetClipPlaneDistance::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'RBLight_BP_C_GetClipPlaneDistance::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, Temp_int_Array_Index_Variable_1) == 0x00003C, "Member 'RBLight_BP_C_GetClipPlaneDistance::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000040, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Array_Get_Item) == 0x000050, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00005C, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakVector_X) == 0x000068, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakVector_Y) == 0x00006C, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakVector_Z) == 0x000070, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_MakeVector_ReturnValue) == 0x000074, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000080, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BooleanAND_ReturnValue) == 0x000081, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'RBLight_BP_C_GetClipPlaneDistance::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Add_IntInt_ReturnValue_1) == 0x00008C, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_MaxOfFloatArray_IndexOfMaxValue) == 0x000090, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_MaxOfFloatArray_IndexOfMaxValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_MaxOfFloatArray_MaxValue) == 0x000094, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_MaxOfFloatArray_MaxValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Add_FloatFloat_ReturnValue) == 0x000098, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Array_Get_Item_1) == 0x00009C, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A8, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Array_Length_ReturnValue_1) == 0x0000B4, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B8, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, K2Node_MakeArray_Array_1) == 0x0000C0, "Member 'RBLight_BP_C_GetClipPlaneDistance::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_LineTraceSingle_OutHit) == 0x0000D0, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_LineTraceSingle_ReturnValue) == 0x000158, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_bBlockingHit) == 0x000159, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_bInitialOverlap) == 0x00015A, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_Time) == 0x00015C, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_Distance) == 0x000160, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_Location) == 0x000164, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_ImpactPoint) == 0x000170, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_Normal) == 0x00017C, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_ImpactNormal) == 0x000188, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_PhysMat) == 0x000198, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_HitActor) == 0x0001A0, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_HitComponent) == 0x0001A8, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_HitBoneName) == 0x0001B0, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_HitItem) == 0x0001B8, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_ElementIndex) == 0x0001BC, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_FaceIndex) == 0x0001C0, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_TraceStart) == 0x0001C4, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakHitResult_TraceEnd) == 0x0001D0, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakVector_X_1) == 0x0001DC, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakVector_Y_1) == 0x0001E0, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_BreakVector_Z_1) == 0x0001E4, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_MakeVector_ReturnValue_1) == 0x0001E8, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Vector_Distance_ReturnValue) == 0x0001F4, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_GetClipPlaneDistance, CallFunc_Array_Add_ReturnValue) == 0x0001F8, "Member 'RBLight_BP_C_GetClipPlaneDistance::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.SetDustParticle
// 0x0090 (0x0090 - 0x0000)
struct RBLight_BP_C_SetDustParticle final
{
public:
	bool                                          IsRuntime;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3233[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0004(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_SetDustParticle) == 0x000004, "Wrong alignment on RBLight_BP_C_SetDustParticle");
static_assert(sizeof(RBLight_BP_C_SetDustParticle) == 0x000090, "Wrong size on RBLight_BP_C_SetDustParticle");
static_assert(offsetof(RBLight_BP_C_SetDustParticle, IsRuntime) == 0x000000, "Member 'RBLight_BP_C_SetDustParticle::IsRuntime' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetDustParticle, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000004, "Member 'RBLight_BP_C_SetDustParticle::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetDustParticle, CallFunc_IsDedicatedServer_ReturnValue) == 0x00008C, "Member 'RBLight_BP_C_SetDustParticle::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.ConstructAudio
// 0x0018 (0x0018 - 0x0000)
struct RBLight_BP_C_ConstructAudio final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3234[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValueRange_MinValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueRange_MaxValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3235[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_ConstructAudio) == 0x000004, "Wrong alignment on RBLight_BP_C_ConstructAudio");
static_assert(sizeof(RBLight_BP_C_ConstructAudio) == 0x000018, "Wrong size on RBLight_BP_C_ConstructAudio");
static_assert(offsetof(RBLight_BP_C_ConstructAudio, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'RBLight_BP_C_ConstructAudio::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ConstructAudio, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'RBLight_BP_C_ConstructAudio::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ConstructAudio, CallFunc_GetValueRange_MinValue) == 0x000004, "Member 'RBLight_BP_C_ConstructAudio::CallFunc_GetValueRange_MinValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ConstructAudio, CallFunc_GetValueRange_MaxValue) == 0x000008, "Member 'RBLight_BP_C_ConstructAudio::CallFunc_GetValueRange_MaxValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ConstructAudio, CallFunc_IsValid_ReturnValue_2) == 0x00000C, "Member 'RBLight_BP_C_ConstructAudio::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ConstructAudio, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'RBLight_BP_C_ConstructAudio::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ConstructAudio, CallFunc_Less_FloatFloat_ReturnValue) == 0x000014, "Member 'RBLight_BP_C_ConstructAudio::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ConstructAudio, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'RBLight_BP_C_ConstructAudio::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ConstructAudio, CallFunc_BooleanOR_ReturnValue) == 0x000016, "Member 'RBLight_BP_C_ConstructAudio::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.SetVisible
// 0x0002 (0x0002 - 0x0000)
struct RBLight_BP_C_SetVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_SetVisible) == 0x000001, "Wrong alignment on RBLight_BP_C_SetVisible");
static_assert(sizeof(RBLight_BP_C_SetVisible) == 0x000002, "Wrong size on RBLight_BP_C_SetVisible");
static_assert(offsetof(RBLight_BP_C_SetVisible, Visible) == 0x000000, "Member 'RBLight_BP_C_SetVisible::Visible' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetVisible, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'RBLight_BP_C_SetVisible::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.Initialize
// 0x0002 (0x0002 - 0x0000)
struct RBLight_BP_C_Initialize final
{
public:
	bool                                          IsRuntime;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInEditorOrCommandlet_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_Initialize) == 0x000001, "Wrong alignment on RBLight_BP_C_Initialize");
static_assert(sizeof(RBLight_BP_C_Initialize) == 0x000002, "Wrong size on RBLight_BP_C_Initialize");
static_assert(offsetof(RBLight_BP_C_Initialize, IsRuntime) == 0x000000, "Member 'RBLight_BP_C_Initialize::IsRuntime' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_Initialize, CallFunc_IsInEditorOrCommandlet_ReturnValue) == 0x000001, "Member 'RBLight_BP_C_Initialize::CallFunc_IsInEditorOrCommandlet_ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.SetAnchorAndCablePosition
// 0x0184 (0x0184 - 0x0000)
struct RBLight_BP_C_SetAnchorAndCablePosition final
{
public:
	bool                                          bIsRuntime;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3236[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0004(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3237[0x1];                                     // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3238[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBoxSphereBounds                       CallFunc_GetBounds_ReturnValue;                    // 0x00B4(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_2;                          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x00DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBLight_BP_C_SetAnchorAndCablePosition) == 0x000004, "Wrong alignment on RBLight_BP_C_SetAnchorAndCablePosition");
static_assert(sizeof(RBLight_BP_C_SetAnchorAndCablePosition) == 0x000184, "Wrong size on RBLight_BP_C_SetAnchorAndCablePosition");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, bIsRuntime) == 0x000000, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::bIsRuntime' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_IsDedicatedServer_ReturnValue) == 0x000001, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000004, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_IsValid_ReturnValue_1) == 0x00008C, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_IsValid_ReturnValue_2) == 0x00008D, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_SetStaticMesh_ReturnValue) == 0x00008E, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_SetStaticMesh_ReturnValue_1) == 0x00008F, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BooleanAND_ReturnValue) == 0x000090, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BooleanAND_ReturnValue_1) == 0x000091, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BooleanAND_ReturnValue_2) == 0x000092, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BreakVector_X) == 0x000094, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BreakVector_Y) == 0x000098, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BreakVector_Z) == 0x00009C, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_FMax_ReturnValue) == 0x0000A0, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_IsValid_ReturnValue_3) == 0x0000A4, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BreakVector_X_1) == 0x0000A8, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BreakVector_Y_1) == 0x0000AC, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BreakVector_Z_1) == 0x0000B0, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_GetBounds_ReturnValue) == 0x0000B4, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_GetBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BreakVector_X_2) == 0x0000D0, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BreakVector_Y_2) == 0x0000D4, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_BreakVector_Z_2) == 0x0000D8, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0000DC, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_FClamp_ReturnValue) == 0x000164, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000168, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00016C, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000170, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_SelectFloat_ReturnValue) == 0x000174, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_SetAnchorAndCablePosition, CallFunc_MakeVector_ReturnValue) == 0x000178, "Member 'RBLight_BP_C_SetAnchorAndCablePosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.OnPostActorsPasted
// 0x0010 (0x0010 - 0x0000)
struct RBLight_BP_C_OnPostActorsPasted final
{
public:
	TArray<class AActor*>                         PastedActors;                                      // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(RBLight_BP_C_OnPostActorsPasted) == 0x000008, "Wrong alignment on RBLight_BP_C_OnPostActorsPasted");
static_assert(sizeof(RBLight_BP_C_OnPostActorsPasted) == 0x000010, "Wrong size on RBLight_BP_C_OnPostActorsPasted");
static_assert(offsetof(RBLight_BP_C_OnPostActorsPasted, PastedActors) == 0x000000, "Member 'RBLight_BP_C_OnPostActorsPasted::PastedActors' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.PostDuplicated
// 0x0008 (0x0008 - 0x0000)
struct RBLight_BP_C_PostDuplicated final
{
public:
	class AActor*                                 DuplicationParent;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBLight_BP_C_PostDuplicated) == 0x000008, "Wrong alignment on RBLight_BP_C_PostDuplicated");
static_assert(sizeof(RBLight_BP_C_PostDuplicated) == 0x000008, "Wrong size on RBLight_BP_C_PostDuplicated");
static_assert(offsetof(RBLight_BP_C_PostDuplicated, DuplicationParent) == 0x000000, "Member 'RBLight_BP_C_PostDuplicated::DuplicationParent' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.PostEditChange
// 0x0008 (0x0008 - 0x0000)
struct RBLight_BP_C_PostEditChange final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBLight_BP_C_PostEditChange) == 0x000004, "Wrong alignment on RBLight_BP_C_PostEditChange");
static_assert(sizeof(RBLight_BP_C_PostEditChange) == 0x000008, "Wrong size on RBLight_BP_C_PostEditChange");
static_assert(offsetof(RBLight_BP_C_PostEditChange, PropertyName) == 0x000000, "Member 'RBLight_BP_C_PostEditChange::PropertyName' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.PostEditMove
// 0x0001 (0x0001 - 0x0000)
struct RBLight_BP_C_PostEditMove final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_PostEditMove) == 0x000001, "Wrong alignment on RBLight_BP_C_PostEditMove");
static_assert(sizeof(RBLight_BP_C_PostEditMove) == 0x000001, "Wrong size on RBLight_BP_C_PostEditMove");
static_assert(offsetof(RBLight_BP_C_PostEditMove, bFinished) == 0x000000, "Member 'RBLight_BP_C_PostEditMove::bFinished' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.PrepareState
// 0x0010 (0x0010 - 0x0000)
struct RBLight_BP_C_PrepareState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3239[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RandomOwner;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RBLight_BP_C_PrepareState) == 0x000008, "Wrong alignment on RBLight_BP_C_PrepareState");
static_assert(sizeof(RBLight_BP_C_PrepareState) == 0x000010, "Wrong size on RBLight_BP_C_PrepareState");
static_assert(offsetof(RBLight_BP_C_PrepareState, bStateA) == 0x000000, "Member 'RBLight_BP_C_PrepareState::bStateA' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_PrepareState, RandomOwner) == 0x000008, "Member 'RBLight_BP_C_PrepareState::RandomOwner' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.SetShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct RBLight_BP_C_SetShouldBeIgnoredForLots final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on RBLight_BP_C_SetShouldBeIgnoredForLots");
static_assert(sizeof(RBLight_BP_C_SetShouldBeIgnoredForLots) == 0x000001, "Wrong size on RBLight_BP_C_SetShouldBeIgnoredForLots");
static_assert(offsetof(RBLight_BP_C_SetShouldBeIgnoredForLots, bValue) == 0x000000, "Member 'RBLight_BP_C_SetShouldBeIgnoredForLots::bValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.SetState
// 0x0001 (0x0001 - 0x0000)
struct RBLight_BP_C_SetState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_SetState) == 0x000001, "Wrong alignment on RBLight_BP_C_SetState");
static_assert(sizeof(RBLight_BP_C_SetState) == 0x000001, "Wrong size on RBLight_BP_C_SetState");
static_assert(offsetof(RBLight_BP_C_SetState, bStateA) == 0x000000, "Member 'RBLight_BP_C_SetState::bStateA' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.ExecuteUbergraph_RBLight_BP
// 0x0040 (0x0040 - 0x0000)
struct RBLight_BP_C_ExecuteUbergraph_RBLight_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_323A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_Event_pastedActors;                         // 0x0008(0x0010)(ConstParm, ReferenceParm)
	class AActor*                                 K2Node_Event_duplicationParent;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_propertyName;                         // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bFinished;                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bStateA_1;                            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_323B[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_randomOwner;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bValue;                               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bStateA;                              // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP) == 0x000008, "Wrong alignment on RBLight_BP_C_ExecuteUbergraph_RBLight_BP");
static_assert(sizeof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP) == 0x000040, "Wrong size on RBLight_BP_C_ExecuteUbergraph_RBLight_BP");
static_assert(offsetof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP, EntryPoint) == 0x000000, "Member 'RBLight_BP_C_ExecuteUbergraph_RBLight_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP, K2Node_Event_pastedActors) == 0x000008, "Member 'RBLight_BP_C_ExecuteUbergraph_RBLight_BP::K2Node_Event_pastedActors' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP, K2Node_Event_duplicationParent) == 0x000018, "Member 'RBLight_BP_C_ExecuteUbergraph_RBLight_BP::K2Node_Event_duplicationParent' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP, K2Node_Event_propertyName) == 0x000020, "Member 'RBLight_BP_C_ExecuteUbergraph_RBLight_BP::K2Node_Event_propertyName' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP, K2Node_Event_bFinished) == 0x000028, "Member 'RBLight_BP_C_ExecuteUbergraph_RBLight_BP::K2Node_Event_bFinished' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP, K2Node_Event_bStateA_1) == 0x000029, "Member 'RBLight_BP_C_ExecuteUbergraph_RBLight_BP::K2Node_Event_bStateA_1' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP, K2Node_Event_randomOwner) == 0x000030, "Member 'RBLight_BP_C_ExecuteUbergraph_RBLight_BP::K2Node_Event_randomOwner' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP, K2Node_Event_bValue) == 0x000038, "Member 'RBLight_BP_C_ExecuteUbergraph_RBLight_BP::K2Node_Event_bValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_ExecuteUbergraph_RBLight_BP, K2Node_Event_bStateA) == 0x000039, "Member 'RBLight_BP_C_ExecuteUbergraph_RBLight_BP::K2Node_Event_bStateA' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.FixUp
// 0x0001 (0x0001 - 0x0000)
struct RBLight_BP_C_FixUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_FixUp) == 0x000001, "Wrong alignment on RBLight_BP_C_FixUp");
static_assert(sizeof(RBLight_BP_C_FixUp) == 0x000001, "Wrong size on RBLight_BP_C_FixUp");
static_assert(offsetof(RBLight_BP_C_FixUp, ReturnValue) == 0x000000, "Member 'RBLight_BP_C_FixUp::ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.IsStateA
// 0x0002 (0x0002 - 0x0000)
struct RBLight_BP_C_IsStateA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BP_IsStateA_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_IsStateA) == 0x000001, "Wrong alignment on RBLight_BP_C_IsStateA");
static_assert(sizeof(RBLight_BP_C_IsStateA) == 0x000002, "Wrong size on RBLight_BP_C_IsStateA");
static_assert(offsetof(RBLight_BP_C_IsStateA, ReturnValue) == 0x000000, "Member 'RBLight_BP_C_IsStateA::ReturnValue' has a wrong offset!");
static_assert(offsetof(RBLight_BP_C_IsStateA, CallFunc_BP_IsStateA_ReturnValue) == 0x000001, "Member 'RBLight_BP_C_IsStateA::CallFunc_BP_IsStateA_ReturnValue' has a wrong offset!");

// Function RBLight_BP.RBLight_BP_C.ShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct RBLight_BP_C_ShouldBeIgnoredForLots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RBLight_BP_C_ShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on RBLight_BP_C_ShouldBeIgnoredForLots");
static_assert(sizeof(RBLight_BP_C_ShouldBeIgnoredForLots) == 0x000001, "Wrong size on RBLight_BP_C_ShouldBeIgnoredForLots");
static_assert(offsetof(RBLight_BP_C_ShouldBeIgnoredForLots, ReturnValue) == 0x000000, "Member 'RBLight_BP_C_ShouldBeIgnoredForLots::ReturnValue' has a wrong offset!");

}

