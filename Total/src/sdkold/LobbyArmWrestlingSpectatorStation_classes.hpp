#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LobbyArmWrestlingSpectatorStation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass LobbyArmWrestlingSpectatorStation.LobbyArmWrestlingSpectatorStation_C
// 0x0028 (0x0270 - 0x0248)
class ALobbyArmWrestlingSpectatorStation_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULobbyArmWrestlingSpectatorComponentBase_C* LobbyArmWrestlingSpectatorComponent;               // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         SpectatorStyleIndex;                               // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool OnWorldPopulateFinishedTimeSliced();
	void OnWorldFullyLoaded();
	void OnWorldPopulateFinished();
	void ReceiveBeginPlay();
	void CustomEvent_0(class ARBPawn* PawnInteracting);
	void ExecuteUbergraph_LobbyArmWrestlingSpectatorStation(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LobbyArmWrestlingSpectatorStation_C">();
	}
	static class ALobbyArmWrestlingSpectatorStation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALobbyArmWrestlingSpectatorStation_C>();
	}
};
static_assert(alignof(ALobbyArmWrestlingSpectatorStation_C) == 0x000008, "Wrong alignment on ALobbyArmWrestlingSpectatorStation_C");
static_assert(sizeof(ALobbyArmWrestlingSpectatorStation_C) == 0x000270, "Wrong size on ALobbyArmWrestlingSpectatorStation_C");
static_assert(offsetof(ALobbyArmWrestlingSpectatorStation_C, UberGraphFrame) == 0x000248, "Member 'ALobbyArmWrestlingSpectatorStation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ALobbyArmWrestlingSpectatorStation_C, LobbyArmWrestlingSpectatorComponent) == 0x000250, "Member 'ALobbyArmWrestlingSpectatorStation_C::LobbyArmWrestlingSpectatorComponent' has a wrong offset!");
static_assert(offsetof(ALobbyArmWrestlingSpectatorStation_C, Arrow) == 0x000258, "Member 'ALobbyArmWrestlingSpectatorStation_C::Arrow' has a wrong offset!");
static_assert(offsetof(ALobbyArmWrestlingSpectatorStation_C, DefaultSceneRoot) == 0x000260, "Member 'ALobbyArmWrestlingSpectatorStation_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ALobbyArmWrestlingSpectatorStation_C, SpectatorStyleIndex) == 0x000268, "Member 'ALobbyArmWrestlingSpectatorStation_C::SpectatorStyleIndex' has a wrong offset!");

}

