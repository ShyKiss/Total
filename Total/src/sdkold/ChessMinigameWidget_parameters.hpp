#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChessMinigameWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OPP_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ChessMinigameWidget.ChessMinigameWidget_C.RefreshPlayersRating
// 0x0110 (0x0110 - 0x0000)
struct ChessMinigameWidget_C_RefreshPlayersRating final
{
public:
	int32                                         CallFunc_GetRating_ReturnValue;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetOpponentRating_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8A[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0078(0x0018)()
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x00E8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x00F8(0x0018)()
};
static_assert(alignof(ChessMinigameWidget_C_RefreshPlayersRating) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_RefreshPlayersRating");
static_assert(sizeof(ChessMinigameWidget_C_RefreshPlayersRating) == 0x000110, "Wrong size on ChessMinigameWidget_C_RefreshPlayersRating");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, CallFunc_GetRating_ReturnValue) == 0x000000, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::CallFunc_GetRating_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, CallFunc_GetOpponentRating_ReturnValue) == 0x000004, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::CallFunc_GetOpponentRating_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000020, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, K2Node_MakeArray_Array) == 0x000068, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000078, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, CallFunc_Format_ReturnValue) == 0x000090, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A8, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, K2Node_MakeArray_Array_1) == 0x0000E8, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_RefreshPlayersRating, CallFunc_Format_ReturnValue_1) == 0x0000F8, "Member 'ChessMinigameWidget_C_RefreshPlayersRating::CallFunc_Format_ReturnValue_1' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.Get_WaitingForPlayer_TXT_1_Text_0
// 0x0018 (0x0018 - 0x0000)
struct ChessMinigameWidget_C_Get_WaitingForPlayer_TXT_1_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(ChessMinigameWidget_C_Get_WaitingForPlayer_TXT_1_Text_0) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_Get_WaitingForPlayer_TXT_1_Text_0");
static_assert(sizeof(ChessMinigameWidget_C_Get_WaitingForPlayer_TXT_1_Text_0) == 0x000018, "Wrong size on ChessMinigameWidget_C_Get_WaitingForPlayer_TXT_1_Text_0");
static_assert(offsetof(ChessMinigameWidget_C_Get_WaitingForPlayer_TXT_1_Text_0, ReturnValue) == 0x000000, "Member 'ChessMinigameWidget_C_Get_WaitingForPlayer_TXT_1_Text_0::ReturnValue' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.Get_MatchCountdownText_Text_0
// 0x0050 (0x0050 - 0x0000)
struct ChessMinigameWidget_C_Get_MatchCountdownText_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8B[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetElapsedServerTime_ReturnValue;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0030(0x0018)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_Get_MatchCountdownText_Text_0");
static_assert(sizeof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0) == 0x000050, "Wrong size on ChessMinigameWidget_C_Get_MatchCountdownText_Text_0");
static_assert(offsetof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0, ReturnValue) == 0x000000, "Member 'ChessMinigameWidget_C_Get_MatchCountdownText_Text_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'ChessMinigameWidget_C_Get_MatchCountdownText_Text_0::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0, CallFunc_GetElapsedServerTime_ReturnValue) == 0x00001C, "Member 'ChessMinigameWidget_C_Get_MatchCountdownText_Text_0::CallFunc_GetElapsedServerTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0, CallFunc_Abs_ReturnValue) == 0x000020, "Member 'ChessMinigameWidget_C_Get_MatchCountdownText_Text_0::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'ChessMinigameWidget_C_Get_MatchCountdownText_Text_0::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0, CallFunc_Round_ReturnValue) == 0x000028, "Member 'ChessMinigameWidget_C_Get_MatchCountdownText_Text_0::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0, CallFunc_Clamp_ReturnValue) == 0x00002C, "Member 'ChessMinigameWidget_C_Get_MatchCountdownText_Text_0::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0, CallFunc_Conv_IntToText_ReturnValue) == 0x000030, "Member 'ChessMinigameWidget_C_Get_MatchCountdownText_Text_0::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Get_MatchCountdownText_Text_0, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'ChessMinigameWidget_C_Get_MatchCountdownText_Text_0::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.GetExitingPercent
// 0x0018 (0x0018 - 0x0000)
struct ChessMinigameWidget_C_GetExitingPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetElapsedPawnTime_ReturnValue;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChessMinigameWidget_C_GetExitingPercent) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_GetExitingPercent");
static_assert(sizeof(ChessMinigameWidget_C_GetExitingPercent) == 0x000018, "Wrong size on ChessMinigameWidget_C_GetExitingPercent");
static_assert(offsetof(ChessMinigameWidget_C_GetExitingPercent, ReturnValue) == 0x000000, "Member 'ChessMinigameWidget_C_GetExitingPercent::ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetExitingPercent, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ChessMinigameWidget_C_GetExitingPercent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetExitingPercent, CallFunc_GetPawnInteracting_ReturnValue) == 0x000008, "Member 'ChessMinigameWidget_C_GetExitingPercent::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetExitingPercent, CallFunc_GetElapsedPawnTime_ReturnValue) == 0x000010, "Member 'ChessMinigameWidget_C_GetExitingPercent::CallFunc_GetElapsedPawnTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetExitingPercent, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'ChessMinigameWidget_C_GetExitingPercent::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.OnExitingChange
// 0x0068 (0x0068 - 0x0000)
struct ChessMinigameWidget_C_OnExitingChange final
{
public:
	bool                                          bExiting;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartExitTimestamp;                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0010(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0028(0x0018)()
	bool                                          CallFunc_IsGameInProgress_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B8F[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0048(0x0018)()
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChessMinigameWidget_C_OnExitingChange) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_OnExitingChange");
static_assert(sizeof(ChessMinigameWidget_C_OnExitingChange) == 0x000068, "Wrong size on ChessMinigameWidget_C_OnExitingChange");
static_assert(offsetof(ChessMinigameWidget_C_OnExitingChange, bExiting) == 0x000000, "Member 'ChessMinigameWidget_C_OnExitingChange::bExiting' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnExitingChange, StartExitTimestamp) == 0x000004, "Member 'ChessMinigameWidget_C_OnExitingChange::StartExitTimestamp' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnExitingChange, Temp_bool_Variable) == 0x000008, "Member 'ChessMinigameWidget_C_OnExitingChange::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnExitingChange, Temp_text_Variable) == 0x000010, "Member 'ChessMinigameWidget_C_OnExitingChange::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnExitingChange, Temp_text_Variable_1) == 0x000028, "Member 'ChessMinigameWidget_C_OnExitingChange::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnExitingChange, CallFunc_IsGameInProgress_ReturnValue) == 0x000040, "Member 'ChessMinigameWidget_C_OnExitingChange::CallFunc_IsGameInProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnExitingChange, K2Node_Select_Default) == 0x000048, "Member 'ChessMinigameWidget_C_OnExitingChange::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnExitingChange, K2Node_SwitchEnum_CmpSuccess) == 0x000060, "Member 'ChessMinigameWidget_C_OnExitingChange::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.SetBindLocalPanel
// 0x0014 (0x0014 - 0x0000)
struct ChessMinigameWidget_C_SetBindLocalPanel final
{
public:
	bool                                          bBind;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B90[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bExiting, float StartExitTimestamp)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(ChessMinigameWidget_C_SetBindLocalPanel) == 0x000004, "Wrong alignment on ChessMinigameWidget_C_SetBindLocalPanel");
static_assert(sizeof(ChessMinigameWidget_C_SetBindLocalPanel) == 0x000014, "Wrong size on ChessMinigameWidget_C_SetBindLocalPanel");
static_assert(offsetof(ChessMinigameWidget_C_SetBindLocalPanel, bBind) == 0x000000, "Member 'ChessMinigameWidget_C_SetBindLocalPanel::bBind' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetBindLocalPanel, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ChessMinigameWidget_C_SetBindLocalPanel::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.GetCroppedName
// 0x0058 (0x0058 - 0x0000)
struct ChessMinigameWidget_C_GetCroppedName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         MaxChars;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B91[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B92[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSubstring_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B93[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ChessMinigameWidget_C_GetCroppedName) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_GetCroppedName");
static_assert(sizeof(ChessMinigameWidget_C_GetCroppedName) == 0x000058, "Wrong size on ChessMinigameWidget_C_GetCroppedName");
static_assert(offsetof(ChessMinigameWidget_C_GetCroppedName, Param_Name) == 0x000000, "Member 'ChessMinigameWidget_C_GetCroppedName::Param_Name' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetCroppedName, MaxChars) == 0x000010, "Member 'ChessMinigameWidget_C_GetCroppedName::MaxChars' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetCroppedName, ReturnValue) == 0x000018, "Member 'ChessMinigameWidget_C_GetCroppedName::ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetCroppedName, CallFunc_Len_ReturnValue) == 0x000028, "Member 'ChessMinigameWidget_C_GetCroppedName::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetCroppedName, CallFunc_GetSubstring_ReturnValue) == 0x000030, "Member 'ChessMinigameWidget_C_GetCroppedName::CallFunc_GetSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetCroppedName, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000040, "Member 'ChessMinigameWidget_C_GetCroppedName::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetCroppedName, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'ChessMinigameWidget_C_GetCroppedName::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.SetupPlayerNames
// 0x00A8 (0x00A8 - 0x0000)
struct ChessMinigameWidget_C_SetupPlayerNames final
{
public:
	class ARBPlayer*                              CallFunc_GetOpponentPlayer_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B94[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetGamePlayerName_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class URBChessBoardPanelComponent*            CallFunc_GetLocalPanel_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatPlayerDisplayName_formatedDisplayName; // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B95[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0040(0x0018)()
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B96[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetGamePlayerName_ReturnValue_1;          // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatPlayerDisplayName_formatedDisplayName_1; // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0090(0x0018)()
};
static_assert(alignof(ChessMinigameWidget_C_SetupPlayerNames) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_SetupPlayerNames");
static_assert(sizeof(ChessMinigameWidget_C_SetupPlayerNames) == 0x0000A8, "Wrong size on ChessMinigameWidget_C_SetupPlayerNames");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_GetOpponentPlayer_ReturnValue) == 0x000000, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_GetOpponentPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_GetGamePlayerName_ReturnValue) == 0x000010, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_GetGamePlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_GetLocalPanel_ReturnValue) == 0x000020, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_GetLocalPanel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_FormatPlayerDisplayName_formatedDisplayName) == 0x000028, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_FormatPlayerDisplayName_formatedDisplayName' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_IsValid_ReturnValue_2) == 0x000038, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_Conv_StringToText_ReturnValue) == 0x000040, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_GetPawnInteracting_ReturnValue) == 0x000058, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, K2Node_DynamicCast_AsRB_Player) == 0x000060, "Member 'ChessMinigameWidget_C_SetupPlayerNames::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ChessMinigameWidget_C_SetupPlayerNames::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_GetGamePlayerName_ReturnValue_1) == 0x000070, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_GetGamePlayerName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_FormatPlayerDisplayName_formatedDisplayName_1) == 0x000080, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_FormatPlayerDisplayName_formatedDisplayName_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_SetupPlayerNames, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000090, "Member 'ChessMinigameWidget_C_SetupPlayerNames::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.OnPlayerConnectionEvent
// 0x0008 (0x0008 - 0x0000)
struct ChessMinigameWidget_C_OnPlayerConnectionEvent final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChessMinigameWidget_C_OnPlayerConnectionEvent) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_OnPlayerConnectionEvent");
static_assert(sizeof(ChessMinigameWidget_C_OnPlayerConnectionEvent) == 0x000008, "Wrong size on ChessMinigameWidget_C_OnPlayerConnectionEvent");
static_assert(offsetof(ChessMinigameWidget_C_OnPlayerConnectionEvent, Player) == 0x000000, "Member 'ChessMinigameWidget_C_OnPlayerConnectionEvent::Player' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.OnChessEndReasonChanged
// 0x01F8 (0x01F8 - 0x0000)
struct ChessMinigameWidget_C_OnChessEndReasonChanged final
{
public:
	EChessGameEndReason                           ChessGameEndReason;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EChessTeam                                    WinningTeam;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EChessGameEndReason                           Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B97[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0068(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0080(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x0098(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00B0(0x0018)()
	EChessTeam                                    Temp_byte_Variable_1;                              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B98[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00D0(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00E8(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0100(0x0040)(HasGetValueTypeHash)
	class FText                                   Temp_text_Variable_9;                              // 0x0140(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x0158(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0170(0x0018)()
	bool                                          CallFunc_IsEndReasonDrawType_ReturnValue;          // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B99[0x7];                                     // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0190(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01D0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01E0(0x0018)()
};
static_assert(alignof(ChessMinigameWidget_C_OnChessEndReasonChanged) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_OnChessEndReasonChanged");
static_assert(sizeof(ChessMinigameWidget_C_OnChessEndReasonChanged) == 0x0001F8, "Wrong size on ChessMinigameWidget_C_OnChessEndReasonChanged");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, ChessGameEndReason) == 0x000000, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::ChessGameEndReason' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, WinningTeam) == 0x000001, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::WinningTeam' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_byte_Variable) == 0x000002, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable) == 0x000008, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_1) == 0x000020, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_2) == 0x000038, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_3) == 0x000050, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_4) == 0x000068, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_5) == 0x000080, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_6) == 0x000098, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_7) == 0x0000B0, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_byte_Variable_1) == 0x0000C8, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, K2Node_Select_Default) == 0x0000D0, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_8) == 0x0000E8, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, K2Node_MakeStruct_FormatArgumentData) == 0x000100, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_9) == 0x000140, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, Temp_text_Variable_10) == 0x000158, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, K2Node_Select_Default_1) == 0x000170, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, CallFunc_IsEndReasonDrawType_ReturnValue) == 0x000188, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::CallFunc_IsEndReasonDrawType_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, K2Node_MakeStruct_FormatArgumentData_1) == 0x000190, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, K2Node_MakeArray_Array) == 0x0001D0, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessEndReasonChanged, CallFunc_Format_ReturnValue) == 0x0001E0, "Member 'ChessMinigameWidget_C_OnChessEndReasonChanged::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.ChessGameTeamTurnChanged
// 0x0390 (0x0390 - 0x0000)
struct ChessMinigameWidget_C_ChessGameTeamTurnChanged final
{
public:
	EChessTeam                                    Team;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0008(0x0028)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9B[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0038(0x0088)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x00C0(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_2;                    // 0x00E8(0x0028)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_1;                    // 0x0110(0x0088)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_2;                    // 0x0198(0x0088)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_3;                    // 0x0220(0x0028)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_3;                    // 0x0248(0x0088)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_4;                    // 0x02D0(0x0028)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush_4;                    // 0x02F8(0x0088)()
	class URBChessBoardPanelComponent*            CallFunc_GetLocalPanel_ReturnValue;                // 0x0380(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChessMinigameWidget_C_ChessGameTeamTurnChanged) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_ChessGameTeamTurnChanged");
static_assert(sizeof(ChessMinigameWidget_C_ChessGameTeamTurnChanged) == 0x000390, "Wrong size on ChessMinigameWidget_C_ChessGameTeamTurnChanged");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, Team) == 0x000000, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::Team' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateColor) == 0x000008, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateBrush) == 0x000038, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateBrush' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateColor_1) == 0x0000C0, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateColor_2) == 0x0000E8, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateColor_2' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateBrush_1) == 0x000110, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateBrush_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateBrush_2) == 0x000198, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateBrush_2' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateColor_3) == 0x000220, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateColor_3' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateBrush_3) == 0x000248, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateBrush_3' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateColor_4) == 0x0002D0, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateColor_4' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, K2Node_MakeStruct_SlateBrush_4) == 0x0002F8, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::K2Node_MakeStruct_SlateBrush_4' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, CallFunc_GetLocalPanel_ReturnValue) == 0x000380, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::CallFunc_GetLocalPanel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ChessGameTeamTurnChanged, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000388, "Member 'ChessMinigameWidget_C_ChessGameTeamTurnChanged::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.ResetGame
// 0x00B0 (0x00B0 - 0x0000)
struct ChessMinigameWidget_C_ResetGame final
{
public:
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0000(0x0028)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x0028(0x0088)()
};
static_assert(alignof(ChessMinigameWidget_C_ResetGame) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_ResetGame");
static_assert(sizeof(ChessMinigameWidget_C_ResetGame) == 0x0000B0, "Wrong size on ChessMinigameWidget_C_ResetGame");
static_assert(offsetof(ChessMinigameWidget_C_ResetGame, K2Node_MakeStruct_SlateColor) == 0x000000, "Member 'ChessMinigameWidget_C_ResetGame::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ResetGame, K2Node_MakeStruct_SlateBrush) == 0x000028, "Member 'ChessMinigameWidget_C_ResetGame::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.PlayOuttro
// 0x0008 (0x0008 - 0x0000)
struct ChessMinigameWidget_C_PlayOuttro final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChessMinigameWidget_C_PlayOuttro) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_PlayOuttro");
static_assert(sizeof(ChessMinigameWidget_C_PlayOuttro) == 0x000008, "Wrong size on ChessMinigameWidget_C_PlayOuttro");
static_assert(offsetof(ChessMinigameWidget_C_PlayOuttro, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'ChessMinigameWidget_C_PlayOuttro::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.Play Intro
// 0x0098 (0x0098 - 0x0000)
struct ChessMinigameWidget_C_Play_Intro final
{
public:
	class URBChessBoardPanelComponent*            CallFunc_GetLocalPanel_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPlayer*                              CallFunc_GetOpponentPlayer_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARBPawn*                                CallFunc_GetPawnInteracting_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetGamePlayerName_ReturnValue;            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ARBPlayer*                              K2Node_DynamicCast_AsRB_Player;                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_FormatPlayerName_ReturnValue;             // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetGamePlayerName_ReturnValue_1;          // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0058(0x0018)()
	class FString                                 CallFunc_FormatPlayerName_ReturnValue_1;           // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0080(0x0018)()
};
static_assert(alignof(ChessMinigameWidget_C_Play_Intro) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_Play_Intro");
static_assert(sizeof(ChessMinigameWidget_C_Play_Intro) == 0x000098, "Wrong size on ChessMinigameWidget_C_Play_Intro");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, CallFunc_GetLocalPanel_ReturnValue) == 0x000000, "Member 'ChessMinigameWidget_C_Play_Intro::CallFunc_GetLocalPanel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, CallFunc_GetOpponentPlayer_ReturnValue) == 0x000008, "Member 'ChessMinigameWidget_C_Play_Intro::CallFunc_GetOpponentPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, CallFunc_GetPawnInteracting_ReturnValue) == 0x000010, "Member 'ChessMinigameWidget_C_Play_Intro::CallFunc_GetPawnInteracting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, CallFunc_GetGamePlayerName_ReturnValue) == 0x000018, "Member 'ChessMinigameWidget_C_Play_Intro::CallFunc_GetGamePlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, K2Node_DynamicCast_AsRB_Player) == 0x000028, "Member 'ChessMinigameWidget_C_Play_Intro::K2Node_DynamicCast_AsRB_Player' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'ChessMinigameWidget_C_Play_Intro::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, CallFunc_FormatPlayerName_ReturnValue) == 0x000038, "Member 'ChessMinigameWidget_C_Play_Intro::CallFunc_FormatPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, CallFunc_GetGamePlayerName_ReturnValue_1) == 0x000048, "Member 'ChessMinigameWidget_C_Play_Intro::CallFunc_GetGamePlayerName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, CallFunc_Conv_StringToText_ReturnValue) == 0x000058, "Member 'ChessMinigameWidget_C_Play_Intro::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, CallFunc_FormatPlayerName_ReturnValue_1) == 0x000070, "Member 'ChessMinigameWidget_C_Play_Intro::CallFunc_FormatPlayerName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Play_Intro, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000080, "Member 'ChessMinigameWidget_C_Play_Intro::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.GetOpposingTeamTime
// 0x0108 (0x0108 - 0x0000)
struct ChessMinigameWidget_C_GetOpposingTeamTime final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9D[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9E[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class URBChessBoardPanelComponent*            CallFunc_GetOpponentPanel_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9F[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTeamRemainingTime_ReturnValue;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatTimeFromFloat_ReturnValue;          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_AsCurrency_Float_ReturnValue;             // 0x0060(0x0018)()
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA0[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA1[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetSubstring_ReturnValue;                 // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00C8(0x0018)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00E0(0x0028)()
};
static_assert(alignof(ChessMinigameWidget_C_GetOpposingTeamTime) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_GetOpposingTeamTime");
static_assert(sizeof(ChessMinigameWidget_C_GetOpposingTeamTime) == 0x000108, "Wrong size on ChessMinigameWidget_C_GetOpposingTeamTime");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, ReturnValue) == 0x000000, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, Temp_bool_Variable) == 0x000018, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, Temp_struct_Variable) == 0x00001C, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, Temp_struct_Variable_1) == 0x00002C, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, Temp_bool_Variable_1) == 0x00003C, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_GetOpponentPanel_ReturnValue) == 0x000040, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_GetOpponentPanel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_GetTeamRemainingTime_ReturnValue) == 0x00004C, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_GetTeamRemainingTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_FormatTimeFromFloat_ReturnValue) == 0x000050, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_FormatTimeFromFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_AsCurrency_Float_ReturnValue) == 0x000060, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_AsCurrency_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_Less_FloatFloat_ReturnValue) == 0x000078, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_Conv_TextToString_ReturnValue) == 0x000080, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_Len_ReturnValue) == 0x000090, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000094, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_GetSubstring_ReturnValue) == 0x000098, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_GetSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, K2Node_Select_Default) == 0x0000A8, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, K2Node_Select_Default_1) == 0x0000B8, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, CallFunc_Conv_StringToText_ReturnValue) == 0x0000C8, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetOpposingTeamTime, K2Node_MakeStruct_SlateColor) == 0x0000E0, "Member 'ChessMinigameWidget_C_GetOpposingTeamTime::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.GetLocalTeamTime
// 0x00B8 (0x00B8 - 0x0000)
struct ChessMinigameWidget_C_GetLocalTeamTime final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA2[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URBChessBoardPanelComponent*            CallFunc_GetLocalPanel_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA3[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTeamRemainingTime_ReturnValue;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_FormatTimeFromFloat_ReturnValue;          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA4[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0068(0x0018)()
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0090(0x0028)()
};
static_assert(alignof(ChessMinigameWidget_C_GetLocalTeamTime) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_GetLocalTeamTime");
static_assert(sizeof(ChessMinigameWidget_C_GetLocalTeamTime) == 0x0000B8, "Wrong size on ChessMinigameWidget_C_GetLocalTeamTime");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, ReturnValue) == 0x000000, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, Temp_struct_Variable) == 0x000018, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, Temp_struct_Variable_1) == 0x000028, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, Temp_bool_Variable) == 0x000038, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, CallFunc_IsValid_ReturnValue) == 0x000039, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, CallFunc_GetLocalPanel_ReturnValue) == 0x000040, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::CallFunc_GetLocalPanel_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, CallFunc_GetTeamRemainingTime_ReturnValue) == 0x00004C, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::CallFunc_GetTeamRemainingTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, CallFunc_FormatTimeFromFloat_ReturnValue) == 0x000050, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::CallFunc_FormatTimeFromFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000060, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, CallFunc_Conv_StringToText_ReturnValue) == 0x000068, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, K2Node_Select_Default) == 0x000080, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_GetLocalTeamTime, K2Node_MakeStruct_SlateColor) == 0x000090, "Member 'ChessMinigameWidget_C_GetLocalTeamTime::K2Node_MakeStruct_SlateColor' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.OnChessGameStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ChessMinigameWidget_C_OnChessGameStateChanged final
{
public:
	EChessGameState                               ChessGameState;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChessMinigameWidget_C_OnChessGameStateChanged) == 0x000001, "Wrong alignment on ChessMinigameWidget_C_OnChessGameStateChanged");
static_assert(sizeof(ChessMinigameWidget_C_OnChessGameStateChanged) == 0x000002, "Wrong size on ChessMinigameWidget_C_OnChessGameStateChanged");
static_assert(offsetof(ChessMinigameWidget_C_OnChessGameStateChanged, ChessGameState) == 0x000000, "Member 'ChessMinigameWidget_C_OnChessGameStateChanged::ChessGameState' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_OnChessGameStateChanged, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'ChessMinigameWidget_C_OnChessGameStateChanged::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.Init
// 0x0010 (0x0010 - 0x0000)
struct ChessMinigameWidget_C_Init final
{
public:
	class ARBChessBoardBase_C*                    Param_ChessBoard;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class URBChessBoardPanelComponent*            Param_LocalPanel;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChessMinigameWidget_C_Init) == 0x000008, "Wrong alignment on ChessMinigameWidget_C_Init");
static_assert(sizeof(ChessMinigameWidget_C_Init) == 0x000010, "Wrong size on ChessMinigameWidget_C_Init");
static_assert(offsetof(ChessMinigameWidget_C_Init, Param_ChessBoard) == 0x000000, "Member 'ChessMinigameWidget_C_Init::Param_ChessBoard' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_Init, Param_LocalPanel) == 0x000008, "Member 'ChessMinigameWidget_C_Init::Param_LocalPanel' has a wrong offset!");

// Function ChessMinigameWidget.ChessMinigameWidget_C.ExecuteUbergraph_ChessMinigameWidget
// 0x0058 (0x0058 - 0x0000)
struct ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EChessGameState ChessGameState)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EChessTeam Team)>              K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EChessGameEndReason ChessGameEndReason, EChessTeam WinningTeam)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ARBPlayer* Player)>      K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BA5[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget) == 0x000004, "Wrong alignment on ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget");
static_assert(sizeof(ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget) == 0x000058, "Wrong size on ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget");
static_assert(offsetof(ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget, EntryPoint) == 0x000000, "Member 'ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget, CallFunc_IsValid_ReturnValue) == 0x000044, "Member 'ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget, K2Node_CreateDelegate_OutputDelegate_4) == 0x000048, "Member 'ChessMinigameWidget_C_ExecuteUbergraph_ChessMinigameWidget::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");

}

