#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeshPopulate_Parent

#include "Basic.hpp"

#include "MeshPopulateDirection_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "RandomMaterials_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ModuleMeshDataMinus02_structs.hpp"
#include "OPP_structs.hpp"
#include "GrayBoxMat_ENU_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MeshPopulate_Parent.MeshPopulate_Parent_C
// 0x0198 (0x03E0 - 0x0248)
class AMeshPopulate_Parent_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          BoxCollision;                                      // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SnapGizmosOnGridSize;                              // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GizmoLocation;                                     // 0x0264(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Scale;                                             // 0x027C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumMesh;                                           // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Gizmo2Location;                                    // 0x028C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMainScale;                                      // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          InvertMesh;                                        // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseBetaScale;                                      // 0x029A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A15[0x5];                                     // 0x029B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             OverwriteMaterials;                                // 0x02A0(0x0010)(Edit, BlueprintVisible)
	bool                                          UseRandomMaterials;                                // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A16[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRandomMaterials>               RandomMaterials;                                   // 0x02B8(0x0010)(Edit, BlueprintVisible)
	bool                                          UseDeprecatedCollisionBox;                         // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bCanEverAffectNavigation;                          // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A17[0x2];                                     // 0x02CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlphaSizeMin;                                      // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NumberNumberOfObjectLimit;                         // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMeshPopulateDirection                        XY;                                                // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            AudioMeshCollisionResponse;                        // 0x02D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A18[0x2];                                     // 0x02D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NumberOfObject;                                    // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BetaSizeMin;                                       // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DrawDistanceCull;                                  // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DiffuseBoost;                                      // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLightingChannels                      Lighting_Channels;                                 // 0x02E8(0x0001)(Edit, BlueprintVisible, NoDestructor)
	uint8                                         Pad_3A19[0x3];                                     // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlphaSmallestSizeMesh;                             // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AlphaBiggestSizeMesh;                              // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AlphaNumberOfMeshes;                               // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BetaSmallestSizeMesh;                              // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BetaNumberOfMeshes;                                // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BetaBiggestSizeMesh;                               // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AlphaTotal;                                        // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BetaTotal;                                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Seed;                                              // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOneComponent;                                   // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1A[0x3];                                     // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SeedCurrent;                                       // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FModuleMeshDataMinus02                 MeshSize;                                          // 0x0318(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SeedMaterials;                                     // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SeedMaterialsCurrent;                              // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightmapSizeMulitiplier;                           // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LightmapSizeMin;                                   // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LightmapSizeMax;                                   // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TestNewPopulateRow;                                // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1B[0x3];                                     // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlphaScaleNextMeshTheshold;                        // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BetaScaleNextMeshTheshold;                         // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockAudio;                                        // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          BlockVisibility;                                   // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1C[0x2];                                     // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MaterialDynamicData;                               // 0x0354(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseNewSeed;                                        // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ECanBeCharacterBase                           Can_Character_Step_Up_On;                          // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockPing;                                         // 0x0366(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1D[0x1];                                     // 0x0367(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CollisionOffset;                                   // 0x0368(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CollisionRotation;                                 // 0x0374(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CollisionScale;                                    // 0x0380(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FixedCollisionSize;                                // 0x038C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FixedCollisionLocation;                            // 0x0398(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseAutomaticBoxCollsion;                          // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAutomaticBoxUseVisualMeshes;                      // 0x03A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAutomaticBoxUseMeshCollisions;                    // 0x03A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1E[0x1];                                     // 0x03A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMesh*>                    IgnoredStaticMeshesForAutomaticBoxCollision;       // 0x03A8(0x0010)(Edit, BlueprintVisible)
	TArray<class UStaticMesh*>                    IgnoredStaticMeshesForDisablingCollision;          // 0x03B8(0x0010)(Edit, BlueprintVisible)
	bool                                          bForceNoCollisionNotOnServer;                      // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RequiresPhysicalMaterial;                          // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A1F[0x6];                                     // 0x03CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverride_z;                                       // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bStaticShadow;                                     // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bInvalidAutomaticBoxCollision_Internal;            // 0x03DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A20[0x1];                                     // 0x03DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinCollisionThickness;                             // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PresetMaterials(const TArray<class UMaterialInterface*>& TargetArray, EGrayBoxMat_ENU Param_Index);
	void SelectRandomMesh(TArray<struct FModuleAlternativeMeshData>& ArrayMeshAlternatif, class UStaticMesh* _Mesh1, class UStaticMesh** Mesh, struct FVector2D* MeshOffset);
	void SetStaticMeshSet(class UStaticMeshComponent* Target, class UStaticMesh* NewMesh, bool UseOverwriteMaterial, bool UseOverwriteLightmap, float DrawDistance);
	void PrintError();
	void UseShadowMask(const struct FVector& ShadowMeshScale, EMeshPopulateDirection Param_XY, const struct FVector& ShadowMeshLocation);
	void SetMaterials(class UPrimitiveComponent* Target);
	void SetGizmoLimit(EMeshPopulateDirection Direction);
	void SetGizmo();
	void SetScaleGroup(struct FVector* Param_Scale, struct FVector* NewSize);
	void MaximumGroupHeight(TArray<struct FModuleMeshDataMinus02>& GroupArray, EMeshPopulateDirection Direction, float* AlphaMin, float* AlphaMax, float* BetaMin, float* BetaMax, struct FVector* Size);
	void PopulateSurface(TArray<struct FModuleMeshDataMinus02>& MeshesArray, bool UseMeshSecondSizeAdd, float GapBetweenRow, EMeshPopulateDirection Direction, const struct FVector& SizeLeft, const struct FVector& Offset, const struct FRotator& OffsetRotation, const struct FVector& Param_Scale, bool UseXScale, bool UseYScale, bool UseZScale, bool Inverted, bool ZInverted, bool ResetAlphaLocation, bool ResetBetaLocation, bool SwitchMeshOrientation, bool UseOverwriteMaterial, bool UseOverwriteLightmap, int32 MaxNumberOfRow, float OverwriteBetaScale, struct FVector* LastLocation, float* MaxSecondSize, float* SecondScale, TArray<struct FStaticmeshArray_Stuc>* AllStactimeshes, int32* RowCount, float* LastAlphaMeshSize, float* AlphaScale);
	void MaximumHeight(TArray<struct FModuleMeshData>& Array, float _MaxHeight1, float* Height, float* BiggestMeshSize, float* SmallerMeshSize);
	void PopulateRow(EMeshPopulateDirection Selection, TArray<struct FModuleMeshData>& MeshArray, float AlphaSizeLeft, const struct FVector& Offset, const struct FVector& Param_Scale, bool Inverted, bool ZInverted, bool UseXScale, bool UseYScale, bool UseZScale, bool ResetAlphaLocation, const struct FRotator& OffsetRotation, bool SwitchMeshOrientation, bool UseOverwriteMaterial, bool UseOverwriteLightmap, bool UseScale, float BetaScale, struct FVector* LastLocation, TArray<class UStaticMeshComponent*>* StaticmeshComponents1, float* LastAlphaMeshSize, float* AlphaScale);
	void NumOfMesh(float Param_MeshSize, float SizeLeft, int32* Num, float* NewSizeLeft);
	void PopulateStaticMesh(EMeshPopulateDirection Direction, const struct FModuleMeshData& Mesh01, const struct FRotator& OffsetRotation, bool Inverted, bool SwitchMeshOrientation, bool UseOverwriteMaterial, bool UseOverwriteLightmap, float Param_Location, class UStaticMeshComponent** OutputPin);
	void SetScale(TArray<struct FModuleMeshData>& MeshArray, EMeshPopulateDirection Selection, const struct FVector& Size, float HeightDelete);
	void UserConstructionScript();
	void BP_PrepareMapCheck();
	void OnPostActorsPasted(const TArray<class AActor*>& PastedActors);
	void PostAddedToLevel();
	void PostDuplicated(class AActor* DuplicationParent);
	void PostEditMove(bool bFinished);
	void TickSelected();
	void PostEditChange(const class FName& PropertyName);
	void OnEditorPostLoad();
	void ExecuteUbergraph_MeshPopulate_Parent(int32 EntryPoint);
	bool BP_MapCheck(EMapCheckType CheckType, class FString* OutErrorMsg);
	bool FixUp();
	void HasStaticMeshCollision(bool* NewParam);
	void CreateBoxCollisionForBounds3();
	void CreateBoxCollisionForBounds();
	void GetCollisionOverride(const struct FVector& Default, const struct FVector& Override, struct FVector* NewVector);
	void GetComponentBoundsVertices(const struct FVector& Extent, TArray<struct FVector>* Out_BoundingVertices);
	void GetCollisionBoxExtent(TArray<struct FVector>& BoundsVertices, struct FVector* Out_Min, struct FVector* Out_Max);
	void SetBoxCollisionSettings();
	void PrintAllUsedMeshes();
	void ApplyPhysicalMaterialToBoxComponent();
	void SetExcludedStaticMeshComponents(TArray<class UStaticMesh*>& StaticmeshComponents);
	void SetLoadedOnServerAndCollisions(class UPrimitiveComponent* PrimitiveComponent);
	void GetHypothenuse(EMeshPopulateDirection Direction, float* Hypotenuse);
	void PushRandomSeed();
	void Warning();
	void SetSeed();
	void SnapGizmosOnGrid();
	void CheckSize(const struct FVector& SizeLeft, EMeshPopulateDirection Direction, float Size, bool* SizeIsvalid);
	void Get_Next_Group(TArray<struct FModuleMeshDataMinus02>& Aray, float SizeLeft, int32* Param_Index, float* NewSizeLeft, float* GroupSize);
	void MinGroupSize(TArray<struct FModuleMeshDataMinus02>& Array, float* SmallerGroupSize, float* BiggestGroupSize);
	void Get_Next_Mesh(TArray<struct FModuleMeshData>& Aray, float SizeLeft, int32* Param_Index, float* NewSizeLeft, float* Param_MeshSize);
	void PushStaticMesh(EMeshPopulateDirection Direction, float Param_Location, const struct FModuleMeshData& Mesh, bool Inverted, bool UseOverwriteMaterial, bool UseOverwriteLightmap, class UStaticMeshComponent** StaticMeshComponant);
	void MinMeshSize(TArray<struct FModuleMeshData>& Array, float* SmallerMeshSize);
	void FindClosestMeshSize(TArray<struct FModuleMeshData>& Array, float SizeLeft, int32* Param_Index);
	void CheckMeshSize(TArray<struct FModuleMeshDataMinus02>& Meshes, EMeshPopulateDirection Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MeshPopulate_Parent_C">();
	}
	static class AMeshPopulate_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMeshPopulate_Parent_C>();
	}
};
static_assert(alignof(AMeshPopulate_Parent_C) == 0x000008, "Wrong alignment on AMeshPopulate_Parent_C");
static_assert(sizeof(AMeshPopulate_Parent_C) == 0x0003E0, "Wrong size on AMeshPopulate_Parent_C");
static_assert(offsetof(AMeshPopulate_Parent_C, UberGraphFrame) == 0x000248, "Member 'AMeshPopulate_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BoxCollision) == 0x000250, "Member 'AMeshPopulate_Parent_C::BoxCollision' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, DefaultSceneRoot) == 0x000258, "Member 'AMeshPopulate_Parent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, SnapGizmosOnGridSize) == 0x000260, "Member 'AMeshPopulate_Parent_C::SnapGizmosOnGridSize' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, GizmoLocation) == 0x000264, "Member 'AMeshPopulate_Parent_C::GizmoLocation' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, Location) == 0x000270, "Member 'AMeshPopulate_Parent_C::Location' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, Scale) == 0x00027C, "Member 'AMeshPopulate_Parent_C::Scale' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, NumMesh) == 0x000288, "Member 'AMeshPopulate_Parent_C::NumMesh' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, Gizmo2Location) == 0x00028C, "Member 'AMeshPopulate_Parent_C::Gizmo2Location' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, UseMainScale) == 0x000298, "Member 'AMeshPopulate_Parent_C::UseMainScale' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, InvertMesh) == 0x000299, "Member 'AMeshPopulate_Parent_C::InvertMesh' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, UseBetaScale) == 0x00029A, "Member 'AMeshPopulate_Parent_C::UseBetaScale' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, OverwriteMaterials) == 0x0002A0, "Member 'AMeshPopulate_Parent_C::OverwriteMaterials' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, UseRandomMaterials) == 0x0002B0, "Member 'AMeshPopulate_Parent_C::UseRandomMaterials' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, RandomMaterials) == 0x0002B8, "Member 'AMeshPopulate_Parent_C::RandomMaterials' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, UseDeprecatedCollisionBox) == 0x0002C8, "Member 'AMeshPopulate_Parent_C::UseDeprecatedCollisionBox' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, bCanEverAffectNavigation) == 0x0002C9, "Member 'AMeshPopulate_Parent_C::bCanEverAffectNavigation' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, AlphaSizeMin) == 0x0002CC, "Member 'AMeshPopulate_Parent_C::AlphaSizeMin' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, NumberNumberOfObjectLimit) == 0x0002D0, "Member 'AMeshPopulate_Parent_C::NumberNumberOfObjectLimit' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, XY) == 0x0002D4, "Member 'AMeshPopulate_Parent_C::XY' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, AudioMeshCollisionResponse) == 0x0002D5, "Member 'AMeshPopulate_Parent_C::AudioMeshCollisionResponse' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, NumberOfObject) == 0x0002D8, "Member 'AMeshPopulate_Parent_C::NumberOfObject' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BetaSizeMin) == 0x0002DC, "Member 'AMeshPopulate_Parent_C::BetaSizeMin' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, DrawDistanceCull) == 0x0002E0, "Member 'AMeshPopulate_Parent_C::DrawDistanceCull' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, DiffuseBoost) == 0x0002E4, "Member 'AMeshPopulate_Parent_C::DiffuseBoost' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, Lighting_Channels) == 0x0002E8, "Member 'AMeshPopulate_Parent_C::Lighting_Channels' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, AlphaSmallestSizeMesh) == 0x0002EC, "Member 'AMeshPopulate_Parent_C::AlphaSmallestSizeMesh' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, AlphaBiggestSizeMesh) == 0x0002F0, "Member 'AMeshPopulate_Parent_C::AlphaBiggestSizeMesh' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, AlphaNumberOfMeshes) == 0x0002F4, "Member 'AMeshPopulate_Parent_C::AlphaNumberOfMeshes' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BetaSmallestSizeMesh) == 0x0002F8, "Member 'AMeshPopulate_Parent_C::BetaSmallestSizeMesh' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BetaNumberOfMeshes) == 0x0002FC, "Member 'AMeshPopulate_Parent_C::BetaNumberOfMeshes' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BetaBiggestSizeMesh) == 0x000300, "Member 'AMeshPopulate_Parent_C::BetaBiggestSizeMesh' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, AlphaTotal) == 0x000304, "Member 'AMeshPopulate_Parent_C::AlphaTotal' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BetaTotal) == 0x000308, "Member 'AMeshPopulate_Parent_C::BetaTotal' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, Seed) == 0x00030C, "Member 'AMeshPopulate_Parent_C::Seed' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, UseOneComponent) == 0x000310, "Member 'AMeshPopulate_Parent_C::UseOneComponent' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, SeedCurrent) == 0x000314, "Member 'AMeshPopulate_Parent_C::SeedCurrent' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, MeshSize) == 0x000318, "Member 'AMeshPopulate_Parent_C::MeshSize' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, SeedMaterials) == 0x000330, "Member 'AMeshPopulate_Parent_C::SeedMaterials' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, SeedMaterialsCurrent) == 0x000334, "Member 'AMeshPopulate_Parent_C::SeedMaterialsCurrent' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, LightmapSizeMulitiplier) == 0x000338, "Member 'AMeshPopulate_Parent_C::LightmapSizeMulitiplier' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, LightmapSizeMin) == 0x00033C, "Member 'AMeshPopulate_Parent_C::LightmapSizeMin' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, LightmapSizeMax) == 0x000340, "Member 'AMeshPopulate_Parent_C::LightmapSizeMax' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, TestNewPopulateRow) == 0x000344, "Member 'AMeshPopulate_Parent_C::TestNewPopulateRow' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, AlphaScaleNextMeshTheshold) == 0x000348, "Member 'AMeshPopulate_Parent_C::AlphaScaleNextMeshTheshold' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BetaScaleNextMeshTheshold) == 0x00034C, "Member 'AMeshPopulate_Parent_C::BetaScaleNextMeshTheshold' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BlockAudio) == 0x000350, "Member 'AMeshPopulate_Parent_C::BlockAudio' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BlockVisibility) == 0x000351, "Member 'AMeshPopulate_Parent_C::BlockVisibility' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, MaterialDynamicData) == 0x000354, "Member 'AMeshPopulate_Parent_C::MaterialDynamicData' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, UseNewSeed) == 0x000364, "Member 'AMeshPopulate_Parent_C::UseNewSeed' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, Can_Character_Step_Up_On) == 0x000365, "Member 'AMeshPopulate_Parent_C::Can_Character_Step_Up_On' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, BlockPing) == 0x000366, "Member 'AMeshPopulate_Parent_C::BlockPing' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, CollisionOffset) == 0x000368, "Member 'AMeshPopulate_Parent_C::CollisionOffset' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, CollisionRotation) == 0x000374, "Member 'AMeshPopulate_Parent_C::CollisionRotation' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, CollisionScale) == 0x000380, "Member 'AMeshPopulate_Parent_C::CollisionScale' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, FixedCollisionSize) == 0x00038C, "Member 'AMeshPopulate_Parent_C::FixedCollisionSize' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, FixedCollisionLocation) == 0x000398, "Member 'AMeshPopulate_Parent_C::FixedCollisionLocation' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, bUseAutomaticBoxCollsion) == 0x0003A4, "Member 'AMeshPopulate_Parent_C::bUseAutomaticBoxCollsion' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, bAutomaticBoxUseVisualMeshes) == 0x0003A5, "Member 'AMeshPopulate_Parent_C::bAutomaticBoxUseVisualMeshes' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, bAutomaticBoxUseMeshCollisions) == 0x0003A6, "Member 'AMeshPopulate_Parent_C::bAutomaticBoxUseMeshCollisions' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, IgnoredStaticMeshesForAutomaticBoxCollision) == 0x0003A8, "Member 'AMeshPopulate_Parent_C::IgnoredStaticMeshesForAutomaticBoxCollision' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, IgnoredStaticMeshesForDisablingCollision) == 0x0003B8, "Member 'AMeshPopulate_Parent_C::IgnoredStaticMeshesForDisablingCollision' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, bForceNoCollisionNotOnServer) == 0x0003C8, "Member 'AMeshPopulate_Parent_C::bForceNoCollisionNotOnServer' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, RequiresPhysicalMaterial) == 0x0003C9, "Member 'AMeshPopulate_Parent_C::RequiresPhysicalMaterial' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, PhysicalMaterial) == 0x0003D0, "Member 'AMeshPopulate_Parent_C::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, bOverride_z) == 0x0003D8, "Member 'AMeshPopulate_Parent_C::bOverride_z' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, bStaticShadow) == 0x0003D9, "Member 'AMeshPopulate_Parent_C::bStaticShadow' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, bInvalidAutomaticBoxCollision_Internal) == 0x0003DA, "Member 'AMeshPopulate_Parent_C::bInvalidAutomaticBoxCollision_Internal' has a wrong offset!");
static_assert(offsetof(AMeshPopulate_Parent_C, MinCollisionThickness) == 0x0003DC, "Member 'AMeshPopulate_Parent_C::MinCollisionThickness' has a wrong offset!");

}

