#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OPP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "OPP_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function OPP.RBActiveSkill.Event_OnIsActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkill_Event_OnIsActiveChanged final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_Event_OnIsActiveChanged) == 0x000001, "Wrong alignment on RBActiveSkill_Event_OnIsActiveChanged");
static_assert(sizeof(RBActiveSkill_Event_OnIsActiveChanged) == 0x000001, "Wrong size on RBActiveSkill_Event_OnIsActiveChanged");
static_assert(offsetof(RBActiveSkill_Event_OnIsActiveChanged, IsActive) == 0x000000, "Member 'RBActiveSkill_Event_OnIsActiveChanged::IsActive' has a wrong offset!");

// Function OPP.RBActiveSkill.Event_OnIsInCooldownChanged
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkill_Event_OnIsInCooldownChanged final
{
public:
	bool                                          IsInCooldown;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_Event_OnIsInCooldownChanged) == 0x000001, "Wrong alignment on RBActiveSkill_Event_OnIsInCooldownChanged");
static_assert(sizeof(RBActiveSkill_Event_OnIsInCooldownChanged) == 0x000001, "Wrong size on RBActiveSkill_Event_OnIsInCooldownChanged");
static_assert(offsetof(RBActiveSkill_Event_OnIsInCooldownChanged, IsInCooldown) == 0x000000, "Member 'RBActiveSkill_Event_OnIsInCooldownChanged::IsInCooldown' has a wrong offset!");

// Function OPP.RBActiveSkill.Event_OnPlayerInitReplicated
// 0x0008 (0x0008 - 0x0000)
struct RBActiveSkill_Event_OnPlayerInitReplicated final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_Event_OnPlayerInitReplicated) == 0x000008, "Wrong alignment on RBActiveSkill_Event_OnPlayerInitReplicated");
static_assert(sizeof(RBActiveSkill_Event_OnPlayerInitReplicated) == 0x000008, "Wrong size on RBActiveSkill_Event_OnPlayerInitReplicated");
static_assert(offsetof(RBActiveSkill_Event_OnPlayerInitReplicated, Player) == 0x000000, "Member 'RBActiveSkill_Event_OnPlayerInitReplicated::Player' has a wrong offset!");

// Function OPP.RBActiveSkill.OnActiveSkillCooldownChanged
// 0x0004 (0x0004 - 0x0000)
struct RBActiveSkill_OnActiveSkillCooldownChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_OnActiveSkillCooldownChanged) == 0x000004, "Wrong alignment on RBActiveSkill_OnActiveSkillCooldownChanged");
static_assert(sizeof(RBActiveSkill_OnActiveSkillCooldownChanged) == 0x000004, "Wrong size on RBActiveSkill_OnActiveSkillCooldownChanged");
static_assert(offsetof(RBActiveSkill_OnActiveSkillCooldownChanged, OldValue) == 0x000000, "Member 'RBActiveSkill_OnActiveSkillCooldownChanged::OldValue' has a wrong offset!");

// Function OPP.RBActiveSkill.BP_CanUseSkillInLocation
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkill_BP_CanUseSkillInLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_BP_CanUseSkillInLocation) == 0x000001, "Wrong alignment on RBActiveSkill_BP_CanUseSkillInLocation");
static_assert(sizeof(RBActiveSkill_BP_CanUseSkillInLocation) == 0x000001, "Wrong size on RBActiveSkill_BP_CanUseSkillInLocation");
static_assert(offsetof(RBActiveSkill_BP_CanUseSkillInLocation, ReturnValue) == 0x000000, "Member 'RBActiveSkill_BP_CanUseSkillInLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBActiveSkill.BP_GetEffectDuration
// 0x0004 (0x0004 - 0x0000)
struct RBActiveSkill_BP_GetEffectDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_BP_GetEffectDuration) == 0x000004, "Wrong alignment on RBActiveSkill_BP_GetEffectDuration");
static_assert(sizeof(RBActiveSkill_BP_GetEffectDuration) == 0x000004, "Wrong size on RBActiveSkill_BP_GetEffectDuration");
static_assert(offsetof(RBActiveSkill_BP_GetEffectDuration, ReturnValue) == 0x000000, "Member 'RBActiveSkill_BP_GetEffectDuration::ReturnValue' has a wrong offset!");

// Function OPP.RBActiveSkill.BP_GetTotalCooldownTime
// 0x0004 (0x0004 - 0x0000)
struct RBActiveSkill_BP_GetTotalCooldownTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_BP_GetTotalCooldownTime) == 0x000004, "Wrong alignment on RBActiveSkill_BP_GetTotalCooldownTime");
static_assert(sizeof(RBActiveSkill_BP_GetTotalCooldownTime) == 0x000004, "Wrong size on RBActiveSkill_BP_GetTotalCooldownTime");
static_assert(offsetof(RBActiveSkill_BP_GetTotalCooldownTime, ReturnValue) == 0x000000, "Member 'RBActiveSkill_BP_GetTotalCooldownTime::ReturnValue' has a wrong offset!");

// Function OPP.RBActiveSkill.BP_IsSkillUsageDisabled
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkill_BP_IsSkillUsageDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_BP_IsSkillUsageDisabled) == 0x000001, "Wrong alignment on RBActiveSkill_BP_IsSkillUsageDisabled");
static_assert(sizeof(RBActiveSkill_BP_IsSkillUsageDisabled) == 0x000001, "Wrong size on RBActiveSkill_BP_IsSkillUsageDisabled");
static_assert(offsetof(RBActiveSkill_BP_IsSkillUsageDisabled, ReturnValue) == 0x000000, "Member 'RBActiveSkill_BP_IsSkillUsageDisabled::ReturnValue' has a wrong offset!");

// Function OPP.RBActiveSkill.GetControllerItem
// 0x0008 (0x0008 - 0x0000)
struct RBActiveSkill_GetControllerItem final
{
public:
	class ARBActiveSkillController*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_GetControllerItem) == 0x000008, "Wrong alignment on RBActiveSkill_GetControllerItem");
static_assert(sizeof(RBActiveSkill_GetControllerItem) == 0x000008, "Wrong size on RBActiveSkill_GetControllerItem");
static_assert(offsetof(RBActiveSkill_GetControllerItem, ReturnValue) == 0x000000, "Member 'RBActiveSkill_GetControllerItem::ReturnValue' has a wrong offset!");

// Function OPP.RBActiveSkill.GetCooldownRatio
// 0x0004 (0x0004 - 0x0000)
struct RBActiveSkill_GetCooldownRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_GetCooldownRatio) == 0x000004, "Wrong alignment on RBActiveSkill_GetCooldownRatio");
static_assert(sizeof(RBActiveSkill_GetCooldownRatio) == 0x000004, "Wrong size on RBActiveSkill_GetCooldownRatio");
static_assert(offsetof(RBActiveSkill_GetCooldownRatio, ReturnValue) == 0x000000, "Member 'RBActiveSkill_GetCooldownRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBActiveSkill.GetCooldownTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct RBActiveSkill_GetCooldownTimeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkill_GetCooldownTimeRemaining) == 0x000004, "Wrong alignment on RBActiveSkill_GetCooldownTimeRemaining");
static_assert(sizeof(RBActiveSkill_GetCooldownTimeRemaining) == 0x000004, "Wrong size on RBActiveSkill_GetCooldownTimeRemaining");
static_assert(offsetof(RBActiveSkill_GetCooldownTimeRemaining, ReturnValue) == 0x000000, "Member 'RBActiveSkill_GetCooldownTimeRemaining::ReturnValue' has a wrong offset!");

// Function OPP.RBAICondition_Blueprint.Event_EvaluateCondition
// 0x0010 (0x0010 - 0x0000)
struct RBAICondition_Blueprint_Event_EvaluateCondition final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A43[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAICondition_Blueprint_Event_EvaluateCondition) == 0x000008, "Wrong alignment on RBAICondition_Blueprint_Event_EvaluateCondition");
static_assert(sizeof(RBAICondition_Blueprint_Event_EvaluateCondition) == 0x000010, "Wrong size on RBAICondition_Blueprint_Event_EvaluateCondition");
static_assert(offsetof(RBAICondition_Blueprint_Event_EvaluateCondition, bot) == 0x000000, "Member 'RBAICondition_Blueprint_Event_EvaluateCondition::bot' has a wrong offset!");
static_assert(offsetof(RBAICondition_Blueprint_Event_EvaluateCondition, ReturnValue) == 0x000008, "Member 'RBAICondition_Blueprint_Event_EvaluateCondition::ReturnValue' has a wrong offset!");

// Function OPP.AlignedWrapBox.AddChildWrapBox
// 0x0010 (0x0010 - 0x0000)
struct AlignedWrapBox_AddChildWrapBox final
{
public:
	class UWidget*                                Content;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAlignedWrapBoxSlot*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlignedWrapBox_AddChildWrapBox) == 0x000008, "Wrong alignment on AlignedWrapBox_AddChildWrapBox");
static_assert(sizeof(AlignedWrapBox_AddChildWrapBox) == 0x000010, "Wrong size on AlignedWrapBox_AddChildWrapBox");
static_assert(offsetof(AlignedWrapBox_AddChildWrapBox, Content) == 0x000000, "Member 'AlignedWrapBox_AddChildWrapBox::Content' has a wrong offset!");
static_assert(offsetof(AlignedWrapBox_AddChildWrapBox, ReturnValue) == 0x000008, "Member 'AlignedWrapBox_AddChildWrapBox::ReturnValue' has a wrong offset!");

// Function OPP.AlignedWrapBox.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct AlignedWrapBox_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlignedWrapBox_SetHorizontalAlignment) == 0x000001, "Wrong alignment on AlignedWrapBox_SetHorizontalAlignment");
static_assert(sizeof(AlignedWrapBox_SetHorizontalAlignment) == 0x000001, "Wrong size on AlignedWrapBox_SetHorizontalAlignment");
static_assert(offsetof(AlignedWrapBox_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'AlignedWrapBox_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function OPP.AlignedWrapBox.SetInnerSlotPadding
// 0x0008 (0x0008 - 0x0000)
struct AlignedWrapBox_SetInnerSlotPadding final
{
public:
	struct FVector2D                              InPadding;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlignedWrapBox_SetInnerSlotPadding) == 0x000004, "Wrong alignment on AlignedWrapBox_SetInnerSlotPadding");
static_assert(sizeof(AlignedWrapBox_SetInnerSlotPadding) == 0x000008, "Wrong size on AlignedWrapBox_SetInnerSlotPadding");
static_assert(offsetof(AlignedWrapBox_SetInnerSlotPadding, InPadding) == 0x000000, "Member 'AlignedWrapBox_SetInnerSlotPadding::InPadding' has a wrong offset!");

// Function OPP.RBAttackDummy.BP_SetLocationFromTimeline
// 0x000C (0x000C - 0x0000)
struct RBAttackDummy_BP_SetLocationFromTimeline final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAttackDummy_BP_SetLocationFromTimeline) == 0x000004, "Wrong alignment on RBAttackDummy_BP_SetLocationFromTimeline");
static_assert(sizeof(RBAttackDummy_BP_SetLocationFromTimeline) == 0x00000C, "Wrong size on RBAttackDummy_BP_SetLocationFromTimeline");
static_assert(offsetof(RBAttackDummy_BP_SetLocationFromTimeline, NewLocation) == 0x000000, "Member 'RBAttackDummy_BP_SetLocationFromTimeline::NewLocation' has a wrong offset!");

// Function OPP.AlignedWrapBoxSlot.SetFillEmptySpace
// 0x0001 (0x0001 - 0x0000)
struct AlignedWrapBoxSlot_SetFillEmptySpace final
{
public:
	bool                                          InbFillEmptySpace;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlignedWrapBoxSlot_SetFillEmptySpace) == 0x000001, "Wrong alignment on AlignedWrapBoxSlot_SetFillEmptySpace");
static_assert(sizeof(AlignedWrapBoxSlot_SetFillEmptySpace) == 0x000001, "Wrong size on AlignedWrapBoxSlot_SetFillEmptySpace");
static_assert(offsetof(AlignedWrapBoxSlot_SetFillEmptySpace, InbFillEmptySpace) == 0x000000, "Member 'AlignedWrapBoxSlot_SetFillEmptySpace::InbFillEmptySpace' has a wrong offset!");

// Function OPP.AlignedWrapBoxSlot.SetFillSpanWhenLessThan
// 0x0004 (0x0004 - 0x0000)
struct AlignedWrapBoxSlot_SetFillSpanWhenLessThan final
{
public:
	float                                         InFillSpanWhenLessThan;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlignedWrapBoxSlot_SetFillSpanWhenLessThan) == 0x000004, "Wrong alignment on AlignedWrapBoxSlot_SetFillSpanWhenLessThan");
static_assert(sizeof(AlignedWrapBoxSlot_SetFillSpanWhenLessThan) == 0x000004, "Wrong size on AlignedWrapBoxSlot_SetFillSpanWhenLessThan");
static_assert(offsetof(AlignedWrapBoxSlot_SetFillSpanWhenLessThan, InFillSpanWhenLessThan) == 0x000000, "Member 'AlignedWrapBoxSlot_SetFillSpanWhenLessThan::InFillSpanWhenLessThan' has a wrong offset!");

// Function OPP.AlignedWrapBoxSlot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct AlignedWrapBoxSlot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          InHorizontalAlignment;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlignedWrapBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on AlignedWrapBoxSlot_SetHorizontalAlignment");
static_assert(sizeof(AlignedWrapBoxSlot_SetHorizontalAlignment) == 0x000001, "Wrong size on AlignedWrapBoxSlot_SetHorizontalAlignment");
static_assert(offsetof(AlignedWrapBoxSlot_SetHorizontalAlignment, InHorizontalAlignment) == 0x000000, "Member 'AlignedWrapBoxSlot_SetHorizontalAlignment::InHorizontalAlignment' has a wrong offset!");

// Function OPP.AlignedWrapBoxSlot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct AlignedWrapBoxSlot_SetPadding final
{
public:
	struct FMargin                                InPadding;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlignedWrapBoxSlot_SetPadding) == 0x000004, "Wrong alignment on AlignedWrapBoxSlot_SetPadding");
static_assert(sizeof(AlignedWrapBoxSlot_SetPadding) == 0x000010, "Wrong size on AlignedWrapBoxSlot_SetPadding");
static_assert(offsetof(AlignedWrapBoxSlot_SetPadding, InPadding) == 0x000000, "Member 'AlignedWrapBoxSlot_SetPadding::InPadding' has a wrong offset!");

// Function OPP.AlignedWrapBoxSlot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct AlignedWrapBoxSlot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            InVerticalAlignment;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AlignedWrapBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong alignment on AlignedWrapBoxSlot_SetVerticalAlignment");
static_assert(sizeof(AlignedWrapBoxSlot_SetVerticalAlignment) == 0x000001, "Wrong size on AlignedWrapBoxSlot_SetVerticalAlignment");
static_assert(offsetof(AlignedWrapBoxSlot_SetVerticalAlignment, InVerticalAlignment) == 0x000000, "Member 'AlignedWrapBoxSlot_SetVerticalAlignment::InVerticalAlignment' has a wrong offset!");

// Function OPP.RBOutlineComponent.BP_IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBOutlineComponent_BP_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOutlineComponent_BP_IsEnabled) == 0x000001, "Wrong alignment on RBOutlineComponent_BP_IsEnabled");
static_assert(sizeof(RBOutlineComponent_BP_IsEnabled) == 0x000001, "Wrong size on RBOutlineComponent_BP_IsEnabled");
static_assert(offsetof(RBOutlineComponent_BP_IsEnabled, ReturnValue) == 0x000000, "Member 'RBOutlineComponent_BP_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBOutlineComponent.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBOutlineComponent_BP_SetEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOutlineComponent_BP_SetEnabled) == 0x000001, "Wrong alignment on RBOutlineComponent_BP_SetEnabled");
static_assert(sizeof(RBOutlineComponent_BP_SetEnabled) == 0x000001, "Wrong size on RBOutlineComponent_BP_SetEnabled");
static_assert(offsetof(RBOutlineComponent_BP_SetEnabled, bEnabledValue) == 0x000000, "Member 'RBOutlineComponent_BP_SetEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBUserWidget.AddToGameViewport
// 0x0004 (0x0004 - 0x0000)
struct RBUserWidget_AddToGameViewport final
{
public:
	int32                                         ZOrder;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUserWidget_AddToGameViewport) == 0x000004, "Wrong alignment on RBUserWidget_AddToGameViewport");
static_assert(sizeof(RBUserWidget_AddToGameViewport) == 0x000004, "Wrong size on RBUserWidget_AddToGameViewport");
static_assert(offsetof(RBUserWidget_AddToGameViewport, ZOrder) == 0x000000, "Member 'RBUserWidget_AddToGameViewport::ZOrder' has a wrong offset!");

// Function OPP.RBUserWidget.BP_SplitMessageToMultipleLines
// 0x0028 (0x0028 - 0x0000)
struct RBUserWidget_BP_SplitMessageToMultipleLines final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUserWidget_BP_SplitMessageToMultipleLines) == 0x000008, "Wrong alignment on RBUserWidget_BP_SplitMessageToMultipleLines");
static_assert(sizeof(RBUserWidget_BP_SplitMessageToMultipleLines) == 0x000028, "Wrong size on RBUserWidget_BP_SplitMessageToMultipleLines");
static_assert(offsetof(RBUserWidget_BP_SplitMessageToMultipleLines, Message) == 0x000000, "Member 'RBUserWidget_BP_SplitMessageToMultipleLines::Message' has a wrong offset!");
static_assert(offsetof(RBUserWidget_BP_SplitMessageToMultipleLines, ReturnValue) == 0x000018, "Member 'RBUserWidget_BP_SplitMessageToMultipleLines::ReturnValue' has a wrong offset!");

// Function OPP.RBUserWidget.Event_InputSourceChanged
// 0x0001 (0x0001 - 0x0000)
struct RBUserWidget_Event_InputSourceChanged final
{
public:
	bool                                          bIsGamepad;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUserWidget_Event_InputSourceChanged) == 0x000001, "Wrong alignment on RBUserWidget_Event_InputSourceChanged");
static_assert(sizeof(RBUserWidget_Event_InputSourceChanged) == 0x000001, "Wrong size on RBUserWidget_Event_InputSourceChanged");
static_assert(offsetof(RBUserWidget_Event_InputSourceChanged, bIsGamepad) == 0x000000, "Member 'RBUserWidget_Event_InputSourceChanged::bIsGamepad' has a wrong offset!");

// Function OPP.RBUserWidget.BP_IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct RBUserWidget_BP_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUserWidget_BP_IsUsingGamepad) == 0x000001, "Wrong alignment on RBUserWidget_BP_IsUsingGamepad");
static_assert(sizeof(RBUserWidget_BP_IsUsingGamepad) == 0x000001, "Wrong size on RBUserWidget_BP_IsUsingGamepad");
static_assert(offsetof(RBUserWidget_BP_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'RBUserWidget_BP_IsUsingGamepad::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuWidget.BP_GetFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct RBMenuWidget_BP_GetFocusedWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWidget_BP_GetFocusedWidget) == 0x000008, "Wrong alignment on RBMenuWidget_BP_GetFocusedWidget");
static_assert(sizeof(RBMenuWidget_BP_GetFocusedWidget) == 0x000008, "Wrong size on RBMenuWidget_BP_GetFocusedWidget");
static_assert(offsetof(RBMenuWidget_BP_GetFocusedWidget, ReturnValue) == 0x000000, "Member 'RBMenuWidget_BP_GetFocusedWidget::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuWidget.BP_PushAndClearTransitionStack
// 0x0001 (0x0001 - 0x0000)
struct RBMenuWidget_BP_PushAndClearTransitionStack final
{
public:
	bool                                          bDoTransition;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWidget_BP_PushAndClearTransitionStack) == 0x000001, "Wrong alignment on RBMenuWidget_BP_PushAndClearTransitionStack");
static_assert(sizeof(RBMenuWidget_BP_PushAndClearTransitionStack) == 0x000001, "Wrong size on RBMenuWidget_BP_PushAndClearTransitionStack");
static_assert(offsetof(RBMenuWidget_BP_PushAndClearTransitionStack, bDoTransition) == 0x000000, "Member 'RBMenuWidget_BP_PushAndClearTransitionStack::bDoTransition' has a wrong offset!");

// Function OPP.RBMenuWidget.BP_SetFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct RBMenuWidget_BP_SetFocusedWidget final
{
public:
	class UWidget*                                WidgetToFocus;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWidget_BP_SetFocusedWidget) == 0x000008, "Wrong alignment on RBMenuWidget_BP_SetFocusedWidget");
static_assert(sizeof(RBMenuWidget_BP_SetFocusedWidget) == 0x000008, "Wrong size on RBMenuWidget_BP_SetFocusedWidget");
static_assert(offsetof(RBMenuWidget_BP_SetFocusedWidget, WidgetToFocus) == 0x000000, "Member 'RBMenuWidget_BP_SetFocusedWidget::WidgetToFocus' has a wrong offset!");

// Function OPP.RBMenuWidget.Event_OnUnfocusMenu
// 0x0001 (0x0001 - 0x0000)
struct RBMenuWidget_Event_OnUnfocusMenu final
{
public:
	bool                                          bShouldHide;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWidget_Event_OnUnfocusMenu) == 0x000001, "Wrong alignment on RBMenuWidget_Event_OnUnfocusMenu");
static_assert(sizeof(RBMenuWidget_Event_OnUnfocusMenu) == 0x000001, "Wrong size on RBMenuWidget_Event_OnUnfocusMenu");
static_assert(offsetof(RBMenuWidget_Event_OnUnfocusMenu, bShouldHide) == 0x000000, "Member 'RBMenuWidget_Event_OnUnfocusMenu::bShouldHide' has a wrong offset!");

// Function OPP.RBMenuWidget.IsMenuFocused
// 0x0001 (0x0001 - 0x0000)
struct RBMenuWidget_IsMenuFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWidget_IsMenuFocused) == 0x000001, "Wrong alignment on RBMenuWidget_IsMenuFocused");
static_assert(sizeof(RBMenuWidget_IsMenuFocused) == 0x000001, "Wrong size on RBMenuWidget_IsMenuFocused");
static_assert(offsetof(RBMenuWidget_IsMenuFocused, ReturnValue) == 0x000000, "Member 'RBMenuWidget_IsMenuFocused::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_CompleteSingleObjective
// 0x0010 (0x0010 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_CompleteSingleObjective final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ObjectiveActor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_CompleteSingleObjective) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_BP_CompleteSingleObjective");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_CompleteSingleObjective) == 0x000010, "Wrong size on RBBaseObjectiveCoordinator_BP_CompleteSingleObjective");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_CompleteSingleObjective, Player) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_CompleteSingleObjective::Player' has a wrong offset!");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_CompleteSingleObjective, ObjectiveActor) == 0x000008, "Member 'RBBaseObjectiveCoordinator_BP_CompleteSingleObjective::ObjectiveActor' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.CompleteCoordinator
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_CompleteCoordinator final
{
public:
	bool                                          ForceCompletion;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_CompleteCoordinator) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_CompleteCoordinator");
static_assert(sizeof(RBBaseObjectiveCoordinator_CompleteCoordinator) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_CompleteCoordinator");
static_assert(offsetof(RBBaseObjectiveCoordinator_CompleteCoordinator, ForceCompletion) == 0x000000, "Member 'RBBaseObjectiveCoordinator_CompleteCoordinator::ForceCompletion' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.Event_OnCleanSingleObjectiveActor
// 0x0008 (0x0008 - 0x0000)
struct RBBaseObjectiveCoordinator_Event_OnCleanSingleObjectiveActor final
{
public:
	class AActor*                                 ObjectiveActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_Event_OnCleanSingleObjectiveActor) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_Event_OnCleanSingleObjectiveActor");
static_assert(sizeof(RBBaseObjectiveCoordinator_Event_OnCleanSingleObjectiveActor) == 0x000008, "Wrong size on RBBaseObjectiveCoordinator_Event_OnCleanSingleObjectiveActor");
static_assert(offsetof(RBBaseObjectiveCoordinator_Event_OnCleanSingleObjectiveActor, ObjectiveActor) == 0x000000, "Member 'RBBaseObjectiveCoordinator_Event_OnCleanSingleObjectiveActor::ObjectiveActor' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.Event_OnCoordinatorStateChanged
// 0x0002 (0x0002 - 0x0000)
struct RBBaseObjectiveCoordinator_Event_OnCoordinatorStateChanged final
{
public:
	EObjectiveCoordinatorState                    OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveCoordinatorState                    NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_Event_OnCoordinatorStateChanged) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_Event_OnCoordinatorStateChanged");
static_assert(sizeof(RBBaseObjectiveCoordinator_Event_OnCoordinatorStateChanged) == 0x000002, "Wrong size on RBBaseObjectiveCoordinator_Event_OnCoordinatorStateChanged");
static_assert(offsetof(RBBaseObjectiveCoordinator_Event_OnCoordinatorStateChanged, OldState) == 0x000000, "Member 'RBBaseObjectiveCoordinator_Event_OnCoordinatorStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(RBBaseObjectiveCoordinator_Event_OnCoordinatorStateChanged, NewState) == 0x000001, "Member 'RBBaseObjectiveCoordinator_Event_OnCoordinatorStateChanged::NewState' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.Event_OnSetupSingleObjectiveActor
// 0x0008 (0x0008 - 0x0000)
struct RBBaseObjectiveCoordinator_Event_OnSetupSingleObjectiveActor final
{
public:
	class AActor*                                 ObjectiveActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_Event_OnSetupSingleObjectiveActor) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_Event_OnSetupSingleObjectiveActor");
static_assert(sizeof(RBBaseObjectiveCoordinator_Event_OnSetupSingleObjectiveActor) == 0x000008, "Wrong size on RBBaseObjectiveCoordinator_Event_OnSetupSingleObjectiveActor");
static_assert(offsetof(RBBaseObjectiveCoordinator_Event_OnSetupSingleObjectiveActor, ObjectiveActor) == 0x000000, "Member 'RBBaseObjectiveCoordinator_Event_OnSetupSingleObjectiveActor::ObjectiveActor' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.Multicast_OnSingleCompletedObjectiveReverted
// 0x0010 (0x0010 - 0x0000)
struct RBBaseObjectiveCoordinator_Multicast_OnSingleCompletedObjectiveReverted final
{
public:
	class AActor*                                 ObjectiveActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReaddToRemainingList;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBaseObjectiveCoordinator_Multicast_OnSingleCompletedObjectiveReverted) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_Multicast_OnSingleCompletedObjectiveReverted");
static_assert(sizeof(RBBaseObjectiveCoordinator_Multicast_OnSingleCompletedObjectiveReverted) == 0x000010, "Wrong size on RBBaseObjectiveCoordinator_Multicast_OnSingleCompletedObjectiveReverted");
static_assert(offsetof(RBBaseObjectiveCoordinator_Multicast_OnSingleCompletedObjectiveReverted, ObjectiveActor) == 0x000000, "Member 'RBBaseObjectiveCoordinator_Multicast_OnSingleCompletedObjectiveReverted::ObjectiveActor' has a wrong offset!");
static_assert(offsetof(RBBaseObjectiveCoordinator_Multicast_OnSingleCompletedObjectiveReverted, bReaddToRemainingList) == 0x000008, "Member 'RBBaseObjectiveCoordinator_Multicast_OnSingleCompletedObjectiveReverted::bReaddToRemainingList' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.Multicast_OnSingleObjectiveCompleted
// 0x0018 (0x0018 - 0x0000)
struct RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ObjectiveActor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFinalObjective;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveFromRemainingList;                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6C[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted");
static_assert(sizeof(RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted) == 0x000018, "Wrong size on RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted");
static_assert(offsetof(RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted, Player) == 0x000000, "Member 'RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted::Player' has a wrong offset!");
static_assert(offsetof(RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted, ObjectiveActor) == 0x000008, "Member 'RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted::ObjectiveActor' has a wrong offset!");
static_assert(offsetof(RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted, IsFinalObjective) == 0x000010, "Member 'RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted::IsFinalObjective' has a wrong offset!");
static_assert(offsetof(RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted, bRemoveFromRemainingList) == 0x000011, "Member 'RBBaseObjectiveCoordinator_Multicast_OnSingleObjectiveCompleted::bRemoveFromRemainingList' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.OnEndOfStage
// 0x0058 (0x0058 - 0x0000)
struct RBBaseObjectiveCoordinator_OnEndOfStage final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsRestart;                                         // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6D[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBaseObjectiveCoordinator_OnEndOfStage) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_OnEndOfStage");
static_assert(sizeof(RBBaseObjectiveCoordinator_OnEndOfStage) == 0x000058, "Wrong size on RBBaseObjectiveCoordinator_OnEndOfStage");
static_assert(offsetof(RBBaseObjectiveCoordinator_OnEndOfStage, StageID) == 0x000000, "Member 'RBBaseObjectiveCoordinator_OnEndOfStage::StageID' has a wrong offset!");
static_assert(offsetof(RBBaseObjectiveCoordinator_OnEndOfStage, MissionID) == 0x000028, "Member 'RBBaseObjectiveCoordinator_OnEndOfStage::MissionID' has a wrong offset!");
static_assert(offsetof(RBBaseObjectiveCoordinator_OnEndOfStage, IsRestart) == 0x000050, "Member 'RBBaseObjectiveCoordinator_OnEndOfStage::IsRestart' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.OnRep_CoordinatorState
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_OnRep_CoordinatorState final
{
public:
	EObjectiveCoordinatorState                    OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_OnRep_CoordinatorState) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_OnRep_CoordinatorState");
static_assert(sizeof(RBBaseObjectiveCoordinator_OnRep_CoordinatorState) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_OnRep_CoordinatorState");
static_assert(offsetof(RBBaseObjectiveCoordinator_OnRep_CoordinatorState, OldState) == 0x000000, "Member 'RBBaseObjectiveCoordinator_OnRep_CoordinatorState::OldState' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.OnStageReady
// 0x0050 (0x0050 - 0x0000)
struct RBBaseObjectiveCoordinator_OnStageReady final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_OnStageReady) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_OnStageReady");
static_assert(sizeof(RBBaseObjectiveCoordinator_OnStageReady) == 0x000050, "Wrong size on RBBaseObjectiveCoordinator_OnStageReady");
static_assert(offsetof(RBBaseObjectiveCoordinator_OnStageReady, StageID) == 0x000000, "Member 'RBBaseObjectiveCoordinator_OnStageReady::StageID' has a wrong offset!");
static_assert(offsetof(RBBaseObjectiveCoordinator_OnStageReady, MissionID) == 0x000028, "Member 'RBBaseObjectiveCoordinator_OnStageReady::MissionID' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_SetEnabled) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_SetEnabled");
static_assert(sizeof(RBBaseObjectiveCoordinator_SetEnabled) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_SetEnabled");
static_assert(offsetof(RBBaseObjectiveCoordinator_SetEnabled, Enabled) == 0x000000, "Member 'RBBaseObjectiveCoordinator_SetEnabled::Enabled' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.StartCoordinator
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_StartCoordinator final
{
public:
	bool                                          bForceSkipDelay;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_StartCoordinator) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_StartCoordinator");
static_assert(sizeof(RBBaseObjectiveCoordinator_StartCoordinator) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_StartCoordinator");
static_assert(offsetof(RBBaseObjectiveCoordinator_StartCoordinator, bForceSkipDelay) == 0x000000, "Member 'RBBaseObjectiveCoordinator_StartCoordinator::bForceSkipDelay' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_CalculateObjectiveActors
// 0x0010 (0x0010 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_CalculateObjectiveActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_CalculateObjectiveActors) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_BP_CalculateObjectiveActors");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_CalculateObjectiveActors) == 0x000010, "Wrong size on RBBaseObjectiveCoordinator_BP_CalculateObjectiveActors");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_CalculateObjectiveActors, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_CalculateObjectiveActors::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_GetAllValidPrimaryObjectiveActors
// 0x0010 (0x0010 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_GetAllValidPrimaryObjectiveActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_GetAllValidPrimaryObjectiveActors) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_BP_GetAllValidPrimaryObjectiveActors");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_GetAllValidPrimaryObjectiveActors) == 0x000010, "Wrong size on RBBaseObjectiveCoordinator_BP_GetAllValidPrimaryObjectiveActors");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_GetAllValidPrimaryObjectiveActors, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_GetAllValidPrimaryObjectiveActors::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_GetAllValidSecondaryObjectiveActors
// 0x0010 (0x0010 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_GetAllValidSecondaryObjectiveActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_GetAllValidSecondaryObjectiveActors) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_BP_GetAllValidSecondaryObjectiveActors");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_GetAllValidSecondaryObjectiveActors) == 0x000010, "Wrong size on RBBaseObjectiveCoordinator_BP_GetAllValidSecondaryObjectiveActors");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_GetAllValidSecondaryObjectiveActors, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_GetAllValidSecondaryObjectiveActors::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_GetFailedSound
// 0x0008 (0x0008 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_GetFailedSound final
{
public:
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_GetFailedSound) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_BP_GetFailedSound");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_GetFailedSound) == 0x000008, "Wrong size on RBBaseObjectiveCoordinator_BP_GetFailedSound");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_GetFailedSound, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_GetFailedSound::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_GetObjectiveLevelText
// 0x0018 (0x0018 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_GetObjectiveLevelText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_GetObjectiveLevelText) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_BP_GetObjectiveLevelText");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_GetObjectiveLevelText) == 0x000018, "Wrong size on RBBaseObjectiveCoordinator_BP_GetObjectiveLevelText");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_GetObjectiveLevelText, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_GetObjectiveLevelText::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_GetObjectiveMaxCount
// 0x0004 (0x0004 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_GetObjectiveMaxCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_GetObjectiveMaxCount) == 0x000004, "Wrong alignment on RBBaseObjectiveCoordinator_BP_GetObjectiveMaxCount");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_GetObjectiveMaxCount) == 0x000004, "Wrong size on RBBaseObjectiveCoordinator_BP_GetObjectiveMaxCount");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_GetObjectiveMaxCount, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_GetObjectiveMaxCount::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_GetRemainingObjectiveActors
// 0x0010 (0x0010 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveActors) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveActors");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveActors) == 0x000010, "Wrong size on RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveActors");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveActors, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveActors::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_GetRemainingObjectiveCount
// 0x0004 (0x0004 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveCount) == 0x000004, "Wrong alignment on RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveCount");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveCount) == 0x000004, "Wrong size on RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveCount");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveCount, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_GetRemainingObjectiveCount::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.BP_ShouldShowObjectiveInHUD
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_BP_ShouldShowObjectiveInHUD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_BP_ShouldShowObjectiveInHUD) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_BP_ShouldShowObjectiveInHUD");
static_assert(sizeof(RBBaseObjectiveCoordinator_BP_ShouldShowObjectiveInHUD) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_BP_ShouldShowObjectiveInHUD");
static_assert(offsetof(RBBaseObjectiveCoordinator_BP_ShouldShowObjectiveInHUD, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_BP_ShouldShowObjectiveInHUD::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.GetCoordinatorName
// 0x0010 (0x0010 - 0x0000)
struct RBBaseObjectiveCoordinator_GetCoordinatorName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_GetCoordinatorName) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_GetCoordinatorName");
static_assert(sizeof(RBBaseObjectiveCoordinator_GetCoordinatorName) == 0x000010, "Wrong size on RBBaseObjectiveCoordinator_GetCoordinatorName");
static_assert(offsetof(RBBaseObjectiveCoordinator_GetCoordinatorName, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_GetCoordinatorName::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.GetCurrentCompletedCount
// 0x0004 (0x0004 - 0x0000)
struct RBBaseObjectiveCoordinator_GetCurrentCompletedCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_GetCurrentCompletedCount) == 0x000004, "Wrong alignment on RBBaseObjectiveCoordinator_GetCurrentCompletedCount");
static_assert(sizeof(RBBaseObjectiveCoordinator_GetCurrentCompletedCount) == 0x000004, "Wrong size on RBBaseObjectiveCoordinator_GetCurrentCompletedCount");
static_assert(offsetof(RBBaseObjectiveCoordinator_GetCurrentCompletedCount, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_GetCurrentCompletedCount::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.GetIntermediateObjectivesData
// 0x0010 (0x0010 - 0x0000)
struct RBBaseObjectiveCoordinator_GetIntermediateObjectivesData final
{
public:
	TArray<struct FIntermediateObjectiveData>     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_GetIntermediateObjectivesData) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_GetIntermediateObjectivesData");
static_assert(sizeof(RBBaseObjectiveCoordinator_GetIntermediateObjectivesData) == 0x000010, "Wrong size on RBBaseObjectiveCoordinator_GetIntermediateObjectivesData");
static_assert(offsetof(RBBaseObjectiveCoordinator_GetIntermediateObjectivesData, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_GetIntermediateObjectivesData::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.GetMainObjectiveType
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_GetMainObjectiveType final
{
public:
	EMainObjectiveType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_GetMainObjectiveType) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_GetMainObjectiveType");
static_assert(sizeof(RBBaseObjectiveCoordinator_GetMainObjectiveType) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_GetMainObjectiveType");
static_assert(offsetof(RBBaseObjectiveCoordinator_GetMainObjectiveType, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_GetMainObjectiveType::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.GetMaxCount
// 0x0004 (0x0004 - 0x0000)
struct RBBaseObjectiveCoordinator_GetMaxCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_GetMaxCount) == 0x000004, "Wrong alignment on RBBaseObjectiveCoordinator_GetMaxCount");
static_assert(sizeof(RBBaseObjectiveCoordinator_GetMaxCount) == 0x000004, "Wrong size on RBBaseObjectiveCoordinator_GetMaxCount");
static_assert(offsetof(RBBaseObjectiveCoordinator_GetMaxCount, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_GetMaxCount::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.GetObjectiveWidgetIcon
// 0x0008 (0x0008 - 0x0000)
struct RBBaseObjectiveCoordinator_GetObjectiveWidgetIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_GetObjectiveWidgetIcon) == 0x000008, "Wrong alignment on RBBaseObjectiveCoordinator_GetObjectiveWidgetIcon");
static_assert(sizeof(RBBaseObjectiveCoordinator_GetObjectiveWidgetIcon) == 0x000008, "Wrong size on RBBaseObjectiveCoordinator_GetObjectiveWidgetIcon");
static_assert(offsetof(RBBaseObjectiveCoordinator_GetObjectiveWidgetIcon, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_GetObjectiveWidgetIcon::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.HasIntermediateObjectiveText
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_HasIntermediateObjectiveText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_HasIntermediateObjectiveText) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_HasIntermediateObjectiveText");
static_assert(sizeof(RBBaseObjectiveCoordinator_HasIntermediateObjectiveText) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_HasIntermediateObjectiveText");
static_assert(offsetof(RBBaseObjectiveCoordinator_HasIntermediateObjectiveText, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_HasIntermediateObjectiveText::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_IsCompleted) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_IsCompleted");
static_assert(sizeof(RBBaseObjectiveCoordinator_IsCompleted) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_IsCompleted");
static_assert(offsetof(RBBaseObjectiveCoordinator_IsCompleted, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_IsCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.IsDisabled
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_IsDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_IsDisabled) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_IsDisabled");
static_assert(sizeof(RBBaseObjectiveCoordinator_IsDisabled) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_IsDisabled");
static_assert(offsetof(RBBaseObjectiveCoordinator_IsDisabled, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_IsDisabled::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.IsFinalObjective
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_IsFinalObjective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_IsFinalObjective) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_IsFinalObjective");
static_assert(sizeof(RBBaseObjectiveCoordinator_IsFinalObjective) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_IsFinalObjective");
static_assert(offsetof(RBBaseObjectiveCoordinator_IsFinalObjective, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_IsFinalObjective::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.IsStarted
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_IsStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_IsStarted) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_IsStarted");
static_assert(sizeof(RBBaseObjectiveCoordinator_IsStarted) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_IsStarted");
static_assert(offsetof(RBBaseObjectiveCoordinator_IsStarted, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_IsStarted::ReturnValue' has a wrong offset!");

// Function OPP.RBBaseObjectiveCoordinator.IsUserFacing
// 0x0001 (0x0001 - 0x0000)
struct RBBaseObjectiveCoordinator_IsUserFacing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBaseObjectiveCoordinator_IsUserFacing) == 0x000001, "Wrong alignment on RBBaseObjectiveCoordinator_IsUserFacing");
static_assert(sizeof(RBBaseObjectiveCoordinator_IsUserFacing) == 0x000001, "Wrong size on RBBaseObjectiveCoordinator_IsUserFacing");
static_assert(offsetof(RBBaseObjectiveCoordinator_IsUserFacing, ReturnValue) == 0x000000, "Member 'RBBaseObjectiveCoordinator_IsUserFacing::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneDefenceObjectiveCoordinator.OnPlayerEnteredTrigger
// 0x0008 (0x0008 - 0x0000)
struct RBZoneDefenceObjectiveCoordinator_OnPlayerEnteredTrigger final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneDefenceObjectiveCoordinator_OnPlayerEnteredTrigger) == 0x000008, "Wrong alignment on RBZoneDefenceObjectiveCoordinator_OnPlayerEnteredTrigger");
static_assert(sizeof(RBZoneDefenceObjectiveCoordinator_OnPlayerEnteredTrigger) == 0x000008, "Wrong size on RBZoneDefenceObjectiveCoordinator_OnPlayerEnteredTrigger");
static_assert(offsetof(RBZoneDefenceObjectiveCoordinator_OnPlayerEnteredTrigger, Player) == 0x000000, "Member 'RBZoneDefenceObjectiveCoordinator_OnPlayerEnteredTrigger::Player' has a wrong offset!");

// Function OPP.RBZoneDefenceObjectiveCoordinator.OnPlayerExitedTrigger
// 0x0008 (0x0008 - 0x0000)
struct RBZoneDefenceObjectiveCoordinator_OnPlayerExitedTrigger final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneDefenceObjectiveCoordinator_OnPlayerExitedTrigger) == 0x000008, "Wrong alignment on RBZoneDefenceObjectiveCoordinator_OnPlayerExitedTrigger");
static_assert(sizeof(RBZoneDefenceObjectiveCoordinator_OnPlayerExitedTrigger) == 0x000008, "Wrong size on RBZoneDefenceObjectiveCoordinator_OnPlayerExitedTrigger");
static_assert(offsetof(RBZoneDefenceObjectiveCoordinator_OnPlayerExitedTrigger, Player) == 0x000000, "Member 'RBZoneDefenceObjectiveCoordinator_OnPlayerExitedTrigger::Player' has a wrong offset!");

// Function OPP.RBZoneDefenceObjectiveCoordinator.GetZoneProgress
// 0x0010 (0x0010 - 0x0000)
struct RBZoneDefenceObjectiveCoordinator_GetZoneProgress final
{
public:
	const class ARBZoneDefenceLocation*           Zone;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6F[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBZoneDefenceObjectiveCoordinator_GetZoneProgress) == 0x000008, "Wrong alignment on RBZoneDefenceObjectiveCoordinator_GetZoneProgress");
static_assert(sizeof(RBZoneDefenceObjectiveCoordinator_GetZoneProgress) == 0x000010, "Wrong size on RBZoneDefenceObjectiveCoordinator_GetZoneProgress");
static_assert(offsetof(RBZoneDefenceObjectiveCoordinator_GetZoneProgress, Zone) == 0x000000, "Member 'RBZoneDefenceObjectiveCoordinator_GetZoneProgress::Zone' has a wrong offset!");
static_assert(offsetof(RBZoneDefenceObjectiveCoordinator_GetZoneProgress, ReturnValue) == 0x000008, "Member 'RBZoneDefenceObjectiveCoordinator_GetZoneProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneDefenceObjectiveCoordinator.IsZoneActive
// 0x0010 (0x0010 - 0x0000)
struct RBZoneDefenceObjectiveCoordinator_IsZoneActive final
{
public:
	const class ARBZoneDefenceLocation*           Zone;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A70[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBZoneDefenceObjectiveCoordinator_IsZoneActive) == 0x000008, "Wrong alignment on RBZoneDefenceObjectiveCoordinator_IsZoneActive");
static_assert(sizeof(RBZoneDefenceObjectiveCoordinator_IsZoneActive) == 0x000010, "Wrong size on RBZoneDefenceObjectiveCoordinator_IsZoneActive");
static_assert(offsetof(RBZoneDefenceObjectiveCoordinator_IsZoneActive, Zone) == 0x000000, "Member 'RBZoneDefenceObjectiveCoordinator_IsZoneActive::Zone' has a wrong offset!");
static_assert(offsetof(RBZoneDefenceObjectiveCoordinator_IsZoneActive, ReturnValue) == 0x000008, "Member 'RBZoneDefenceObjectiveCoordinator_IsZoneActive::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneDefenceObjectiveCoordinator.IsZoneCompleted
// 0x0010 (0x0010 - 0x0000)
struct RBZoneDefenceObjectiveCoordinator_IsZoneCompleted final
{
public:
	const class ARBZoneDefenceLocation*           Zone;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A71[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBZoneDefenceObjectiveCoordinator_IsZoneCompleted) == 0x000008, "Wrong alignment on RBZoneDefenceObjectiveCoordinator_IsZoneCompleted");
static_assert(sizeof(RBZoneDefenceObjectiveCoordinator_IsZoneCompleted) == 0x000010, "Wrong size on RBZoneDefenceObjectiveCoordinator_IsZoneCompleted");
static_assert(offsetof(RBZoneDefenceObjectiveCoordinator_IsZoneCompleted, Zone) == 0x000000, "Member 'RBZoneDefenceObjectiveCoordinator_IsZoneCompleted::Zone' has a wrong offset!");
static_assert(offsetof(RBZoneDefenceObjectiveCoordinator_IsZoneCompleted, ReturnValue) == 0x000008, "Member 'RBZoneDefenceObjectiveCoordinator_IsZoneCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.BP_OnConsumeItemAnimNotify
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_BP_OnConsumeItemAnimNotify final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_BP_OnConsumeItemAnimNotify) == 0x000004, "Wrong alignment on RBPickup_BP_OnConsumeItemAnimNotify");
static_assert(sizeof(RBPickup_BP_OnConsumeItemAnimNotify) == 0x000008, "Wrong size on RBPickup_BP_OnConsumeItemAnimNotify");
static_assert(offsetof(RBPickup_BP_OnConsumeItemAnimNotify, ID) == 0x000000, "Member 'RBPickup_BP_OnConsumeItemAnimNotify::ID' has a wrong offset!");

// Function OPP.RBPickup.BP_OnInitializeRecycledItem
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_BP_OnInitializeRecycledItem final
{
public:
	class ARBPickup*                              OriginalItem;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_BP_OnInitializeRecycledItem) == 0x000008, "Wrong alignment on RBPickup_BP_OnInitializeRecycledItem");
static_assert(sizeof(RBPickup_BP_OnInitializeRecycledItem) == 0x000008, "Wrong size on RBPickup_BP_OnInitializeRecycledItem");
static_assert(offsetof(RBPickup_BP_OnInitializeRecycledItem, OriginalItem) == 0x000000, "Member 'RBPickup_BP_OnInitializeRecycledItem::OriginalItem' has a wrong offset!");

// Function OPP.RBPickup.BP_SetIsInteractible
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_BP_SetIsInteractible final
{
public:
	bool                                          Interactible;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_BP_SetIsInteractible) == 0x000001, "Wrong alignment on RBPickup_BP_SetIsInteractible");
static_assert(sizeof(RBPickup_BP_SetIsInteractible) == 0x000001, "Wrong size on RBPickup_BP_SetIsInteractible");
static_assert(offsetof(RBPickup_BP_SetIsInteractible, Interactible) == 0x000000, "Member 'RBPickup_BP_SetIsInteractible::Interactible' has a wrong offset!");

// Function OPP.RBPickup.BP_TickItem
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_BP_TickItem final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A87[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPickup_BP_TickItem) == 0x000004, "Wrong alignment on RBPickup_BP_TickItem");
static_assert(sizeof(RBPickup_BP_TickItem) == 0x000008, "Wrong size on RBPickup_BP_TickItem");
static_assert(offsetof(RBPickup_BP_TickItem, DeltaTime) == 0x000000, "Member 'RBPickup_BP_TickItem::DeltaTime' has a wrong offset!");
static_assert(offsetof(RBPickup_BP_TickItem, ReturnValue) == 0x000004, "Member 'RBPickup_BP_TickItem::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.Event_OnItemHeldInHandChanged
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_Event_OnItemHeldInHandChanged final
{
public:
	bool                                          bHeldInHand;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_Event_OnItemHeldInHandChanged) == 0x000001, "Wrong alignment on RBPickup_Event_OnItemHeldInHandChanged");
static_assert(sizeof(RBPickup_Event_OnItemHeldInHandChanged) == 0x000001, "Wrong size on RBPickup_Event_OnItemHeldInHandChanged");
static_assert(offsetof(RBPickup_Event_OnItemHeldInHandChanged, bHeldInHand) == 0x000000, "Member 'RBPickup_Event_OnItemHeldInHandChanged::bHeldInHand' has a wrong offset!");

// Function OPP.RBPickup.Event_OnPickedUp
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_Event_OnPickedUp final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_Event_OnPickedUp) == 0x000008, "Wrong alignment on RBPickup_Event_OnPickedUp");
static_assert(sizeof(RBPickup_Event_OnPickedUp) == 0x000008, "Wrong size on RBPickup_Event_OnPickedUp");
static_assert(offsetof(RBPickup_Event_OnPickedUp, Pawn) == 0x000000, "Member 'RBPickup_Event_OnPickedUp::Pawn' has a wrong offset!");

// Function OPP.RBPickup.Event_OnUpdateVisibility
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_Event_OnUpdateVisibility final
{
public:
	bool                                          bShouldBeHidden;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_Event_OnUpdateVisibility) == 0x000001, "Wrong alignment on RBPickup_Event_OnUpdateVisibility");
static_assert(sizeof(RBPickup_Event_OnUpdateVisibility) == 0x000001, "Wrong size on RBPickup_Event_OnUpdateVisibility");
static_assert(offsetof(RBPickup_Event_OnUpdateVisibility, bShouldBeHidden) == 0x000000, "Member 'RBPickup_Event_OnUpdateVisibility::bShouldBeHidden' has a wrong offset!");

// Function OPP.RBPickup.Multicast_OnDropped
// 0x0050 (0x0050 - 0x0000)
struct RBPickup_Multicast_OnDropped final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A88[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPredicted;                                        // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A89[0xF];                                     // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPickup_Multicast_OnDropped) == 0x000010, "Wrong alignment on RBPickup_Multicast_OnDropped");
static_assert(sizeof(RBPickup_Multicast_OnDropped) == 0x000050, "Wrong size on RBPickup_Multicast_OnDropped");
static_assert(offsetof(RBPickup_Multicast_OnDropped, Pawn) == 0x000000, "Member 'RBPickup_Multicast_OnDropped::Pawn' has a wrong offset!");
static_assert(offsetof(RBPickup_Multicast_OnDropped, Transform) == 0x000010, "Member 'RBPickup_Multicast_OnDropped::Transform' has a wrong offset!");
static_assert(offsetof(RBPickup_Multicast_OnDropped, bPredicted) == 0x000040, "Member 'RBPickup_Multicast_OnDropped::bPredicted' has a wrong offset!");

// Function OPP.RBPickup.OnConsumeItemCancelledNotify
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_OnConsumeItemCancelledNotify final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_OnConsumeItemCancelledNotify) == 0x000008, "Wrong alignment on RBPickup_OnConsumeItemCancelledNotify");
static_assert(sizeof(RBPickup_OnConsumeItemCancelledNotify) == 0x000008, "Wrong size on RBPickup_OnConsumeItemCancelledNotify");
static_assert(offsetof(RBPickup_OnConsumeItemCancelledNotify, Pawn) == 0x000000, "Member 'RBPickup_OnConsumeItemCancelledNotify::Pawn' has a wrong offset!");

// Function OPP.RBPickup.OnConsumeItemNotify
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_OnConsumeItemNotify final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_OnConsumeItemNotify) == 0x000008, "Wrong alignment on RBPickup_OnConsumeItemNotify");
static_assert(sizeof(RBPickup_OnConsumeItemNotify) == 0x000008, "Wrong size on RBPickup_OnConsumeItemNotify");
static_assert(offsetof(RBPickup_OnConsumeItemNotify, Pawn) == 0x000000, "Member 'RBPickup_OnConsumeItemNotify::Pawn' has a wrong offset!");

// Function OPP.RBPickup.OnConsumeItemStartNotify
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_OnConsumeItemStartNotify final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_OnConsumeItemStartNotify) == 0x000008, "Wrong alignment on RBPickup_OnConsumeItemStartNotify");
static_assert(sizeof(RBPickup_OnConsumeItemStartNotify) == 0x000008, "Wrong size on RBPickup_OnConsumeItemStartNotify");
static_assert(offsetof(RBPickup_OnConsumeItemStartNotify, Pawn) == 0x000000, "Member 'RBPickup_OnConsumeItemStartNotify::Pawn' has a wrong offset!");

// Function OPP.RBPickup.OnDoubleDoseUsedOnceChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_OnDoubleDoseUsedOnceChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_OnDoubleDoseUsedOnceChangedCallback) == 0x000001, "Wrong alignment on RBPickup_OnDoubleDoseUsedOnceChangedCallback");
static_assert(sizeof(RBPickup_OnDoubleDoseUsedOnceChangedCallback) == 0x000001, "Wrong size on RBPickup_OnDoubleDoseUsedOnceChangedCallback");
static_assert(offsetof(RBPickup_OnDoubleDoseUsedOnceChangedCallback, ChangedType) == 0x000000, "Member 'RBPickup_OnDoubleDoseUsedOnceChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPickup.OnIsConsumedChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_OnIsConsumedChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_OnIsConsumedChangedCallback) == 0x000001, "Wrong alignment on RBPickup_OnIsConsumedChangedCallback");
static_assert(sizeof(RBPickup_OnIsConsumedChangedCallback) == 0x000001, "Wrong size on RBPickup_OnIsConsumedChangedCallback");
static_assert(offsetof(RBPickup_OnIsConsumedChangedCallback, ChangedType) == 0x000000, "Member 'RBPickup_OnIsConsumedChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPickup.OnOwnerInventorySlotChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_OnOwnerInventorySlotChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_OnOwnerInventorySlotChangedCallback) == 0x000001, "Wrong alignment on RBPickup_OnOwnerInventorySlotChangedCallback");
static_assert(sizeof(RBPickup_OnOwnerInventorySlotChangedCallback) == 0x000001, "Wrong size on RBPickup_OnOwnerInventorySlotChangedCallback");
static_assert(offsetof(RBPickup_OnOwnerInventorySlotChangedCallback, ChangedType) == 0x000000, "Member 'RBPickup_OnOwnerInventorySlotChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPickup.OnPawnOwnerChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_OnPawnOwnerChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_OnPawnOwnerChangedCallback) == 0x000001, "Wrong alignment on RBPickup_OnPawnOwnerChangedCallback");
static_assert(sizeof(RBPickup_OnPawnOwnerChangedCallback) == 0x000001, "Wrong size on RBPickup_OnPawnOwnerChangedCallback");
static_assert(offsetof(RBPickup_OnPawnOwnerChangedCallback, ChangedType) == 0x000000, "Member 'RBPickup_OnPawnOwnerChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPickup.OnPickupTransformChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_OnPickupTransformChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_OnPickupTransformChangedCallback) == 0x000001, "Wrong alignment on RBPickup_OnPickupTransformChangedCallback");
static_assert(sizeof(RBPickup_OnPickupTransformChangedCallback) == 0x000001, "Wrong size on RBPickup_OnPickupTransformChangedCallback");
static_assert(offsetof(RBPickup_OnPickupTransformChangedCallback, ChangedType) == 0x000000, "Member 'RBPickup_OnPickupTransformChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPickup.BP_GetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_BP_GetPlayerOwner final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_BP_GetPlayerOwner) == 0x000008, "Wrong alignment on RBPickup_BP_GetPlayerOwner");
static_assert(sizeof(RBPickup_BP_GetPlayerOwner) == 0x000008, "Wrong size on RBPickup_BP_GetPlayerOwner");
static_assert(offsetof(RBPickup_BP_GetPlayerOwner, ReturnValue) == 0x000000, "Member 'RBPickup_BP_GetPlayerOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.BP_IsCurrentlyEquipped
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_BP_IsCurrentlyEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_BP_IsCurrentlyEquipped) == 0x000001, "Wrong alignment on RBPickup_BP_IsCurrentlyEquipped");
static_assert(sizeof(RBPickup_BP_IsCurrentlyEquipped) == 0x000001, "Wrong size on RBPickup_BP_IsCurrentlyEquipped");
static_assert(offsetof(RBPickup_BP_IsCurrentlyEquipped, ReturnValue) == 0x000000, "Member 'RBPickup_BP_IsCurrentlyEquipped::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.BP_IsPingedDisabled
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_BP_IsPingedDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_BP_IsPingedDisabled) == 0x000001, "Wrong alignment on RBPickup_BP_IsPingedDisabled");
static_assert(sizeof(RBPickup_BP_IsPingedDisabled) == 0x000001, "Wrong size on RBPickup_BP_IsPingedDisabled");
static_assert(offsetof(RBPickup_BP_IsPingedDisabled, ReturnValue) == 0x000000, "Member 'RBPickup_BP_IsPingedDisabled::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.CanSwapBetweenItem
// 0x0010 (0x0010 - 0x0000)
struct RBPickup_CanSwapBetweenItem final
{
public:
	class ARBPickup*                              OtherItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPickup_CanSwapBetweenItem) == 0x000008, "Wrong alignment on RBPickup_CanSwapBetweenItem");
static_assert(sizeof(RBPickup_CanSwapBetweenItem) == 0x000010, "Wrong size on RBPickup_CanSwapBetweenItem");
static_assert(offsetof(RBPickup_CanSwapBetweenItem, OtherItem) == 0x000000, "Member 'RBPickup_CanSwapBetweenItem::OtherItem' has a wrong offset!");
static_assert(offsetof(RBPickup_CanSwapBetweenItem, ReturnValue) == 0x000008, "Member 'RBPickup_CanSwapBetweenItem::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.GetContainer
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_GetContainer final
{
public:
	class ARBContainer*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_GetContainer) == 0x000008, "Wrong alignment on RBPickup_GetContainer");
static_assert(sizeof(RBPickup_GetContainer) == 0x000008, "Wrong size on RBPickup_GetContainer");
static_assert(offsetof(RBPickup_GetContainer, ReturnValue) == 0x000000, "Member 'RBPickup_GetContainer::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.GetDisplayMesh
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_GetDisplayMesh final
{
public:
	class UMeshComponent*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_GetDisplayMesh) == 0x000008, "Wrong alignment on RBPickup_GetDisplayMesh");
static_assert(sizeof(RBPickup_GetDisplayMesh) == 0x000008, "Wrong size on RBPickup_GetDisplayMesh");
static_assert(offsetof(RBPickup_GetDisplayMesh, ReturnValue) == 0x000000, "Member 'RBPickup_GetDisplayMesh::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.GetPawnOwner
// 0x0008 (0x0008 - 0x0000)
struct RBPickup_GetPawnOwner final
{
public:
	class ARBPawn*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_GetPawnOwner) == 0x000008, "Wrong alignment on RBPickup_GetPawnOwner");
static_assert(sizeof(RBPickup_GetPawnOwner) == 0x000008, "Wrong size on RBPickup_GetPawnOwner");
static_assert(offsetof(RBPickup_GetPawnOwner, ReturnValue) == 0x000000, "Member 'RBPickup_GetPawnOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.IsConsumed
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_IsConsumed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_IsConsumed) == 0x000001, "Wrong alignment on RBPickup_IsConsumed");
static_assert(sizeof(RBPickup_IsConsumed) == 0x000001, "Wrong size on RBPickup_IsConsumed");
static_assert(offsetof(RBPickup_IsConsumed, ReturnValue) == 0x000000, "Member 'RBPickup_IsConsumed::ReturnValue' has a wrong offset!");

// Function OPP.RBPickup.IsItemHeldInHand
// 0x0001 (0x0001 - 0x0000)
struct RBPickup_IsItemHeldInHand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickup_IsItemHeldInHand) == 0x000001, "Wrong alignment on RBPickup_IsItemHeldInHand");
static_assert(sizeof(RBPickup_IsItemHeldInHand) == 0x000001, "Wrong size on RBPickup_IsItemHeldInHand");
static_assert(offsetof(RBPickup_IsItemHeldInHand, ReturnValue) == 0x000000, "Member 'RBPickup_IsItemHeldInHand::ReturnValue' has a wrong offset!");

// Function OPP.RBActiveSkillController.Event_OnSkillActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkillController_Event_OnSkillActiveChanged final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkillController_Event_OnSkillActiveChanged) == 0x000001, "Wrong alignment on RBActiveSkillController_Event_OnSkillActiveChanged");
static_assert(sizeof(RBActiveSkillController_Event_OnSkillActiveChanged) == 0x000001, "Wrong size on RBActiveSkillController_Event_OnSkillActiveChanged");
static_assert(offsetof(RBActiveSkillController_Event_OnSkillActiveChanged, IsActive) == 0x000000, "Member 'RBActiveSkillController_Event_OnSkillActiveChanged::IsActive' has a wrong offset!");

// Function OPP.RBActiveSkillController.IsSkillActive
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkillController_IsSkillActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkillController_IsSkillActive) == 0x000001, "Wrong alignment on RBActiveSkillController_IsSkillActive");
static_assert(sizeof(RBActiveSkillController_IsSkillActive) == 0x000001, "Wrong size on RBActiveSkillController_IsSkillActive");
static_assert(offsetof(RBActiveSkillController_IsSkillActive, ReturnValue) == 0x000000, "Member 'RBActiveSkillController_IsSkillActive::ReturnValue' has a wrong offset!");

// Function OPP.RBPathBlockingVolume.IsBlockingPath
// 0x0001 (0x0001 - 0x0000)
struct RBPathBlockingVolume_IsBlockingPath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPathBlockingVolume_IsBlockingPath) == 0x000001, "Wrong alignment on RBPathBlockingVolume_IsBlockingPath");
static_assert(sizeof(RBPathBlockingVolume_IsBlockingPath) == 0x000001, "Wrong size on RBPathBlockingVolume_IsBlockingPath");
static_assert(offsetof(RBPathBlockingVolume_IsBlockingPath, ReturnValue) == 0x000000, "Member 'RBPathBlockingVolume_IsBlockingPath::ReturnValue' has a wrong offset!");

// Function OPP.RBActiveSkillLimiterZone.OnActorEnterZone
// 0x0010 (0x0010 - 0x0000)
struct RBActiveSkillLimiterZone_OnActorEnterZone final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkillLimiterZone_OnActorEnterZone) == 0x000008, "Wrong alignment on RBActiveSkillLimiterZone_OnActorEnterZone");
static_assert(sizeof(RBActiveSkillLimiterZone_OnActorEnterZone) == 0x000010, "Wrong size on RBActiveSkillLimiterZone_OnActorEnterZone");
static_assert(offsetof(RBActiveSkillLimiterZone_OnActorEnterZone, OverlappedActor) == 0x000000, "Member 'RBActiveSkillLimiterZone_OnActorEnterZone::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBActiveSkillLimiterZone_OnActorEnterZone, OtherActor) == 0x000008, "Member 'RBActiveSkillLimiterZone_OnActorEnterZone::OtherActor' has a wrong offset!");

// Function OPP.RBActiveSkillLimiterZone.OnActorExitZone
// 0x0010 (0x0010 - 0x0000)
struct RBActiveSkillLimiterZone_OnActorExitZone final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkillLimiterZone_OnActorExitZone) == 0x000008, "Wrong alignment on RBActiveSkillLimiterZone_OnActorExitZone");
static_assert(sizeof(RBActiveSkillLimiterZone_OnActorExitZone) == 0x000010, "Wrong size on RBActiveSkillLimiterZone_OnActorExitZone");
static_assert(offsetof(RBActiveSkillLimiterZone_OnActorExitZone, OverlappedActor) == 0x000000, "Member 'RBActiveSkillLimiterZone_OnActorExitZone::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBActiveSkillLimiterZone_OnActorExitZone, OtherActor) == 0x000008, "Member 'RBActiveSkillLimiterZone_OnActorExitZone::OtherActor' has a wrong offset!");

// Function OPP.RBActiveSkillLimiterZone.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkillLimiterZone_SetEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkillLimiterZone_SetEnabled) == 0x000001, "Wrong alignment on RBActiveSkillLimiterZone_SetEnabled");
static_assert(sizeof(RBActiveSkillLimiterZone_SetEnabled) == 0x000001, "Wrong size on RBActiveSkillLimiterZone_SetEnabled");
static_assert(offsetof(RBActiveSkillLimiterZone_SetEnabled, bEnable) == 0x000000, "Member 'RBActiveSkillLimiterZone_SetEnabled::bEnable' has a wrong offset!");

// Function OPP.RBActiveSkillVisionComponent.Event_OnActiveSkillChanged
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkillVisionComponent_Event_OnActiveSkillChanged final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkillVisionComponent_Event_OnActiveSkillChanged) == 0x000001, "Wrong alignment on RBActiveSkillVisionComponent_Event_OnActiveSkillChanged");
static_assert(sizeof(RBActiveSkillVisionComponent_Event_OnActiveSkillChanged) == 0x000001, "Wrong size on RBActiveSkillVisionComponent_Event_OnActiveSkillChanged");
static_assert(offsetof(RBActiveSkillVisionComponent_Event_OnActiveSkillChanged, Enabled) == 0x000000, "Member 'RBActiveSkillVisionComponent_Event_OnActiveSkillChanged::Enabled' has a wrong offset!");

// Function OPP.RBActiveSkillVisionComponent.Event_OnSeeThroughWallChanged
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkillVisionComponent_Event_OnSeeThroughWallChanged final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkillVisionComponent_Event_OnSeeThroughWallChanged) == 0x000001, "Wrong alignment on RBActiveSkillVisionComponent_Event_OnSeeThroughWallChanged");
static_assert(sizeof(RBActiveSkillVisionComponent_Event_OnSeeThroughWallChanged) == 0x000001, "Wrong size on RBActiveSkillVisionComponent_Event_OnSeeThroughWallChanged");
static_assert(offsetof(RBActiveSkillVisionComponent_Event_OnSeeThroughWallChanged, Enabled) == 0x000000, "Member 'RBActiveSkillVisionComponent_Event_OnSeeThroughWallChanged::Enabled' has a wrong offset!");

// Function OPP.RBActiveSkillVisionComponent.SetEnabled_Server
// 0x0001 (0x0001 - 0x0000)
struct RBActiveSkillVisionComponent_SetEnabled_Server final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActiveSkillVisionComponent_SetEnabled_Server) == 0x000001, "Wrong alignment on RBActiveSkillVisionComponent_SetEnabled_Server");
static_assert(sizeof(RBActiveSkillVisionComponent_SetEnabled_Server) == 0x000001, "Wrong size on RBActiveSkillVisionComponent_SetEnabled_Server");
static_assert(offsetof(RBActiveSkillVisionComponent_SetEnabled_Server, bNewEnabled) == 0x000000, "Member 'RBActiveSkillVisionComponent_SetEnabled_Server::bNewEnabled' has a wrong offset!");

// Function OPP.RBInteractible.BP_GetInteractionMeshRelativeTransform
// 0x0040 (0x0040 - 0x0000)
struct RBInteractible_BP_GetInteractionMeshRelativeTransform final
{
public:
	TSubclassOf<class ARBInteractible>            InteractibleClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A97[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_BP_GetInteractionMeshRelativeTransform) == 0x000010, "Wrong alignment on RBInteractible_BP_GetInteractionMeshRelativeTransform");
static_assert(sizeof(RBInteractible_BP_GetInteractionMeshRelativeTransform) == 0x000040, "Wrong size on RBInteractible_BP_GetInteractionMeshRelativeTransform");
static_assert(offsetof(RBInteractible_BP_GetInteractionMeshRelativeTransform, InteractibleClass) == 0x000000, "Member 'RBInteractible_BP_GetInteractionMeshRelativeTransform::InteractibleClass' has a wrong offset!");
static_assert(offsetof(RBInteractible_BP_GetInteractionMeshRelativeTransform, ReturnValue) == 0x000010, "Member 'RBInteractible_BP_GetInteractionMeshRelativeTransform::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractible.BP_OnIsInteractibleChanged
// 0x0001 (0x0001 - 0x0000)
struct RBInteractible_BP_OnIsInteractibleChanged final
{
public:
	bool                                          bInteractibleValue;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_BP_OnIsInteractibleChanged) == 0x000001, "Wrong alignment on RBInteractible_BP_OnIsInteractibleChanged");
static_assert(sizeof(RBInteractible_BP_OnIsInteractibleChanged) == 0x000001, "Wrong size on RBInteractible_BP_OnIsInteractibleChanged");
static_assert(offsetof(RBInteractible_BP_OnIsInteractibleChanged, bInteractibleValue) == 0x000000, "Member 'RBInteractible_BP_OnIsInteractibleChanged::bInteractibleValue' has a wrong offset!");

// Function OPP.RBInteractible.BP_SetIsInteractible
// 0x0001 (0x0001 - 0x0000)
struct RBInteractible_BP_SetIsInteractible final
{
public:
	bool                                          bInteractibleValue;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_BP_SetIsInteractible) == 0x000001, "Wrong alignment on RBInteractible_BP_SetIsInteractible");
static_assert(sizeof(RBInteractible_BP_SetIsInteractible) == 0x000001, "Wrong size on RBInteractible_BP_SetIsInteractible");
static_assert(offsetof(RBInteractible_BP_SetIsInteractible, bInteractibleValue) == 0x000000, "Member 'RBInteractible_BP_SetIsInteractible::bInteractibleValue' has a wrong offset!");

// Function OPP.RBInteractible.BP_SetShowInDebug
// 0x0001 (0x0001 - 0x0000)
struct RBInteractible_BP_SetShowInDebug final
{
public:
	bool                                          bShowInDebugValue;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_BP_SetShowInDebug) == 0x000001, "Wrong alignment on RBInteractible_BP_SetShowInDebug");
static_assert(sizeof(RBInteractible_BP_SetShowInDebug) == 0x000001, "Wrong size on RBInteractible_BP_SetShowInDebug");
static_assert(offsetof(RBInteractible_BP_SetShowInDebug, bShowInDebugValue) == 0x000000, "Member 'RBInteractible_BP_SetShowInDebug::bShowInDebugValue' has a wrong offset!");

// Function OPP.RBInteractible.Event_DoAction
// 0x0008 (0x0008 - 0x0000)
struct RBInteractible_Event_DoAction final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_Event_DoAction) == 0x000008, "Wrong alignment on RBInteractible_Event_DoAction");
static_assert(sizeof(RBInteractible_Event_DoAction) == 0x000008, "Wrong size on RBInteractible_Event_DoAction");
static_assert(offsetof(RBInteractible_Event_DoAction, Interactor) == 0x000000, "Member 'RBInteractible_Event_DoAction::Interactor' has a wrong offset!");

// Function OPP.RBInteractible.Event_OnInteract
// 0x0008 (0x0008 - 0x0000)
struct RBInteractible_Event_OnInteract final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_Event_OnInteract) == 0x000008, "Wrong alignment on RBInteractible_Event_OnInteract");
static_assert(sizeof(RBInteractible_Event_OnInteract) == 0x000008, "Wrong size on RBInteractible_Event_OnInteract");
static_assert(offsetof(RBInteractible_Event_OnInteract, Pawn) == 0x000000, "Member 'RBInteractible_Event_OnInteract::Pawn' has a wrong offset!");

// Function OPP.RBInteractible.IsInteractiveChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBInteractible_IsInteractiveChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_IsInteractiveChangedCallback) == 0x000001, "Wrong alignment on RBInteractible_IsInteractiveChangedCallback");
static_assert(sizeof(RBInteractible_IsInteractiveChangedCallback) == 0x000001, "Wrong size on RBInteractible_IsInteractiveChangedCallback");
static_assert(offsetof(RBInteractible_IsInteractiveChangedCallback, ChangedType) == 0x000000, "Member 'RBInteractible_IsInteractiveChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBInteractible.Multicast_OnStartInteract
// 0x0008 (0x0008 - 0x0000)
struct RBInteractible_Multicast_OnStartInteract final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_Multicast_OnStartInteract) == 0x000008, "Wrong alignment on RBInteractible_Multicast_OnStartInteract");
static_assert(sizeof(RBInteractible_Multicast_OnStartInteract) == 0x000008, "Wrong size on RBInteractible_Multicast_OnStartInteract");
static_assert(offsetof(RBInteractible_Multicast_OnStartInteract, Pawn) == 0x000000, "Member 'RBInteractible_Multicast_OnStartInteract::Pawn' has a wrong offset!");

// Function OPP.RBInteractible.Multicast_OnStopInteract
// 0x0008 (0x0008 - 0x0000)
struct RBInteractible_Multicast_OnStopInteract final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_Multicast_OnStopInteract) == 0x000008, "Wrong alignment on RBInteractible_Multicast_OnStopInteract");
static_assert(sizeof(RBInteractible_Multicast_OnStopInteract) == 0x000008, "Wrong size on RBInteractible_Multicast_OnStopInteract");
static_assert(offsetof(RBInteractible_Multicast_OnStopInteract, Pawn) == 0x000000, "Member 'RBInteractible_Multicast_OnStopInteract::Pawn' has a wrong offset!");

// Function OPP.RBInteractible.NotifySpecialMoveCompletedEvent
// 0x0010 (0x0010 - 0x0000)
struct RBInteractible_NotifySpecialMoveCompletedEvent final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A98[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractible_NotifySpecialMoveCompletedEvent) == 0x000008, "Wrong alignment on RBInteractible_NotifySpecialMoveCompletedEvent");
static_assert(sizeof(RBInteractible_NotifySpecialMoveCompletedEvent) == 0x000010, "Wrong size on RBInteractible_NotifySpecialMoveCompletedEvent");
static_assert(offsetof(RBInteractible_NotifySpecialMoveCompletedEvent, Pawn) == 0x000000, "Member 'RBInteractible_NotifySpecialMoveCompletedEvent::Pawn' has a wrong offset!");
static_assert(offsetof(RBInteractible_NotifySpecialMoveCompletedEvent, SpecialMove) == 0x000008, "Member 'RBInteractible_NotifySpecialMoveCompletedEvent::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBInteractible_NotifySpecialMoveCompletedEvent, bInterrupted) == 0x000009, "Member 'RBInteractible_NotifySpecialMoveCompletedEvent::bInterrupted' has a wrong offset!");

// Function OPP.RBInteractible.NotifySpecialMoveStartedEvent
// 0x0010 (0x0010 - 0x0000)
struct RBInteractible_NotifySpecialMoveStartedEvent final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A99[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractible_NotifySpecialMoveStartedEvent) == 0x000008, "Wrong alignment on RBInteractible_NotifySpecialMoveStartedEvent");
static_assert(sizeof(RBInteractible_NotifySpecialMoveStartedEvent) == 0x000010, "Wrong size on RBInteractible_NotifySpecialMoveStartedEvent");
static_assert(offsetof(RBInteractible_NotifySpecialMoveStartedEvent, Pawn) == 0x000000, "Member 'RBInteractible_NotifySpecialMoveStartedEvent::Pawn' has a wrong offset!");
static_assert(offsetof(RBInteractible_NotifySpecialMoveStartedEvent, SpecialMove) == 0x000008, "Member 'RBInteractible_NotifySpecialMoveStartedEvent::SpecialMove' has a wrong offset!");

// Function OPP.RBInteractible.BP_GetInteractorPawns
// 0x0010 (0x0010 - 0x0000)
struct RBInteractible_BP_GetInteractorPawns final
{
public:
	TArray<class ARBPawn*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_BP_GetInteractorPawns) == 0x000008, "Wrong alignment on RBInteractible_BP_GetInteractorPawns");
static_assert(sizeof(RBInteractible_BP_GetInteractorPawns) == 0x000010, "Wrong size on RBInteractible_BP_GetInteractorPawns");
static_assert(offsetof(RBInteractible_BP_GetInteractorPawns, ReturnValue) == 0x000000, "Member 'RBInteractible_BP_GetInteractorPawns::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractible.BP_IsInteractible
// 0x0001 (0x0001 - 0x0000)
struct RBInteractible_BP_IsInteractible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_BP_IsInteractible) == 0x000001, "Wrong alignment on RBInteractible_BP_IsInteractible");
static_assert(sizeof(RBInteractible_BP_IsInteractible) == 0x000001, "Wrong size on RBInteractible_BP_IsInteractible");
static_assert(offsetof(RBInteractible_BP_IsInteractible, ReturnValue) == 0x000000, "Member 'RBInteractible_BP_IsInteractible::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractible.GetAnimForward
// 0x0018 (0x0018 - 0x0000)
struct RBInteractible_GetAnimForward final
{
public:
	const class ARBPawn*                          InteractorPawn;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9A[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_GetAnimForward) == 0x000008, "Wrong alignment on RBInteractible_GetAnimForward");
static_assert(sizeof(RBInteractible_GetAnimForward) == 0x000018, "Wrong size on RBInteractible_GetAnimForward");
static_assert(offsetof(RBInteractible_GetAnimForward, InteractorPawn) == 0x000000, "Member 'RBInteractible_GetAnimForward::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInteractible_GetAnimForward, SpecialMove) == 0x000008, "Member 'RBInteractible_GetAnimForward::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBInteractible_GetAnimForward, ReturnValue) == 0x00000C, "Member 'RBInteractible_GetAnimForward::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractible.GetAnimLocation
// 0x0018 (0x0018 - 0x0000)
struct RBInteractible_GetAnimLocation final
{
public:
	const class ARBPawn*                          InteractorPawn;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_GetAnimLocation) == 0x000008, "Wrong alignment on RBInteractible_GetAnimLocation");
static_assert(sizeof(RBInteractible_GetAnimLocation) == 0x000018, "Wrong size on RBInteractible_GetAnimLocation");
static_assert(offsetof(RBInteractible_GetAnimLocation, InteractorPawn) == 0x000000, "Member 'RBInteractible_GetAnimLocation::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInteractible_GetAnimLocation, SpecialMove) == 0x000008, "Member 'RBInteractible_GetAnimLocation::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBInteractible_GetAnimLocation, ReturnValue) == 0x00000C, "Member 'RBInteractible_GetAnimLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractible.GetInteractionActionCollisionCheck
// 0x0001 (0x0001 - 0x0000)
struct RBInteractible_GetInteractionActionCollisionCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_GetInteractionActionCollisionCheck) == 0x000001, "Wrong alignment on RBInteractible_GetInteractionActionCollisionCheck");
static_assert(sizeof(RBInteractible_GetInteractionActionCollisionCheck) == 0x000001, "Wrong size on RBInteractible_GetInteractionActionCollisionCheck");
static_assert(offsetof(RBInteractible_GetInteractionActionCollisionCheck, ReturnValue) == 0x000000, "Member 'RBInteractible_GetInteractionActionCollisionCheck::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractible.GetNumberOfInteract
// 0x0004 (0x0004 - 0x0000)
struct RBInteractible_GetNumberOfInteract final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_GetNumberOfInteract) == 0x000004, "Wrong alignment on RBInteractible_GetNumberOfInteract");
static_assert(sizeof(RBInteractible_GetNumberOfInteract) == 0x000004, "Wrong size on RBInteractible_GetNumberOfInteract");
static_assert(offsetof(RBInteractible_GetNumberOfInteract, ReturnValue) == 0x000000, "Member 'RBInteractible_GetNumberOfInteract::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractible.GetStartsInteractible
// 0x0001 (0x0001 - 0x0000)
struct RBInteractible_GetStartsInteractible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractible_GetStartsInteractible) == 0x000001, "Wrong alignment on RBInteractible_GetStartsInteractible");
static_assert(sizeof(RBInteractible_GetStartsInteractible) == 0x000001, "Wrong size on RBInteractible_GetStartsInteractible");
static_assert(offsetof(RBInteractible_GetStartsInteractible, ReturnValue) == 0x000000, "Member 'RBInteractible_GetStartsInteractible::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractible.ShouldAlignToGround
// 0x0010 (0x0010 - 0x0000)
struct RBInteractible_ShouldAlignToGround final
{
public:
	const class ARBPawn*                          InteractorPawn;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A9C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractible_ShouldAlignToGround) == 0x000008, "Wrong alignment on RBInteractible_ShouldAlignToGround");
static_assert(sizeof(RBInteractible_ShouldAlignToGround) == 0x000010, "Wrong size on RBInteractible_ShouldAlignToGround");
static_assert(offsetof(RBInteractible_ShouldAlignToGround, InteractorPawn) == 0x000000, "Member 'RBInteractible_ShouldAlignToGround::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInteractible_ShouldAlignToGround, ReturnValue) == 0x000008, "Member 'RBInteractible_ShouldAlignToGround::ReturnValue' has a wrong offset!");

// Function OPP.RBSlidingLock.BP_ApplyAnimatedTransform
// 0x0010 (0x0010 - 0x0000)
struct RBSlidingLock_BP_ApplyAnimatedTransform final
{
public:
	float                                         CurveValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AA4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ARBPawn*                          InteractorPawn;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSlidingLock_BP_ApplyAnimatedTransform) == 0x000008, "Wrong alignment on RBSlidingLock_BP_ApplyAnimatedTransform");
static_assert(sizeof(RBSlidingLock_BP_ApplyAnimatedTransform) == 0x000010, "Wrong size on RBSlidingLock_BP_ApplyAnimatedTransform");
static_assert(offsetof(RBSlidingLock_BP_ApplyAnimatedTransform, CurveValue) == 0x000000, "Member 'RBSlidingLock_BP_ApplyAnimatedTransform::CurveValue' has a wrong offset!");
static_assert(offsetof(RBSlidingLock_BP_ApplyAnimatedTransform, InteractorPawn) == 0x000008, "Member 'RBSlidingLock_BP_ApplyAnimatedTransform::InteractorPawn' has a wrong offset!");

// Function OPP.RBSlidingLock.BP_OverrideEditorCompTranform
// 0x0070 (0x0070 - 0x0000)
struct RBSlidingLock_BP_OverrideEditorCompTranform final
{
public:
	class FName                                   CompName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AA5[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSlidingLock_BP_OverrideEditorCompTranform) == 0x000010, "Wrong alignment on RBSlidingLock_BP_OverrideEditorCompTranform");
static_assert(sizeof(RBSlidingLock_BP_OverrideEditorCompTranform) == 0x000070, "Wrong size on RBSlidingLock_BP_OverrideEditorCompTranform");
static_assert(offsetof(RBSlidingLock_BP_OverrideEditorCompTranform, CompName) == 0x000000, "Member 'RBSlidingLock_BP_OverrideEditorCompTranform::CompName' has a wrong offset!");
static_assert(offsetof(RBSlidingLock_BP_OverrideEditorCompTranform, bLocked) == 0x000008, "Member 'RBSlidingLock_BP_OverrideEditorCompTranform::bLocked' has a wrong offset!");
static_assert(offsetof(RBSlidingLock_BP_OverrideEditorCompTranform, Transform) == 0x000010, "Member 'RBSlidingLock_BP_OverrideEditorCompTranform::Transform' has a wrong offset!");
static_assert(offsetof(RBSlidingLock_BP_OverrideEditorCompTranform, ReturnValue) == 0x000040, "Member 'RBSlidingLock_BP_OverrideEditorCompTranform::ReturnValue' has a wrong offset!");

// Function OPP.RBSlidingLock.BP_SetLocked
// 0x0001 (0x0001 - 0x0000)
struct RBSlidingLock_BP_SetLocked final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSlidingLock_BP_SetLocked) == 0x000001, "Wrong alignment on RBSlidingLock_BP_SetLocked");
static_assert(sizeof(RBSlidingLock_BP_SetLocked) == 0x000001, "Wrong size on RBSlidingLock_BP_SetLocked");
static_assert(offsetof(RBSlidingLock_BP_SetLocked, bLocked) == 0x000000, "Member 'RBSlidingLock_BP_SetLocked::bLocked' has a wrong offset!");

// Function OPP.RBSlidingLock.IsLockedChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBSlidingLock_IsLockedChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSlidingLock_IsLockedChangedCallback) == 0x000001, "Wrong alignment on RBSlidingLock_IsLockedChangedCallback");
static_assert(sizeof(RBSlidingLock_IsLockedChangedCallback) == 0x000001, "Wrong size on RBSlidingLock_IsLockedChangedCallback");
static_assert(offsetof(RBSlidingLock_IsLockedChangedCallback, ChangedType) == 0x000000, "Member 'RBSlidingLock_IsLockedChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBSlidingLock.BP_IsInFront
// 0x0001 (0x0001 - 0x0000)
struct RBSlidingLock_BP_IsInFront final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSlidingLock_BP_IsInFront) == 0x000001, "Wrong alignment on RBSlidingLock_BP_IsInFront");
static_assert(sizeof(RBSlidingLock_BP_IsInFront) == 0x000001, "Wrong size on RBSlidingLock_BP_IsInFront");
static_assert(offsetof(RBSlidingLock_BP_IsInFront, ReturnValue) == 0x000000, "Member 'RBSlidingLock_BP_IsInFront::ReturnValue' has a wrong offset!");

// Function OPP.RBSlidingLock.BP_IsLocked
// 0x0001 (0x0001 - 0x0000)
struct RBSlidingLock_BP_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSlidingLock_BP_IsLocked) == 0x000001, "Wrong alignment on RBSlidingLock_BP_IsLocked");
static_assert(sizeof(RBSlidingLock_BP_IsLocked) == 0x000001, "Wrong size on RBSlidingLock_BP_IsLocked");
static_assert(offsetof(RBSlidingLock_BP_IsLocked, ReturnValue) == 0x000000, "Member 'RBSlidingLock_BP_IsLocked::ReturnValue' has a wrong offset!");

// Function OPP.RBActorGroup.GetActors
// 0x0010 (0x0010 - 0x0000)
struct RBActorGroup_GetActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActorGroup_GetActors) == 0x000008, "Wrong alignment on RBActorGroup_GetActors");
static_assert(sizeof(RBActorGroup_GetActors) == 0x000010, "Wrong size on RBActorGroup_GetActors");
static_assert(offsetof(RBActorGroup_GetActors, ReturnValue) == 0x000000, "Member 'RBActorGroup_GetActors::ReturnValue' has a wrong offset!");

// Function OPP.RBContainer.BP_ForceSpawnForcedContent
// 0x0004 (0x0004 - 0x0000)
struct RBContainer_BP_ForceSpawnForcedContent final
{
public:
	int32                                         RandomSeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_BP_ForceSpawnForcedContent) == 0x000004, "Wrong alignment on RBContainer_BP_ForceSpawnForcedContent");
static_assert(sizeof(RBContainer_BP_ForceSpawnForcedContent) == 0x000004, "Wrong size on RBContainer_BP_ForceSpawnForcedContent");
static_assert(offsetof(RBContainer_BP_ForceSpawnForcedContent, RandomSeed) == 0x000000, "Member 'RBContainer_BP_ForceSpawnForcedContent::RandomSeed' has a wrong offset!");

// Function OPP.RBContainer.BP_ForceSpawnItem
// 0x0010 (0x0010 - 0x0000)
struct RBContainer_BP_ForceSpawnItem final
{
public:
	TSubclassOf<class ARBPickup>                  ItemClass;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnLock;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AAF[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomSeed;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_BP_ForceSpawnItem) == 0x000008, "Wrong alignment on RBContainer_BP_ForceSpawnItem");
static_assert(sizeof(RBContainer_BP_ForceSpawnItem) == 0x000010, "Wrong size on RBContainer_BP_ForceSpawnItem");
static_assert(offsetof(RBContainer_BP_ForceSpawnItem, ItemClass) == 0x000000, "Member 'RBContainer_BP_ForceSpawnItem::ItemClass' has a wrong offset!");
static_assert(offsetof(RBContainer_BP_ForceSpawnItem, bSpawnLock) == 0x000008, "Member 'RBContainer_BP_ForceSpawnItem::bSpawnLock' has a wrong offset!");
static_assert(offsetof(RBContainer_BP_ForceSpawnItem, RandomSeed) == 0x00000C, "Member 'RBContainer_BP_ForceSpawnItem::RandomSeed' has a wrong offset!");

// Function OPP.RBContainer.Event_ItemAdded
// 0x0018 (0x0018 - 0x0000)
struct RBContainer_Event_ItemAdded final
{
public:
	class ARBPickup*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AB0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URBContainerSpawnLocationComponent*     Location;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_Event_ItemAdded) == 0x000008, "Wrong alignment on RBContainer_Event_ItemAdded");
static_assert(sizeof(RBContainer_Event_ItemAdded) == 0x000018, "Wrong size on RBContainer_Event_ItemAdded");
static_assert(offsetof(RBContainer_Event_ItemAdded, Item) == 0x000000, "Member 'RBContainer_Event_ItemAdded::Item' has a wrong offset!");
static_assert(offsetof(RBContainer_Event_ItemAdded, Param_Index) == 0x000008, "Member 'RBContainer_Event_ItemAdded::Param_Index' has a wrong offset!");
static_assert(offsetof(RBContainer_Event_ItemAdded, Location) == 0x000010, "Member 'RBContainer_Event_ItemAdded::Location' has a wrong offset!");

// Function OPP.RBContainer.Event_ItemPickedUp
// 0x0010 (0x0010 - 0x0000)
struct RBContainer_Event_ItemPickedUp final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_Event_ItemPickedUp) == 0x000008, "Wrong alignment on RBContainer_Event_ItemPickedUp");
static_assert(sizeof(RBContainer_Event_ItemPickedUp) == 0x000010, "Wrong size on RBContainer_Event_ItemPickedUp");
static_assert(offsetof(RBContainer_Event_ItemPickedUp, Pawn) == 0x000000, "Member 'RBContainer_Event_ItemPickedUp::Pawn' has a wrong offset!");
static_assert(offsetof(RBContainer_Event_ItemPickedUp, Item) == 0x000008, "Member 'RBContainer_Event_ItemPickedUp::Item' has a wrong offset!");

// Function OPP.RBContainer.Event_ItemRemoved
// 0x0018 (0x0018 - 0x0000)
struct RBContainer_Event_ItemRemoved final
{
public:
	class ARBPickup*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AB1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URBContainerSpawnLocationComponent*     Location;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_Event_ItemRemoved) == 0x000008, "Wrong alignment on RBContainer_Event_ItemRemoved");
static_assert(sizeof(RBContainer_Event_ItemRemoved) == 0x000018, "Wrong size on RBContainer_Event_ItemRemoved");
static_assert(offsetof(RBContainer_Event_ItemRemoved, Item) == 0x000000, "Member 'RBContainer_Event_ItemRemoved::Item' has a wrong offset!");
static_assert(offsetof(RBContainer_Event_ItemRemoved, Param_Index) == 0x000008, "Member 'RBContainer_Event_ItemRemoved::Param_Index' has a wrong offset!");
static_assert(offsetof(RBContainer_Event_ItemRemoved, Location) == 0x000010, "Member 'RBContainer_Event_ItemRemoved::Location' has a wrong offset!");

// Function OPP.RBContainer.GetPickupInteractionLocation
// 0x0030 (0x0030 - 0x0000)
struct RBContainer_GetPickupInteractionLocation final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class URBContainerSpawnLocationComponent* SpawnComponent;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Out_location;                                      // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Out_direction;                                     // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AB2[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBContainer_GetPickupInteractionLocation) == 0x000008, "Wrong alignment on RBContainer_GetPickupInteractionLocation");
static_assert(sizeof(RBContainer_GetPickupInteractionLocation) == 0x000030, "Wrong size on RBContainer_GetPickupInteractionLocation");
static_assert(offsetof(RBContainer_GetPickupInteractionLocation, Pawn) == 0x000000, "Member 'RBContainer_GetPickupInteractionLocation::Pawn' has a wrong offset!");
static_assert(offsetof(RBContainer_GetPickupInteractionLocation, SpawnComponent) == 0x000008, "Member 'RBContainer_GetPickupInteractionLocation::SpawnComponent' has a wrong offset!");
static_assert(offsetof(RBContainer_GetPickupInteractionLocation, Out_location) == 0x000010, "Member 'RBContainer_GetPickupInteractionLocation::Out_location' has a wrong offset!");
static_assert(offsetof(RBContainer_GetPickupInteractionLocation, Out_direction) == 0x00001C, "Member 'RBContainer_GetPickupInteractionLocation::Out_direction' has a wrong offset!");
static_assert(offsetof(RBContainer_GetPickupInteractionLocation, ReturnValue) == 0x000028, "Member 'RBContainer_GetPickupInteractionLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBContainer.InsideItemPickedUp
// 0x0010 (0x0010 - 0x0000)
struct RBContainer_InsideItemPickedUp final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_InsideItemPickedUp) == 0x000008, "Wrong alignment on RBContainer_InsideItemPickedUp");
static_assert(sizeof(RBContainer_InsideItemPickedUp) == 0x000010, "Wrong size on RBContainer_InsideItemPickedUp");
static_assert(offsetof(RBContainer_InsideItemPickedUp, Pawn) == 0x000000, "Member 'RBContainer_InsideItemPickedUp::Pawn' has a wrong offset!");
static_assert(offsetof(RBContainer_InsideItemPickedUp, Item) == 0x000008, "Member 'RBContainer_InsideItemPickedUp::Item' has a wrong offset!");

// Function OPP.RBContainer.Multicast_ItemPickedUp
// 0x0010 (0x0010 - 0x0000)
struct RBContainer_Multicast_ItemPickedUp final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_Multicast_ItemPickedUp) == 0x000008, "Wrong alignment on RBContainer_Multicast_ItemPickedUp");
static_assert(sizeof(RBContainer_Multicast_ItemPickedUp) == 0x000010, "Wrong size on RBContainer_Multicast_ItemPickedUp");
static_assert(offsetof(RBContainer_Multicast_ItemPickedUp, Pawn) == 0x000000, "Member 'RBContainer_Multicast_ItemPickedUp::Pawn' has a wrong offset!");
static_assert(offsetof(RBContainer_Multicast_ItemPickedUp, Item) == 0x000008, "Member 'RBContainer_Multicast_ItemPickedUp::Item' has a wrong offset!");

// Function OPP.RBContainer.GetItemFromSpawnLocation
// 0x0010 (0x0010 - 0x0000)
struct RBContainer_GetItemFromSpawnLocation final
{
public:
	const class URBContainerSpawnLocationComponent* SpawnLocationComponent;                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_GetItemFromSpawnLocation) == 0x000008, "Wrong alignment on RBContainer_GetItemFromSpawnLocation");
static_assert(sizeof(RBContainer_GetItemFromSpawnLocation) == 0x000010, "Wrong size on RBContainer_GetItemFromSpawnLocation");
static_assert(offsetof(RBContainer_GetItemFromSpawnLocation, SpawnLocationComponent) == 0x000000, "Member 'RBContainer_GetItemFromSpawnLocation::SpawnLocationComponent' has a wrong offset!");
static_assert(offsetof(RBContainer_GetItemFromSpawnLocation, ReturnValue) == 0x000008, "Member 'RBContainer_GetItemFromSpawnLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBContainer.GetItemSpawnLocationComponent
// 0x0010 (0x0010 - 0x0000)
struct RBContainer_GetItemSpawnLocationComponent final
{
public:
	const class ARBPickup*                        ItemInContainer;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBContainerSpawnLocationComponent*     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_GetItemSpawnLocationComponent) == 0x000008, "Wrong alignment on RBContainer_GetItemSpawnLocationComponent");
static_assert(sizeof(RBContainer_GetItemSpawnLocationComponent) == 0x000010, "Wrong size on RBContainer_GetItemSpawnLocationComponent");
static_assert(offsetof(RBContainer_GetItemSpawnLocationComponent, ItemInContainer) == 0x000000, "Member 'RBContainer_GetItemSpawnLocationComponent::ItemInContainer' has a wrong offset!");
static_assert(offsetof(RBContainer_GetItemSpawnLocationComponent, ReturnValue) == 0x000008, "Member 'RBContainer_GetItemSpawnLocationComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBContainer.GetNumberOfSpawnedItems
// 0x0004 (0x0004 - 0x0000)
struct RBContainer_GetNumberOfSpawnedItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_GetNumberOfSpawnedItems) == 0x000004, "Wrong alignment on RBContainer_GetNumberOfSpawnedItems");
static_assert(sizeof(RBContainer_GetNumberOfSpawnedItems) == 0x000004, "Wrong size on RBContainer_GetNumberOfSpawnedItems");
static_assert(offsetof(RBContainer_GetNumberOfSpawnedItems, ReturnValue) == 0x000000, "Member 'RBContainer_GetNumberOfSpawnedItems::ReturnValue' has a wrong offset!");

// Function OPP.RBContainer.GetPopulatedState
// 0x0001 (0x0001 - 0x0000)
struct RBContainer_GetPopulatedState final
{
public:
	EContainerPopulatedState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_GetPopulatedState) == 0x000001, "Wrong alignment on RBContainer_GetPopulatedState");
static_assert(sizeof(RBContainer_GetPopulatedState) == 0x000001, "Wrong size on RBContainer_GetPopulatedState");
static_assert(offsetof(RBContainer_GetPopulatedState, ReturnValue) == 0x000000, "Member 'RBContainer_GetPopulatedState::ReturnValue' has a wrong offset!");

// Function OPP.RBContainer.IsClosableContainer
// 0x0001 (0x0001 - 0x0000)
struct RBContainer_IsClosableContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_IsClosableContainer) == 0x000001, "Wrong alignment on RBContainer_IsClosableContainer");
static_assert(sizeof(RBContainer_IsClosableContainer) == 0x000001, "Wrong size on RBContainer_IsClosableContainer");
static_assert(offsetof(RBContainer_IsClosableContainer, ReturnValue) == 0x000000, "Member 'RBContainer_IsClosableContainer::ReturnValue' has a wrong offset!");

// Function OPP.RBContainer.IsContainerEmpty
// 0x0001 (0x0001 - 0x0000)
struct RBContainer_IsContainerEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_IsContainerEmpty) == 0x000001, "Wrong alignment on RBContainer_IsContainerEmpty");
static_assert(sizeof(RBContainer_IsContainerEmpty) == 0x000001, "Wrong size on RBContainer_IsContainerEmpty");
static_assert(offsetof(RBContainer_IsContainerEmpty, ReturnValue) == 0x000000, "Member 'RBContainer_IsContainerEmpty::ReturnValue' has a wrong offset!");

// Function OPP.RBContainer.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct RBContainer_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_IsLocked) == 0x000001, "Wrong alignment on RBContainer_IsLocked");
static_assert(sizeof(RBContainer_IsLocked) == 0x000001, "Wrong size on RBContainer_IsLocked");
static_assert(offsetof(RBContainer_IsLocked, ReturnValue) == 0x000000, "Member 'RBContainer_IsLocked::ReturnValue' has a wrong offset!");

// Function OPP.RBContainer.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct RBContainer_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBContainer_IsOpen) == 0x000001, "Wrong alignment on RBContainer_IsOpen");
static_assert(sizeof(RBContainer_IsOpen) == 0x000001, "Wrong size on RBContainer_IsOpen");
static_assert(offsetof(RBContainer_IsOpen, ReturnValue) == 0x000000, "Member 'RBContainer_IsOpen::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractibleContainer.GivesFocusTo
// 0x0010 (0x0010 - 0x0000)
struct RBInteractibleContainer_GivesFocusTo final
{
public:
	const class ARBPawn*                          InteractorPawn;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractionZoneComponent*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractibleContainer_GivesFocusTo) == 0x000008, "Wrong alignment on RBInteractibleContainer_GivesFocusTo");
static_assert(sizeof(RBInteractibleContainer_GivesFocusTo) == 0x000010, "Wrong size on RBInteractibleContainer_GivesFocusTo");
static_assert(offsetof(RBInteractibleContainer_GivesFocusTo, InteractorPawn) == 0x000000, "Member 'RBInteractibleContainer_GivesFocusTo::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInteractibleContainer_GivesFocusTo, ReturnValue) == 0x000008, "Member 'RBInteractibleContainer_GivesFocusTo::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractibleContainer.IsOpenedChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBInteractibleContainer_IsOpenedChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractibleContainer_IsOpenedChangedCallback) == 0x000001, "Wrong alignment on RBInteractibleContainer_IsOpenedChangedCallback");
static_assert(sizeof(RBInteractibleContainer_IsOpenedChangedCallback) == 0x000001, "Wrong size on RBInteractibleContainer_IsOpenedChangedCallback");
static_assert(offsetof(RBInteractibleContainer_IsOpenedChangedCallback, ChangedType) == 0x000000, "Member 'RBInteractibleContainer_IsOpenedChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBInteractibleContainer.OnNumberOfProjectileHitsChanged
// 0x0008 (0x0008 - 0x0000)
struct RBInteractibleContainer_OnNumberOfProjectileHitsChanged final
{
public:
	class URBDamageableComponent*                 Damageable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractibleContainer_OnNumberOfProjectileHitsChanged) == 0x000008, "Wrong alignment on RBInteractibleContainer_OnNumberOfProjectileHitsChanged");
static_assert(sizeof(RBInteractibleContainer_OnNumberOfProjectileHitsChanged) == 0x000008, "Wrong size on RBInteractibleContainer_OnNumberOfProjectileHitsChanged");
static_assert(offsetof(RBInteractibleContainer_OnNumberOfProjectileHitsChanged, Damageable) == 0x000000, "Member 'RBInteractibleContainer_OnNumberOfProjectileHitsChanged::Damageable' has a wrong offset!");

// Function OPP.RBInteractibleContainer.OnPanelUnlocked
// 0x0010 (0x0010 - 0x0000)
struct RBInteractibleContainer_OnPanelUnlocked final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractibleContainer_OnPanelUnlocked) == 0x000008, "Wrong alignment on RBInteractibleContainer_OnPanelUnlocked");
static_assert(sizeof(RBInteractibleContainer_OnPanelUnlocked) == 0x000010, "Wrong size on RBInteractibleContainer_OnPanelUnlocked");
static_assert(offsetof(RBInteractibleContainer_OnPanelUnlocked, Panel) == 0x000000, "Member 'RBInteractibleContainer_OnPanelUnlocked::Panel' has a wrong offset!");
static_assert(offsetof(RBInteractibleContainer_OnPanelUnlocked, PawnInteracting) == 0x000008, "Member 'RBInteractibleContainer_OnPanelUnlocked::PawnInteracting' has a wrong offset!");

// Function OPP.RBInteractibleContainer.OnPawnInteractingChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBInteractibleContainer_OnPawnInteractingChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractibleContainer_OnPawnInteractingChangedCallback) == 0x000001, "Wrong alignment on RBInteractibleContainer_OnPawnInteractingChangedCallback");
static_assert(sizeof(RBInteractibleContainer_OnPawnInteractingChangedCallback) == 0x000001, "Wrong size on RBInteractibleContainer_OnPawnInteractingChangedCallback");
static_assert(offsetof(RBInteractibleContainer_OnPawnInteractingChangedCallback, ChangedType) == 0x000000, "Member 'RBInteractibleContainer_OnPawnInteractingChangedCallback::ChangedType' has a wrong offset!");

// DelegateFunction OPP.RBActorProximityDetectionComponent.ActorProximityDetectionComponentEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBActorProximityDetectionComponent_ActorProximityDetectionComponentEvent__DelegateSignature final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActorProximityDetectionComponent_ActorProximityDetectionComponentEvent__DelegateSignature) == 0x000008, "Wrong alignment on RBActorProximityDetectionComponent_ActorProximityDetectionComponentEvent__DelegateSignature");
static_assert(sizeof(RBActorProximityDetectionComponent_ActorProximityDetectionComponentEvent__DelegateSignature) == 0x000008, "Wrong size on RBActorProximityDetectionComponent_ActorProximityDetectionComponentEvent__DelegateSignature");
static_assert(offsetof(RBActorProximityDetectionComponent_ActorProximityDetectionComponentEvent__DelegateSignature, Actor) == 0x000000, "Member 'RBActorProximityDetectionComponent_ActorProximityDetectionComponentEvent__DelegateSignature::Actor' has a wrong offset!");

// Function OPP.RBActorProximityDetectionComponent.Event_OnActorEnterProximity
// 0x0008 (0x0008 - 0x0000)
struct RBActorProximityDetectionComponent_Event_OnActorEnterProximity final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActorProximityDetectionComponent_Event_OnActorEnterProximity) == 0x000008, "Wrong alignment on RBActorProximityDetectionComponent_Event_OnActorEnterProximity");
static_assert(sizeof(RBActorProximityDetectionComponent_Event_OnActorEnterProximity) == 0x000008, "Wrong size on RBActorProximityDetectionComponent_Event_OnActorEnterProximity");
static_assert(offsetof(RBActorProximityDetectionComponent_Event_OnActorEnterProximity, Actor) == 0x000000, "Member 'RBActorProximityDetectionComponent_Event_OnActorEnterProximity::Actor' has a wrong offset!");

// Function OPP.RBActorProximityDetectionComponent.Event_OnActorExitProximity
// 0x0008 (0x0008 - 0x0000)
struct RBActorProximityDetectionComponent_Event_OnActorExitProximity final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActorProximityDetectionComponent_Event_OnActorExitProximity) == 0x000008, "Wrong alignment on RBActorProximityDetectionComponent_Event_OnActorExitProximity");
static_assert(sizeof(RBActorProximityDetectionComponent_Event_OnActorExitProximity) == 0x000008, "Wrong size on RBActorProximityDetectionComponent_Event_OnActorExitProximity");
static_assert(offsetof(RBActorProximityDetectionComponent_Event_OnActorExitProximity, Actor) == 0x000000, "Member 'RBActorProximityDetectionComponent_Event_OnActorExitProximity::Actor' has a wrong offset!");

// Function OPP.RBActorProximityDetectionComponent.OnPawnRegistered
// 0x0008 (0x0008 - 0x0000)
struct RBActorProximityDetectionComponent_OnPawnRegistered final
{
public:
	class ARBPawn*                                RBPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActorProximityDetectionComponent_OnPawnRegistered) == 0x000008, "Wrong alignment on RBActorProximityDetectionComponent_OnPawnRegistered");
static_assert(sizeof(RBActorProximityDetectionComponent_OnPawnRegistered) == 0x000008, "Wrong size on RBActorProximityDetectionComponent_OnPawnRegistered");
static_assert(offsetof(RBActorProximityDetectionComponent_OnPawnRegistered, RBPawn) == 0x000000, "Member 'RBActorProximityDetectionComponent_OnPawnRegistered::RBPawn' has a wrong offset!");

// Function OPP.RBActorProximityDetectionComponent.OnPawnUnregistered
// 0x0008 (0x0008 - 0x0000)
struct RBActorProximityDetectionComponent_OnPawnUnregistered final
{
public:
	class ARBPawn*                                RBPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBActorProximityDetectionComponent_OnPawnUnregistered) == 0x000008, "Wrong alignment on RBActorProximityDetectionComponent_OnPawnUnregistered");
static_assert(sizeof(RBActorProximityDetectionComponent_OnPawnUnregistered) == 0x000008, "Wrong size on RBActorProximityDetectionComponent_OnPawnUnregistered");
static_assert(offsetof(RBActorProximityDetectionComponent_OnPawnUnregistered, RBPawn) == 0x000000, "Member 'RBActorProximityDetectionComponent_OnPawnUnregistered::RBPawn' has a wrong offset!");

// Function OPP.RBAddFriendWidget.ResolveProfile
// 0x0010 (0x0010 - 0x0000)
struct RBAddFriendWidget_ResolveProfile final
{
public:
	class FString                                 FriendCode;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_ResolveProfile) == 0x000008, "Wrong alignment on RBAddFriendWidget_ResolveProfile");
static_assert(sizeof(RBAddFriendWidget_ResolveProfile) == 0x000010, "Wrong size on RBAddFriendWidget_ResolveProfile");
static_assert(offsetof(RBAddFriendWidget_ResolveProfile, FriendCode) == 0x000000, "Member 'RBAddFriendWidget_ResolveProfile::FriendCode' has a wrong offset!");

// Function OPP.RBAddFriendWidget.CanSendFriendRequest
// 0x0001 (0x0001 - 0x0000)
struct RBAddFriendWidget_CanSendFriendRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_CanSendFriendRequest) == 0x000001, "Wrong alignment on RBAddFriendWidget_CanSendFriendRequest");
static_assert(sizeof(RBAddFriendWidget_CanSendFriendRequest) == 0x000001, "Wrong size on RBAddFriendWidget_CanSendFriendRequest");
static_assert(offsetof(RBAddFriendWidget_CanSendFriendRequest, ReturnValue) == 0x000000, "Member 'RBAddFriendWidget_CanSendFriendRequest::ReturnValue' has a wrong offset!");

// Function OPP.RBAddFriendWidget.CanSendPlatformFriendRequest
// 0x0001 (0x0001 - 0x0000)
struct RBAddFriendWidget_CanSendPlatformFriendRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_CanSendPlatformFriendRequest) == 0x000001, "Wrong alignment on RBAddFriendWidget_CanSendPlatformFriendRequest");
static_assert(sizeof(RBAddFriendWidget_CanSendPlatformFriendRequest) == 0x000001, "Wrong size on RBAddFriendWidget_CanSendPlatformFriendRequest");
static_assert(offsetof(RBAddFriendWidget_CanSendPlatformFriendRequest, ReturnValue) == 0x000000, "Member 'RBAddFriendWidget_CanSendPlatformFriendRequest::ReturnValue' has a wrong offset!");

// Function OPP.RBAddFriendWidget.CanShowProfile
// 0x0001 (0x0001 - 0x0000)
struct RBAddFriendWidget_CanShowProfile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_CanShowProfile) == 0x000001, "Wrong alignment on RBAddFriendWidget_CanShowProfile");
static_assert(sizeof(RBAddFriendWidget_CanShowProfile) == 0x000001, "Wrong size on RBAddFriendWidget_CanShowProfile");
static_assert(offsetof(RBAddFriendWidget_CanShowProfile, ReturnValue) == 0x000000, "Member 'RBAddFriendWidget_CanShowProfile::ReturnValue' has a wrong offset!");

// Function OPP.RBAddFriendWidget.FilterFriendCodeInputText
// 0x0020 (0x0020 - 0x0000)
struct RBAddFriendWidget_FilterFriendCodeInputText final
{
public:
	class FString                                 InputText;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_FilterFriendCodeInputText) == 0x000008, "Wrong alignment on RBAddFriendWidget_FilterFriendCodeInputText");
static_assert(sizeof(RBAddFriendWidget_FilterFriendCodeInputText) == 0x000020, "Wrong size on RBAddFriendWidget_FilterFriendCodeInputText");
static_assert(offsetof(RBAddFriendWidget_FilterFriendCodeInputText, InputText) == 0x000000, "Member 'RBAddFriendWidget_FilterFriendCodeInputText::InputText' has a wrong offset!");
static_assert(offsetof(RBAddFriendWidget_FilterFriendCodeInputText, ReturnValue) == 0x000010, "Member 'RBAddFriendWidget_FilterFriendCodeInputText::ReturnValue' has a wrong offset!");

// Function OPP.RBAddFriendWidget.GetFriendCode
// 0x0010 (0x0010 - 0x0000)
struct RBAddFriendWidget_GetFriendCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_GetFriendCode) == 0x000008, "Wrong alignment on RBAddFriendWidget_GetFriendCode");
static_assert(sizeof(RBAddFriendWidget_GetFriendCode) == 0x000010, "Wrong size on RBAddFriendWidget_GetFriendCode");
static_assert(offsetof(RBAddFriendWidget_GetFriendCode, ReturnValue) == 0x000000, "Member 'RBAddFriendWidget_GetFriendCode::ReturnValue' has a wrong offset!");

// Function OPP.RBAddFriendWidget.GetName
// 0x0010 (0x0010 - 0x0000)
struct RBAddFriendWidget_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_GetName) == 0x000008, "Wrong alignment on RBAddFriendWidget_GetName");
static_assert(sizeof(RBAddFriendWidget_GetName) == 0x000010, "Wrong size on RBAddFriendWidget_GetName");
static_assert(offsetof(RBAddFriendWidget_GetName, ReturnValue) == 0x000000, "Member 'RBAddFriendWidget_GetName::ReturnValue' has a wrong offset!");

// Function OPP.RBAddFriendWidget.GetProfilePlatform
// 0x0001 (0x0001 - 0x0000)
struct RBAddFriendWidget_GetProfilePlatform final
{
public:
	EProfilePlatform                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_GetProfilePlatform) == 0x000001, "Wrong alignment on RBAddFriendWidget_GetProfilePlatform");
static_assert(sizeof(RBAddFriendWidget_GetProfilePlatform) == 0x000001, "Wrong size on RBAddFriendWidget_GetProfilePlatform");
static_assert(offsetof(RBAddFriendWidget_GetProfilePlatform, ReturnValue) == 0x000000, "Member 'RBAddFriendWidget_GetProfilePlatform::ReturnValue' has a wrong offset!");

// Function OPP.RBAddFriendWidget.HasProfile
// 0x0001 (0x0001 - 0x0000)
struct RBAddFriendWidget_HasProfile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_HasProfile) == 0x000001, "Wrong alignment on RBAddFriendWidget_HasProfile");
static_assert(sizeof(RBAddFriendWidget_HasProfile) == 0x000001, "Wrong size on RBAddFriendWidget_HasProfile");
static_assert(offsetof(RBAddFriendWidget_HasProfile, ReturnValue) == 0x000000, "Member 'RBAddFriendWidget_HasProfile::ReturnValue' has a wrong offset!");

// Function OPP.RBAddFriendWidget.IsInitialDataPending
// 0x0001 (0x0001 - 0x0000)
struct RBAddFriendWidget_IsInitialDataPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_IsInitialDataPending) == 0x000001, "Wrong alignment on RBAddFriendWidget_IsInitialDataPending");
static_assert(sizeof(RBAddFriendWidget_IsInitialDataPending) == 0x000001, "Wrong size on RBAddFriendWidget_IsInitialDataPending");
static_assert(offsetof(RBAddFriendWidget_IsInitialDataPending, ReturnValue) == 0x000000, "Member 'RBAddFriendWidget_IsInitialDataPending::ReturnValue' has a wrong offset!");

// Function OPP.RBAddFriendWidget.IsOperationPending
// 0x0001 (0x0001 - 0x0000)
struct RBAddFriendWidget_IsOperationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAddFriendWidget_IsOperationPending) == 0x000001, "Wrong alignment on RBAddFriendWidget_IsOperationPending");
static_assert(sizeof(RBAddFriendWidget_IsOperationPending) == 0x000001, "Wrong size on RBAddFriendWidget_IsOperationPending");
static_assert(offsetof(RBAddFriendWidget_IsOperationPending, ReturnValue) == 0x000000, "Member 'RBAddFriendWidget_IsOperationPending::ReturnValue' has a wrong offset!");

// Function OPP.RBTriggerable.BP_AddOperatableToComplete
// 0x0088 (0x0088 - 0x0000)
struct RBTriggerable_BP_AddOperatableToComplete final
{
public:
	struct FTriggerableSetting                    TriggerSetting;                                    // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_BP_AddOperatableToComplete) == 0x000008, "Wrong alignment on RBTriggerable_BP_AddOperatableToComplete");
static_assert(sizeof(RBTriggerable_BP_AddOperatableToComplete) == 0x000088, "Wrong size on RBTriggerable_BP_AddOperatableToComplete");
static_assert(offsetof(RBTriggerable_BP_AddOperatableToComplete, TriggerSetting) == 0x000000, "Member 'RBTriggerable_BP_AddOperatableToComplete::TriggerSetting' has a wrong offset!");

// Function OPP.RBTriggerable.BP_ForceState
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerable_BP_ForceState final
{
public:
	bool                                          bTrigger;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_BP_ForceState) == 0x000001, "Wrong alignment on RBTriggerable_BP_ForceState");
static_assert(sizeof(RBTriggerable_BP_ForceState) == 0x000001, "Wrong size on RBTriggerable_BP_ForceState");
static_assert(offsetof(RBTriggerable_BP_ForceState, bTrigger) == 0x000000, "Member 'RBTriggerable_BP_ForceState::bTrigger' has a wrong offset!");

// Function OPP.RBTriggerable.BP_RemoveOperatableToComplete
// 0x0008 (0x0008 - 0x0000)
struct RBTriggerable_BP_RemoveOperatableToComplete final
{
public:
	class UObject*                                Operatable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_BP_RemoveOperatableToComplete) == 0x000008, "Wrong alignment on RBTriggerable_BP_RemoveOperatableToComplete");
static_assert(sizeof(RBTriggerable_BP_RemoveOperatableToComplete) == 0x000008, "Wrong size on RBTriggerable_BP_RemoveOperatableToComplete");
static_assert(offsetof(RBTriggerable_BP_RemoveOperatableToComplete, Operatable) == 0x000000, "Member 'RBTriggerable_BP_RemoveOperatableToComplete::Operatable' has a wrong offset!");

// Function OPP.RBTriggerable.BP_SetOverrideOperatable
// 0x0008 (0x0008 - 0x0000)
struct RBTriggerable_BP_SetOverrideOperatable final
{
public:
	class ARBOperatable*                          Operatable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_BP_SetOverrideOperatable) == 0x000008, "Wrong alignment on RBTriggerable_BP_SetOverrideOperatable");
static_assert(sizeof(RBTriggerable_BP_SetOverrideOperatable) == 0x000008, "Wrong size on RBTriggerable_BP_SetOverrideOperatable");
static_assert(offsetof(RBTriggerable_BP_SetOverrideOperatable, Operatable) == 0x000000, "Member 'RBTriggerable_BP_SetOverrideOperatable::Operatable' has a wrong offset!");

// Function OPP.RBTriggerable.BP_SetShowInDebug
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerable_BP_SetShowInDebug final
{
public:
	bool                                          bShowInDebugValue;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_BP_SetShowInDebug) == 0x000001, "Wrong alignment on RBTriggerable_BP_SetShowInDebug");
static_assert(sizeof(RBTriggerable_BP_SetShowInDebug) == 0x000001, "Wrong size on RBTriggerable_BP_SetShowInDebug");
static_assert(offsetof(RBTriggerable_BP_SetShowInDebug, bShowInDebugValue) == 0x000000, "Member 'RBTriggerable_BP_SetShowInDebug::bShowInDebugValue' has a wrong offset!");

// Function OPP.RBTriggerable.BP_SetStartsTriggered
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerable_BP_SetStartsTriggered final
{
public:
	bool                                          bTriggered;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_BP_SetStartsTriggered) == 0x000001, "Wrong alignment on RBTriggerable_BP_SetStartsTriggered");
static_assert(sizeof(RBTriggerable_BP_SetStartsTriggered) == 0x000001, "Wrong size on RBTriggerable_BP_SetStartsTriggered");
static_assert(offsetof(RBTriggerable_BP_SetStartsTriggered, bTriggered) == 0x000000, "Member 'RBTriggerable_BP_SetStartsTriggered::bTriggered' has a wrong offset!");

// Function OPP.RBTriggerable.BP_SnapToTriggeredState
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerable_BP_SnapToTriggeredState final
{
public:
	bool                                          Triggered;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_BP_SnapToTriggeredState) == 0x000001, "Wrong alignment on RBTriggerable_BP_SnapToTriggeredState");
static_assert(sizeof(RBTriggerable_BP_SnapToTriggeredState) == 0x000001, "Wrong size on RBTriggerable_BP_SnapToTriggeredState");
static_assert(offsetof(RBTriggerable_BP_SnapToTriggeredState, Triggered) == 0x000000, "Member 'RBTriggerable_BP_SnapToTriggeredState::Triggered' has a wrong offset!");

// Function OPP.RBTriggerable.Event_OnOperatableCompleted
// 0x0008 (0x0008 - 0x0000)
struct RBTriggerable_Event_OnOperatableCompleted final
{
public:
	class UObject*                                Operatable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_Event_OnOperatableCompleted) == 0x000008, "Wrong alignment on RBTriggerable_Event_OnOperatableCompleted");
static_assert(sizeof(RBTriggerable_Event_OnOperatableCompleted) == 0x000008, "Wrong size on RBTriggerable_Event_OnOperatableCompleted");
static_assert(offsetof(RBTriggerable_Event_OnOperatableCompleted, Operatable) == 0x000000, "Member 'RBTriggerable_Event_OnOperatableCompleted::Operatable' has a wrong offset!");

// Function OPP.RBTriggerable.Event_OnOperatableProgressChanged
// 0x0018 (0x0018 - 0x0000)
struct RBTriggerable_Event_OnOperatableProgressChanged final
{
public:
	class UObject*                                Operatable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldProgress;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentProgress;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnap;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ACA[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTriggerable_Event_OnOperatableProgressChanged) == 0x000008, "Wrong alignment on RBTriggerable_Event_OnOperatableProgressChanged");
static_assert(sizeof(RBTriggerable_Event_OnOperatableProgressChanged) == 0x000018, "Wrong size on RBTriggerable_Event_OnOperatableProgressChanged");
static_assert(offsetof(RBTriggerable_Event_OnOperatableProgressChanged, Operatable) == 0x000000, "Member 'RBTriggerable_Event_OnOperatableProgressChanged::Operatable' has a wrong offset!");
static_assert(offsetof(RBTriggerable_Event_OnOperatableProgressChanged, OldProgress) == 0x000008, "Member 'RBTriggerable_Event_OnOperatableProgressChanged::OldProgress' has a wrong offset!");
static_assert(offsetof(RBTriggerable_Event_OnOperatableProgressChanged, CurrentProgress) == 0x00000C, "Member 'RBTriggerable_Event_OnOperatableProgressChanged::CurrentProgress' has a wrong offset!");
static_assert(offsetof(RBTriggerable_Event_OnOperatableProgressChanged, bSnap) == 0x000010, "Member 'RBTriggerable_Event_OnOperatableProgressChanged::bSnap' has a wrong offset!");

// Function OPP.RBTriggerable.Event_OnOperatableUncompleted
// 0x0008 (0x0008 - 0x0000)
struct RBTriggerable_Event_OnOperatableUncompleted final
{
public:
	class UObject*                                Operatable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_Event_OnOperatableUncompleted) == 0x000008, "Wrong alignment on RBTriggerable_Event_OnOperatableUncompleted");
static_assert(sizeof(RBTriggerable_Event_OnOperatableUncompleted) == 0x000008, "Wrong size on RBTriggerable_Event_OnOperatableUncompleted");
static_assert(offsetof(RBTriggerable_Event_OnOperatableUncompleted, Operatable) == 0x000000, "Member 'RBTriggerable_Event_OnOperatableUncompleted::Operatable' has a wrong offset!");

// Function OPP.RBTriggerable.BP_AreAllOperatablesCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerable_BP_AreAllOperatablesCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_BP_AreAllOperatablesCompleted) == 0x000001, "Wrong alignment on RBTriggerable_BP_AreAllOperatablesCompleted");
static_assert(sizeof(RBTriggerable_BP_AreAllOperatablesCompleted) == 0x000001, "Wrong size on RBTriggerable_BP_AreAllOperatablesCompleted");
static_assert(offsetof(RBTriggerable_BP_AreAllOperatablesCompleted, ReturnValue) == 0x000000, "Member 'RBTriggerable_BP_AreAllOperatablesCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBTriggerable.ShouldBPTick
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerable_ShouldBPTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerable_ShouldBPTick) == 0x000001, "Wrong alignment on RBTriggerable_ShouldBPTick");
static_assert(sizeof(RBTriggerable_ShouldBPTick) == 0x000001, "Wrong size on RBTriggerable_ShouldBPTick");
static_assert(offsetof(RBTriggerable_ShouldBPTick, ReturnValue) == 0x000000, "Member 'RBTriggerable_ShouldBPTick::ReturnValue' has a wrong offset!");

// Function OPP.RBBlacklight.RegisterBlacklightableActor
// 0x0008 (0x0008 - 0x0000)
struct RBBlacklight_RegisterBlacklightableActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlacklight_RegisterBlacklightableActor) == 0x000008, "Wrong alignment on RBBlacklight_RegisterBlacklightableActor");
static_assert(sizeof(RBBlacklight_RegisterBlacklightableActor) == 0x000008, "Wrong size on RBBlacklight_RegisterBlacklightableActor");
static_assert(offsetof(RBBlacklight_RegisterBlacklightableActor, Actor) == 0x000000, "Member 'RBBlacklight_RegisterBlacklightableActor::Actor' has a wrong offset!");

// Function OPP.RBBlacklight.UnregisterBlacklightableActor
// 0x0008 (0x0008 - 0x0000)
struct RBBlacklight_UnregisterBlacklightableActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlacklight_UnregisterBlacklightableActor) == 0x000008, "Wrong alignment on RBBlacklight_UnregisterBlacklightableActor");
static_assert(sizeof(RBBlacklight_UnregisterBlacklightableActor) == 0x000008, "Wrong size on RBBlacklight_UnregisterBlacklightableActor");
static_assert(offsetof(RBBlacklight_UnregisterBlacklightableActor, Actor) == 0x000000, "Member 'RBBlacklight_UnregisterBlacklightableActor::Actor' has a wrong offset!");

// Function OPP.RBPopUpBlueprintLibrary.CreatePopUpConfirm
// 0x0060 (0x0060 - 0x0000)
struct RBPopUpBlueprintLibrary_CreatePopUpConfirm final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URBPopUpConfirmWidget>      WidgetType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   MainText;                                          // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ConfirmText;                                       // 0x0040(0x0018)(Parm, NativeAccessSpecifierPublic)
	class URBPopUpConfirmWidget*                  ReturnValue;                                       // 0x0058(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPopUpBlueprintLibrary_CreatePopUpConfirm) == 0x000008, "Wrong alignment on RBPopUpBlueprintLibrary_CreatePopUpConfirm");
static_assert(sizeof(RBPopUpBlueprintLibrary_CreatePopUpConfirm) == 0x000060, "Wrong size on RBPopUpBlueprintLibrary_CreatePopUpConfirm");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirm, WorldContextObject) == 0x000000, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirm::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirm, WidgetType) == 0x000008, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirm::WidgetType' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirm, TitleText) == 0x000010, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirm::TitleText' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirm, MainText) == 0x000028, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirm::MainText' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirm, ConfirmText) == 0x000040, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirm::ConfirmText' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirm, ReturnValue) == 0x000058, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirm::ReturnValue' has a wrong offset!");

// Function OPP.RBPopUpBlueprintLibrary.CreatePopUpConfirmCancel
// 0x0078 (0x0078 - 0x0000)
struct RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URBPopUpConfirmCancelWidget> WidgetType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   MainText;                                          // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ConfirmText;                                       // 0x0040(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   CancelText;                                        // 0x0058(0x0018)(Parm, NativeAccessSpecifierPublic)
	class URBPopUpConfirmCancelWidget*            ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel) == 0x000008, "Wrong alignment on RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel");
static_assert(sizeof(RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel) == 0x000078, "Wrong size on RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel, WorldContextObject) == 0x000000, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel, WidgetType) == 0x000008, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel::WidgetType' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel, TitleText) == 0x000010, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel::TitleText' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel, MainText) == 0x000028, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel::MainText' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel, ConfirmText) == 0x000040, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel::ConfirmText' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel, CancelText) == 0x000058, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel::CancelText' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel, ReturnValue) == 0x000070, "Member 'RBPopUpBlueprintLibrary_CreatePopUpConfirmCancel::ReturnValue' has a wrong offset!");

// Function OPP.RBPopUpBlueprintLibrary.CreatePopUpInputText
// 0x0018 (0x0018 - 0x0000)
struct RBPopUpBlueprintLibrary_CreatePopUpInputText final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URBPopUpInputTextWidget>    WidgetType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBPopUpInputTextWidget*                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPopUpBlueprintLibrary_CreatePopUpInputText) == 0x000008, "Wrong alignment on RBPopUpBlueprintLibrary_CreatePopUpInputText");
static_assert(sizeof(RBPopUpBlueprintLibrary_CreatePopUpInputText) == 0x000018, "Wrong size on RBPopUpBlueprintLibrary_CreatePopUpInputText");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpInputText, WorldContextObject) == 0x000000, "Member 'RBPopUpBlueprintLibrary_CreatePopUpInputText::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpInputText, WidgetType) == 0x000008, "Member 'RBPopUpBlueprintLibrary_CreatePopUpInputText::WidgetType' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpInputText, ReturnValue) == 0x000010, "Member 'RBPopUpBlueprintLibrary_CreatePopUpInputText::ReturnValue' has a wrong offset!");

// Function OPP.RBPopUpBlueprintLibrary.CreatePopUpWait
// 0x0048 (0x0048 - 0x0000)
struct RBPopUpBlueprintLibrary_CreatePopUpWait final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URBPopUpWaitWidget>         WidgetType;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TitleText;                                         // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   MainText;                                          // 0x0028(0x0018)(Parm, NativeAccessSpecifierPublic)
	class URBPopUpWaitWidget*                     ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPopUpBlueprintLibrary_CreatePopUpWait) == 0x000008, "Wrong alignment on RBPopUpBlueprintLibrary_CreatePopUpWait");
static_assert(sizeof(RBPopUpBlueprintLibrary_CreatePopUpWait) == 0x000048, "Wrong size on RBPopUpBlueprintLibrary_CreatePopUpWait");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpWait, WorldContextObject) == 0x000000, "Member 'RBPopUpBlueprintLibrary_CreatePopUpWait::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpWait, WidgetType) == 0x000008, "Member 'RBPopUpBlueprintLibrary_CreatePopUpWait::WidgetType' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpWait, TitleText) == 0x000010, "Member 'RBPopUpBlueprintLibrary_CreatePopUpWait::TitleText' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpWait, MainText) == 0x000028, "Member 'RBPopUpBlueprintLibrary_CreatePopUpWait::MainText' has a wrong offset!");
static_assert(offsetof(RBPopUpBlueprintLibrary_CreatePopUpWait, ReturnValue) == 0x000040, "Member 'RBPopUpBlueprintLibrary_CreatePopUpWait::ReturnValue' has a wrong offset!");

// Function OPP.RBBasePushable.BP_PostMove
// 0x000C (0x000C - 0x0000)
struct RBBasePushable_BP_PostMove final
{
public:
	struct FVector                                DeltaLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_BP_PostMove) == 0x000004, "Wrong alignment on RBBasePushable_BP_PostMove");
static_assert(sizeof(RBBasePushable_BP_PostMove) == 0x00000C, "Wrong size on RBBasePushable_BP_PostMove");
static_assert(offsetof(RBBasePushable_BP_PostMove, DeltaLocation) == 0x000000, "Member 'RBBasePushable_BP_PostMove::DeltaLocation' has a wrong offset!");

// Function OPP.RBBasePushable.BP_SetCanBePushed_Server
// 0x0001 (0x0001 - 0x0000)
struct RBBasePushable_BP_SetCanBePushed_Server final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_BP_SetCanBePushed_Server) == 0x000001, "Wrong alignment on RBBasePushable_BP_SetCanBePushed_Server");
static_assert(sizeof(RBBasePushable_BP_SetCanBePushed_Server) == 0x000001, "Wrong size on RBBasePushable_BP_SetCanBePushed_Server");
static_assert(offsetof(RBBasePushable_BP_SetCanBePushed_Server, bValue) == 0x000000, "Member 'RBBasePushable_BP_SetCanBePushed_Server::bValue' has a wrong offset!");

// Function OPP.RBBasePushable.BP_SetCustomPushSpeed_Server
// 0x0008 (0x0008 - 0x0000)
struct RBBasePushable_BP_SetCustomPushSpeed_Server final
{
public:
	float                                         WalkSpeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunSpeed;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_BP_SetCustomPushSpeed_Server) == 0x000004, "Wrong alignment on RBBasePushable_BP_SetCustomPushSpeed_Server");
static_assert(sizeof(RBBasePushable_BP_SetCustomPushSpeed_Server) == 0x000008, "Wrong size on RBBasePushable_BP_SetCustomPushSpeed_Server");
static_assert(offsetof(RBBasePushable_BP_SetCustomPushSpeed_Server, WalkSpeed) == 0x000000, "Member 'RBBasePushable_BP_SetCustomPushSpeed_Server::WalkSpeed' has a wrong offset!");
static_assert(offsetof(RBBasePushable_BP_SetCustomPushSpeed_Server, RunSpeed) == 0x000004, "Member 'RBBasePushable_BP_SetCustomPushSpeed_Server::RunSpeed' has a wrong offset!");

// Function OPP.RBBasePushable.BP_SetCustomUninteractableText_Server
// 0x0018 (0x0018 - 0x0000)
struct RBBasePushable_BP_SetCustomUninteractableText_Server final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_BP_SetCustomUninteractableText_Server) == 0x000008, "Wrong alignment on RBBasePushable_BP_SetCustomUninteractableText_Server");
static_assert(sizeof(RBBasePushable_BP_SetCustomUninteractableText_Server) == 0x000018, "Wrong size on RBBasePushable_BP_SetCustomUninteractableText_Server");
static_assert(offsetof(RBBasePushable_BP_SetCustomUninteractableText_Server, Text) == 0x000000, "Member 'RBBasePushable_BP_SetCustomUninteractableText_Server::Text' has a wrong offset!");

// Function OPP.RBBasePushable.BP_SetKeepTickingWithNoPushingPawns
// 0x0001 (0x0001 - 0x0000)
struct RBBasePushable_BP_SetKeepTickingWithNoPushingPawns final
{
public:
	bool                                          bKeepTicking;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_BP_SetKeepTickingWithNoPushingPawns) == 0x000001, "Wrong alignment on RBBasePushable_BP_SetKeepTickingWithNoPushingPawns");
static_assert(sizeof(RBBasePushable_BP_SetKeepTickingWithNoPushingPawns) == 0x000001, "Wrong size on RBBasePushable_BP_SetKeepTickingWithNoPushingPawns");
static_assert(offsetof(RBBasePushable_BP_SetKeepTickingWithNoPushingPawns, bKeepTicking) == 0x000000, "Member 'RBBasePushable_BP_SetKeepTickingWithNoPushingPawns::bKeepTicking' has a wrong offset!");

// Function OPP.RBBasePushable.Event_OnCanBePushedChanged
// 0x0001 (0x0001 - 0x0000)
struct RBBasePushable_Event_OnCanBePushedChanged final
{
public:
	bool                                          CanBePushed;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_Event_OnCanBePushedChanged) == 0x000001, "Wrong alignment on RBBasePushable_Event_OnCanBePushedChanged");
static_assert(sizeof(RBBasePushable_Event_OnCanBePushedChanged) == 0x000001, "Wrong size on RBBasePushable_Event_OnCanBePushedChanged");
static_assert(offsetof(RBBasePushable_Event_OnCanBePushedChanged, CanBePushed) == 0x000000, "Member 'RBBasePushable_Event_OnCanBePushedChanged::CanBePushed' has a wrong offset!");

// Function OPP.RBBasePushable.Event_OnPawnPushingChanged
// 0x0010 (0x0010 - 0x0000)
struct RBBasePushable_Event_OnPawnPushingChanged final
{
public:
	class URBPushableComponent*                   PushableComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_Event_OnPawnPushingChanged) == 0x000008, "Wrong alignment on RBBasePushable_Event_OnPawnPushingChanged");
static_assert(sizeof(RBBasePushable_Event_OnPawnPushingChanged) == 0x000010, "Wrong size on RBBasePushable_Event_OnPawnPushingChanged");
static_assert(offsetof(RBBasePushable_Event_OnPawnPushingChanged, PushableComponent) == 0x000000, "Member 'RBBasePushable_Event_OnPawnPushingChanged::PushableComponent' has a wrong offset!");
static_assert(offsetof(RBBasePushable_Event_OnPawnPushingChanged, Pawn) == 0x000008, "Member 'RBBasePushable_Event_OnPawnPushingChanged::Pawn' has a wrong offset!");

// Function OPP.RBBasePushable.Multicast_PushableStuck
// 0x0001 (0x0001 - 0x0000)
struct RBBasePushable_Multicast_PushableStuck final
{
public:
	bool                                          bFromCollision;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_Multicast_PushableStuck) == 0x000001, "Wrong alignment on RBBasePushable_Multicast_PushableStuck");
static_assert(sizeof(RBBasePushable_Multicast_PushableStuck) == 0x000001, "Wrong size on RBBasePushable_Multicast_PushableStuck");
static_assert(offsetof(RBBasePushable_Multicast_PushableStuck, bFromCollision) == 0x000000, "Member 'RBBasePushable_Multicast_PushableStuck::bFromCollision' has a wrong offset!");

// Function OPP.RBBasePushable.SetInteractionsEnabled_Server
// 0x0001 (0x0001 - 0x0000)
struct RBBasePushable_SetInteractionsEnabled_Server final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_SetInteractionsEnabled_Server) == 0x000001, "Wrong alignment on RBBasePushable_SetInteractionsEnabled_Server");
static_assert(sizeof(RBBasePushable_SetInteractionsEnabled_Server) == 0x000001, "Wrong size on RBBasePushable_SetInteractionsEnabled_Server");
static_assert(offsetof(RBBasePushable_SetInteractionsEnabled_Server, bEnabled) == 0x000000, "Member 'RBBasePushable_SetInteractionsEnabled_Server::bEnabled' has a wrong offset!");

// Function OPP.RBBasePushable.SetIsHardToPush
// 0x0001 (0x0001 - 0x0000)
struct RBBasePushable_SetIsHardToPush final
{
public:
	bool                                          bHardToPushValue;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_SetIsHardToPush) == 0x000001, "Wrong alignment on RBBasePushable_SetIsHardToPush");
static_assert(sizeof(RBBasePushable_SetIsHardToPush) == 0x000001, "Wrong size on RBBasePushable_SetIsHardToPush");
static_assert(offsetof(RBBasePushable_SetIsHardToPush, bHardToPushValue) == 0x000000, "Member 'RBBasePushable_SetIsHardToPush::bHardToPushValue' has a wrong offset!");

// Function OPP.RBBasePushable.Tick_NonPushable
// 0x0004 (0x0004 - 0x0000)
struct RBBasePushable_Tick_NonPushable final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_Tick_NonPushable) == 0x000004, "Wrong alignment on RBBasePushable_Tick_NonPushable");
static_assert(sizeof(RBBasePushable_Tick_NonPushable) == 0x000004, "Wrong size on RBBasePushable_Tick_NonPushable");
static_assert(offsetof(RBBasePushable_Tick_NonPushable, DeltaTime) == 0x000000, "Member 'RBBasePushable_Tick_NonPushable::DeltaTime' has a wrong offset!");

// Function OPP.RBBasePushable.Tick_Pushable
// 0x0004 (0x0004 - 0x0000)
struct RBBasePushable_Tick_Pushable final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_Tick_Pushable) == 0x000004, "Wrong alignment on RBBasePushable_Tick_Pushable");
static_assert(sizeof(RBBasePushable_Tick_Pushable) == 0x000004, "Wrong size on RBBasePushable_Tick_Pushable");
static_assert(offsetof(RBBasePushable_Tick_Pushable, DeltaTime) == 0x000000, "Member 'RBBasePushable_Tick_Pushable::DeltaTime' has a wrong offset!");

// Function OPP.RBBasePushable.BP_GetPawnsPushing
// 0x0010 (0x0010 - 0x0000)
struct RBBasePushable_BP_GetPawnsPushing final
{
public:
	TArray<class ARBPawn*>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_BP_GetPawnsPushing) == 0x000008, "Wrong alignment on RBBasePushable_BP_GetPawnsPushing");
static_assert(sizeof(RBBasePushable_BP_GetPawnsPushing) == 0x000010, "Wrong size on RBBasePushable_BP_GetPawnsPushing");
static_assert(offsetof(RBBasePushable_BP_GetPawnsPushing, ReturnValue) == 0x000000, "Member 'RBBasePushable_BP_GetPawnsPushing::ReturnValue' has a wrong offset!");

// Function OPP.RBBasePushable.GetLedgeMarkerClosestTo
// 0x0018 (0x0018 - 0x0000)
struct RBBasePushable_GetLedgeMarkerClosestTo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AE2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBLedgeMarker*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_GetLedgeMarkerClosestTo) == 0x000008, "Wrong alignment on RBBasePushable_GetLedgeMarkerClosestTo");
static_assert(sizeof(RBBasePushable_GetLedgeMarkerClosestTo) == 0x000018, "Wrong size on RBBasePushable_GetLedgeMarkerClosestTo");
static_assert(offsetof(RBBasePushable_GetLedgeMarkerClosestTo, Location) == 0x000000, "Member 'RBBasePushable_GetLedgeMarkerClosestTo::Location' has a wrong offset!");
static_assert(offsetof(RBBasePushable_GetLedgeMarkerClosestTo, ReturnValue) == 0x000010, "Member 'RBBasePushable_GetLedgeMarkerClosestTo::ReturnValue' has a wrong offset!");

// Function OPP.RBBasePushable.IsConsideredMoving
// 0x0001 (0x0001 - 0x0000)
struct RBBasePushable_IsConsideredMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_IsConsideredMoving) == 0x000001, "Wrong alignment on RBBasePushable_IsConsideredMoving");
static_assert(sizeof(RBBasePushable_IsConsideredMoving) == 0x000001, "Wrong size on RBBasePushable_IsConsideredMoving");
static_assert(offsetof(RBBasePushable_IsConsideredMoving, ReturnValue) == 0x000000, "Member 'RBBasePushable_IsConsideredMoving::ReturnValue' has a wrong offset!");

// Function OPP.RBBasePushable.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct RBBasePushable_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBasePushable_IsMoving) == 0x000001, "Wrong alignment on RBBasePushable_IsMoving");
static_assert(sizeof(RBBasePushable_IsMoving) == 0x000001, "Wrong size on RBBasePushable_IsMoving");
static_assert(offsetof(RBBasePushable_IsMoving, ReturnValue) == 0x000000, "Member 'RBBasePushable_IsMoving::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerSeparatorVolume.OnBeginActorOverlap
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerSeparatorVolume_OnBeginActorOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerSeparatorVolume_OnBeginActorOverlap) == 0x000008, "Wrong alignment on RBPlayerSeparatorVolume_OnBeginActorOverlap");
static_assert(sizeof(RBPlayerSeparatorVolume_OnBeginActorOverlap) == 0x000010, "Wrong size on RBPlayerSeparatorVolume_OnBeginActorOverlap");
static_assert(offsetof(RBPlayerSeparatorVolume_OnBeginActorOverlap, OverlappedActor) == 0x000000, "Member 'RBPlayerSeparatorVolume_OnBeginActorOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBPlayerSeparatorVolume_OnBeginActorOverlap, OtherActor) == 0x000008, "Member 'RBPlayerSeparatorVolume_OnBeginActorOverlap::OtherActor' has a wrong offset!");

// Function OPP.RBPlayerSeparatorVolume.OnEndActorOverlap
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerSeparatorVolume_OnEndActorOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerSeparatorVolume_OnEndActorOverlap) == 0x000008, "Wrong alignment on RBPlayerSeparatorVolume_OnEndActorOverlap");
static_assert(sizeof(RBPlayerSeparatorVolume_OnEndActorOverlap) == 0x000010, "Wrong size on RBPlayerSeparatorVolume_OnEndActorOverlap");
static_assert(offsetof(RBPlayerSeparatorVolume_OnEndActorOverlap, OverlappedActor) == 0x000000, "Member 'RBPlayerSeparatorVolume_OnEndActorOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBPlayerSeparatorVolume_OnEndActorOverlap, OtherActor) == 0x000008, "Member 'RBPlayerSeparatorVolume_OnEndActorOverlap::OtherActor' has a wrong offset!");

// Function OPP.RBPlayerSeparatorVolume.OnRep_PlayerInside
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerSeparatorVolume_OnRep_PlayerInside final
{
public:
	class ARBPlayer*                              OldPlayerInside;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerSeparatorVolume_OnRep_PlayerInside) == 0x000008, "Wrong alignment on RBPlayerSeparatorVolume_OnRep_PlayerInside");
static_assert(sizeof(RBPlayerSeparatorVolume_OnRep_PlayerInside) == 0x000008, "Wrong size on RBPlayerSeparatorVolume_OnRep_PlayerInside");
static_assert(offsetof(RBPlayerSeparatorVolume_OnRep_PlayerInside, OldPlayerInside) == 0x000000, "Member 'RBPlayerSeparatorVolume_OnRep_PlayerInside::OldPlayerInside' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.AddAdditionalDirectorConfig
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_AddAdditionalDirectorConfig final
{
public:
	class URBAIDirectorConfig*                    DirectorConfig;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_AddAdditionalDirectorConfig) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_AddAdditionalDirectorConfig");
static_assert(sizeof(RBAIBlueprintLibrary_AddAdditionalDirectorConfig) == 0x000008, "Wrong size on RBAIBlueprintLibrary_AddAdditionalDirectorConfig");
static_assert(offsetof(RBAIBlueprintLibrary_AddAdditionalDirectorConfig, DirectorConfig) == 0x000000, "Member 'RBAIBlueprintLibrary_AddAdditionalDirectorConfig::DirectorConfig' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.AttachToScriptedAnimStation
// 0x0058 (0x0058 - 0x0000)
struct RBAIBlueprintLibrary_AttachToScriptedAnimStation final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AEA[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class ARBScriptedAnimStation*                 Station;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MeshTarget;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePlayers;                                    // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AEB[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBAIConditionSet                      SpecificExitConditions;                            // 0x0040(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         StartDelay;                                        // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AEC[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_AttachToScriptedAnimStation) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_AttachToScriptedAnimStation");
static_assert(sizeof(RBAIBlueprintLibrary_AttachToScriptedAnimStation) == 0x000058, "Wrong size on RBAIBlueprintLibrary_AttachToScriptedAnimStation");
static_assert(offsetof(RBAIBlueprintLibrary_AttachToScriptedAnimStation, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_AttachToScriptedAnimStation::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_AttachToScriptedAnimStation, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_AttachToScriptedAnimStation::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_AttachToScriptedAnimStation, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_AttachToScriptedAnimStation::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_AttachToScriptedAnimStation, Station) == 0x000028, "Member 'RBAIBlueprintLibrary_AttachToScriptedAnimStation::Station' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_AttachToScriptedAnimStation, MeshTarget) == 0x000030, "Member 'RBAIBlueprintLibrary_AttachToScriptedAnimStation::MeshTarget' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_AttachToScriptedAnimStation, bIgnorePlayers) == 0x000038, "Member 'RBAIBlueprintLibrary_AttachToScriptedAnimStation::bIgnorePlayers' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_AttachToScriptedAnimStation, SpecificExitConditions) == 0x000040, "Member 'RBAIBlueprintLibrary_AttachToScriptedAnimStation::SpecificExitConditions' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_AttachToScriptedAnimStation, StartDelay) == 0x000050, "Member 'RBAIBlueprintLibrary_AttachToScriptedAnimStation::StartDelay' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ClearLeash
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_ClearLeash final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ClearLeash) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ClearLeash");
static_assert(sizeof(RBAIBlueprintLibrary_ClearLeash) == 0x000008, "Wrong size on RBAIBlueprintLibrary_ClearLeash");
static_assert(offsetof(RBAIBlueprintLibrary_ClearLeash, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ClearLeash::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ClearScriptedCommands
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_ClearScriptedCommands final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ClearScriptedCommands) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ClearScriptedCommands");
static_assert(sizeof(RBAIBlueprintLibrary_ClearScriptedCommands) == 0x000008, "Wrong size on RBAIBlueprintLibrary_ClearScriptedCommands");
static_assert(offsetof(RBAIBlueprintLibrary_ClearScriptedCommands, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ClearScriptedCommands::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ClearSpecificTarget
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_ClearSpecificTarget final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ClearSpecificTarget) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ClearSpecificTarget");
static_assert(sizeof(RBAIBlueprintLibrary_ClearSpecificTarget) == 0x000008, "Wrong size on RBAIBlueprintLibrary_ClearSpecificTarget");
static_assert(offsetof(RBAIBlueprintLibrary_ClearSpecificTarget, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ClearSpecificTarget::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ClearVOMapOverrides
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_ClearVOMapOverrides final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ClearVOMapOverrides) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ClearVOMapOverrides");
static_assert(sizeof(RBAIBlueprintLibrary_ClearVOMapOverrides) == 0x000008, "Wrong size on RBAIBlueprintLibrary_ClearVOMapOverrides");
static_assert(offsetof(RBAIBlueprintLibrary_ClearVOMapOverrides, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ClearVOMapOverrides::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.DetachFromScriptedAnimStation
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_DetachFromScriptedAnimStation final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_DetachFromScriptedAnimStation) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_DetachFromScriptedAnimStation");
static_assert(sizeof(RBAIBlueprintLibrary_DetachFromScriptedAnimStation) == 0x000008, "Wrong size on RBAIBlueprintLibrary_DetachFromScriptedAnimStation");
static_assert(offsetof(RBAIBlueprintLibrary_DetachFromScriptedAnimStation, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_DetachFromScriptedAnimStation::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ExitHidingSpot
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_ExitHidingSpot final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ExitHidingSpot) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ExitHidingSpot");
static_assert(sizeof(RBAIBlueprintLibrary_ExitHidingSpot) == 0x000008, "Wrong size on RBAIBlueprintLibrary_ExitHidingSpot");
static_assert(offsetof(RBAIBlueprintLibrary_ExitHidingSpot, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ExitHidingSpot::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ForceAttackSequence
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_ForceAttackSequence final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ForcedAnimSequence;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ForceAttackSequence) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ForceAttackSequence");
static_assert(sizeof(RBAIBlueprintLibrary_ForceAttackSequence) == 0x000010, "Wrong size on RBAIBlueprintLibrary_ForceAttackSequence");
static_assert(offsetof(RBAIBlueprintLibrary_ForceAttackSequence, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ForceAttackSequence::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ForceAttackSequence, ForcedAnimSequence) == 0x000008, "Member 'RBAIBlueprintLibrary_ForceAttackSequence::ForcedAnimSequence' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ForceChaseUntilContact
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_ForceChaseUntilContact final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              TargetPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ForceChaseUntilContact) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ForceChaseUntilContact");
static_assert(sizeof(RBAIBlueprintLibrary_ForceChaseUntilContact) == 0x000010, "Wrong size on RBAIBlueprintLibrary_ForceChaseUntilContact");
static_assert(offsetof(RBAIBlueprintLibrary_ForceChaseUntilContact, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ForceChaseUntilContact::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ForceChaseUntilContact, TargetPlayer) == 0x000008, "Member 'RBAIBlueprintLibrary_ForceChaseUntilContact::TargetPlayer' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ForceExecute
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_ForceExecute final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ForceExecute) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ForceExecute");
static_assert(sizeof(RBAIBlueprintLibrary_ForceExecute) == 0x000010, "Wrong size on RBAIBlueprintLibrary_ForceExecute");
static_assert(offsetof(RBAIBlueprintLibrary_ForceExecute, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ForceExecute::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ForceExecute, Player) == 0x000008, "Member 'RBAIBlueprintLibrary_ForceExecute::Player' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ForceGasGroupAttack
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_ForceGasGroupAttack final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AED[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_ForceGasGroupAttack) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ForceGasGroupAttack");
static_assert(sizeof(RBAIBlueprintLibrary_ForceGasGroupAttack) == 0x000018, "Wrong size on RBAIBlueprintLibrary_ForceGasGroupAttack");
static_assert(offsetof(RBAIBlueprintLibrary_ForceGasGroupAttack, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ForceGasGroupAttack::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ForceGasGroupAttack, Direction) == 0x000008, "Member 'RBAIBlueprintLibrary_ForceGasGroupAttack::Direction' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ForcePlayStartleAnimation
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_ForcePlayStartleAnimation final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStartleType                                  StartledType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStartleSpeed                                 StartledSpeed;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AEE[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WsYaw;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ForcePlayStartleAnimation) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ForcePlayStartleAnimation");
static_assert(sizeof(RBAIBlueprintLibrary_ForcePlayStartleAnimation) == 0x000010, "Wrong size on RBAIBlueprintLibrary_ForcePlayStartleAnimation");
static_assert(offsetof(RBAIBlueprintLibrary_ForcePlayStartleAnimation, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ForcePlayStartleAnimation::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ForcePlayStartleAnimation, StartledType) == 0x000008, "Member 'RBAIBlueprintLibrary_ForcePlayStartleAnimation::StartledType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ForcePlayStartleAnimation, StartledSpeed) == 0x000009, "Member 'RBAIBlueprintLibrary_ForcePlayStartleAnimation::StartledSpeed' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ForcePlayStartleAnimation, WsYaw) == 0x00000C, "Member 'RBAIBlueprintLibrary_ForcePlayStartleAnimation::WsYaw' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetAllBots
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_GetAllBots final
{
public:
	TArray<class ARBBot*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetAllBots) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetAllBots");
static_assert(sizeof(RBAIBlueprintLibrary_GetAllBots) == 0x000010, "Wrong size on RBAIBlueprintLibrary_GetAllBots");
static_assert(offsetof(RBAIBlueprintLibrary_GetAllBots, ReturnValue) == 0x000000, "Member 'RBAIBlueprintLibrary_GetAllBots::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetAnyBot
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_GetAnyBot final
{
public:
	class ARBBot*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetAnyBot) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetAnyBot");
static_assert(sizeof(RBAIBlueprintLibrary_GetAnyBot) == 0x000008, "Wrong size on RBAIBlueprintLibrary_GetAnyBot");
static_assert(offsetof(RBAIBlueprintLibrary_GetAnyBot, ReturnValue) == 0x000000, "Member 'RBAIBlueprintLibrary_GetAnyBot::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetBotByClass
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_GetBotByClass final
{
public:
	TSubclassOf<class ARBNPC>                     NPCClass;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBBot*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetBotByClass) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetBotByClass");
static_assert(sizeof(RBAIBlueprintLibrary_GetBotByClass) == 0x000010, "Wrong size on RBAIBlueprintLibrary_GetBotByClass");
static_assert(offsetof(RBAIBlueprintLibrary_GetBotByClass, NPCClass) == 0x000000, "Member 'RBAIBlueprintLibrary_GetBotByClass::NPCClass' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetBotByClass, ReturnValue) == 0x000008, "Member 'RBAIBlueprintLibrary_GetBotByClass::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetBotByType
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_GetBotByType final
{
public:
	ENPCType                                      NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AEF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBBot*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetBotByType) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetBotByType");
static_assert(sizeof(RBAIBlueprintLibrary_GetBotByType) == 0x000010, "Wrong size on RBAIBlueprintLibrary_GetBotByType");
static_assert(offsetof(RBAIBlueprintLibrary_GetBotByType, NPCType) == 0x000000, "Member 'RBAIBlueprintLibrary_GetBotByType::NPCType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetBotByType, ReturnValue) == 0x000008, "Member 'RBAIBlueprintLibrary_GetBotByType::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetBotsByClass
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_GetBotsByClass final
{
public:
	TSubclassOf<class ARBNPC>                     NPCClass;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARBBot*>                         bots;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetBotsByClass) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetBotsByClass");
static_assert(sizeof(RBAIBlueprintLibrary_GetBotsByClass) == 0x000018, "Wrong size on RBAIBlueprintLibrary_GetBotsByClass");
static_assert(offsetof(RBAIBlueprintLibrary_GetBotsByClass, NPCClass) == 0x000000, "Member 'RBAIBlueprintLibrary_GetBotsByClass::NPCClass' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetBotsByClass, bots) == 0x000008, "Member 'RBAIBlueprintLibrary_GetBotsByClass::bots' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetBotsByType
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_GetBotsByType final
{
public:
	ENPCType                                      NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBBot*>                         bots;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetBotsByType) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetBotsByType");
static_assert(sizeof(RBAIBlueprintLibrary_GetBotsByType) == 0x000018, "Wrong size on RBAIBlueprintLibrary_GetBotsByType");
static_assert(offsetof(RBAIBlueprintLibrary_GetBotsByType, NPCType) == 0x000000, "Member 'RBAIBlueprintLibrary_GetBotsByType::NPCType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetBotsByType, bots) == 0x000008, "Member 'RBAIBlueprintLibrary_GetBotsByType::bots' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetNPCByClass
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_GetNPCByClass final
{
public:
	TSubclassOf<class ARBNPC>                     NPCClass;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBNPC*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetNPCByClass) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetNPCByClass");
static_assert(sizeof(RBAIBlueprintLibrary_GetNPCByClass) == 0x000010, "Wrong size on RBAIBlueprintLibrary_GetNPCByClass");
static_assert(offsetof(RBAIBlueprintLibrary_GetNPCByClass, NPCClass) == 0x000000, "Member 'RBAIBlueprintLibrary_GetNPCByClass::NPCClass' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNPCByClass, ReturnValue) == 0x000008, "Member 'RBAIBlueprintLibrary_GetNPCByClass::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetNPCByType
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_GetNPCByType final
{
public:
	ENPCType                                      NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBNPC*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetNPCByType) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetNPCByType");
static_assert(sizeof(RBAIBlueprintLibrary_GetNPCByType) == 0x000010, "Wrong size on RBAIBlueprintLibrary_GetNPCByType");
static_assert(offsetof(RBAIBlueprintLibrary_GetNPCByType, NPCType) == 0x000000, "Member 'RBAIBlueprintLibrary_GetNPCByType::NPCType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNPCByType, ReturnValue) == 0x000008, "Member 'RBAIBlueprintLibrary_GetNPCByType::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetNumberOfBots
// 0x0004 (0x0004 - 0x0000)
struct RBAIBlueprintLibrary_GetNumberOfBots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetNumberOfBots) == 0x000004, "Wrong alignment on RBAIBlueprintLibrary_GetNumberOfBots");
static_assert(sizeof(RBAIBlueprintLibrary_GetNumberOfBots) == 0x000004, "Wrong size on RBAIBlueprintLibrary_GetNumberOfBots");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBots, ReturnValue) == 0x000000, "Member 'RBAIBlueprintLibrary_GetNumberOfBots::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetNumberOfBotsAround
// 0x0020 (0x0020 - 0x0000)
struct RBAIBlueprintLibrary_GetNumberOfBotsAround final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                ExcludedPawn;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF2[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_GetNumberOfBotsAround) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetNumberOfBotsAround");
static_assert(sizeof(RBAIBlueprintLibrary_GetNumberOfBotsAround) == 0x000020, "Wrong size on RBAIBlueprintLibrary_GetNumberOfBotsAround");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsAround, Point) == 0x000000, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsAround::Point' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsAround, Radius) == 0x00000C, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsAround::Radius' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsAround, ExcludedPawn) == 0x000010, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsAround::ExcludedPawn' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsAround, ReturnValue) == 0x000018, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsAround::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetNumberOfBotsAroundInActivity
// 0x0028 (0x0028 - 0x0000)
struct RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity final
{
public:
	EAIActivity                                   Activity;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF3[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Point;                                             // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF4[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                ExcludedPawn;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF5[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity");
static_assert(sizeof(RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity) == 0x000028, "Wrong size on RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity, Activity) == 0x000000, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity::Activity' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity, Point) == 0x000004, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity::Point' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity, Radius) == 0x000010, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity::Radius' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity, ExcludedPawn) == 0x000018, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity::ExcludedPawn' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity, ReturnValue) == 0x000020, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsAroundInActivity::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GetNumberOfBotsByType
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_GetNumberOfBotsByType final
{
public:
	ENPCType                                      NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCFlavor                                    NPCFlavor;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF6[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GetNumberOfBotsByType) == 0x000004, "Wrong alignment on RBAIBlueprintLibrary_GetNumberOfBotsByType");
static_assert(sizeof(RBAIBlueprintLibrary_GetNumberOfBotsByType) == 0x000008, "Wrong size on RBAIBlueprintLibrary_GetNumberOfBotsByType");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsByType, NPCType) == 0x000000, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsByType::NPCType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsByType, NPCFlavor) == 0x000001, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsByType::NPCFlavor' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GetNumberOfBotsByType, ReturnValue) == 0x000004, "Member 'RBAIBlueprintLibrary_GetNumberOfBotsByType::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GlobalIgnoreAllPlayers
// 0x0001 (0x0001 - 0x0000)
struct RBAIBlueprintLibrary_GlobalIgnoreAllPlayers final
{
public:
	bool                                          bIgnoreAllPlayers;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GlobalIgnoreAllPlayers) == 0x000001, "Wrong alignment on RBAIBlueprintLibrary_GlobalIgnoreAllPlayers");
static_assert(sizeof(RBAIBlueprintLibrary_GlobalIgnoreAllPlayers) == 0x000001, "Wrong size on RBAIBlueprintLibrary_GlobalIgnoreAllPlayers");
static_assert(offsetof(RBAIBlueprintLibrary_GlobalIgnoreAllPlayers, bIgnoreAllPlayers) == 0x000000, "Member 'RBAIBlueprintLibrary_GlobalIgnoreAllPlayers::bIgnoreAllPlayers' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GoRetireInCloset
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_GoRetireInCloset final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBMonsterCloset*                       Closet;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPriorityOverActiveBehaviors;                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_GoRetireInCloset) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GoRetireInCloset");
static_assert(sizeof(RBAIBlueprintLibrary_GoRetireInCloset) == 0x000018, "Wrong size on RBAIBlueprintLibrary_GoRetireInCloset");
static_assert(offsetof(RBAIBlueprintLibrary_GoRetireInCloset, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_GoRetireInCloset::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GoRetireInCloset, Closet) == 0x000008, "Member 'RBAIBlueprintLibrary_GoRetireInCloset::Closet' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GoRetireInCloset, bPriorityOverActiveBehaviors) == 0x000010, "Member 'RBAIBlueprintLibrary_GoRetireInCloset::bPriorityOverActiveBehaviors' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GotoAmbientMarker
// 0x0030 (0x0030 - 0x0000)
struct RBAIBlueprintLibrary_GotoAmbientMarker final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AmbientLocation;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF8[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GotoAmbientMarker) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GotoAmbientMarker");
static_assert(sizeof(RBAIBlueprintLibrary_GotoAmbientMarker) == 0x000030, "Wrong size on RBAIBlueprintLibrary_GotoAmbientMarker");
static_assert(offsetof(RBAIBlueprintLibrary_GotoAmbientMarker, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_GotoAmbientMarker::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoAmbientMarker, AmbientLocation) == 0x000008, "Member 'RBAIBlueprintLibrary_GotoAmbientMarker::AmbientLocation' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoAmbientMarker, OperationResult) == 0x000010, "Member 'RBAIBlueprintLibrary_GotoAmbientMarker::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoAmbientMarker, LatentInfo) == 0x000018, "Member 'RBAIBlueprintLibrary_GotoAmbientMarker::LatentInfo' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GotoHidingSpot
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_GotoHidingSpot final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Hidespot;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GotoHidingSpot) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GotoHidingSpot");
static_assert(sizeof(RBAIBlueprintLibrary_GotoHidingSpot) == 0x000010, "Wrong size on RBAIBlueprintLibrary_GotoHidingSpot");
static_assert(offsetof(RBAIBlueprintLibrary_GotoHidingSpot, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_GotoHidingSpot::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoHidingSpot, Hidespot) == 0x000008, "Member 'RBAIBlueprintLibrary_GotoHidingSpot::Hidespot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GotoLocation
// 0x0040 (0x0040 - 0x0000)
struct RBAIBlueprintLibrary_GotoLocation final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 Destination;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideSpeed;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnToRotation;                                   // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFA[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceBuffer;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForced;                                           // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFB[0x3];                                     // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_GotoLocation) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GotoLocation");
static_assert(sizeof(RBAIBlueprintLibrary_GotoLocation) == 0x000040, "Wrong size on RBAIBlueprintLibrary_GotoLocation");
static_assert(offsetof(RBAIBlueprintLibrary_GotoLocation, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_GotoLocation::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoLocation, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_GotoLocation::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoLocation, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_GotoLocation::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoLocation, Destination) == 0x000028, "Member 'RBAIBlueprintLibrary_GotoLocation::Destination' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoLocation, OverrideSpeed) == 0x000030, "Member 'RBAIBlueprintLibrary_GotoLocation::OverrideSpeed' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoLocation, bTurnToRotation) == 0x000034, "Member 'RBAIBlueprintLibrary_GotoLocation::bTurnToRotation' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoLocation, DistanceBuffer) == 0x000038, "Member 'RBAIBlueprintLibrary_GotoLocation::DistanceBuffer' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoLocation, bForced) == 0x00003C, "Member 'RBAIBlueprintLibrary_GotoLocation::bForced' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.GotoSabotage
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_GotoSabotage final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SabotageTarget;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_GotoSabotage) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_GotoSabotage");
static_assert(sizeof(RBAIBlueprintLibrary_GotoSabotage) == 0x000010, "Wrong size on RBAIBlueprintLibrary_GotoSabotage");
static_assert(offsetof(RBAIBlueprintLibrary_GotoSabotage, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_GotoSabotage::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_GotoSabotage, SabotageTarget) == 0x000008, "Member 'RBAIBlueprintLibrary_GotoSabotage::SabotageTarget' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.IgnoreAllPlayers
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_IgnoreAllPlayers final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBotIgnoreAllPlayers;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_IgnoreAllPlayers) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_IgnoreAllPlayers");
static_assert(sizeof(RBAIBlueprintLibrary_IgnoreAllPlayers) == 0x000010, "Wrong size on RBAIBlueprintLibrary_IgnoreAllPlayers");
static_assert(offsetof(RBAIBlueprintLibrary_IgnoreAllPlayers, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_IgnoreAllPlayers::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_IgnoreAllPlayers, bBotIgnoreAllPlayers) == 0x000008, "Member 'RBAIBlueprintLibrary_IgnoreAllPlayers::bBotIgnoreAllPlayers' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.Investigate
// 0x0030 (0x0030 - 0x0000)
struct RBAIBlueprintLibrary_Investigate final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAware;                                            // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFE[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_Investigate) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_Investigate");
static_assert(sizeof(RBAIBlueprintLibrary_Investigate) == 0x000030, "Wrong size on RBAIBlueprintLibrary_Investigate");
static_assert(offsetof(RBAIBlueprintLibrary_Investigate, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_Investigate::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_Investigate, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_Investigate::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_Investigate, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_Investigate::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_Investigate, bAware) == 0x000028, "Member 'RBAIBlueprintLibrary_Investigate::bAware' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.InvestigateLocation
// 0x0038 (0x0038 - 0x0000)
struct RBAIBlueprintLibrary_InvestigateLocation final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AFF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InvestigationLoc;                                  // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAware;                                            // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueInvestigatingWhenDone;                    // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B00[0x2];                                     // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_InvestigateLocation) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_InvestigateLocation");
static_assert(sizeof(RBAIBlueprintLibrary_InvestigateLocation) == 0x000038, "Wrong size on RBAIBlueprintLibrary_InvestigateLocation");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigateLocation, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_InvestigateLocation::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigateLocation, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_InvestigateLocation::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigateLocation, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_InvestigateLocation::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigateLocation, InvestigationLoc) == 0x000028, "Member 'RBAIBlueprintLibrary_InvestigateLocation::InvestigationLoc' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigateLocation, bAware) == 0x000034, "Member 'RBAIBlueprintLibrary_InvestigateLocation::bAware' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigateLocation, bContinueInvestigatingWhenDone) == 0x000035, "Member 'RBAIBlueprintLibrary_InvestigateLocation::bContinueInvestigatingWhenDone' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.InvestigatePoint
// 0x0038 (0x0038 - 0x0000)
struct RBAIBlueprintLibrary_InvestigatePoint final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B01[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 InvestigationPoint;                                // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAware;                                            // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueInvestigatingWhenDone;                    // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B02[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_InvestigatePoint) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_InvestigatePoint");
static_assert(sizeof(RBAIBlueprintLibrary_InvestigatePoint) == 0x000038, "Wrong size on RBAIBlueprintLibrary_InvestigatePoint");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoint, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_InvestigatePoint::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoint, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_InvestigatePoint::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoint, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_InvestigatePoint::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoint, InvestigationPoint) == 0x000028, "Member 'RBAIBlueprintLibrary_InvestigatePoint::InvestigationPoint' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoint, bAware) == 0x000030, "Member 'RBAIBlueprintLibrary_InvestigatePoint::bAware' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoint, bContinueInvestigatingWhenDone) == 0x000031, "Member 'RBAIBlueprintLibrary_InvestigatePoint::bContinueInvestigatingWhenDone' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.InvestigatePoints
// 0x0048 (0x0048 - 0x0000)
struct RBAIBlueprintLibrary_InvestigatePoints final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B03[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         PointList;                                         // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EInvestigationPointSelectionMode              SelectionMode;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAware;                                            // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueInvestigatingWhenDone;                    // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B04[0x1];                                     // 0x003B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumberOfPoints;                                 // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlySpecifiedPoints;                              // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B05[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_InvestigatePoints) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_InvestigatePoints");
static_assert(sizeof(RBAIBlueprintLibrary_InvestigatePoints) == 0x000048, "Wrong size on RBAIBlueprintLibrary_InvestigatePoints");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoints, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_InvestigatePoints::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoints, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_InvestigatePoints::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoints, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_InvestigatePoints::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoints, PointList) == 0x000028, "Member 'RBAIBlueprintLibrary_InvestigatePoints::PointList' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoints, SelectionMode) == 0x000038, "Member 'RBAIBlueprintLibrary_InvestigatePoints::SelectionMode' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoints, bAware) == 0x000039, "Member 'RBAIBlueprintLibrary_InvestigatePoints::bAware' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoints, bContinueInvestigatingWhenDone) == 0x00003A, "Member 'RBAIBlueprintLibrary_InvestigatePoints::bContinueInvestigatingWhenDone' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoints, MaxNumberOfPoints) == 0x00003C, "Member 'RBAIBlueprintLibrary_InvestigatePoints::MaxNumberOfPoints' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_InvestigatePoints, bOnlySpecifiedPoints) == 0x000040, "Member 'RBAIBlueprintLibrary_InvestigatePoints::bOnlySpecifiedPoints' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.IsAnyBotOfType
// 0x0003 (0x0003 - 0x0000)
struct RBAIBlueprintLibrary_IsAnyBotOfType final
{
public:
	ENPCType                                      NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCFlavor                                    NPCFlavor;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_IsAnyBotOfType) == 0x000001, "Wrong alignment on RBAIBlueprintLibrary_IsAnyBotOfType");
static_assert(sizeof(RBAIBlueprintLibrary_IsAnyBotOfType) == 0x000003, "Wrong size on RBAIBlueprintLibrary_IsAnyBotOfType");
static_assert(offsetof(RBAIBlueprintLibrary_IsAnyBotOfType, NPCType) == 0x000000, "Member 'RBAIBlueprintLibrary_IsAnyBotOfType::NPCType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_IsAnyBotOfType, NPCFlavor) == 0x000001, "Member 'RBAIBlueprintLibrary_IsAnyBotOfType::NPCFlavor' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_IsAnyBotOfType, ReturnValue) == 0x000002, "Member 'RBAIBlueprintLibrary_IsAnyBotOfType::ReturnValue' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.KillBot
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_KillBot final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_KillBot) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_KillBot");
static_assert(sizeof(RBAIBlueprintLibrary_KillBot) == 0x000008, "Wrong size on RBAIBlueprintLibrary_KillBot");
static_assert(offsetof(RBAIBlueprintLibrary_KillBot, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_KillBot::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.OverrideBotAnims
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_OverrideBotAnims final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAnimReferences*                      AnimRefsAsset;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_OverrideBotAnims) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_OverrideBotAnims");
static_assert(sizeof(RBAIBlueprintLibrary_OverrideBotAnims) == 0x000010, "Wrong size on RBAIBlueprintLibrary_OverrideBotAnims");
static_assert(offsetof(RBAIBlueprintLibrary_OverrideBotAnims, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_OverrideBotAnims::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_OverrideBotAnims, AnimRefsAsset) == 0x000008, "Member 'RBAIBlueprintLibrary_OverrideBotAnims::AnimRefsAsset' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.PauseBot
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_PauseBot final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_PauseBot) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_PauseBot");
static_assert(sizeof(RBAIBlueprintLibrary_PauseBot) == 0x000008, "Wrong size on RBAIBlueprintLibrary_PauseBot");
static_assert(offsetof(RBAIBlueprintLibrary_PauseBot, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_PauseBot::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.PlayContextualVO
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_PlayContextualVO final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOContext                                    Context;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B06[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_PlayContextualVO) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_PlayContextualVO");
static_assert(sizeof(RBAIBlueprintLibrary_PlayContextualVO) == 0x000010, "Wrong size on RBAIBlueprintLibrary_PlayContextualVO");
static_assert(offsetof(RBAIBlueprintLibrary_PlayContextualVO, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_PlayContextualVO::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayContextualVO, Context) == 0x000008, "Member 'RBAIBlueprintLibrary_PlayContextualVO::Context' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.PlayHitReaction
// 0x0020 (0x0020 - 0x0000)
struct RBAIBlueprintLibrary_PlayHitReaction final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCHitReactionType                           ReactionType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B07[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpactSourceLocation;                              // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayEffects;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B08[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_PlayHitReaction) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_PlayHitReaction");
static_assert(sizeof(RBAIBlueprintLibrary_PlayHitReaction) == 0x000020, "Wrong size on RBAIBlueprintLibrary_PlayHitReaction");
static_assert(offsetof(RBAIBlueprintLibrary_PlayHitReaction, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_PlayHitReaction::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayHitReaction, ReactionType) == 0x000008, "Member 'RBAIBlueprintLibrary_PlayHitReaction::ReactionType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayHitReaction, ImpactSourceLocation) == 0x00000C, "Member 'RBAIBlueprintLibrary_PlayHitReaction::ImpactSourceLocation' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayHitReaction, bPlayEffects) == 0x000018, "Member 'RBAIBlueprintLibrary_PlayHitReaction::bPlayEffects' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.PlayLoopingIdle
// 0x0050 (0x0050 - 0x0000)
struct RBAIBlueprintLibrary_PlayLoopingIdle final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B09[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequence*                          IdleAnim;                                          // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePlayers;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0A[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBAIConditionSet                      SpecificExitConditions;                            // 0x0038(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SpecificExitAnim;                                  // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_PlayLoopingIdle) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_PlayLoopingIdle");
static_assert(sizeof(RBAIBlueprintLibrary_PlayLoopingIdle) == 0x000050, "Wrong size on RBAIBlueprintLibrary_PlayLoopingIdle");
static_assert(offsetof(RBAIBlueprintLibrary_PlayLoopingIdle, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_PlayLoopingIdle::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayLoopingIdle, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_PlayLoopingIdle::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayLoopingIdle, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_PlayLoopingIdle::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayLoopingIdle, IdleAnim) == 0x000028, "Member 'RBAIBlueprintLibrary_PlayLoopingIdle::IdleAnim' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayLoopingIdle, bIgnorePlayers) == 0x000030, "Member 'RBAIBlueprintLibrary_PlayLoopingIdle::bIgnorePlayers' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayLoopingIdle, SpecificExitConditions) == 0x000038, "Member 'RBAIBlueprintLibrary_PlayLoopingIdle::SpecificExitConditions' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayLoopingIdle, SpecificExitAnim) == 0x000048, "Member 'RBAIBlueprintLibrary_PlayLoopingIdle::SpecificExitAnim' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.PlayScriptedVO
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_PlayScriptedVO final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOPriority                                   VOPriority;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_PlayScriptedVO) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_PlayScriptedVO");
static_assert(sizeof(RBAIBlueprintLibrary_PlayScriptedVO) == 0x000018, "Wrong size on RBAIBlueprintLibrary_PlayScriptedVO");
static_assert(offsetof(RBAIBlueprintLibrary_PlayScriptedVO, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_PlayScriptedVO::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayScriptedVO, AudioEvent) == 0x000008, "Member 'RBAIBlueprintLibrary_PlayScriptedVO::AudioEvent' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlayScriptedVO, VOPriority) == 0x000010, "Member 'RBAIBlueprintLibrary_PlayScriptedVO::VOPriority' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.PlaySingleShotAnim
// 0x0030 (0x0030 - 0x0000)
struct RBAIBlueprintLibrary_PlaySingleShotAnim final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSeq;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_PlaySingleShotAnim) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_PlaySingleShotAnim");
static_assert(sizeof(RBAIBlueprintLibrary_PlaySingleShotAnim) == 0x000030, "Wrong size on RBAIBlueprintLibrary_PlaySingleShotAnim");
static_assert(offsetof(RBAIBlueprintLibrary_PlaySingleShotAnim, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_PlaySingleShotAnim::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlaySingleShotAnim, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_PlaySingleShotAnim::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlaySingleShotAnim, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_PlaySingleShotAnim::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_PlaySingleShotAnim, AnimSeq) == 0x000028, "Member 'RBAIBlueprintLibrary_PlaySingleShotAnim::AnimSeq' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.RemoveAdditionalDirectorConfig
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_RemoveAdditionalDirectorConfig final
{
public:
	class URBAIDirectorConfig*                    DirectorConfig;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_RemoveAdditionalDirectorConfig) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_RemoveAdditionalDirectorConfig");
static_assert(sizeof(RBAIBlueprintLibrary_RemoveAdditionalDirectorConfig) == 0x000008, "Wrong size on RBAIBlueprintLibrary_RemoveAdditionalDirectorConfig");
static_assert(offsetof(RBAIBlueprintLibrary_RemoveAdditionalDirectorConfig, DirectorConfig) == 0x000000, "Member 'RBAIBlueprintLibrary_RemoveAdditionalDirectorConfig::DirectorConfig' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.RequestGoto
// 0x0020 (0x0020 - 0x0000)
struct RBAIBlueprintLibrary_RequestGoto final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Destination;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideSpeed;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurnToRotation;                                   // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0D[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceBuffer;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForced;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0E[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_RequestGoto) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_RequestGoto");
static_assert(sizeof(RBAIBlueprintLibrary_RequestGoto) == 0x000020, "Wrong size on RBAIBlueprintLibrary_RequestGoto");
static_assert(offsetof(RBAIBlueprintLibrary_RequestGoto, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_RequestGoto::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestGoto, Destination) == 0x000008, "Member 'RBAIBlueprintLibrary_RequestGoto::Destination' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestGoto, OverrideSpeed) == 0x000010, "Member 'RBAIBlueprintLibrary_RequestGoto::OverrideSpeed' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestGoto, bTurnToRotation) == 0x000014, "Member 'RBAIBlueprintLibrary_RequestGoto::bTurnToRotation' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestGoto, DistanceBuffer) == 0x000018, "Member 'RBAIBlueprintLibrary_RequestGoto::DistanceBuffer' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestGoto, bForced) == 0x00001C, "Member 'RBAIBlueprintLibrary_RequestGoto::bForced' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.RequestGotoAmbientMarker
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_RequestGotoAmbientMarker final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AmbientLocation;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_RequestGotoAmbientMarker) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_RequestGotoAmbientMarker");
static_assert(sizeof(RBAIBlueprintLibrary_RequestGotoAmbientMarker) == 0x000010, "Wrong size on RBAIBlueprintLibrary_RequestGotoAmbientMarker");
static_assert(offsetof(RBAIBlueprintLibrary_RequestGotoAmbientMarker, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_RequestGotoAmbientMarker::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestGotoAmbientMarker, AmbientLocation) == 0x000008, "Member 'RBAIBlueprintLibrary_RequestGotoAmbientMarker::AmbientLocation' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.RequestInvestigate
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_RequestInvestigate final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAware;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_RequestInvestigate) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_RequestInvestigate");
static_assert(sizeof(RBAIBlueprintLibrary_RequestInvestigate) == 0x000010, "Wrong size on RBAIBlueprintLibrary_RequestInvestigate");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigate, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_RequestInvestigate::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigate, bAware) == 0x000008, "Member 'RBAIBlueprintLibrary_RequestInvestigate::bAware' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.RequestInvestigateLocation
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_RequestInvestigateLocation final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InvestigationLoc;                                  // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAware;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueInvestigatingWhenDone;                    // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B10[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_RequestInvestigateLocation) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_RequestInvestigateLocation");
static_assert(sizeof(RBAIBlueprintLibrary_RequestInvestigateLocation) == 0x000018, "Wrong size on RBAIBlueprintLibrary_RequestInvestigateLocation");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigateLocation, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_RequestInvestigateLocation::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigateLocation, InvestigationLoc) == 0x000008, "Member 'RBAIBlueprintLibrary_RequestInvestigateLocation::InvestigationLoc' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigateLocation, bAware) == 0x000014, "Member 'RBAIBlueprintLibrary_RequestInvestigateLocation::bAware' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigateLocation, bContinueInvestigatingWhenDone) == 0x000015, "Member 'RBAIBlueprintLibrary_RequestInvestigateLocation::bContinueInvestigatingWhenDone' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.RequestInvestigatePoint
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_RequestInvestigatePoint final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InvestigationPoint;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAware;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueInvestigatingWhenDone;                    // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B11[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_RequestInvestigatePoint) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_RequestInvestigatePoint");
static_assert(sizeof(RBAIBlueprintLibrary_RequestInvestigatePoint) == 0x000018, "Wrong size on RBAIBlueprintLibrary_RequestInvestigatePoint");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoint, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoint::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoint, InvestigationPoint) == 0x000008, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoint::InvestigationPoint' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoint, bAware) == 0x000010, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoint::bAware' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoint, bContinueInvestigatingWhenDone) == 0x000011, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoint::bContinueInvestigatingWhenDone' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.RequestInvestigatePoints
// 0x0028 (0x0028 - 0x0000)
struct RBAIBlueprintLibrary_RequestInvestigatePoints final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         PointList;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EInvestigationPointSelectionMode              SelectionMode;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAware;                                            // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinueInvestigatingWhenDone;                    // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B12[0x1];                                     // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumberOfPoints;                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlySpecifiedPoints;                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B13[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_RequestInvestigatePoints) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_RequestInvestigatePoints");
static_assert(sizeof(RBAIBlueprintLibrary_RequestInvestigatePoints) == 0x000028, "Wrong size on RBAIBlueprintLibrary_RequestInvestigatePoints");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoints, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoints::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoints, PointList) == 0x000008, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoints::PointList' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoints, SelectionMode) == 0x000018, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoints::SelectionMode' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoints, bAware) == 0x000019, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoints::bAware' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoints, bContinueInvestigatingWhenDone) == 0x00001A, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoints::bContinueInvestigatingWhenDone' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoints, MaxNumberOfPoints) == 0x00001C, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoints::MaxNumberOfPoints' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestInvestigatePoints, bOnlySpecifiedPoints) == 0x000020, "Member 'RBAIBlueprintLibrary_RequestInvestigatePoints::bOnlySpecifiedPoints' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.RequestPatrol
// 0x0028 (0x0028 - 0x0000)
struct RBAIBlueprintLibrary_RequestPatrol final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARBWaypoint*>                    WaypointList;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPatrolWaypointSelectionMode                  Mode;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B14[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideSpeed;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForced;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B15[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_RequestPatrol) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_RequestPatrol");
static_assert(sizeof(RBAIBlueprintLibrary_RequestPatrol) == 0x000028, "Wrong size on RBAIBlueprintLibrary_RequestPatrol");
static_assert(offsetof(RBAIBlueprintLibrary_RequestPatrol, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_RequestPatrol::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestPatrol, WaypointList) == 0x000008, "Member 'RBAIBlueprintLibrary_RequestPatrol::WaypointList' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestPatrol, Mode) == 0x000018, "Member 'RBAIBlueprintLibrary_RequestPatrol::Mode' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestPatrol, OverrideSpeed) == 0x00001C, "Member 'RBAIBlueprintLibrary_RequestPatrol::OverrideSpeed' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_RequestPatrol, bForced) == 0x000020, "Member 'RBAIBlueprintLibrary_RequestPatrol::bForced' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ResetAIConfig
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_ResetAIConfig final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ResetAIConfig) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ResetAIConfig");
static_assert(sizeof(RBAIBlueprintLibrary_ResetAIConfig) == 0x000008, "Wrong size on RBAIBlueprintLibrary_ResetAIConfig");
static_assert(offsetof(RBAIBlueprintLibrary_ResetAIConfig, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ResetAIConfig::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ResumeBot
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_ResumeBot final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_ResumeBot) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ResumeBot");
static_assert(sizeof(RBAIBlueprintLibrary_ResumeBot) == 0x000008, "Wrong size on RBAIBlueprintLibrary_ResumeBot");
static_assert(offsetof(RBAIBlueprintLibrary_ResumeBot, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ResumeBot::bot' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.RetirePouncersInVolumes
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_RetirePouncersInVolumes final
{
public:
	TArray<class AVolume*>                        AllowedVolumes;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_RetirePouncersInVolumes) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_RetirePouncersInVolumes");
static_assert(sizeof(RBAIBlueprintLibrary_RetirePouncersInVolumes) == 0x000010, "Wrong size on RBAIBlueprintLibrary_RetirePouncersInVolumes");
static_assert(offsetof(RBAIBlueprintLibrary_RetirePouncersInVolumes, AllowedVolumes) == 0x000000, "Member 'RBAIBlueprintLibrary_RetirePouncersInVolumes::AllowedVolumes' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SeekRetirement
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_SeekRetirement final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPriorityOverActiveBehaviors;                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B16[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_SeekRetirement) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SeekRetirement");
static_assert(sizeof(RBAIBlueprintLibrary_SeekRetirement) == 0x000010, "Wrong size on RBAIBlueprintLibrary_SeekRetirement");
static_assert(offsetof(RBAIBlueprintLibrary_SeekRetirement, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SeekRetirement::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SeekRetirement, bPriorityOverActiveBehaviors) == 0x000008, "Member 'RBAIBlueprintLibrary_SeekRetirement::bPriorityOverActiveBehaviors' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetAIConfig
// 0x1320 (0x1320 - 0x0000)
struct RBAIBlueprintLibrary_SetAIConfig final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAIConfig*                            ConfigAsset;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URBPartialAIConfig*>             AdditionalConfigs;                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAIConfigData                          ConfigOverrides;                                   // 0x0020(0x12F8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSetAsDefault;                                     // 0x1318(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetAwarenessState;                              // 0x1319(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B17[0x6];                                     // 0x131A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_SetAIConfig) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetAIConfig");
static_assert(sizeof(RBAIBlueprintLibrary_SetAIConfig) == 0x001320, "Wrong size on RBAIBlueprintLibrary_SetAIConfig");
static_assert(offsetof(RBAIBlueprintLibrary_SetAIConfig, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetAIConfig::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetAIConfig, ConfigAsset) == 0x000008, "Member 'RBAIBlueprintLibrary_SetAIConfig::ConfigAsset' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetAIConfig, AdditionalConfigs) == 0x000010, "Member 'RBAIBlueprintLibrary_SetAIConfig::AdditionalConfigs' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetAIConfig, ConfigOverrides) == 0x000020, "Member 'RBAIBlueprintLibrary_SetAIConfig::ConfigOverrides' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetAIConfig, bSetAsDefault) == 0x001318, "Member 'RBAIBlueprintLibrary_SetAIConfig::bSetAsDefault' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetAIConfig, bResetAwarenessState) == 0x001319, "Member 'RBAIBlueprintLibrary_SetAIConfig::bResetAwarenessState' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetAvailableAmbientActivityMarkers
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_SetAvailableAmbientActivityMarkers final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARBAmbientActivityMarker*>       AmbientMarkers;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetAvailableAmbientActivityMarkers) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetAvailableAmbientActivityMarkers");
static_assert(sizeof(RBAIBlueprintLibrary_SetAvailableAmbientActivityMarkers) == 0x000018, "Wrong size on RBAIBlueprintLibrary_SetAvailableAmbientActivityMarkers");
static_assert(offsetof(RBAIBlueprintLibrary_SetAvailableAmbientActivityMarkers, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetAvailableAmbientActivityMarkers::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetAvailableAmbientActivityMarkers, AmbientMarkers) == 0x000008, "Member 'RBAIBlueprintLibrary_SetAvailableAmbientActivityMarkers::AmbientMarkers' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetConditionalAIConfig
// 0x1318 (0x1318 - 0x0000)
struct RBAIBlueprintLibrary_SetConditionalAIConfig final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBAIConditionSet                      ConditionSet;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAIConfigData                          ConfigOverrides;                                   // 0x0018(0x12F8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bStayActivated;                                    // 0x1310(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B18[0x7];                                     // 0x1311(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_SetConditionalAIConfig) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetConditionalAIConfig");
static_assert(sizeof(RBAIBlueprintLibrary_SetConditionalAIConfig) == 0x001318, "Wrong size on RBAIBlueprintLibrary_SetConditionalAIConfig");
static_assert(offsetof(RBAIBlueprintLibrary_SetConditionalAIConfig, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetConditionalAIConfig::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetConditionalAIConfig, ConditionSet) == 0x000008, "Member 'RBAIBlueprintLibrary_SetConditionalAIConfig::ConditionSet' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetConditionalAIConfig, ConfigOverrides) == 0x000018, "Member 'RBAIBlueprintLibrary_SetConditionalAIConfig::ConfigOverrides' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetConditionalAIConfig, bStayActivated) == 0x001310, "Member 'RBAIBlueprintLibrary_SetConditionalAIConfig::bStayActivated' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetFixedAnimPose
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_SetFixedAnimPose final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimToPlay;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B19[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_SetFixedAnimPose) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetFixedAnimPose");
static_assert(sizeof(RBAIBlueprintLibrary_SetFixedAnimPose) == 0x000018, "Wrong size on RBAIBlueprintLibrary_SetFixedAnimPose");
static_assert(offsetof(RBAIBlueprintLibrary_SetFixedAnimPose, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetFixedAnimPose::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetFixedAnimPose, AnimToPlay) == 0x000008, "Member 'RBAIBlueprintLibrary_SetFixedAnimPose::AnimToPlay' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetFixedAnimPose, AnimTime) == 0x000010, "Member 'RBAIBlueprintLibrary_SetFixedAnimPose::AnimTime' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetGuard
// 0x0028 (0x0028 - 0x0000)
struct RBAIBlueprintLibrary_SetGuard final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GuardAnchor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBAIConditionSet                      ExitConditions;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bCanAttack;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1A[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LateralBlockingDistance;                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetGuard) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetGuard");
static_assert(sizeof(RBAIBlueprintLibrary_SetGuard) == 0x000028, "Wrong size on RBAIBlueprintLibrary_SetGuard");
static_assert(offsetof(RBAIBlueprintLibrary_SetGuard, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetGuard::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetGuard, GuardAnchor) == 0x000008, "Member 'RBAIBlueprintLibrary_SetGuard::GuardAnchor' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetGuard, ExitConditions) == 0x000010, "Member 'RBAIBlueprintLibrary_SetGuard::ExitConditions' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetGuard, bCanAttack) == 0x000020, "Member 'RBAIBlueprintLibrary_SetGuard::bCanAttack' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetGuard, LateralBlockingDistance) == 0x000024, "Member 'RBAIBlueprintLibrary_SetGuard::LateralBlockingDistance' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetLeash
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_SetLeash final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLeashMarker*                         LeashMarker;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetLeash) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetLeash");
static_assert(sizeof(RBAIBlueprintLibrary_SetLeash) == 0x000010, "Wrong size on RBAIBlueprintLibrary_SetLeash");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeash, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetLeash::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeash, LeashMarker) == 0x000008, "Member 'RBAIBlueprintLibrary_SetLeash::LeashMarker' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetLeashByVolumeGroups
// 0x0020 (0x0020 - 0x0000)
struct RBAIBlueprintLibrary_SetLeashByVolumeGroups final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ARBVolumeGroup>>  RestrictedVolumeGroups;                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	class AActor*                                 CustomLeashReturnRef;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetLeashByVolumeGroups) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetLeashByVolumeGroups");
static_assert(sizeof(RBAIBlueprintLibrary_SetLeashByVolumeGroups) == 0x000020, "Wrong size on RBAIBlueprintLibrary_SetLeashByVolumeGroups");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashByVolumeGroups, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetLeashByVolumeGroups::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashByVolumeGroups, RestrictedVolumeGroups) == 0x000008, "Member 'RBAIBlueprintLibrary_SetLeashByVolumeGroups::RestrictedVolumeGroups' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashByVolumeGroups, CustomLeashReturnRef) == 0x000018, "Member 'RBAIBlueprintLibrary_SetLeashByVolumeGroups::CustomLeashReturnRef' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetLeashByVolumes
// 0x0020 (0x0020 - 0x0000)
struct RBAIBlueprintLibrary_SetLeashByVolumes final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AVolume*>                        RestrictedVolumes;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 CustomLeashReturnRef;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetLeashByVolumes) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetLeashByVolumes");
static_assert(sizeof(RBAIBlueprintLibrary_SetLeashByVolumes) == 0x000020, "Wrong size on RBAIBlueprintLibrary_SetLeashByVolumes");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashByVolumes, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetLeashByVolumes::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashByVolumes, RestrictedVolumes) == 0x000008, "Member 'RBAIBlueprintLibrary_SetLeashByVolumes::RestrictedVolumes' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashByVolumes, CustomLeashReturnRef) == 0x000018, "Member 'RBAIBlueprintLibrary_SetLeashByVolumes::CustomLeashReturnRef' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetLeashByVolumesSoft
// 0x0020 (0x0020 - 0x0000)
struct RBAIBlueprintLibrary_SetLeashByVolumesSoft final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AVolume>>         RestrictedVolumes;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	class AActor*                                 CustomLeashReturnRef;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetLeashByVolumesSoft) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetLeashByVolumesSoft");
static_assert(sizeof(RBAIBlueprintLibrary_SetLeashByVolumesSoft) == 0x000020, "Wrong size on RBAIBlueprintLibrary_SetLeashByVolumesSoft");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashByVolumesSoft, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetLeashByVolumesSoft::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashByVolumesSoft, RestrictedVolumes) == 0x000008, "Member 'RBAIBlueprintLibrary_SetLeashByVolumesSoft::RestrictedVolumes' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashByVolumesSoft, CustomLeashReturnRef) == 0x000018, "Member 'RBAIBlueprintLibrary_SetLeashByVolumesSoft::CustomLeashReturnRef' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetLeashes
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_SetLeashes final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARBLeashMarker*>                 LeashMarkers;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetLeashes) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetLeashes");
static_assert(sizeof(RBAIBlueprintLibrary_SetLeashes) == 0x000018, "Wrong size on RBAIBlueprintLibrary_SetLeashes");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashes, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetLeashes::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetLeashes, LeashMarkers) == 0x000008, "Member 'RBAIBlueprintLibrary_SetLeashes::LeashMarkers' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetSnipingSplines
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_SetSnipingSplines final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ARBSplineActor*>                 SplineMarkers;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetSnipingSplines) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetSnipingSplines");
static_assert(sizeof(RBAIBlueprintLibrary_SetSnipingSplines) == 0x000018, "Wrong size on RBAIBlueprintLibrary_SetSnipingSplines");
static_assert(offsetof(RBAIBlueprintLibrary_SetSnipingSplines, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetSnipingSplines::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetSnipingSplines, SplineMarkers) == 0x000008, "Member 'RBAIBlueprintLibrary_SetSnipingSplines::SplineMarkers' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetSpecificTarget
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_SetSpecificTarget final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              TargetPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetSpecificTarget) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetSpecificTarget");
static_assert(sizeof(RBAIBlueprintLibrary_SetSpecificTarget) == 0x000010, "Wrong size on RBAIBlueprintLibrary_SetSpecificTarget");
static_assert(offsetof(RBAIBlueprintLibrary_SetSpecificTarget, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetSpecificTarget::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetSpecificTarget, TargetPlayer) == 0x000008, "Member 'RBAIBlueprintLibrary_SetSpecificTarget::TargetPlayer' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetupAIDirector
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_SetupAIDirector final
{
public:
	class URBAIDirectorConfig*                    DirectorConfig;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetupAIDirector) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetupAIDirector");
static_assert(sizeof(RBAIBlueprintLibrary_SetupAIDirector) == 0x000008, "Wrong size on RBAIBlueprintLibrary_SetupAIDirector");
static_assert(offsetof(RBAIBlueprintLibrary_SetupAIDirector, DirectorConfig) == 0x000000, "Member 'RBAIBlueprintLibrary_SetupAIDirector::DirectorConfig' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetupAIDirectorForOpenedSections
// 0x0008 (0x0008 - 0x0000)
struct RBAIBlueprintLibrary_SetupAIDirectorForOpenedSections final
{
public:
	class URBAIDirectorConfig*                    DirectorConfig;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetupAIDirectorForOpenedSections) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetupAIDirectorForOpenedSections");
static_assert(sizeof(RBAIBlueprintLibrary_SetupAIDirectorForOpenedSections) == 0x000008, "Wrong size on RBAIBlueprintLibrary_SetupAIDirectorForOpenedSections");
static_assert(offsetof(RBAIBlueprintLibrary_SetupAIDirectorForOpenedSections, DirectorConfig) == 0x000000, "Member 'RBAIBlueprintLibrary_SetupAIDirectorForOpenedSections::DirectorConfig' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetupAmbush
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_SetupAmbush final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBHidespotComponent*                   Hidespot;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_SetupAmbush) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetupAmbush");
static_assert(sizeof(RBAIBlueprintLibrary_SetupAmbush) == 0x000018, "Wrong size on RBAIBlueprintLibrary_SetupAmbush");
static_assert(offsetof(RBAIBlueprintLibrary_SetupAmbush, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetupAmbush::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetupAmbush, Hidespot) == 0x000008, "Member 'RBAIBlueprintLibrary_SetupAmbush::Hidespot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetupAmbush, bImmediate) == 0x000010, "Member 'RBAIBlueprintLibrary_SetupAmbush::bImmediate' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SetVOMapOverrides
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_SetVOMapOverrides final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBVOMappingOverride*                   VoOverrides;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SetVOMapOverrides) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SetVOMapOverrides");
static_assert(sizeof(RBAIBlueprintLibrary_SetVOMapOverrides) == 0x000010, "Wrong size on RBAIBlueprintLibrary_SetVOMapOverrides");
static_assert(offsetof(RBAIBlueprintLibrary_SetVOMapOverrides, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_SetVOMapOverrides::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SetVOMapOverrides, VoOverrides) == 0x000008, "Member 'RBAIBlueprintLibrary_SetVOMapOverrides::VoOverrides' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SpawnAI
// 0x1350 (0x1350 - 0x0000)
struct RBAIBlueprintLibrary_SpawnAI final
{
public:
	TSubclassOf<class ARBNPC>                     PawnClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAIConfig*                            ConfigAsset;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIConfigData                          ConfigOverrides;                                   // 0x0010(0x12F8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class URBPartialAIConfig*>             AdditionalConfigs;                                 // 0x1308(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URBVOMapping*                           VOMappingOverride;                                 // 0x1318(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnPoint;                                        // 0x1320(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBBot*                                 SpawnedBot;                                        // 0x1328(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBNPC*                                 SpawnedPawn;                                       // 0x1330(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x1338(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SpawnAI) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SpawnAI");
static_assert(sizeof(RBAIBlueprintLibrary_SpawnAI) == 0x001350, "Wrong size on RBAIBlueprintLibrary_SpawnAI");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAI, PawnClass) == 0x000000, "Member 'RBAIBlueprintLibrary_SpawnAI::PawnClass' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAI, ConfigAsset) == 0x000008, "Member 'RBAIBlueprintLibrary_SpawnAI::ConfigAsset' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAI, ConfigOverrides) == 0x000010, "Member 'RBAIBlueprintLibrary_SpawnAI::ConfigOverrides' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAI, AdditionalConfigs) == 0x001308, "Member 'RBAIBlueprintLibrary_SpawnAI::AdditionalConfigs' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAI, VOMappingOverride) == 0x001318, "Member 'RBAIBlueprintLibrary_SpawnAI::VOMappingOverride' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAI, SpawnPoint) == 0x001320, "Member 'RBAIBlueprintLibrary_SpawnAI::SpawnPoint' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAI, SpawnedBot) == 0x001328, "Member 'RBAIBlueprintLibrary_SpawnAI::SpawnedBot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAI, SpawnedPawn) == 0x001330, "Member 'RBAIBlueprintLibrary_SpawnAI::SpawnedPawn' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAI, LatentInfo) == 0x001338, "Member 'RBAIBlueprintLibrary_SpawnAI::LatentInfo' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SpawnAIArchetype
// 0x1348 (0x1348 - 0x0000)
struct RBAIBlueprintLibrary_SpawnAIArchetype final
{
public:
	ENPCType                                      NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCFlavor                                    Flavor;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1C[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIConfigData                          ConfigOverrides;                                   // 0x0004(0x12F8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1D[0x4];                                     // 0x12FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URBPartialAIConfig*>             AdditionalConfigs;                                 // 0x1300(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URBVOMapping*                           VOMappingOverride;                                 // 0x1310(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnPoint;                                        // 0x1318(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBBot*                                 SpawnedBot;                                        // 0x1320(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBNPC*                                 SpawnedPawn;                                       // 0x1328(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x1330(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SpawnAIArchetype) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SpawnAIArchetype");
static_assert(sizeof(RBAIBlueprintLibrary_SpawnAIArchetype) == 0x001348, "Wrong size on RBAIBlueprintLibrary_SpawnAIArchetype");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAIArchetype, NPCType) == 0x000000, "Member 'RBAIBlueprintLibrary_SpawnAIArchetype::NPCType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAIArchetype, Flavor) == 0x000001, "Member 'RBAIBlueprintLibrary_SpawnAIArchetype::Flavor' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAIArchetype, ConfigOverrides) == 0x000004, "Member 'RBAIBlueprintLibrary_SpawnAIArchetype::ConfigOverrides' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAIArchetype, AdditionalConfigs) == 0x001300, "Member 'RBAIBlueprintLibrary_SpawnAIArchetype::AdditionalConfigs' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAIArchetype, VOMappingOverride) == 0x001310, "Member 'RBAIBlueprintLibrary_SpawnAIArchetype::VOMappingOverride' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAIArchetype, SpawnPoint) == 0x001318, "Member 'RBAIBlueprintLibrary_SpawnAIArchetype::SpawnPoint' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAIArchetype, SpawnedBot) == 0x001320, "Member 'RBAIBlueprintLibrary_SpawnAIArchetype::SpawnedBot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAIArchetype, SpawnedPawn) == 0x001328, "Member 'RBAIBlueprintLibrary_SpawnAIArchetype::SpawnedPawn' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAIArchetype, LatentInfo) == 0x001330, "Member 'RBAIBlueprintLibrary_SpawnAIArchetype::LatentInfo' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SpawnAISync
// 0x1338 (0x1338 - 0x0000)
struct RBAIBlueprintLibrary_SpawnAISync final
{
public:
	TSubclassOf<class ARBNPC>                     PawnClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAIConfig*                            ConfigAsset;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIConfigData                          ConfigOverrides;                                   // 0x0010(0x12F8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class URBPartialAIConfig*>             AdditionalConfigs;                                 // 0x1308(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class URBVOMapping*                           VOMappingOverride;                                 // 0x1318(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnPoint;                                        // 0x1320(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBBot*                                 SpawnedBot;                                        // 0x1328(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBNPC*                                 SpawnedPawn;                                       // 0x1330(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SpawnAISync) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SpawnAISync");
static_assert(sizeof(RBAIBlueprintLibrary_SpawnAISync) == 0x001338, "Wrong size on RBAIBlueprintLibrary_SpawnAISync");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAISync, PawnClass) == 0x000000, "Member 'RBAIBlueprintLibrary_SpawnAISync::PawnClass' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAISync, ConfigAsset) == 0x000008, "Member 'RBAIBlueprintLibrary_SpawnAISync::ConfigAsset' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAISync, ConfigOverrides) == 0x000010, "Member 'RBAIBlueprintLibrary_SpawnAISync::ConfigOverrides' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAISync, AdditionalConfigs) == 0x001308, "Member 'RBAIBlueprintLibrary_SpawnAISync::AdditionalConfigs' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAISync, VOMappingOverride) == 0x001318, "Member 'RBAIBlueprintLibrary_SpawnAISync::VOMappingOverride' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAISync, SpawnPoint) == 0x001320, "Member 'RBAIBlueprintLibrary_SpawnAISync::SpawnPoint' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAISync, SpawnedBot) == 0x001328, "Member 'RBAIBlueprintLibrary_SpawnAISync::SpawnedBot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnAISync, SpawnedPawn) == 0x001330, "Member 'RBAIBlueprintLibrary_SpawnAISync::SpawnedPawn' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SpawnPouncer
// 0x0038 (0x0038 - 0x0000)
struct RBAIBlueprintLibrary_SpawnPouncer final
{
public:
	class AActor*                                 Hidespot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAIConfig*                            ConfigOverride;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBBot*                                 SpawnedBot;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBNPC*                                 SpawnedPawn;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SpawnPouncer) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SpawnPouncer");
static_assert(sizeof(RBAIBlueprintLibrary_SpawnPouncer) == 0x000038, "Wrong size on RBAIBlueprintLibrary_SpawnPouncer");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncer, Hidespot) == 0x000000, "Member 'RBAIBlueprintLibrary_SpawnPouncer::Hidespot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncer, ConfigOverride) == 0x000008, "Member 'RBAIBlueprintLibrary_SpawnPouncer::ConfigOverride' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncer, SpawnedBot) == 0x000010, "Member 'RBAIBlueprintLibrary_SpawnPouncer::SpawnedBot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncer, SpawnedPawn) == 0x000018, "Member 'RBAIBlueprintLibrary_SpawnPouncer::SpawnedPawn' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncer, LatentInfo) == 0x000020, "Member 'RBAIBlueprintLibrary_SpawnPouncer::LatentInfo' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.SpawnPouncers
// 0x0038 (0x0038 - 0x0000)
struct RBAIBlueprintLibrary_SpawnPouncers final
{
public:
	TArray<class AVolume*>                        AllowedVolumes;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MinPouncers;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPouncers;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAIConfig*                            ConfigOverride;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_SpawnPouncers) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_SpawnPouncers");
static_assert(sizeof(RBAIBlueprintLibrary_SpawnPouncers) == 0x000038, "Wrong size on RBAIBlueprintLibrary_SpawnPouncers");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncers, AllowedVolumes) == 0x000000, "Member 'RBAIBlueprintLibrary_SpawnPouncers::AllowedVolumes' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncers, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_SpawnPouncers::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncers, MinPouncers) == 0x000028, "Member 'RBAIBlueprintLibrary_SpawnPouncers::MinPouncers' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncers, MaxPouncers) == 0x00002C, "Member 'RBAIBlueprintLibrary_SpawnPouncers::MaxPouncers' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_SpawnPouncers, ConfigOverride) == 0x000030, "Member 'RBAIBlueprintLibrary_SpawnPouncers::ConfigOverride' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.StartPatrol
// 0x0048 (0x0048 - 0x0000)
struct RBAIBlueprintLibrary_StartPatrol final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1E[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class ARBWaypoint*>                    WaypointList;                                      // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPatrolWaypointSelectionMode                  Mode;                                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B1F[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideSpeed;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForced;                                           // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B20[0x7];                                     // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_StartPatrol) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_StartPatrol");
static_assert(sizeof(RBAIBlueprintLibrary_StartPatrol) == 0x000048, "Wrong size on RBAIBlueprintLibrary_StartPatrol");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrol, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_StartPatrol::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrol, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_StartPatrol::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrol, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_StartPatrol::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrol, WaypointList) == 0x000028, "Member 'RBAIBlueprintLibrary_StartPatrol::WaypointList' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrol, Mode) == 0x000038, "Member 'RBAIBlueprintLibrary_StartPatrol::Mode' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrol, OverrideSpeed) == 0x00003C, "Member 'RBAIBlueprintLibrary_StartPatrol::OverrideSpeed' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrol, bForced) == 0x000040, "Member 'RBAIBlueprintLibrary_StartPatrol::bForced' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.StartPatrolInvestigate
// 0x0040 (0x0040 - 0x0000)
struct RBAIBlueprintLibrary_StartPatrolInvestigate final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B21[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AVolume*>                        RestrictedVolumes;                                 // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSetLeashWithVolumes;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B22[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_StartPatrolInvestigate) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_StartPatrolInvestigate");
static_assert(sizeof(RBAIBlueprintLibrary_StartPatrolInvestigate) == 0x000040, "Wrong size on RBAIBlueprintLibrary_StartPatrolInvestigate");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigate, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigate::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigate, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigate::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigate, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigate::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigate, RestrictedVolumes) == 0x000028, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigate::RestrictedVolumes' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigate, bSetLeashWithVolumes) == 0x000038, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigate::bSetLeashWithVolumes' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.StartPatrolInvestigateSoft
// 0x0040 (0x0040 - 0x0000)
struct RBAIBlueprintLibrary_StartPatrolInvestigateSoft final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B23[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class AVolume>>         RestrictedVolumes;                                 // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bSetLeashWithVolumes;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B24[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_StartPatrolInvestigateSoft) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_StartPatrolInvestigateSoft");
static_assert(sizeof(RBAIBlueprintLibrary_StartPatrolInvestigateSoft) == 0x000040, "Wrong size on RBAIBlueprintLibrary_StartPatrolInvestigateSoft");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateSoft, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateSoft::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateSoft, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateSoft::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateSoft, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateSoft::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateSoft, RestrictedVolumes) == 0x000028, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateSoft::RestrictedVolumes' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateSoft, bSetLeashWithVolumes) == 0x000038, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateSoft::bSetLeashWithVolumes' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.StartPatrolInvestigateVolumeGroup
// 0x0040 (0x0040 - 0x0000)
struct RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAICommandResult                              OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B25[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class ARBVolumeGroup>>  RestrictedVolumeGroups;                            // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bSetLeashWithVolumes;                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B26[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup");
static_assert(sizeof(RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup) == 0x000040, "Wrong size on RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup, LatentInfo) == 0x000010, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup, RestrictedVolumeGroups) == 0x000028, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup::RestrictedVolumeGroups' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup, bSetLeashWithVolumes) == 0x000038, "Member 'RBAIBlueprintLibrary_StartPatrolInvestigateVolumeGroup::bSetLeashWithVolumes' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.TestAIConditions
// 0x0020 (0x0020 - 0x0000)
struct RBAIBlueprintLibrary_TestAIConditions final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIBoolCommandResult                          OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B27[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBAIConditionSet                      ConditionSet;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_TestAIConditions) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_TestAIConditions");
static_assert(sizeof(RBAIBlueprintLibrary_TestAIConditions) == 0x000020, "Wrong size on RBAIBlueprintLibrary_TestAIConditions");
static_assert(offsetof(RBAIBlueprintLibrary_TestAIConditions, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_TestAIConditions::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TestAIConditions, OperationResult) == 0x000008, "Member 'RBAIBlueprintLibrary_TestAIConditions::OperationResult' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TestAIConditions, ConditionSet) == 0x000010, "Member 'RBAIBlueprintLibrary_TestAIConditions::ConditionSet' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.TriggerCustomHighPriorityStimulus
// 0x0020 (0x0020 - 0x0000)
struct RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus final
{
public:
	struct FVector                                NoiseLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B28[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Source;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullLoudnessRange;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBotDistance;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus");
static_assert(sizeof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus) == 0x000020, "Wrong size on RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus, NoiseLocation) == 0x000000, "Member 'RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus::NoiseLocation' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus, Source) == 0x000010, "Member 'RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus::Source' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus, FullLoudnessRange) == 0x000018, "Member 'RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus::FullLoudnessRange' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus, MaxBotDistance) == 0x00001C, "Member 'RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulus::MaxBotDistance' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.TriggerCustomHighPriorityStimulusFromPlayer
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullLoudnessRange;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHearingDistance;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer");
static_assert(sizeof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer) == 0x000010, "Wrong size on RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer, Player) == 0x000000, "Member 'RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer::Player' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer, FullLoudnessRange) == 0x000008, "Member 'RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer::FullLoudnessRange' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer, MaxHearingDistance) == 0x00000C, "Member 'RBAIBlueprintLibrary_TriggerCustomHighPriorityStimulusFromPlayer::MaxHearingDistance' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.TriggerDoubleSidedStimulus
// 0x0028 (0x0028 - 0x0000)
struct RBAIBlueprintLibrary_TriggerDoubleSidedStimulus final
{
public:
	ETriggeringStimulusType                       StimulusType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B29[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SourceActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                baseLocation;                                      // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetWS;                                          // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulus) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_TriggerDoubleSidedStimulus");
static_assert(sizeof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulus) == 0x000028, "Wrong size on RBAIBlueprintLibrary_TriggerDoubleSidedStimulus");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulus, StimulusType) == 0x000000, "Member 'RBAIBlueprintLibrary_TriggerDoubleSidedStimulus::StimulusType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulus, SourceActor) == 0x000008, "Member 'RBAIBlueprintLibrary_TriggerDoubleSidedStimulus::SourceActor' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulus, baseLocation) == 0x000010, "Member 'RBAIBlueprintLibrary_TriggerDoubleSidedStimulus::baseLocation' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulus, OffsetWS) == 0x00001C, "Member 'RBAIBlueprintLibrary_TriggerDoubleSidedStimulus::OffsetWS' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.TriggerDoubleSidedStimulusFromPlayer
// 0x0028 (0x0028 - 0x0000)
struct RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer final
{
public:
	ETriggeringStimulusType                       StimulusType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                baseLocation;                                      // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetWS;                                          // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer");
static_assert(sizeof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer) == 0x000028, "Wrong size on RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer, StimulusType) == 0x000000, "Member 'RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer::StimulusType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer, Player) == 0x000008, "Member 'RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer::Player' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer, baseLocation) == 0x000010, "Member 'RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer::baseLocation' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer, OffsetWS) == 0x00001C, "Member 'RBAIBlueprintLibrary_TriggerDoubleSidedStimulusFromPlayer::OffsetWS' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.TriggerStimulus
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_TriggerStimulus final
{
public:
	ETriggeringStimulusType                       StimulusType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_TriggerStimulus) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_TriggerStimulus");
static_assert(sizeof(RBAIBlueprintLibrary_TriggerStimulus) == 0x000018, "Wrong size on RBAIBlueprintLibrary_TriggerStimulus");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerStimulus, StimulusType) == 0x000000, "Member 'RBAIBlueprintLibrary_TriggerStimulus::StimulusType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerStimulus, Location) == 0x000004, "Member 'RBAIBlueprintLibrary_TriggerStimulus::Location' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerStimulus, SourceActor) == 0x000010, "Member 'RBAIBlueprintLibrary_TriggerStimulus::SourceActor' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.TriggerStimulusFromPlayer
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_TriggerStimulusFromPlayer final
{
public:
	ETriggeringStimulusType                       StimulusType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_TriggerStimulusFromPlayer) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_TriggerStimulusFromPlayer");
static_assert(sizeof(RBAIBlueprintLibrary_TriggerStimulusFromPlayer) == 0x000010, "Wrong size on RBAIBlueprintLibrary_TriggerStimulusFromPlayer");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerStimulusFromPlayer, StimulusType) == 0x000000, "Member 'RBAIBlueprintLibrary_TriggerStimulusFromPlayer::StimulusType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TriggerStimulusFromPlayer, Player) == 0x000008, "Member 'RBAIBlueprintLibrary_TriggerStimulusFromPlayer::Player' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.TryPlayAttackType
// 0x0018 (0x0018 - 0x0000)
struct RBAIBlueprintLibrary_TryPlayAttackType final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementSpeed;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_TryPlayAttackType) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_TryPlayAttackType");
static_assert(sizeof(RBAIBlueprintLibrary_TryPlayAttackType) == 0x000018, "Wrong size on RBAIBlueprintLibrary_TryPlayAttackType");
static_assert(offsetof(RBAIBlueprintLibrary_TryPlayAttackType, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_TryPlayAttackType::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TryPlayAttackType, AttackType) == 0x000008, "Member 'RBAIBlueprintLibrary_TryPlayAttackType::AttackType' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TryPlayAttackType, MovementSpeed) == 0x00000C, "Member 'RBAIBlueprintLibrary_TryPlayAttackType::MovementSpeed' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_TryPlayAttackType, TargetActor) == 0x000010, "Member 'RBAIBlueprintLibrary_TryPlayAttackType::TargetActor' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.WaitForAIConditions
// 0x0030 (0x0030 - 0x0000)
struct RBAIBlueprintLibrary_WaitForAIConditions final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRBAIConditionSet                      ConditionSet;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAIBlueprintLibrary_WaitForAIConditions) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_WaitForAIConditions");
static_assert(sizeof(RBAIBlueprintLibrary_WaitForAIConditions) == 0x000030, "Wrong size on RBAIBlueprintLibrary_WaitForAIConditions");
static_assert(offsetof(RBAIBlueprintLibrary_WaitForAIConditions, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_WaitForAIConditions::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_WaitForAIConditions, LatentInfo) == 0x000008, "Member 'RBAIBlueprintLibrary_WaitForAIConditions::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_WaitForAIConditions, ConditionSet) == 0x000020, "Member 'RBAIBlueprintLibrary_WaitForAIConditions::ConditionSet' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.WakeUp
// 0x0010 (0x0010 - 0x0000)
struct RBAIBlueprintLibrary_WakeUp final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScream;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_WakeUp) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_WakeUp");
static_assert(sizeof(RBAIBlueprintLibrary_WakeUp) == 0x000010, "Wrong size on RBAIBlueprintLibrary_WakeUp");
static_assert(offsetof(RBAIBlueprintLibrary_WakeUp, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_WakeUp::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_WakeUp, bScream) == 0x000008, "Member 'RBAIBlueprintLibrary_WakeUp::bScream' has a wrong offset!");

// Function OPP.RBAIBlueprintLibrary.ZoneDefense
// 0x0040 (0x0040 - 0x0000)
struct RBAIBlueprintLibrary_ZoneDefense final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ZonePatrolPoints;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 FallbackLocation;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBZoneDefenseMarker*                   DefensiveSpline;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBAIConditionSet                      ExitConditions;                                    // 0x0028(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bCanAttack;                                        // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2F[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAIBlueprintLibrary_ZoneDefense) == 0x000008, "Wrong alignment on RBAIBlueprintLibrary_ZoneDefense");
static_assert(sizeof(RBAIBlueprintLibrary_ZoneDefense) == 0x000040, "Wrong size on RBAIBlueprintLibrary_ZoneDefense");
static_assert(offsetof(RBAIBlueprintLibrary_ZoneDefense, bot) == 0x000000, "Member 'RBAIBlueprintLibrary_ZoneDefense::bot' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ZoneDefense, ZonePatrolPoints) == 0x000008, "Member 'RBAIBlueprintLibrary_ZoneDefense::ZonePatrolPoints' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ZoneDefense, FallbackLocation) == 0x000018, "Member 'RBAIBlueprintLibrary_ZoneDefense::FallbackLocation' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ZoneDefense, DefensiveSpline) == 0x000020, "Member 'RBAIBlueprintLibrary_ZoneDefense::DefensiveSpline' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ZoneDefense, ExitConditions) == 0x000028, "Member 'RBAIBlueprintLibrary_ZoneDefense::ExitConditions' has a wrong offset!");
static_assert(offsetof(RBAIBlueprintLibrary_ZoneDefense, bCanAttack) == 0x000038, "Member 'RBAIBlueprintLibrary_ZoneDefense::bCanAttack' has a wrong offset!");

// Function OPP.RBProjectionCodeCoordinator.OnInteractibleAddedToWorld
// 0x0008 (0x0008 - 0x0000)
struct RBProjectionCodeCoordinator_OnInteractibleAddedToWorld final
{
public:
	class ARBInteractible*                        Interactible;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProjectionCodeCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong alignment on RBProjectionCodeCoordinator_OnInteractibleAddedToWorld");
static_assert(sizeof(RBProjectionCodeCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong size on RBProjectionCodeCoordinator_OnInteractibleAddedToWorld");
static_assert(offsetof(RBProjectionCodeCoordinator_OnInteractibleAddedToWorld, Interactible) == 0x000000, "Member 'RBProjectionCodeCoordinator_OnInteractibleAddedToWorld::Interactible' has a wrong offset!");

// Function OPP.RBProjectionCodeCoordinator.OnLargeObjectInteractionDoAction
// 0x0018 (0x0018 - 0x0000)
struct RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction final
{
public:
	class URBLargeObjectInteractionPanelComponent* LargeObjectPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Interactor;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction) == 0x000008, "Wrong alignment on RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction");
static_assert(sizeof(RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction) == 0x000018, "Wrong size on RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction");
static_assert(offsetof(RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction, LargeObjectPanel) == 0x000000, "Member 'RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction::LargeObjectPanel' has a wrong offset!");
static_assert(offsetof(RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction, LargePickup) == 0x000008, "Member 'RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction::LargePickup' has a wrong offset!");
static_assert(offsetof(RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction, Interactor) == 0x000010, "Member 'RBProjectionCodeCoordinator_OnLargeObjectInteractionDoAction::Interactor' has a wrong offset!");

// Function OPP.RBProjectionCodeCoordinator.OnLargePickupUsed_Server
// 0x0008 (0x0008 - 0x0000)
struct RBProjectionCodeCoordinator_OnLargePickupUsed_Server final
{
public:
	class ARBLargePickup*                         Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProjectionCodeCoordinator_OnLargePickupUsed_Server) == 0x000008, "Wrong alignment on RBProjectionCodeCoordinator_OnLargePickupUsed_Server");
static_assert(sizeof(RBProjectionCodeCoordinator_OnLargePickupUsed_Server) == 0x000008, "Wrong size on RBProjectionCodeCoordinator_OnLargePickupUsed_Server");
static_assert(offsetof(RBProjectionCodeCoordinator_OnLargePickupUsed_Server, Pickup) == 0x000000, "Member 'RBProjectionCodeCoordinator_OnLargePickupUsed_Server::Pickup' has a wrong offset!");

// Function OPP.RBProjectionCodeCoordinator.OnLargePickupUsedOnObject
// 0x0018 (0x0018 - 0x0000)
struct RBProjectionCodeCoordinator_OnLargePickupUsedOnObject final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBLargeObjectInteractionPanelComponent* Interactible;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProjectionCodeCoordinator_OnLargePickupUsedOnObject) == 0x000008, "Wrong alignment on RBProjectionCodeCoordinator_OnLargePickupUsedOnObject");
static_assert(sizeof(RBProjectionCodeCoordinator_OnLargePickupUsedOnObject) == 0x000018, "Wrong size on RBProjectionCodeCoordinator_OnLargePickupUsedOnObject");
static_assert(offsetof(RBProjectionCodeCoordinator_OnLargePickupUsedOnObject, Interactor) == 0x000000, "Member 'RBProjectionCodeCoordinator_OnLargePickupUsedOnObject::Interactor' has a wrong offset!");
static_assert(offsetof(RBProjectionCodeCoordinator_OnLargePickupUsedOnObject, LargePickup) == 0x000008, "Member 'RBProjectionCodeCoordinator_OnLargePickupUsedOnObject::LargePickup' has a wrong offset!");
static_assert(offsetof(RBProjectionCodeCoordinator_OnLargePickupUsedOnObject, Interactible) == 0x000010, "Member 'RBProjectionCodeCoordinator_OnLargePickupUsedOnObject::Interactible' has a wrong offset!");

// Function OPP.RBProjectionCodeCoordinator.OnPickupHolderChanged
// 0x0010 (0x0010 - 0x0000)
struct RBProjectionCodeCoordinator_OnPickupHolderChanged final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProjectionCodeCoordinator_OnPickupHolderChanged) == 0x000008, "Wrong alignment on RBProjectionCodeCoordinator_OnPickupHolderChanged");
static_assert(sizeof(RBProjectionCodeCoordinator_OnPickupHolderChanged) == 0x000010, "Wrong size on RBProjectionCodeCoordinator_OnPickupHolderChanged");
static_assert(offsetof(RBProjectionCodeCoordinator_OnPickupHolderChanged, Player) == 0x000000, "Member 'RBProjectionCodeCoordinator_OnPickupHolderChanged::Player' has a wrong offset!");
static_assert(offsetof(RBProjectionCodeCoordinator_OnPickupHolderChanged, LargePickup) == 0x000008, "Member 'RBProjectionCodeCoordinator_OnPickupHolderChanged::LargePickup' has a wrong offset!");

// Function OPP.RBGameStateBase.Multicast_FunctionalTestLog
// 0x0018 (0x0018 - 0x0000)
struct RBGameStateBase_Multicast_FunctionalTestLog final
{
public:
	class FString                                 ServerMsg;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FailTest;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B38[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameStateBase_Multicast_FunctionalTestLog) == 0x000008, "Wrong alignment on RBGameStateBase_Multicast_FunctionalTestLog");
static_assert(sizeof(RBGameStateBase_Multicast_FunctionalTestLog) == 0x000018, "Wrong size on RBGameStateBase_Multicast_FunctionalTestLog");
static_assert(offsetof(RBGameStateBase_Multicast_FunctionalTestLog, ServerMsg) == 0x000000, "Member 'RBGameStateBase_Multicast_FunctionalTestLog::ServerMsg' has a wrong offset!");
static_assert(offsetof(RBGameStateBase_Multicast_FunctionalTestLog, FailTest) == 0x000010, "Member 'RBGameStateBase_Multicast_FunctionalTestLog::FailTest' has a wrong offset!");

// Function OPP.RBGameStateBase.Multicast_OnPlayerRevived
// 0x0010 (0x0010 - 0x0000)
struct RBGameStateBase_Multicast_OnPlayerRevived final
{
public:
	class ARBPlayer*                              InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              SubjectActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateBase_Multicast_OnPlayerRevived) == 0x000008, "Wrong alignment on RBGameStateBase_Multicast_OnPlayerRevived");
static_assert(sizeof(RBGameStateBase_Multicast_OnPlayerRevived) == 0x000010, "Wrong size on RBGameStateBase_Multicast_OnPlayerRevived");
static_assert(offsetof(RBGameStateBase_Multicast_OnPlayerRevived, InstigatorActor) == 0x000000, "Member 'RBGameStateBase_Multicast_OnPlayerRevived::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBGameStateBase_Multicast_OnPlayerRevived, SubjectActor) == 0x000008, "Member 'RBGameStateBase_Multicast_OnPlayerRevived::SubjectActor' has a wrong offset!");

// Function OPP.RBGameStateBase.Multicast_PlayMurkoffAnnouncement
// 0x0020 (0x0020 - 0x0000)
struct RBGameStateBase_Multicast_PlayMurkoffAnnouncement final
{
public:
	TArray<struct FRBMurkoffAnnouncentAudioData>  MurkoffAnnouncementAudioDatas;                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMurkoffAnnouncentAudioData          StopAudioData;                                     // 0x0010(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateBase_Multicast_PlayMurkoffAnnouncement) == 0x000008, "Wrong alignment on RBGameStateBase_Multicast_PlayMurkoffAnnouncement");
static_assert(sizeof(RBGameStateBase_Multicast_PlayMurkoffAnnouncement) == 0x000020, "Wrong size on RBGameStateBase_Multicast_PlayMurkoffAnnouncement");
static_assert(offsetof(RBGameStateBase_Multicast_PlayMurkoffAnnouncement, MurkoffAnnouncementAudioDatas) == 0x000000, "Member 'RBGameStateBase_Multicast_PlayMurkoffAnnouncement::MurkoffAnnouncementAudioDatas' has a wrong offset!");
static_assert(offsetof(RBGameStateBase_Multicast_PlayMurkoffAnnouncement, StopAudioData) == 0x000010, "Member 'RBGameStateBase_Multicast_PlayMurkoffAnnouncement::StopAudioData' has a wrong offset!");

// Function OPP.RBGameStateBase.BP_GetGameModePersistentData
// 0x0008 (0x0008 - 0x0000)
struct RBGameStateBase_BP_GetGameModePersistentData final
{
public:
	class URBGameModePersistentData*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateBase_BP_GetGameModePersistentData) == 0x000008, "Wrong alignment on RBGameStateBase_BP_GetGameModePersistentData");
static_assert(sizeof(RBGameStateBase_BP_GetGameModePersistentData) == 0x000008, "Wrong size on RBGameStateBase_BP_GetGameModePersistentData");
static_assert(offsetof(RBGameStateBase_BP_GetGameModePersistentData, ReturnValue) == 0x000000, "Member 'RBGameStateBase_BP_GetGameModePersistentData::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStateBase.GetGameSessionRegion
// 0x0010 (0x0010 - 0x0000)
struct RBGameStateBase_GetGameSessionRegion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateBase_GetGameSessionRegion) == 0x000008, "Wrong alignment on RBGameStateBase_GetGameSessionRegion");
static_assert(sizeof(RBGameStateBase_GetGameSessionRegion) == 0x000010, "Wrong size on RBGameStateBase_GetGameSessionRegion");
static_assert(offsetof(RBGameStateBase_GetGameSessionRegion, ReturnValue) == 0x000000, "Member 'RBGameStateBase_GetGameSessionRegion::ReturnValue' has a wrong offset!");

// Function OPP.RBRespawnLimiterZone.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBRespawnLimiterZone_SetEnabled final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRespawnLimiterZone_SetEnabled) == 0x000001, "Wrong alignment on RBRespawnLimiterZone_SetEnabled");
static_assert(sizeof(RBRespawnLimiterZone_SetEnabled) == 0x000001, "Wrong size on RBRespawnLimiterZone_SetEnabled");
static_assert(offsetof(RBRespawnLimiterZone_SetEnabled, bValue) == 0x000000, "Member 'RBRespawnLimiterZone_SetEnabled::bValue' has a wrong offset!");

// Function OPP.RBRespawnLimiterZone.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBRespawnLimiterZone_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRespawnLimiterZone_IsEnabled) == 0x000001, "Wrong alignment on RBRespawnLimiterZone_IsEnabled");
static_assert(sizeof(RBRespawnLimiterZone_IsEnabled) == 0x000001, "Wrong size on RBRespawnLimiterZone_IsEnabled");
static_assert(offsetof(RBRespawnLimiterZone_IsEnabled, ReturnValue) == 0x000000, "Member 'RBRespawnLimiterZone_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractionZoneComponent.AddCompletedObjectiveRequirement
// 0x0020 (0x0020 - 0x0000)
struct RBInteractionZoneComponent_AddCompletedObjectiveRequirement final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RequirementText;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractionZoneComponent_AddCompletedObjectiveRequirement) == 0x000008, "Wrong alignment on RBInteractionZoneComponent_AddCompletedObjectiveRequirement");
static_assert(sizeof(RBInteractionZoneComponent_AddCompletedObjectiveRequirement) == 0x000020, "Wrong size on RBInteractionZoneComponent_AddCompletedObjectiveRequirement");
static_assert(offsetof(RBInteractionZoneComponent_AddCompletedObjectiveRequirement, Coordinator) == 0x000000, "Member 'RBInteractionZoneComponent_AddCompletedObjectiveRequirement::Coordinator' has a wrong offset!");
static_assert(offsetof(RBInteractionZoneComponent_AddCompletedObjectiveRequirement, RequirementText) == 0x000008, "Member 'RBInteractionZoneComponent_AddCompletedObjectiveRequirement::RequirementText' has a wrong offset!");

// Function OPP.RBInteractionZoneComponent.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBInteractionZoneComponent_BP_SetEnabled final
{
public:
	bool                                          bInteractible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractionZoneComponent_BP_SetEnabled) == 0x000001, "Wrong alignment on RBInteractionZoneComponent_BP_SetEnabled");
static_assert(sizeof(RBInteractionZoneComponent_BP_SetEnabled) == 0x000001, "Wrong size on RBInteractionZoneComponent_BP_SetEnabled");
static_assert(offsetof(RBInteractionZoneComponent_BP_SetEnabled, bInteractible) == 0x000000, "Member 'RBInteractionZoneComponent_BP_SetEnabled::bInteractible' has a wrong offset!");

// Function OPP.RBInteractionZoneComponent.GetInteractableSafe
// 0x0008 (0x0008 - 0x0000)
struct RBInteractionZoneComponent_GetInteractableSafe final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractionZoneComponent_GetInteractableSafe) == 0x000008, "Wrong alignment on RBInteractionZoneComponent_GetInteractableSafe");
static_assert(sizeof(RBInteractionZoneComponent_GetInteractableSafe) == 0x000008, "Wrong size on RBInteractionZoneComponent_GetInteractableSafe");
static_assert(offsetof(RBInteractionZoneComponent_GetInteractableSafe, ReturnValue) == 0x000000, "Member 'RBInteractionZoneComponent_GetInteractableSafe::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractionZoneComponent.NotifySpecialMoveCompleted
// 0x0010 (0x0010 - 0x0000)
struct RBInteractionZoneComponent_NotifySpecialMoveCompleted final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  CompletedMove;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B45[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractionZoneComponent_NotifySpecialMoveCompleted) == 0x000008, "Wrong alignment on RBInteractionZoneComponent_NotifySpecialMoveCompleted");
static_assert(sizeof(RBInteractionZoneComponent_NotifySpecialMoveCompleted) == 0x000010, "Wrong size on RBInteractionZoneComponent_NotifySpecialMoveCompleted");
static_assert(offsetof(RBInteractionZoneComponent_NotifySpecialMoveCompleted, Pawn) == 0x000000, "Member 'RBInteractionZoneComponent_NotifySpecialMoveCompleted::Pawn' has a wrong offset!");
static_assert(offsetof(RBInteractionZoneComponent_NotifySpecialMoveCompleted, CompletedMove) == 0x000008, "Member 'RBInteractionZoneComponent_NotifySpecialMoveCompleted::CompletedMove' has a wrong offset!");
static_assert(offsetof(RBInteractionZoneComponent_NotifySpecialMoveCompleted, bInterrupted) == 0x000009, "Member 'RBInteractionZoneComponent_NotifySpecialMoveCompleted::bInterrupted' has a wrong offset!");

// Function OPP.RBInteractionZoneComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBInteractionZoneComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractionZoneComponent_IsEnabled) == 0x000001, "Wrong alignment on RBInteractionZoneComponent_IsEnabled");
static_assert(sizeof(RBInteractionZoneComponent_IsEnabled) == 0x000001, "Wrong size on RBInteractionZoneComponent_IsEnabled");
static_assert(offsetof(RBInteractionZoneComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'RBInteractionZoneComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractionZoneComponent.MeetRequirements
// 0x0010 (0x0010 - 0x0000)
struct RBInteractionZoneComponent_MeetRequirements final
{
public:
	const class ARBPlayer*                        Interactor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B46[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractionZoneComponent_MeetRequirements) == 0x000008, "Wrong alignment on RBInteractionZoneComponent_MeetRequirements");
static_assert(sizeof(RBInteractionZoneComponent_MeetRequirements) == 0x000010, "Wrong size on RBInteractionZoneComponent_MeetRequirements");
static_assert(offsetof(RBInteractionZoneComponent_MeetRequirements, Interactor) == 0x000000, "Member 'RBInteractionZoneComponent_MeetRequirements::Interactor' has a wrong offset!");
static_assert(offsetof(RBInteractionZoneComponent_MeetRequirements, ReturnValue) == 0x000008, "Member 'RBInteractionZoneComponent_MeetRequirements::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.BP_OnPawnInteractingChanged
// 0x0008 (0x0008 - 0x0000)
struct RBInteractiblePanelComponent_BP_OnPawnInteractingChanged final
{
public:
	class ARBPawn*                                NewPawnInteracting;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractiblePanelComponent_BP_OnPawnInteractingChanged) == 0x000008, "Wrong alignment on RBInteractiblePanelComponent_BP_OnPawnInteractingChanged");
static_assert(sizeof(RBInteractiblePanelComponent_BP_OnPawnInteractingChanged) == 0x000008, "Wrong size on RBInteractiblePanelComponent_BP_OnPawnInteractingChanged");
static_assert(offsetof(RBInteractiblePanelComponent_BP_OnPawnInteractingChanged, NewPawnInteracting) == 0x000000, "Member 'RBInteractiblePanelComponent_BP_OnPawnInteractingChanged::NewPawnInteracting' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.NotifyInteractorReady_Server
// 0x0008 (0x0008 - 0x0000)
struct RBInteractiblePanelComponent_NotifyInteractorReady_Server final
{
public:
	class ARBPlayer*                              Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractiblePanelComponent_NotifyInteractorReady_Server) == 0x000008, "Wrong alignment on RBInteractiblePanelComponent_NotifyInteractorReady_Server");
static_assert(sizeof(RBInteractiblePanelComponent_NotifyInteractorReady_Server) == 0x000008, "Wrong size on RBInteractiblePanelComponent_NotifyInteractorReady_Server");
static_assert(offsetof(RBInteractiblePanelComponent_NotifyInteractorReady_Server, Interactor) == 0x000000, "Member 'RBInteractiblePanelComponent_NotifyInteractorReady_Server::Interactor' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.OnPawnInteractingChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBInteractiblePanelComponent_OnPawnInteractingChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractiblePanelComponent_OnPawnInteractingChangedCallback) == 0x000001, "Wrong alignment on RBInteractiblePanelComponent_OnPawnInteractingChangedCallback");
static_assert(sizeof(RBInteractiblePanelComponent_OnPawnInteractingChangedCallback) == 0x000001, "Wrong size on RBInteractiblePanelComponent_OnPawnInteractingChangedCallback");
static_assert(offsetof(RBInteractiblePanelComponent_OnPawnInteractingChangedCallback, ChangedType) == 0x000000, "Member 'RBInteractiblePanelComponent_OnPawnInteractingChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.SetPanelInUse_Server
// 0x0001 (0x0001 - 0x0000)
struct RBInteractiblePanelComponent_SetPanelInUse_Server final
{
public:
	bool                                          bInPanelInUse;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractiblePanelComponent_SetPanelInUse_Server) == 0x000001, "Wrong alignment on RBInteractiblePanelComponent_SetPanelInUse_Server");
static_assert(sizeof(RBInteractiblePanelComponent_SetPanelInUse_Server) == 0x000001, "Wrong size on RBInteractiblePanelComponent_SetPanelInUse_Server");
static_assert(offsetof(RBInteractiblePanelComponent_SetPanelInUse_Server, bInPanelInUse) == 0x000000, "Member 'RBInteractiblePanelComponent_SetPanelInUse_Server::bInPanelInUse' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.TryNotifyInteractorReady
// 0x0008 (0x0008 - 0x0000)
struct RBInteractiblePanelComponent_TryNotifyInteractorReady final
{
public:
	class ARBPlayer*                              Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractiblePanelComponent_TryNotifyInteractorReady) == 0x000008, "Wrong alignment on RBInteractiblePanelComponent_TryNotifyInteractorReady");
static_assert(sizeof(RBInteractiblePanelComponent_TryNotifyInteractorReady) == 0x000008, "Wrong size on RBInteractiblePanelComponent_TryNotifyInteractorReady");
static_assert(offsetof(RBInteractiblePanelComponent_TryNotifyInteractorReady, Interactor) == 0x000000, "Member 'RBInteractiblePanelComponent_TryNotifyInteractorReady::Interactor' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.GetInteractionProgressRatio
// 0x0010 (0x0010 - 0x0000)
struct RBInteractiblePanelComponent_GetInteractionProgressRatio final
{
public:
	const class ARBPlayer*                        Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4E[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractiblePanelComponent_GetInteractionProgressRatio) == 0x000008, "Wrong alignment on RBInteractiblePanelComponent_GetInteractionProgressRatio");
static_assert(sizeof(RBInteractiblePanelComponent_GetInteractionProgressRatio) == 0x000010, "Wrong size on RBInteractiblePanelComponent_GetInteractionProgressRatio");
static_assert(offsetof(RBInteractiblePanelComponent_GetInteractionProgressRatio, Player) == 0x000000, "Member 'RBInteractiblePanelComponent_GetInteractionProgressRatio::Player' has a wrong offset!");
static_assert(offsetof(RBInteractiblePanelComponent_GetInteractionProgressRatio, ReturnValue) == 0x000008, "Member 'RBInteractiblePanelComponent_GetInteractionProgressRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.GetPawnInteracting
// 0x0008 (0x0008 - 0x0000)
struct RBInteractiblePanelComponent_GetPawnInteracting final
{
public:
	class ARBPawn*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractiblePanelComponent_GetPawnInteracting) == 0x000008, "Wrong alignment on RBInteractiblePanelComponent_GetPawnInteracting");
static_assert(sizeof(RBInteractiblePanelComponent_GetPawnInteracting) == 0x000008, "Wrong size on RBInteractiblePanelComponent_GetPawnInteracting");
static_assert(offsetof(RBInteractiblePanelComponent_GetPawnInteracting, ReturnValue) == 0x000000, "Member 'RBInteractiblePanelComponent_GetPawnInteracting::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.GetPlayerInteracting
// 0x0008 (0x0008 - 0x0000)
struct RBInteractiblePanelComponent_GetPlayerInteracting final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractiblePanelComponent_GetPlayerInteracting) == 0x000008, "Wrong alignment on RBInteractiblePanelComponent_GetPlayerInteracting");
static_assert(sizeof(RBInteractiblePanelComponent_GetPlayerInteracting) == 0x000008, "Wrong size on RBInteractiblePanelComponent_GetPlayerInteracting");
static_assert(offsetof(RBInteractiblePanelComponent_GetPlayerInteracting, ReturnValue) == 0x000000, "Member 'RBInteractiblePanelComponent_GetPlayerInteracting::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.IsPanelActive
// 0x0001 (0x0001 - 0x0000)
struct RBInteractiblePanelComponent_IsPanelActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractiblePanelComponent_IsPanelActive) == 0x000001, "Wrong alignment on RBInteractiblePanelComponent_IsPanelActive");
static_assert(sizeof(RBInteractiblePanelComponent_IsPanelActive) == 0x000001, "Wrong size on RBInteractiblePanelComponent_IsPanelActive");
static_assert(offsetof(RBInteractiblePanelComponent_IsPanelActive, ReturnValue) == 0x000000, "Member 'RBInteractiblePanelComponent_IsPanelActive::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractiblePanelComponent.ShouldBPTick
// 0x0001 (0x0001 - 0x0000)
struct RBInteractiblePanelComponent_ShouldBPTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractiblePanelComponent_ShouldBPTick) == 0x000001, "Wrong alignment on RBInteractiblePanelComponent_ShouldBPTick");
static_assert(sizeof(RBInteractiblePanelComponent_ShouldBPTick) == 0x000001, "Wrong size on RBInteractiblePanelComponent_ShouldBPTick");
static_assert(offsetof(RBInteractiblePanelComponent_ShouldBPTick, ReturnValue) == 0x000000, "Member 'RBInteractiblePanelComponent_ShouldBPTick::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.Event_OnInputEvent
// 0x0018 (0x0018 - 0x0000)
struct RBZoneTimingPanelComponent_Event_OnInputEvent final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimingInputResultType                        Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B56[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBZoneTimingPanelComponent_Event_OnInputEvent) == 0x000008, "Wrong alignment on RBZoneTimingPanelComponent_Event_OnInputEvent");
static_assert(sizeof(RBZoneTimingPanelComponent_Event_OnInputEvent) == 0x000018, "Wrong size on RBZoneTimingPanelComponent_Event_OnInputEvent");
static_assert(offsetof(RBZoneTimingPanelComponent_Event_OnInputEvent, Player) == 0x000000, "Member 'RBZoneTimingPanelComponent_Event_OnInputEvent::Player' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_Event_OnInputEvent, TargetIndex) == 0x000008, "Member 'RBZoneTimingPanelComponent_Event_OnInputEvent::TargetIndex' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_Event_OnInputEvent, Timestamp) == 0x00000C, "Member 'RBZoneTimingPanelComponent_Event_OnInputEvent::Timestamp' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_Event_OnInputEvent, Result) == 0x000010, "Member 'RBZoneTimingPanelComponent_Event_OnInputEvent::Result' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.Multicast_OnPanelInput
// 0x0018 (0x0018 - 0x0000)
struct RBZoneTimingPanelComponent_Multicast_OnPanelInput final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeedleRatio;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PawnTimestamp;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimingInputResultType                        Result;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B57[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBZoneTimingPanelComponent_Multicast_OnPanelInput) == 0x000008, "Wrong alignment on RBZoneTimingPanelComponent_Multicast_OnPanelInput");
static_assert(sizeof(RBZoneTimingPanelComponent_Multicast_OnPanelInput) == 0x000018, "Wrong size on RBZoneTimingPanelComponent_Multicast_OnPanelInput");
static_assert(offsetof(RBZoneTimingPanelComponent_Multicast_OnPanelInput, Player) == 0x000000, "Member 'RBZoneTimingPanelComponent_Multicast_OnPanelInput::Player' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_Multicast_OnPanelInput, NeedleRatio) == 0x000008, "Member 'RBZoneTimingPanelComponent_Multicast_OnPanelInput::NeedleRatio' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_Multicast_OnPanelInput, PawnTimestamp) == 0x00000C, "Member 'RBZoneTimingPanelComponent_Multicast_OnPanelInput::PawnTimestamp' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_Multicast_OnPanelInput, Result) == 0x000010, "Member 'RBZoneTimingPanelComponent_Multicast_OnPanelInput::Result' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.Multicast_OnPanelSucceeded
// 0x0008 (0x0008 - 0x0000)
struct RBZoneTimingPanelComponent_Multicast_OnPanelSucceeded final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneTimingPanelComponent_Multicast_OnPanelSucceeded) == 0x000008, "Wrong alignment on RBZoneTimingPanelComponent_Multicast_OnPanelSucceeded");
static_assert(sizeof(RBZoneTimingPanelComponent_Multicast_OnPanelSucceeded) == 0x000008, "Wrong size on RBZoneTimingPanelComponent_Multicast_OnPanelSucceeded");
static_assert(offsetof(RBZoneTimingPanelComponent_Multicast_OnPanelSucceeded, Pawn) == 0x000000, "Member 'RBZoneTimingPanelComponent_Multicast_OnPanelSucceeded::Pawn' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.OnNeedleResetInitialRatioChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBZoneTimingPanelComponent_OnNeedleResetInitialRatioChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneTimingPanelComponent_OnNeedleResetInitialRatioChangedCallback) == 0x000001, "Wrong alignment on RBZoneTimingPanelComponent_OnNeedleResetInitialRatioChangedCallback");
static_assert(sizeof(RBZoneTimingPanelComponent_OnNeedleResetInitialRatioChangedCallback) == 0x000001, "Wrong size on RBZoneTimingPanelComponent_OnNeedleResetInitialRatioChangedCallback");
static_assert(offsetof(RBZoneTimingPanelComponent_OnNeedleResetInitialRatioChangedCallback, ChangedType) == 0x000000, "Member 'RBZoneTimingPanelComponent_OnNeedleResetInitialRatioChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.OnNeedleResetTimeStampChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBZoneTimingPanelComponent_OnNeedleResetTimeStampChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneTimingPanelComponent_OnNeedleResetTimeStampChangedCallback) == 0x000001, "Wrong alignment on RBZoneTimingPanelComponent_OnNeedleResetTimeStampChangedCallback");
static_assert(sizeof(RBZoneTimingPanelComponent_OnNeedleResetTimeStampChangedCallback) == 0x000001, "Wrong size on RBZoneTimingPanelComponent_OnNeedleResetTimeStampChangedCallback");
static_assert(offsetof(RBZoneTimingPanelComponent_OnNeedleResetTimeStampChangedCallback, ChangedType) == 0x000000, "Member 'RBZoneTimingPanelComponent_OnNeedleResetTimeStampChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.BP_GetTimingInputResult
// 0x0001 (0x0001 - 0x0000)
struct RBZoneTimingPanelComponent_BP_GetTimingInputResult final
{
public:
	ETimingInputResultType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneTimingPanelComponent_BP_GetTimingInputResult) == 0x000001, "Wrong alignment on RBZoneTimingPanelComponent_BP_GetTimingInputResult");
static_assert(sizeof(RBZoneTimingPanelComponent_BP_GetTimingInputResult) == 0x000001, "Wrong size on RBZoneTimingPanelComponent_BP_GetTimingInputResult");
static_assert(offsetof(RBZoneTimingPanelComponent_BP_GetTimingInputResult, ReturnValue) == 0x000000, "Member 'RBZoneTimingPanelComponent_BP_GetTimingInputResult::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.GetCurrentNeedlePosition
// 0x0004 (0x0004 - 0x0000)
struct RBZoneTimingPanelComponent_GetCurrentNeedlePosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneTimingPanelComponent_GetCurrentNeedlePosition) == 0x000004, "Wrong alignment on RBZoneTimingPanelComponent_GetCurrentNeedlePosition");
static_assert(sizeof(RBZoneTimingPanelComponent_GetCurrentNeedlePosition) == 0x000004, "Wrong size on RBZoneTimingPanelComponent_GetCurrentNeedlePosition");
static_assert(offsetof(RBZoneTimingPanelComponent_GetCurrentNeedlePosition, ReturnValue) == 0x000000, "Member 'RBZoneTimingPanelComponent_GetCurrentNeedlePosition::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.GetMeterRatio
// 0x0004 (0x0004 - 0x0000)
struct RBZoneTimingPanelComponent_GetMeterRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneTimingPanelComponent_GetMeterRatio) == 0x000004, "Wrong alignment on RBZoneTimingPanelComponent_GetMeterRatio");
static_assert(sizeof(RBZoneTimingPanelComponent_GetMeterRatio) == 0x000004, "Wrong size on RBZoneTimingPanelComponent_GetMeterRatio");
static_assert(offsetof(RBZoneTimingPanelComponent_GetMeterRatio, ReturnValue) == 0x000000, "Member 'RBZoneTimingPanelComponent_GetMeterRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.GetNeedlePosition
// 0x0008 (0x0008 - 0x0000)
struct RBZoneTimingPanelComponent_GetNeedlePosition final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneTimingPanelComponent_GetNeedlePosition) == 0x000004, "Wrong alignment on RBZoneTimingPanelComponent_GetNeedlePosition");
static_assert(sizeof(RBZoneTimingPanelComponent_GetNeedlePosition) == 0x000008, "Wrong size on RBZoneTimingPanelComponent_GetNeedlePosition");
static_assert(offsetof(RBZoneTimingPanelComponent_GetNeedlePosition, Timestamp) == 0x000000, "Member 'RBZoneTimingPanelComponent_GetNeedlePosition::Timestamp' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_GetNeedlePosition, ReturnValue) == 0x000004, "Member 'RBZoneTimingPanelComponent_GetNeedlePosition::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.GetNeedleSpeed
// 0x0004 (0x0004 - 0x0000)
struct RBZoneTimingPanelComponent_GetNeedleSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneTimingPanelComponent_GetNeedleSpeed) == 0x000004, "Wrong alignment on RBZoneTimingPanelComponent_GetNeedleSpeed");
static_assert(sizeof(RBZoneTimingPanelComponent_GetNeedleSpeed) == 0x000004, "Wrong size on RBZoneTimingPanelComponent_GetNeedleSpeed");
static_assert(offsetof(RBZoneTimingPanelComponent_GetNeedleSpeed, ReturnValue) == 0x000000, "Member 'RBZoneTimingPanelComponent_GetNeedleSpeed::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.GetResultIndexAtPosition
// 0x0008 (0x0008 - 0x0000)
struct RBZoneTimingPanelComponent_GetResultIndexAtPosition final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneTimingPanelComponent_GetResultIndexAtPosition) == 0x000004, "Wrong alignment on RBZoneTimingPanelComponent_GetResultIndexAtPosition");
static_assert(sizeof(RBZoneTimingPanelComponent_GetResultIndexAtPosition) == 0x000008, "Wrong size on RBZoneTimingPanelComponent_GetResultIndexAtPosition");
static_assert(offsetof(RBZoneTimingPanelComponent_GetResultIndexAtPosition, Ratio) == 0x000000, "Member 'RBZoneTimingPanelComponent_GetResultIndexAtPosition::Ratio' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_GetResultIndexAtPosition, ReturnValue) == 0x000004, "Member 'RBZoneTimingPanelComponent_GetResultIndexAtPosition::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneTimingPanelComponent.GetZoneTimingCustomInteractionText
// 0x0028 (0x0028 - 0x0000)
struct RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText final
{
public:
	const class ARBPlayer*                        Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Out_CustomInteractionText;                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          Out_bInteractionFail;                              // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B58[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText) == 0x000008, "Wrong alignment on RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText");
static_assert(sizeof(RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText) == 0x000028, "Wrong size on RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText");
static_assert(offsetof(RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText, Player) == 0x000000, "Member 'RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText::Player' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText, Out_CustomInteractionText) == 0x000008, "Member 'RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText::Out_CustomInteractionText' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText, Out_bInteractionFail) == 0x000020, "Member 'RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText::Out_bInteractionFail' has a wrong offset!");
static_assert(offsetof(RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText, ReturnValue) == 0x000021, "Member 'RBZoneTimingPanelComponent_GetZoneTimingCustomInteractionText::ReturnValue' has a wrong offset!");

// Function OPP.RBPumpZoneTimingComponent.OnRep_LinkedValves
// 0x0010 (0x0010 - 0x0000)
struct RBPumpZoneTimingComponent_OnRep_LinkedValves final
{
public:
	TArray<class URBValvePanelComponent*>         OldLinkedValves;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPumpZoneTimingComponent_OnRep_LinkedValves) == 0x000008, "Wrong alignment on RBPumpZoneTimingComponent_OnRep_LinkedValves");
static_assert(sizeof(RBPumpZoneTimingComponent_OnRep_LinkedValves) == 0x000010, "Wrong size on RBPumpZoneTimingComponent_OnRep_LinkedValves");
static_assert(offsetof(RBPumpZoneTimingComponent_OnRep_LinkedValves, OldLinkedValves) == 0x000000, "Member 'RBPumpZoneTimingComponent_OnRep_LinkedValves::OldLinkedValves' has a wrong offset!");

// Function OPP.RBPumpZoneTimingComponent.OnValveGameplayRatioChanged
// 0x0010 (0x0010 - 0x0000)
struct RBPumpZoneTimingComponent_OnValveGameplayRatioChanged final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPumpZoneTimingComponent_OnValveGameplayRatioChanged) == 0x000008, "Wrong alignment on RBPumpZoneTimingComponent_OnValveGameplayRatioChanged");
static_assert(sizeof(RBPumpZoneTimingComponent_OnValveGameplayRatioChanged) == 0x000010, "Wrong size on RBPumpZoneTimingComponent_OnValveGameplayRatioChanged");
static_assert(offsetof(RBPumpZoneTimingComponent_OnValveGameplayRatioChanged, Panel) == 0x000000, "Member 'RBPumpZoneTimingComponent_OnValveGameplayRatioChanged::Panel' has a wrong offset!");
static_assert(offsetof(RBPumpZoneTimingComponent_OnValveGameplayRatioChanged, Pawn) == 0x000008, "Member 'RBPumpZoneTimingComponent_OnValveGameplayRatioChanged::Pawn' has a wrong offset!");

// Function OPP.RBPumpZoneTimingComponent.GetFuelRatio
// 0x0004 (0x0004 - 0x0000)
struct RBPumpZoneTimingComponent_GetFuelRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPumpZoneTimingComponent_GetFuelRatio) == 0x000004, "Wrong alignment on RBPumpZoneTimingComponent_GetFuelRatio");
static_assert(sizeof(RBPumpZoneTimingComponent_GetFuelRatio) == 0x000004, "Wrong size on RBPumpZoneTimingComponent_GetFuelRatio");
static_assert(offsetof(RBPumpZoneTimingComponent_GetFuelRatio, ReturnValue) == 0x000000, "Member 'RBPumpZoneTimingComponent_GetFuelRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBPumpZoneTimingComponent.GetLinkedValves
// 0x0010 (0x0010 - 0x0000)
struct RBPumpZoneTimingComponent_GetLinkedValves final
{
public:
	TArray<class URBValvePanelComponent*>         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPumpZoneTimingComponent_GetLinkedValves) == 0x000008, "Wrong alignment on RBPumpZoneTimingComponent_GetLinkedValves");
static_assert(sizeof(RBPumpZoneTimingComponent_GetLinkedValves) == 0x000010, "Wrong size on RBPumpZoneTimingComponent_GetLinkedValves");
static_assert(offsetof(RBPumpZoneTimingComponent_GetLinkedValves, ReturnValue) == 0x000000, "Member 'RBPumpZoneTimingComponent_GetLinkedValves::ReturnValue' has a wrong offset!");

// Function OPP.RBGameplayTriggerVolume.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameplayTriggerVolume_BP_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameplayTriggerVolume_BP_SetEnabled) == 0x000001, "Wrong alignment on RBGameplayTriggerVolume_BP_SetEnabled");
static_assert(sizeof(RBGameplayTriggerVolume_BP_SetEnabled) == 0x000001, "Wrong size on RBGameplayTriggerVolume_BP_SetEnabled");
static_assert(offsetof(RBGameplayTriggerVolume_BP_SetEnabled, Enabled) == 0x000000, "Member 'RBGameplayTriggerVolume_BP_SetEnabled::Enabled' has a wrong offset!");

// Function OPP.RBGameplayTriggerVolume.OnTriggeredEventBypass
// 0x0008 (0x0008 - 0x0000)
struct RBGameplayTriggerVolume_OnTriggeredEventBypass final
{
public:
	class URBGameplayTriggerComponent*            Trigger;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameplayTriggerVolume_OnTriggeredEventBypass) == 0x000008, "Wrong alignment on RBGameplayTriggerVolume_OnTriggeredEventBypass");
static_assert(sizeof(RBGameplayTriggerVolume_OnTriggeredEventBypass) == 0x000008, "Wrong size on RBGameplayTriggerVolume_OnTriggeredEventBypass");
static_assert(offsetof(RBGameplayTriggerVolume_OnTriggeredEventBypass, Trigger) == 0x000000, "Member 'RBGameplayTriggerVolume_OnTriggeredEventBypass::Trigger' has a wrong offset!");

// Function OPP.RBGameplayTriggerVolume.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameplayTriggerVolume_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameplayTriggerVolume_IsEnabled) == 0x000001, "Wrong alignment on RBGameplayTriggerVolume_IsEnabled");
static_assert(sizeof(RBGameplayTriggerVolume_IsEnabled) == 0x000001, "Wrong size on RBGameplayTriggerVolume_IsEnabled");
static_assert(offsetof(RBGameplayTriggerVolume_IsEnabled, ReturnValue) == 0x000000, "Member 'RBGameplayTriggerVolume_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.Block
// 0x0010 (0x0010 - 0x0000)
struct RBGameUserPreferences_Block final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_Block) == 0x000004, "Wrong alignment on RBGameUserPreferences_Block");
static_assert(sizeof(RBGameUserPreferences_Block) == 0x000010, "Wrong size on RBGameUserPreferences_Block");
static_assert(offsetof(RBGameUserPreferences_Block, ProfileId) == 0x000000, "Member 'RBGameUserPreferences_Block::ProfileId' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetGlobalVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetGlobalVoiceChatVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetGlobalVoiceChatVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetGlobalVoiceChatVolume");
static_assert(sizeof(RBGameUserPreferences_GetGlobalVoiceChatVolume) == 0x000004, "Wrong size on RBGameUserPreferences_GetGlobalVoiceChatVolume");
static_assert(offsetof(RBGameUserPreferences_GetGlobalVoiceChatVolume, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetGlobalVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetPlayerVoiceChatVolume
// 0x0014 (0x0014 - 0x0000)
struct RBGameUserPreferences_GetPlayerVoiceChatVolume final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetPlayerVoiceChatVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetPlayerVoiceChatVolume");
static_assert(sizeof(RBGameUserPreferences_GetPlayerVoiceChatVolume) == 0x000014, "Wrong size on RBGameUserPreferences_GetPlayerVoiceChatVolume");
static_assert(offsetof(RBGameUserPreferences_GetPlayerVoiceChatVolume, ProfileId) == 0x000000, "Member 'RBGameUserPreferences_GetPlayerVoiceChatVolume::ProfileId' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_GetPlayerVoiceChatVolume, ReturnValue) == 0x000010, "Member 'RBGameUserPreferences_GetPlayerVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetAllowPartyMemberInvites
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetAllowPartyMemberInvites final
{
public:
	bool                                          Param_bAllowPartyMemberInvites;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetAllowPartyMemberInvites) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetAllowPartyMemberInvites");
static_assert(sizeof(RBGameUserPreferences_SetAllowPartyMemberInvites) == 0x000001, "Wrong size on RBGameUserPreferences_SetAllowPartyMemberInvites");
static_assert(offsetof(RBGameUserPreferences_SetAllowPartyMemberInvites, Param_bAllowPartyMemberInvites) == 0x000000, "Member 'RBGameUserPreferences_SetAllowPartyMemberInvites::Param_bAllowPartyMemberInvites' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetAutoHideItemInHandEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetAutoHideItemInHandEnabled final
{
public:
	bool                                          bInAutoHideItemInHand;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetAutoHideItemInHandEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetAutoHideItemInHandEnabled");
static_assert(sizeof(RBGameUserPreferences_SetAutoHideItemInHandEnabled) == 0x000001, "Wrong size on RBGameUserPreferences_SetAutoHideItemInHandEnabled");
static_assert(offsetof(RBGameUserPreferences_SetAutoHideItemInHandEnabled, bInAutoHideItemInHand) == 0x000000, "Member 'RBGameUserPreferences_SetAutoHideItemInHandEnabled::bInAutoHideItemInHand' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetBrightnessSettingsToDefaults
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetBrightnessSettingsToDefaults final
{
public:
	bool                                          bHDR;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetBrightnessSettingsToDefaults) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetBrightnessSettingsToDefaults");
static_assert(sizeof(RBGameUserPreferences_SetBrightnessSettingsToDefaults) == 0x000001, "Wrong size on RBGameUserPreferences_SetBrightnessSettingsToDefaults");
static_assert(offsetof(RBGameUserPreferences_SetBrightnessSettingsToDefaults, bHDR) == 0x000000, "Member 'RBGameUserPreferences_SetBrightnessSettingsToDefaults::bHDR' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetConsolePerformanceModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetConsolePerformanceModeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetConsolePerformanceModeEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetConsolePerformanceModeEnabled");
static_assert(sizeof(RBGameUserPreferences_SetConsolePerformanceModeEnabled) == 0x000001, "Wrong size on RBGameUserPreferences_SetConsolePerformanceModeEnabled");
static_assert(offsetof(RBGameUserPreferences_SetConsolePerformanceModeEnabled, bEnabled) == 0x000000, "Member 'RBGameUserPreferences_SetConsolePerformanceModeEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetEnableCrossPlay
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetEnableCrossPlay final
{
public:
	bool                                          bEnableCrossPlay;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetEnableCrossPlay) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetEnableCrossPlay");
static_assert(sizeof(RBGameUserPreferences_SetEnableCrossPlay) == 0x000001, "Wrong size on RBGameUserPreferences_SetEnableCrossPlay");
static_assert(offsetof(RBGameUserPreferences_SetEnableCrossPlay, bEnableCrossPlay) == 0x000000, "Member 'RBGameUserPreferences_SetEnableCrossPlay::bEnableCrossPlay' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetEnableRegion
// 0x0018 (0x0018 - 0x0000)
struct RBGameUserPreferences_SetEnableRegion final
{
public:
	class FString                                 Region;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B6E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameUserPreferences_SetEnableRegion) == 0x000008, "Wrong alignment on RBGameUserPreferences_SetEnableRegion");
static_assert(sizeof(RBGameUserPreferences_SetEnableRegion) == 0x000018, "Wrong size on RBGameUserPreferences_SetEnableRegion");
static_assert(offsetof(RBGameUserPreferences_SetEnableRegion, Region) == 0x000000, "Member 'RBGameUserPreferences_SetEnableRegion::Region' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_SetEnableRegion, bEnable) == 0x000010, "Member 'RBGameUserPreferences_SetEnableRegion::bEnable' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetEnableVoiceChat
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetEnableVoiceChat final
{
public:
	bool                                          bInEnableVoiceChat;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetEnableVoiceChat) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetEnableVoiceChat");
static_assert(sizeof(RBGameUserPreferences_SetEnableVoiceChat) == 0x000001, "Wrong size on RBGameUserPreferences_SetEnableVoiceChat");
static_assert(offsetof(RBGameUserPreferences_SetEnableVoiceChat, bInEnableVoiceChat) == 0x000000, "Member 'RBGameUserPreferences_SetEnableVoiceChat::bInEnableVoiceChat' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetForceFeedbackEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetForceFeedbackEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetForceFeedbackEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetForceFeedbackEnabled");
static_assert(sizeof(RBGameUserPreferences_SetForceFeedbackEnabled) == 0x000001, "Wrong size on RBGameUserPreferences_SetForceFeedbackEnabled");
static_assert(offsetof(RBGameUserPreferences_SetForceFeedbackEnabled, bEnabled) == 0x000000, "Member 'RBGameUserPreferences_SetForceFeedbackEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetGlobalVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_SetGlobalVoiceChatVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetGlobalVoiceChatVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetGlobalVoiceChatVolume");
static_assert(sizeof(RBGameUserPreferences_SetGlobalVoiceChatVolume) == 0x000004, "Wrong size on RBGameUserPreferences_SetGlobalVoiceChatVolume");
static_assert(offsetof(RBGameUserPreferences_SetGlobalVoiceChatVolume, Volume) == 0x000000, "Member 'RBGameUserPreferences_SetGlobalVoiceChatVolume::Volume' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetHDRPaperwhite
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_SetHDRPaperwhite final
{
public:
	int32                                         Paperwhite;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetHDRPaperwhite) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetHDRPaperwhite");
static_assert(sizeof(RBGameUserPreferences_SetHDRPaperwhite) == 0x000004, "Wrong size on RBGameUserPreferences_SetHDRPaperwhite");
static_assert(offsetof(RBGameUserPreferences_SetHDRPaperwhite, Paperwhite) == 0x000000, "Member 'RBGameUserPreferences_SetHDRPaperwhite::Paperwhite' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetHDRUILevel
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_SetHDRUILevel final
{
public:
	float                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetHDRUILevel) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetHDRUILevel");
static_assert(sizeof(RBGameUserPreferences_SetHDRUILevel) == 0x000004, "Wrong size on RBGameUserPreferences_SetHDRUILevel");
static_assert(offsetof(RBGameUserPreferences_SetHDRUILevel, Level) == 0x000000, "Member 'RBGameUserPreferences_SetHDRUILevel::Level' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetInteractToggle
// 0x0002 (0x0002 - 0x0000)
struct RBGameUserPreferences_SetInteractToggle final
{
public:
	bool                                          bToggle;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGamepadOption;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetInteractToggle) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetInteractToggle");
static_assert(sizeof(RBGameUserPreferences_SetInteractToggle) == 0x000002, "Wrong size on RBGameUserPreferences_SetInteractToggle");
static_assert(offsetof(RBGameUserPreferences_SetInteractToggle, bToggle) == 0x000000, "Member 'RBGameUserPreferences_SetInteractToggle::bToggle' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_SetInteractToggle, bIsGamepadOption) == 0x000001, "Member 'RBGameUserPreferences_SetInteractToggle::bIsGamepadOption' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetLookSensitivityMultiplier
// 0x000C (0x000C - 0x0000)
struct RBGameUserPreferences_SetLookSensitivityMultiplier final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetLookSensitivityMultiplier) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetLookSensitivityMultiplier");
static_assert(sizeof(RBGameUserPreferences_SetLookSensitivityMultiplier) == 0x00000C, "Wrong size on RBGameUserPreferences_SetLookSensitivityMultiplier");
static_assert(offsetof(RBGameUserPreferences_SetLookSensitivityMultiplier, Value) == 0x000000, "Member 'RBGameUserPreferences_SetLookSensitivityMultiplier::Value' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetMasterVolume
// 0x0008 (0x0008 - 0x0000)
struct RBGameUserPreferences_SetMasterVolume final
{
public:
	float                                         Param_MasterVolume;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B6F[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameUserPreferences_SetMasterVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetMasterVolume");
static_assert(sizeof(RBGameUserPreferences_SetMasterVolume) == 0x000008, "Wrong size on RBGameUserPreferences_SetMasterVolume");
static_assert(offsetof(RBGameUserPreferences_SetMasterVolume, Param_MasterVolume) == 0x000000, "Member 'RBGameUserPreferences_SetMasterVolume::Param_MasterVolume' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_SetMasterVolume, bApply) == 0x000004, "Member 'RBGameUserPreferences_SetMasterVolume::bApply' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetMicrophoneVolume
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_SetMicrophoneVolume final
{
public:
	float                                         InMicrophoneVolume;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetMicrophoneVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetMicrophoneVolume");
static_assert(sizeof(RBGameUserPreferences_SetMicrophoneVolume) == 0x000004, "Wrong size on RBGameUserPreferences_SetMicrophoneVolume");
static_assert(offsetof(RBGameUserPreferences_SetMicrophoneVolume, InMicrophoneVolume) == 0x000000, "Member 'RBGameUserPreferences_SetMicrophoneVolume::InMicrophoneVolume' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetMotionBlurEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetMotionBlurEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetMotionBlurEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetMotionBlurEnabled");
static_assert(sizeof(RBGameUserPreferences_SetMotionBlurEnabled) == 0x000001, "Wrong size on RBGameUserPreferences_SetMotionBlurEnabled");
static_assert(offsetof(RBGameUserPreferences_SetMotionBlurEnabled, bEnabled) == 0x000000, "Member 'RBGameUserPreferences_SetMotionBlurEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetMusicVolume
// 0x0008 (0x0008 - 0x0000)
struct RBGameUserPreferences_SetMusicVolume final
{
public:
	float                                         InMusicVolume;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B70[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameUserPreferences_SetMusicVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetMusicVolume");
static_assert(sizeof(RBGameUserPreferences_SetMusicVolume) == 0x000008, "Wrong size on RBGameUserPreferences_SetMusicVolume");
static_assert(offsetof(RBGameUserPreferences_SetMusicVolume, InMusicVolume) == 0x000000, "Member 'RBGameUserPreferences_SetMusicVolume::InMusicVolume' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_SetMusicVolume, bApply) == 0x000004, "Member 'RBGameUserPreferences_SetMusicVolume::bApply' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetNormalizedBrightness
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_SetNormalizedBrightness final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetNormalizedBrightness) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetNormalizedBrightness");
static_assert(sizeof(RBGameUserPreferences_SetNormalizedBrightness) == 0x000004, "Wrong size on RBGameUserPreferences_SetNormalizedBrightness");
static_assert(offsetof(RBGameUserPreferences_SetNormalizedBrightness, Value) == 0x000000, "Member 'RBGameUserPreferences_SetNormalizedBrightness::Value' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetPartyInviteFilter
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_SetPartyInviteFilter final
{
public:
	int32                                         Param_PartyInviteFilter;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetPartyInviteFilter) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetPartyInviteFilter");
static_assert(sizeof(RBGameUserPreferences_SetPartyInviteFilter) == 0x000004, "Wrong size on RBGameUserPreferences_SetPartyInviteFilter");
static_assert(offsetof(RBGameUserPreferences_SetPartyInviteFilter, Param_PartyInviteFilter) == 0x000000, "Member 'RBGameUserPreferences_SetPartyInviteFilter::Param_PartyInviteFilter' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetPartyPrivacy
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetPartyPrivacy final
{
public:
	EPartyPrivacy                                 Privacy;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetPartyPrivacy) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetPartyPrivacy");
static_assert(sizeof(RBGameUserPreferences_SetPartyPrivacy) == 0x000001, "Wrong size on RBGameUserPreferences_SetPartyPrivacy");
static_assert(offsetof(RBGameUserPreferences_SetPartyPrivacy, Privacy) == 0x000000, "Member 'RBGameUserPreferences_SetPartyPrivacy::Privacy' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetPlayerVoiceChatVolume
// 0x0014 (0x0014 - 0x0000)
struct RBGameUserPreferences_SetPlayerVoiceChatVolume final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetPlayerVoiceChatVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetPlayerVoiceChatVolume");
static_assert(sizeof(RBGameUserPreferences_SetPlayerVoiceChatVolume) == 0x000014, "Wrong size on RBGameUserPreferences_SetPlayerVoiceChatVolume");
static_assert(offsetof(RBGameUserPreferences_SetPlayerVoiceChatVolume, ProfileId) == 0x000000, "Member 'RBGameUserPreferences_SetPlayerVoiceChatVolume::ProfileId' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_SetPlayerVoiceChatVolume, Volume) == 0x000010, "Member 'RBGameUserPreferences_SetPlayerVoiceChatVolume::Volume' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetSFXVolume
// 0x0008 (0x0008 - 0x0000)
struct RBGameUserPreferences_SetSFXVolume final
{
public:
	float                                         InSFXVolume;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApply;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B71[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameUserPreferences_SetSFXVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_SetSFXVolume");
static_assert(sizeof(RBGameUserPreferences_SetSFXVolume) == 0x000008, "Wrong size on RBGameUserPreferences_SetSFXVolume");
static_assert(offsetof(RBGameUserPreferences_SetSFXVolume, InSFXVolume) == 0x000000, "Member 'RBGameUserPreferences_SetSFXVolume::InSFXVolume' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_SetSFXVolume, bApply) == 0x000004, "Member 'RBGameUserPreferences_SetSFXVolume::bApply' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetShowHud
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetShowHud final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetShowHud) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetShowHud");
static_assert(sizeof(RBGameUserPreferences_SetShowHud) == 0x000001, "Wrong size on RBGameUserPreferences_SetShowHud");
static_assert(offsetof(RBGameUserPreferences_SetShowHud, bShow) == 0x000000, "Member 'RBGameUserPreferences_SetShowHud::bShow' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetShowSubtitles
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetShowSubtitles final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetShowSubtitles) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetShowSubtitles");
static_assert(sizeof(RBGameUserPreferences_SetShowSubtitles) == 0x000001, "Wrong size on RBGameUserPreferences_SetShowSubtitles");
static_assert(offsetof(RBGameUserPreferences_SetShowSubtitles, bShow) == 0x000000, "Member 'RBGameUserPreferences_SetShowSubtitles::bShow' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetStickyRunEnabled
// 0x0002 (0x0002 - 0x0000)
struct RBGameUserPreferences_SetStickyRunEnabled final
{
public:
	bool                                          bInStickyRun;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGamepadOption;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetStickyRunEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetStickyRunEnabled");
static_assert(sizeof(RBGameUserPreferences_SetStickyRunEnabled) == 0x000002, "Wrong size on RBGameUserPreferences_SetStickyRunEnabled");
static_assert(offsetof(RBGameUserPreferences_SetStickyRunEnabled, bInStickyRun) == 0x000000, "Member 'RBGameUserPreferences_SetStickyRunEnabled::bInStickyRun' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_SetStickyRunEnabled, bIsGamepadOption) == 0x000001, "Member 'RBGameUserPreferences_SetStickyRunEnabled::bIsGamepadOption' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetSubtitleSize
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetSubtitleSize final
{
public:
	EUIFontSize                                   Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetSubtitleSize) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetSubtitleSize");
static_assert(sizeof(RBGameUserPreferences_SetSubtitleSize) == 0x000001, "Wrong size on RBGameUserPreferences_SetSubtitleSize");
static_assert(offsetof(RBGameUserPreferences_SetSubtitleSize, Size) == 0x000000, "Member 'RBGameUserPreferences_SetSubtitleSize::Size' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetTutorialSize
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetTutorialSize final
{
public:
	EUIFontSize                                   Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetTutorialSize) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetTutorialSize");
static_assert(sizeof(RBGameUserPreferences_SetTutorialSize) == 0x000001, "Wrong size on RBGameUserPreferences_SetTutorialSize");
static_assert(offsetof(RBGameUserPreferences_SetTutorialSize, Size) == 0x000000, "Member 'RBGameUserPreferences_SetTutorialSize::Size' has a wrong offset!");

// Function OPP.RBGameUserPreferences.SetUsePushToTalk
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_SetUsePushToTalk final
{
public:
	bool                                          bInUsePushTotalk;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_SetUsePushToTalk) == 0x000001, "Wrong alignment on RBGameUserPreferences_SetUsePushToTalk");
static_assert(sizeof(RBGameUserPreferences_SetUsePushToTalk) == 0x000001, "Wrong size on RBGameUserPreferences_SetUsePushToTalk");
static_assert(offsetof(RBGameUserPreferences_SetUsePushToTalk, bInUsePushTotalk) == 0x000000, "Member 'RBGameUserPreferences_SetUsePushToTalk::bInUsePushTotalk' has a wrong offset!");

// Function OPP.RBGameUserPreferences.UnBlock
// 0x0010 (0x0010 - 0x0000)
struct RBGameUserPreferences_UnBlock final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_UnBlock) == 0x000004, "Wrong alignment on RBGameUserPreferences_UnBlock");
static_assert(sizeof(RBGameUserPreferences_UnBlock) == 0x000010, "Wrong size on RBGameUserPreferences_UnBlock");
static_assert(offsetof(RBGameUserPreferences_UnBlock, ProfileId) == 0x000000, "Member 'RBGameUserPreferences_UnBlock::ProfileId' has a wrong offset!");

// Function OPP.RBGameUserPreferences.AllowPartyMemberInvites
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_AllowPartyMemberInvites final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_AllowPartyMemberInvites) == 0x000001, "Wrong alignment on RBGameUserPreferences_AllowPartyMemberInvites");
static_assert(sizeof(RBGameUserPreferences_AllowPartyMemberInvites) == 0x000001, "Wrong size on RBGameUserPreferences_AllowPartyMemberInvites");
static_assert(offsetof(RBGameUserPreferences_AllowPartyMemberInvites, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_AllowPartyMemberInvites::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.CrossPlayEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_CrossPlayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_CrossPlayEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_CrossPlayEnabled");
static_assert(sizeof(RBGameUserPreferences_CrossPlayEnabled) == 0x000001, "Wrong size on RBGameUserPreferences_CrossPlayEnabled");
static_assert(offsetof(RBGameUserPreferences_CrossPlayEnabled, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_CrossPlayEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetAllowFriendRequestNotifications
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_GetAllowFriendRequestNotifications final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetAllowFriendRequestNotifications) == 0x000001, "Wrong alignment on RBGameUserPreferences_GetAllowFriendRequestNotifications");
static_assert(sizeof(RBGameUserPreferences_GetAllowFriendRequestNotifications) == 0x000001, "Wrong size on RBGameUserPreferences_GetAllowFriendRequestNotifications");
static_assert(offsetof(RBGameUserPreferences_GetAllowFriendRequestNotifications, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetAllowFriendRequestNotifications::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetAudioLanguage
// 0x0010 (0x0010 - 0x0000)
struct RBGameUserPreferences_GetAudioLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetAudioLanguage) == 0x000008, "Wrong alignment on RBGameUserPreferences_GetAudioLanguage");
static_assert(sizeof(RBGameUserPreferences_GetAudioLanguage) == 0x000010, "Wrong size on RBGameUserPreferences_GetAudioLanguage");
static_assert(offsetof(RBGameUserPreferences_GetAudioLanguage, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetAudioLanguage::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetCrosshairDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetCrosshairDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetCrosshairDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetCrosshairDisplay");
static_assert(sizeof(RBGameUserPreferences_GetCrosshairDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetCrosshairDisplay");
static_assert(offsetof(RBGameUserPreferences_GetCrosshairDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetCrosshairDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetDarknessDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetDarknessDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetDarknessDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetDarknessDisplay");
static_assert(sizeof(RBGameUserPreferences_GetDarknessDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetDarknessDisplay");
static_assert(offsetof(RBGameUserPreferences_GetDarknessDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetDarknessDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetEffectsVolume
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetEffectsVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetEffectsVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetEffectsVolume");
static_assert(sizeof(RBGameUserPreferences_GetEffectsVolume) == 0x000004, "Wrong size on RBGameUserPreferences_GetEffectsVolume");
static_assert(offsetof(RBGameUserPreferences_GetEffectsVolume, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetEffectsVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetEnableVoiceChat
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_GetEnableVoiceChat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetEnableVoiceChat) == 0x000001, "Wrong alignment on RBGameUserPreferences_GetEnableVoiceChat");
static_assert(sizeof(RBGameUserPreferences_GetEnableVoiceChat) == 0x000001, "Wrong size on RBGameUserPreferences_GetEnableVoiceChat");
static_assert(offsetof(RBGameUserPreferences_GetEnableVoiceChat, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetEnableVoiceChat::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetFriendsOnlineStatusNotifications
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_GetFriendsOnlineStatusNotifications final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetFriendsOnlineStatusNotifications) == 0x000001, "Wrong alignment on RBGameUserPreferences_GetFriendsOnlineStatusNotifications");
static_assert(sizeof(RBGameUserPreferences_GetFriendsOnlineStatusNotifications) == 0x000001, "Wrong size on RBGameUserPreferences_GetFriendsOnlineStatusNotifications");
static_assert(offsetof(RBGameUserPreferences_GetFriendsOnlineStatusNotifications, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetFriendsOnlineStatusNotifications::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetHealthDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetHealthDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetHealthDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetHealthDisplay");
static_assert(sizeof(RBGameUserPreferences_GetHealthDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetHealthDisplay");
static_assert(offsetof(RBGameUserPreferences_GetHealthDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetHealthDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetInterfacePreset
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetInterfacePreset final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetInterfacePreset) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetInterfacePreset");
static_assert(sizeof(RBGameUserPreferences_GetInterfacePreset) == 0x000004, "Wrong size on RBGameUserPreferences_GetInterfacePreset");
static_assert(offsetof(RBGameUserPreferences_GetInterfacePreset, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetInterfacePreset::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetInventoryDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetInventoryDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetInventoryDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetInventoryDisplay");
static_assert(sizeof(RBGameUserPreferences_GetInventoryDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetInventoryDisplay");
static_assert(offsetof(RBGameUserPreferences_GetInventoryDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetInventoryDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetLookSensitivityMultiplier
// 0x000C (0x000C - 0x0000)
struct RBGameUserPreferences_GetLookSensitivityMultiplier final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetLookSensitivityMultiplier) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetLookSensitivityMultiplier");
static_assert(sizeof(RBGameUserPreferences_GetLookSensitivityMultiplier) == 0x00000C, "Wrong size on RBGameUserPreferences_GetLookSensitivityMultiplier");
static_assert(offsetof(RBGameUserPreferences_GetLookSensitivityMultiplier, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetLookSensitivityMultiplier::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetMasterVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetMasterVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetMasterVolume");
static_assert(sizeof(RBGameUserPreferences_GetMasterVolume) == 0x000004, "Wrong size on RBGameUserPreferences_GetMasterVolume");
static_assert(offsetof(RBGameUserPreferences_GetMasterVolume, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetMasterVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetMicrophoneVolume
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetMicrophoneVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetMicrophoneVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetMicrophoneVolume");
static_assert(sizeof(RBGameUserPreferences_GetMicrophoneVolume) == 0x000004, "Wrong size on RBGameUserPreferences_GetMicrophoneVolume");
static_assert(offsetof(RBGameUserPreferences_GetMicrophoneVolume, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetMicrophoneVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetMusicVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetMusicVolume) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetMusicVolume");
static_assert(sizeof(RBGameUserPreferences_GetMusicVolume) == 0x000004, "Wrong size on RBGameUserPreferences_GetMusicVolume");
static_assert(offsetof(RBGameUserPreferences_GetMusicVolume, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetMusicVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetNoiseDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetNoiseDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetNoiseDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetNoiseDisplay");
static_assert(sizeof(RBGameUserPreferences_GetNoiseDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetNoiseDisplay");
static_assert(offsetof(RBGameUserPreferences_GetNoiseDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetNoiseDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetObjectiveDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetObjectiveDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetObjectiveDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetObjectiveDisplay");
static_assert(sizeof(RBGameUserPreferences_GetObjectiveDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetObjectiveDisplay");
static_assert(offsetof(RBGameUserPreferences_GetObjectiveDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetObjectiveDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetPartyInviteFilter
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetPartyInviteFilter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetPartyInviteFilter) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetPartyInviteFilter");
static_assert(sizeof(RBGameUserPreferences_GetPartyInviteFilter) == 0x000004, "Wrong size on RBGameUserPreferences_GetPartyInviteFilter");
static_assert(offsetof(RBGameUserPreferences_GetPartyInviteFilter, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetPartyInviteFilter::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetPartyPrivacy
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_GetPartyPrivacy final
{
public:
	EPartyPrivacy                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetPartyPrivacy) == 0x000001, "Wrong alignment on RBGameUserPreferences_GetPartyPrivacy");
static_assert(sizeof(RBGameUserPreferences_GetPartyPrivacy) == 0x000001, "Wrong size on RBGameUserPreferences_GetPartyPrivacy");
static_assert(offsetof(RBGameUserPreferences_GetPartyPrivacy, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetPartyPrivacy::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetSanityDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetSanityDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetSanityDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetSanityDisplay");
static_assert(sizeof(RBGameUserPreferences_GetSanityDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetSanityDisplay");
static_assert(offsetof(RBGameUserPreferences_GetSanityDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetSanityDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetSecondaryObjectiveDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetSecondaryObjectiveDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetSecondaryObjectiveDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetSecondaryObjectiveDisplay");
static_assert(sizeof(RBGameUserPreferences_GetSecondaryObjectiveDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetSecondaryObjectiveDisplay");
static_assert(offsetof(RBGameUserPreferences_GetSecondaryObjectiveDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetSecondaryObjectiveDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetShowSubtitles
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_GetShowSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetShowSubtitles) == 0x000001, "Wrong alignment on RBGameUserPreferences_GetShowSubtitles");
static_assert(sizeof(RBGameUserPreferences_GetShowSubtitles) == 0x000001, "Wrong size on RBGameUserPreferences_GetShowSubtitles");
static_assert(offsetof(RBGameUserPreferences_GetShowSubtitles, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetShowSubtitles::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetStaminaDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetStaminaDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetStaminaDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetStaminaDisplay");
static_assert(sizeof(RBGameUserPreferences_GetStaminaDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetStaminaDisplay");
static_assert(offsetof(RBGameUserPreferences_GetStaminaDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetStaminaDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetSubtitlesBackground
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_GetSubtitlesBackground final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetSubtitlesBackground) == 0x000001, "Wrong alignment on RBGameUserPreferences_GetSubtitlesBackground");
static_assert(sizeof(RBGameUserPreferences_GetSubtitlesBackground) == 0x000001, "Wrong size on RBGameUserPreferences_GetSubtitlesBackground");
static_assert(offsetof(RBGameUserPreferences_GetSubtitlesBackground, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetSubtitlesBackground::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetSubtitleSize
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_GetSubtitleSize final
{
public:
	EUIFontSize                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetSubtitleSize) == 0x000001, "Wrong alignment on RBGameUserPreferences_GetSubtitleSize");
static_assert(sizeof(RBGameUserPreferences_GetSubtitleSize) == 0x000001, "Wrong size on RBGameUserPreferences_GetSubtitleSize");
static_assert(offsetof(RBGameUserPreferences_GetSubtitleSize, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetSubtitleSize::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetSubtitlesLanguage
// 0x0010 (0x0010 - 0x0000)
struct RBGameUserPreferences_GetSubtitlesLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetSubtitlesLanguage) == 0x000008, "Wrong alignment on RBGameUserPreferences_GetSubtitlesLanguage");
static_assert(sizeof(RBGameUserPreferences_GetSubtitlesLanguage) == 0x000010, "Wrong size on RBGameUserPreferences_GetSubtitlesLanguage");
static_assert(offsetof(RBGameUserPreferences_GetSubtitlesLanguage, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetSubtitlesLanguage::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetTeammateStatusHUDDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetTeammateStatusHUDDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetTeammateStatusHUDDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetTeammateStatusHUDDisplay");
static_assert(sizeof(RBGameUserPreferences_GetTeammateStatusHUDDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetTeammateStatusHUDDisplay");
static_assert(offsetof(RBGameUserPreferences_GetTeammateStatusHUDDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetTeammateStatusHUDDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetTeammateStatusInWorldDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetTeammateStatusInWorldDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetTeammateStatusInWorldDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetTeammateStatusInWorldDisplay");
static_assert(sizeof(RBGameUserPreferences_GetTeammateStatusInWorldDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetTeammateStatusInWorldDisplay");
static_assert(offsetof(RBGameUserPreferences_GetTeammateStatusInWorldDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetTeammateStatusInWorldDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetTeammateStatusOutsideViewDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetTeammateStatusOutsideViewDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetTeammateStatusOutsideViewDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetTeammateStatusOutsideViewDisplay");
static_assert(sizeof(RBGameUserPreferences_GetTeammateStatusOutsideViewDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetTeammateStatusOutsideViewDisplay");
static_assert(offsetof(RBGameUserPreferences_GetTeammateStatusOutsideViewDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetTeammateStatusOutsideViewDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetTextLanguage
// 0x0010 (0x0010 - 0x0000)
struct RBGameUserPreferences_GetTextLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetTextLanguage) == 0x000008, "Wrong alignment on RBGameUserPreferences_GetTextLanguage");
static_assert(sizeof(RBGameUserPreferences_GetTextLanguage) == 0x000010, "Wrong size on RBGameUserPreferences_GetTextLanguage");
static_assert(offsetof(RBGameUserPreferences_GetTextLanguage, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetTextLanguage::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetTutorialSize
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_GetTutorialSize final
{
public:
	EUIFontSize                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetTutorialSize) == 0x000001, "Wrong alignment on RBGameUserPreferences_GetTutorialSize");
static_assert(sizeof(RBGameUserPreferences_GetTutorialSize) == 0x000001, "Wrong size on RBGameUserPreferences_GetTutorialSize");
static_assert(offsetof(RBGameUserPreferences_GetTutorialSize, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetTutorialSize::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetUsePushToTalk
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_GetUsePushToTalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetUsePushToTalk) == 0x000001, "Wrong alignment on RBGameUserPreferences_GetUsePushToTalk");
static_assert(sizeof(RBGameUserPreferences_GetUsePushToTalk) == 0x000001, "Wrong size on RBGameUserPreferences_GetUsePushToTalk");
static_assert(offsetof(RBGameUserPreferences_GetUsePushToTalk, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetUsePushToTalk::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetVoiceActivityDetectorHangover
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetVoiceActivityDetectorHangover final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetVoiceActivityDetectorHangover) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetVoiceActivityDetectorHangover");
static_assert(sizeof(RBGameUserPreferences_GetVoiceActivityDetectorHangover) == 0x000004, "Wrong size on RBGameUserPreferences_GetVoiceActivityDetectorHangover");
static_assert(offsetof(RBGameUserPreferences_GetVoiceActivityDetectorHangover, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetVoiceActivityDetectorHangover::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetVoiceActivityDetectorNoiseFloor
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetVoiceActivityDetectorNoiseFloor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetVoiceActivityDetectorNoiseFloor) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetVoiceActivityDetectorNoiseFloor");
static_assert(sizeof(RBGameUserPreferences_GetVoiceActivityDetectorNoiseFloor) == 0x000004, "Wrong size on RBGameUserPreferences_GetVoiceActivityDetectorNoiseFloor");
static_assert(offsetof(RBGameUserPreferences_GetVoiceActivityDetectorNoiseFloor, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetVoiceActivityDetectorNoiseFloor::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetVoiceActivityDetectorSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetVoiceActivityDetectorSensitivity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetVoiceActivityDetectorSensitivity) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetVoiceActivityDetectorSensitivity");
static_assert(sizeof(RBGameUserPreferences_GetVoiceActivityDetectorSensitivity) == 0x000004, "Wrong size on RBGameUserPreferences_GetVoiceActivityDetectorSensitivity");
static_assert(offsetof(RBGameUserPreferences_GetVoiceActivityDetectorSensitivity, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetVoiceActivityDetectorSensitivity::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.GetVoiceChatOverlayDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserPreferences_GetVoiceChatOverlayDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_GetVoiceChatOverlayDisplay) == 0x000004, "Wrong alignment on RBGameUserPreferences_GetVoiceChatOverlayDisplay");
static_assert(sizeof(RBGameUserPreferences_GetVoiceChatOverlayDisplay) == 0x000004, "Wrong size on RBGameUserPreferences_GetVoiceChatOverlayDisplay");
static_assert(offsetof(RBGameUserPreferences_GetVoiceChatOverlayDisplay, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_GetVoiceChatOverlayDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.IsAutoHideItemInHandEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_IsAutoHideItemInHandEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_IsAutoHideItemInHandEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_IsAutoHideItemInHandEnabled");
static_assert(sizeof(RBGameUserPreferences_IsAutoHideItemInHandEnabled) == 0x000001, "Wrong size on RBGameUserPreferences_IsAutoHideItemInHandEnabled");
static_assert(offsetof(RBGameUserPreferences_IsAutoHideItemInHandEnabled, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_IsAutoHideItemInHandEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.IsBindingInverted
// 0x000C (0x000C - 0x0000)
struct RBGameUserPreferences_IsBindingInverted final
{
public:
	class FName                                   BindingName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B72[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameUserPreferences_IsBindingInverted) == 0x000004, "Wrong alignment on RBGameUserPreferences_IsBindingInverted");
static_assert(sizeof(RBGameUserPreferences_IsBindingInverted) == 0x00000C, "Wrong size on RBGameUserPreferences_IsBindingInverted");
static_assert(offsetof(RBGameUserPreferences_IsBindingInverted, BindingName) == 0x000000, "Member 'RBGameUserPreferences_IsBindingInverted::BindingName' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_IsBindingInverted, ReturnValue) == 0x000008, "Member 'RBGameUserPreferences_IsBindingInverted::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.IsBlocked
// 0x0014 (0x0014 - 0x0000)
struct RBGameUserPreferences_IsBlocked final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B73[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameUserPreferences_IsBlocked) == 0x000004, "Wrong alignment on RBGameUserPreferences_IsBlocked");
static_assert(sizeof(RBGameUserPreferences_IsBlocked) == 0x000014, "Wrong size on RBGameUserPreferences_IsBlocked");
static_assert(offsetof(RBGameUserPreferences_IsBlocked, ProfileId) == 0x000000, "Member 'RBGameUserPreferences_IsBlocked::ProfileId' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_IsBlocked, ReturnValue) == 0x000010, "Member 'RBGameUserPreferences_IsBlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.IsForceFeedbackEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_IsForceFeedbackEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_IsForceFeedbackEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_IsForceFeedbackEnabled");
static_assert(sizeof(RBGameUserPreferences_IsForceFeedbackEnabled) == 0x000001, "Wrong size on RBGameUserPreferences_IsForceFeedbackEnabled");
static_assert(offsetof(RBGameUserPreferences_IsForceFeedbackEnabled, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_IsForceFeedbackEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.IsInteractToggle
// 0x0002 (0x0002 - 0x0000)
struct RBGameUserPreferences_IsInteractToggle final
{
public:
	bool                                          bIsGamepadOption;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_IsInteractToggle) == 0x000001, "Wrong alignment on RBGameUserPreferences_IsInteractToggle");
static_assert(sizeof(RBGameUserPreferences_IsInteractToggle) == 0x000002, "Wrong size on RBGameUserPreferences_IsInteractToggle");
static_assert(offsetof(RBGameUserPreferences_IsInteractToggle, bIsGamepadOption) == 0x000000, "Member 'RBGameUserPreferences_IsInteractToggle::bIsGamepadOption' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_IsInteractToggle, ReturnValue) == 0x000001, "Member 'RBGameUserPreferences_IsInteractToggle::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.IsMotionBlurEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_IsMotionBlurEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_IsMotionBlurEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_IsMotionBlurEnabled");
static_assert(sizeof(RBGameUserPreferences_IsMotionBlurEnabled) == 0x000001, "Wrong size on RBGameUserPreferences_IsMotionBlurEnabled");
static_assert(offsetof(RBGameUserPreferences_IsMotionBlurEnabled, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_IsMotionBlurEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.IsRegionEnabled
// 0x0018 (0x0018 - 0x0000)
struct RBGameUserPreferences_IsRegionEnabled final
{
public:
	class FString                                 Region;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B74[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameUserPreferences_IsRegionEnabled) == 0x000008, "Wrong alignment on RBGameUserPreferences_IsRegionEnabled");
static_assert(sizeof(RBGameUserPreferences_IsRegionEnabled) == 0x000018, "Wrong size on RBGameUserPreferences_IsRegionEnabled");
static_assert(offsetof(RBGameUserPreferences_IsRegionEnabled, Region) == 0x000000, "Member 'RBGameUserPreferences_IsRegionEnabled::Region' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_IsRegionEnabled, ReturnValue) == 0x000010, "Member 'RBGameUserPreferences_IsRegionEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.IsStickyRunEnabled
// 0x0002 (0x0002 - 0x0000)
struct RBGameUserPreferences_IsStickyRunEnabled final
{
public:
	bool                                          bIsGamepadOption;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_IsStickyRunEnabled) == 0x000001, "Wrong alignment on RBGameUserPreferences_IsStickyRunEnabled");
static_assert(sizeof(RBGameUserPreferences_IsStickyRunEnabled) == 0x000002, "Wrong size on RBGameUserPreferences_IsStickyRunEnabled");
static_assert(offsetof(RBGameUserPreferences_IsStickyRunEnabled, bIsGamepadOption) == 0x000000, "Member 'RBGameUserPreferences_IsStickyRunEnabled::bIsGamepadOption' has a wrong offset!");
static_assert(offsetof(RBGameUserPreferences_IsStickyRunEnabled, ReturnValue) == 0x000001, "Member 'RBGameUserPreferences_IsStickyRunEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.IsVoiceActivityDetectorAuto
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_IsVoiceActivityDetectorAuto final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_IsVoiceActivityDetectorAuto) == 0x000001, "Wrong alignment on RBGameUserPreferences_IsVoiceActivityDetectorAuto");
static_assert(sizeof(RBGameUserPreferences_IsVoiceActivityDetectorAuto) == 0x000001, "Wrong size on RBGameUserPreferences_IsVoiceActivityDetectorAuto");
static_assert(offsetof(RBGameUserPreferences_IsVoiceActivityDetectorAuto, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_IsVoiceActivityDetectorAuto::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.ShouldShowHud
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_ShouldShowHud final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_ShouldShowHud) == 0x000001, "Wrong alignment on RBGameUserPreferences_ShouldShowHud");
static_assert(sizeof(RBGameUserPreferences_ShouldShowHud) == 0x000001, "Wrong size on RBGameUserPreferences_ShouldShowHud");
static_assert(offsetof(RBGameUserPreferences_ShouldShowHud, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_ShouldShowHud::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserPreferences.ShouldShowSubtitles
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserPreferences_ShouldShowSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserPreferences_ShouldShowSubtitles) == 0x000001, "Wrong alignment on RBGameUserPreferences_ShouldShowSubtitles");
static_assert(sizeof(RBGameUserPreferences_ShouldShowSubtitles) == 0x000001, "Wrong size on RBGameUserPreferences_ShouldShowSubtitles");
static_assert(offsetof(RBGameUserPreferences_ShouldShowSubtitles, ReturnValue) == 0x000000, "Member 'RBGameUserPreferences_ShouldShowSubtitles::ReturnValue' has a wrong offset!");

// Function OPP.RBRoomGroup.BP_GetActiveObjectivesInside
// 0x0010 (0x0010 - 0x0000)
struct RBRoomGroup_BP_GetActiveObjectivesInside final
{
public:
	TArray<class AActor*>                         OutObjectiveActors;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoomGroup_BP_GetActiveObjectivesInside) == 0x000008, "Wrong alignment on RBRoomGroup_BP_GetActiveObjectivesInside");
static_assert(sizeof(RBRoomGroup_BP_GetActiveObjectivesInside) == 0x000010, "Wrong size on RBRoomGroup_BP_GetActiveObjectivesInside");
static_assert(offsetof(RBRoomGroup_BP_GetActiveObjectivesInside, OutObjectiveActors) == 0x000000, "Member 'RBRoomGroup_BP_GetActiveObjectivesInside::OutObjectiveActors' has a wrong offset!");

// Function OPP.RBRoomGroup.BP_GetPossibleObjectivesInside
// 0x0010 (0x0010 - 0x0000)
struct RBRoomGroup_BP_GetPossibleObjectivesInside final
{
public:
	TArray<class AActor*>                         OutObjectiveActors;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoomGroup_BP_GetPossibleObjectivesInside) == 0x000008, "Wrong alignment on RBRoomGroup_BP_GetPossibleObjectivesInside");
static_assert(sizeof(RBRoomGroup_BP_GetPossibleObjectivesInside) == 0x000010, "Wrong size on RBRoomGroup_BP_GetPossibleObjectivesInside");
static_assert(offsetof(RBRoomGroup_BP_GetPossibleObjectivesInside, OutObjectiveActors) == 0x000000, "Member 'RBRoomGroup_BP_GetPossibleObjectivesInside::OutObjectiveActors' has a wrong offset!");

// Function OPP.RBRoomGroup.BP_SetSectionClosedOff
// 0x0002 (0x0002 - 0x0000)
struct RBRoomGroup_BP_SetSectionClosedOff final
{
public:
	bool                                          bClosedOff;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoomGroup_BP_SetSectionClosedOff) == 0x000001, "Wrong alignment on RBRoomGroup_BP_SetSectionClosedOff");
static_assert(sizeof(RBRoomGroup_BP_SetSectionClosedOff) == 0x000002, "Wrong size on RBRoomGroup_BP_SetSectionClosedOff");
static_assert(offsetof(RBRoomGroup_BP_SetSectionClosedOff, bClosedOff) == 0x000000, "Member 'RBRoomGroup_BP_SetSectionClosedOff::bClosedOff' has a wrong offset!");
static_assert(offsetof(RBRoomGroup_BP_SetSectionClosedOff, bSnapToState) == 0x000001, "Member 'RBRoomGroup_BP_SetSectionClosedOff::bSnapToState' has a wrong offset!");

// Function OPP.RBRoomGroup.BP_GetVolumeList
// 0x0010 (0x0010 - 0x0000)
struct RBRoomGroup_BP_GetVolumeList final
{
public:
	TArray<class AVolume*>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoomGroup_BP_GetVolumeList) == 0x000008, "Wrong alignment on RBRoomGroup_BP_GetVolumeList");
static_assert(sizeof(RBRoomGroup_BP_GetVolumeList) == 0x000010, "Wrong size on RBRoomGroup_BP_GetVolumeList");
static_assert(offsetof(RBRoomGroup_BP_GetVolumeList, ReturnValue) == 0x000000, "Member 'RBRoomGroup_BP_GetVolumeList::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOption.BP_GetCost
// 0x0058 (0x0058 - 0x0000)
struct RBCustomizationOption_BP_GetCost final
{
public:
	const class ARBPlayerState*                   RBPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECurrencyType, int32>                    ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomizationOption_BP_GetCost) == 0x000008, "Wrong alignment on RBCustomizationOption_BP_GetCost");
static_assert(sizeof(RBCustomizationOption_BP_GetCost) == 0x000058, "Wrong size on RBCustomizationOption_BP_GetCost");
static_assert(offsetof(RBCustomizationOption_BP_GetCost, RBPlayerState) == 0x000000, "Member 'RBCustomizationOption_BP_GetCost::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBCustomizationOption_BP_GetCost, ReturnValue) == 0x000008, "Member 'RBCustomizationOption_BP_GetCost::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOption.IsAcquired
// 0x0010 (0x0010 - 0x0000)
struct RBCustomizationOption_IsAcquired final
{
public:
	const class ARBPlayerState*                   PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B7E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCustomizationOption_IsAcquired) == 0x000008, "Wrong alignment on RBCustomizationOption_IsAcquired");
static_assert(sizeof(RBCustomizationOption_IsAcquired) == 0x000010, "Wrong size on RBCustomizationOption_IsAcquired");
static_assert(offsetof(RBCustomizationOption_IsAcquired, PlayerState) == 0x000000, "Member 'RBCustomizationOption_IsAcquired::PlayerState' has a wrong offset!");
static_assert(offsetof(RBCustomizationOption_IsAcquired, ReturnValue) == 0x000008, "Member 'RBCustomizationOption_IsAcquired::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOption.IsDevOption
// 0x0001 (0x0001 - 0x0000)
struct RBCustomizationOption_IsDevOption final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomizationOption_IsDevOption) == 0x000001, "Wrong alignment on RBCustomizationOption_IsDevOption");
static_assert(sizeof(RBCustomizationOption_IsDevOption) == 0x000001, "Wrong size on RBCustomizationOption_IsDevOption");
static_assert(offsetof(RBCustomizationOption_IsDevOption, ReturnValue) == 0x000000, "Member 'RBCustomizationOption_IsDevOption::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOption.IsPartOfDLCContentPack
// 0x0001 (0x0001 - 0x0000)
struct RBCustomizationOption_IsPartOfDLCContentPack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomizationOption_IsPartOfDLCContentPack) == 0x000001, "Wrong alignment on RBCustomizationOption_IsPartOfDLCContentPack");
static_assert(sizeof(RBCustomizationOption_IsPartOfDLCContentPack) == 0x000001, "Wrong size on RBCustomizationOption_IsPartOfDLCContentPack");
static_assert(offsetof(RBCustomizationOption_IsPartOfDLCContentPack, ReturnValue) == 0x000000, "Member 'RBCustomizationOption_IsPartOfDLCContentPack::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOption.IsUnlocked
// 0x0010 (0x0010 - 0x0000)
struct RBCustomizationOption_IsUnlocked final
{
public:
	const class ARBPlayerState*                   PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B7F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCustomizationOption_IsUnlocked) == 0x000008, "Wrong alignment on RBCustomizationOption_IsUnlocked");
static_assert(sizeof(RBCustomizationOption_IsUnlocked) == 0x000010, "Wrong size on RBCustomizationOption_IsUnlocked");
static_assert(offsetof(RBCustomizationOption_IsUnlocked, PlayerState) == 0x000000, "Member 'RBCustomizationOption_IsUnlocked::PlayerState' has a wrong offset!");
static_assert(offsetof(RBCustomizationOption_IsUnlocked, ReturnValue) == 0x000008, "Member 'RBCustomizationOption_IsUnlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOption.BP_GetAllResourcesToLoad
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerCustomizationOption_BP_GetAllResourcesToLoad final
{
public:
	bool                                          IsFemale;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B83[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOption_BP_GetAllResourcesToLoad) == 0x000008, "Wrong alignment on RBPlayerCustomizationOption_BP_GetAllResourcesToLoad");
static_assert(sizeof(RBPlayerCustomizationOption_BP_GetAllResourcesToLoad) == 0x000018, "Wrong size on RBPlayerCustomizationOption_BP_GetAllResourcesToLoad");
static_assert(offsetof(RBPlayerCustomizationOption_BP_GetAllResourcesToLoad, IsFemale) == 0x000000, "Member 'RBPlayerCustomizationOption_BP_GetAllResourcesToLoad::IsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationOption_BP_GetAllResourcesToLoad, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationOption_BP_GetAllResourcesToLoad::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOption.BP_GetMaterialOverrideInstancesMap
// 0x0058 (0x0058 - 0x0000)
struct RBPlayerCustomizationOption_BP_GetMaterialOverrideInstancesMap final
{
public:
	bool                                          bIsFemale;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B84[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UMaterialInstanceConstant*> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOption_BP_GetMaterialOverrideInstancesMap) == 0x000008, "Wrong alignment on RBPlayerCustomizationOption_BP_GetMaterialOverrideInstancesMap");
static_assert(sizeof(RBPlayerCustomizationOption_BP_GetMaterialOverrideInstancesMap) == 0x000058, "Wrong size on RBPlayerCustomizationOption_BP_GetMaterialOverrideInstancesMap");
static_assert(offsetof(RBPlayerCustomizationOption_BP_GetMaterialOverrideInstancesMap, bIsFemale) == 0x000000, "Member 'RBPlayerCustomizationOption_BP_GetMaterialOverrideInstancesMap::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationOption_BP_GetMaterialOverrideInstancesMap, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationOption_BP_GetMaterialOverrideInstancesMap::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOption.GetExtraSkeletalMeshes
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerCustomizationOption_GetExtraSkeletalMeshes final
{
public:
	bool                                          bIsFemale;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B85[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USkeletalMesh>>   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOption_GetExtraSkeletalMeshes) == 0x000008, "Wrong alignment on RBPlayerCustomizationOption_GetExtraSkeletalMeshes");
static_assert(sizeof(RBPlayerCustomizationOption_GetExtraSkeletalMeshes) == 0x000018, "Wrong size on RBPlayerCustomizationOption_GetExtraSkeletalMeshes");
static_assert(offsetof(RBPlayerCustomizationOption_GetExtraSkeletalMeshes, bIsFemale) == 0x000000, "Member 'RBPlayerCustomizationOption_GetExtraSkeletalMeshes::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationOption_GetExtraSkeletalMeshes, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationOption_GetExtraSkeletalMeshes::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOption.GetMaterialOverrides
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerCustomizationOption_GetMaterialOverrides final
{
public:
	bool                                          bIsFemale;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B86[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRBPlayerCustomizationMaterialOverride> ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOption_GetMaterialOverrides) == 0x000008, "Wrong alignment on RBPlayerCustomizationOption_GetMaterialOverrides");
static_assert(sizeof(RBPlayerCustomizationOption_GetMaterialOverrides) == 0x000018, "Wrong size on RBPlayerCustomizationOption_GetMaterialOverrides");
static_assert(offsetof(RBPlayerCustomizationOption_GetMaterialOverrides, bIsFemale) == 0x000000, "Member 'RBPlayerCustomizationOption_GetMaterialOverrides::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationOption_GetMaterialOverrides, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationOption_GetMaterialOverrides::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOption.GetSkeletalMesh
// 0x0030 (0x0030 - 0x0000)
struct RBPlayerCustomizationOption_GetSkeletalMesh final
{
public:
	bool                                          bIsFemale;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B87[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOption_GetSkeletalMesh) == 0x000008, "Wrong alignment on RBPlayerCustomizationOption_GetSkeletalMesh");
static_assert(sizeof(RBPlayerCustomizationOption_GetSkeletalMesh) == 0x000030, "Wrong size on RBPlayerCustomizationOption_GetSkeletalMesh");
static_assert(offsetof(RBPlayerCustomizationOption_GetSkeletalMesh, bIsFemale) == 0x000000, "Member 'RBPlayerCustomizationOption_GetSkeletalMesh::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationOption_GetSkeletalMesh, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationOption_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOption.GetStaticMesh
// 0x0030 (0x0030 - 0x0000)
struct RBPlayerCustomizationOption_GetStaticMesh final
{
public:
	bool                                          bIsFemale;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B88[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOption_GetStaticMesh) == 0x000008, "Wrong alignment on RBPlayerCustomizationOption_GetStaticMesh");
static_assert(sizeof(RBPlayerCustomizationOption_GetStaticMesh) == 0x000030, "Wrong size on RBPlayerCustomizationOption_GetStaticMesh");
static_assert(offsetof(RBPlayerCustomizationOption_GetStaticMesh, bIsFemale) == 0x000000, "Member 'RBPlayerCustomizationOption_GetStaticMesh::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationOption_GetStaticMesh, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationOption_GetStaticMesh::ReturnValue' has a wrong offset!");

// Function OPP.RBAutoCompleteStageTestAgent.OnFindHubCompleted
// 0x0002 (0x0002 - 0x0000)
struct RBAutoCompleteStageTestAgent_OnFindHubCompleted final
{
public:
	bool                                          bPending;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAutoCompleteStageTestAgent_OnFindHubCompleted) == 0x000001, "Wrong alignment on RBAutoCompleteStageTestAgent_OnFindHubCompleted");
static_assert(sizeof(RBAutoCompleteStageTestAgent_OnFindHubCompleted) == 0x000002, "Wrong size on RBAutoCompleteStageTestAgent_OnFindHubCompleted");
static_assert(offsetof(RBAutoCompleteStageTestAgent_OnFindHubCompleted, bPending) == 0x000000, "Member 'RBAutoCompleteStageTestAgent_OnFindHubCompleted::bPending' has a wrong offset!");
static_assert(offsetof(RBAutoCompleteStageTestAgent_OnFindHubCompleted, bSucceeded) == 0x000001, "Member 'RBAutoCompleteStageTestAgent_OnFindHubCompleted::bSucceeded' has a wrong offset!");

// Function OPP.RBAutoCompleteStageTestAgent.OnGamePhaseUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBAutoCompleteStageTestAgent_OnGamePhaseUpdated final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAutoCompleteStageTestAgent_OnGamePhaseUpdated) == 0x000001, "Wrong alignment on RBAutoCompleteStageTestAgent_OnGamePhaseUpdated");
static_assert(sizeof(RBAutoCompleteStageTestAgent_OnGamePhaseUpdated) == 0x000001, "Wrong size on RBAutoCompleteStageTestAgent_OnGamePhaseUpdated");
static_assert(offsetof(RBAutoCompleteStageTestAgent_OnGamePhaseUpdated, GamePhase) == 0x000000, "Member 'RBAutoCompleteStageTestAgent_OnGamePhaseUpdated::GamePhase' has a wrong offset!");

// Function OPP.RBAutoCompleteStageTestAgent.OnStageEnded
// 0x0058 (0x0058 - 0x0000)
struct RBAutoCompleteStageTestAgent_OnStageEnded final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bisReset;                                          // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B90[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAutoCompleteStageTestAgent_OnStageEnded) == 0x000008, "Wrong alignment on RBAutoCompleteStageTestAgent_OnStageEnded");
static_assert(sizeof(RBAutoCompleteStageTestAgent_OnStageEnded) == 0x000058, "Wrong size on RBAutoCompleteStageTestAgent_OnStageEnded");
static_assert(offsetof(RBAutoCompleteStageTestAgent_OnStageEnded, StageID) == 0x000000, "Member 'RBAutoCompleteStageTestAgent_OnStageEnded::StageID' has a wrong offset!");
static_assert(offsetof(RBAutoCompleteStageTestAgent_OnStageEnded, MissionID) == 0x000028, "Member 'RBAutoCompleteStageTestAgent_OnStageEnded::MissionID' has a wrong offset!");
static_assert(offsetof(RBAutoCompleteStageTestAgent_OnStageEnded, bisReset) == 0x000050, "Member 'RBAutoCompleteStageTestAgent_OnStageEnded::bisReset' has a wrong offset!");

// Function OPP.RBAutoCompleteStageTestAgent.OnStageReady
// 0x0050 (0x0050 - 0x0000)
struct RBAutoCompleteStageTestAgent_OnStageReady final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAutoCompleteStageTestAgent_OnStageReady) == 0x000008, "Wrong alignment on RBAutoCompleteStageTestAgent_OnStageReady");
static_assert(sizeof(RBAutoCompleteStageTestAgent_OnStageReady) == 0x000050, "Wrong size on RBAutoCompleteStageTestAgent_OnStageReady");
static_assert(offsetof(RBAutoCompleteStageTestAgent_OnStageReady, StageID) == 0x000000, "Member 'RBAutoCompleteStageTestAgent_OnStageReady::StageID' has a wrong offset!");
static_assert(offsetof(RBAutoCompleteStageTestAgent_OnStageReady, MissionID) == 0x000028, "Member 'RBAutoCompleteStageTestAgent_OnStageReady::MissionID' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.OnButtonHeldChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectorItem_OnButtonHeldChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_OnButtonHeldChangedCallback) == 0x000001, "Wrong alignment on RBProximityDetectorItem_OnButtonHeldChangedCallback");
static_assert(sizeof(RBProximityDetectorItem_OnButtonHeldChangedCallback) == 0x000001, "Wrong size on RBProximityDetectorItem_OnButtonHeldChangedCallback");
static_assert(offsetof(RBProximityDetectorItem_OnButtonHeldChangedCallback, ChangedType) == 0x000000, "Member 'RBProximityDetectorItem_OnButtonHeldChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.OnDetectorStateChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectorItem_OnDetectorStateChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_OnDetectorStateChangedCallback) == 0x000001, "Wrong alignment on RBProximityDetectorItem_OnDetectorStateChangedCallback");
static_assert(sizeof(RBProximityDetectorItem_OnDetectorStateChangedCallback) == 0x000001, "Wrong size on RBProximityDetectorItem_OnDetectorStateChangedCallback");
static_assert(offsetof(RBProximityDetectorItem_OnDetectorStateChangedCallback, ChangedType) == 0x000000, "Member 'RBProximityDetectorItem_OnDetectorStateChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.OnProximityComponentDetectedChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectorItem_OnProximityComponentDetectedChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_OnProximityComponentDetectedChangedCallback) == 0x000001, "Wrong alignment on RBProximityDetectorItem_OnProximityComponentDetectedChangedCallback");
static_assert(sizeof(RBProximityDetectorItem_OnProximityComponentDetectedChangedCallback) == 0x000001, "Wrong size on RBProximityDetectorItem_OnProximityComponentDetectedChangedCallback");
static_assert(offsetof(RBProximityDetectorItem_OnProximityComponentDetectedChangedCallback, ChangedType) == 0x000000, "Member 'RBProximityDetectorItem_OnProximityComponentDetectedChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.BP_GetProgress
// 0x0004 (0x0004 - 0x0000)
struct RBProximityDetectorItem_BP_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_BP_GetProgress) == 0x000004, "Wrong alignment on RBProximityDetectorItem_BP_GetProgress");
static_assert(sizeof(RBProximityDetectorItem_BP_GetProgress) == 0x000004, "Wrong size on RBProximityDetectorItem_BP_GetProgress");
static_assert(offsetof(RBProximityDetectorItem_BP_GetProgress, ReturnValue) == 0x000000, "Member 'RBProximityDetectorItem_BP_GetProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.BP_IsHolding
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectorItem_BP_IsHolding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_BP_IsHolding) == 0x000001, "Wrong alignment on RBProximityDetectorItem_BP_IsHolding");
static_assert(sizeof(RBProximityDetectorItem_BP_IsHolding) == 0x000001, "Wrong size on RBProximityDetectorItem_BP_IsHolding");
static_assert(offsetof(RBProximityDetectorItem_BP_IsHolding, ReturnValue) == 0x000000, "Member 'RBProximityDetectorItem_BP_IsHolding::ReturnValue' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.GetDeviceType
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectorItem_GetDeviceType final
{
public:
	EProximityDetectorDeviceType                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_GetDeviceType) == 0x000001, "Wrong alignment on RBProximityDetectorItem_GetDeviceType");
static_assert(sizeof(RBProximityDetectorItem_GetDeviceType) == 0x000001, "Wrong size on RBProximityDetectorItem_GetDeviceType");
static_assert(offsetof(RBProximityDetectorItem_GetDeviceType, ReturnValue) == 0x000000, "Member 'RBProximityDetectorItem_GetDeviceType::ReturnValue' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.GetProximityComponentDetected
// 0x0008 (0x0008 - 0x0000)
struct RBProximityDetectorItem_GetProximityComponentDetected final
{
public:
	class URBProximityDetectableComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_GetProximityComponentDetected) == 0x000008, "Wrong alignment on RBProximityDetectorItem_GetProximityComponentDetected");
static_assert(sizeof(RBProximityDetectorItem_GetProximityComponentDetected) == 0x000008, "Wrong size on RBProximityDetectorItem_GetProximityComponentDetected");
static_assert(offsetof(RBProximityDetectorItem_GetProximityComponentDetected, ReturnValue) == 0x000000, "Member 'RBProximityDetectorItem_GetProximityComponentDetected::ReturnValue' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.GetProximityLevel
// 0x0004 (0x0004 - 0x0000)
struct RBProximityDetectorItem_GetProximityLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_GetProximityLevel) == 0x000004, "Wrong alignment on RBProximityDetectorItem_GetProximityLevel");
static_assert(sizeof(RBProximityDetectorItem_GetProximityLevel) == 0x000004, "Wrong size on RBProximityDetectorItem_GetProximityLevel");
static_assert(offsetof(RBProximityDetectorItem_GetProximityLevel, ReturnValue) == 0x000000, "Member 'RBProximityDetectorItem_GetProximityLevel::ReturnValue' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.GetProximityZLevelState
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectorItem_GetProximityZLevelState final
{
public:
	EProximityDetectorZLevelState                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_GetProximityZLevelState) == 0x000001, "Wrong alignment on RBProximityDetectorItem_GetProximityZLevelState");
static_assert(sizeof(RBProximityDetectorItem_GetProximityZLevelState) == 0x000001, "Wrong size on RBProximityDetectorItem_GetProximityZLevelState");
static_assert(offsetof(RBProximityDetectorItem_GetProximityZLevelState, ReturnValue) == 0x000000, "Member 'RBProximityDetectorItem_GetProximityZLevelState::ReturnValue' has a wrong offset!");

// Function OPP.RBProximityDetectorItem.IsHoldingButton
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectorItem_IsHoldingButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectorItem_IsHoldingButton) == 0x000001, "Wrong alignment on RBProximityDetectorItem_IsHoldingButton");
static_assert(sizeof(RBProximityDetectorItem_IsHoldingButton) == 0x000001, "Wrong size on RBProximityDetectorItem_IsHoldingButton");
static_assert(offsetof(RBProximityDetectorItem_IsHoldingButton, ReturnValue) == 0x000000, "Member 'RBProximityDetectorItem_IsHoldingButton::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatable.BP_ForceDesiredProgression
// 0x0008 (0x0008 - 0x0000)
struct RBOperatable_BP_ForceDesiredProgression final
{
public:
	float                                         DesiredProgression;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressionSpeed;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_BP_ForceDesiredProgression) == 0x000004, "Wrong alignment on RBOperatable_BP_ForceDesiredProgression");
static_assert(sizeof(RBOperatable_BP_ForceDesiredProgression) == 0x000008, "Wrong size on RBOperatable_BP_ForceDesiredProgression");
static_assert(offsetof(RBOperatable_BP_ForceDesiredProgression, DesiredProgression) == 0x000000, "Member 'RBOperatable_BP_ForceDesiredProgression::DesiredProgression' has a wrong offset!");
static_assert(offsetof(RBOperatable_BP_ForceDesiredProgression, ProgressionSpeed) == 0x000004, "Member 'RBOperatable_BP_ForceDesiredProgression::ProgressionSpeed' has a wrong offset!");

// Function OPP.RBOperatable.BP_ForceInteraction
// 0x0001 (0x0001 - 0x0000)
struct RBOperatable_BP_ForceInteraction final
{
public:
	bool                                          bBypassCompletion;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_BP_ForceInteraction) == 0x000001, "Wrong alignment on RBOperatable_BP_ForceInteraction");
static_assert(sizeof(RBOperatable_BP_ForceInteraction) == 0x000001, "Wrong size on RBOperatable_BP_ForceInteraction");
static_assert(offsetof(RBOperatable_BP_ForceInteraction, bBypassCompletion) == 0x000000, "Member 'RBOperatable_BP_ForceInteraction::bBypassCompletion' has a wrong offset!");

// Function OPP.RBOperatable.BP_ForceState
// 0x0001 (0x0001 - 0x0000)
struct RBOperatable_BP_ForceState final
{
public:
	bool                                          bForcedState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_BP_ForceState) == 0x000001, "Wrong alignment on RBOperatable_BP_ForceState");
static_assert(sizeof(RBOperatable_BP_ForceState) == 0x000001, "Wrong size on RBOperatable_BP_ForceState");
static_assert(offsetof(RBOperatable_BP_ForceState, bForcedState) == 0x000000, "Member 'RBOperatable_BP_ForceState::bForcedState' has a wrong offset!");

// Function OPP.RBOperatable.BP_SetIsDenyInteraction
// 0x0001 (0x0001 - 0x0000)
struct RBOperatable_BP_SetIsDenyInteraction final
{
public:
	bool                                          bDeny;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_BP_SetIsDenyInteraction) == 0x000001, "Wrong alignment on RBOperatable_BP_SetIsDenyInteraction");
static_assert(sizeof(RBOperatable_BP_SetIsDenyInteraction) == 0x000001, "Wrong size on RBOperatable_BP_SetIsDenyInteraction");
static_assert(offsetof(RBOperatable_BP_SetIsDenyInteraction, bDeny) == 0x000000, "Member 'RBOperatable_BP_SetIsDenyInteraction::bDeny' has a wrong offset!");

// Function OPP.RBOperatable.Event_OnCompletedOperation
// 0x0010 (0x0010 - 0x0000)
struct RBOperatable_Event_OnCompletedOperation final
{
public:
	TArray<class ARBPawn*>                        Pawns;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Event_OnCompletedOperation) == 0x000008, "Wrong alignment on RBOperatable_Event_OnCompletedOperation");
static_assert(sizeof(RBOperatable_Event_OnCompletedOperation) == 0x000010, "Wrong size on RBOperatable_Event_OnCompletedOperation");
static_assert(offsetof(RBOperatable_Event_OnCompletedOperation, Pawns) == 0x000000, "Member 'RBOperatable_Event_OnCompletedOperation::Pawns' has a wrong offset!");

// Function OPP.RBOperatable.Event_OnOperationProgressChanged
// 0x0004 (0x0004 - 0x0000)
struct RBOperatable_Event_OnOperationProgressChanged final
{
public:
	float                                         CurrentProgressRatio;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Event_OnOperationProgressChanged) == 0x000004, "Wrong alignment on RBOperatable_Event_OnOperationProgressChanged");
static_assert(sizeof(RBOperatable_Event_OnOperationProgressChanged) == 0x000004, "Wrong size on RBOperatable_Event_OnOperationProgressChanged");
static_assert(offsetof(RBOperatable_Event_OnOperationProgressChanged, CurrentProgressRatio) == 0x000000, "Member 'RBOperatable_Event_OnOperationProgressChanged::CurrentProgressRatio' has a wrong offset!");

// Function OPP.RBOperatable.Event_OnResetCompletedState
// 0x0004 (0x0004 - 0x0000)
struct RBOperatable_Event_OnResetCompletedState final
{
public:
	float                                         OldProgression;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Event_OnResetCompletedState) == 0x000004, "Wrong alignment on RBOperatable_Event_OnResetCompletedState");
static_assert(sizeof(RBOperatable_Event_OnResetCompletedState) == 0x000004, "Wrong size on RBOperatable_Event_OnResetCompletedState");
static_assert(offsetof(RBOperatable_Event_OnResetCompletedState, OldProgression) == 0x000000, "Member 'RBOperatable_Event_OnResetCompletedState::OldProgression' has a wrong offset!");

// Function OPP.RBOperatable.Event_OnStartOperating
// 0x0008 (0x0008 - 0x0000)
struct RBOperatable_Event_OnStartOperating final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Event_OnStartOperating) == 0x000008, "Wrong alignment on RBOperatable_Event_OnStartOperating");
static_assert(sizeof(RBOperatable_Event_OnStartOperating) == 0x000008, "Wrong size on RBOperatable_Event_OnStartOperating");
static_assert(offsetof(RBOperatable_Event_OnStartOperating, Pawn) == 0x000000, "Member 'RBOperatable_Event_OnStartOperating::Pawn' has a wrong offset!");

// Function OPP.RBOperatable.Event_OnStateOnChanged
// 0x0001 (0x0001 - 0x0000)
struct RBOperatable_Event_OnStateOnChanged final
{
public:
	bool                                          bStateOn;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Event_OnStateOnChanged) == 0x000001, "Wrong alignment on RBOperatable_Event_OnStateOnChanged");
static_assert(sizeof(RBOperatable_Event_OnStateOnChanged) == 0x000001, "Wrong size on RBOperatable_Event_OnStateOnChanged");
static_assert(offsetof(RBOperatable_Event_OnStateOnChanged, bStateOn) == 0x000000, "Member 'RBOperatable_Event_OnStateOnChanged::bStateOn' has a wrong offset!");

// Function OPP.RBOperatable.Event_OnStopOperating
// 0x0008 (0x0008 - 0x0000)
struct RBOperatable_Event_OnStopOperating final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Event_OnStopOperating) == 0x000008, "Wrong alignment on RBOperatable_Event_OnStopOperating");
static_assert(sizeof(RBOperatable_Event_OnStopOperating) == 0x000008, "Wrong size on RBOperatable_Event_OnStopOperating");
static_assert(offsetof(RBOperatable_Event_OnStopOperating, Pawn) == 0x000000, "Member 'RBOperatable_Event_OnStopOperating::Pawn' has a wrong offset!");

// Function OPP.RBOperatable.Event_OnTriggerableActivated
// 0x0008 (0x0008 - 0x0000)
struct RBOperatable_Event_OnTriggerableActivated final
{
public:
	class ARBTriggerable*                         Triggerable;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Event_OnTriggerableActivated) == 0x000008, "Wrong alignment on RBOperatable_Event_OnTriggerableActivated");
static_assert(sizeof(RBOperatable_Event_OnTriggerableActivated) == 0x000008, "Wrong size on RBOperatable_Event_OnTriggerableActivated");
static_assert(offsetof(RBOperatable_Event_OnTriggerableActivated, Triggerable) == 0x000000, "Member 'RBOperatable_Event_OnTriggerableActivated::Triggerable' has a wrong offset!");

// Function OPP.RBOperatable.Event_OnTriggerableDeactivated
// 0x0008 (0x0008 - 0x0000)
struct RBOperatable_Event_OnTriggerableDeactivated final
{
public:
	class ARBTriggerable*                         Triggerable;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Event_OnTriggerableDeactivated) == 0x000008, "Wrong alignment on RBOperatable_Event_OnTriggerableDeactivated");
static_assert(sizeof(RBOperatable_Event_OnTriggerableDeactivated) == 0x000008, "Wrong size on RBOperatable_Event_OnTriggerableDeactivated");
static_assert(offsetof(RBOperatable_Event_OnTriggerableDeactivated, Triggerable) == 0x000000, "Member 'RBOperatable_Event_OnTriggerableDeactivated::Triggerable' has a wrong offset!");

// Function OPP.RBOperatable.Multicast_ForceState
// 0x0008 (0x0008 - 0x0000)
struct RBOperatable_Multicast_ForceState final
{
public:
	float                                         OldProgression;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForcedState;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB4[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBOperatable_Multicast_ForceState) == 0x000004, "Wrong alignment on RBOperatable_Multicast_ForceState");
static_assert(sizeof(RBOperatable_Multicast_ForceState) == 0x000008, "Wrong size on RBOperatable_Multicast_ForceState");
static_assert(offsetof(RBOperatable_Multicast_ForceState, OldProgression) == 0x000000, "Member 'RBOperatable_Multicast_ForceState::OldProgression' has a wrong offset!");
static_assert(offsetof(RBOperatable_Multicast_ForceState, bForcedState) == 0x000004, "Member 'RBOperatable_Multicast_ForceState::bForcedState' has a wrong offset!");

// Function OPP.RBOperatable.Multicast_OnCompletedOperation
// 0x0018 (0x0018 - 0x0000)
struct RBOperatable_Multicast_OnCompletedOperation final
{
public:
	float                                         OldProgression;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBPawn*>                        CompletedByPawnListValue;                          // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Multicast_OnCompletedOperation) == 0x000008, "Wrong alignment on RBOperatable_Multicast_OnCompletedOperation");
static_assert(sizeof(RBOperatable_Multicast_OnCompletedOperation) == 0x000018, "Wrong size on RBOperatable_Multicast_OnCompletedOperation");
static_assert(offsetof(RBOperatable_Multicast_OnCompletedOperation, OldProgression) == 0x000000, "Member 'RBOperatable_Multicast_OnCompletedOperation::OldProgression' has a wrong offset!");
static_assert(offsetof(RBOperatable_Multicast_OnCompletedOperation, CompletedByPawnListValue) == 0x000008, "Member 'RBOperatable_Multicast_OnCompletedOperation::CompletedByPawnListValue' has a wrong offset!");

// Function OPP.RBOperatable.Multicast_OnStopInteractOperatable
// 0x0010 (0x0010 - 0x0000)
struct RBOperatable_Multicast_OnStopInteractOperatable final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Server_CurrentOperateOnStop;                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB6[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBOperatable_Multicast_OnStopInteractOperatable) == 0x000008, "Wrong alignment on RBOperatable_Multicast_OnStopInteractOperatable");
static_assert(sizeof(RBOperatable_Multicast_OnStopInteractOperatable) == 0x000010, "Wrong size on RBOperatable_Multicast_OnStopInteractOperatable");
static_assert(offsetof(RBOperatable_Multicast_OnStopInteractOperatable, Pawn) == 0x000000, "Member 'RBOperatable_Multicast_OnStopInteractOperatable::Pawn' has a wrong offset!");
static_assert(offsetof(RBOperatable_Multicast_OnStopInteractOperatable, Server_CurrentOperateOnStop) == 0x000008, "Member 'RBOperatable_Multicast_OnStopInteractOperatable::Server_CurrentOperateOnStop' has a wrong offset!");

// Function OPP.RBOperatable.Multicast_ResetCompletedState
// 0x0004 (0x0004 - 0x0000)
struct RBOperatable_Multicast_ResetCompletedState final
{
public:
	float                                         OldProgression;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_Multicast_ResetCompletedState) == 0x000004, "Wrong alignment on RBOperatable_Multicast_ResetCompletedState");
static_assert(sizeof(RBOperatable_Multicast_ResetCompletedState) == 0x000004, "Wrong size on RBOperatable_Multicast_ResetCompletedState");
static_assert(offsetof(RBOperatable_Multicast_ResetCompletedState, OldProgression) == 0x000000, "Member 'RBOperatable_Multicast_ResetCompletedState::OldProgression' has a wrong offset!");

// Function OPP.RBOperatable.BP_CanOperateWith
// 0x0010 (0x0010 - 0x0000)
struct RBOperatable_BP_CanOperateWith final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBOperatable_BP_CanOperateWith) == 0x000008, "Wrong alignment on RBOperatable_BP_CanOperateWith");
static_assert(sizeof(RBOperatable_BP_CanOperateWith) == 0x000010, "Wrong size on RBOperatable_BP_CanOperateWith");
static_assert(offsetof(RBOperatable_BP_CanOperateWith, Pawn) == 0x000000, "Member 'RBOperatable_BP_CanOperateWith::Pawn' has a wrong offset!");
static_assert(offsetof(RBOperatable_BP_CanOperateWith, ReturnValue) == 0x000008, "Member 'RBOperatable_BP_CanOperateWith::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatable.BP_GetCurrentProgressionRatio
// 0x0004 (0x0004 - 0x0000)
struct RBOperatable_BP_GetCurrentProgressionRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_BP_GetCurrentProgressionRatio) == 0x000004, "Wrong alignment on RBOperatable_BP_GetCurrentProgressionRatio");
static_assert(sizeof(RBOperatable_BP_GetCurrentProgressionRatio) == 0x000004, "Wrong size on RBOperatable_BP_GetCurrentProgressionRatio");
static_assert(offsetof(RBOperatable_BP_GetCurrentProgressionRatio, ReturnValue) == 0x000000, "Member 'RBOperatable_BP_GetCurrentProgressionRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatable.DefaultTestPhysicsClearance
// 0x0010 (0x0010 - 0x0000)
struct RBOperatable_DefaultTestPhysicsClearance final
{
public:
	const class ARBPawn*                          InteractorPawn;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BB8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBOperatable_DefaultTestPhysicsClearance) == 0x000008, "Wrong alignment on RBOperatable_DefaultTestPhysicsClearance");
static_assert(sizeof(RBOperatable_DefaultTestPhysicsClearance) == 0x000010, "Wrong size on RBOperatable_DefaultTestPhysicsClearance");
static_assert(offsetof(RBOperatable_DefaultTestPhysicsClearance, InteractorPawn) == 0x000000, "Member 'RBOperatable_DefaultTestPhysicsClearance::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBOperatable_DefaultTestPhysicsClearance, ReturnValue) == 0x000008, "Member 'RBOperatable_DefaultTestPhysicsClearance::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatable.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBOperatable_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_IsCompleted) == 0x000001, "Wrong alignment on RBOperatable_IsCompleted");
static_assert(sizeof(RBOperatable_IsCompleted) == 0x000001, "Wrong size on RBOperatable_IsCompleted");
static_assert(offsetof(RBOperatable_IsCompleted, ReturnValue) == 0x000000, "Member 'RBOperatable_IsCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatable.IsCurrentlyBeingOperated
// 0x0001 (0x0001 - 0x0000)
struct RBOperatable_IsCurrentlyBeingOperated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatable_IsCurrentlyBeingOperated) == 0x000001, "Wrong alignment on RBOperatable_IsCurrentlyBeingOperated");
static_assert(sizeof(RBOperatable_IsCurrentlyBeingOperated) == 0x000001, "Wrong size on RBOperatable_IsCurrentlyBeingOperated");
static_assert(offsetof(RBOperatable_IsCurrentlyBeingOperated, ReturnValue) == 0x000000, "Member 'RBOperatable_IsCurrentlyBeingOperated::ReturnValue' has a wrong offset!");

// Function OPP.RBAutoRespawnContainer.BP_SetAutoRespawnForcedItemsEnabled
// 0x0002 (0x0002 - 0x0000)
struct RBAutoRespawnContainer_BP_SetAutoRespawnForcedItemsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnRightNow;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAutoRespawnContainer_BP_SetAutoRespawnForcedItemsEnabled) == 0x000001, "Wrong alignment on RBAutoRespawnContainer_BP_SetAutoRespawnForcedItemsEnabled");
static_assert(sizeof(RBAutoRespawnContainer_BP_SetAutoRespawnForcedItemsEnabled) == 0x000002, "Wrong size on RBAutoRespawnContainer_BP_SetAutoRespawnForcedItemsEnabled");
static_assert(offsetof(RBAutoRespawnContainer_BP_SetAutoRespawnForcedItemsEnabled, bEnabled) == 0x000000, "Member 'RBAutoRespawnContainer_BP_SetAutoRespawnForcedItemsEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(RBAutoRespawnContainer_BP_SetAutoRespawnForcedItemsEnabled, bSpawnRightNow) == 0x000001, "Member 'RBAutoRespawnContainer_BP_SetAutoRespawnForcedItemsEnabled::bSpawnRightNow' has a wrong offset!");

// Function OPP.RBAutoRespawnContainer.Event_OnAutoRespawnItemsEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct RBAutoRespawnContainer_Event_OnAutoRespawnItemsEnabledChanged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAutoRespawnContainer_Event_OnAutoRespawnItemsEnabledChanged) == 0x000001, "Wrong alignment on RBAutoRespawnContainer_Event_OnAutoRespawnItemsEnabledChanged");
static_assert(sizeof(RBAutoRespawnContainer_Event_OnAutoRespawnItemsEnabledChanged) == 0x000001, "Wrong size on RBAutoRespawnContainer_Event_OnAutoRespawnItemsEnabledChanged");
static_assert(offsetof(RBAutoRespawnContainer_Event_OnAutoRespawnItemsEnabledChanged, bEnabled) == 0x000000, "Member 'RBAutoRespawnContainer_Event_OnAutoRespawnItemsEnabledChanged::bEnabled' has a wrong offset!");

// Function OPP.RBDoor.ApplyDoorframeOffsetToTransform
// 0x0080 (0x0080 - 0x0000)
struct RBDoor_ApplyDoorframeOffsetToTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsAddonInFront;                                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE1[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetDirection;                                   // 0x0034(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplySideOffset;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE2[0xF];                                     // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0050(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_ApplyDoorframeOffsetToTransform) == 0x000010, "Wrong alignment on RBDoor_ApplyDoorframeOffsetToTransform");
static_assert(sizeof(RBDoor_ApplyDoorframeOffsetToTransform) == 0x000080, "Wrong size on RBDoor_ApplyDoorframeOffsetToTransform");
static_assert(offsetof(RBDoor_ApplyDoorframeOffsetToTransform, Transform) == 0x000000, "Member 'RBDoor_ApplyDoorframeOffsetToTransform::Transform' has a wrong offset!");
static_assert(offsetof(RBDoor_ApplyDoorframeOffsetToTransform, IsAddonInFront) == 0x000030, "Member 'RBDoor_ApplyDoorframeOffsetToTransform::IsAddonInFront' has a wrong offset!");
static_assert(offsetof(RBDoor_ApplyDoorframeOffsetToTransform, OffsetDirection) == 0x000034, "Member 'RBDoor_ApplyDoorframeOffsetToTransform::OffsetDirection' has a wrong offset!");
static_assert(offsetof(RBDoor_ApplyDoorframeOffsetToTransform, bApplySideOffset) == 0x000040, "Member 'RBDoor_ApplyDoorframeOffsetToTransform::bApplySideOffset' has a wrong offset!");
static_assert(offsetof(RBDoor_ApplyDoorframeOffsetToTransform, ReturnValue) == 0x000050, "Member 'RBDoor_ApplyDoorframeOffsetToTransform::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_OnActorAttachedToDoor
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_BP_OnActorAttachedToDoor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_OnActorAttachedToDoor) == 0x000008, "Wrong alignment on RBDoor_BP_OnActorAttachedToDoor");
static_assert(sizeof(RBDoor_BP_OnActorAttachedToDoor) == 0x000008, "Wrong size on RBDoor_BP_OnActorAttachedToDoor");
static_assert(offsetof(RBDoor_BP_OnActorAttachedToDoor, Actor) == 0x000000, "Member 'RBDoor_BP_OnActorAttachedToDoor::Actor' has a wrong offset!");

// Function OPP.RBDoor.BP_OnDoorBarsLockingEvent
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_OnDoorBarsLockingEvent final
{
public:
	bool                                          bLocking;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_OnDoorBarsLockingEvent) == 0x000001, "Wrong alignment on RBDoor_BP_OnDoorBarsLockingEvent");
static_assert(sizeof(RBDoor_BP_OnDoorBarsLockingEvent) == 0x000001, "Wrong size on RBDoor_BP_OnDoorBarsLockingEvent");
static_assert(offsetof(RBDoor_BP_OnDoorBarsLockingEvent, bLocking) == 0x000000, "Member 'RBDoor_BP_OnDoorBarsLockingEvent::bLocking' has a wrong offset!");

// Function OPP.RBDoor.BP_OnDoorBashEvent
// 0x0010 (0x0010 - 0x0000)
struct RBDoor_BP_OnDoorBashEvent final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyVisualDoorDamage;                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBashDoorType                                 bashType;                                          // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE3[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBDoor_BP_OnDoorBashEvent) == 0x000008, "Wrong alignment on RBDoor_BP_OnDoorBashEvent");
static_assert(sizeof(RBDoor_BP_OnDoorBashEvent) == 0x000010, "Wrong size on RBDoor_BP_OnDoorBashEvent");
static_assert(offsetof(RBDoor_BP_OnDoorBashEvent, Pawn) == 0x000000, "Member 'RBDoor_BP_OnDoorBashEvent::Pawn' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_OnDoorBashEvent, bSuccess) == 0x000008, "Member 'RBDoor_BP_OnDoorBashEvent::bSuccess' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_OnDoorBashEvent, bApplyVisualDoorDamage) == 0x000009, "Member 'RBDoor_BP_OnDoorBashEvent::bApplyVisualDoorDamage' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_OnDoorBashEvent, bashType) == 0x00000A, "Member 'RBDoor_BP_OnDoorBashEvent::bashType' has a wrong offset!");

// Function OPP.RBDoor.BP_OnDoorInteract
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_BP_OnDoorInteract final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_OnDoorInteract) == 0x000008, "Wrong alignment on RBDoor_BP_OnDoorInteract");
static_assert(sizeof(RBDoor_BP_OnDoorInteract) == 0x000008, "Wrong size on RBDoor_BP_OnDoorInteract");
static_assert(offsetof(RBDoor_BP_OnDoorInteract, Interactor) == 0x000000, "Member 'RBDoor_BP_OnDoorInteract::Interactor' has a wrong offset!");

// Function OPP.RBDoor.BP_OnDoorTrappedStateChanged
// 0x0002 (0x0002 - 0x0000)
struct RBDoor_BP_OnDoorTrappedStateChanged final
{
public:
	bool                                          bTrapped;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromFront;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_OnDoorTrappedStateChanged) == 0x000001, "Wrong alignment on RBDoor_BP_OnDoorTrappedStateChanged");
static_assert(sizeof(RBDoor_BP_OnDoorTrappedStateChanged) == 0x000002, "Wrong size on RBDoor_BP_OnDoorTrappedStateChanged");
static_assert(offsetof(RBDoor_BP_OnDoorTrappedStateChanged, bTrapped) == 0x000000, "Member 'RBDoor_BP_OnDoorTrappedStateChanged::bTrapped' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_OnDoorTrappedStateChanged, bFromFront) == 0x000001, "Member 'RBDoor_BP_OnDoorTrappedStateChanged::bFromFront' has a wrong offset!");

// Function OPP.RBDoor.BP_OnDoorUnhingeEvent
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_BP_OnDoorUnhingeEvent final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_OnDoorUnhingeEvent) == 0x000008, "Wrong alignment on RBDoor_BP_OnDoorUnhingeEvent");
static_assert(sizeof(RBDoor_BP_OnDoorUnhingeEvent) == 0x000008, "Wrong size on RBDoor_BP_OnDoorUnhingeEvent");
static_assert(offsetof(RBDoor_BP_OnDoorUnhingeEvent, Pawn) == 0x000000, "Member 'RBDoor_BP_OnDoorUnhingeEvent::Pawn' has a wrong offset!");

// Function OPP.RBDoor.BP_OnLockPanelUnlocked
// 0x0010 (0x0010 - 0x0000)
struct RBDoor_BP_OnLockPanelUnlocked final
{
public:
	class URBInteractiblePanelComponent*          LockPanel;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_OnLockPanelUnlocked) == 0x000008, "Wrong alignment on RBDoor_BP_OnLockPanelUnlocked");
static_assert(sizeof(RBDoor_BP_OnLockPanelUnlocked) == 0x000010, "Wrong size on RBDoor_BP_OnLockPanelUnlocked");
static_assert(offsetof(RBDoor_BP_OnLockPanelUnlocked, LockPanel) == 0x000000, "Member 'RBDoor_BP_OnLockPanelUnlocked::LockPanel' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_OnLockPanelUnlocked, Pawn) == 0x000008, "Member 'RBDoor_BP_OnLockPanelUnlocked::Pawn' has a wrong offset!");

// Function OPP.RBDoor.BP_OnNumberOfRewardUnlockActiveChanged
// 0x0004 (0x0004 - 0x0000)
struct RBDoor_BP_OnNumberOfRewardUnlockActiveChanged final
{
public:
	int32                                         Param_NumberOfRewardUnlockActive;                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_OnNumberOfRewardUnlockActiveChanged) == 0x000004, "Wrong alignment on RBDoor_BP_OnNumberOfRewardUnlockActiveChanged");
static_assert(sizeof(RBDoor_BP_OnNumberOfRewardUnlockActiveChanged) == 0x000004, "Wrong size on RBDoor_BP_OnNumberOfRewardUnlockActiveChanged");
static_assert(offsetof(RBDoor_BP_OnNumberOfRewardUnlockActiveChanged, Param_NumberOfRewardUnlockActive) == 0x000000, "Member 'RBDoor_BP_OnNumberOfRewardUnlockActiveChanged::Param_NumberOfRewardUnlockActive' has a wrong offset!");

// Function OPP.RBDoor.BP_Open
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_BP_Open final
{
public:
	bool                                          bFrontSide;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpeedRatio;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_Open) == 0x000004, "Wrong alignment on RBDoor_BP_Open");
static_assert(sizeof(RBDoor_BP_Open) == 0x000008, "Wrong size on RBDoor_BP_Open");
static_assert(offsetof(RBDoor_BP_Open, bFrontSide) == 0x000000, "Member 'RBDoor_BP_Open::bFrontSide' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_Open, SpeedRatio) == 0x000004, "Member 'RBDoor_BP_Open::SpeedRatio' has a wrong offset!");

// Function OPP.RBDoor.BP_Reset
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_Reset final
{
public:
	bool                                          bApplyForceRandomization;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_Reset) == 0x000001, "Wrong alignment on RBDoor_BP_Reset");
static_assert(sizeof(RBDoor_BP_Reset) == 0x000001, "Wrong size on RBDoor_BP_Reset");
static_assert(offsetof(RBDoor_BP_Reset, bApplyForceRandomization) == 0x000000, "Member 'RBDoor_BP_Reset::bApplyForceRandomization' has a wrong offset!");

// Function OPP.RBDoor.BP_SetDynamicReplacement
// 0x0018 (0x0018 - 0x0000)
struct RBDoor_BP_SetDynamicReplacement final
{
public:
	TSubclassOf<class AActor>                     ReplacementClass;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRemoveDoorFrame;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE5[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomID;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_SetDynamicReplacement) == 0x000008, "Wrong alignment on RBDoor_BP_SetDynamicReplacement");
static_assert(sizeof(RBDoor_BP_SetDynamicReplacement) == 0x000018, "Wrong size on RBDoor_BP_SetDynamicReplacement");
static_assert(offsetof(RBDoor_BP_SetDynamicReplacement, ReplacementClass) == 0x000000, "Member 'RBDoor_BP_SetDynamicReplacement::ReplacementClass' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_SetDynamicReplacement, bShouldRemoveDoorFrame) == 0x000008, "Member 'RBDoor_BP_SetDynamicReplacement::bShouldRemoveDoorFrame' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_SetDynamicReplacement, RandomID) == 0x00000C, "Member 'RBDoor_BP_SetDynamicReplacement::RandomID' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_SetDynamicReplacement, ReturnValue) == 0x000010, "Member 'RBDoor_BP_SetDynamicReplacement::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.GetSoundComponent
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_GetSoundComponent final
{
public:
	class URBSoundComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_GetSoundComponent) == 0x000008, "Wrong alignment on RBDoor_GetSoundComponent");
static_assert(sizeof(RBDoor_GetSoundComponent) == 0x000008, "Wrong size on RBDoor_GetSoundComponent");
static_assert(offsetof(RBDoor_GetSoundComponent, ReturnValue) == 0x000000, "Member 'RBDoor_GetSoundComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.LockBars_Server
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_LockBars_Server final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_LockBars_Server) == 0x000001, "Wrong alignment on RBDoor_LockBars_Server");
static_assert(sizeof(RBDoor_LockBars_Server) == 0x000001, "Wrong size on RBDoor_LockBars_Server");
static_assert(offsetof(RBDoor_LockBars_Server, bLocked) == 0x000000, "Member 'RBDoor_LockBars_Server::bLocked' has a wrong offset!");

// Function OPP.RBDoor.LockingPanelActiveChanged
// 0x0010 (0x0010 - 0x0000)
struct RBDoor_LockingPanelActiveChanged final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_LockingPanelActiveChanged) == 0x000008, "Wrong alignment on RBDoor_LockingPanelActiveChanged");
static_assert(sizeof(RBDoor_LockingPanelActiveChanged) == 0x000010, "Wrong size on RBDoor_LockingPanelActiveChanged");
static_assert(offsetof(RBDoor_LockingPanelActiveChanged, Panel) == 0x000000, "Member 'RBDoor_LockingPanelActiveChanged::Panel' has a wrong offset!");
static_assert(offsetof(RBDoor_LockingPanelActiveChanged, PawnInteracting) == 0x000008, "Member 'RBDoor_LockingPanelActiveChanged::PawnInteracting' has a wrong offset!");

// Function OPP.RBDoor.Multicast_OnDoorInteract
// 0x0010 (0x0010 - 0x0000)
struct RBDoor_Multicast_OnDoorInteract final
{
public:
	float                                         NewDoorDesiredAngle;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewDoorAngleSpeedRatio;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_Multicast_OnDoorInteract) == 0x000008, "Wrong alignment on RBDoor_Multicast_OnDoorInteract");
static_assert(sizeof(RBDoor_Multicast_OnDoorInteract) == 0x000010, "Wrong size on RBDoor_Multicast_OnDoorInteract");
static_assert(offsetof(RBDoor_Multicast_OnDoorInteract, NewDoorDesiredAngle) == 0x000000, "Member 'RBDoor_Multicast_OnDoorInteract::NewDoorDesiredAngle' has a wrong offset!");
static_assert(offsetof(RBDoor_Multicast_OnDoorInteract, NewDoorAngleSpeedRatio) == 0x000004, "Member 'RBDoor_Multicast_OnDoorInteract::NewDoorAngleSpeedRatio' has a wrong offset!");
static_assert(offsetof(RBDoor_Multicast_OnDoorInteract, Pawn) == 0x000008, "Member 'RBDoor_Multicast_OnDoorInteract::Pawn' has a wrong offset!");

// Function OPP.RBDoor.OnCoopOperatableOperatingFinishedEvent
// 0x0010 (0x0010 - 0x0000)
struct RBDoor_OnCoopOperatableOperatingFinishedEvent final
{
public:
	class URBOperatableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_OnCoopOperatableOperatingFinishedEvent) == 0x000008, "Wrong alignment on RBDoor_OnCoopOperatableOperatingFinishedEvent");
static_assert(sizeof(RBDoor_OnCoopOperatableOperatingFinishedEvent) == 0x000010, "Wrong size on RBDoor_OnCoopOperatableOperatingFinishedEvent");
static_assert(offsetof(RBDoor_OnCoopOperatableOperatingFinishedEvent, Component) == 0x000000, "Member 'RBDoor_OnCoopOperatableOperatingFinishedEvent::Component' has a wrong offset!");
static_assert(offsetof(RBDoor_OnCoopOperatableOperatingFinishedEvent, Pawn) == 0x000008, "Member 'RBDoor_OnCoopOperatableOperatingFinishedEvent::Pawn' has a wrong offset!");

// Function OPP.RBDoor.OnCoopOperatableOperatingStartedEvent
// 0x0010 (0x0010 - 0x0000)
struct RBDoor_OnCoopOperatableOperatingStartedEvent final
{
public:
	class URBOperatableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_OnCoopOperatableOperatingStartedEvent) == 0x000008, "Wrong alignment on RBDoor_OnCoopOperatableOperatingStartedEvent");
static_assert(sizeof(RBDoor_OnCoopOperatableOperatingStartedEvent) == 0x000010, "Wrong size on RBDoor_OnCoopOperatableOperatingStartedEvent");
static_assert(offsetof(RBDoor_OnCoopOperatableOperatingStartedEvent, Component) == 0x000000, "Member 'RBDoor_OnCoopOperatableOperatingStartedEvent::Component' has a wrong offset!");
static_assert(offsetof(RBDoor_OnCoopOperatableOperatingStartedEvent, Pawn) == 0x000008, "Member 'RBDoor_OnCoopOperatableOperatingStartedEvent::Pawn' has a wrong offset!");

// Function OPP.RBDoor.OnDesiredDoorAngleChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_OnDesiredDoorAngleChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_OnDesiredDoorAngleChangedCallback) == 0x000001, "Wrong alignment on RBDoor_OnDesiredDoorAngleChangedCallback");
static_assert(sizeof(RBDoor_OnDesiredDoorAngleChangedCallback) == 0x000001, "Wrong size on RBDoor_OnDesiredDoorAngleChangedCallback");
static_assert(offsetof(RBDoor_OnDesiredDoorAngleChangedCallback, ChangeType) == 0x000000, "Member 'RBDoor_OnDesiredDoorAngleChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBDoor.OnDoorRepulsionDone
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_OnDoorRepulsionDone final
{
public:
	class URBRepulsionComponent*                  RepulsionComponentDone;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_OnDoorRepulsionDone) == 0x000008, "Wrong alignment on RBDoor_OnDoorRepulsionDone");
static_assert(sizeof(RBDoor_OnDoorRepulsionDone) == 0x000008, "Wrong size on RBDoor_OnDoorRepulsionDone");
static_assert(offsetof(RBDoor_OnDoorRepulsionDone, RepulsionComponentDone) == 0x000000, "Member 'RBDoor_OnDoorRepulsionDone::RepulsionComponentDone' has a wrong offset!");

// Function OPP.RBDoor.OnLockPanelUnlocked
// 0x0010 (0x0010 - 0x0000)
struct RBDoor_OnLockPanelUnlocked final
{
public:
	class URBInteractiblePanelComponent*          LockPanel;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_OnLockPanelUnlocked) == 0x000008, "Wrong alignment on RBDoor_OnLockPanelUnlocked");
static_assert(sizeof(RBDoor_OnLockPanelUnlocked) == 0x000010, "Wrong size on RBDoor_OnLockPanelUnlocked");
static_assert(offsetof(RBDoor_OnLockPanelUnlocked, LockPanel) == 0x000000, "Member 'RBDoor_OnLockPanelUnlocked::LockPanel' has a wrong offset!");
static_assert(offsetof(RBDoor_OnLockPanelUnlocked, Pawn) == 0x000008, "Member 'RBDoor_OnLockPanelUnlocked::Pawn' has a wrong offset!");

// Function OPP.RBDoor.OnRep_RandomStaticBlockingActor
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_OnRep_RandomStaticBlockingActor final
{
public:
	class AActor*                                 OldActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_OnRep_RandomStaticBlockingActor) == 0x000008, "Wrong alignment on RBDoor_OnRep_RandomStaticBlockingActor");
static_assert(sizeof(RBDoor_OnRep_RandomStaticBlockingActor) == 0x000008, "Wrong size on RBDoor_OnRep_RandomStaticBlockingActor");
static_assert(offsetof(RBDoor_OnRep_RandomStaticBlockingActor, OldActor) == 0x000000, "Member 'RBDoor_OnRep_RandomStaticBlockingActor::OldActor' has a wrong offset!");

// Function OPP.RBDoor.SetLinkedDoubleDoor
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_SetLinkedDoubleDoor final
{
public:
	class ARBDoor*                                LinkedDoor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_SetLinkedDoubleDoor) == 0x000008, "Wrong alignment on RBDoor_SetLinkedDoubleDoor");
static_assert(sizeof(RBDoor_SetLinkedDoubleDoor) == 0x000008, "Wrong size on RBDoor_SetLinkedDoubleDoor");
static_assert(offsetof(RBDoor_SetLinkedDoubleDoor, LinkedDoor) == 0x000000, "Member 'RBDoor_SetLinkedDoubleDoor::LinkedDoor' has a wrong offset!");

// Function OPP.RBDoor.SetupDynamicActorVisibilityId
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_SetupDynamicActorVisibilityId final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_SetupDynamicActorVisibilityId) == 0x000008, "Wrong alignment on RBDoor_SetupDynamicActorVisibilityId");
static_assert(sizeof(RBDoor_SetupDynamicActorVisibilityId) == 0x000008, "Wrong size on RBDoor_SetupDynamicActorVisibilityId");
static_assert(offsetof(RBDoor_SetupDynamicActorVisibilityId, Actor) == 0x000000, "Member 'RBDoor_SetupDynamicActorVisibilityId::Actor' has a wrong offset!");

// Function OPP.RBDoor.SetupDynamicComponentVisibilityId
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_SetupDynamicComponentVisibilityId final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_SetupDynamicComponentVisibilityId) == 0x000008, "Wrong alignment on RBDoor_SetupDynamicComponentVisibilityId");
static_assert(sizeof(RBDoor_SetupDynamicComponentVisibilityId) == 0x000008, "Wrong size on RBDoor_SetupDynamicComponentVisibilityId");
static_assert(offsetof(RBDoor_SetupDynamicComponentVisibilityId, Component) == 0x000000, "Member 'RBDoor_SetupDynamicComponentVisibilityId::Component' has a wrong offset!");

// Function OPP.RBDoor.SlamClosed_Server
// 0x0018 (0x0018 - 0x0000)
struct RBDoor_SlamClosed_Server final
{
public:
	ERepulsionDirectionFlags                      Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBPawn*>                        SpecificPawnsPushed;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_SlamClosed_Server) == 0x000008, "Wrong alignment on RBDoor_SlamClosed_Server");
static_assert(sizeof(RBDoor_SlamClosed_Server) == 0x000018, "Wrong size on RBDoor_SlamClosed_Server");
static_assert(offsetof(RBDoor_SlamClosed_Server, Direction) == 0x000000, "Member 'RBDoor_SlamClosed_Server::Direction' has a wrong offset!");
static_assert(offsetof(RBDoor_SlamClosed_Server, SpecificPawnsPushed) == 0x000008, "Member 'RBDoor_SlamClosed_Server::SpecificPawnsPushed' has a wrong offset!");

// Function OPP.RBDoor.SlamClosedRepulsionDone
// 0x0008 (0x0008 - 0x0000)
struct RBDoor_SlamClosedRepulsionDone final
{
public:
	class URBRepulsionComponent*                  RepulsionComponentDone;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_SlamClosedRepulsionDone) == 0x000008, "Wrong alignment on RBDoor_SlamClosedRepulsionDone");
static_assert(sizeof(RBDoor_SlamClosedRepulsionDone) == 0x000008, "Wrong size on RBDoor_SlamClosedRepulsionDone");
static_assert(offsetof(RBDoor_SlamClosedRepulsionDone, RepulsionComponentDone) == 0x000000, "Member 'RBDoor_SlamClosedRepulsionDone::RepulsionComponentDone' has a wrong offset!");

// Function OPP.RBDoor.BP_IsActorInFront
// 0x0010 (0x0010 - 0x0000)
struct RBDoor_BP_IsActorInFront final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBDoor_BP_IsActorInFront) == 0x000008, "Wrong alignment on RBDoor_BP_IsActorInFront");
static_assert(sizeof(RBDoor_BP_IsActorInFront) == 0x000010, "Wrong size on RBDoor_BP_IsActorInFront");
static_assert(offsetof(RBDoor_BP_IsActorInFront, Actor) == 0x000000, "Member 'RBDoor_BP_IsActorInFront::Actor' has a wrong offset!");
static_assert(offsetof(RBDoor_BP_IsActorInFront, ReturnValue) == 0x000008, "Member 'RBDoor_BP_IsActorInFront::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsBlockedOnAnySide
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsBlockedOnAnySide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsBlockedOnAnySide) == 0x000001, "Wrong alignment on RBDoor_BP_IsBlockedOnAnySide");
static_assert(sizeof(RBDoor_BP_IsBlockedOnAnySide) == 0x000001, "Wrong size on RBDoor_BP_IsBlockedOnAnySide");
static_assert(offsetof(RBDoor_BP_IsBlockedOnAnySide, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsBlockedOnAnySide::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsClosed
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsClosed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsClosed) == 0x000001, "Wrong alignment on RBDoor_BP_IsClosed");
static_assert(sizeof(RBDoor_BP_IsClosed) == 0x000001, "Wrong size on RBDoor_BP_IsClosed");
static_assert(offsetof(RBDoor_BP_IsClosed, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsClosed::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsClosing
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsClosing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsClosing) == 0x000001, "Wrong alignment on RBDoor_BP_IsClosing");
static_assert(sizeof(RBDoor_BP_IsClosing) == 0x000001, "Wrong size on RBDoor_BP_IsClosing");
static_assert(offsetof(RBDoor_BP_IsClosing, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsClosing::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsFullyOpen
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsFullyOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsFullyOpen) == 0x000001, "Wrong alignment on RBDoor_BP_IsFullyOpen");
static_assert(sizeof(RBDoor_BP_IsFullyOpen) == 0x000001, "Wrong size on RBDoor_BP_IsFullyOpen");
static_assert(offsetof(RBDoor_BP_IsFullyOpen, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsFullyOpen::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsFullyOpenInBack
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsFullyOpenInBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsFullyOpenInBack) == 0x000001, "Wrong alignment on RBDoor_BP_IsFullyOpenInBack");
static_assert(sizeof(RBDoor_BP_IsFullyOpenInBack) == 0x000001, "Wrong size on RBDoor_BP_IsFullyOpenInBack");
static_assert(offsetof(RBDoor_BP_IsFullyOpenInBack, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsFullyOpenInBack::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsFullyOpenInFront
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsFullyOpenInFront final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsFullyOpenInFront) == 0x000001, "Wrong alignment on RBDoor_BP_IsFullyOpenInFront");
static_assert(sizeof(RBDoor_BP_IsFullyOpenInFront) == 0x000001, "Wrong size on RBDoor_BP_IsFullyOpenInFront");
static_assert(offsetof(RBDoor_BP_IsFullyOpenInFront, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsFullyOpenInFront::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsIdle
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsIdle) == 0x000001, "Wrong alignment on RBDoor_BP_IsIdle");
static_assert(sizeof(RBDoor_BP_IsIdle) == 0x000001, "Wrong size on RBDoor_BP_IsIdle");
static_assert(offsetof(RBDoor_BP_IsIdle, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsIdle::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsLinkedTrapArmed
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsLinkedTrapArmed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsLinkedTrapArmed) == 0x000001, "Wrong alignment on RBDoor_BP_IsLinkedTrapArmed");
static_assert(sizeof(RBDoor_BP_IsLinkedTrapArmed) == 0x000001, "Wrong size on RBDoor_BP_IsLinkedTrapArmed");
static_assert(offsetof(RBDoor_BP_IsLinkedTrapArmed, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsLinkedTrapArmed::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsLinkedTrapTriggered
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsLinkedTrapTriggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsLinkedTrapTriggered) == 0x000001, "Wrong alignment on RBDoor_BP_IsLinkedTrapTriggered");
static_assert(sizeof(RBDoor_BP_IsLinkedTrapTriggered) == 0x000001, "Wrong size on RBDoor_BP_IsLinkedTrapTriggered");
static_assert(offsetof(RBDoor_BP_IsLinkedTrapTriggered, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsLinkedTrapTriggered::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsMoving
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsMoving) == 0x000001, "Wrong alignment on RBDoor_BP_IsMoving");
static_assert(sizeof(RBDoor_BP_IsMoving) == 0x000001, "Wrong size on RBDoor_BP_IsMoving");
static_assert(offsetof(RBDoor_BP_IsMoving, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsMoving::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsOpen
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsOpen) == 0x000001, "Wrong alignment on RBDoor_BP_IsOpen");
static_assert(sizeof(RBDoor_BP_IsOpen) == 0x000001, "Wrong size on RBDoor_BP_IsOpen");
static_assert(offsetof(RBDoor_BP_IsOpen, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsOpen::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.BP_IsOpening
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_BP_IsOpening final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_BP_IsOpening) == 0x000001, "Wrong alignment on RBDoor_BP_IsOpening");
static_assert(sizeof(RBDoor_BP_IsOpening) == 0x000001, "Wrong size on RBDoor_BP_IsOpening");
static_assert(offsetof(RBDoor_BP_IsOpening, ReturnValue) == 0x000000, "Member 'RBDoor_BP_IsOpening::ReturnValue' has a wrong offset!");

// Function OPP.RBDoor.GetBlockableState
// 0x0001 (0x0001 - 0x0000)
struct RBDoor_GetBlockableState final
{
public:
	EBlockableState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoor_GetBlockableState) == 0x000001, "Wrong alignment on RBDoor_GetBlockableState");
static_assert(sizeof(RBDoor_GetBlockableState) == 0x000001, "Wrong size on RBDoor_GetBlockableState");
static_assert(offsetof(RBDoor_GetBlockableState, ReturnValue) == 0x000000, "Member 'RBDoor_GetBlockableState::ReturnValue' has a wrong offset!");

// Function OPP.RBAutomaticDoor.BackBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBAutomaticDoor_BackBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEA[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAutomaticDoor_BackBeginOverlap) == 0x000008, "Wrong alignment on RBAutomaticDoor_BackBeginOverlap");
static_assert(sizeof(RBAutomaticDoor_BackBeginOverlap) == 0x0000A8, "Wrong size on RBAutomaticDoor_BackBeginOverlap");
static_assert(offsetof(RBAutomaticDoor_BackBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBAutomaticDoor_BackBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_BackBeginOverlap, OtherActor) == 0x000008, "Member 'RBAutomaticDoor_BackBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_BackBeginOverlap, OtherComp) == 0x000010, "Member 'RBAutomaticDoor_BackBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_BackBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBAutomaticDoor_BackBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_BackBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBAutomaticDoor_BackBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_BackBeginOverlap, SweepResult) == 0x000020, "Member 'RBAutomaticDoor_BackBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBAutomaticDoor.BackEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBAutomaticDoor_BackEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEB[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAutomaticDoor_BackEndOverlap) == 0x000008, "Wrong alignment on RBAutomaticDoor_BackEndOverlap");
static_assert(sizeof(RBAutomaticDoor_BackEndOverlap) == 0x000020, "Wrong size on RBAutomaticDoor_BackEndOverlap");
static_assert(offsetof(RBAutomaticDoor_BackEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBAutomaticDoor_BackEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_BackEndOverlap, OtherActor) == 0x000008, "Member 'RBAutomaticDoor_BackEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_BackEndOverlap, OtherComp) == 0x000010, "Member 'RBAutomaticDoor_BackEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_BackEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBAutomaticDoor_BackEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBAutomaticDoor.FrontBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBAutomaticDoor_FrontBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEC[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAutomaticDoor_FrontBeginOverlap) == 0x000008, "Wrong alignment on RBAutomaticDoor_FrontBeginOverlap");
static_assert(sizeof(RBAutomaticDoor_FrontBeginOverlap) == 0x0000A8, "Wrong size on RBAutomaticDoor_FrontBeginOverlap");
static_assert(offsetof(RBAutomaticDoor_FrontBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBAutomaticDoor_FrontBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_FrontBeginOverlap, OtherActor) == 0x000008, "Member 'RBAutomaticDoor_FrontBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_FrontBeginOverlap, OtherComp) == 0x000010, "Member 'RBAutomaticDoor_FrontBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_FrontBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBAutomaticDoor_FrontBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_FrontBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBAutomaticDoor_FrontBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_FrontBeginOverlap, SweepResult) == 0x000020, "Member 'RBAutomaticDoor_FrontBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBAutomaticDoor.FrontEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBAutomaticDoor_FrontEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BED[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAutomaticDoor_FrontEndOverlap) == 0x000008, "Wrong alignment on RBAutomaticDoor_FrontEndOverlap");
static_assert(sizeof(RBAutomaticDoor_FrontEndOverlap) == 0x000020, "Wrong size on RBAutomaticDoor_FrontEndOverlap");
static_assert(offsetof(RBAutomaticDoor_FrontEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBAutomaticDoor_FrontEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_FrontEndOverlap, OtherActor) == 0x000008, "Member 'RBAutomaticDoor_FrontEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_FrontEndOverlap, OtherComp) == 0x000010, "Member 'RBAutomaticDoor_FrontEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBAutomaticDoor_FrontEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBAutomaticDoor_FrontEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBMenuTabWidget.GetMenuWithTabsParent
// 0x0008 (0x0008 - 0x0000)
struct RBMenuTabWidget_GetMenuWithTabsParent final
{
public:
	class URBMenuWithTabsWidget*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuTabWidget_GetMenuWithTabsParent) == 0x000008, "Wrong alignment on RBMenuTabWidget_GetMenuWithTabsParent");
static_assert(sizeof(RBMenuTabWidget_GetMenuWithTabsParent) == 0x000008, "Wrong size on RBMenuTabWidget_GetMenuWithTabsParent");
static_assert(offsetof(RBMenuTabWidget_GetMenuWithTabsParent, ReturnValue) == 0x000000, "Member 'RBMenuTabWidget_GetMenuWithTabsParent::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuTabWidget.GetPageSpecificButtons
// 0x0010 (0x0010 - 0x0000)
struct RBMenuTabWidget_GetPageSpecificButtons final
{
public:
	TArray<class UUserWidget*>                    OutButtons;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuTabWidget_GetPageSpecificButtons) == 0x000008, "Wrong alignment on RBMenuTabWidget_GetPageSpecificButtons");
static_assert(sizeof(RBMenuTabWidget_GetPageSpecificButtons) == 0x000010, "Wrong size on RBMenuTabWidget_GetPageSpecificButtons");
static_assert(offsetof(RBMenuTabWidget_GetPageSpecificButtons, OutButtons) == 0x000000, "Member 'RBMenuTabWidget_GetPageSpecificButtons::OutButtons' has a wrong offset!");

// Function OPP.RBMenuTabWidget.IsReadyToClose
// 0x0001 (0x0001 - 0x0000)
struct RBMenuTabWidget_IsReadyToClose final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuTabWidget_IsReadyToClose) == 0x000001, "Wrong alignment on RBMenuTabWidget_IsReadyToClose");
static_assert(sizeof(RBMenuTabWidget_IsReadyToClose) == 0x000001, "Wrong size on RBMenuTabWidget_IsReadyToClose");
static_assert(offsetof(RBMenuTabWidget_IsReadyToClose, ReturnValue) == 0x000000, "Member 'RBMenuTabWidget_IsReadyToClose::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuTabWidget.OnButtonClicked
// 0x0020 (0x0020 - 0x0000)
struct RBMenuTabWidget_OnButtonClicked final
{
public:
	class UUserWidget*                            buttonClicked;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuTabWidget_OnButtonClicked) == 0x000008, "Wrong alignment on RBMenuTabWidget_OnButtonClicked");
static_assert(sizeof(RBMenuTabWidget_OnButtonClicked) == 0x000020, "Wrong size on RBMenuTabWidget_OnButtonClicked");
static_assert(offsetof(RBMenuTabWidget_OnButtonClicked, buttonClicked) == 0x000000, "Member 'RBMenuTabWidget_OnButtonClicked::buttonClicked' has a wrong offset!");
static_assert(offsetof(RBMenuTabWidget_OnButtonClicked, Key) == 0x000008, "Member 'RBMenuTabWidget_OnButtonClicked::Key' has a wrong offset!");

// Function OPP.RBMenuTabWidget.OnButtonReleased
// 0x0020 (0x0020 - 0x0000)
struct RBMenuTabWidget_OnButtonReleased final
{
public:
	class UUserWidget*                            buttonClicked;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuTabWidget_OnButtonReleased) == 0x000008, "Wrong alignment on RBMenuTabWidget_OnButtonReleased");
static_assert(sizeof(RBMenuTabWidget_OnButtonReleased) == 0x000020, "Wrong size on RBMenuTabWidget_OnButtonReleased");
static_assert(offsetof(RBMenuTabWidget_OnButtonReleased, buttonClicked) == 0x000000, "Member 'RBMenuTabWidget_OnButtonReleased::buttonClicked' has a wrong offset!");
static_assert(offsetof(RBMenuTabWidget_OnButtonReleased, Key) == 0x000008, "Member 'RBMenuTabWidget_OnButtonReleased::Key' has a wrong offset!");

// Function OPP.RBCharacterSheetMenuTabWidget.HandleMenuTabLeft
// 0x0001 (0x0001 - 0x0000)
struct RBCharacterSheetMenuTabWidget_HandleMenuTabLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterSheetMenuTabWidget_HandleMenuTabLeft) == 0x000001, "Wrong alignment on RBCharacterSheetMenuTabWidget_HandleMenuTabLeft");
static_assert(sizeof(RBCharacterSheetMenuTabWidget_HandleMenuTabLeft) == 0x000001, "Wrong size on RBCharacterSheetMenuTabWidget_HandleMenuTabLeft");
static_assert(offsetof(RBCharacterSheetMenuTabWidget_HandleMenuTabLeft, ReturnValue) == 0x000000, "Member 'RBCharacterSheetMenuTabWidget_HandleMenuTabLeft::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterSheetMenuTabWidget.HandleMenuTabRight
// 0x0001 (0x0001 - 0x0000)
struct RBCharacterSheetMenuTabWidget_HandleMenuTabRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterSheetMenuTabWidget_HandleMenuTabRight) == 0x000001, "Wrong alignment on RBCharacterSheetMenuTabWidget_HandleMenuTabRight");
static_assert(sizeof(RBCharacterSheetMenuTabWidget_HandleMenuTabRight) == 0x000001, "Wrong size on RBCharacterSheetMenuTabWidget_HandleMenuTabRight");
static_assert(offsetof(RBCharacterSheetMenuTabWidget_HandleMenuTabRight, ReturnValue) == 0x000000, "Member 'RBCharacterSheetMenuTabWidget_HandleMenuTabRight::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterSheetMenuTabWidget.GetNavigationOverrideWidget
// 0x0008 (0x0008 - 0x0000)
struct RBCharacterSheetMenuTabWidget_GetNavigationOverrideWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterSheetMenuTabWidget_GetNavigationOverrideWidget) == 0x000008, "Wrong alignment on RBCharacterSheetMenuTabWidget_GetNavigationOverrideWidget");
static_assert(sizeof(RBCharacterSheetMenuTabWidget_GetNavigationOverrideWidget) == 0x000008, "Wrong size on RBCharacterSheetMenuTabWidget_GetNavigationOverrideWidget");
static_assert(offsetof(RBCharacterSheetMenuTabWidget_GetNavigationOverrideWidget, ReturnValue) == 0x000000, "Member 'RBCharacterSheetMenuTabWidget_GetNavigationOverrideWidget::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterSheetMenuTabWidget.GetPageSubtitle
// 0x0018 (0x0018 - 0x0000)
struct RBCharacterSheetMenuTabWidget_GetPageSubtitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterSheetMenuTabWidget_GetPageSubtitle) == 0x000008, "Wrong alignment on RBCharacterSheetMenuTabWidget_GetPageSubtitle");
static_assert(sizeof(RBCharacterSheetMenuTabWidget_GetPageSubtitle) == 0x000018, "Wrong size on RBCharacterSheetMenuTabWidget_GetPageSubtitle");
static_assert(offsetof(RBCharacterSheetMenuTabWidget_GetPageSubtitle, ReturnValue) == 0x000000, "Member 'RBCharacterSheetMenuTabWidget_GetPageSubtitle::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterSheetMenuTabWidget.GetPageTitle
// 0x0018 (0x0018 - 0x0000)
struct RBCharacterSheetMenuTabWidget_GetPageTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterSheetMenuTabWidget_GetPageTitle) == 0x000008, "Wrong alignment on RBCharacterSheetMenuTabWidget_GetPageTitle");
static_assert(sizeof(RBCharacterSheetMenuTabWidget_GetPageTitle) == 0x000018, "Wrong size on RBCharacterSheetMenuTabWidget_GetPageTitle");
static_assert(offsetof(RBCharacterSheetMenuTabWidget_GetPageTitle, ReturnValue) == 0x000000, "Member 'RBCharacterSheetMenuTabWidget_GetPageTitle::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterSheetMenuTabWidget.ShouldShowNavigation
// 0x0001 (0x0001 - 0x0000)
struct RBCharacterSheetMenuTabWidget_ShouldShowNavigation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterSheetMenuTabWidget_ShouldShowNavigation) == 0x000001, "Wrong alignment on RBCharacterSheetMenuTabWidget_ShouldShowNavigation");
static_assert(sizeof(RBCharacterSheetMenuTabWidget_ShouldShowNavigation) == 0x000001, "Wrong size on RBCharacterSheetMenuTabWidget_ShouldShowNavigation");
static_assert(offsetof(RBCharacterSheetMenuTabWidget_ShouldShowNavigation, ReturnValue) == 0x000000, "Member 'RBCharacterSheetMenuTabWidget_ShouldShowNavigation::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterSheetMenuTabWidget.ShouldShowPageTitle
// 0x0001 (0x0001 - 0x0000)
struct RBCharacterSheetMenuTabWidget_ShouldShowPageTitle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterSheetMenuTabWidget_ShouldShowPageTitle) == 0x000001, "Wrong alignment on RBCharacterSheetMenuTabWidget_ShouldShowPageTitle");
static_assert(sizeof(RBCharacterSheetMenuTabWidget_ShouldShowPageTitle) == 0x000001, "Wrong size on RBCharacterSheetMenuTabWidget_ShouldShowPageTitle");
static_assert(offsetof(RBCharacterSheetMenuTabWidget_ShouldShowPageTitle, ReturnValue) == 0x000000, "Member 'RBCharacterSheetMenuTabWidget_ShouldShowPageTitle::ReturnValue' has a wrong offset!");

// Function OPP.RBBadgesTabWidget.ClaimBadgeReward
// 0x0008 (0x0008 - 0x0000)
struct RBBadgesTabWidget_ClaimBadgeReward final
{
public:
	class FName                                   BadgeId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBadgesTabWidget_ClaimBadgeReward) == 0x000004, "Wrong alignment on RBBadgesTabWidget_ClaimBadgeReward");
static_assert(sizeof(RBBadgesTabWidget_ClaimBadgeReward) == 0x000008, "Wrong size on RBBadgesTabWidget_ClaimBadgeReward");
static_assert(offsetof(RBBadgesTabWidget_ClaimBadgeReward, BadgeId) == 0x000000, "Member 'RBBadgesTabWidget_ClaimBadgeReward::BadgeId' has a wrong offset!");

// Function OPP.RBBadgesTabWidget.OnPlayerStatsDataAvailable
// 0x0020 (0x0020 - 0x0000)
struct RBBadgesTabWidget_OnPlayerStatsDataAvailable final
{
public:
	TArray<struct FRBStatContext>                 Stats;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRBUIReleasedCharacterDetails>  ReleasedCharacterDetailsList;                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBadgesTabWidget_OnPlayerStatsDataAvailable) == 0x000008, "Wrong alignment on RBBadgesTabWidget_OnPlayerStatsDataAvailable");
static_assert(sizeof(RBBadgesTabWidget_OnPlayerStatsDataAvailable) == 0x000020, "Wrong size on RBBadgesTabWidget_OnPlayerStatsDataAvailable");
static_assert(offsetof(RBBadgesTabWidget_OnPlayerStatsDataAvailable, Stats) == 0x000000, "Member 'RBBadgesTabWidget_OnPlayerStatsDataAvailable::Stats' has a wrong offset!");
static_assert(offsetof(RBBadgesTabWidget_OnPlayerStatsDataAvailable, ReleasedCharacterDetailsList) == 0x000010, "Member 'RBBadgesTabWidget_OnPlayerStatsDataAvailable::ReleasedCharacterDetailsList' has a wrong offset!");

// Function OPP.RBBadgesTabWidget.CanClaimBadgeReward
// 0x000C (0x000C - 0x0000)
struct RBBadgesTabWidget_CanClaimBadgeReward final
{
public:
	class FName                                   BadgeId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BEF[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBadgesTabWidget_CanClaimBadgeReward) == 0x000004, "Wrong alignment on RBBadgesTabWidget_CanClaimBadgeReward");
static_assert(sizeof(RBBadgesTabWidget_CanClaimBadgeReward) == 0x00000C, "Wrong size on RBBadgesTabWidget_CanClaimBadgeReward");
static_assert(offsetof(RBBadgesTabWidget_CanClaimBadgeReward, BadgeId) == 0x000000, "Member 'RBBadgesTabWidget_CanClaimBadgeReward::BadgeId' has a wrong offset!");
static_assert(offsetof(RBBadgesTabWidget_CanClaimBadgeReward, ReturnValue) == 0x000008, "Member 'RBBadgesTabWidget_CanClaimBadgeReward::ReturnValue' has a wrong offset!");

// Function OPP.RBBadgesTabWidget.GetBadgeProgress
// 0x000C (0x000C - 0x0000)
struct RBBadgesTabWidget_GetBadgeProgress final
{
public:
	class FName                                   BadgeId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBadgesTabWidget_GetBadgeProgress) == 0x000004, "Wrong alignment on RBBadgesTabWidget_GetBadgeProgress");
static_assert(sizeof(RBBadgesTabWidget_GetBadgeProgress) == 0x00000C, "Wrong size on RBBadgesTabWidget_GetBadgeProgress");
static_assert(offsetof(RBBadgesTabWidget_GetBadgeProgress, BadgeId) == 0x000000, "Member 'RBBadgesTabWidget_GetBadgeProgress::BadgeId' has a wrong offset!");
static_assert(offsetof(RBBadgesTabWidget_GetBadgeProgress, ReturnValue) == 0x000008, "Member 'RBBadgesTabWidget_GetBadgeProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBBadgesTabWidget.GetBadgeUnlockCount
// 0x000C (0x000C - 0x0000)
struct RBBadgesTabWidget_GetBadgeUnlockCount final
{
public:
	class FName                                   BadgeId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBadgesTabWidget_GetBadgeUnlockCount) == 0x000004, "Wrong alignment on RBBadgesTabWidget_GetBadgeUnlockCount");
static_assert(sizeof(RBBadgesTabWidget_GetBadgeUnlockCount) == 0x00000C, "Wrong size on RBBadgesTabWidget_GetBadgeUnlockCount");
static_assert(offsetof(RBBadgesTabWidget_GetBadgeUnlockCount, BadgeId) == 0x000000, "Member 'RBBadgesTabWidget_GetBadgeUnlockCount::BadgeId' has a wrong offset!");
static_assert(offsetof(RBBadgesTabWidget_GetBadgeUnlockCount, ReturnValue) == 0x000008, "Member 'RBBadgesTabWidget_GetBadgeUnlockCount::ReturnValue' has a wrong offset!");

// Function OPP.RBBadgesTabWidget.HasClaimableBadgeReward
// 0x0001 (0x0001 - 0x0000)
struct RBBadgesTabWidget_HasClaimableBadgeReward final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBadgesTabWidget_HasClaimableBadgeReward) == 0x000001, "Wrong alignment on RBBadgesTabWidget_HasClaimableBadgeReward");
static_assert(sizeof(RBBadgesTabWidget_HasClaimableBadgeReward) == 0x000001, "Wrong size on RBBadgesTabWidget_HasClaimableBadgeReward");
static_assert(offsetof(RBBadgesTabWidget_HasClaimableBadgeReward, ReturnValue) == 0x000000, "Member 'RBBadgesTabWidget_HasClaimableBadgeReward::ReturnValue' has a wrong offset!");

// Function OPP.RBBadgesTabWidget.IsDataPending
// 0x0001 (0x0001 - 0x0000)
struct RBBadgesTabWidget_IsDataPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBadgesTabWidget_IsDataPending) == 0x000001, "Wrong alignment on RBBadgesTabWidget_IsDataPending");
static_assert(sizeof(RBBadgesTabWidget_IsDataPending) == 0x000001, "Wrong size on RBBadgesTabWidget_IsDataPending");
static_assert(offsetof(RBBadgesTabWidget_IsDataPending, ReturnValue) == 0x000000, "Member 'RBBadgesTabWidget_IsDataPending::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetAllCustomizationOptions
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerCustomizationConfig_GetAllCustomizationOptions final
{
public:
	EPlayerCustomizationSlot                      Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCustomizationSexQueryType              SexQueryType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeLegendaries;                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF2[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URBPlayerCustomizationOption*>   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetAllCustomizationOptions) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetAllCustomizationOptions");
static_assert(sizeof(RBPlayerCustomizationConfig_GetAllCustomizationOptions) == 0x000018, "Wrong size on RBPlayerCustomizationConfig_GetAllCustomizationOptions");
static_assert(offsetof(RBPlayerCustomizationConfig_GetAllCustomizationOptions, Slot) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetAllCustomizationOptions::Slot' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetAllCustomizationOptions, SexQueryType) == 0x000001, "Member 'RBPlayerCustomizationConfig_GetAllCustomizationOptions::SexQueryType' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetAllCustomizationOptions, bIncludeLegendaries) == 0x000002, "Member 'RBPlayerCustomizationConfig_GetAllCustomizationOptions::bIncludeLegendaries' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetAllCustomizationOptions, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetAllCustomizationOptions::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetCustomizationOutfit
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCustomizationConfig_GetCustomizationOutfit final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBCustomizationOutfit*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetCustomizationOutfit) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetCustomizationOutfit");
static_assert(sizeof(RBPlayerCustomizationConfig_GetCustomizationOutfit) == 0x000010, "Wrong size on RBPlayerCustomizationConfig_GetCustomizationOutfit");
static_assert(offsetof(RBPlayerCustomizationConfig_GetCustomizationOutfit, ID) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetCustomizationOutfit::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetCustomizationOutfit, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetCustomizationOutfit::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetDefaultCustomizationOption
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCustomizationConfig_GetDefaultCustomizationOption final
{
public:
	EPlayerCustomizationSlot                      Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFemale;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF3[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class URBPlayerCustomizationOption*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetDefaultCustomizationOption) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetDefaultCustomizationOption");
static_assert(sizeof(RBPlayerCustomizationConfig_GetDefaultCustomizationOption) == 0x000010, "Wrong size on RBPlayerCustomizationConfig_GetDefaultCustomizationOption");
static_assert(offsetof(RBPlayerCustomizationConfig_GetDefaultCustomizationOption, Slot) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetDefaultCustomizationOption::Slot' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetDefaultCustomizationOption, bIsFemale) == 0x000001, "Member 'RBPlayerCustomizationConfig_GetDefaultCustomizationOption::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetDefaultCustomizationOption, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetDefaultCustomizationOption::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetDefaultPlayerCustomizationInfo
// 0x0040 (0x0040 - 0x0000)
struct RBPlayerCustomizationConfig_GetDefaultPlayerCustomizationInfo final
{
public:
	bool                                          bIsFemale;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetDefaultPlayerCustomizationInfo) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetDefaultPlayerCustomizationInfo");
static_assert(sizeof(RBPlayerCustomizationConfig_GetDefaultPlayerCustomizationInfo) == 0x000040, "Wrong size on RBPlayerCustomizationConfig_GetDefaultPlayerCustomizationInfo");
static_assert(offsetof(RBPlayerCustomizationConfig_GetDefaultPlayerCustomizationInfo, bIsFemale) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetDefaultPlayerCustomizationInfo::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetDefaultPlayerCustomizationInfo, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetDefaultPlayerCustomizationInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetHairColorOption
// 0x0030 (0x0030 - 0x0000)
struct RBPlayerCustomizationConfig_GetHairColorOption final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBHairColorOption                     ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetHairColorOption) == 0x000004, "Wrong alignment on RBPlayerCustomizationConfig_GetHairColorOption");
static_assert(sizeof(RBPlayerCustomizationConfig_GetHairColorOption) == 0x000030, "Wrong size on RBPlayerCustomizationConfig_GetHairColorOption");
static_assert(offsetof(RBPlayerCustomizationConfig_GetHairColorOption, ID) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetHairColorOption::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetHairColorOption, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetHairColorOption::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetPlayerCustomizationOption
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCustomizationConfig_GetPlayerCustomizationOption final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBPlayerCustomizationOption*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetPlayerCustomizationOption) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetPlayerCustomizationOption");
static_assert(sizeof(RBPlayerCustomizationConfig_GetPlayerCustomizationOption) == 0x000010, "Wrong size on RBPlayerCustomizationConfig_GetPlayerCustomizationOption");
static_assert(offsetof(RBPlayerCustomizationConfig_GetPlayerCustomizationOption, ID) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetPlayerCustomizationOption::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetPlayerCustomizationOption, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetPlayerCustomizationOption::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetPlayerIconOption
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCustomizationConfig_GetPlayerIconOption final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBPlayerIconCustomizationOption*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetPlayerIconOption) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetPlayerIconOption");
static_assert(sizeof(RBPlayerCustomizationConfig_GetPlayerIconOption) == 0x000010, "Wrong size on RBPlayerCustomizationConfig_GetPlayerIconOption");
static_assert(offsetof(RBPlayerCustomizationConfig_GetPlayerIconOption, ID) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetPlayerIconOption::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetPlayerIconOption, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetPlayerIconOption::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetRandomAcquiredCustomizationInfo
// 0x0048 (0x0048 - 0x0000)
struct RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysAcquiredOnly;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF5[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo");
static_assert(sizeof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo) == 0x000048, "Wrong size on RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo, RBPlayerState) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo, bAlwaysAcquiredOnly) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo::bAlwaysAcquiredOnly' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo, ReturnValue) == 0x000010, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetRandomAcquiredCustomizationOption
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCustomizationSlot                      Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFemale;                                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysAcquiredOnly;                               // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF6[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class URBPlayerCustomizationOption*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption");
static_assert(sizeof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption) == 0x000018, "Wrong size on RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption, RBPlayerState) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption, Slot) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption::Slot' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption, bIsFemale) == 0x000009, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption, bAlwaysAcquiredOnly) == 0x00000A, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption::bAlwaysAcquiredOnly' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption, ReturnValue) == 0x000010, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredCustomizationOption::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetRandomAcquiredPlayerIconCustomizationOption
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCustomizationConfig_GetRandomAcquiredPlayerIconCustomizationOption final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBPlayerIconCustomizationOption*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetRandomAcquiredPlayerIconCustomizationOption) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetRandomAcquiredPlayerIconCustomizationOption");
static_assert(sizeof(RBPlayerCustomizationConfig_GetRandomAcquiredPlayerIconCustomizationOption) == 0x000010, "Wrong size on RBPlayerCustomizationConfig_GetRandomAcquiredPlayerIconCustomizationOption");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredPlayerIconCustomizationOption, RBPlayerState) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredPlayerIconCustomizationOption::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomAcquiredPlayerIconCustomizationOption, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetRandomAcquiredPlayerIconCustomizationOption::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetRandomCustomizationInfo
// 0x0040 (0x0040 - 0x0000)
struct RBPlayerCustomizationConfig_GetRandomCustomizationInfo final
{
public:
	int32                                         RandomSeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCustomizationRarity                    MaxRarity;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomSex;                                        // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFemale;                                         // 0x0006(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF7[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetRandomCustomizationInfo) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetRandomCustomizationInfo");
static_assert(sizeof(RBPlayerCustomizationConfig_GetRandomCustomizationInfo) == 0x000040, "Wrong size on RBPlayerCustomizationConfig_GetRandomCustomizationInfo");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomCustomizationInfo, RandomSeed) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetRandomCustomizationInfo::RandomSeed' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomCustomizationInfo, MaxRarity) == 0x000004, "Member 'RBPlayerCustomizationConfig_GetRandomCustomizationInfo::MaxRarity' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomCustomizationInfo, bRandomSex) == 0x000005, "Member 'RBPlayerCustomizationConfig_GetRandomCustomizationInfo::bRandomSex' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomCustomizationInfo, bIsFemale) == 0x000006, "Member 'RBPlayerCustomizationConfig_GetRandomCustomizationInfo::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomCustomizationInfo, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetRandomCustomizationInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetRandomDeadBodyCustomizationInfo
// 0x0040 (0x0040 - 0x0000)
struct RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo final
{
public:
	int32                                         RandomSeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomSex;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFemale;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BF8[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo");
static_assert(sizeof(RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo) == 0x000040, "Wrong size on RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo, RandomSeed) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo::RandomSeed' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo, bRandomSex) == 0x000004, "Member 'RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo::bRandomSex' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo, bIsFemale) == 0x000005, "Member 'RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetRandomDeadBodyCustomizationInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationConfig.GetVoiceOption
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCustomizationConfig_GetVoiceOption final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBVoiceCustomizationOption*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationConfig_GetVoiceOption) == 0x000008, "Wrong alignment on RBPlayerCustomizationConfig_GetVoiceOption");
static_assert(sizeof(RBPlayerCustomizationConfig_GetVoiceOption) == 0x000010, "Wrong size on RBPlayerCustomizationConfig_GetVoiceOption");
static_assert(offsetof(RBPlayerCustomizationConfig_GetVoiceOption, ID) == 0x000000, "Member 'RBPlayerCustomizationConfig_GetVoiceOption::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationConfig_GetVoiceOption, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationConfig_GetVoiceOption::ReturnValue' has a wrong offset!");

// Function OPP.RBHidespotComponent.OnPawnHiddenInsideChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBHidespotComponent_OnPawnHiddenInsideChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHidespotComponent_OnPawnHiddenInsideChangedCallback) == 0x000001, "Wrong alignment on RBHidespotComponent_OnPawnHiddenInsideChangedCallback");
static_assert(sizeof(RBHidespotComponent_OnPawnHiddenInsideChangedCallback) == 0x000001, "Wrong size on RBHidespotComponent_OnPawnHiddenInsideChangedCallback");
static_assert(offsetof(RBHidespotComponent_OnPawnHiddenInsideChangedCallback, ChangedType) == 0x000000, "Member 'RBHidespotComponent_OnPawnHiddenInsideChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBHidespotComponent.OnPawnInteractingChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBHidespotComponent_OnPawnInteractingChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHidespotComponent_OnPawnInteractingChangedCallback) == 0x000001, "Wrong alignment on RBHidespotComponent_OnPawnInteractingChangedCallback");
static_assert(sizeof(RBHidespotComponent_OnPawnInteractingChangedCallback) == 0x000001, "Wrong size on RBHidespotComponent_OnPawnInteractingChangedCallback");
static_assert(offsetof(RBHidespotComponent_OnPawnInteractingChangedCallback, ChangedType) == 0x000000, "Member 'RBHidespotComponent_OnPawnInteractingChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBHidespotComponent.IsHidespotEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBHidespotComponent_IsHidespotEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHidespotComponent_IsHidespotEnabled) == 0x000001, "Wrong alignment on RBHidespotComponent_IsHidespotEnabled");
static_assert(sizeof(RBHidespotComponent_IsHidespotEnabled) == 0x000001, "Wrong size on RBHidespotComponent_IsHidespotEnabled");
static_assert(offsetof(RBHidespotComponent_IsHidespotEnabled, ReturnValue) == 0x000000, "Member 'RBHidespotComponent_IsHidespotEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBAISpawner.BP_SpawnBot
// 0x0008 (0x0008 - 0x0000)
struct RBAISpawner_BP_SpawnBot final
{
public:
	class ARBBot*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAISpawner_BP_SpawnBot) == 0x000008, "Wrong alignment on RBAISpawner_BP_SpawnBot");
static_assert(sizeof(RBAISpawner_BP_SpawnBot) == 0x000008, "Wrong size on RBAISpawner_BP_SpawnBot");
static_assert(offsetof(RBAISpawner_BP_SpawnBot, ReturnValue) == 0x000000, "Member 'RBAISpawner_BP_SpawnBot::ReturnValue' has a wrong offset!");

// Function OPP.RBAISpawner.BP_SpawnBotAsync
// 0x0028 (0x0028 - 0x0000)
struct RBAISpawner_BP_SpawnBotAsync final
{
public:
	class ARBBot*                                 Param_bot;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBNPC*                                 SpawnedPawn;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAISpawner_BP_SpawnBotAsync) == 0x000008, "Wrong alignment on RBAISpawner_BP_SpawnBotAsync");
static_assert(sizeof(RBAISpawner_BP_SpawnBotAsync) == 0x000028, "Wrong size on RBAISpawner_BP_SpawnBotAsync");
static_assert(offsetof(RBAISpawner_BP_SpawnBotAsync, Param_bot) == 0x000000, "Member 'RBAISpawner_BP_SpawnBotAsync::Param_bot' has a wrong offset!");
static_assert(offsetof(RBAISpawner_BP_SpawnBotAsync, SpawnedPawn) == 0x000008, "Member 'RBAISpawner_BP_SpawnBotAsync::SpawnedPawn' has a wrong offset!");
static_assert(offsetof(RBAISpawner_BP_SpawnBotAsync, LatentInfo) == 0x000010, "Member 'RBAISpawner_BP_SpawnBotAsync::LatentInfo' has a wrong offset!");

// Function OPP.RBAISpawner.BP_SpawnBotSpecific
// 0x0018 (0x0018 - 0x0000)
struct RBAISpawner_BP_SpawnBotSpecific final
{
public:
	TSubclassOf<class ARBNPC>                     SpecificPawnClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAIConfig*                            SpecificConfig;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBBot*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAISpawner_BP_SpawnBotSpecific) == 0x000008, "Wrong alignment on RBAISpawner_BP_SpawnBotSpecific");
static_assert(sizeof(RBAISpawner_BP_SpawnBotSpecific) == 0x000018, "Wrong size on RBAISpawner_BP_SpawnBotSpecific");
static_assert(offsetof(RBAISpawner_BP_SpawnBotSpecific, SpecificPawnClass) == 0x000000, "Member 'RBAISpawner_BP_SpawnBotSpecific::SpecificPawnClass' has a wrong offset!");
static_assert(offsetof(RBAISpawner_BP_SpawnBotSpecific, SpecificConfig) == 0x000008, "Member 'RBAISpawner_BP_SpawnBotSpecific::SpecificConfig' has a wrong offset!");
static_assert(offsetof(RBAISpawner_BP_SpawnBotSpecific, ReturnValue) == 0x000010, "Member 'RBAISpawner_BP_SpawnBotSpecific::ReturnValue' has a wrong offset!");

// Function OPP.RBAlarmDoorComponent.BP_OnAlerted
// 0x0001 (0x0001 - 0x0000)
struct RBAlarmDoorComponent_BP_OnAlerted final
{
public:
	bool                                          bIsAlerted;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAlarmDoorComponent_BP_OnAlerted) == 0x000001, "Wrong alignment on RBAlarmDoorComponent_BP_OnAlerted");
static_assert(sizeof(RBAlarmDoorComponent_BP_OnAlerted) == 0x000001, "Wrong size on RBAlarmDoorComponent_BP_OnAlerted");
static_assert(offsetof(RBAlarmDoorComponent_BP_OnAlerted, bIsAlerted) == 0x000000, "Member 'RBAlarmDoorComponent_BP_OnAlerted::bIsAlerted' has a wrong offset!");

// Function OPP.RBAlarmDoorComponent.OnDoorOpened
// 0x0008 (0x0008 - 0x0000)
struct RBAlarmDoorComponent_OnDoorOpened final
{
public:
	class ARBDoor*                                Door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAlarmDoorComponent_OnDoorOpened) == 0x000008, "Wrong alignment on RBAlarmDoorComponent_OnDoorOpened");
static_assert(sizeof(RBAlarmDoorComponent_OnDoorOpened) == 0x000008, "Wrong size on RBAlarmDoorComponent_OnDoorOpened");
static_assert(offsetof(RBAlarmDoorComponent_OnDoorOpened, Door) == 0x000000, "Member 'RBAlarmDoorComponent_OnDoorOpened::Door' has a wrong offset!");

// Function OPP.RBLoadingScreenWidget.Event_StartLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct RBLoadingScreenWidget_Event_StartLoadingScreen final
{
public:
	bool                                          SkipIntro;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLoadingScreenWidget_Event_StartLoadingScreen) == 0x000001, "Wrong alignment on RBLoadingScreenWidget_Event_StartLoadingScreen");
static_assert(sizeof(RBLoadingScreenWidget_Event_StartLoadingScreen) == 0x000001, "Wrong size on RBLoadingScreenWidget_Event_StartLoadingScreen");
static_assert(offsetof(RBLoadingScreenWidget_Event_StartLoadingScreen, SkipIntro) == 0x000000, "Member 'RBLoadingScreenWidget_Event_StartLoadingScreen::SkipIntro' has a wrong offset!");

// Function OPP.RBLoadingScreenWidget.Event_StopLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct RBLoadingScreenWidget_Event_StopLoadingScreen final
{
public:
	bool                                          SkipOutro;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLoadingScreenWidget_Event_StopLoadingScreen) == 0x000001, "Wrong alignment on RBLoadingScreenWidget_Event_StopLoadingScreen");
static_assert(sizeof(RBLoadingScreenWidget_Event_StopLoadingScreen) == 0x000001, "Wrong size on RBLoadingScreenWidget_Event_StopLoadingScreen");
static_assert(offsetof(RBLoadingScreenWidget_Event_StopLoadingScreen, SkipOutro) == 0x000000, "Member 'RBLoadingScreenWidget_Event_StopLoadingScreen::SkipOutro' has a wrong offset!");

// Function OPP.RBAmbientActivityMarker.Event_OnLeft
// 0x0008 (0x0008 - 0x0000)
struct RBAmbientActivityMarker_Event_OnLeft final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAmbientActivityMarker_Event_OnLeft) == 0x000008, "Wrong alignment on RBAmbientActivityMarker_Event_OnLeft");
static_assert(sizeof(RBAmbientActivityMarker_Event_OnLeft) == 0x000008, "Wrong size on RBAmbientActivityMarker_Event_OnLeft");
static_assert(offsetof(RBAmbientActivityMarker_Event_OnLeft, bot) == 0x000000, "Member 'RBAmbientActivityMarker_Event_OnLeft::bot' has a wrong offset!");

// Function OPP.RBAmbientActivityMarker.Event_OnReached
// 0x0008 (0x0008 - 0x0000)
struct RBAmbientActivityMarker_Event_OnReached final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAmbientActivityMarker_Event_OnReached) == 0x000008, "Wrong alignment on RBAmbientActivityMarker_Event_OnReached");
static_assert(sizeof(RBAmbientActivityMarker_Event_OnReached) == 0x000008, "Wrong size on RBAmbientActivityMarker_Event_OnReached");
static_assert(offsetof(RBAmbientActivityMarker_Event_OnReached, bot) == 0x000000, "Member 'RBAmbientActivityMarker_Event_OnReached::bot' has a wrong offset!");

// Function OPP.RBJumpScareTriggerable.CanTriggerScareJump
// 0x0001 (0x0001 - 0x0000)
struct RBJumpScareTriggerable_CanTriggerScareJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBJumpScareTriggerable_CanTriggerScareJump) == 0x000001, "Wrong alignment on RBJumpScareTriggerable_CanTriggerScareJump");
static_assert(sizeof(RBJumpScareTriggerable_CanTriggerScareJump) == 0x000001, "Wrong size on RBJumpScareTriggerable_CanTriggerScareJump");
static_assert(offsetof(RBJumpScareTriggerable_CanTriggerScareJump, ReturnValue) == 0x000000, "Member 'RBJumpScareTriggerable_CanTriggerScareJump::ReturnValue' has a wrong offset!");

// Function OPP.RBJumpScareTriggerable.InitializeLinkedRoom
// 0x0018 (0x0018 - 0x0000)
struct RBJumpScareTriggerable_InitializeLinkedRoom final
{
public:
	class URBRoomAssociationComponent*            RoomAssociationComponent;                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBRoom*                                PreviousRoom;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBRoom*                                NextRoom;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBJumpScareTriggerable_InitializeLinkedRoom) == 0x000008, "Wrong alignment on RBJumpScareTriggerable_InitializeLinkedRoom");
static_assert(sizeof(RBJumpScareTriggerable_InitializeLinkedRoom) == 0x000018, "Wrong size on RBJumpScareTriggerable_InitializeLinkedRoom");
static_assert(offsetof(RBJumpScareTriggerable_InitializeLinkedRoom, RoomAssociationComponent) == 0x000000, "Member 'RBJumpScareTriggerable_InitializeLinkedRoom::RoomAssociationComponent' has a wrong offset!");
static_assert(offsetof(RBJumpScareTriggerable_InitializeLinkedRoom, PreviousRoom) == 0x000008, "Member 'RBJumpScareTriggerable_InitializeLinkedRoom::PreviousRoom' has a wrong offset!");
static_assert(offsetof(RBJumpScareTriggerable_InitializeLinkedRoom, NextRoom) == 0x000010, "Member 'RBJumpScareTriggerable_InitializeLinkedRoom::NextRoom' has a wrong offset!");

// Function OPP.RBJumpScareTriggerable.Multicast_SetIgnoreStinger
// 0x0001 (0x0001 - 0x0000)
struct RBJumpScareTriggerable_Multicast_SetIgnoreStinger final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBJumpScareTriggerable_Multicast_SetIgnoreStinger) == 0x000001, "Wrong alignment on RBJumpScareTriggerable_Multicast_SetIgnoreStinger");
static_assert(sizeof(RBJumpScareTriggerable_Multicast_SetIgnoreStinger) == 0x000001, "Wrong size on RBJumpScareTriggerable_Multicast_SetIgnoreStinger");
static_assert(offsetof(RBJumpScareTriggerable_Multicast_SetIgnoreStinger, bIgnore) == 0x000000, "Member 'RBJumpScareTriggerable_Multicast_SetIgnoreStinger::bIgnore' has a wrong offset!");

// Function OPP.RBJumpScareTriggerable.OnRoomEntered
// 0x0008 (0x0008 - 0x0000)
struct RBJumpScareTriggerable_OnRoomEntered final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBJumpScareTriggerable_OnRoomEntered) == 0x000008, "Wrong alignment on RBJumpScareTriggerable_OnRoomEntered");
static_assert(sizeof(RBJumpScareTriggerable_OnRoomEntered) == 0x000008, "Wrong size on RBJumpScareTriggerable_OnRoomEntered");
static_assert(offsetof(RBJumpScareTriggerable_OnRoomEntered, Pawn) == 0x000000, "Member 'RBJumpScareTriggerable_OnRoomEntered::Pawn' has a wrong offset!");

// Function OPP.RBJumpScareTriggerable.OnTriggerBoxOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBJumpScareTriggerable_OnTriggerBoxOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C37[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBJumpScareTriggerable_OnTriggerBoxOverlap) == 0x000008, "Wrong alignment on RBJumpScareTriggerable_OnTriggerBoxOverlap");
static_assert(sizeof(RBJumpScareTriggerable_OnTriggerBoxOverlap) == 0x0000A8, "Wrong size on RBJumpScareTriggerable_OnTriggerBoxOverlap");
static_assert(offsetof(RBJumpScareTriggerable_OnTriggerBoxOverlap, OverlappedComponent) == 0x000000, "Member 'RBJumpScareTriggerable_OnTriggerBoxOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBJumpScareTriggerable_OnTriggerBoxOverlap, OtherActor) == 0x000008, "Member 'RBJumpScareTriggerable_OnTriggerBoxOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBJumpScareTriggerable_OnTriggerBoxOverlap, OtherComp) == 0x000010, "Member 'RBJumpScareTriggerable_OnTriggerBoxOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBJumpScareTriggerable_OnTriggerBoxOverlap, OtherBodyIndex) == 0x000018, "Member 'RBJumpScareTriggerable_OnTriggerBoxOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBJumpScareTriggerable_OnTriggerBoxOverlap, bFromSweep) == 0x00001C, "Member 'RBJumpScareTriggerable_OnTriggerBoxOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBJumpScareTriggerable_OnTriggerBoxOverlap, SweepResult) == 0x000020, "Member 'RBJumpScareTriggerable_OnTriggerBoxOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBJumpScareTriggerable.GetScareStingerLocation
// 0x000C (0x000C - 0x0000)
struct RBJumpScareTriggerable_GetScareStingerLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBJumpScareTriggerable_GetScareStingerLocation) == 0x000004, "Wrong alignment on RBJumpScareTriggerable_GetScareStingerLocation");
static_assert(sizeof(RBJumpScareTriggerable_GetScareStingerLocation) == 0x00000C, "Wrong size on RBJumpScareTriggerable_GetScareStingerLocation");
static_assert(offsetof(RBJumpScareTriggerable_GetScareStingerLocation, ReturnValue) == 0x000000, "Member 'RBJumpScareTriggerable_GetScareStingerLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomSpecialMoveInteractableActor.CompleteInteractionForPlayer_Client
// 0x0008 (0x0008 - 0x0000)
struct RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Client final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Client) == 0x000008, "Wrong alignment on RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Client");
static_assert(sizeof(RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Client) == 0x000008, "Wrong size on RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Client");
static_assert(offsetof(RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Client, Player) == 0x000000, "Member 'RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Client::Player' has a wrong offset!");

// Function OPP.RBCustomSpecialMoveInteractableActor.CompleteInteractionForPlayer_Server
// 0x0008 (0x0008 - 0x0000)
struct RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Server final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Server) == 0x000008, "Wrong alignment on RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Server");
static_assert(sizeof(RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Server) == 0x000008, "Wrong size on RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Server");
static_assert(offsetof(RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Server, Player) == 0x000000, "Member 'RBCustomSpecialMoveInteractableActor_CompleteInteractionForPlayer_Server::Player' has a wrong offset!");

// Function OPP.RBCustomSpecialMoveInteractableActor.Multicast_OnPlayerInteracted
// 0x0008 (0x0008 - 0x0000)
struct RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteracted final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteracted) == 0x000008, "Wrong alignment on RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteracted");
static_assert(sizeof(RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteracted) == 0x000008, "Wrong size on RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteracted");
static_assert(offsetof(RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteracted, Player) == 0x000000, "Member 'RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteracted::Player' has a wrong offset!");

// Function OPP.RBCustomSpecialMoveInteractableActor.Multicast_OnPlayerInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteractionCompleted final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteractionCompleted) == 0x000008, "Wrong alignment on RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteractionCompleted");
static_assert(sizeof(RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteractionCompleted) == 0x000008, "Wrong size on RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteractionCompleted");
static_assert(offsetof(RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteractionCompleted, Player) == 0x000000, "Member 'RBCustomSpecialMoveInteractableActor_Multicast_OnPlayerInteractionCompleted::Player' has a wrong offset!");

// Function OPP.RBQuestGiver.GetNextStorylineVO
// 0x0020 (0x0020 - 0x0000)
struct RBQuestGiver_GetNextStorylineVO final
{
public:
	int32                                         LevelPlayed;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFallbackVO;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C41[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FeatureSwitchPlayed;                               // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBQuestGiver_GetNextStorylineVO) == 0x000008, "Wrong alignment on RBQuestGiver_GetNextStorylineVO");
static_assert(sizeof(RBQuestGiver_GetNextStorylineVO) == 0x000020, "Wrong size on RBQuestGiver_GetNextStorylineVO");
static_assert(offsetof(RBQuestGiver_GetNextStorylineVO, LevelPlayed) == 0x000000, "Member 'RBQuestGiver_GetNextStorylineVO::LevelPlayed' has a wrong offset!");
static_assert(offsetof(RBQuestGiver_GetNextStorylineVO, bIsFallbackVO) == 0x000004, "Member 'RBQuestGiver_GetNextStorylineVO::bIsFallbackVO' has a wrong offset!");
static_assert(offsetof(RBQuestGiver_GetNextStorylineVO, FeatureSwitchPlayed) == 0x000008, "Member 'RBQuestGiver_GetNextStorylineVO::FeatureSwitchPlayed' has a wrong offset!");
static_assert(offsetof(RBQuestGiver_GetNextStorylineVO, ReturnValue) == 0x000018, "Member 'RBQuestGiver_GetNextStorylineVO::ReturnValue' has a wrong offset!");

// Function OPP.RBQuestGiver.OnVOEnded
// 0x0010 (0x0010 - 0x0000)
struct RBQuestGiver_OnVOEnded final
{
public:
	class AActor*                                 RbTalker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayingId;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C42[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBQuestGiver_OnVOEnded) == 0x000008, "Wrong alignment on RBQuestGiver_OnVOEnded");
static_assert(sizeof(RBQuestGiver_OnVOEnded) == 0x000010, "Wrong size on RBQuestGiver_OnVOEnded");
static_assert(offsetof(RBQuestGiver_OnVOEnded, RbTalker) == 0x000000, "Member 'RBQuestGiver_OnVOEnded::RbTalker' has a wrong offset!");
static_assert(offsetof(RBQuestGiver_OnVOEnded, PlayingId) == 0x000008, "Member 'RBQuestGiver_OnVOEnded::PlayingId' has a wrong offset!");

// Function OPP.RBQuestGiver.PlayAkEvent
// 0x0010 (0x0010 - 0x0000)
struct RBQuestGiver_PlayAkEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOContext                                    VOContext;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOPriority                                   VOPriority;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C43[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBQuestGiver_PlayAkEvent) == 0x000008, "Wrong alignment on RBQuestGiver_PlayAkEvent");
static_assert(sizeof(RBQuestGiver_PlayAkEvent) == 0x000010, "Wrong size on RBQuestGiver_PlayAkEvent");
static_assert(offsetof(RBQuestGiver_PlayAkEvent, AkEvent) == 0x000000, "Member 'RBQuestGiver_PlayAkEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(RBQuestGiver_PlayAkEvent, VOContext) == 0x000008, "Member 'RBQuestGiver_PlayAkEvent::VOContext' has a wrong offset!");
static_assert(offsetof(RBQuestGiver_PlayAkEvent, VOPriority) == 0x000009, "Member 'RBQuestGiver_PlayAkEvent::VOPriority' has a wrong offset!");
static_assert(offsetof(RBQuestGiver_PlayAkEvent, ReturnValue) == 0x00000C, "Member 'RBQuestGiver_PlayAkEvent::ReturnValue' has a wrong offset!");

// Function OPP.RBQuestGiver.PlayStoryLine
// 0x0004 (0x0004 - 0x0000)
struct RBQuestGiver_PlayStoryLine final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBQuestGiver_PlayStoryLine) == 0x000004, "Wrong alignment on RBQuestGiver_PlayStoryLine");
static_assert(sizeof(RBQuestGiver_PlayStoryLine) == 0x000004, "Wrong size on RBQuestGiver_PlayStoryLine");
static_assert(offsetof(RBQuestGiver_PlayStoryLine, ReturnValue) == 0x000000, "Member 'RBQuestGiver_PlayStoryLine::ReturnValue' has a wrong offset!");

// Function OPP.RBQuestGiver.GetMetaNPCType
// 0x0001 (0x0001 - 0x0000)
struct RBQuestGiver_GetMetaNPCType final
{
public:
	EMetaNPCType                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBQuestGiver_GetMetaNPCType) == 0x000001, "Wrong alignment on RBQuestGiver_GetMetaNPCType");
static_assert(sizeof(RBQuestGiver_GetMetaNPCType) == 0x000001, "Wrong size on RBQuestGiver_GetMetaNPCType");
static_assert(offsetof(RBQuestGiver_GetMetaNPCType, ReturnValue) == 0x000000, "Member 'RBQuestGiver_GetMetaNPCType::ReturnValue' has a wrong offset!");

// Function OPP.RBAnimInstance.GetIsLeftFootDown
// 0x0001 (0x0001 - 0x0000)
struct RBAnimInstance_GetIsLeftFootDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAnimInstance_GetIsLeftFootDown) == 0x000001, "Wrong alignment on RBAnimInstance_GetIsLeftFootDown");
static_assert(sizeof(RBAnimInstance_GetIsLeftFootDown) == 0x000001, "Wrong size on RBAnimInstance_GetIsLeftFootDown");
static_assert(offsetof(RBAnimInstance_GetIsLeftFootDown, ReturnValue) == 0x000000, "Member 'RBAnimInstance_GetIsLeftFootDown::ReturnValue' has a wrong offset!");

// Function OPP.RBAnimInstance.OnTraversalSlideDone
// 0x0001 (0x0001 - 0x0000)
struct RBAnimInstance_OnTraversalSlideDone final
{
public:
	bool                                          bHitWall;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAnimInstance_OnTraversalSlideDone) == 0x000001, "Wrong alignment on RBAnimInstance_OnTraversalSlideDone");
static_assert(sizeof(RBAnimInstance_OnTraversalSlideDone) == 0x000001, "Wrong size on RBAnimInstance_OnTraversalSlideDone");
static_assert(offsetof(RBAnimInstance_OnTraversalSlideDone, bHitWall) == 0x000000, "Member 'RBAnimInstance_OnTraversalSlideDone::bHitWall' has a wrong offset!");

// Function OPP.RBAnimInstance.SetHoldingItem
// 0x0002 (0x0002 - 0x0000)
struct RBAnimInstance_SetHoldingItem final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAnimInstance_SetHoldingItem) == 0x000001, "Wrong alignment on RBAnimInstance_SetHoldingItem");
static_assert(sizeof(RBAnimInstance_SetHoldingItem) == 0x000002, "Wrong size on RBAnimInstance_SetHoldingItem");
static_assert(offsetof(RBAnimInstance_SetHoldingItem, Value) == 0x000000, "Member 'RBAnimInstance_SetHoldingItem::Value' has a wrong offset!");
static_assert(offsetof(RBAnimInstance_SetHoldingItem, Force) == 0x000001, "Member 'RBAnimInstance_SetHoldingItem::Force' has a wrong offset!");

// Function OPP.RBAnimInstance.SetIsPlayingSpecialMoveAnimation
// 0x0001 (0x0001 - 0x0000)
struct RBAnimInstance_SetIsPlayingSpecialMoveAnimation final
{
public:
	bool                                          In_IsPlayingSpecialMoveAnimation;                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAnimInstance_SetIsPlayingSpecialMoveAnimation) == 0x000001, "Wrong alignment on RBAnimInstance_SetIsPlayingSpecialMoveAnimation");
static_assert(sizeof(RBAnimInstance_SetIsPlayingSpecialMoveAnimation) == 0x000001, "Wrong size on RBAnimInstance_SetIsPlayingSpecialMoveAnimation");
static_assert(offsetof(RBAnimInstance_SetIsPlayingSpecialMoveAnimation, In_IsPlayingSpecialMoveAnimation) == 0x000000, "Member 'RBAnimInstance_SetIsPlayingSpecialMoveAnimation::In_IsPlayingSpecialMoveAnimation' has a wrong offset!");

// Function OPP.RBAnimInstance.GetIsPlayingSpecialMoveAnimation
// 0x0001 (0x0001 - 0x0000)
struct RBAnimInstance_GetIsPlayingSpecialMoveAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAnimInstance_GetIsPlayingSpecialMoveAnimation) == 0x000001, "Wrong alignment on RBAnimInstance_GetIsPlayingSpecialMoveAnimation");
static_assert(sizeof(RBAnimInstance_GetIsPlayingSpecialMoveAnimation) == 0x000001, "Wrong size on RBAnimInstance_GetIsPlayingSpecialMoveAnimation");
static_assert(offsetof(RBAnimInstance_GetIsPlayingSpecialMoveAnimation, ReturnValue) == 0x000000, "Member 'RBAnimInstance_GetIsPlayingSpecialMoveAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBAnimInstanceNPC.IsPlayingSpecialAnimState
// 0x0001 (0x0001 - 0x0000)
struct RBAnimInstanceNPC_IsPlayingSpecialAnimState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAnimInstanceNPC_IsPlayingSpecialAnimState) == 0x000001, "Wrong alignment on RBAnimInstanceNPC_IsPlayingSpecialAnimState");
static_assert(sizeof(RBAnimInstanceNPC_IsPlayingSpecialAnimState) == 0x000001, "Wrong size on RBAnimInstanceNPC_IsPlayingSpecialAnimState");
static_assert(offsetof(RBAnimInstanceNPC_IsPlayingSpecialAnimState, ReturnValue) == 0x000000, "Member 'RBAnimInstanceNPC_IsPlayingSpecialAnimState::ReturnValue' has a wrong offset!");

// Function OPP.RBAnimInstancePlayer.GetItemHeld
// 0x0008 (0x0008 - 0x0000)
struct RBAnimInstancePlayer_GetItemHeld final
{
public:
	class ARBPickup*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAnimInstancePlayer_GetItemHeld) == 0x000008, "Wrong alignment on RBAnimInstancePlayer_GetItemHeld");
static_assert(sizeof(RBAnimInstancePlayer_GetItemHeld) == 0x000008, "Wrong size on RBAnimInstancePlayer_GetItemHeld");
static_assert(offsetof(RBAnimInstancePlayer_GetItemHeld, ReturnValue) == 0x000000, "Member 'RBAnimInstancePlayer_GetItemHeld::ReturnValue' has a wrong offset!");

// Function OPP.RBAnimInstancePlayer.OnWantsNightVisionChanged
// 0x0001 (0x0001 - 0x0000)
struct RBAnimInstancePlayer_OnWantsNightVisionChanged final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAnimInstancePlayer_OnWantsNightVisionChanged) == 0x000001, "Wrong alignment on RBAnimInstancePlayer_OnWantsNightVisionChanged");
static_assert(sizeof(RBAnimInstancePlayer_OnWantsNightVisionChanged) == 0x000001, "Wrong size on RBAnimInstancePlayer_OnWantsNightVisionChanged");
static_assert(offsetof(RBAnimInstancePlayer_OnWantsNightVisionChanged, bOn) == 0x000000, "Member 'RBAnimInstancePlayer_OnWantsNightVisionChanged::bOn' has a wrong offset!");

// Function OPP.RBInGameMenuWidget.GetSocialMenuManager
// 0x0008 (0x0008 - 0x0000)
struct RBInGameMenuWidget_GetSocialMenuManager final
{
public:
	class URBSocialMenuManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInGameMenuWidget_GetSocialMenuManager) == 0x000008, "Wrong alignment on RBInGameMenuWidget_GetSocialMenuManager");
static_assert(sizeof(RBInGameMenuWidget_GetSocialMenuManager) == 0x000008, "Wrong size on RBInGameMenuWidget_GetSocialMenuManager");
static_assert(offsetof(RBInGameMenuWidget_GetSocialMenuManager, ReturnValue) == 0x000000, "Member 'RBInGameMenuWidget_GetSocialMenuManager::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneDefenceWatcherComponent.GetZoneProgress
// 0x0004 (0x0004 - 0x0000)
struct RBZoneDefenceWatcherComponent_GetZoneProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneDefenceWatcherComponent_GetZoneProgress) == 0x000004, "Wrong alignment on RBZoneDefenceWatcherComponent_GetZoneProgress");
static_assert(sizeof(RBZoneDefenceWatcherComponent_GetZoneProgress) == 0x000004, "Wrong size on RBZoneDefenceWatcherComponent_GetZoneProgress");
static_assert(offsetof(RBZoneDefenceWatcherComponent_GetZoneProgress, ReturnValue) == 0x000000, "Member 'RBZoneDefenceWatcherComponent_GetZoneProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneDefenceWatcherComponent.IsZoneActive
// 0x0001 (0x0001 - 0x0000)
struct RBZoneDefenceWatcherComponent_IsZoneActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneDefenceWatcherComponent_IsZoneActive) == 0x000001, "Wrong alignment on RBZoneDefenceWatcherComponent_IsZoneActive");
static_assert(sizeof(RBZoneDefenceWatcherComponent_IsZoneActive) == 0x000001, "Wrong size on RBZoneDefenceWatcherComponent_IsZoneActive");
static_assert(offsetof(RBZoneDefenceWatcherComponent_IsZoneActive, ReturnValue) == 0x000000, "Member 'RBZoneDefenceWatcherComponent_IsZoneActive::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneDefenceWatcherComponent.IsZoneCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBZoneDefenceWatcherComponent_IsZoneCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneDefenceWatcherComponent_IsZoneCompleted) == 0x000001, "Wrong alignment on RBZoneDefenceWatcherComponent_IsZoneCompleted");
static_assert(sizeof(RBZoneDefenceWatcherComponent_IsZoneCompleted) == 0x000001, "Wrong size on RBZoneDefenceWatcherComponent_IsZoneCompleted");
static_assert(offsetof(RBZoneDefenceWatcherComponent_IsZoneCompleted, ReturnValue) == 0x000000, "Member 'RBZoneDefenceWatcherComponent_IsZoneCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneDefenceWatcherComponent.OnObjectiveCoordinatorStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBZoneDefenceWatcherComponent_OnObjectiveCoordinatorStateChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveCoordinatorState                    NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CAF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBZoneDefenceWatcherComponent_OnObjectiveCoordinatorStateChanged) == 0x000008, "Wrong alignment on RBZoneDefenceWatcherComponent_OnObjectiveCoordinatorStateChanged");
static_assert(sizeof(RBZoneDefenceWatcherComponent_OnObjectiveCoordinatorStateChanged) == 0x000010, "Wrong size on RBZoneDefenceWatcherComponent_OnObjectiveCoordinatorStateChanged");
static_assert(offsetof(RBZoneDefenceWatcherComponent_OnObjectiveCoordinatorStateChanged, Coordinator) == 0x000000, "Member 'RBZoneDefenceWatcherComponent_OnObjectiveCoordinatorStateChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(RBZoneDefenceWatcherComponent_OnObjectiveCoordinatorStateChanged, NewState) == 0x000008, "Member 'RBZoneDefenceWatcherComponent_OnObjectiveCoordinatorStateChanged::NewState' has a wrong offset!");

// Function OPP.RBHUDElementWidget.Event_OnHudModeChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHUDElementWidget_Event_OnHudModeChanged final
{
public:
	EHudMode                                      NewHudMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_Event_OnHudModeChanged) == 0x000001, "Wrong alignment on RBHUDElementWidget_Event_OnHudModeChanged");
static_assert(sizeof(RBHUDElementWidget_Event_OnHudModeChanged) == 0x000001, "Wrong size on RBHUDElementWidget_Event_OnHudModeChanged");
static_assert(offsetof(RBHUDElementWidget_Event_OnHudModeChanged, NewHudMode) == 0x000000, "Member 'RBHUDElementWidget_Event_OnHudModeChanged::NewHudMode' has a wrong offset!");

// Function OPP.RBHUDElementWidget.Event_OnLocalPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct RBHUDElementWidget_Event_OnLocalPlayerChanged final
{
public:
	class ARBPlayer*                              OldLocalPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              NewLocalPlayer;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_Event_OnLocalPlayerChanged) == 0x000008, "Wrong alignment on RBHUDElementWidget_Event_OnLocalPlayerChanged");
static_assert(sizeof(RBHUDElementWidget_Event_OnLocalPlayerChanged) == 0x000010, "Wrong size on RBHUDElementWidget_Event_OnLocalPlayerChanged");
static_assert(offsetof(RBHUDElementWidget_Event_OnLocalPlayerChanged, OldLocalPlayer) == 0x000000, "Member 'RBHUDElementWidget_Event_OnLocalPlayerChanged::OldLocalPlayer' has a wrong offset!");
static_assert(offsetof(RBHUDElementWidget_Event_OnLocalPlayerChanged, NewLocalPlayer) == 0x000008, "Member 'RBHUDElementWidget_Event_OnLocalPlayerChanged::NewLocalPlayer' has a wrong offset!");

// Function OPP.RBHUDElementWidget.Event_OnSpectatedPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct RBHUDElementWidget_Event_OnSpectatedPlayerChanged final
{
public:
	class ARBPlayer*                              NewSpectatedlPlayer;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_Event_OnSpectatedPlayerChanged) == 0x000008, "Wrong alignment on RBHUDElementWidget_Event_OnSpectatedPlayerChanged");
static_assert(sizeof(RBHUDElementWidget_Event_OnSpectatedPlayerChanged) == 0x000008, "Wrong size on RBHUDElementWidget_Event_OnSpectatedPlayerChanged");
static_assert(offsetof(RBHUDElementWidget_Event_OnSpectatedPlayerChanged, NewSpectatedlPlayer) == 0x000000, "Member 'RBHUDElementWidget_Event_OnSpectatedPlayerChanged::NewSpectatedlPlayer' has a wrong offset!");

// Function OPP.RBHUDElementWidget.Event_OnWatchedPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct RBHUDElementWidget_Event_OnWatchedPlayerChanged final
{
public:
	class ARBPlayer*                              OldPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              NewPlayer;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_Event_OnWatchedPlayerChanged) == 0x000008, "Wrong alignment on RBHUDElementWidget_Event_OnWatchedPlayerChanged");
static_assert(sizeof(RBHUDElementWidget_Event_OnWatchedPlayerChanged) == 0x000010, "Wrong size on RBHUDElementWidget_Event_OnWatchedPlayerChanged");
static_assert(offsetof(RBHUDElementWidget_Event_OnWatchedPlayerChanged, OldPlayer) == 0x000000, "Member 'RBHUDElementWidget_Event_OnWatchedPlayerChanged::OldPlayer' has a wrong offset!");
static_assert(offsetof(RBHUDElementWidget_Event_OnWatchedPlayerChanged, NewPlayer) == 0x000008, "Member 'RBHUDElementWidget_Event_OnWatchedPlayerChanged::NewPlayer' has a wrong offset!");

// Function OPP.RBHUDElementWidget.ForceShowForDuration
// 0x0004 (0x0004 - 0x0000)
struct RBHUDElementWidget_ForceShowForDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_ForceShowForDuration) == 0x000004, "Wrong alignment on RBHUDElementWidget_ForceShowForDuration");
static_assert(sizeof(RBHUDElementWidget_ForceShowForDuration) == 0x000004, "Wrong size on RBHUDElementWidget_ForceShowForDuration");
static_assert(offsetof(RBHUDElementWidget_ForceShowForDuration, Duration) == 0x000000, "Member 'RBHUDElementWidget_ForceShowForDuration::Duration' has a wrong offset!");

// Function OPP.RBHUDElementWidget.SetForcedShow
// 0x0001 (0x0001 - 0x0000)
struct RBHUDElementWidget_SetForcedShow final
{
public:
	bool                                          ForcedShow;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_SetForcedShow) == 0x000001, "Wrong alignment on RBHUDElementWidget_SetForcedShow");
static_assert(sizeof(RBHUDElementWidget_SetForcedShow) == 0x000001, "Wrong size on RBHUDElementWidget_SetForcedShow");
static_assert(offsetof(RBHUDElementWidget_SetForcedShow, ForcedShow) == 0x000000, "Member 'RBHUDElementWidget_SetForcedShow::ForcedShow' has a wrong offset!");

// Function OPP.RBHUDElementWidget.GetHUDOpacity
// 0x0004 (0x0004 - 0x0000)
struct RBHUDElementWidget_GetHUDOpacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_GetHUDOpacity) == 0x000004, "Wrong alignment on RBHUDElementWidget_GetHUDOpacity");
static_assert(sizeof(RBHUDElementWidget_GetHUDOpacity) == 0x000004, "Wrong size on RBHUDElementWidget_GetHUDOpacity");
static_assert(offsetof(RBHUDElementWidget_GetHUDOpacity, ReturnValue) == 0x000000, "Member 'RBHUDElementWidget_GetHUDOpacity::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDElementWidget.GetWatchedPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBHUDElementWidget_GetWatchedPlayer final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_GetWatchedPlayer) == 0x000008, "Wrong alignment on RBHUDElementWidget_GetWatchedPlayer");
static_assert(sizeof(RBHUDElementWidget_GetWatchedPlayer) == 0x000008, "Wrong size on RBHUDElementWidget_GetWatchedPlayer");
static_assert(offsetof(RBHUDElementWidget_GetWatchedPlayer, ReturnValue) == 0x000000, "Member 'RBHUDElementWidget_GetWatchedPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDElementWidget.IsInValidHudMode
// 0x0001 (0x0001 - 0x0000)
struct RBHUDElementWidget_IsInValidHudMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_IsInValidHudMode) == 0x000001, "Wrong alignment on RBHUDElementWidget_IsInValidHudMode");
static_assert(sizeof(RBHUDElementWidget_IsInValidHudMode) == 0x000001, "Wrong size on RBHUDElementWidget_IsInValidHudMode");
static_assert(offsetof(RBHUDElementWidget_IsInValidHudMode, ReturnValue) == 0x000000, "Member 'RBHUDElementWidget_IsInValidHudMode::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDElementWidget.ShouldForceShow
// 0x0001 (0x0001 - 0x0000)
struct RBHUDElementWidget_ShouldForceShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_ShouldForceShow) == 0x000001, "Wrong alignment on RBHUDElementWidget_ShouldForceShow");
static_assert(sizeof(RBHUDElementWidget_ShouldForceShow) == 0x000001, "Wrong size on RBHUDElementWidget_ShouldForceShow");
static_assert(offsetof(RBHUDElementWidget_ShouldForceShow, ReturnValue) == 0x000000, "Member 'RBHUDElementWidget_ShouldForceShow::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDElementWidget.ShouldShow
// 0x0001 (0x0001 - 0x0000)
struct RBHUDElementWidget_ShouldShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_ShouldShow) == 0x000001, "Wrong alignment on RBHUDElementWidget_ShouldShow");
static_assert(sizeof(RBHUDElementWidget_ShouldShow) == 0x000001, "Wrong size on RBHUDElementWidget_ShouldShow");
static_assert(offsetof(RBHUDElementWidget_ShouldShow, ReturnValue) == 0x000000, "Member 'RBHUDElementWidget_ShouldShow::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDElementWidget.ShouldShowBase
// 0x0001 (0x0001 - 0x0000)
struct RBHUDElementWidget_ShouldShowBase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDElementWidget_ShouldShowBase) == 0x000001, "Wrong alignment on RBHUDElementWidget_ShouldShowBase");
static_assert(sizeof(RBHUDElementWidget_ShouldShowBase) == 0x000001, "Wrong size on RBHUDElementWidget_ShouldShowBase");
static_assert(offsetof(RBHUDElementWidget_ShouldShowBase, ReturnValue) == 0x000000, "Member 'RBHUDElementWidget_ShouldShowBase::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.BP_RegisterActorToClean
// 0x0008 (0x0008 - 0x0000)
struct RBWorld_BP_RegisterActorToClean final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_BP_RegisterActorToClean) == 0x000008, "Wrong alignment on RBWorld_BP_RegisterActorToClean");
static_assert(sizeof(RBWorld_BP_RegisterActorToClean) == 0x000008, "Wrong size on RBWorld_BP_RegisterActorToClean");
static_assert(offsetof(RBWorld_BP_RegisterActorToClean, Actor) == 0x000000, "Member 'RBWorld_BP_RegisterActorToClean::Actor' has a wrong offset!");

// Function OPP.RBWorld.EstimateFogDensity
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_EstimateFogDensity final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_EstimateFogDensity) == 0x000004, "Wrong alignment on RBWorld_EstimateFogDensity");
static_assert(sizeof(RBWorld_EstimateFogDensity) == 0x000010, "Wrong size on RBWorld_EstimateFogDensity");
static_assert(offsetof(RBWorld_EstimateFogDensity, Location) == 0x000000, "Member 'RBWorld_EstimateFogDensity::Location' has a wrong offset!");
static_assert(offsetof(RBWorld_EstimateFogDensity, ReturnValue) == 0x00000C, "Member 'RBWorld_EstimateFogDensity::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.OnPickupHolderChanged_Server
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_OnPickupHolderChanged_Server final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_OnPickupHolderChanged_Server) == 0x000008, "Wrong alignment on RBWorld_OnPickupHolderChanged_Server");
static_assert(sizeof(RBWorld_OnPickupHolderChanged_Server) == 0x000010, "Wrong size on RBWorld_OnPickupHolderChanged_Server");
static_assert(offsetof(RBWorld_OnPickupHolderChanged_Server, Player) == 0x000000, "Member 'RBWorld_OnPickupHolderChanged_Server::Player' has a wrong offset!");
static_assert(offsetof(RBWorld_OnPickupHolderChanged_Server, LargePickup) == 0x000008, "Member 'RBWorld_OnPickupHolderChanged_Server::LargePickup' has a wrong offset!");

// Function OPP.RBWorld.GetDoors
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetDoors final
{
public:
	TArray<class ARBDoor*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetDoors) == 0x000008, "Wrong alignment on RBWorld_GetDoors");
static_assert(sizeof(RBWorld_GetDoors) == 0x000010, "Wrong size on RBWorld_GetDoors");
static_assert(offsetof(RBWorld_GetDoors, ReturnValue) == 0x000000, "Member 'RBWorld_GetDoors::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetItemSpawningManager
// 0x0008 (0x0008 - 0x0000)
struct RBWorld_GetItemSpawningManager final
{
public:
	class ARBItemSpawningManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetItemSpawningManager) == 0x000008, "Wrong alignment on RBWorld_GetItemSpawningManager");
static_assert(sizeof(RBWorld_GetItemSpawningManager) == 0x000008, "Wrong size on RBWorld_GetItemSpawningManager");
static_assert(offsetof(RBWorld_GetItemSpawningManager, ReturnValue) == 0x000000, "Member 'RBWorld_GetItemSpawningManager::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetLoadProgressPercentage
// 0x0004 (0x0004 - 0x0000)
struct RBWorld_GetLoadProgressPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetLoadProgressPercentage) == 0x000004, "Wrong alignment on RBWorld_GetLoadProgressPercentage");
static_assert(sizeof(RBWorld_GetLoadProgressPercentage) == 0x000004, "Wrong size on RBWorld_GetLoadProgressPercentage");
static_assert(offsetof(RBWorld_GetLoadProgressPercentage, ReturnValue) == 0x000000, "Member 'RBWorld_GetLoadProgressPercentage::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetMonsterClosets
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetMonsterClosets final
{
public:
	TArray<class ARBMonsterCloset*>               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetMonsterClosets) == 0x000008, "Wrong alignment on RBWorld_GetMonsterClosets");
static_assert(sizeof(RBWorld_GetMonsterClosets) == 0x000010, "Wrong size on RBWorld_GetMonsterClosets");
static_assert(offsetof(RBWorld_GetMonsterClosets, ReturnValue) == 0x000000, "Member 'RBWorld_GetMonsterClosets::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetNPCs
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetNPCs final
{
public:
	TArray<class ARBNPC*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetNPCs) == 0x000008, "Wrong alignment on RBWorld_GetNPCs");
static_assert(sizeof(RBWorld_GetNPCs) == 0x000010, "Wrong size on RBWorld_GetNPCs");
static_assert(offsetof(RBWorld_GetNPCs, ReturnValue) == 0x000000, "Member 'RBWorld_GetNPCs::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetRBBreakableObstacles
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetRBBreakableObstacles final
{
public:
	TArray<class ARBBreakableObstacle*>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetRBBreakableObstacles) == 0x000008, "Wrong alignment on RBWorld_GetRBBreakableObstacles");
static_assert(sizeof(RBWorld_GetRBBreakableObstacles) == 0x000010, "Wrong size on RBWorld_GetRBBreakableObstacles");
static_assert(offsetof(RBWorld_GetRBBreakableObstacles, ReturnValue) == 0x000000, "Member 'RBWorld_GetRBBreakableObstacles::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetRBInteractibles
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetRBInteractibles final
{
public:
	TArray<class ARBInteractible*>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetRBInteractibles) == 0x000008, "Wrong alignment on RBWorld_GetRBInteractibles");
static_assert(sizeof(RBWorld_GetRBInteractibles) == 0x000010, "Wrong size on RBWorld_GetRBInteractibles");
static_assert(offsetof(RBWorld_GetRBInteractibles, ReturnValue) == 0x000000, "Member 'RBWorld_GetRBInteractibles::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetRBLargePickups
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetRBLargePickups final
{
public:
	TArray<class ARBLargePickup*>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetRBLargePickups) == 0x000008, "Wrong alignment on RBWorld_GetRBLargePickups");
static_assert(sizeof(RBWorld_GetRBLargePickups) == 0x000010, "Wrong size on RBWorld_GetRBLargePickups");
static_assert(offsetof(RBWorld_GetRBLargePickups, ReturnValue) == 0x000000, "Member 'RBWorld_GetRBLargePickups::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetRBPawns
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetRBPawns final
{
public:
	TArray<class ARBPawn*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetRBPawns) == 0x000008, "Wrong alignment on RBWorld_GetRBPawns");
static_assert(sizeof(RBWorld_GetRBPawns) == 0x000010, "Wrong size on RBWorld_GetRBPawns");
static_assert(offsetof(RBWorld_GetRBPawns, ReturnValue) == 0x000000, "Member 'RBWorld_GetRBPawns::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetRBPickups
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetRBPickups final
{
public:
	TArray<class ARBPickup*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetRBPickups) == 0x000008, "Wrong alignment on RBWorld_GetRBPickups");
static_assert(sizeof(RBWorld_GetRBPickups) == 0x000010, "Wrong size on RBWorld_GetRBPickups");
static_assert(offsetof(RBWorld_GetRBPickups, ReturnValue) == 0x000000, "Member 'RBWorld_GetRBPickups::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetRBPlayers
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetRBPlayers final
{
public:
	TArray<class ARBPlayer*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetRBPlayers) == 0x000008, "Wrong alignment on RBWorld_GetRBPlayers");
static_assert(sizeof(RBWorld_GetRBPlayers) == 0x000010, "Wrong size on RBWorld_GetRBPlayers");
static_assert(offsetof(RBWorld_GetRBPlayers, ReturnValue) == 0x000000, "Member 'RBWorld_GetRBPlayers::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetRBRespawners
// 0x0010 (0x0010 - 0x0000)
struct RBWorld_GetRBRespawners final
{
public:
	TArray<class ARBPlayerRespawner*>             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetRBRespawners) == 0x000008, "Wrong alignment on RBWorld_GetRBRespawners");
static_assert(sizeof(RBWorld_GetRBRespawners) == 0x000010, "Wrong size on RBWorld_GetRBRespawners");
static_assert(offsetof(RBWorld_GetRBRespawners, ReturnValue) == 0x000000, "Member 'RBWorld_GetRBRespawners::ReturnValue' has a wrong offset!");

// Function OPP.RBWorld.GetRBWaterSimulationComponent
// 0x0008 (0x0008 - 0x0000)
struct RBWorld_GetRBWaterSimulationComponent final
{
public:
	class URBWaterSimulationComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWorld_GetRBWaterSimulationComponent) == 0x000008, "Wrong alignment on RBWorld_GetRBWaterSimulationComponent");
static_assert(sizeof(RBWorld_GetRBWaterSimulationComponent) == 0x000008, "Wrong size on RBWorld_GetRBWaterSimulationComponent");
static_assert(offsetof(RBWorld_GetRBWaterSimulationComponent, ReturnValue) == 0x000000, "Member 'RBWorld_GetRBWaterSimulationComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBSlideDownVolume.OnBrushComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBSlideDownVolume_OnBrushComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD4[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSlideDownVolume_OnBrushComponentBeginOverlap) == 0x000008, "Wrong alignment on RBSlideDownVolume_OnBrushComponentBeginOverlap");
static_assert(sizeof(RBSlideDownVolume_OnBrushComponentBeginOverlap) == 0x0000A8, "Wrong size on RBSlideDownVolume_OnBrushComponentBeginOverlap");
static_assert(offsetof(RBSlideDownVolume_OnBrushComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBSlideDownVolume_OnBrushComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBSlideDownVolume_OnBrushComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBSlideDownVolume_OnBrushComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBSlideDownVolume_OnBrushComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBSlideDownVolume_OnBrushComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBSlideDownVolume_OnBrushComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBSlideDownVolume_OnBrushComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBSlideDownVolume_OnBrushComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBSlideDownVolume_OnBrushComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBSlideDownVolume_OnBrushComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBSlideDownVolume_OnBrushComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBSlideDownVolume.OnPlayerEntered
// 0x0008 (0x0008 - 0x0000)
struct RBSlideDownVolume_OnPlayerEntered final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSlideDownVolume_OnPlayerEntered) == 0x000008, "Wrong alignment on RBSlideDownVolume_OnPlayerEntered");
static_assert(sizeof(RBSlideDownVolume_OnPlayerEntered) == 0x000008, "Wrong size on RBSlideDownVolume_OnPlayerEntered");
static_assert(offsetof(RBSlideDownVolume_OnPlayerEntered, Player) == 0x000000, "Member 'RBSlideDownVolume_OnPlayerEntered::Player' has a wrong offset!");

// Function OPP.RBPlayerState.Multicast_NotifyRemainingRespawnChanged
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_Multicast_NotifyRemainingRespawnChanged final
{
public:
	int32                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_Multicast_NotifyRemainingRespawnChanged) == 0x000004, "Wrong alignment on RBPlayerState_Multicast_NotifyRemainingRespawnChanged");
static_assert(sizeof(RBPlayerState_Multicast_NotifyRemainingRespawnChanged) == 0x000008, "Wrong size on RBPlayerState_Multicast_NotifyRemainingRespawnChanged");
static_assert(offsetof(RBPlayerState_Multicast_NotifyRemainingRespawnChanged, OldValue) == 0x000000, "Member 'RBPlayerState_Multicast_NotifyRemainingRespawnChanged::OldValue' has a wrong offset!");
static_assert(offsetof(RBPlayerState_Multicast_NotifyRemainingRespawnChanged, NewValue) == 0x000004, "Member 'RBPlayerState_Multicast_NotifyRemainingRespawnChanged::NewValue' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnCurrencyGained__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_OnCurrencyGained__DelegateSignature final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CEF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnCurrencyGained__DelegateSignature) == 0x000004, "Wrong alignment on RBPlayerState_OnCurrencyGained__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnCurrencyGained__DelegateSignature) == 0x000008, "Wrong size on RBPlayerState_OnCurrencyGained__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnCurrencyGained__DelegateSignature, CurrencyType) == 0x000000, "Member 'RBPlayerState_OnCurrencyGained__DelegateSignature::CurrencyType' has a wrong offset!");
static_assert(offsetof(RBPlayerState_OnCurrencyGained__DelegateSignature, Amount) == 0x000004, "Member 'RBPlayerState_OnCurrencyGained__DelegateSignature::Amount' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnEnteredHidespot__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_OnEnteredHidespot__DelegateSignature final
{
public:
	class URBHidespotComponent*                   HidespotComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnEnteredHidespot__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayerState_OnEnteredHidespot__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnEnteredHidespot__DelegateSignature) == 0x000008, "Wrong size on RBPlayerState_OnEnteredHidespot__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnEnteredHidespot__DelegateSignature, HidespotComponent) == 0x000000, "Member 'RBPlayerState_OnEnteredHidespot__DelegateSignature::HidespotComponent' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnIsDeadChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_OnIsDeadChanged__DelegateSignature final
{
public:
	bool                                          IsDead;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnIsDeadChanged__DelegateSignature) == 0x000001, "Wrong alignment on RBPlayerState_OnIsDeadChanged__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnIsDeadChanged__DelegateSignature) == 0x000001, "Wrong size on RBPlayerState_OnIsDeadChanged__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnIsDeadChanged__DelegateSignature, IsDead) == 0x000000, "Member 'RBPlayerState_OnIsDeadChanged__DelegateSignature::IsDead' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnIsSpectatorChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_OnIsSpectatorChanged__DelegateSignature final
{
public:
	bool                                          IsSpectator;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnIsSpectatorChanged__DelegateSignature) == 0x000001, "Wrong alignment on RBPlayerState_OnIsSpectatorChanged__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnIsSpectatorChanged__DelegateSignature) == 0x000001, "Wrong size on RBPlayerState_OnIsSpectatorChanged__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnIsSpectatorChanged__DelegateSignature, IsSpectator) == 0x000000, "Member 'RBPlayerState_OnIsSpectatorChanged__DelegateSignature::IsSpectator' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnPlayerCustomizationUpdated__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct RBPlayerState_OnPlayerCustomizationUpdated__DelegateSignature final
{
public:
	struct FRBPlayerCustomizationInfo             Param_CustomizationInfo;                           // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnPlayerCustomizationUpdated__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayerState_OnPlayerCustomizationUpdated__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnPlayerCustomizationUpdated__DelegateSignature) == 0x000038, "Wrong size on RBPlayerState_OnPlayerCustomizationUpdated__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnPlayerCustomizationUpdated__DelegateSignature, Param_CustomizationInfo) == 0x000000, "Member 'RBPlayerState_OnPlayerCustomizationUpdated__DelegateSignature::Param_CustomizationInfo' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnPlayerEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_OnPlayerEvent__DelegateSignature final
{
public:
	EPlayerEvent                                  EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnPlayerEvent__DelegateSignature) == 0x000004, "Wrong alignment on RBPlayerState_OnPlayerEvent__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnPlayerEvent__DelegateSignature) == 0x000008, "Wrong size on RBPlayerState_OnPlayerEvent__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnPlayerEvent__DelegateSignature, EventType) == 0x000000, "Member 'RBPlayerState_OnPlayerEvent__DelegateSignature::EventType' has a wrong offset!");
static_assert(offsetof(RBPlayerState_OnPlayerEvent__DelegateSignature, Value) == 0x000004, "Member 'RBPlayerState_OnPlayerEvent__DelegateSignature::Value' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnPlayerHealthChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_OnPlayerHealthChanged__DelegateSignature final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnPlayerHealthChanged__DelegateSignature) == 0x000004, "Wrong alignment on RBPlayerState_OnPlayerHealthChanged__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnPlayerHealthChanged__DelegateSignature) == 0x000004, "Wrong size on RBPlayerState_OnPlayerHealthChanged__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnPlayerHealthChanged__DelegateSignature, NewHealth) == 0x000000, "Member 'RBPlayerState_OnPlayerHealthChanged__DelegateSignature::NewHealth' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnPlayerIndicatorUpdated__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature final
{
public:
	EPlayerIndicatorType                          Param_PlayerIndicatorType;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLeft;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature) == 0x000004, "Wrong alignment on RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature) == 0x00000C, "Wrong size on RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature, Param_PlayerIndicatorType) == 0x000000, "Member 'RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature::Param_PlayerIndicatorType' has a wrong offset!");
static_assert(offsetof(RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature, TimeLeft) == 0x000004, "Member 'RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature::TimeLeft' has a wrong offset!");
static_assert(offsetof(RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature, Progress) == 0x000008, "Member 'RBPlayerState_OnPlayerIndicatorUpdated__DelegateSignature::Progress' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnPlayerMaxHealthChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_OnPlayerMaxHealthChanged__DelegateSignature final
{
public:
	float                                         NewMaxHealth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnPlayerMaxHealthChanged__DelegateSignature) == 0x000004, "Wrong alignment on RBPlayerState_OnPlayerMaxHealthChanged__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnPlayerMaxHealthChanged__DelegateSignature) == 0x000004, "Wrong size on RBPlayerState_OnPlayerMaxHealthChanged__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnPlayerMaxHealthChanged__DelegateSignature, NewMaxHealth) == 0x000000, "Member 'RBPlayerState_OnPlayerMaxHealthChanged__DelegateSignature::NewMaxHealth' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnPlayerPartyStateUpdated__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_OnPlayerPartyStateUpdated__DelegateSignature final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnPlayerPartyStateUpdated__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayerState_OnPlayerPartyStateUpdated__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnPlayerPartyStateUpdated__DelegateSignature) == 0x000008, "Wrong size on RBPlayerState_OnPlayerPartyStateUpdated__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnPlayerPartyStateUpdated__DelegateSignature, RBPlayerState) == 0x000000, "Member 'RBPlayerState_OnPlayerPartyStateUpdated__DelegateSignature::RBPlayerState' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnPlayerProgressionReceived__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_OnPlayerProgressionReceived__DelegateSignature final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnPlayerProgressionReceived__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayerState_OnPlayerProgressionReceived__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnPlayerProgressionReceived__DelegateSignature) == 0x000008, "Wrong size on RBPlayerState_OnPlayerProgressionReceived__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnPlayerProgressionReceived__DelegateSignature, RBPlayerState) == 0x000000, "Member 'RBPlayerState_OnPlayerProgressionReceived__DelegateSignature::RBPlayerState' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnPlayerSASChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerState_OnPlayerSASChanged__DelegateSignature final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBSAS*                                 Param_CurrentSAS;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnPlayerSASChanged__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayerState_OnPlayerSASChanged__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnPlayerSASChanged__DelegateSignature) == 0x000010, "Wrong size on RBPlayerState_OnPlayerSASChanged__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnPlayerSASChanged__DelegateSignature, RBPlayerState) == 0x000000, "Member 'RBPlayerState_OnPlayerSASChanged__DelegateSignature::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerState_OnPlayerSASChanged__DelegateSignature, Param_CurrentSAS) == 0x000008, "Member 'RBPlayerState_OnPlayerSASChanged__DelegateSignature::Param_CurrentSAS' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnPlayerScoreChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerState_OnPlayerScoreChanged__DelegateSignature final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Score;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_ScoreXp;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnPlayerScoreChanged__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayerState_OnPlayerScoreChanged__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnPlayerScoreChanged__DelegateSignature) == 0x000010, "Wrong size on RBPlayerState_OnPlayerScoreChanged__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnPlayerScoreChanged__DelegateSignature, RBPlayerState) == 0x000000, "Member 'RBPlayerState_OnPlayerScoreChanged__DelegateSignature::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerState_OnPlayerScoreChanged__DelegateSignature, Param_Score) == 0x000008, "Member 'RBPlayerState_OnPlayerScoreChanged__DelegateSignature::Param_Score' has a wrong offset!");
static_assert(offsetof(RBPlayerState_OnPlayerScoreChanged__DelegateSignature, Param_ScoreXp) == 0x00000C, "Member 'RBPlayerState_OnPlayerScoreChanged__DelegateSignature::Param_ScoreXp' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnReadyForStageResetChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerState_OnReadyForStageResetChanged__DelegateSignature final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReady;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerState_OnReadyForStageResetChanged__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayerState_OnReadyForStageResetChanged__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnReadyForStageResetChanged__DelegateSignature) == 0x000010, "Wrong size on RBPlayerState_OnReadyForStageResetChanged__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnReadyForStageResetChanged__DelegateSignature, RBPlayerState) == 0x000000, "Member 'RBPlayerState_OnReadyForStageResetChanged__DelegateSignature::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerState_OnReadyForStageResetChanged__DelegateSignature, IsReady) == 0x000008, "Member 'RBPlayerState_OnReadyForStageResetChanged__DelegateSignature::IsReady' has a wrong offset!");

// Function OPP.RBPlayerState.OnRep_LastPossessedPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_OnRep_LastPossessedPlayer final
{
public:
	class ARBPlayer*                              OldLastPossessedPlayer;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnRep_LastPossessedPlayer) == 0x000008, "Wrong alignment on RBPlayerState_OnRep_LastPossessedPlayer");
static_assert(sizeof(RBPlayerState_OnRep_LastPossessedPlayer) == 0x000008, "Wrong size on RBPlayerState_OnRep_LastPossessedPlayer");
static_assert(offsetof(RBPlayerState_OnRep_LastPossessedPlayer, OldLastPossessedPlayer) == 0x000000, "Member 'RBPlayerState_OnRep_LastPossessedPlayer::OldLastPossessedPlayer' has a wrong offset!");

// Function OPP.RBPlayerState.OnRep_PlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_OnRep_PlayerLevel final
{
public:
	int32                                         OldPlayerLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnRep_PlayerLevel) == 0x000004, "Wrong alignment on RBPlayerState_OnRep_PlayerLevel");
static_assert(sizeof(RBPlayerState_OnRep_PlayerLevel) == 0x000004, "Wrong size on RBPlayerState_OnRep_PlayerLevel");
static_assert(offsetof(RBPlayerState_OnRep_PlayerLevel, OldPlayerLevel) == 0x000000, "Member 'RBPlayerState_OnRep_PlayerLevel::OldPlayerLevel' has a wrong offset!");

// Function OPP.RBPlayerState.OnRep_RemainingRespawns
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_OnRep_RemainingRespawns final
{
public:
	int32                                         PreviousRemainingRespawns;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnRep_RemainingRespawns) == 0x000004, "Wrong alignment on RBPlayerState_OnRep_RemainingRespawns");
static_assert(sizeof(RBPlayerState_OnRep_RemainingRespawns) == 0x000004, "Wrong size on RBPlayerState_OnRep_RemainingRespawns");
static_assert(offsetof(RBPlayerState_OnRep_RemainingRespawns, PreviousRemainingRespawns) == 0x000000, "Member 'RBPlayerState_OnRep_RemainingRespawns::PreviousRemainingRespawns' has a wrong offset!");

// Function OPP.RBPlayerState.OnRep_RemainingSelfRevives
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_OnRep_RemainingSelfRevives final
{
public:
	int32                                         PreviousRemainingSelfRevives;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnRep_RemainingSelfRevives) == 0x000004, "Wrong alignment on RBPlayerState_OnRep_RemainingSelfRevives");
static_assert(sizeof(RBPlayerState_OnRep_RemainingSelfRevives) == 0x000004, "Wrong size on RBPlayerState_OnRep_RemainingSelfRevives");
static_assert(offsetof(RBPlayerState_OnRep_RemainingSelfRevives, PreviousRemainingSelfRevives) == 0x000000, "Member 'RBPlayerState_OnRep_RemainingSelfRevives::PreviousRemainingSelfRevives' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnVoiceChatEnabledChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_OnVoiceChatEnabledChanged__DelegateSignature final
{
public:
	class ARBPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnVoiceChatEnabledChanged__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayerState_OnVoiceChatEnabledChanged__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnVoiceChatEnabledChanged__DelegateSignature) == 0x000008, "Wrong size on RBPlayerState_OnVoiceChatEnabledChanged__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnVoiceChatEnabledChanged__DelegateSignature, PlayerState) == 0x000000, "Member 'RBPlayerState_OnVoiceChatEnabledChanged__DelegateSignature::PlayerState' has a wrong offset!");

// DelegateFunction OPP.RBPlayerState.OnVoiceChatPrivilegeStatusChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_OnVoiceChatPrivilegeStatusChanged__DelegateSignature final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_OnVoiceChatPrivilegeStatusChanged__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayerState_OnVoiceChatPrivilegeStatusChanged__DelegateSignature");
static_assert(sizeof(RBPlayerState_OnVoiceChatPrivilegeStatusChanged__DelegateSignature) == 0x000008, "Wrong size on RBPlayerState_OnVoiceChatPrivilegeStatusChanged__DelegateSignature");
static_assert(offsetof(RBPlayerState_OnVoiceChatPrivilegeStatusChanged__DelegateSignature, RBPlayerState) == 0x000000, "Member 'RBPlayerState_OnVoiceChatPrivilegeStatusChanged__DelegateSignature::RBPlayerState' has a wrong offset!");

// Function OPP.RBPlayerState.AreItemsAcquired
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerState_AreItemsAcquired final
{
public:
	TArray<class FName>                           ItemIds;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF3[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerState_AreItemsAcquired) == 0x000008, "Wrong alignment on RBPlayerState_AreItemsAcquired");
static_assert(sizeof(RBPlayerState_AreItemsAcquired) == 0x000018, "Wrong size on RBPlayerState_AreItemsAcquired");
static_assert(offsetof(RBPlayerState_AreItemsAcquired, ItemIds) == 0x000000, "Member 'RBPlayerState_AreItemsAcquired::ItemIds' has a wrong offset!");
static_assert(offsetof(RBPlayerState_AreItemsAcquired, ReturnValue) == 0x000010, "Member 'RBPlayerState_AreItemsAcquired::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.BP_GetUniqueID
// 0x0028 (0x0028 - 0x0000)
struct RBPlayerState_BP_GetUniqueID final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_BP_GetUniqueID) == 0x000008, "Wrong alignment on RBPlayerState_BP_GetUniqueID");
static_assert(sizeof(RBPlayerState_BP_GetUniqueID) == 0x000028, "Wrong size on RBPlayerState_BP_GetUniqueID");
static_assert(offsetof(RBPlayerState_BP_GetUniqueID, ReturnValue) == 0x000000, "Member 'RBPlayerState_BP_GetUniqueID::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.BP_HasAcquiredActiveSkill
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_BP_HasAcquiredActiveSkill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_BP_HasAcquiredActiveSkill) == 0x000001, "Wrong alignment on RBPlayerState_BP_HasAcquiredActiveSkill");
static_assert(sizeof(RBPlayerState_BP_HasAcquiredActiveSkill) == 0x000001, "Wrong size on RBPlayerState_BP_HasAcquiredActiveSkill");
static_assert(offsetof(RBPlayerState_BP_HasAcquiredActiveSkill, ReturnValue) == 0x000000, "Member 'RBPlayerState_BP_HasAcquiredActiveSkill::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.BP_IsUpgradeAcquired
// 0x000C (0x000C - 0x0000)
struct RBPlayerState_BP_IsUpgradeAcquired final
{
public:
	class FName                                   UpgradeID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerState_BP_IsUpgradeAcquired) == 0x000004, "Wrong alignment on RBPlayerState_BP_IsUpgradeAcquired");
static_assert(sizeof(RBPlayerState_BP_IsUpgradeAcquired) == 0x00000C, "Wrong size on RBPlayerState_BP_IsUpgradeAcquired");
static_assert(offsetof(RBPlayerState_BP_IsUpgradeAcquired, UpgradeID) == 0x000000, "Member 'RBPlayerState_BP_IsUpgradeAcquired::UpgradeID' has a wrong offset!");
static_assert(offsetof(RBPlayerState_BP_IsUpgradeAcquired, ReturnValue) == 0x000008, "Member 'RBPlayerState_BP_IsUpgradeAcquired::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetCharacterStartingReleaseCount
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_GetCharacterStartingReleaseCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetCharacterStartingReleaseCount) == 0x000004, "Wrong alignment on RBPlayerState_GetCharacterStartingReleaseCount");
static_assert(sizeof(RBPlayerState_GetCharacterStartingReleaseCount) == 0x000004, "Wrong size on RBPlayerState_GetCharacterStartingReleaseCount");
static_assert(offsetof(RBPlayerState_GetCharacterStartingReleaseCount, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetCharacterStartingReleaseCount::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetCurrency
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_GetCurrency final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetCurrency) == 0x000004, "Wrong alignment on RBPlayerState_GetCurrency");
static_assert(sizeof(RBPlayerState_GetCurrency) == 0x000008, "Wrong size on RBPlayerState_GetCurrency");
static_assert(offsetof(RBPlayerState_GetCurrency, CurrencyType) == 0x000000, "Member 'RBPlayerState_GetCurrency::CurrencyType' has a wrong offset!");
static_assert(offsetof(RBPlayerState_GetCurrency, ReturnValue) == 0x000004, "Member 'RBPlayerState_GetCurrency::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetCustomizationInfo
// 0x0038 (0x0038 - 0x0000)
struct RBPlayerState_GetCustomizationInfo final
{
public:
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetCustomizationInfo) == 0x000008, "Wrong alignment on RBPlayerState_GetCustomizationInfo");
static_assert(sizeof(RBPlayerState_GetCustomizationInfo) == 0x000038, "Wrong size on RBPlayerState_GetCustomizationInfo");
static_assert(offsetof(RBPlayerState_GetCustomizationInfo, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetCustomizationInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetCustomizationLegendaryOutfit
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_GetCustomizationLegendaryOutfit final
{
public:
	class URBCustomizationOutfit*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetCustomizationLegendaryOutfit) == 0x000008, "Wrong alignment on RBPlayerState_GetCustomizationLegendaryOutfit");
static_assert(sizeof(RBPlayerState_GetCustomizationLegendaryOutfit) == 0x000008, "Wrong size on RBPlayerState_GetCustomizationLegendaryOutfit");
static_assert(offsetof(RBPlayerState_GetCustomizationLegendaryOutfit, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetCustomizationLegendaryOutfit::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetCustomizationOptions
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerState_GetCustomizationOptions final
{
public:
	TArray<class URBPlayerCustomizationOption*>   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetCustomizationOptions) == 0x000008, "Wrong alignment on RBPlayerState_GetCustomizationOptions");
static_assert(sizeof(RBPlayerState_GetCustomizationOptions) == 0x000010, "Wrong size on RBPlayerState_GetCustomizationOptions");
static_assert(offsetof(RBPlayerState_GetCustomizationOptions, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetCustomizationOptions::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetCustomizationOptionsBySlot
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerState_GetCustomizationOptionsBySlot final
{
public:
	EPlayerCustomizationSlot                      Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBPlayerCustomizationOption*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetCustomizationOptionsBySlot) == 0x000008, "Wrong alignment on RBPlayerState_GetCustomizationOptionsBySlot");
static_assert(sizeof(RBPlayerState_GetCustomizationOptionsBySlot) == 0x000010, "Wrong size on RBPlayerState_GetCustomizationOptionsBySlot");
static_assert(offsetof(RBPlayerState_GetCustomizationOptionsBySlot, Slot) == 0x000000, "Member 'RBPlayerState_GetCustomizationOptionsBySlot::Slot' has a wrong offset!");
static_assert(offsetof(RBPlayerState_GetCustomizationOptionsBySlot, ReturnValue) == 0x000008, "Member 'RBPlayerState_GetCustomizationOptionsBySlot::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetExperimentTimePlayedSeconds
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_GetExperimentTimePlayedSeconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetExperimentTimePlayedSeconds) == 0x000004, "Wrong alignment on RBPlayerState_GetExperimentTimePlayedSeconds");
static_assert(sizeof(RBPlayerState_GetExperimentTimePlayedSeconds) == 0x000004, "Wrong size on RBPlayerState_GetExperimentTimePlayedSeconds");
static_assert(offsetof(RBPlayerState_GetExperimentTimePlayedSeconds, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetExperimentTimePlayedSeconds::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetFullPlayerId
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerState_GetFullPlayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetFullPlayerId) == 0x000008, "Wrong alignment on RBPlayerState_GetFullPlayerId");
static_assert(sizeof(RBPlayerState_GetFullPlayerId) == 0x000010, "Wrong size on RBPlayerState_GetFullPlayerId");
static_assert(offsetof(RBPlayerState_GetFullPlayerId, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetFullPlayerId::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetGainedCurrencies
// 0x0050 (0x0050 - 0x0000)
struct RBPlayerState_GetGainedCurrencies final
{
public:
	TMap<ECurrencyType, int32>                    ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetGainedCurrencies) == 0x000008, "Wrong alignment on RBPlayerState_GetGainedCurrencies");
static_assert(sizeof(RBPlayerState_GetGainedCurrencies) == 0x000050, "Wrong size on RBPlayerState_GetGainedCurrencies");
static_assert(offsetof(RBPlayerState_GetGainedCurrencies, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetGainedCurrencies::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetInmateId
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_GetInmateId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetInmateId) == 0x000004, "Wrong alignment on RBPlayerState_GetInmateId");
static_assert(sizeof(RBPlayerState_GetInmateId) == 0x000004, "Wrong size on RBPlayerState_GetInmateId");
static_assert(offsetof(RBPlayerState_GetInmateId, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetInmateId::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetLeaveTarget
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_GetLeaveTarget final
{
public:
	EPlayerLeaveTarget                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetLeaveTarget) == 0x000001, "Wrong alignment on RBPlayerState_GetLeaveTarget");
static_assert(sizeof(RBPlayerState_GetLeaveTarget) == 0x000001, "Wrong size on RBPlayerState_GetLeaveTarget");
static_assert(offsetof(RBPlayerState_GetLeaveTarget, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetLeaveTarget::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetNormalizedScore
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_GetNormalizedScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetNormalizedScore) == 0x000004, "Wrong alignment on RBPlayerState_GetNormalizedScore");
static_assert(sizeof(RBPlayerState_GetNormalizedScore) == 0x000004, "Wrong size on RBPlayerState_GetNormalizedScore");
static_assert(offsetof(RBPlayerState_GetNormalizedScore, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetNormalizedScore::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetPartyId
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerState_GetPartyId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetPartyId) == 0x000008, "Wrong alignment on RBPlayerState_GetPartyId");
static_assert(sizeof(RBPlayerState_GetPartyId) == 0x000010, "Wrong size on RBPlayerState_GetPartyId");
static_assert(offsetof(RBPlayerState_GetPartyId, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetPartyId::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetPartyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_GetPartyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetPartyMemberCount) == 0x000004, "Wrong alignment on RBPlayerState_GetPartyMemberCount");
static_assert(sizeof(RBPlayerState_GetPartyMemberCount) == 0x000004, "Wrong size on RBPlayerState_GetPartyMemberCount");
static_assert(offsetof(RBPlayerState_GetPartyMemberCount, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetPartyMemberCount::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetPlatform
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_GetPlatform final
{
public:
	EProfilePlatform                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetPlatform) == 0x000001, "Wrong alignment on RBPlayerState_GetPlatform");
static_assert(sizeof(RBPlayerState_GetPlatform) == 0x000001, "Wrong size on RBPlayerState_GetPlatform");
static_assert(offsetof(RBPlayerState_GetPlatform, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetPlatform::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetPlatformId
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerState_GetPlatformId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetPlatformId) == 0x000008, "Wrong alignment on RBPlayerState_GetPlatformId");
static_assert(sizeof(RBPlayerState_GetPlatformId) == 0x000010, "Wrong size on RBPlayerState_GetPlatformId");
static_assert(offsetof(RBPlayerState_GetPlatformId, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetPlatformId::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetPlayerIconCustomizationOption
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_GetPlayerIconCustomizationOption final
{
public:
	class URBPlayerIconCustomizationOption*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetPlayerIconCustomizationOption) == 0x000008, "Wrong alignment on RBPlayerState_GetPlayerIconCustomizationOption");
static_assert(sizeof(RBPlayerState_GetPlayerIconCustomizationOption) == 0x000008, "Wrong size on RBPlayerState_GetPlayerIconCustomizationOption");
static_assert(offsetof(RBPlayerState_GetPlayerIconCustomizationOption, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetPlayerIconCustomizationOption::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_GetPlayerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetPlayerLevel) == 0x000004, "Wrong alignment on RBPlayerState_GetPlayerLevel");
static_assert(sizeof(RBPlayerState_GetPlayerLevel) == 0x000004, "Wrong size on RBPlayerState_GetPlayerLevel");
static_assert(offsetof(RBPlayerState_GetPlayerLevel, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetPlayerLevel::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetPlayerLoadout
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerState_GetPlayerLoadout final
{
public:
	struct FRBPlayerLoadout                       ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetPlayerLoadout) == 0x000008, "Wrong alignment on RBPlayerState_GetPlayerLoadout");
static_assert(sizeof(RBPlayerState_GetPlayerLoadout) == 0x000018, "Wrong size on RBPlayerState_GetPlayerLoadout");
static_assert(offsetof(RBPlayerState_GetPlayerLoadout, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetPlayerLoadout::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetProfileId
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerState_GetProfileId final
{
public:
	struct FProfileId                             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetProfileId) == 0x000004, "Wrong alignment on RBPlayerState_GetProfileId");
static_assert(sizeof(RBPlayerState_GetProfileId) == 0x000010, "Wrong size on RBPlayerState_GetProfileId");
static_assert(offsetof(RBPlayerState_GetProfileId, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetProfileId::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetReleaseCount
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_GetReleaseCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetReleaseCount) == 0x000004, "Wrong alignment on RBPlayerState_GetReleaseCount");
static_assert(sizeof(RBPlayerState_GetReleaseCount) == 0x000004, "Wrong size on RBPlayerState_GetReleaseCount");
static_assert(offsetof(RBPlayerState_GetReleaseCount, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetReleaseCount::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetSelectedActiveSkill
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_GetSelectedActiveSkill final
{
public:
	EActiveSkillType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetSelectedActiveSkill) == 0x000001, "Wrong alignment on RBPlayerState_GetSelectedActiveSkill");
static_assert(sizeof(RBPlayerState_GetSelectedActiveSkill) == 0x000001, "Wrong size on RBPlayerState_GetSelectedActiveSkill");
static_assert(offsetof(RBPlayerState_GetSelectedActiveSkill, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetSelectedActiveSkill::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetSkinColorType
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_GetSkinColorType final
{
public:
	ESkinColorType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetSkinColorType) == 0x000001, "Wrong alignment on RBPlayerState_GetSkinColorType");
static_assert(sizeof(RBPlayerState_GetSkinColorType) == 0x000001, "Wrong size on RBPlayerState_GetSkinColorType");
static_assert(offsetof(RBPlayerState_GetSkinColorType, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetSkinColorType::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetUnlockedPerkSlots
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_GetUnlockedPerkSlots final
{
public:
	EPerkCategory                                 PerkCategory;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetUnlockedPerkSlots) == 0x000004, "Wrong alignment on RBPlayerState_GetUnlockedPerkSlots");
static_assert(sizeof(RBPlayerState_GetUnlockedPerkSlots) == 0x000008, "Wrong size on RBPlayerState_GetUnlockedPerkSlots");
static_assert(offsetof(RBPlayerState_GetUnlockedPerkSlots, PerkCategory) == 0x000000, "Member 'RBPlayerState_GetUnlockedPerkSlots::PerkCategory' has a wrong offset!");
static_assert(offsetof(RBPlayerState_GetUnlockedPerkSlots, ReturnValue) == 0x000004, "Member 'RBPlayerState_GetUnlockedPerkSlots::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetVoiceCustomizationOption
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerState_GetVoiceCustomizationOption final
{
public:
	class URBVoiceCustomizationOption*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetVoiceCustomizationOption) == 0x000008, "Wrong alignment on RBPlayerState_GetVoiceCustomizationOption");
static_assert(sizeof(RBPlayerState_GetVoiceCustomizationOption) == 0x000008, "Wrong size on RBPlayerState_GetVoiceCustomizationOption");
static_assert(offsetof(RBPlayerState_GetVoiceCustomizationOption, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetVoiceCustomizationOption::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.GetXp
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerState_GetXp final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_GetXp) == 0x000004, "Wrong alignment on RBPlayerState_GetXp");
static_assert(sizeof(RBPlayerState_GetXp) == 0x000004, "Wrong size on RBPlayerState_GetXp");
static_assert(offsetof(RBPlayerState_GetXp, ReturnValue) == 0x000000, "Member 'RBPlayerState_GetXp::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.HasAttemptedTrial
// 0x000C (0x000C - 0x0000)
struct RBPlayerState_HasAttemptedTrial final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF8[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerState_HasAttemptedTrial) == 0x000004, "Wrong alignment on RBPlayerState_HasAttemptedTrial");
static_assert(sizeof(RBPlayerState_HasAttemptedTrial) == 0x00000C, "Wrong size on RBPlayerState_HasAttemptedTrial");
static_assert(offsetof(RBPlayerState_HasAttemptedTrial, ID) == 0x000000, "Member 'RBPlayerState_HasAttemptedTrial::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerState_HasAttemptedTrial, ReturnValue) == 0x000008, "Member 'RBPlayerState_HasAttemptedTrial::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.HasCompletedTrial
// 0x000C (0x000C - 0x0000)
struct RBPlayerState_HasCompletedTrial final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerfect;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CF9[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerState_HasCompletedTrial) == 0x000004, "Wrong alignment on RBPlayerState_HasCompletedTrial");
static_assert(sizeof(RBPlayerState_HasCompletedTrial) == 0x00000C, "Wrong size on RBPlayerState_HasCompletedTrial");
static_assert(offsetof(RBPlayerState_HasCompletedTrial, ID) == 0x000000, "Member 'RBPlayerState_HasCompletedTrial::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerState_HasCompletedTrial, bPerfect) == 0x000008, "Member 'RBPlayerState_HasCompletedTrial::bPerfect' has a wrong offset!");
static_assert(offsetof(RBPlayerState_HasCompletedTrial, ReturnValue) == 0x000009, "Member 'RBPlayerState_HasCompletedTrial::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.HasUpgradeEffect
// 0x000C (0x000C - 0x0000)
struct RBPlayerState_HasUpgradeEffect final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFA[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerState_HasUpgradeEffect) == 0x000004, "Wrong alignment on RBPlayerState_HasUpgradeEffect");
static_assert(sizeof(RBPlayerState_HasUpgradeEffect) == 0x00000C, "Wrong size on RBPlayerState_HasUpgradeEffect");
static_assert(offsetof(RBPlayerState_HasUpgradeEffect, ID) == 0x000000, "Member 'RBPlayerState_HasUpgradeEffect::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerState_HasUpgradeEffect, ReturnValue) == 0x000008, "Member 'RBPlayerState_HasUpgradeEffect::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.IsFemale
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_IsFemale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_IsFemale) == 0x000001, "Wrong alignment on RBPlayerState_IsFemale");
static_assert(sizeof(RBPlayerState_IsFemale) == 0x000001, "Wrong size on RBPlayerState_IsFemale");
static_assert(offsetof(RBPlayerState_IsFemale, ReturnValue) == 0x000000, "Member 'RBPlayerState_IsFemale::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.IsItemAcquired
// 0x000C (0x000C - 0x0000)
struct RBPlayerState_IsItemAcquired final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFB[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerState_IsItemAcquired) == 0x000004, "Wrong alignment on RBPlayerState_IsItemAcquired");
static_assert(sizeof(RBPlayerState_IsItemAcquired) == 0x00000C, "Wrong size on RBPlayerState_IsItemAcquired");
static_assert(offsetof(RBPlayerState_IsItemAcquired, ItemId) == 0x000000, "Member 'RBPlayerState_IsItemAcquired::ItemId' has a wrong offset!");
static_assert(offsetof(RBPlayerState_IsItemAcquired, ReturnValue) == 0x000008, "Member 'RBPlayerState_IsItemAcquired::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.IsLeaving
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_IsLeaving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_IsLeaving) == 0x000001, "Wrong alignment on RBPlayerState_IsLeaving");
static_assert(sizeof(RBPlayerState_IsLeaving) == 0x000001, "Wrong size on RBPlayerState_IsLeaving");
static_assert(offsetof(RBPlayerState_IsLeaving, ReturnValue) == 0x000000, "Member 'RBPlayerState_IsLeaving::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerState.IsPartyJoinable
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerState_IsPartyJoinable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerState_IsPartyJoinable) == 0x000001, "Wrong alignment on RBPlayerState_IsPartyJoinable");
static_assert(sizeof(RBPlayerState_IsPartyJoinable) == 0x000001, "Wrong size on RBPlayerState_IsPartyJoinable");
static_assert(offsetof(RBPlayerState_IsPartyJoinable, ReturnValue) == 0x000000, "Member 'RBPlayerState_IsPartyJoinable::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetPlayerCell
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyPlayerState_GetPlayerCell final
{
public:
	class ARBPlayerCell*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetPlayerCell) == 0x000008, "Wrong alignment on RBLobbyPlayerState_GetPlayerCell");
static_assert(sizeof(RBLobbyPlayerState_GetPlayerCell) == 0x000008, "Wrong size on RBLobbyPlayerState_GetPlayerCell");
static_assert(offsetof(RBLobbyPlayerState_GetPlayerCell, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetPlayerCell::ReturnValue' has a wrong offset!");

// DelegateFunction OPP.RBLobbyPlayerState.OnMatchSettingsUpdated__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct RBLobbyPlayerState_OnMatchSettingsUpdated__DelegateSignature final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchSettings                         Param_MatchSettings;                               // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CFF[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLobbyPlayerState_OnMatchSettingsUpdated__DelegateSignature) == 0x000008, "Wrong alignment on RBLobbyPlayerState_OnMatchSettingsUpdated__DelegateSignature");
static_assert(sizeof(RBLobbyPlayerState_OnMatchSettingsUpdated__DelegateSignature) == 0x000030, "Wrong size on RBLobbyPlayerState_OnMatchSettingsUpdated__DelegateSignature");
static_assert(offsetof(RBLobbyPlayerState_OnMatchSettingsUpdated__DelegateSignature, RBLobbyPlayerState) == 0x000000, "Member 'RBLobbyPlayerState_OnMatchSettingsUpdated__DelegateSignature::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerState_OnMatchSettingsUpdated__DelegateSignature, Param_MatchSettings) == 0x000008, "Member 'RBLobbyPlayerState_OnMatchSettingsUpdated__DelegateSignature::Param_MatchSettings' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.SetAllReadyToTravelToMatch
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_SetAllReadyToTravelToMatch final
{
public:
	bool                                          bInAllReadyToTravelToMatch;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_SetAllReadyToTravelToMatch) == 0x000001, "Wrong alignment on RBLobbyPlayerState_SetAllReadyToTravelToMatch");
static_assert(sizeof(RBLobbyPlayerState_SetAllReadyToTravelToMatch) == 0x000001, "Wrong size on RBLobbyPlayerState_SetAllReadyToTravelToMatch");
static_assert(offsetof(RBLobbyPlayerState_SetAllReadyToTravelToMatch, bInAllReadyToTravelToMatch) == 0x000000, "Member 'RBLobbyPlayerState_SetAllReadyToTravelToMatch::bInAllReadyToTravelToMatch' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.SetLeavingForMatch
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_SetLeavingForMatch final
{
public:
	bool                                          bInLeavingForMatch;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_SetLeavingForMatch) == 0x000001, "Wrong alignment on RBLobbyPlayerState_SetLeavingForMatch");
static_assert(sizeof(RBLobbyPlayerState_SetLeavingForMatch) == 0x000001, "Wrong size on RBLobbyPlayerState_SetLeavingForMatch");
static_assert(offsetof(RBLobbyPlayerState_SetLeavingForMatch, bInLeavingForMatch) == 0x000000, "Member 'RBLobbyPlayerState_SetLeavingForMatch::bInLeavingForMatch' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.SetReadyToTravelToMatch
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_SetReadyToTravelToMatch final
{
public:
	bool                                          bInReadyToTravelToMatch;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_SetReadyToTravelToMatch) == 0x000001, "Wrong alignment on RBLobbyPlayerState_SetReadyToTravelToMatch");
static_assert(sizeof(RBLobbyPlayerState_SetReadyToTravelToMatch) == 0x000001, "Wrong size on RBLobbyPlayerState_SetReadyToTravelToMatch");
static_assert(offsetof(RBLobbyPlayerState_SetReadyToTravelToMatch, bInReadyToTravelToMatch) == 0x000000, "Member 'RBLobbyPlayerState_SetReadyToTravelToMatch::bInReadyToTravelToMatch' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.CanFindPartyBeCanceled
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_CanFindPartyBeCanceled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_CanFindPartyBeCanceled) == 0x000001, "Wrong alignment on RBLobbyPlayerState_CanFindPartyBeCanceled");
static_assert(sizeof(RBLobbyPlayerState_CanFindPartyBeCanceled) == 0x000001, "Wrong size on RBLobbyPlayerState_CanFindPartyBeCanceled");
static_assert(offsetof(RBLobbyPlayerState_CanFindPartyBeCanceled, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_CanFindPartyBeCanceled::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetEvalCorridor
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyPlayerState_GetEvalCorridor final
{
public:
	class ARBEvalCorridor*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetEvalCorridor) == 0x000008, "Wrong alignment on RBLobbyPlayerState_GetEvalCorridor");
static_assert(sizeof(RBLobbyPlayerState_GetEvalCorridor) == 0x000008, "Wrong size on RBLobbyPlayerState_GetEvalCorridor");
static_assert(offsetof(RBLobbyPlayerState_GetEvalCorridor, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetEvalCorridor::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetFindPartyOwner
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyPlayerState_GetFindPartyOwner final
{
public:
	class ARBLobbyPlayerState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetFindPartyOwner) == 0x000008, "Wrong alignment on RBLobbyPlayerState_GetFindPartyOwner");
static_assert(sizeof(RBLobbyPlayerState_GetFindPartyOwner) == 0x000008, "Wrong size on RBLobbyPlayerState_GetFindPartyOwner");
static_assert(offsetof(RBLobbyPlayerState_GetFindPartyOwner, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetFindPartyOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetMatchCancelationGracePeriodServerTime
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerState_GetMatchCancelationGracePeriodServerTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetMatchCancelationGracePeriodServerTime) == 0x000004, "Wrong alignment on RBLobbyPlayerState_GetMatchCancelationGracePeriodServerTime");
static_assert(sizeof(RBLobbyPlayerState_GetMatchCancelationGracePeriodServerTime) == 0x000004, "Wrong size on RBLobbyPlayerState_GetMatchCancelationGracePeriodServerTime");
static_assert(offsetof(RBLobbyPlayerState_GetMatchCancelationGracePeriodServerTime, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetMatchCancelationGracePeriodServerTime::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetMatchOwner
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyPlayerState_GetMatchOwner final
{
public:
	class ARBLobbyPlayerState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetMatchOwner) == 0x000008, "Wrong alignment on RBLobbyPlayerState_GetMatchOwner");
static_assert(sizeof(RBLobbyPlayerState_GetMatchOwner) == 0x000008, "Wrong size on RBLobbyPlayerState_GetMatchOwner");
static_assert(offsetof(RBLobbyPlayerState_GetMatchOwner, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetMatchOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetMatchSettings
// 0x0024 (0x0024 - 0x0000)
struct RBLobbyPlayerState_GetMatchSettings final
{
public:
	struct FMatchSettings                         ReturnValue;                                       // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetMatchSettings) == 0x000004, "Wrong alignment on RBLobbyPlayerState_GetMatchSettings");
static_assert(sizeof(RBLobbyPlayerState_GetMatchSettings) == 0x000024, "Wrong size on RBLobbyPlayerState_GetMatchSettings");
static_assert(offsetof(RBLobbyPlayerState_GetMatchSettings, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetMatchSettings::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetMatchStartServerTime
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerState_GetMatchStartServerTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetMatchStartServerTime) == 0x000004, "Wrong alignment on RBLobbyPlayerState_GetMatchStartServerTime");
static_assert(sizeof(RBLobbyPlayerState_GetMatchStartServerTime) == 0x000004, "Wrong size on RBLobbyPlayerState_GetMatchStartServerTime");
static_assert(offsetof(RBLobbyPlayerState_GetMatchStartServerTime, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetMatchStartServerTime::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetMatchState
// 0x0020 (0x0020 - 0x0000)
struct RBLobbyPlayerState_GetMatchState final
{
public:
	struct FMatchState                            ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetMatchState) == 0x000008, "Wrong alignment on RBLobbyPlayerState_GetMatchState");
static_assert(sizeof(RBLobbyPlayerState_GetMatchState) == 0x000020, "Wrong size on RBLobbyPlayerState_GetMatchState");
static_assert(offsetof(RBLobbyPlayerState_GetMatchState, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetMatchState::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetPlayerCellCustomization
// 0x0010 (0x0010 - 0x0000)
struct RBLobbyPlayerState_GetPlayerCellCustomization final
{
public:
	TArray<struct FRBPlayerCellCustomizationEntry> ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetPlayerCellCustomization) == 0x000008, "Wrong alignment on RBLobbyPlayerState_GetPlayerCellCustomization");
static_assert(sizeof(RBLobbyPlayerState_GetPlayerCellCustomization) == 0x000010, "Wrong size on RBLobbyPlayerState_GetPlayerCellCustomization");
static_assert(offsetof(RBLobbyPlayerState_GetPlayerCellCustomization, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetPlayerCellCustomization::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetPlayerReleaseAvailableServerTime
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerState_GetPlayerReleaseAvailableServerTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetPlayerReleaseAvailableServerTime) == 0x000004, "Wrong alignment on RBLobbyPlayerState_GetPlayerReleaseAvailableServerTime");
static_assert(sizeof(RBLobbyPlayerState_GetPlayerReleaseAvailableServerTime) == 0x000004, "Wrong size on RBLobbyPlayerState_GetPlayerReleaseAvailableServerTime");
static_assert(offsetof(RBLobbyPlayerState_GetPlayerReleaseAvailableServerTime, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetPlayerReleaseAvailableServerTime::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.GetRecentTrialList
// 0x0010 (0x0010 - 0x0000)
struct RBLobbyPlayerState_GetRecentTrialList final
{
public:
	TArray<struct FEndStageInfo>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_GetRecentTrialList) == 0x000008, "Wrong alignment on RBLobbyPlayerState_GetRecentTrialList");
static_assert(sizeof(RBLobbyPlayerState_GetRecentTrialList) == 0x000010, "Wrong size on RBLobbyPlayerState_GetRecentTrialList");
static_assert(offsetof(RBLobbyPlayerState_GetRecentTrialList, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_GetRecentTrialList::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.IsAllReadyToTravelToMatch
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_IsAllReadyToTravelToMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_IsAllReadyToTravelToMatch) == 0x000001, "Wrong alignment on RBLobbyPlayerState_IsAllReadyToTravelToMatch");
static_assert(sizeof(RBLobbyPlayerState_IsAllReadyToTravelToMatch) == 0x000001, "Wrong size on RBLobbyPlayerState_IsAllReadyToTravelToMatch");
static_assert(offsetof(RBLobbyPlayerState_IsAllReadyToTravelToMatch, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_IsAllReadyToTravelToMatch::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.IsFindingParty
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_IsFindingParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_IsFindingParty) == 0x000001, "Wrong alignment on RBLobbyPlayerState_IsFindingParty");
static_assert(sizeof(RBLobbyPlayerState_IsFindingParty) == 0x000001, "Wrong size on RBLobbyPlayerState_IsFindingParty");
static_assert(offsetof(RBLobbyPlayerState_IsFindingParty, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_IsFindingParty::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.IsInEvalCorridor
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_IsInEvalCorridor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_IsInEvalCorridor) == 0x000001, "Wrong alignment on RBLobbyPlayerState_IsInEvalCorridor");
static_assert(sizeof(RBLobbyPlayerState_IsInEvalCorridor) == 0x000001, "Wrong size on RBLobbyPlayerState_IsInEvalCorridor");
static_assert(offsetof(RBLobbyPlayerState_IsInEvalCorridor, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_IsInEvalCorridor::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.IsLeavingForMatch
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_IsLeavingForMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_IsLeavingForMatch) == 0x000001, "Wrong alignment on RBLobbyPlayerState_IsLeavingForMatch");
static_assert(sizeof(RBLobbyPlayerState_IsLeavingForMatch) == 0x000001, "Wrong size on RBLobbyPlayerState_IsLeavingForMatch");
static_assert(offsetof(RBLobbyPlayerState_IsLeavingForMatch, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_IsLeavingForMatch::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.IsMatchCountdownStarted
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_IsMatchCountdownStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_IsMatchCountdownStarted) == 0x000001, "Wrong alignment on RBLobbyPlayerState_IsMatchCountdownStarted");
static_assert(sizeof(RBLobbyPlayerState_IsMatchCountdownStarted) == 0x000001, "Wrong size on RBLobbyPlayerState_IsMatchCountdownStarted");
static_assert(offsetof(RBLobbyPlayerState_IsMatchCountdownStarted, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_IsMatchCountdownStarted::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerState.IsReadyToTravelToMatch
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerState_IsReadyToTravelToMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerState_IsReadyToTravelToMatch) == 0x000001, "Wrong alignment on RBLobbyPlayerState_IsReadyToTravelToMatch");
static_assert(sizeof(RBLobbyPlayerState_IsReadyToTravelToMatch) == 0x000001, "Wrong size on RBLobbyPlayerState_IsReadyToTravelToMatch");
static_assert(offsetof(RBLobbyPlayerState_IsReadyToTravelToMatch, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerState_IsReadyToTravelToMatch::ReturnValue' has a wrong offset!");

// Function OPP.RBKeyLockedRoomsCoordinator.OnDeviceUnlocked
// 0x0010 (0x0010 - 0x0000)
struct RBKeyLockedRoomsCoordinator_OnDeviceUnlocked final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBKeyLockedRoomsCoordinator_OnDeviceUnlocked) == 0x000008, "Wrong alignment on RBKeyLockedRoomsCoordinator_OnDeviceUnlocked");
static_assert(sizeof(RBKeyLockedRoomsCoordinator_OnDeviceUnlocked) == 0x000010, "Wrong size on RBKeyLockedRoomsCoordinator_OnDeviceUnlocked");
static_assert(offsetof(RBKeyLockedRoomsCoordinator_OnDeviceUnlocked, Panel) == 0x000000, "Member 'RBKeyLockedRoomsCoordinator_OnDeviceUnlocked::Panel' has a wrong offset!");
static_assert(offsetof(RBKeyLockedRoomsCoordinator_OnDeviceUnlocked, Pawn) == 0x000008, "Member 'RBKeyLockedRoomsCoordinator_OnDeviceUnlocked::Pawn' has a wrong offset!");

// Function OPP.RBKeyLockedRoomsCoordinator.OnFirstDeviceUnlocked
// 0x0010 (0x0010 - 0x0000)
struct RBKeyLockedRoomsCoordinator_OnFirstDeviceUnlocked final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBKeyLockedRoomsCoordinator_OnFirstDeviceUnlocked) == 0x000008, "Wrong alignment on RBKeyLockedRoomsCoordinator_OnFirstDeviceUnlocked");
static_assert(sizeof(RBKeyLockedRoomsCoordinator_OnFirstDeviceUnlocked) == 0x000010, "Wrong size on RBKeyLockedRoomsCoordinator_OnFirstDeviceUnlocked");
static_assert(offsetof(RBKeyLockedRoomsCoordinator_OnFirstDeviceUnlocked, Panel) == 0x000000, "Member 'RBKeyLockedRoomsCoordinator_OnFirstDeviceUnlocked::Panel' has a wrong offset!");
static_assert(offsetof(RBKeyLockedRoomsCoordinator_OnFirstDeviceUnlocked, Pawn) == 0x000008, "Member 'RBKeyLockedRoomsCoordinator_OnFirstDeviceUnlocked::Pawn' has a wrong offset!");

// Function OPP.RBKeyLockedRoomsCoordinator.OnPanelInteractionCompletedChanged
// 0x0010 (0x0010 - 0x0000)
struct RBKeyLockedRoomsCoordinator_OnPanelInteractionCompletedChanged final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBKeyLockedRoomsCoordinator_OnPanelInteractionCompletedChanged) == 0x000008, "Wrong alignment on RBKeyLockedRoomsCoordinator_OnPanelInteractionCompletedChanged");
static_assert(sizeof(RBKeyLockedRoomsCoordinator_OnPanelInteractionCompletedChanged) == 0x000010, "Wrong size on RBKeyLockedRoomsCoordinator_OnPanelInteractionCompletedChanged");
static_assert(offsetof(RBKeyLockedRoomsCoordinator_OnPanelInteractionCompletedChanged, Panel) == 0x000000, "Member 'RBKeyLockedRoomsCoordinator_OnPanelInteractionCompletedChanged::Panel' has a wrong offset!");
static_assert(offsetof(RBKeyLockedRoomsCoordinator_OnPanelInteractionCompletedChanged, Pawn) == 0x000008, "Member 'RBKeyLockedRoomsCoordinator_OnPanelInteractionCompletedChanged::Pawn' has a wrong offset!");

// Function OPP.RBKeyLockedRoomsCoordinator.GetClueObjectiveIconFromClueName
// 0x0090 (0x0090 - 0x0000)
struct RBKeyLockedRoomsCoordinator_GetClueObjectiveIconFromClueName final
{
public:
	class FName                                   ClueName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0008(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBKeyLockedRoomsCoordinator_GetClueObjectiveIconFromClueName) == 0x000008, "Wrong alignment on RBKeyLockedRoomsCoordinator_GetClueObjectiveIconFromClueName");
static_assert(sizeof(RBKeyLockedRoomsCoordinator_GetClueObjectiveIconFromClueName) == 0x000090, "Wrong size on RBKeyLockedRoomsCoordinator_GetClueObjectiveIconFromClueName");
static_assert(offsetof(RBKeyLockedRoomsCoordinator_GetClueObjectiveIconFromClueName, ClueName) == 0x000000, "Member 'RBKeyLockedRoomsCoordinator_GetClueObjectiveIconFromClueName::ClueName' has a wrong offset!");
static_assert(offsetof(RBKeyLockedRoomsCoordinator_GetClueObjectiveIconFromClueName, ReturnValue) == 0x000008, "Member 'RBKeyLockedRoomsCoordinator_GetClueObjectiveIconFromClueName::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractable.EndInteraction
// 0x0018 (0x0018 - 0x0000)
struct RBInteractable_EndInteraction final
{
public:
	bool                                          bPredicted;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D05[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPawn*                                InteractorPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D06[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_EndInteraction) == 0x000008, "Wrong alignment on RBInteractable_EndInteraction");
static_assert(sizeof(RBInteractable_EndInteraction) == 0x000018, "Wrong size on RBInteractable_EndInteraction");
static_assert(offsetof(RBInteractable_EndInteraction, bPredicted) == 0x000000, "Member 'RBInteractable_EndInteraction::bPredicted' has a wrong offset!");
static_assert(offsetof(RBInteractable_EndInteraction, InteractorPawn) == 0x000008, "Member 'RBInteractable_EndInteraction::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_EndInteraction, bInterrupted) == 0x000010, "Member 'RBInteractable_EndInteraction::bInterrupted' has a wrong offset!");
static_assert(offsetof(RBInteractable_EndInteraction, ReturnValue) == 0x000011, "Member 'RBInteractable_EndInteraction::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractable.OnPawnDoSpecialMoveAction
// 0x0010 (0x0010 - 0x0000)
struct RBInteractable_OnPawnDoSpecialMoveAction final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D07[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_OnPawnDoSpecialMoveAction) == 0x000008, "Wrong alignment on RBInteractable_OnPawnDoSpecialMoveAction");
static_assert(sizeof(RBInteractable_OnPawnDoSpecialMoveAction) == 0x000010, "Wrong size on RBInteractable_OnPawnDoSpecialMoveAction");
static_assert(offsetof(RBInteractable_OnPawnDoSpecialMoveAction, Pawn) == 0x000000, "Member 'RBInteractable_OnPawnDoSpecialMoveAction::Pawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_OnPawnDoSpecialMoveAction, SpecialMove) == 0x000008, "Member 'RBInteractable_OnPawnDoSpecialMoveAction::SpecialMove' has a wrong offset!");

// Function OPP.RBInteractable.OnPawnPlaySpecialMoveAnimation
// 0x0010 (0x0010 - 0x0000)
struct RBInteractable_OnPawnPlaySpecialMoveAnimation final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D08[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_OnPawnPlaySpecialMoveAnimation) == 0x000008, "Wrong alignment on RBInteractable_OnPawnPlaySpecialMoveAnimation");
static_assert(sizeof(RBInteractable_OnPawnPlaySpecialMoveAnimation) == 0x000010, "Wrong size on RBInteractable_OnPawnPlaySpecialMoveAnimation");
static_assert(offsetof(RBInteractable_OnPawnPlaySpecialMoveAnimation, Pawn) == 0x000000, "Member 'RBInteractable_OnPawnPlaySpecialMoveAnimation::Pawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_OnPawnPlaySpecialMoveAnimation, SpecialMove) == 0x000008, "Member 'RBInteractable_OnPawnPlaySpecialMoveAnimation::SpecialMove' has a wrong offset!");

// Function OPP.RBInteractable.OnPawnSpecialMoveCompleted
// 0x0010 (0x0010 - 0x0000)
struct RBInteractable_OnPawnSpecialMoveCompleted final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D09[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_OnPawnSpecialMoveCompleted) == 0x000008, "Wrong alignment on RBInteractable_OnPawnSpecialMoveCompleted");
static_assert(sizeof(RBInteractable_OnPawnSpecialMoveCompleted) == 0x000010, "Wrong size on RBInteractable_OnPawnSpecialMoveCompleted");
static_assert(offsetof(RBInteractable_OnPawnSpecialMoveCompleted, Pawn) == 0x000000, "Member 'RBInteractable_OnPawnSpecialMoveCompleted::Pawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_OnPawnSpecialMoveCompleted, SpecialMove) == 0x000008, "Member 'RBInteractable_OnPawnSpecialMoveCompleted::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBInteractable_OnPawnSpecialMoveCompleted, bInterrupted) == 0x000009, "Member 'RBInteractable_OnPawnSpecialMoveCompleted::bInterrupted' has a wrong offset!");

// Function OPP.RBInteractable.OnPawnSpecialMoveStarted
// 0x0010 (0x0010 - 0x0000)
struct RBInteractable_OnPawnSpecialMoveStarted final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_OnPawnSpecialMoveStarted) == 0x000008, "Wrong alignment on RBInteractable_OnPawnSpecialMoveStarted");
static_assert(sizeof(RBInteractable_OnPawnSpecialMoveStarted) == 0x000010, "Wrong size on RBInteractable_OnPawnSpecialMoveStarted");
static_assert(offsetof(RBInteractable_OnPawnSpecialMoveStarted, Pawn) == 0x000000, "Member 'RBInteractable_OnPawnSpecialMoveStarted::Pawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_OnPawnSpecialMoveStarted, SpecialMove) == 0x000008, "Member 'RBInteractable_OnPawnSpecialMoveStarted::SpecialMove' has a wrong offset!");

// Function OPP.RBInteractable.PlaySpecialMoveAnimation
// 0x0010 (0x0010 - 0x0000)
struct RBInteractable_PlaySpecialMoveAnimation final
{
public:
	class ARBPawn*                                InteractorPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0B[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_PlaySpecialMoveAnimation) == 0x000008, "Wrong alignment on RBInteractable_PlaySpecialMoveAnimation");
static_assert(sizeof(RBInteractable_PlaySpecialMoveAnimation) == 0x000010, "Wrong size on RBInteractable_PlaySpecialMoveAnimation");
static_assert(offsetof(RBInteractable_PlaySpecialMoveAnimation, InteractorPawn) == 0x000000, "Member 'RBInteractable_PlaySpecialMoveAnimation::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_PlaySpecialMoveAnimation, SpecialMove) == 0x000008, "Member 'RBInteractable_PlaySpecialMoveAnimation::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBInteractable_PlaySpecialMoveAnimation, ReturnValue) == 0x000009, "Member 'RBInteractable_PlaySpecialMoveAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractable.PostInteractionSoundEvent
// 0x0018 (0x0018 - 0x0000)
struct RBInteractable_PostInteractionSoundEvent final
{
public:
	class ARBPawn*                                PawnInteractor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Source;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractable_PostInteractionSoundEvent) == 0x000008, "Wrong alignment on RBInteractable_PostInteractionSoundEvent");
static_assert(sizeof(RBInteractable_PostInteractionSoundEvent) == 0x000018, "Wrong size on RBInteractable_PostInteractionSoundEvent");
static_assert(offsetof(RBInteractable_PostInteractionSoundEvent, PawnInteractor) == 0x000000, "Member 'RBInteractable_PostInteractionSoundEvent::PawnInteractor' has a wrong offset!");
static_assert(offsetof(RBInteractable_PostInteractionSoundEvent, AkEvent) == 0x000008, "Member 'RBInteractable_PostInteractionSoundEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(RBInteractable_PostInteractionSoundEvent, Source) == 0x000010, "Member 'RBInteractable_PostInteractionSoundEvent::Source' has a wrong offset!");

// Function OPP.RBInteractable.StartInteraction
// 0x0010 (0x0010 - 0x0000)
struct RBInteractable_StartInteraction final
{
public:
	class ARBPawn*                                InteractorPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_StartInteraction) == 0x000008, "Wrong alignment on RBInteractable_StartInteraction");
static_assert(sizeof(RBInteractable_StartInteraction) == 0x000010, "Wrong size on RBInteractable_StartInteraction");
static_assert(offsetof(RBInteractable_StartInteraction, InteractorPawn) == 0x000000, "Member 'RBInteractable_StartInteraction::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_StartInteraction, ReturnValue) == 0x000008, "Member 'RBInteractable_StartInteraction::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractable.GetInteractionPawnLocation
// 0x0028 (0x0028 - 0x0000)
struct RBInteractable_GetInteractionPawnLocation final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0D[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutLocation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDirection;                                      // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0E[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_GetInteractionPawnLocation) == 0x000008, "Wrong alignment on RBInteractable_GetInteractionPawnLocation");
static_assert(sizeof(RBInteractable_GetInteractionPawnLocation) == 0x000028, "Wrong size on RBInteractable_GetInteractionPawnLocation");
static_assert(offsetof(RBInteractable_GetInteractionPawnLocation, Pawn) == 0x000000, "Member 'RBInteractable_GetInteractionPawnLocation::Pawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_GetInteractionPawnLocation, SpecialMove) == 0x000008, "Member 'RBInteractable_GetInteractionPawnLocation::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBInteractable_GetInteractionPawnLocation, OutLocation) == 0x00000C, "Member 'RBInteractable_GetInteractionPawnLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(RBInteractable_GetInteractionPawnLocation, OutDirection) == 0x000018, "Member 'RBInteractable_GetInteractionPawnLocation::OutDirection' has a wrong offset!");
static_assert(offsetof(RBInteractable_GetInteractionPawnLocation, ReturnValue) == 0x000024, "Member 'RBInteractable_GetInteractionPawnLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractable.IsInteractionInputTriggered
// 0x0010 (0x0010 - 0x0000)
struct RBInteractable_IsInteractionInputTriggered final
{
public:
	const class ARBPlayer*                        Interactor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_IsInteractionInputTriggered) == 0x000008, "Wrong alignment on RBInteractable_IsInteractionInputTriggered");
static_assert(sizeof(RBInteractable_IsInteractionInputTriggered) == 0x000010, "Wrong size on RBInteractable_IsInteractionInputTriggered");
static_assert(offsetof(RBInteractable_IsInteractionInputTriggered, Interactor) == 0x000000, "Member 'RBInteractable_IsInteractionInputTriggered::Interactor' has a wrong offset!");
static_assert(offsetof(RBInteractable_IsInteractionInputTriggered, ReturnValue) == 0x000008, "Member 'RBInteractable_IsInteractionInputTriggered::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractable.IsInteractionPossible
// 0x0010 (0x0010 - 0x0000)
struct RBInteractable_IsInteractionPossible final
{
public:
	const class ARBPawn*                          InteractorPawn;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D10[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_IsInteractionPossible) == 0x000008, "Wrong alignment on RBInteractable_IsInteractionPossible");
static_assert(sizeof(RBInteractable_IsInteractionPossible) == 0x000010, "Wrong size on RBInteractable_IsInteractionPossible");
static_assert(offsetof(RBInteractable_IsInteractionPossible, InteractorPawn) == 0x000000, "Member 'RBInteractable_IsInteractionPossible::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_IsInteractionPossible, ReturnValue) == 0x000008, "Member 'RBInteractable_IsInteractionPossible::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractable.TestPhysicsClearance
// 0x0010 (0x0010 - 0x0000)
struct RBInteractable_TestPhysicsClearance final
{
public:
	const class ARBPawn*                          InteractorPawn;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D11[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_TestPhysicsClearance) == 0x000008, "Wrong alignment on RBInteractable_TestPhysicsClearance");
static_assert(sizeof(RBInteractable_TestPhysicsClearance) == 0x000010, "Wrong size on RBInteractable_TestPhysicsClearance");
static_assert(offsetof(RBInteractable_TestPhysicsClearance, InteractorPawn) == 0x000000, "Member 'RBInteractable_TestPhysicsClearance::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInteractable_TestPhysicsClearance, ReturnValue) == 0x000008, "Member 'RBInteractable_TestPhysicsClearance::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractable.ValidateInteractionLocation
// 0x0018 (0x0018 - 0x0000)
struct RBInteractable_ValidateInteractionLocation final
{
public:
	const class ARBPlayer*                        Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InteractionLocation;                               // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D12[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBInteractable_ValidateInteractionLocation) == 0x000008, "Wrong alignment on RBInteractable_ValidateInteractionLocation");
static_assert(sizeof(RBInteractable_ValidateInteractionLocation) == 0x000018, "Wrong size on RBInteractable_ValidateInteractionLocation");
static_assert(offsetof(RBInteractable_ValidateInteractionLocation, Player) == 0x000000, "Member 'RBInteractable_ValidateInteractionLocation::Player' has a wrong offset!");
static_assert(offsetof(RBInteractable_ValidateInteractionLocation, InteractionLocation) == 0x000008, "Member 'RBInteractable_ValidateInteractionLocation::InteractionLocation' has a wrong offset!");
static_assert(offsetof(RBInteractable_ValidateInteractionLocation, ReturnValue) == 0x000014, "Member 'RBInteractable_ValidateInteractionLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBLight.BP_SetLightColor
// 0x0010 (0x0010 - 0x0000)
struct RBLight_BP_SetLightColor final
{
public:
	struct FLinearColor                           NewColor;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLight_BP_SetLightColor) == 0x000004, "Wrong alignment on RBLight_BP_SetLightColor");
static_assert(sizeof(RBLight_BP_SetLightColor) == 0x000010, "Wrong size on RBLight_BP_SetLightColor");
static_assert(offsetof(RBLight_BP_SetLightColor, NewColor) == 0x000000, "Member 'RBLight_BP_SetLightColor::NewColor' has a wrong offset!");

// Function OPP.RBLight.OnLightMode
// 0x0004 (0x0004 - 0x0000)
struct RBLight_OnLightMode final
{
public:
	int32                                         NewLightMode;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLight_OnLightMode) == 0x000004, "Wrong alignment on RBLight_OnLightMode");
static_assert(sizeof(RBLight_OnLightMode) == 0x000004, "Wrong size on RBLight_OnLightMode");
static_assert(offsetof(RBLight_OnLightMode, NewLightMode) == 0x000000, "Member 'RBLight_OnLightMode::NewLightMode' has a wrong offset!");

// Function OPP.RBLight.PlayAnimationCurve
// 0x0010 (0x0010 - 0x0000)
struct RBLight_PlayAnimationCurve final
{
public:
	class UCurveFloat*                            NewAnimCurve;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Looping;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLight_PlayAnimationCurve) == 0x000008, "Wrong alignment on RBLight_PlayAnimationCurve");
static_assert(sizeof(RBLight_PlayAnimationCurve) == 0x000010, "Wrong size on RBLight_PlayAnimationCurve");
static_assert(offsetof(RBLight_PlayAnimationCurve, NewAnimCurve) == 0x000000, "Member 'RBLight_PlayAnimationCurve::NewAnimCurve' has a wrong offset!");
static_assert(offsetof(RBLight_PlayAnimationCurve, Looping) == 0x000008, "Member 'RBLight_PlayAnimationCurve::Looping' has a wrong offset!");

// Function OPP.RBSpectatorMenu.CanCycleSpectators
// 0x0001 (0x0001 - 0x0000)
struct RBSpectatorMenu_CanCycleSpectators final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSpectatorMenu_CanCycleSpectators) == 0x000001, "Wrong alignment on RBSpectatorMenu_CanCycleSpectators");
static_assert(sizeof(RBSpectatorMenu_CanCycleSpectators) == 0x000001, "Wrong size on RBSpectatorMenu_CanCycleSpectators");
static_assert(offsetof(RBSpectatorMenu_CanCycleSpectators, ReturnValue) == 0x000000, "Member 'RBSpectatorMenu_CanCycleSpectators::ReturnValue' has a wrong offset!");

// Function OPP.RBSoundConnectorComponent.IsOpenedChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBSoundConnectorComponent_IsOpenedChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundConnectorComponent_IsOpenedChangedCallback) == 0x000001, "Wrong alignment on RBSoundConnectorComponent_IsOpenedChangedCallback");
static_assert(sizeof(RBSoundConnectorComponent_IsOpenedChangedCallback) == 0x000001, "Wrong size on RBSoundConnectorComponent_IsOpenedChangedCallback");
static_assert(offsetof(RBSoundConnectorComponent_IsOpenedChangedCallback, ChangedType) == 0x000000, "Member 'RBSoundConnectorComponent_IsOpenedChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBSoundConnectorComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBSoundConnectorComponent_SetEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundConnectorComponent_SetEnabled) == 0x000001, "Wrong alignment on RBSoundConnectorComponent_SetEnabled");
static_assert(sizeof(RBSoundConnectorComponent_SetEnabled) == 0x000001, "Wrong size on RBSoundConnectorComponent_SetEnabled");
static_assert(offsetof(RBSoundConnectorComponent_SetEnabled, bEnabledValue) == 0x000000, "Member 'RBSoundConnectorComponent_SetEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBSoundConnectorComponent.SetOpen_Internal
// 0x0001 (0x0001 - 0x0000)
struct RBSoundConnectorComponent_SetOpen_Internal final
{
public:
	bool                                          bOpenValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundConnectorComponent_SetOpen_Internal) == 0x000001, "Wrong alignment on RBSoundConnectorComponent_SetOpen_Internal");
static_assert(sizeof(RBSoundConnectorComponent_SetOpen_Internal) == 0x000001, "Wrong size on RBSoundConnectorComponent_SetOpen_Internal");
static_assert(offsetof(RBSoundConnectorComponent_SetOpen_Internal, bOpenValue) == 0x000000, "Member 'RBSoundConnectorComponent_SetOpen_Internal::bOpenValue' has a wrong offset!");

// Function OPP.RBSoundComponent.BP_GetGroupMasterEmitter
// 0x0008 (0x0008 - 0x0000)
struct RBSoundComponent_BP_GetGroupMasterEmitter final
{
public:
	class URBSoundComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundComponent_BP_GetGroupMasterEmitter) == 0x000008, "Wrong alignment on RBSoundComponent_BP_GetGroupMasterEmitter");
static_assert(sizeof(RBSoundComponent_BP_GetGroupMasterEmitter) == 0x000008, "Wrong size on RBSoundComponent_BP_GetGroupMasterEmitter");
static_assert(offsetof(RBSoundComponent_BP_GetGroupMasterEmitter, ReturnValue) == 0x000000, "Member 'RBSoundComponent_BP_GetGroupMasterEmitter::ReturnValue' has a wrong offset!");

// Function OPP.RBSoundComponent.PlayLoopingSound
// 0x0018 (0x0018 - 0x0000)
struct RBSoundComponent_PlayLoopingSound final
{
public:
	class UAkAudioEvent*                          LoopStartEvent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          LoopStopEvent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleIdenticalLoops;                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D31[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundComponent_PlayLoopingSound) == 0x000008, "Wrong alignment on RBSoundComponent_PlayLoopingSound");
static_assert(sizeof(RBSoundComponent_PlayLoopingSound) == 0x000018, "Wrong size on RBSoundComponent_PlayLoopingSound");
static_assert(offsetof(RBSoundComponent_PlayLoopingSound, LoopStartEvent) == 0x000000, "Member 'RBSoundComponent_PlayLoopingSound::LoopStartEvent' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_PlayLoopingSound, LoopStopEvent) == 0x000008, "Member 'RBSoundComponent_PlayLoopingSound::LoopStopEvent' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_PlayLoopingSound, bAllowMultipleIdenticalLoops) == 0x000010, "Member 'RBSoundComponent_PlayLoopingSound::bAllowMultipleIdenticalLoops' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_PlayLoopingSound, ReturnValue) == 0x000014, "Member 'RBSoundComponent_PlayLoopingSound::ReturnValue' has a wrong offset!");

// Function OPP.RBSoundComponent.PlayVOLoopingSound
// 0x0018 (0x0018 - 0x0000)
struct RBSoundComponent_PlayVOLoopingSound final
{
public:
	class UAkAudioEvent*                          LoopStartEvent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          LoopStopEvent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D32[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSoundComponent_PlayVOLoopingSound) == 0x000008, "Wrong alignment on RBSoundComponent_PlayVOLoopingSound");
static_assert(sizeof(RBSoundComponent_PlayVOLoopingSound) == 0x000018, "Wrong size on RBSoundComponent_PlayVOLoopingSound");
static_assert(offsetof(RBSoundComponent_PlayVOLoopingSound, LoopStartEvent) == 0x000000, "Member 'RBSoundComponent_PlayVOLoopingSound::LoopStartEvent' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_PlayVOLoopingSound, LoopStopEvent) == 0x000008, "Member 'RBSoundComponent_PlayVOLoopingSound::LoopStopEvent' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_PlayVOLoopingSound, ReturnValue) == 0x000010, "Member 'RBSoundComponent_PlayVOLoopingSound::ReturnValue' has a wrong offset!");

// Function OPP.RBSoundComponent.SetBillboardVisibility
// 0x0001 (0x0001 - 0x0000)
struct RBSoundComponent_SetBillboardVisibility final
{
public:
	bool                                          bBillboardVisibleValue;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundComponent_SetBillboardVisibility) == 0x000001, "Wrong alignment on RBSoundComponent_SetBillboardVisibility");
static_assert(sizeof(RBSoundComponent_SetBillboardVisibility) == 0x000001, "Wrong size on RBSoundComponent_SetBillboardVisibility");
static_assert(offsetof(RBSoundComponent_SetBillboardVisibility, bBillboardVisibleValue) == 0x000000, "Member 'RBSoundComponent_SetBillboardVisibility::bBillboardVisibleValue' has a wrong offset!");

// Function OPP.RBSoundComponent.SetMultiPositionGroup
// 0x000C (0x000C - 0x0000)
struct RBSoundComponent_SetMultiPositionGroup final
{
public:
	class FName                                   NewCloneGroupName;                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToGroup;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D33[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSoundComponent_SetMultiPositionGroup) == 0x000004, "Wrong alignment on RBSoundComponent_SetMultiPositionGroup");
static_assert(sizeof(RBSoundComponent_SetMultiPositionGroup) == 0x00000C, "Wrong size on RBSoundComponent_SetMultiPositionGroup");
static_assert(offsetof(RBSoundComponent_SetMultiPositionGroup, NewCloneGroupName) == 0x000000, "Member 'RBSoundComponent_SetMultiPositionGroup::NewCloneGroupName' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_SetMultiPositionGroup, bAddToGroup) == 0x000008, "Member 'RBSoundComponent_SetMultiPositionGroup::bAddToGroup' has a wrong offset!");

// Function OPP.RBSoundComponent.StopAssociatedAkEvent
// 0x0004 (0x0004 - 0x0000)
struct RBSoundComponent_StopAssociatedAkEvent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundComponent_StopAssociatedAkEvent) == 0x000004, "Wrong alignment on RBSoundComponent_StopAssociatedAkEvent");
static_assert(sizeof(RBSoundComponent_StopAssociatedAkEvent) == 0x000004, "Wrong size on RBSoundComponent_StopAssociatedAkEvent");
static_assert(offsetof(RBSoundComponent_StopAssociatedAkEvent, ReturnValue) == 0x000000, "Member 'RBSoundComponent_StopAssociatedAkEvent::ReturnValue' has a wrong offset!");

// Function OPP.RBSoundComponent.StopLoopingSound
// 0x0018 (0x0018 - 0x0000)
struct RBSoundComponent_StopLoopingSound final
{
public:
	class UAkAudioEvent*                          LoopStartEvent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          LoopStopEvent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D34[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSoundComponent_StopLoopingSound) == 0x000008, "Wrong alignment on RBSoundComponent_StopLoopingSound");
static_assert(sizeof(RBSoundComponent_StopLoopingSound) == 0x000018, "Wrong size on RBSoundComponent_StopLoopingSound");
static_assert(offsetof(RBSoundComponent_StopLoopingSound, LoopStartEvent) == 0x000000, "Member 'RBSoundComponent_StopLoopingSound::LoopStartEvent' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_StopLoopingSound, LoopStopEvent) == 0x000008, "Member 'RBSoundComponent_StopLoopingSound::LoopStopEvent' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_StopLoopingSound, ReturnValue) == 0x000010, "Member 'RBSoundComponent_StopLoopingSound::ReturnValue' has a wrong offset!");

// Function OPP.RBSoundComponent.StopLoopingSoundFromID
// 0x0004 (0x0004 - 0x0000)
struct RBSoundComponent_StopLoopingSoundFromID final
{
public:
	int32                                         LoopingSoundID;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundComponent_StopLoopingSoundFromID) == 0x000004, "Wrong alignment on RBSoundComponent_StopLoopingSoundFromID");
static_assert(sizeof(RBSoundComponent_StopLoopingSoundFromID) == 0x000004, "Wrong size on RBSoundComponent_StopLoopingSoundFromID");
static_assert(offsetof(RBSoundComponent_StopLoopingSoundFromID, LoopingSoundID) == 0x000000, "Member 'RBSoundComponent_StopLoopingSoundFromID::LoopingSoundID' has a wrong offset!");

// Function OPP.RBSoundComponent.BP_IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct RBSoundComponent_BP_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundComponent_BP_IsPlaying) == 0x000001, "Wrong alignment on RBSoundComponent_BP_IsPlaying");
static_assert(sizeof(RBSoundComponent_BP_IsPlaying) == 0x000001, "Wrong size on RBSoundComponent_BP_IsPlaying");
static_assert(offsetof(RBSoundComponent_BP_IsPlaying, ReturnValue) == 0x000000, "Member 'RBSoundComponent_BP_IsPlaying::ReturnValue' has a wrong offset!");

// Function OPP.RBSoundComponent.IsPlayingLoopingSound
// 0x0018 (0x0018 - 0x0000)
struct RBSoundComponent_IsPlayingLoopingSound final
{
public:
	class UAkAudioEvent*                          LoopStartEvent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          LoopStopEvent;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D35[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSoundComponent_IsPlayingLoopingSound) == 0x000008, "Wrong alignment on RBSoundComponent_IsPlayingLoopingSound");
static_assert(sizeof(RBSoundComponent_IsPlayingLoopingSound) == 0x000018, "Wrong size on RBSoundComponent_IsPlayingLoopingSound");
static_assert(offsetof(RBSoundComponent_IsPlayingLoopingSound, LoopStartEvent) == 0x000000, "Member 'RBSoundComponent_IsPlayingLoopingSound::LoopStartEvent' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_IsPlayingLoopingSound, LoopStopEvent) == 0x000008, "Member 'RBSoundComponent_IsPlayingLoopingSound::LoopStopEvent' has a wrong offset!");
static_assert(offsetof(RBSoundComponent_IsPlayingLoopingSound, ReturnValue) == 0x000010, "Member 'RBSoundComponent_IsPlayingLoopingSound::ReturnValue' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.BP_SetDirection
// 0x0001 (0x0001 - 0x0000)
struct RBNPCSeparatorTube_BP_SetDirection final
{
public:
	bool                                          bInsideToOutside;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorTube_BP_SetDirection) == 0x000001, "Wrong alignment on RBNPCSeparatorTube_BP_SetDirection");
static_assert(sizeof(RBNPCSeparatorTube_BP_SetDirection) == 0x000001, "Wrong size on RBNPCSeparatorTube_BP_SetDirection");
static_assert(offsetof(RBNPCSeparatorTube_BP_SetDirection, bInsideToOutside) == 0x000000, "Member 'RBNPCSeparatorTube_BP_SetDirection::bInsideToOutside' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.BP_SetForcedDirection
// 0x0001 (0x0001 - 0x0000)
struct RBNPCSeparatorTube_BP_SetForcedDirection final
{
public:
	bool                                          bInsideToOutside;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorTube_BP_SetForcedDirection) == 0x000001, "Wrong alignment on RBNPCSeparatorTube_BP_SetForcedDirection");
static_assert(sizeof(RBNPCSeparatorTube_BP_SetForcedDirection) == 0x000001, "Wrong size on RBNPCSeparatorTube_BP_SetForcedDirection");
static_assert(offsetof(RBNPCSeparatorTube_BP_SetForcedDirection, bInsideToOutside) == 0x000000, "Member 'RBNPCSeparatorTube_BP_SetForcedDirection::bInsideToOutside' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.BP_SetIsLocked
// 0x0001 (0x0001 - 0x0000)
struct RBNPCSeparatorTube_BP_SetIsLocked final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorTube_BP_SetIsLocked) == 0x000001, "Wrong alignment on RBNPCSeparatorTube_BP_SetIsLocked");
static_assert(sizeof(RBNPCSeparatorTube_BP_SetIsLocked) == 0x000001, "Wrong size on RBNPCSeparatorTube_BP_SetIsLocked");
static_assert(offsetof(RBNPCSeparatorTube_BP_SetIsLocked, bValue) == 0x000000, "Member 'RBNPCSeparatorTube_BP_SetIsLocked::bValue' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.BP_SetIsRetracted
// 0x0001 (0x0001 - 0x0000)
struct RBNPCSeparatorTube_BP_SetIsRetracted final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorTube_BP_SetIsRetracted) == 0x000001, "Wrong alignment on RBNPCSeparatorTube_BP_SetIsRetracted");
static_assert(sizeof(RBNPCSeparatorTube_BP_SetIsRetracted) == 0x000001, "Wrong size on RBNPCSeparatorTube_BP_SetIsRetracted");
static_assert(offsetof(RBNPCSeparatorTube_BP_SetIsRetracted, bValue) == 0x000000, "Member 'RBNPCSeparatorTube_BP_SetIsRetracted::bValue' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.BP_SetMaxNumberOfPassages
// 0x0008 (0x0008 - 0x0000)
struct RBNPCSeparatorTube_BP_SetMaxNumberOfPassages final
{
public:
	int32                                         MaxNumber;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetNumberOfPassages;                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D39[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPCSeparatorTube_BP_SetMaxNumberOfPassages) == 0x000004, "Wrong alignment on RBNPCSeparatorTube_BP_SetMaxNumberOfPassages");
static_assert(sizeof(RBNPCSeparatorTube_BP_SetMaxNumberOfPassages) == 0x000008, "Wrong size on RBNPCSeparatorTube_BP_SetMaxNumberOfPassages");
static_assert(offsetof(RBNPCSeparatorTube_BP_SetMaxNumberOfPassages, MaxNumber) == 0x000000, "Member 'RBNPCSeparatorTube_BP_SetMaxNumberOfPassages::MaxNumber' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_BP_SetMaxNumberOfPassages, bResetNumberOfPassages) == 0x000004, "Member 'RBNPCSeparatorTube_BP_SetMaxNumberOfPassages::bResetNumberOfPassages' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.BP_SetTubeState
// 0x0001 (0x0001 - 0x0000)
struct RBNPCSeparatorTube_BP_SetTubeState final
{
public:
	ESeparatorTubeState                           State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorTube_BP_SetTubeState) == 0x000001, "Wrong alignment on RBNPCSeparatorTube_BP_SetTubeState");
static_assert(sizeof(RBNPCSeparatorTube_BP_SetTubeState) == 0x000001, "Wrong size on RBNPCSeparatorTube_BP_SetTubeState");
static_assert(offsetof(RBNPCSeparatorTube_BP_SetTubeState, State) == 0x000000, "Member 'RBNPCSeparatorTube_BP_SetTubeState::State' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.OnComponentBoxBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBNPCSeparatorTube_OnComponentBoxBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorTube_OnComponentBoxBeginOverlap) == 0x000008, "Wrong alignment on RBNPCSeparatorTube_OnComponentBoxBeginOverlap");
static_assert(sizeof(RBNPCSeparatorTube_OnComponentBoxBeginOverlap) == 0x0000A8, "Wrong size on RBNPCSeparatorTube_OnComponentBoxBeginOverlap");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBNPCSeparatorTube_OnComponentBoxBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxBeginOverlap, OtherActor) == 0x000008, "Member 'RBNPCSeparatorTube_OnComponentBoxBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxBeginOverlap, OtherComp) == 0x000010, "Member 'RBNPCSeparatorTube_OnComponentBoxBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBNPCSeparatorTube_OnComponentBoxBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBNPCSeparatorTube_OnComponentBoxBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxBeginOverlap, SweepResult) == 0x000020, "Member 'RBNPCSeparatorTube_OnComponentBoxBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.OnComponentBoxEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBNPCSeparatorTube_OnComponentBoxEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPCSeparatorTube_OnComponentBoxEndOverlap) == 0x000008, "Wrong alignment on RBNPCSeparatorTube_OnComponentBoxEndOverlap");
static_assert(sizeof(RBNPCSeparatorTube_OnComponentBoxEndOverlap) == 0x000020, "Wrong size on RBNPCSeparatorTube_OnComponentBoxEndOverlap");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBNPCSeparatorTube_OnComponentBoxEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxEndOverlap, OtherActor) == 0x000008, "Member 'RBNPCSeparatorTube_OnComponentBoxEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxEndOverlap, OtherComp) == 0x000010, "Member 'RBNPCSeparatorTube_OnComponentBoxEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentBoxEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBNPCSeparatorTube_OnComponentBoxEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.OnComponentCapsuleBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3C[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap) == 0x000008, "Wrong alignment on RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap");
static_assert(sizeof(RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap) == 0x0000A8, "Wrong size on RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap, OtherActor) == 0x000008, "Member 'RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap, OtherComp) == 0x000010, "Member 'RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap, SweepResult) == 0x000020, "Member 'RBNPCSeparatorTube_OnComponentCapsuleBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBNPCSeparatorTube.OnComponentCapsuleEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBNPCSeparatorTube_OnComponentCapsuleEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D3D[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPCSeparatorTube_OnComponentCapsuleEndOverlap) == 0x000008, "Wrong alignment on RBNPCSeparatorTube_OnComponentCapsuleEndOverlap");
static_assert(sizeof(RBNPCSeparatorTube_OnComponentCapsuleEndOverlap) == 0x000020, "Wrong size on RBNPCSeparatorTube_OnComponentCapsuleEndOverlap");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBNPCSeparatorTube_OnComponentCapsuleEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleEndOverlap, OtherActor) == 0x000008, "Member 'RBNPCSeparatorTube_OnComponentCapsuleEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleEndOverlap, OtherComp) == 0x000010, "Member 'RBNPCSeparatorTube_OnComponentCapsuleEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorTube_OnComponentCapsuleEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBNPCSeparatorTube_OnComponentCapsuleEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBSimpleHoldPanelComponent.OnAccumulatedInteractionTimeChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBSimpleHoldPanelComponent_OnAccumulatedInteractionTimeChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleHoldPanelComponent_OnAccumulatedInteractionTimeChangedCallback) == 0x000001, "Wrong alignment on RBSimpleHoldPanelComponent_OnAccumulatedInteractionTimeChangedCallback");
static_assert(sizeof(RBSimpleHoldPanelComponent_OnAccumulatedInteractionTimeChangedCallback) == 0x000001, "Wrong size on RBSimpleHoldPanelComponent_OnAccumulatedInteractionTimeChangedCallback");
static_assert(offsetof(RBSimpleHoldPanelComponent_OnAccumulatedInteractionTimeChangedCallback, ChangeType) == 0x000000, "Member 'RBSimpleHoldPanelComponent_OnAccumulatedInteractionTimeChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBSimpleHoldPanelComponent.OnHoldCompletedChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBSimpleHoldPanelComponent_OnHoldCompletedChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleHoldPanelComponent_OnHoldCompletedChangedCallback) == 0x000001, "Wrong alignment on RBSimpleHoldPanelComponent_OnHoldCompletedChangedCallback");
static_assert(sizeof(RBSimpleHoldPanelComponent_OnHoldCompletedChangedCallback) == 0x000001, "Wrong size on RBSimpleHoldPanelComponent_OnHoldCompletedChangedCallback");
static_assert(offsetof(RBSimpleHoldPanelComponent_OnHoldCompletedChangedCallback, ChangedType) == 0x000000, "Member 'RBSimpleHoldPanelComponent_OnHoldCompletedChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBSimpleHoldPanelComponent.BP_GetProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct RBSimpleHoldPanelComponent_BP_GetProgressRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleHoldPanelComponent_BP_GetProgressRatio) == 0x000004, "Wrong alignment on RBSimpleHoldPanelComponent_BP_GetProgressRatio");
static_assert(sizeof(RBSimpleHoldPanelComponent_BP_GetProgressRatio) == 0x000004, "Wrong size on RBSimpleHoldPanelComponent_BP_GetProgressRatio");
static_assert(offsetof(RBSimpleHoldPanelComponent_BP_GetProgressRatio, ReturnValue) == 0x000000, "Member 'RBSimpleHoldPanelComponent_BP_GetProgressRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBSimpleHoldPanelComponent.GetHeldTime
// 0x0004 (0x0004 - 0x0000)
struct RBSimpleHoldPanelComponent_GetHeldTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleHoldPanelComponent_GetHeldTime) == 0x000004, "Wrong alignment on RBSimpleHoldPanelComponent_GetHeldTime");
static_assert(sizeof(RBSimpleHoldPanelComponent_GetHeldTime) == 0x000004, "Wrong size on RBSimpleHoldPanelComponent_GetHeldTime");
static_assert(offsetof(RBSimpleHoldPanelComponent_GetHeldTime, ReturnValue) == 0x000000, "Member 'RBSimpleHoldPanelComponent_GetHeldTime::ReturnValue' has a wrong offset!");

// Function OPP.RBSimpleHoldPanelComponent.IsHoldCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBSimpleHoldPanelComponent_IsHoldCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleHoldPanelComponent_IsHoldCompleted) == 0x000001, "Wrong alignment on RBSimpleHoldPanelComponent_IsHoldCompleted");
static_assert(sizeof(RBSimpleHoldPanelComponent_IsHoldCompleted) == 0x000001, "Wrong size on RBSimpleHoldPanelComponent_IsHoldCompleted");
static_assert(offsetof(RBSimpleHoldPanelComponent_IsHoldCompleted, ReturnValue) == 0x000000, "Member 'RBSimpleHoldPanelComponent_IsHoldCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBInventoryItemInteractionPanelComponent.BP_UseInventoryItemPredicted
// 0x0010 (0x0010 - 0x0000)
struct RBInventoryItemInteractionPanelComponent_BP_UseInventoryItemPredicted final
{
public:
	class ARBPickup*                              Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                InteractorPawn;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInventoryItemInteractionPanelComponent_BP_UseInventoryItemPredicted) == 0x000008, "Wrong alignment on RBInventoryItemInteractionPanelComponent_BP_UseInventoryItemPredicted");
static_assert(sizeof(RBInventoryItemInteractionPanelComponent_BP_UseInventoryItemPredicted) == 0x000010, "Wrong size on RBInventoryItemInteractionPanelComponent_BP_UseInventoryItemPredicted");
static_assert(offsetof(RBInventoryItemInteractionPanelComponent_BP_UseInventoryItemPredicted, Pickup) == 0x000000, "Member 'RBInventoryItemInteractionPanelComponent_BP_UseInventoryItemPredicted::Pickup' has a wrong offset!");
static_assert(offsetof(RBInventoryItemInteractionPanelComponent_BP_UseInventoryItemPredicted, InteractorPawn) == 0x000008, "Member 'RBInventoryItemInteractionPanelComponent_BP_UseInventoryItemPredicted::InteractorPawn' has a wrong offset!");

// Function OPP.RBInventoryItemInteractionPanelComponent.GetItemFromPlayer
// 0x0010 (0x0010 - 0x0000)
struct RBInventoryItemInteractionPanelComponent_GetItemFromPlayer final
{
public:
	class ARBPawn*                                InteractorPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInventoryItemInteractionPanelComponent_GetItemFromPlayer) == 0x000008, "Wrong alignment on RBInventoryItemInteractionPanelComponent_GetItemFromPlayer");
static_assert(sizeof(RBInventoryItemInteractionPanelComponent_GetItemFromPlayer) == 0x000010, "Wrong size on RBInventoryItemInteractionPanelComponent_GetItemFromPlayer");
static_assert(offsetof(RBInventoryItemInteractionPanelComponent_GetItemFromPlayer, InteractorPawn) == 0x000000, "Member 'RBInventoryItemInteractionPanelComponent_GetItemFromPlayer::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBInventoryItemInteractionPanelComponent_GetItemFromPlayer, ReturnValue) == 0x000008, "Member 'RBInventoryItemInteractionPanelComponent_GetItemFromPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBInventoryItemInteractionPanelComponent.GetItemDropRef
// 0x0010 (0x0010 - 0x0000)
struct RBInventoryItemInteractionPanelComponent_GetItemDropRef final
{
public:
	class ARBPickup*                              Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInventoryItemInteractionPanelComponent_GetItemDropRef) == 0x000008, "Wrong alignment on RBInventoryItemInteractionPanelComponent_GetItemDropRef");
static_assert(sizeof(RBInventoryItemInteractionPanelComponent_GetItemDropRef) == 0x000010, "Wrong size on RBInventoryItemInteractionPanelComponent_GetItemDropRef");
static_assert(offsetof(RBInventoryItemInteractionPanelComponent_GetItemDropRef, Pickup) == 0x000000, "Member 'RBInventoryItemInteractionPanelComponent_GetItemDropRef::Pickup' has a wrong offset!");
static_assert(offsetof(RBInventoryItemInteractionPanelComponent_GetItemDropRef, ReturnValue) == 0x000008, "Member 'RBInventoryItemInteractionPanelComponent_GetItemDropRef::ReturnValue' has a wrong offset!");

// Function OPP.RBAnnouncer.Multicast_PlayVO
// 0x0018 (0x0018 - 0x0000)
struct RBAnnouncer_Multicast_PlayVO final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOBehavior                                   Behavior;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D55[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrePlayQueueDelay;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        RandomSeed;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D56[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBAnnouncer_Multicast_PlayVO) == 0x000008, "Wrong alignment on RBAnnouncer_Multicast_PlayVO");
static_assert(sizeof(RBAnnouncer_Multicast_PlayVO) == 0x000018, "Wrong size on RBAnnouncer_Multicast_PlayVO");
static_assert(offsetof(RBAnnouncer_Multicast_PlayVO, AkEvent) == 0x000000, "Member 'RBAnnouncer_Multicast_PlayVO::AkEvent' has a wrong offset!");
static_assert(offsetof(RBAnnouncer_Multicast_PlayVO, Behavior) == 0x000008, "Member 'RBAnnouncer_Multicast_PlayVO::Behavior' has a wrong offset!");
static_assert(offsetof(RBAnnouncer_Multicast_PlayVO, PrePlayQueueDelay) == 0x00000C, "Member 'RBAnnouncer_Multicast_PlayVO::PrePlayQueueDelay' has a wrong offset!");
static_assert(offsetof(RBAnnouncer_Multicast_PlayVO, RandomSeed) == 0x000010, "Member 'RBAnnouncer_Multicast_PlayVO::RandomSeed' has a wrong offset!");

// Function OPP.RBMenuControlBindingEntry.UpdateRebindStatus
// 0x0001 (0x0001 - 0x0000)
struct RBMenuControlBindingEntry_UpdateRebindStatus final
{
public:
	bool                                          bIsRebindInProgress;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuControlBindingEntry_UpdateRebindStatus) == 0x000001, "Wrong alignment on RBMenuControlBindingEntry_UpdateRebindStatus");
static_assert(sizeof(RBMenuControlBindingEntry_UpdateRebindStatus) == 0x000001, "Wrong size on RBMenuControlBindingEntry_UpdateRebindStatus");
static_assert(offsetof(RBMenuControlBindingEntry_UpdateRebindStatus, bIsRebindInProgress) == 0x000000, "Member 'RBMenuControlBindingEntry_UpdateRebindStatus::bIsRebindInProgress' has a wrong offset!");

// Function OPP.RBMenuControlBindingEntry.HasValueChanged
// 0x0001 (0x0001 - 0x0000)
struct RBMenuControlBindingEntry_HasValueChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuControlBindingEntry_HasValueChanged) == 0x000001, "Wrong alignment on RBMenuControlBindingEntry_HasValueChanged");
static_assert(sizeof(RBMenuControlBindingEntry_HasValueChanged) == 0x000001, "Wrong size on RBMenuControlBindingEntry_HasValueChanged");
static_assert(offsetof(RBMenuControlBindingEntry_HasValueChanged, ReturnValue) == 0x000000, "Member 'RBMenuControlBindingEntry_HasValueChanged::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.Multicast_TauntEvent
// 0x0008 (0x0008 - 0x0000)
struct RBArmWreslingPanelComponent_Multicast_TauntEvent final
{
public:
	class ARBPlayer*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_Multicast_TauntEvent) == 0x000008, "Wrong alignment on RBArmWreslingPanelComponent_Multicast_TauntEvent");
static_assert(sizeof(RBArmWreslingPanelComponent_Multicast_TauntEvent) == 0x000008, "Wrong size on RBArmWreslingPanelComponent_Multicast_TauntEvent");
static_assert(offsetof(RBArmWreslingPanelComponent_Multicast_TauntEvent, Pawn) == 0x000000, "Member 'RBArmWreslingPanelComponent_Multicast_TauntEvent::Pawn' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.UpdatePlayerCameraLimits
// 0x0008 (0x0008 - 0x0000)
struct RBArmWreslingPanelComponent_UpdatePlayerCameraLimits final
{
public:
	class ARBArmWreslingTable*                    Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_UpdatePlayerCameraLimits) == 0x000008, "Wrong alignment on RBArmWreslingPanelComponent_UpdatePlayerCameraLimits");
static_assert(sizeof(RBArmWreslingPanelComponent_UpdatePlayerCameraLimits) == 0x000008, "Wrong size on RBArmWreslingPanelComponent_UpdatePlayerCameraLimits");
static_assert(offsetof(RBArmWreslingPanelComponent_UpdatePlayerCameraLimits, Table) == 0x000000, "Member 'RBArmWreslingPanelComponent_UpdatePlayerCameraLimits::Table' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.GetCursorPosition
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingPanelComponent_GetCursorPosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_GetCursorPosition) == 0x000004, "Wrong alignment on RBArmWreslingPanelComponent_GetCursorPosition");
static_assert(sizeof(RBArmWreslingPanelComponent_GetCursorPosition) == 0x000004, "Wrong size on RBArmWreslingPanelComponent_GetCursorPosition");
static_assert(offsetof(RBArmWreslingPanelComponent_GetCursorPosition, ReturnValue) == 0x000000, "Member 'RBArmWreslingPanelComponent_GetCursorPosition::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.GetElapsedMatchTime
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingPanelComponent_GetElapsedMatchTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_GetElapsedMatchTime) == 0x000004, "Wrong alignment on RBArmWreslingPanelComponent_GetElapsedMatchTime");
static_assert(sizeof(RBArmWreslingPanelComponent_GetElapsedMatchTime) == 0x000004, "Wrong size on RBArmWreslingPanelComponent_GetElapsedMatchTime");
static_assert(offsetof(RBArmWreslingPanelComponent_GetElapsedMatchTime, ReturnValue) == 0x000000, "Member 'RBArmWreslingPanelComponent_GetElapsedMatchTime::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.GetInputStartPosition
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingPanelComponent_GetInputStartPosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_GetInputStartPosition) == 0x000004, "Wrong alignment on RBArmWreslingPanelComponent_GetInputStartPosition");
static_assert(sizeof(RBArmWreslingPanelComponent_GetInputStartPosition) == 0x000004, "Wrong size on RBArmWreslingPanelComponent_GetInputStartPosition");
static_assert(offsetof(RBArmWreslingPanelComponent_GetInputStartPosition, ReturnValue) == 0x000000, "Member 'RBArmWreslingPanelComponent_GetInputStartPosition::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.GetIsInputInProgress
// 0x0001 (0x0001 - 0x0000)
struct RBArmWreslingPanelComponent_GetIsInputInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_GetIsInputInProgress) == 0x000001, "Wrong alignment on RBArmWreslingPanelComponent_GetIsInputInProgress");
static_assert(sizeof(RBArmWreslingPanelComponent_GetIsInputInProgress) == 0x000001, "Wrong size on RBArmWreslingPanelComponent_GetIsInputInProgress");
static_assert(offsetof(RBArmWreslingPanelComponent_GetIsInputInProgress, ReturnValue) == 0x000000, "Member 'RBArmWreslingPanelComponent_GetIsInputInProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.IsArmWreslingRoundInProgress
// 0x0001 (0x0001 - 0x0000)
struct RBArmWreslingPanelComponent_IsArmWreslingRoundInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_IsArmWreslingRoundInProgress) == 0x000001, "Wrong alignment on RBArmWreslingPanelComponent_IsArmWreslingRoundInProgress");
static_assert(sizeof(RBArmWreslingPanelComponent_IsArmWreslingRoundInProgress) == 0x000001, "Wrong size on RBArmWreslingPanelComponent_IsArmWreslingRoundInProgress");
static_assert(offsetof(RBArmWreslingPanelComponent_IsArmWreslingRoundInProgress, ReturnValue) == 0x000000, "Member 'RBArmWreslingPanelComponent_IsArmWreslingRoundInProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.IsArmWreslingTableCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBArmWreslingPanelComponent_IsArmWreslingTableCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_IsArmWreslingTableCompleted) == 0x000001, "Wrong alignment on RBArmWreslingPanelComponent_IsArmWreslingTableCompleted");
static_assert(sizeof(RBArmWreslingPanelComponent_IsArmWreslingTableCompleted) == 0x000001, "Wrong size on RBArmWreslingPanelComponent_IsArmWreslingTableCompleted");
static_assert(offsetof(RBArmWreslingPanelComponent_IsArmWreslingTableCompleted, ReturnValue) == 0x000000, "Member 'RBArmWreslingPanelComponent_IsArmWreslingTableCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.IsPlayer1
// 0x0001 (0x0001 - 0x0000)
struct RBArmWreslingPanelComponent_IsPlayer1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_IsPlayer1) == 0x000001, "Wrong alignment on RBArmWreslingPanelComponent_IsPlayer1");
static_assert(sizeof(RBArmWreslingPanelComponent_IsPlayer1) == 0x000001, "Wrong size on RBArmWreslingPanelComponent_IsPlayer1");
static_assert(offsetof(RBArmWreslingPanelComponent_IsPlayer1, ReturnValue) == 0x000000, "Member 'RBArmWreslingPanelComponent_IsPlayer1::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.IsPlayerLeaving
// 0x0001 (0x0001 - 0x0000)
struct RBArmWreslingPanelComponent_IsPlayerLeaving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_IsPlayerLeaving) == 0x000001, "Wrong alignment on RBArmWreslingPanelComponent_IsPlayerLeaving");
static_assert(sizeof(RBArmWreslingPanelComponent_IsPlayerLeaving) == 0x000001, "Wrong size on RBArmWreslingPanelComponent_IsPlayerLeaving");
static_assert(offsetof(RBArmWreslingPanelComponent_IsPlayerLeaving, ReturnValue) == 0x000000, "Member 'RBArmWreslingPanelComponent_IsPlayerLeaving::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingPanelComponent.IsPredictedPlayer
// 0x0001 (0x0001 - 0x0000)
struct RBArmWreslingPanelComponent_IsPredictedPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingPanelComponent_IsPredictedPlayer) == 0x000001, "Wrong alignment on RBArmWreslingPanelComponent_IsPredictedPlayer");
static_assert(sizeof(RBArmWreslingPanelComponent_IsPredictedPlayer) == 0x000001, "Wrong size on RBArmWreslingPanelComponent_IsPredictedPlayer");
static_assert(offsetof(RBArmWreslingPanelComponent_IsPredictedPlayer, ReturnValue) == 0x000000, "Member 'RBArmWreslingPanelComponent_IsPredictedPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.Event_OnPlayerConnected
// 0x0010 (0x0010 - 0x0000)
struct RBArmWreslingTable_Event_OnPlayerConnected final
{
public:
	class URBArmWreslingPanelComponent*           PanelComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_Event_OnPlayerConnected) == 0x000008, "Wrong alignment on RBArmWreslingTable_Event_OnPlayerConnected");
static_assert(sizeof(RBArmWreslingTable_Event_OnPlayerConnected) == 0x000010, "Wrong size on RBArmWreslingTable_Event_OnPlayerConnected");
static_assert(offsetof(RBArmWreslingTable_Event_OnPlayerConnected, PanelComponent) == 0x000000, "Member 'RBArmWreslingTable_Event_OnPlayerConnected::PanelComponent' has a wrong offset!");
static_assert(offsetof(RBArmWreslingTable_Event_OnPlayerConnected, Player) == 0x000008, "Member 'RBArmWreslingTable_Event_OnPlayerConnected::Player' has a wrong offset!");

// Function OPP.RBArmWreslingTable.Event_OnPlayerDisconnected
// 0x0010 (0x0010 - 0x0000)
struct RBArmWreslingTable_Event_OnPlayerDisconnected final
{
public:
	class URBArmWreslingPanelComponent*           PanelComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_Event_OnPlayerDisconnected) == 0x000008, "Wrong alignment on RBArmWreslingTable_Event_OnPlayerDisconnected");
static_assert(sizeof(RBArmWreslingTable_Event_OnPlayerDisconnected) == 0x000010, "Wrong size on RBArmWreslingTable_Event_OnPlayerDisconnected");
static_assert(offsetof(RBArmWreslingTable_Event_OnPlayerDisconnected, PanelComponent) == 0x000000, "Member 'RBArmWreslingTable_Event_OnPlayerDisconnected::PanelComponent' has a wrong offset!");
static_assert(offsetof(RBArmWreslingTable_Event_OnPlayerDisconnected, Player) == 0x000008, "Member 'RBArmWreslingTable_Event_OnPlayerDisconnected::Player' has a wrong offset!");

// Function OPP.RBArmWreslingTable.Event_OnRoundEnded
// 0x0070 (0x0070 - 0x0000)
struct RBArmWreslingTable_Event_OnRoundEnded final
{
public:
	struct FArmWreslingPlayerRoundData            Player1Data;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FArmWreslingPlayerRoundData            Player2Data;                                       // 0x0038(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_Event_OnRoundEnded) == 0x000008, "Wrong alignment on RBArmWreslingTable_Event_OnRoundEnded");
static_assert(sizeof(RBArmWreslingTable_Event_OnRoundEnded) == 0x000070, "Wrong size on RBArmWreslingTable_Event_OnRoundEnded");
static_assert(offsetof(RBArmWreslingTable_Event_OnRoundEnded, Player1Data) == 0x000000, "Member 'RBArmWreslingTable_Event_OnRoundEnded::Player1Data' has a wrong offset!");
static_assert(offsetof(RBArmWreslingTable_Event_OnRoundEnded, Player2Data) == 0x000038, "Member 'RBArmWreslingTable_Event_OnRoundEnded::Player2Data' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetMatchesLost
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingTable_GetMatchesLost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetMatchesLost) == 0x000004, "Wrong alignment on RBArmWreslingTable_GetMatchesLost");
static_assert(sizeof(RBArmWreslingTable_GetMatchesLost) == 0x000004, "Wrong size on RBArmWreslingTable_GetMatchesLost");
static_assert(offsetof(RBArmWreslingTable_GetMatchesLost, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetMatchesLost::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetMatchesWon
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingTable_GetMatchesWon final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetMatchesWon) == 0x000004, "Wrong alignment on RBArmWreslingTable_GetMatchesWon");
static_assert(sizeof(RBArmWreslingTable_GetMatchesWon) == 0x000004, "Wrong size on RBArmWreslingTable_GetMatchesWon");
static_assert(offsetof(RBArmWreslingTable_GetMatchesWon, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetMatchesWon::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetOpponentMatchesLost
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingTable_GetOpponentMatchesLost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetOpponentMatchesLost) == 0x000004, "Wrong alignment on RBArmWreslingTable_GetOpponentMatchesLost");
static_assert(sizeof(RBArmWreslingTable_GetOpponentMatchesLost) == 0x000004, "Wrong size on RBArmWreslingTable_GetOpponentMatchesLost");
static_assert(offsetof(RBArmWreslingTable_GetOpponentMatchesLost, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetOpponentMatchesLost::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetOpponentMatchesWon
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingTable_GetOpponentMatchesWon final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetOpponentMatchesWon) == 0x000004, "Wrong alignment on RBArmWreslingTable_GetOpponentMatchesWon");
static_assert(sizeof(RBArmWreslingTable_GetOpponentMatchesWon) == 0x000004, "Wrong size on RBArmWreslingTable_GetOpponentMatchesWon");
static_assert(offsetof(RBArmWreslingTable_GetOpponentMatchesWon, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetOpponentMatchesWon::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetOpponentRating
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingTable_GetOpponentRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetOpponentRating) == 0x000004, "Wrong alignment on RBArmWreslingTable_GetOpponentRating");
static_assert(sizeof(RBArmWreslingTable_GetOpponentRating) == 0x000004, "Wrong size on RBArmWreslingTable_GetOpponentRating");
static_assert(offsetof(RBArmWreslingTable_GetOpponentRating, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetOpponentRating::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetRating
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingTable_GetRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetRating) == 0x000004, "Wrong alignment on RBArmWreslingTable_GetRating");
static_assert(sizeof(RBArmWreslingTable_GetRating) == 0x000004, "Wrong size on RBArmWreslingTable_GetRating");
static_assert(offsetof(RBArmWreslingTable_GetRating, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetRating::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.Multicast_BroadcastMatchEndMessage
// 0x0018 (0x0018 - 0x0000)
struct RBArmWreslingTable_Multicast_BroadcastMatchEndMessage final
{
public:
	class ARBPlayer*                              WinnerPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              LoserPlayer;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GameTied_value;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D63[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBArmWreslingTable_Multicast_BroadcastMatchEndMessage) == 0x000008, "Wrong alignment on RBArmWreslingTable_Multicast_BroadcastMatchEndMessage");
static_assert(sizeof(RBArmWreslingTable_Multicast_BroadcastMatchEndMessage) == 0x000018, "Wrong size on RBArmWreslingTable_Multicast_BroadcastMatchEndMessage");
static_assert(offsetof(RBArmWreslingTable_Multicast_BroadcastMatchEndMessage, WinnerPlayer) == 0x000000, "Member 'RBArmWreslingTable_Multicast_BroadcastMatchEndMessage::WinnerPlayer' has a wrong offset!");
static_assert(offsetof(RBArmWreslingTable_Multicast_BroadcastMatchEndMessage, LoserPlayer) == 0x000008, "Member 'RBArmWreslingTable_Multicast_BroadcastMatchEndMessage::LoserPlayer' has a wrong offset!");
static_assert(offsetof(RBArmWreslingTable_Multicast_BroadcastMatchEndMessage, GameTied_value) == 0x000010, "Member 'RBArmWreslingTable_Multicast_BroadcastMatchEndMessage::GameTied_value' has a wrong offset!");

// Function OPP.RBArmWreslingTable.Multicast_BroadcastMatchStartMessage
// 0x0010 (0x0010 - 0x0000)
struct RBArmWreslingTable_Multicast_BroadcastMatchStartMessage final
{
public:
	class ARBPlayer*                              Player1Ptr;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player2Ptr;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_Multicast_BroadcastMatchStartMessage) == 0x000008, "Wrong alignment on RBArmWreslingTable_Multicast_BroadcastMatchStartMessage");
static_assert(sizeof(RBArmWreslingTable_Multicast_BroadcastMatchStartMessage) == 0x000010, "Wrong size on RBArmWreslingTable_Multicast_BroadcastMatchStartMessage");
static_assert(offsetof(RBArmWreslingTable_Multicast_BroadcastMatchStartMessage, Player1Ptr) == 0x000000, "Member 'RBArmWreslingTable_Multicast_BroadcastMatchStartMessage::Player1Ptr' has a wrong offset!");
static_assert(offsetof(RBArmWreslingTable_Multicast_BroadcastMatchStartMessage, Player2Ptr) == 0x000008, "Member 'RBArmWreslingTable_Multicast_BroadcastMatchStartMessage::Player2Ptr' has a wrong offset!");

// Function OPP.RBArmWreslingTable.Multicast_OnRoundEnded
// 0x0070 (0x0070 - 0x0000)
struct RBArmWreslingTable_Multicast_OnRoundEnded final
{
public:
	struct FArmWreslingPlayerRoundData            Player1Data;                                       // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FArmWreslingPlayerRoundData            Player2Data;                                       // 0x0038(0x0038)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_Multicast_OnRoundEnded) == 0x000008, "Wrong alignment on RBArmWreslingTable_Multicast_OnRoundEnded");
static_assert(sizeof(RBArmWreslingTable_Multicast_OnRoundEnded) == 0x000070, "Wrong size on RBArmWreslingTable_Multicast_OnRoundEnded");
static_assert(offsetof(RBArmWreslingTable_Multicast_OnRoundEnded, Player1Data) == 0x000000, "Member 'RBArmWreslingTable_Multicast_OnRoundEnded::Player1Data' has a wrong offset!");
static_assert(offsetof(RBArmWreslingTable_Multicast_OnRoundEnded, Player2Data) == 0x000038, "Member 'RBArmWreslingTable_Multicast_OnRoundEnded::Player2Data' has a wrong offset!");

// Function OPP.RBArmWreslingTable.Multicast_PlayerInputEvent
// 0x0038 (0x0038 - 0x0000)
struct RBArmWreslingTable_Multicast_PlayerInputEvent final
{
public:
	struct FArmWreslingPlayerRoundData            PlayerData;                                        // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_Multicast_PlayerInputEvent) == 0x000008, "Wrong alignment on RBArmWreslingTable_Multicast_PlayerInputEvent");
static_assert(sizeof(RBArmWreslingTable_Multicast_PlayerInputEvent) == 0x000038, "Wrong size on RBArmWreslingTable_Multicast_PlayerInputEvent");
static_assert(offsetof(RBArmWreslingTable_Multicast_PlayerInputEvent, PlayerData) == 0x000000, "Member 'RBArmWreslingTable_Multicast_PlayerInputEvent::PlayerData' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetElapsedRoundTime
// 0x0004 (0x0004 - 0x0000)
struct RBArmWreslingTable_GetElapsedRoundTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetElapsedRoundTime) == 0x000004, "Wrong alignment on RBArmWreslingTable_GetElapsedRoundTime");
static_assert(sizeof(RBArmWreslingTable_GetElapsedRoundTime) == 0x000004, "Wrong size on RBArmWreslingTable_GetElapsedRoundTime");
static_assert(offsetof(RBArmWreslingTable_GetElapsedRoundTime, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetElapsedRoundTime::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetLocallyWatchedPanel
// 0x0008 (0x0008 - 0x0000)
struct RBArmWreslingTable_GetLocallyWatchedPanel final
{
public:
	class URBArmWreslingPanelComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetLocallyWatchedPanel) == 0x000008, "Wrong alignment on RBArmWreslingTable_GetLocallyWatchedPanel");
static_assert(sizeof(RBArmWreslingTable_GetLocallyWatchedPanel) == 0x000008, "Wrong size on RBArmWreslingTable_GetLocallyWatchedPanel");
static_assert(offsetof(RBArmWreslingTable_GetLocallyWatchedPanel, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetLocallyWatchedPanel::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetOpposingWatchedPanel
// 0x0008 (0x0008 - 0x0000)
struct RBArmWreslingTable_GetOpposingWatchedPanel final
{
public:
	class URBArmWreslingPanelComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetOpposingWatchedPanel) == 0x000008, "Wrong alignment on RBArmWreslingTable_GetOpposingWatchedPanel");
static_assert(sizeof(RBArmWreslingTable_GetOpposingWatchedPanel) == 0x000008, "Wrong size on RBArmWreslingTable_GetOpposingWatchedPanel");
static_assert(offsetof(RBArmWreslingTable_GetOpposingWatchedPanel, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetOpposingWatchedPanel::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.GetTableState
// 0x0001 (0x0001 - 0x0000)
struct RBArmWreslingTable_GetTableState final
{
public:
	EArmWreslingTableState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_GetTableState) == 0x000001, "Wrong alignment on RBArmWreslingTable_GetTableState");
static_assert(sizeof(RBArmWreslingTable_GetTableState) == 0x000001, "Wrong size on RBArmWreslingTable_GetTableState");
static_assert(offsetof(RBArmWreslingTable_GetTableState, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_GetTableState::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.IsMatchInProgress
// 0x0001 (0x0001 - 0x0000)
struct RBArmWreslingTable_IsMatchInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_IsMatchInProgress) == 0x000001, "Wrong alignment on RBArmWreslingTable_IsMatchInProgress");
static_assert(sizeof(RBArmWreslingTable_IsMatchInProgress) == 0x000001, "Wrong size on RBArmWreslingTable_IsMatchInProgress");
static_assert(offsetof(RBArmWreslingTable_IsMatchInProgress, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_IsMatchInProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBArmWreslingTable.IsMatchStartedOrCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBArmWreslingTable_IsMatchStartedOrCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBArmWreslingTable_IsMatchStartedOrCompleted) == 0x000001, "Wrong alignment on RBArmWreslingTable_IsMatchStartedOrCompleted");
static_assert(sizeof(RBArmWreslingTable_IsMatchStartedOrCompleted) == 0x000001, "Wrong size on RBArmWreslingTable_IsMatchStartedOrCompleted");
static_assert(offsetof(RBArmWreslingTable_IsMatchStartedOrCompleted, ReturnValue) == 0x000000, "Member 'RBArmWreslingTable_IsMatchStartedOrCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyGamePanelComponent.Event_PlayerEnteredGame
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyGamePanelComponent_Event_PlayerEnteredGame final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyGamePanelComponent_Event_PlayerEnteredGame) == 0x000008, "Wrong alignment on RBLobbyGamePanelComponent_Event_PlayerEnteredGame");
static_assert(sizeof(RBLobbyGamePanelComponent_Event_PlayerEnteredGame) == 0x000008, "Wrong size on RBLobbyGamePanelComponent_Event_PlayerEnteredGame");
static_assert(offsetof(RBLobbyGamePanelComponent_Event_PlayerEnteredGame, Player) == 0x000000, "Member 'RBLobbyGamePanelComponent_Event_PlayerEnteredGame::Player' has a wrong offset!");

// Function OPP.RBLobbyGamePanelComponent.Event_PlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyGamePanelComponent_Event_PlayerLeftGame final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyGamePanelComponent_Event_PlayerLeftGame) == 0x000008, "Wrong alignment on RBLobbyGamePanelComponent_Event_PlayerLeftGame");
static_assert(sizeof(RBLobbyGamePanelComponent_Event_PlayerLeftGame) == 0x000008, "Wrong size on RBLobbyGamePanelComponent_Event_PlayerLeftGame");
static_assert(offsetof(RBLobbyGamePanelComponent_Event_PlayerLeftGame, Player) == 0x000000, "Member 'RBLobbyGamePanelComponent_Event_PlayerLeftGame::Player' has a wrong offset!");

// Function OPP.RBLobbyGamePanelComponent.OnLobbyGameStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyGamePanelComponent_OnLobbyGameStateChanged final
{
public:
	ELobbyGameState                               NewGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyGamePanelComponent_OnLobbyGameStateChanged) == 0x000001, "Wrong alignment on RBLobbyGamePanelComponent_OnLobbyGameStateChanged");
static_assert(sizeof(RBLobbyGamePanelComponent_OnLobbyGameStateChanged) == 0x000001, "Wrong size on RBLobbyGamePanelComponent_OnLobbyGameStateChanged");
static_assert(offsetof(RBLobbyGamePanelComponent_OnLobbyGameStateChanged, NewGameState) == 0x000000, "Member 'RBLobbyGamePanelComponent_OnLobbyGameStateChanged::NewGameState' has a wrong offset!");

// Function OPP.RBOperatableInterface.OnTriggerableActivated
// 0x0008 (0x0008 - 0x0000)
struct RBOperatableInterface_OnTriggerableActivated final
{
public:
	class ARBTriggerable*                         Triggerable;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableInterface_OnTriggerableActivated) == 0x000008, "Wrong alignment on RBOperatableInterface_OnTriggerableActivated");
static_assert(sizeof(RBOperatableInterface_OnTriggerableActivated) == 0x000008, "Wrong size on RBOperatableInterface_OnTriggerableActivated");
static_assert(offsetof(RBOperatableInterface_OnTriggerableActivated, Triggerable) == 0x000000, "Member 'RBOperatableInterface_OnTriggerableActivated::Triggerable' has a wrong offset!");

// Function OPP.RBOperatableInterface.OnTriggerableDeactivated
// 0x0008 (0x0008 - 0x0000)
struct RBOperatableInterface_OnTriggerableDeactivated final
{
public:
	class ARBTriggerable*                         Triggerable;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableInterface_OnTriggerableDeactivated) == 0x000008, "Wrong alignment on RBOperatableInterface_OnTriggerableDeactivated");
static_assert(sizeof(RBOperatableInterface_OnTriggerableDeactivated) == 0x000008, "Wrong size on RBOperatableInterface_OnTriggerableDeactivated");
static_assert(offsetof(RBOperatableInterface_OnTriggerableDeactivated, Triggerable) == 0x000000, "Member 'RBOperatableInterface_OnTriggerableDeactivated::Triggerable' has a wrong offset!");

// Function OPP.RBOperatableInterface.GetProgressionRatio
// 0x0004 (0x0004 - 0x0000)
struct RBOperatableInterface_GetProgressionRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableInterface_GetProgressionRatio) == 0x000004, "Wrong alignment on RBOperatableInterface_GetProgressionRatio");
static_assert(sizeof(RBOperatableInterface_GetProgressionRatio) == 0x000004, "Wrong size on RBOperatableInterface_GetProgressionRatio");
static_assert(offsetof(RBOperatableInterface_GetProgressionRatio, ReturnValue) == 0x000000, "Member 'RBOperatableInterface_GetProgressionRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatableInterface.GetTriggerActionBehavior
// 0x0001 (0x0001 - 0x0000)
struct RBOperatableInterface_GetTriggerActionBehavior final
{
public:
	ETriggerableActionBehavior                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableInterface_GetTriggerActionBehavior) == 0x000001, "Wrong alignment on RBOperatableInterface_GetTriggerActionBehavior");
static_assert(sizeof(RBOperatableInterface_GetTriggerActionBehavior) == 0x000001, "Wrong size on RBOperatableInterface_GetTriggerActionBehavior");
static_assert(offsetof(RBOperatableInterface_GetTriggerActionBehavior, ReturnValue) == 0x000000, "Member 'RBOperatableInterface_GetTriggerActionBehavior::ReturnValue' has a wrong offset!");

// Function OPP.RBAvailableTaskListWidget.SetMetaNpcType
// 0x0001 (0x0001 - 0x0000)
struct RBAvailableTaskListWidget_SetMetaNpcType final
{
public:
	EMetaNPCType                                  MetaNPCType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAvailableTaskListWidget_SetMetaNpcType) == 0x000001, "Wrong alignment on RBAvailableTaskListWidget_SetMetaNpcType");
static_assert(sizeof(RBAvailableTaskListWidget_SetMetaNpcType) == 0x000001, "Wrong size on RBAvailableTaskListWidget_SetMetaNpcType");
static_assert(offsetof(RBAvailableTaskListWidget_SetMetaNpcType, MetaNPCType) == 0x000000, "Member 'RBAvailableTaskListWidget_SetMetaNpcType::MetaNPCType' has a wrong offset!");

// Function OPP.RBAvailableTaskListWidget.GetAvailableTasks
// 0x0010 (0x0010 - 0x0000)
struct RBAvailableTaskListWidget_GetAvailableTasks final
{
public:
	TArray<struct FUINPCTask>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBAvailableTaskListWidget_GetAvailableTasks) == 0x000008, "Wrong alignment on RBAvailableTaskListWidget_GetAvailableTasks");
static_assert(sizeof(RBAvailableTaskListWidget_GetAvailableTasks) == 0x000010, "Wrong size on RBAvailableTaskListWidget_GetAvailableTasks");
static_assert(offsetof(RBAvailableTaskListWidget_GetAvailableTasks, ReturnValue) == 0x000000, "Member 'RBAvailableTaskListWidget_GetAvailableTasks::ReturnValue' has a wrong offset!");

// Function OPP.RBInvestigationPoint.Event_OnInvestigate
// 0x0008 (0x0008 - 0x0000)
struct RBInvestigationPoint_Event_OnInvestigate final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInvestigationPoint_Event_OnInvestigate) == 0x000008, "Wrong alignment on RBInvestigationPoint_Event_OnInvestigate");
static_assert(sizeof(RBInvestigationPoint_Event_OnInvestigate) == 0x000008, "Wrong size on RBInvestigationPoint_Event_OnInvestigate");
static_assert(offsetof(RBInvestigationPoint_Event_OnInvestigate, bot) == 0x000000, "Member 'RBInvestigationPoint_Event_OnInvestigate::bot' has a wrong offset!");

// Function OPP.RBPawn.BP_DamageParams
// 0x0018 (0x0018 - 0x0000)
struct RBPawn_BP_DamageParams final
{
public:
	EDamageType                                   DmgType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D97[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageParameters                      ReturnValue;                                       // 0x0004(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_DamageParams) == 0x000004, "Wrong alignment on RBPawn_BP_DamageParams");
static_assert(sizeof(RBPawn_BP_DamageParams) == 0x000018, "Wrong size on RBPawn_BP_DamageParams");
static_assert(offsetof(RBPawn_BP_DamageParams, DmgType) == 0x000000, "Member 'RBPawn_BP_DamageParams::DmgType' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_DamageParams, ReturnValue) == 0x000004, "Member 'RBPawn_BP_DamageParams::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.AddForcedDarknessSource_Server
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_AddForcedDarknessSource_Server final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_AddForcedDarknessSource_Server) == 0x000008, "Wrong alignment on RBPawn_AddForcedDarknessSource_Server");
static_assert(sizeof(RBPawn_AddForcedDarknessSource_Server) == 0x000008, "Wrong size on RBPawn_AddForcedDarknessSource_Server");
static_assert(offsetof(RBPawn_AddForcedDarknessSource_Server, Source) == 0x000000, "Member 'RBPawn_AddForcedDarknessSource_Server::Source' has a wrong offset!");

// Function OPP.RBPawn.BP_AddHealth
// 0x0004 (0x0004 - 0x0000)
struct RBPawn_BP_AddHealth final
{
public:
	float                                         HealthToAdd;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_AddHealth) == 0x000004, "Wrong alignment on RBPawn_BP_AddHealth");
static_assert(sizeof(RBPawn_BP_AddHealth) == 0x000004, "Wrong size on RBPawn_BP_AddHealth");
static_assert(offsetof(RBPawn_BP_AddHealth, HealthToAdd) == 0x000000, "Member 'RBPawn_BP_AddHealth::HealthToAdd' has a wrong offset!");

// Function OPP.RBPawn.BP_DEBUG_TryInteraction
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_BP_DEBUG_TryInteraction final
{
public:
	class UObject*                                Interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_DEBUG_TryInteraction) == 0x000008, "Wrong alignment on RBPawn_BP_DEBUG_TryInteraction");
static_assert(sizeof(RBPawn_BP_DEBUG_TryInteraction) == 0x000008, "Wrong size on RBPawn_BP_DEBUG_TryInteraction");
static_assert(offsetof(RBPawn_BP_DEBUG_TryInteraction, Interactable) == 0x000000, "Member 'RBPawn_BP_DEBUG_TryInteraction::Interactable' has a wrong offset!");

// Function OPP.RBPawn.BP_DetachTemporaryComponent
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_BP_DetachTemporaryComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_DetachTemporaryComponent) == 0x000008, "Wrong alignment on RBPawn_BP_DetachTemporaryComponent");
static_assert(sizeof(RBPawn_BP_DetachTemporaryComponent) == 0x000008, "Wrong size on RBPawn_BP_DetachTemporaryComponent");
static_assert(offsetof(RBPawn_BP_DetachTemporaryComponent, Component) == 0x000000, "Member 'RBPawn_BP_DetachTemporaryComponent::Component' has a wrong offset!");

// Function OPP.RBPawn.BP_EnterCinematicMode
// 0x001C (0x001C - 0x0000)
struct RBPawn_BP_EnterCinematicMode final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ELocomotionMode                               ExitLocomotionMode;                                // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D98[0x2];                                     // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_BP_EnterCinematicMode) == 0x000004, "Wrong alignment on RBPawn_BP_EnterCinematicMode");
static_assert(sizeof(RBPawn_BP_EnterCinematicMode) == 0x00001C, "Wrong size on RBPawn_BP_EnterCinematicMode");
static_assert(offsetof(RBPawn_BP_EnterCinematicMode, Location) == 0x000000, "Member 'RBPawn_BP_EnterCinematicMode::Location' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_EnterCinematicMode, Rotation) == 0x00000C, "Member 'RBPawn_BP_EnterCinematicMode::Rotation' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_EnterCinematicMode, ExitLocomotionMode) == 0x000018, "Member 'RBPawn_BP_EnterCinematicMode::ExitLocomotionMode' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_EnterCinematicMode, bTeleport) == 0x000019, "Member 'RBPawn_BP_EnterCinematicMode::bTeleport' has a wrong offset!");

// Function OPP.RBPawn.BP_PlayAkEvent
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_BP_PlayAkEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_PlayAkEvent) == 0x000008, "Wrong alignment on RBPawn_BP_PlayAkEvent");
static_assert(sizeof(RBPawn_BP_PlayAkEvent) == 0x000008, "Wrong size on RBPawn_BP_PlayAkEvent");
static_assert(offsetof(RBPawn_BP_PlayAkEvent, AkEvent) == 0x000000, "Member 'RBPawn_BP_PlayAkEvent::AkEvent' has a wrong offset!");

// Function OPP.RBPawn.BP_PlaySpecialMoveAnim
// 0x0018 (0x0018 - 0x0000)
struct RBPawn_BP_PlaySpecialMoveAnim final
{
public:
	class UAnimSequenceBase*                      AnimSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendIn;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendOut;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_PlaySpecialMoveAnim) == 0x000008, "Wrong alignment on RBPawn_BP_PlaySpecialMoveAnim");
static_assert(sizeof(RBPawn_BP_PlaySpecialMoveAnim) == 0x000018, "Wrong size on RBPawn_BP_PlaySpecialMoveAnim");
static_assert(offsetof(RBPawn_BP_PlaySpecialMoveAnim, AnimSeq) == 0x000000, "Member 'RBPawn_BP_PlaySpecialMoveAnim::AnimSeq' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_PlaySpecialMoveAnim, blendIn) == 0x000008, "Member 'RBPawn_BP_PlaySpecialMoveAnim::blendIn' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_PlaySpecialMoveAnim, blendOut) == 0x00000C, "Member 'RBPawn_BP_PlaySpecialMoveAnim::blendOut' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_PlaySpecialMoveAnim, PlayRate) == 0x000010, "Member 'RBPawn_BP_PlaySpecialMoveAnim::PlayRate' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_PlaySpecialMoveAnim, StartTime) == 0x000014, "Member 'RBPawn_BP_PlaySpecialMoveAnim::StartTime' has a wrong offset!");

// Function OPP.RBPawn.BP_PlayVoiceAkEvent
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_BP_PlayVoiceAkEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_PlayVoiceAkEvent) == 0x000008, "Wrong alignment on RBPawn_BP_PlayVoiceAkEvent");
static_assert(sizeof(RBPawn_BP_PlayVoiceAkEvent) == 0x000008, "Wrong size on RBPawn_BP_PlayVoiceAkEvent");
static_assert(offsetof(RBPawn_BP_PlayVoiceAkEvent, AkEvent) == 0x000000, "Member 'RBPawn_BP_PlayVoiceAkEvent::AkEvent' has a wrong offset!");

// Function OPP.RBPawn.BP_RemoveTemporaryComponent
// 0x0010 (0x0010 - 0x0000)
struct RBPawn_BP_RemoveTemporaryComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapBack;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D99[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_BP_RemoveTemporaryComponent) == 0x000008, "Wrong alignment on RBPawn_BP_RemoveTemporaryComponent");
static_assert(sizeof(RBPawn_BP_RemoveTemporaryComponent) == 0x000010, "Wrong size on RBPawn_BP_RemoveTemporaryComponent");
static_assert(offsetof(RBPawn_BP_RemoveTemporaryComponent, Component) == 0x000000, "Member 'RBPawn_BP_RemoveTemporaryComponent::Component' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_RemoveTemporaryComponent, bSnapBack) == 0x000008, "Member 'RBPawn_BP_RemoveTemporaryComponent::bSnapBack' has a wrong offset!");

// Function OPP.RBPawn.BP_SpecialMoveNotify
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_BP_SpecialMoveNotify final
{
public:
	ESpecialMoveNotifyType                        NotifyType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_SpecialMoveNotify) == 0x000001, "Wrong alignment on RBPawn_BP_SpecialMoveNotify");
static_assert(sizeof(RBPawn_BP_SpecialMoveNotify) == 0x000001, "Wrong size on RBPawn_BP_SpecialMoveNotify");
static_assert(offsetof(RBPawn_BP_SpecialMoveNotify, NotifyType) == 0x000000, "Member 'RBPawn_BP_SpecialMoveNotify::NotifyType' has a wrong offset!");

// Function OPP.RBPawn.BP_StartScriptedAnimation
// 0x0090 (0x0090 - 0x0000)
struct RBPawn_BP_StartScriptedAnimation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBAnimRef                             Animation;                                         // 0x0018(0x0030)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ScriptedAttachBone;                                // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Param_ScriptedAttachActor;                         // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9A[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ScriptedAttachOffset;                              // 0x0060(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_StartScriptedAnimation) == 0x000010, "Wrong alignment on RBPawn_BP_StartScriptedAnimation");
static_assert(sizeof(RBPawn_BP_StartScriptedAnimation) == 0x000090, "Wrong size on RBPawn_BP_StartScriptedAnimation");
static_assert(offsetof(RBPawn_BP_StartScriptedAnimation, Location) == 0x000000, "Member 'RBPawn_BP_StartScriptedAnimation::Location' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_StartScriptedAnimation, Forward) == 0x00000C, "Member 'RBPawn_BP_StartScriptedAnimation::Forward' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_StartScriptedAnimation, Animation) == 0x000018, "Member 'RBPawn_BP_StartScriptedAnimation::Animation' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_StartScriptedAnimation, ScriptedAttachBone) == 0x000048, "Member 'RBPawn_BP_StartScriptedAnimation::ScriptedAttachBone' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_StartScriptedAnimation, Param_ScriptedAttachActor) == 0x000050, "Member 'RBPawn_BP_StartScriptedAnimation::Param_ScriptedAttachActor' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_StartScriptedAnimation, ScriptedAttachOffset) == 0x000060, "Member 'RBPawn_BP_StartScriptedAnimation::ScriptedAttachOffset' has a wrong offset!");

// Function OPP.RBPawn.BP_StartSpecialMove
// 0x0020 (0x0020 - 0x0000)
struct RBPawn_BP_StartSpecialMove final
{
public:
	ESpecialMove                                  SpecialMove;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetPosition;                                    // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDirection;                                   // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredicted;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9C[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_BP_StartSpecialMove) == 0x000004, "Wrong alignment on RBPawn_BP_StartSpecialMove");
static_assert(sizeof(RBPawn_BP_StartSpecialMove) == 0x000020, "Wrong size on RBPawn_BP_StartSpecialMove");
static_assert(offsetof(RBPawn_BP_StartSpecialMove, SpecialMove) == 0x000000, "Member 'RBPawn_BP_StartSpecialMove::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_StartSpecialMove, TargetPosition) == 0x000004, "Member 'RBPawn_BP_StartSpecialMove::TargetPosition' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_StartSpecialMove, TargetDirection) == 0x000010, "Member 'RBPawn_BP_StartSpecialMove::TargetDirection' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_StartSpecialMove, bPredicted) == 0x00001C, "Member 'RBPawn_BP_StartSpecialMove::bPredicted' has a wrong offset!");

// Function OPP.RBPawn.BP_TemporaryAttachComponent
// 0x0010 (0x0010 - 0x0000)
struct RBPawn_BP_TemporaryAttachComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_TemporaryAttachComponent) == 0x000008, "Wrong alignment on RBPawn_BP_TemporaryAttachComponent");
static_assert(sizeof(RBPawn_BP_TemporaryAttachComponent) == 0x000010, "Wrong size on RBPawn_BP_TemporaryAttachComponent");
static_assert(offsetof(RBPawn_BP_TemporaryAttachComponent, Component) == 0x000000, "Member 'RBPawn_BP_TemporaryAttachComponent::Component' has a wrong offset!");
static_assert(offsetof(RBPawn_BP_TemporaryAttachComponent, SocketName) == 0x000008, "Member 'RBPawn_BP_TemporaryAttachComponent::SocketName' has a wrong offset!");

// Function OPP.RBPawn.Event_HealthUpdated
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_Event_HealthUpdated final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreased;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9D[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_Event_HealthUpdated) == 0x000004, "Wrong alignment on RBPawn_Event_HealthUpdated");
static_assert(sizeof(RBPawn_Event_HealthUpdated) == 0x000008, "Wrong size on RBPawn_Event_HealthUpdated");
static_assert(offsetof(RBPawn_Event_HealthUpdated, NewHealth) == 0x000000, "Member 'RBPawn_Event_HealthUpdated::NewHealth' has a wrong offset!");
static_assert(offsetof(RBPawn_Event_HealthUpdated, bIncreased) == 0x000004, "Member 'RBPawn_Event_HealthUpdated::bIncreased' has a wrong offset!");

// Function OPP.RBPawn.Event_OnFootstep
// 0x0028 (0x0028 - 0x0000)
struct RBPawn_Event_OnFootstep final
{
public:
	struct FFootstepData                          FootstepData;                                      // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Event_OnFootstep) == 0x000008, "Wrong alignment on RBPawn_Event_OnFootstep");
static_assert(sizeof(RBPawn_Event_OnFootstep) == 0x000028, "Wrong size on RBPawn_Event_OnFootstep");
static_assert(offsetof(RBPawn_Event_OnFootstep, FootstepData) == 0x000000, "Member 'RBPawn_Event_OnFootstep::FootstepData' has a wrong offset!");

// Function OPP.RBPawn.Event_OnTakeDamage
// 0x0050 (0x0050 - 0x0000)
struct RBPawn_Event_OnTakeDamage final
{
public:
	struct FDamageInfo                            Info;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Event_OnTakeDamage) == 0x000008, "Wrong alignment on RBPawn_Event_OnTakeDamage");
static_assert(sizeof(RBPawn_Event_OnTakeDamage) == 0x000050, "Wrong size on RBPawn_Event_OnTakeDamage");
static_assert(offsetof(RBPawn_Event_OnTakeDamage, Info) == 0x000000, "Member 'RBPawn_Event_OnTakeDamage::Info' has a wrong offset!");

// Function OPP.RBPawn.GetFacePoseAsset
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_GetFacePoseAsset final
{
public:
	class UPoseAsset*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_GetFacePoseAsset) == 0x000008, "Wrong alignment on RBPawn_GetFacePoseAsset");
static_assert(sizeof(RBPawn_GetFacePoseAsset) == 0x000008, "Wrong size on RBPawn_GetFacePoseAsset");
static_assert(offsetof(RBPawn_GetFacePoseAsset, ReturnValue) == 0x000000, "Member 'RBPawn_GetFacePoseAsset::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.GhostAnimTransition
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_GhostAnimTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_GhostAnimTransition) == 0x000001, "Wrong alignment on RBPawn_GhostAnimTransition");
static_assert(sizeof(RBPawn_GhostAnimTransition) == 0x000001, "Wrong size on RBPawn_GhostAnimTransition");
static_assert(offsetof(RBPawn_GhostAnimTransition, ReturnValue) == 0x000000, "Member 'RBPawn_GhostAnimTransition::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.Multicast_AddExternalImpulse
// 0x000C (0x000C - 0x0000)
struct RBPawn_Multicast_AddExternalImpulse final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_AddExternalImpulse) == 0x000004, "Wrong alignment on RBPawn_Multicast_AddExternalImpulse");
static_assert(sizeof(RBPawn_Multicast_AddExternalImpulse) == 0x00000C, "Wrong size on RBPawn_Multicast_AddExternalImpulse");
static_assert(offsetof(RBPawn_Multicast_AddExternalImpulse, Impulse) == 0x000000, "Member 'RBPawn_Multicast_AddExternalImpulse::Impulse' has a wrong offset!");

// Function OPP.RBPawn.Multicast_AddServerBreadcrumb
// 0x0024 (0x0024 - 0x0000)
struct RBPawn_Multicast_AddServerBreadcrumb final
{
public:
	struct FPawnBreadcrumb                        NewBreadcrumb;                                     // 0x0000(0x0024)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_AddServerBreadcrumb) == 0x000004, "Wrong alignment on RBPawn_Multicast_AddServerBreadcrumb");
static_assert(sizeof(RBPawn_Multicast_AddServerBreadcrumb) == 0x000024, "Wrong size on RBPawn_Multicast_AddServerBreadcrumb");
static_assert(offsetof(RBPawn_Multicast_AddServerBreadcrumb, NewBreadcrumb) == 0x000000, "Member 'RBPawn_Multicast_AddServerBreadcrumb::NewBreadcrumb' has a wrong offset!");

// Function OPP.RBPawn.Multicast_BashBreakableObstacle
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_Multicast_BashBreakableObstacle final
{
public:
	class ARBBreakableObstacle*                   breakableObstacle;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_BashBreakableObstacle) == 0x000008, "Wrong alignment on RBPawn_Multicast_BashBreakableObstacle");
static_assert(sizeof(RBPawn_Multicast_BashBreakableObstacle) == 0x000008, "Wrong size on RBPawn_Multicast_BashBreakableObstacle");
static_assert(offsetof(RBPawn_Multicast_BashBreakableObstacle, breakableObstacle) == 0x000000, "Member 'RBPawn_Multicast_BashBreakableObstacle::breakableObstacle' has a wrong offset!");

// Function OPP.RBPawn.Multicast_BlendOutActiveSpecialMove
// 0x000C (0x000C - 0x0000)
struct RBPawn_Multicast_BlendOutActiveSpecialMove final
{
public:
	float                                         blendOutTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialMoveIndex;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9E[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_Multicast_BlendOutActiveSpecialMove) == 0x000004, "Wrong alignment on RBPawn_Multicast_BlendOutActiveSpecialMove");
static_assert(sizeof(RBPawn_Multicast_BlendOutActiveSpecialMove) == 0x00000C, "Wrong size on RBPawn_Multicast_BlendOutActiveSpecialMove");
static_assert(offsetof(RBPawn_Multicast_BlendOutActiveSpecialMove, blendOutTime) == 0x000000, "Member 'RBPawn_Multicast_BlendOutActiveSpecialMove::blendOutTime' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_BlendOutActiveSpecialMove, SpecialMoveIndex) == 0x000004, "Member 'RBPawn_Multicast_BlendOutActiveSpecialMove::SpecialMoveIndex' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_BlendOutActiveSpecialMove, SpecialMove) == 0x000008, "Member 'RBPawn_Multicast_BlendOutActiveSpecialMove::SpecialMove' has a wrong offset!");

// Function OPP.RBPawn.Multicast_DoActionBashDoor
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_Multicast_DoActionBashDoor final
{
public:
	class ARBDoor*                                Door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_DoActionBashDoor) == 0x000008, "Wrong alignment on RBPawn_Multicast_DoActionBashDoor");
static_assert(sizeof(RBPawn_Multicast_DoActionBashDoor) == 0x000008, "Wrong size on RBPawn_Multicast_DoActionBashDoor");
static_assert(offsetof(RBPawn_Multicast_DoActionBashDoor, Door) == 0x000000, "Member 'RBPawn_Multicast_DoActionBashDoor::Door' has a wrong offset!");

// Function OPP.RBPawn.Multicast_KnockbackPawn
// 0x0010 (0x0010 - 0x0000)
struct RBPawn_Multicast_KnockbackPawn final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_KnockbackPawn) == 0x000004, "Wrong alignment on RBPawn_Multicast_KnockbackPawn");
static_assert(sizeof(RBPawn_Multicast_KnockbackPawn) == 0x000010, "Wrong size on RBPawn_Multicast_KnockbackPawn");
static_assert(offsetof(RBPawn_Multicast_KnockbackPawn, Direction) == 0x000000, "Member 'RBPawn_Multicast_KnockbackPawn::Direction' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_KnockbackPawn, Strength) == 0x00000C, "Member 'RBPawn_Multicast_KnockbackPawn::Strength' has a wrong offset!");

// Function OPP.RBPawn.Multicast_OnDie
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_Multicast_OnDie final
{
public:
	class ARBPawn*                                Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_OnDie) == 0x000008, "Wrong alignment on RBPawn_Multicast_OnDie");
static_assert(sizeof(RBPawn_Multicast_OnDie) == 0x000008, "Wrong size on RBPawn_Multicast_OnDie");
static_assert(offsetof(RBPawn_Multicast_OnDie, Killer) == 0x000000, "Member 'RBPawn_Multicast_OnDie::Killer' has a wrong offset!");

// Function OPP.RBPawn.Multicast_OnTakeDamage
// 0x0050 (0x0050 - 0x0000)
struct RBPawn_Multicast_OnTakeDamage final
{
public:
	struct FDamageInfo                            DmgInfo;                                           // 0x0000(0x0050)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_OnTakeDamage) == 0x000008, "Wrong alignment on RBPawn_Multicast_OnTakeDamage");
static_assert(sizeof(RBPawn_Multicast_OnTakeDamage) == 0x000050, "Wrong size on RBPawn_Multicast_OnTakeDamage");
static_assert(offsetof(RBPawn_Multicast_OnTakeDamage, DmgInfo) == 0x000000, "Member 'RBPawn_Multicast_OnTakeDamage::DmgInfo' has a wrong offset!");

// Function OPP.RBPawn.Multicast_QueueProceduralAnim
// 0x003C (0x003C - 0x0000)
struct RBPawn_Multicast_QueueProceduralAnim final
{
public:
	struct FProceduralTranslationAnimData         AnimData;                                          // 0x0000(0x003C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_QueueProceduralAnim) == 0x000004, "Wrong alignment on RBPawn_Multicast_QueueProceduralAnim");
static_assert(sizeof(RBPawn_Multicast_QueueProceduralAnim) == 0x00003C, "Wrong size on RBPawn_Multicast_QueueProceduralAnim");
static_assert(offsetof(RBPawn_Multicast_QueueProceduralAnim, AnimData) == 0x000000, "Member 'RBPawn_Multicast_QueueProceduralAnim::AnimData' has a wrong offset!");

// Function OPP.RBPawn.Multicast_ScheduleBlendOutControl
// 0x0020 (0x0020 - 0x0000)
struct RBPawn_Multicast_ScheduleBlendOutControl final
{
public:
	struct FScheduledSpecialMoveBlendOut          Param_ScheduledSpecialMoveBlendOut;                // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_ScheduleBlendOutControl) == 0x000004, "Wrong alignment on RBPawn_Multicast_ScheduleBlendOutControl");
static_assert(sizeof(RBPawn_Multicast_ScheduleBlendOutControl) == 0x000020, "Wrong size on RBPawn_Multicast_ScheduleBlendOutControl");
static_assert(offsetof(RBPawn_Multicast_ScheduleBlendOutControl, Param_ScheduledSpecialMoveBlendOut) == 0x000000, "Member 'RBPawn_Multicast_ScheduleBlendOutControl::Param_ScheduledSpecialMoveBlendOut' has a wrong offset!");

// Function OPP.RBPawn.Multicast_ScheduleCompleteSpecialMove
// 0x0014 (0x0014 - 0x0000)
struct RBPawn_Multicast_ScheduleCompleteSpecialMove final
{
public:
	float                                         PawnTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTime;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9F[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpecialMoveSubType;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA0[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_Multicast_ScheduleCompleteSpecialMove) == 0x000004, "Wrong alignment on RBPawn_Multicast_ScheduleCompleteSpecialMove");
static_assert(sizeof(RBPawn_Multicast_ScheduleCompleteSpecialMove) == 0x000014, "Wrong size on RBPawn_Multicast_ScheduleCompleteSpecialMove");
static_assert(offsetof(RBPawn_Multicast_ScheduleCompleteSpecialMove, PawnTime) == 0x000000, "Member 'RBPawn_Multicast_ScheduleCompleteSpecialMove::PawnTime' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_ScheduleCompleteSpecialMove, ServerTime) == 0x000004, "Member 'RBPawn_Multicast_ScheduleCompleteSpecialMove::ServerTime' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_ScheduleCompleteSpecialMove, SpecialMove) == 0x000008, "Member 'RBPawn_Multicast_ScheduleCompleteSpecialMove::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_ScheduleCompleteSpecialMove, SpecialMoveSubType) == 0x00000C, "Member 'RBPawn_Multicast_ScheduleCompleteSpecialMove::SpecialMoveSubType' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_ScheduleCompleteSpecialMove, bInterrupted) == 0x000010, "Member 'RBPawn_Multicast_ScheduleCompleteSpecialMove::bInterrupted' has a wrong offset!");

// Function OPP.RBPawn.Multicast_ScheduleLocomotionMode
// 0x000C (0x000C - 0x0000)
struct RBPawn_Multicast_ScheduleLocomotionMode final
{
public:
	ELocomotionMode                               NewLocomotionMode;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PawnTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_ScheduleLocomotionMode) == 0x000004, "Wrong alignment on RBPawn_Multicast_ScheduleLocomotionMode");
static_assert(sizeof(RBPawn_Multicast_ScheduleLocomotionMode) == 0x00000C, "Wrong size on RBPawn_Multicast_ScheduleLocomotionMode");
static_assert(offsetof(RBPawn_Multicast_ScheduleLocomotionMode, NewLocomotionMode) == 0x000000, "Member 'RBPawn_Multicast_ScheduleLocomotionMode::NewLocomotionMode' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_ScheduleLocomotionMode, PawnTime) == 0x000004, "Member 'RBPawn_Multicast_ScheduleLocomotionMode::PawnTime' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_ScheduleLocomotionMode, ServerTime) == 0x000008, "Member 'RBPawn_Multicast_ScheduleLocomotionMode::ServerTime' has a wrong offset!");

// Function OPP.RBPawn.Multicast_ScheduleSpecialMove
// 0x0070 (0x0070 - 0x0000)
struct RBPawn_Multicast_ScheduleSpecialMove final
{
public:
	struct FScheduledSpecialMoveData              ScheduledSpecialMoveData;                          // 0x0000(0x0070)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_ScheduleSpecialMove) == 0x000008, "Wrong alignment on RBPawn_Multicast_ScheduleSpecialMove");
static_assert(sizeof(RBPawn_Multicast_ScheduleSpecialMove) == 0x000070, "Wrong size on RBPawn_Multicast_ScheduleSpecialMove");
static_assert(offsetof(RBPawn_Multicast_ScheduleSpecialMove, ScheduledSpecialMoveData) == 0x000000, "Member 'RBPawn_Multicast_ScheduleSpecialMove::ScheduledSpecialMoveData' has a wrong offset!");

// Function OPP.RBPawn.Multicast_SetCurrentInteractable
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_Multicast_SetCurrentInteractable final
{
public:
	class UObject*                                NewCurrentInteractable;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_SetCurrentInteractable) == 0x000008, "Wrong alignment on RBPawn_Multicast_SetCurrentInteractable");
static_assert(sizeof(RBPawn_Multicast_SetCurrentInteractable) == 0x000008, "Wrong size on RBPawn_Multicast_SetCurrentInteractable");
static_assert(offsetof(RBPawn_Multicast_SetCurrentInteractable, NewCurrentInteractable) == 0x000000, "Member 'RBPawn_Multicast_SetCurrentInteractable::NewCurrentInteractable' has a wrong offset!");

// Function OPP.RBPawn.Multicast_SetFinishedGhostReason
// 0x000C (0x000C - 0x0000)
struct RBPawn_Multicast_SetFinishedGhostReason final
{
public:
	EGhostFinishReason                            FinishReason;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomFinishReason;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredicted;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA3[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_Multicast_SetFinishedGhostReason) == 0x000004, "Wrong alignment on RBPawn_Multicast_SetFinishedGhostReason");
static_assert(sizeof(RBPawn_Multicast_SetFinishedGhostReason) == 0x00000C, "Wrong size on RBPawn_Multicast_SetFinishedGhostReason");
static_assert(offsetof(RBPawn_Multicast_SetFinishedGhostReason, FinishReason) == 0x000000, "Member 'RBPawn_Multicast_SetFinishedGhostReason::FinishReason' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_SetFinishedGhostReason, CustomFinishReason) == 0x000004, "Member 'RBPawn_Multicast_SetFinishedGhostReason::CustomFinishReason' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_SetFinishedGhostReason, bPredicted) == 0x000008, "Member 'RBPawn_Multicast_SetFinishedGhostReason::bPredicted' has a wrong offset!");

// Function OPP.RBPawn.Multicast_SetPairedPawn
// 0x0010 (0x0010 - 0x0000)
struct RBPawn_Multicast_SetPairedPawn final
{
public:
	class ARBPawn*                                Param_PairedPawn;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPairedPawnIsLeader;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_Multicast_SetPairedPawn) == 0x000008, "Wrong alignment on RBPawn_Multicast_SetPairedPawn");
static_assert(sizeof(RBPawn_Multicast_SetPairedPawn) == 0x000010, "Wrong size on RBPawn_Multicast_SetPairedPawn");
static_assert(offsetof(RBPawn_Multicast_SetPairedPawn, Param_PairedPawn) == 0x000000, "Member 'RBPawn_Multicast_SetPairedPawn::Param_PairedPawn' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_SetPairedPawn, bPairedPawnIsLeader) == 0x000008, "Member 'RBPawn_Multicast_SetPairedPawn::bPairedPawnIsLeader' has a wrong offset!");

// Function OPP.RBPawn.Multicast_SetSpecialMoveInterruptedLocomotionMode
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode final
{
public:
	int32                                         SpecialMoveIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELocomotionMode                               NextLocomotionMode;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA5[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode) == 0x000004, "Wrong alignment on RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode");
static_assert(sizeof(RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode) == 0x000008, "Wrong size on RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode");
static_assert(offsetof(RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode, SpecialMoveIndex) == 0x000000, "Member 'RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode::SpecialMoveIndex' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode, SpecialMove) == 0x000004, "Member 'RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode, NextLocomotionMode) == 0x000005, "Member 'RBPawn_Multicast_SetSpecialMoveInterruptedLocomotionMode::NextLocomotionMode' has a wrong offset!");

// Function OPP.RBPawn.Multicast_SetSpecialMoveNextLocomotionMode
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_Multicast_SetSpecialMoveNextLocomotionMode final
{
public:
	int32                                         SpecialMoveIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELocomotionMode                               NextLocomotionMode;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA6[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_Multicast_SetSpecialMoveNextLocomotionMode) == 0x000004, "Wrong alignment on RBPawn_Multicast_SetSpecialMoveNextLocomotionMode");
static_assert(sizeof(RBPawn_Multicast_SetSpecialMoveNextLocomotionMode) == 0x000008, "Wrong size on RBPawn_Multicast_SetSpecialMoveNextLocomotionMode");
static_assert(offsetof(RBPawn_Multicast_SetSpecialMoveNextLocomotionMode, SpecialMoveIndex) == 0x000000, "Member 'RBPawn_Multicast_SetSpecialMoveNextLocomotionMode::SpecialMoveIndex' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_SetSpecialMoveNextLocomotionMode, SpecialMove) == 0x000004, "Member 'RBPawn_Multicast_SetSpecialMoveNextLocomotionMode::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_SetSpecialMoveNextLocomotionMode, NextLocomotionMode) == 0x000005, "Member 'RBPawn_Multicast_SetSpecialMoveNextLocomotionMode::NextLocomotionMode' has a wrong offset!");

// Function OPP.RBPawn.Multicast_SpecialMoveInterrupted
// 0x0002 (0x0002 - 0x0000)
struct RBPawn_Multicast_SpecialMoveInterrupted final
{
public:
	ESpecialMove                                  SpecialMoveInterrupted;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredicted;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_SpecialMoveInterrupted) == 0x000001, "Wrong alignment on RBPawn_Multicast_SpecialMoveInterrupted");
static_assert(sizeof(RBPawn_Multicast_SpecialMoveInterrupted) == 0x000002, "Wrong size on RBPawn_Multicast_SpecialMoveInterrupted");
static_assert(offsetof(RBPawn_Multicast_SpecialMoveInterrupted, SpecialMoveInterrupted) == 0x000000, "Member 'RBPawn_Multicast_SpecialMoveInterrupted::SpecialMoveInterrupted' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_SpecialMoveInterrupted, bPredicted) == 0x000001, "Member 'RBPawn_Multicast_SpecialMoveInterrupted::bPredicted' has a wrong offset!");

// Function OPP.RBPawn.Multicast_StartBashDoor
// 0x0018 (0x0018 - 0x0000)
struct RBPawn_Multicast_StartBashDoor final
{
public:
	class ARBDoor*                                Door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBashDoorType                                 bashType;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredicted;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA7[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartCharLocation;                                 // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_StartBashDoor) == 0x000008, "Wrong alignment on RBPawn_Multicast_StartBashDoor");
static_assert(sizeof(RBPawn_Multicast_StartBashDoor) == 0x000018, "Wrong size on RBPawn_Multicast_StartBashDoor");
static_assert(offsetof(RBPawn_Multicast_StartBashDoor, Door) == 0x000000, "Member 'RBPawn_Multicast_StartBashDoor::Door' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartBashDoor, bashType) == 0x000008, "Member 'RBPawn_Multicast_StartBashDoor::bashType' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartBashDoor, bPredicted) == 0x000009, "Member 'RBPawn_Multicast_StartBashDoor::bPredicted' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartBashDoor, StartCharLocation) == 0x00000C, "Member 'RBPawn_Multicast_StartBashDoor::StartCharLocation' has a wrong offset!");

// Function OPP.RBPawn.Multicast_StartDoorInteraction
// 0x0010 (0x0010 - 0x0000)
struct RBPawn_Multicast_StartDoorInteraction final
{
public:
	class ARBDoor*                                Door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDoorInteractionType                          DoorInteractionType;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_Multicast_StartDoorInteraction) == 0x000008, "Wrong alignment on RBPawn_Multicast_StartDoorInteraction");
static_assert(sizeof(RBPawn_Multicast_StartDoorInteraction) == 0x000010, "Wrong size on RBPawn_Multicast_StartDoorInteraction");
static_assert(offsetof(RBPawn_Multicast_StartDoorInteraction, Door) == 0x000000, "Member 'RBPawn_Multicast_StartDoorInteraction::Door' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartDoorInteraction, DoorInteractionType) == 0x000008, "Member 'RBPawn_Multicast_StartDoorInteraction::DoorInteractionType' has a wrong offset!");

// Function OPP.RBPawn.Multicast_StartPairedMove
// 0x0058 (0x0058 - 0x0000)
struct RBPawn_Multicast_StartPairedMove final
{
public:
	class ARBPawn*                                Param_PairedPawn;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpecialMoveMulticastData              SpecialMoveData;                                   // 0x0008(0x0048)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPairedPawnIsLeader;                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBasicDirection                               Direction;                                         // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DA9[0x6];                                     // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_Multicast_StartPairedMove) == 0x000008, "Wrong alignment on RBPawn_Multicast_StartPairedMove");
static_assert(sizeof(RBPawn_Multicast_StartPairedMove) == 0x000058, "Wrong size on RBPawn_Multicast_StartPairedMove");
static_assert(offsetof(RBPawn_Multicast_StartPairedMove, Param_PairedPawn) == 0x000000, "Member 'RBPawn_Multicast_StartPairedMove::Param_PairedPawn' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartPairedMove, SpecialMoveData) == 0x000008, "Member 'RBPawn_Multicast_StartPairedMove::SpecialMoveData' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartPairedMove, bPairedPawnIsLeader) == 0x000050, "Member 'RBPawn_Multicast_StartPairedMove::bPairedPawnIsLeader' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartPairedMove, Direction) == 0x000051, "Member 'RBPawn_Multicast_StartPairedMove::Direction' has a wrong offset!");

// Function OPP.RBPawn.Multicast_StartScriptedAnimation
// 0x0090 (0x0090 - 0x0000)
struct RBPawn_Multicast_StartScriptedAnimation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBAnimRef                             Animation;                                         // 0x0018(0x0030)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ScriptedAttachName;                                // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Param_ScriptedAttachActor;                         // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAA[0x8];                                     // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ScriptedAttachOffset;                              // 0x0060(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_StartScriptedAnimation) == 0x000010, "Wrong alignment on RBPawn_Multicast_StartScriptedAnimation");
static_assert(sizeof(RBPawn_Multicast_StartScriptedAnimation) == 0x000090, "Wrong size on RBPawn_Multicast_StartScriptedAnimation");
static_assert(offsetof(RBPawn_Multicast_StartScriptedAnimation, Location) == 0x000000, "Member 'RBPawn_Multicast_StartScriptedAnimation::Location' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartScriptedAnimation, Forward) == 0x00000C, "Member 'RBPawn_Multicast_StartScriptedAnimation::Forward' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartScriptedAnimation, Animation) == 0x000018, "Member 'RBPawn_Multicast_StartScriptedAnimation::Animation' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartScriptedAnimation, ScriptedAttachName) == 0x000048, "Member 'RBPawn_Multicast_StartScriptedAnimation::ScriptedAttachName' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartScriptedAnimation, Param_ScriptedAttachActor) == 0x000050, "Member 'RBPawn_Multicast_StartScriptedAnimation::Param_ScriptedAttachActor' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_StartScriptedAnimation, ScriptedAttachOffset) == 0x000060, "Member 'RBPawn_Multicast_StartScriptedAnimation::ScriptedAttachOffset' has a wrong offset!");

// Function OPP.RBPawn.Multicast_StartSpecialMove
// 0x0048 (0x0048 - 0x0000)
struct RBPawn_Multicast_StartSpecialMove final
{
public:
	struct FSpecialMoveMulticastData              SpecialMoveData;                                   // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_StartSpecialMove) == 0x000008, "Wrong alignment on RBPawn_Multicast_StartSpecialMove");
static_assert(sizeof(RBPawn_Multicast_StartSpecialMove) == 0x000048, "Wrong size on RBPawn_Multicast_StartSpecialMove");
static_assert(offsetof(RBPawn_Multicast_StartSpecialMove, SpecialMoveData) == 0x000000, "Member 'RBPawn_Multicast_StartSpecialMove::SpecialMoveData' has a wrong offset!");

// Function OPP.RBPawn.Multicast_SwitchLocomotionMode
// 0x0002 (0x0002 - 0x0000)
struct RBPawn_Multicast_SwitchLocomotionMode final
{
public:
	ELocomotionMode                               NewLocomotionMode;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPredicted;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_SwitchLocomotionMode) == 0x000001, "Wrong alignment on RBPawn_Multicast_SwitchLocomotionMode");
static_assert(sizeof(RBPawn_Multicast_SwitchLocomotionMode) == 0x000002, "Wrong size on RBPawn_Multicast_SwitchLocomotionMode");
static_assert(offsetof(RBPawn_Multicast_SwitchLocomotionMode, NewLocomotionMode) == 0x000000, "Member 'RBPawn_Multicast_SwitchLocomotionMode::NewLocomotionMode' has a wrong offset!");
static_assert(offsetof(RBPawn_Multicast_SwitchLocomotionMode, bPredicted) == 0x000001, "Member 'RBPawn_Multicast_SwitchLocomotionMode::bPredicted' has a wrong offset!");

// Function OPP.RBPawn.Multicast_TraversalSlideDone
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_Multicast_TraversalSlideDone final
{
public:
	bool                                          bHitWall;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Multicast_TraversalSlideDone) == 0x000001, "Wrong alignment on RBPawn_Multicast_TraversalSlideDone");
static_assert(sizeof(RBPawn_Multicast_TraversalSlideDone) == 0x000001, "Wrong size on RBPawn_Multicast_TraversalSlideDone");
static_assert(offsetof(RBPawn_Multicast_TraversalSlideDone, bHitWall) == 0x000000, "Member 'RBPawn_Multicast_TraversalSlideDone::bHitWall' has a wrong offset!");

// Function OPP.RBPawn.OnCurrentInteractableChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_OnCurrentInteractableChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_OnCurrentInteractableChangedCallback) == 0x000001, "Wrong alignment on RBPawn_OnCurrentInteractableChangedCallback");
static_assert(sizeof(RBPawn_OnCurrentInteractableChangedCallback) == 0x000001, "Wrong size on RBPawn_OnCurrentInteractableChangedCallback");
static_assert(offsetof(RBPawn_OnCurrentInteractableChangedCallback, ChangedType) == 0x000000, "Member 'RBPawn_OnCurrentInteractableChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPawn.OnDamageVolumeHit
// 0x00A8 (0x00A8 - 0x0000)
struct RBPawn_OnDamageVolumeHit final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_OnDamageVolumeHit) == 0x000008, "Wrong alignment on RBPawn_OnDamageVolumeHit");
static_assert(sizeof(RBPawn_OnDamageVolumeHit) == 0x0000A8, "Wrong size on RBPawn_OnDamageVolumeHit");
static_assert(offsetof(RBPawn_OnDamageVolumeHit, OverlappedComponent) == 0x000000, "Member 'RBPawn_OnDamageVolumeHit::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBPawn_OnDamageVolumeHit, OtherActor) == 0x000008, "Member 'RBPawn_OnDamageVolumeHit::OtherActor' has a wrong offset!");
static_assert(offsetof(RBPawn_OnDamageVolumeHit, OtherComp) == 0x000010, "Member 'RBPawn_OnDamageVolumeHit::OtherComp' has a wrong offset!");
static_assert(offsetof(RBPawn_OnDamageVolumeHit, OtherBodyIndex) == 0x000018, "Member 'RBPawn_OnDamageVolumeHit::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBPawn_OnDamageVolumeHit, bFromSweep) == 0x00001C, "Member 'RBPawn_OnDamageVolumeHit::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBPawn_OnDamageVolumeHit, SweepResult) == 0x000020, "Member 'RBPawn_OnDamageVolumeHit::SweepResult' has a wrong offset!");

// Function OPP.RBPawn.OnFootstep
// 0x0010 (0x0010 - 0x0000)
struct RBPawn_OnFootstep final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftFoot;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_OnFootstep) == 0x000008, "Wrong alignment on RBPawn_OnFootstep");
static_assert(sizeof(RBPawn_OnFootstep) == 0x000010, "Wrong size on RBPawn_OnFootstep");
static_assert(offsetof(RBPawn_OnFootstep, MeshComp) == 0x000000, "Member 'RBPawn_OnFootstep::MeshComp' has a wrong offset!");
static_assert(offsetof(RBPawn_OnFootstep, bLeftFoot) == 0x000008, "Member 'RBPawn_OnFootstep::bLeftFoot' has a wrong offset!");

// Function OPP.RBPawn.OnRep_Health
// 0x0004 (0x0004 - 0x0000)
struct RBPawn_OnRep_Health final
{
public:
	int32                                         OldHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_OnRep_Health) == 0x000004, "Wrong alignment on RBPawn_OnRep_Health");
static_assert(sizeof(RBPawn_OnRep_Health) == 0x000004, "Wrong size on RBPawn_OnRep_Health");
static_assert(offsetof(RBPawn_OnRep_Health, OldHealth) == 0x000000, "Member 'RBPawn_OnRep_Health::OldHealth' has a wrong offset!");

// Function OPP.RBPawn.OnRep_PairedPawn
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_OnRep_PairedPawn final
{
public:
	class ARBPawn*                                OldPairedPawn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_OnRep_PairedPawn) == 0x000008, "Wrong alignment on RBPawn_OnRep_PairedPawn");
static_assert(sizeof(RBPawn_OnRep_PairedPawn) == 0x000008, "Wrong size on RBPawn_OnRep_PairedPawn");
static_assert(offsetof(RBPawn_OnRep_PairedPawn, OldPairedPawn) == 0x000000, "Member 'RBPawn_OnRep_PairedPawn::OldPairedPawn' has a wrong offset!");

// Function OPP.RBPawn.RemoveForcedDarknessSource_Server
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_RemoveForcedDarknessSource_Server final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_RemoveForcedDarknessSource_Server) == 0x000008, "Wrong alignment on RBPawn_RemoveForcedDarknessSource_Server");
static_assert(sizeof(RBPawn_RemoveForcedDarknessSource_Server) == 0x000008, "Wrong size on RBPawn_RemoveForcedDarknessSource_Server");
static_assert(offsetof(RBPawn_RemoveForcedDarknessSource_Server, Source) == 0x000000, "Member 'RBPawn_RemoveForcedDarknessSource_Server::Source' has a wrong offset!");

// Function OPP.RBPawn.Server_SetFinishedGhostReason
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_Server_SetFinishedGhostReason final
{
public:
	EGhostFinishReason                            FinishReason;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomFinishReason;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_Server_SetFinishedGhostReason) == 0x000004, "Wrong alignment on RBPawn_Server_SetFinishedGhostReason");
static_assert(sizeof(RBPawn_Server_SetFinishedGhostReason) == 0x000008, "Wrong size on RBPawn_Server_SetFinishedGhostReason");
static_assert(offsetof(RBPawn_Server_SetFinishedGhostReason, FinishReason) == 0x000000, "Member 'RBPawn_Server_SetFinishedGhostReason::FinishReason' has a wrong offset!");
static_assert(offsetof(RBPawn_Server_SetFinishedGhostReason, CustomFinishReason) == 0x000004, "Member 'RBPawn_Server_SetFinishedGhostReason::CustomFinishReason' has a wrong offset!");

// Function OPP.RBPawn.SpecialMoveNotify
// 0x0010 (0x0010 - 0x0000)
struct RBPawn_SpecialMoveNotify final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAnimNotify_SpecialMove*              AnimNotify;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_SpecialMoveNotify) == 0x000008, "Wrong alignment on RBPawn_SpecialMoveNotify");
static_assert(sizeof(RBPawn_SpecialMoveNotify) == 0x000010, "Wrong size on RBPawn_SpecialMoveNotify");
static_assert(offsetof(RBPawn_SpecialMoveNotify, MeshComp) == 0x000000, "Member 'RBPawn_SpecialMoveNotify::MeshComp' has a wrong offset!");
static_assert(offsetof(RBPawn_SpecialMoveNotify, AnimNotify) == 0x000008, "Member 'RBPawn_SpecialMoveNotify::AnimNotify' has a wrong offset!");

// Function OPP.RBPawn.StartGhostAnimState
// 0x0010 (0x0010 - 0x0000)
struct RBPawn_StartGhostAnimState final
{
public:
	TSubclassOf<class URBGhostAnimInstance>       AnimInstanceClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAE[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_StartGhostAnimState) == 0x000008, "Wrong alignment on RBPawn_StartGhostAnimState");
static_assert(sizeof(RBPawn_StartGhostAnimState) == 0x000010, "Wrong size on RBPawn_StartGhostAnimState");
static_assert(offsetof(RBPawn_StartGhostAnimState, AnimInstanceClass) == 0x000000, "Member 'RBPawn_StartGhostAnimState::AnimInstanceClass' has a wrong offset!");
static_assert(offsetof(RBPawn_StartGhostAnimState, blendTime) == 0x000008, "Member 'RBPawn_StartGhostAnimState::blendTime' has a wrong offset!");

// Function OPP.RBPawn.StopGhostAnimState
// 0x0004 (0x0004 - 0x0000)
struct RBPawn_StopGhostAnimState final
{
public:
	float                                         blendTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_StopGhostAnimState) == 0x000004, "Wrong alignment on RBPawn_StopGhostAnimState");
static_assert(sizeof(RBPawn_StopGhostAnimState) == 0x000004, "Wrong size on RBPawn_StopGhostAnimState");
static_assert(offsetof(RBPawn_StopGhostAnimState, blendTime) == 0x000000, "Member 'RBPawn_StopGhostAnimState::blendTime' has a wrong offset!");

// Function OPP.RBPawn.TraversalNotify
// 0x0018 (0x0018 - 0x0000)
struct RBPawn_TraversalNotify final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAnimNotify_Traversal*                AnimNotify;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      AnimationSequenceBase;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_TraversalNotify) == 0x000008, "Wrong alignment on RBPawn_TraversalNotify");
static_assert(sizeof(RBPawn_TraversalNotify) == 0x000018, "Wrong size on RBPawn_TraversalNotify");
static_assert(offsetof(RBPawn_TraversalNotify, MeshComp) == 0x000000, "Member 'RBPawn_TraversalNotify::MeshComp' has a wrong offset!");
static_assert(offsetof(RBPawn_TraversalNotify, AnimNotify) == 0x000008, "Member 'RBPawn_TraversalNotify::AnimNotify' has a wrong offset!");
static_assert(offsetof(RBPawn_TraversalNotify, AnimationSequenceBase) == 0x000010, "Member 'RBPawn_TraversalNotify::AnimationSequenceBase' has a wrong offset!");

// Function OPP.RBPawn.TryPlayFacialAnim_Pawn
// 0x0018 (0x0018 - 0x0000)
struct RBPawn_TryPlayFacialAnim_Pawn final
{
public:
	class FString                                 LineId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DAF[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawn_TryPlayFacialAnim_Pawn) == 0x000008, "Wrong alignment on RBPawn_TryPlayFacialAnim_Pawn");
static_assert(sizeof(RBPawn_TryPlayFacialAnim_Pawn) == 0x000018, "Wrong size on RBPawn_TryPlayFacialAnim_Pawn");
static_assert(offsetof(RBPawn_TryPlayFacialAnim_Pawn, LineId) == 0x000000, "Member 'RBPawn_TryPlayFacialAnim_Pawn::LineId' has a wrong offset!");
static_assert(offsetof(RBPawn_TryPlayFacialAnim_Pawn, ReturnValue) == 0x000010, "Member 'RBPawn_TryPlayFacialAnim_Pawn::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_GetCurrentARBInteractible
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_BP_GetCurrentARBInteractible final
{
public:
	class ARBInteractible*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_GetCurrentARBInteractible) == 0x000008, "Wrong alignment on RBPawn_BP_GetCurrentARBInteractible");
static_assert(sizeof(RBPawn_BP_GetCurrentARBInteractible) == 0x000008, "Wrong size on RBPawn_BP_GetCurrentARBInteractible");
static_assert(offsetof(RBPawn_BP_GetCurrentARBInteractible, ReturnValue) == 0x000000, "Member 'RBPawn_BP_GetCurrentARBInteractible::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_GetCurrentInteractibleActor
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_BP_GetCurrentInteractibleActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_GetCurrentInteractibleActor) == 0x000008, "Wrong alignment on RBPawn_BP_GetCurrentInteractibleActor");
static_assert(sizeof(RBPawn_BP_GetCurrentInteractibleActor) == 0x000008, "Wrong size on RBPawn_BP_GetCurrentInteractibleActor");
static_assert(offsetof(RBPawn_BP_GetCurrentInteractibleActor, ReturnValue) == 0x000000, "Member 'RBPawn_BP_GetCurrentInteractibleActor::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_GetDebugPawnName
// 0x0010 (0x0010 - 0x0000)
struct RBPawn_BP_GetDebugPawnName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_GetDebugPawnName) == 0x000008, "Wrong alignment on RBPawn_BP_GetDebugPawnName");
static_assert(sizeof(RBPawn_BP_GetDebugPawnName) == 0x000010, "Wrong size on RBPawn_BP_GetDebugPawnName");
static_assert(offsetof(RBPawn_BP_GetDebugPawnName, ReturnValue) == 0x000000, "Member 'RBPawn_BP_GetDebugPawnName::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct RBPawn_BP_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_GetMaxHealth) == 0x000004, "Wrong alignment on RBPawn_BP_GetMaxHealth");
static_assert(sizeof(RBPawn_BP_GetMaxHealth) == 0x000004, "Wrong size on RBPawn_BP_GetMaxHealth");
static_assert(offsetof(RBPawn_BP_GetMaxHealth, ReturnValue) == 0x000000, "Member 'RBPawn_BP_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_GetPawnTargetForward
// 0x000C (0x000C - 0x0000)
struct RBPawn_BP_GetPawnTargetForward final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_GetPawnTargetForward) == 0x000004, "Wrong alignment on RBPawn_BP_GetPawnTargetForward");
static_assert(sizeof(RBPawn_BP_GetPawnTargetForward) == 0x00000C, "Wrong size on RBPawn_BP_GetPawnTargetForward");
static_assert(offsetof(RBPawn_BP_GetPawnTargetForward, ReturnValue) == 0x000000, "Member 'RBPawn_BP_GetPawnTargetForward::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_GetPawnTargetLocation
// 0x000C (0x000C - 0x0000)
struct RBPawn_BP_GetPawnTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_GetPawnTargetLocation) == 0x000004, "Wrong alignment on RBPawn_BP_GetPawnTargetLocation");
static_assert(sizeof(RBPawn_BP_GetPawnTargetLocation) == 0x00000C, "Wrong size on RBPawn_BP_GetPawnTargetLocation");
static_assert(offsetof(RBPawn_BP_GetPawnTargetLocation, ReturnValue) == 0x000000, "Member 'RBPawn_BP_GetPawnTargetLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_GetRandomSelector
// 0x0004 (0x0004 - 0x0000)
struct RBPawn_BP_GetRandomSelector final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_GetRandomSelector) == 0x000004, "Wrong alignment on RBPawn_BP_GetRandomSelector");
static_assert(sizeof(RBPawn_BP_GetRandomSelector) == 0x000004, "Wrong size on RBPawn_BP_GetRandomSelector");
static_assert(offsetof(RBPawn_BP_GetRandomSelector, ReturnValue) == 0x000000, "Member 'RBPawn_BP_GetRandomSelector::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_GetSpecialMove
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_BP_GetSpecialMove final
{
public:
	ESpecialMove                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_GetSpecialMove) == 0x000001, "Wrong alignment on RBPawn_BP_GetSpecialMove");
static_assert(sizeof(RBPawn_BP_GetSpecialMove) == 0x000001, "Wrong size on RBPawn_BP_GetSpecialMove");
static_assert(offsetof(RBPawn_BP_GetSpecialMove, ReturnValue) == 0x000000, "Member 'RBPawn_BP_GetSpecialMove::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_GetSpecialMoveSubtype
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_BP_GetSpecialMoveSubtype final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_GetSpecialMoveSubtype) == 0x000001, "Wrong alignment on RBPawn_BP_GetSpecialMoveSubtype");
static_assert(sizeof(RBPawn_BP_GetSpecialMoveSubtype) == 0x000001, "Wrong size on RBPawn_BP_GetSpecialMoveSubtype");
static_assert(offsetof(RBPawn_BP_GetSpecialMoveSubtype, ReturnValue) == 0x000000, "Member 'RBPawn_BP_GetSpecialMoveSubtype::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_IsConsideredCrouched
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_BP_IsConsideredCrouched final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_IsConsideredCrouched) == 0x000001, "Wrong alignment on RBPawn_BP_IsConsideredCrouched");
static_assert(sizeof(RBPawn_BP_IsConsideredCrouched) == 0x000001, "Wrong size on RBPawn_BP_IsConsideredCrouched");
static_assert(offsetof(RBPawn_BP_IsConsideredCrouched, ReturnValue) == 0x000000, "Member 'RBPawn_BP_IsConsideredCrouched::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_IsDoingSpecialMove
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_BP_IsDoingSpecialMove final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_IsDoingSpecialMove) == 0x000001, "Wrong alignment on RBPawn_BP_IsDoingSpecialMove");
static_assert(sizeof(RBPawn_BP_IsDoingSpecialMove) == 0x000001, "Wrong size on RBPawn_BP_IsDoingSpecialMove");
static_assert(offsetof(RBPawn_BP_IsDoingSpecialMove, ReturnValue) == 0x000000, "Member 'RBPawn_BP_IsDoingSpecialMove::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.BP_IsInFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_BP_IsInFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_BP_IsInFirstPerson) == 0x000001, "Wrong alignment on RBPawn_BP_IsInFirstPerson");
static_assert(sizeof(RBPawn_BP_IsInFirstPerson) == 0x000001, "Wrong size on RBPawn_BP_IsInFirstPerson");
static_assert(offsetof(RBPawn_BP_IsInFirstPerson, ReturnValue) == 0x000000, "Member 'RBPawn_BP_IsInFirstPerson::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_GetAnimInstance final
{
public:
	class URBAnimInstance*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_GetAnimInstance) == 0x000008, "Wrong alignment on RBPawn_GetAnimInstance");
static_assert(sizeof(RBPawn_GetAnimInstance) == 0x000008, "Wrong size on RBPawn_GetAnimInstance");
static_assert(offsetof(RBPawn_GetAnimInstance, ReturnValue) == 0x000000, "Member 'RBPawn_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.GetCarriedLargePickup
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_GetCarriedLargePickup final
{
public:
	class ARBLargePickup*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_GetCarriedLargePickup) == 0x000008, "Wrong alignment on RBPawn_GetCarriedLargePickup");
static_assert(sizeof(RBPawn_GetCarriedLargePickup) == 0x000008, "Wrong size on RBPawn_GetCarriedLargePickup");
static_assert(offsetof(RBPawn_GetCarriedLargePickup, ReturnValue) == 0x000000, "Member 'RBPawn_GetCarriedLargePickup::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.GetFaceFXSkeletalMeshComponentWithLineId
// 0x0018 (0x0018 - 0x0000)
struct RBPawn_GetFaceFXSkeletalMeshComponentWithLineId final
{
public:
	class FString                                 LineId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_GetFaceFXSkeletalMeshComponentWithLineId) == 0x000008, "Wrong alignment on RBPawn_GetFaceFXSkeletalMeshComponentWithLineId");
static_assert(sizeof(RBPawn_GetFaceFXSkeletalMeshComponentWithLineId) == 0x000018, "Wrong size on RBPawn_GetFaceFXSkeletalMeshComponentWithLineId");
static_assert(offsetof(RBPawn_GetFaceFXSkeletalMeshComponentWithLineId, LineId) == 0x000000, "Member 'RBPawn_GetFaceFXSkeletalMeshComponentWithLineId::LineId' has a wrong offset!");
static_assert(offsetof(RBPawn_GetFaceFXSkeletalMeshComponentWithLineId, ReturnValue) == 0x000010, "Member 'RBPawn_GetFaceFXSkeletalMeshComponentWithLineId::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.GetGhostAnimBP
// 0x0008 (0x0008 - 0x0000)
struct RBPawn_GetGhostAnimBP final
{
public:
	class URBGhostAnimInstance*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_GetGhostAnimBP) == 0x000008, "Wrong alignment on RBPawn_GetGhostAnimBP");
static_assert(sizeof(RBPawn_GetGhostAnimBP) == 0x000008, "Wrong size on RBPawn_GetGhostAnimBP");
static_assert(offsetof(RBPawn_GetGhostAnimBP, ReturnValue) == 0x000000, "Member 'RBPawn_GetGhostAnimBP::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.HasGhostAnimActive
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_HasGhostAnimActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_HasGhostAnimActive) == 0x000001, "Wrong alignment on RBPawn_HasGhostAnimActive");
static_assert(sizeof(RBPawn_HasGhostAnimActive) == 0x000001, "Wrong size on RBPawn_HasGhostAnimActive");
static_assert(offsetof(RBPawn_HasGhostAnimActive, ReturnValue) == 0x000000, "Member 'RBPawn_HasGhostAnimActive::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.HasRecentlyBeenSpawned
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_HasRecentlyBeenSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_HasRecentlyBeenSpawned) == 0x000001, "Wrong alignment on RBPawn_HasRecentlyBeenSpawned");
static_assert(sizeof(RBPawn_HasRecentlyBeenSpawned) == 0x000001, "Wrong size on RBPawn_HasRecentlyBeenSpawned");
static_assert(offsetof(RBPawn_HasRecentlyBeenSpawned, ReturnValue) == 0x000000, "Member 'RBPawn_HasRecentlyBeenSpawned::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.IsCarryingLargePickup
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_IsCarryingLargePickup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_IsCarryingLargePickup) == 0x000001, "Wrong alignment on RBPawn_IsCarryingLargePickup");
static_assert(sizeof(RBPawn_IsCarryingLargePickup) == 0x000001, "Wrong size on RBPawn_IsCarryingLargePickup");
static_assert(offsetof(RBPawn_IsCarryingLargePickup, ReturnValue) == 0x000000, "Member 'RBPawn_IsCarryingLargePickup::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.IsConsideredDead
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_IsConsideredDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_IsConsideredDead) == 0x000001, "Wrong alignment on RBPawn_IsConsideredDead");
static_assert(sizeof(RBPawn_IsConsideredDead) == 0x000001, "Wrong size on RBPawn_IsConsideredDead");
static_assert(offsetof(RBPawn_IsConsideredDead, ReturnValue) == 0x000000, "Member 'RBPawn_IsConsideredDead::ReturnValue' has a wrong offset!");

// Function OPP.RBPawn.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct RBPawn_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawn_IsRunning) == 0x000001, "Wrong alignment on RBPawn_IsRunning");
static_assert(sizeof(RBPawn_IsRunning) == 0x000001, "Wrong size on RBPawn_IsRunning");
static_assert(offsetof(RBPawn_IsRunning, ReturnValue) == 0x000000, "Member 'RBPawn_IsRunning::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.BP_DamageNPC
// 0x0018 (0x0018 - 0x0000)
struct RBNPC_BP_DamageNPC final
{
public:
	EDamageType                                   DmgType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SrcActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DmgAmount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanKill;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanKnockdown;                                     // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC9[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_BP_DamageNPC) == 0x000008, "Wrong alignment on RBNPC_BP_DamageNPC");
static_assert(sizeof(RBNPC_BP_DamageNPC) == 0x000018, "Wrong size on RBNPC_BP_DamageNPC");
static_assert(offsetof(RBNPC_BP_DamageNPC, DmgType) == 0x000000, "Member 'RBNPC_BP_DamageNPC::DmgType' has a wrong offset!");
static_assert(offsetof(RBNPC_BP_DamageNPC, SrcActor) == 0x000008, "Member 'RBNPC_BP_DamageNPC::SrcActor' has a wrong offset!");
static_assert(offsetof(RBNPC_BP_DamageNPC, DmgAmount) == 0x000010, "Member 'RBNPC_BP_DamageNPC::DmgAmount' has a wrong offset!");
static_assert(offsetof(RBNPC_BP_DamageNPC, bCanKill) == 0x000014, "Member 'RBNPC_BP_DamageNPC::bCanKill' has a wrong offset!");
static_assert(offsetof(RBNPC_BP_DamageNPC, bCanKnockdown) == 0x000015, "Member 'RBNPC_BP_DamageNPC::bCanKnockdown' has a wrong offset!");

// Function OPP.RBNPC.BP_SetVoiceType
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_BP_SetVoiceType final
{
public:
	class FString                                 Param_VoiceType;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_BP_SetVoiceType) == 0x000008, "Wrong alignment on RBNPC_BP_SetVoiceType");
static_assert(sizeof(RBNPC_BP_SetVoiceType) == 0x000010, "Wrong size on RBNPC_BP_SetVoiceType");
static_assert(offsetof(RBNPC_BP_SetVoiceType, Param_VoiceType) == 0x000000, "Member 'RBNPC_BP_SetVoiceType::Param_VoiceType' has a wrong offset!");

// Function OPP.RBNPC.BP_TeleportTo
// 0x001C (0x001C - 0x0000)
struct RBNPC_BP_TeleportTo final
{
public:
	struct FVector                                DestLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DestRotation;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNoCheck;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCA[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_BP_TeleportTo) == 0x000004, "Wrong alignment on RBNPC_BP_TeleportTo");
static_assert(sizeof(RBNPC_BP_TeleportTo) == 0x00001C, "Wrong size on RBNPC_BP_TeleportTo");
static_assert(offsetof(RBNPC_BP_TeleportTo, DestLocation) == 0x000000, "Member 'RBNPC_BP_TeleportTo::DestLocation' has a wrong offset!");
static_assert(offsetof(RBNPC_BP_TeleportTo, DestRotation) == 0x00000C, "Member 'RBNPC_BP_TeleportTo::DestRotation' has a wrong offset!");
static_assert(offsetof(RBNPC_BP_TeleportTo, bNoCheck) == 0x000018, "Member 'RBNPC_BP_TeleportTo::bNoCheck' has a wrong offset!");

// Function OPP.RBNPC.BP_TestHitReaction
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_BP_TestHitReaction final
{
public:
	ENPCHitReactionType                           HitReactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitDirection;                                      // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_BP_TestHitReaction) == 0x000004, "Wrong alignment on RBNPC_BP_TestHitReaction");
static_assert(sizeof(RBNPC_BP_TestHitReaction) == 0x000010, "Wrong size on RBNPC_BP_TestHitReaction");
static_assert(offsetof(RBNPC_BP_TestHitReaction, HitReactionType) == 0x000000, "Member 'RBNPC_BP_TestHitReaction::HitReactionType' has a wrong offset!");
static_assert(offsetof(RBNPC_BP_TestHitReaction, HitDirection) == 0x000004, "Member 'RBNPC_BP_TestHitReaction::HitDirection' has a wrong offset!");

// Function OPP.RBNPC.Event_OnAIEvent
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Event_OnAIEvent final
{
public:
	EAIEvent                                      EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RelevantActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Event_OnAIEvent) == 0x000008, "Wrong alignment on RBNPC_Event_OnAIEvent");
static_assert(sizeof(RBNPC_Event_OnAIEvent) == 0x000010, "Wrong size on RBNPC_Event_OnAIEvent");
static_assert(offsetof(RBNPC_Event_OnAIEvent, EventType) == 0x000000, "Member 'RBNPC_Event_OnAIEvent::EventType' has a wrong offset!");
static_assert(offsetof(RBNPC_Event_OnAIEvent, RelevantActor) == 0x000008, "Member 'RBNPC_Event_OnAIEvent::RelevantActor' has a wrong offset!");

// Function OPP.RBNPC.Event_OnDealtUnarmedDamage
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Event_OnDealtUnarmedDamage final
{
public:
	class ARBPawn*                                OtherPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceBone;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Event_OnDealtUnarmedDamage) == 0x000008, "Wrong alignment on RBNPC_Event_OnDealtUnarmedDamage");
static_assert(sizeof(RBNPC_Event_OnDealtUnarmedDamage) == 0x000010, "Wrong size on RBNPC_Event_OnDealtUnarmedDamage");
static_assert(offsetof(RBNPC_Event_OnDealtUnarmedDamage, OtherPawn) == 0x000000, "Member 'RBNPC_Event_OnDealtUnarmedDamage::OtherPawn' has a wrong offset!");
static_assert(offsetof(RBNPC_Event_OnDealtUnarmedDamage, DamageSourceBone) == 0x000008, "Member 'RBNPC_Event_OnDealtUnarmedDamage::DamageSourceBone' has a wrong offset!");

// Function OPP.RBNPC.Event_OnDealtWeaponDamage
// 0x0018 (0x0018 - 0x0000)
struct RBNPC_Event_OnDealtWeaponDamage final
{
public:
	class ARBPawn*                                OtherPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageLocation;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCD[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_Event_OnDealtWeaponDamage) == 0x000008, "Wrong alignment on RBNPC_Event_OnDealtWeaponDamage");
static_assert(sizeof(RBNPC_Event_OnDealtWeaponDamage) == 0x000018, "Wrong size on RBNPC_Event_OnDealtWeaponDamage");
static_assert(offsetof(RBNPC_Event_OnDealtWeaponDamage, OtherPawn) == 0x000000, "Member 'RBNPC_Event_OnDealtWeaponDamage::OtherPawn' has a wrong offset!");
static_assert(offsetof(RBNPC_Event_OnDealtWeaponDamage, DamageLocation) == 0x000008, "Member 'RBNPC_Event_OnDealtWeaponDamage::DamageLocation' has a wrong offset!");

// Function OPP.RBNPC.Event_OnScreamerSonicStun
// 0x000C (0x000C - 0x0000)
struct RBNPC_Event_OnScreamerSonicStun final
{
public:
	struct FVector                                HeadLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Event_OnScreamerSonicStun) == 0x000004, "Wrong alignment on RBNPC_Event_OnScreamerSonicStun");
static_assert(sizeof(RBNPC_Event_OnScreamerSonicStun) == 0x00000C, "Wrong size on RBNPC_Event_OnScreamerSonicStun");
static_assert(offsetof(RBNPC_Event_OnScreamerSonicStun, HeadLocation) == 0x000000, "Member 'RBNPC_Event_OnScreamerSonicStun::HeadLocation' has a wrong offset!");

// Function OPP.RBNPC.Event_OnSpectreVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_Event_OnSpectreVisibilityChanged final
{
public:
	bool                                          bShouldBeVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Event_OnSpectreVisibilityChanged) == 0x000001, "Wrong alignment on RBNPC_Event_OnSpectreVisibilityChanged");
static_assert(sizeof(RBNPC_Event_OnSpectreVisibilityChanged) == 0x000001, "Wrong size on RBNPC_Event_OnSpectreVisibilityChanged");
static_assert(offsetof(RBNPC_Event_OnSpectreVisibilityChanged, bShouldBeVisible) == 0x000000, "Member 'RBNPC_Event_OnSpectreVisibilityChanged::bShouldBeVisible' has a wrong offset!");

// Function OPP.RBNPC.Event_OnSpectreVisualTypeChanged
// 0x0002 (0x0002 - 0x0000)
struct RBNPC_Event_OnSpectreVisualTypeChanged final
{
public:
	EAISpectreVisualType                          OldType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAISpectreVisualType                          NewType;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Event_OnSpectreVisualTypeChanged) == 0x000001, "Wrong alignment on RBNPC_Event_OnSpectreVisualTypeChanged");
static_assert(sizeof(RBNPC_Event_OnSpectreVisualTypeChanged) == 0x000002, "Wrong size on RBNPC_Event_OnSpectreVisualTypeChanged");
static_assert(offsetof(RBNPC_Event_OnSpectreVisualTypeChanged, OldType) == 0x000000, "Member 'RBNPC_Event_OnSpectreVisualTypeChanged::OldType' has a wrong offset!");
static_assert(offsetof(RBNPC_Event_OnSpectreVisualTypeChanged, NewType) == 0x000001, "Member 'RBNPC_Event_OnSpectreVisualTypeChanged::NewType' has a wrong offset!");

// Function OPP.RBNPC.Event_OnStartPusherAttack
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Event_OnStartPusherAttack final
{
public:
	class ARBPlayer*                              Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Event_OnStartPusherAttack) == 0x000008, "Wrong alignment on RBNPC_Event_OnStartPusherAttack");
static_assert(sizeof(RBNPC_Event_OnStartPusherAttack) == 0x000008, "Wrong size on RBNPC_Event_OnStartPusherAttack");
static_assert(offsetof(RBNPC_Event_OnStartPusherAttack, Victim) == 0x000000, "Member 'RBNPC_Event_OnStartPusherAttack::Victim' has a wrong offset!");

// Function OPP.RBNPC.Event_OnWeaponHidden
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Event_OnWeaponHidden final
{
public:
	ENPCWeapon                                    WeaponType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBNPCWeapon*                           WeaponActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Event_OnWeaponHidden) == 0x000008, "Wrong alignment on RBNPC_Event_OnWeaponHidden");
static_assert(sizeof(RBNPC_Event_OnWeaponHidden) == 0x000010, "Wrong size on RBNPC_Event_OnWeaponHidden");
static_assert(offsetof(RBNPC_Event_OnWeaponHidden, WeaponType) == 0x000000, "Member 'RBNPC_Event_OnWeaponHidden::WeaponType' has a wrong offset!");
static_assert(offsetof(RBNPC_Event_OnWeaponHidden, WeaponActor) == 0x000008, "Member 'RBNPC_Event_OnWeaponHidden::WeaponActor' has a wrong offset!");

// Function OPP.RBNPC.Event_OnWeaponVisible
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Event_OnWeaponVisible final
{
public:
	ENPCWeapon                                    WeaponType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DCF[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBNPCWeapon*                           WeaponActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Event_OnWeaponVisible) == 0x000008, "Wrong alignment on RBNPC_Event_OnWeaponVisible");
static_assert(sizeof(RBNPC_Event_OnWeaponVisible) == 0x000010, "Wrong size on RBNPC_Event_OnWeaponVisible");
static_assert(offsetof(RBNPC_Event_OnWeaponVisible, WeaponType) == 0x000000, "Member 'RBNPC_Event_OnWeaponVisible::WeaponType' has a wrong offset!");
static_assert(offsetof(RBNPC_Event_OnWeaponVisible, WeaponActor) == 0x000008, "Member 'RBNPC_Event_OnWeaponVisible::WeaponActor' has a wrong offset!");

// Function OPP.RBNPC.Event_PlayHitReactionEffects
// 0x0018 (0x0018 - 0x0000)
struct RBNPC_Event_PlayHitReactionEffects final
{
public:
	struct FVector                                AttackLoc;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               EffectRotation;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Event_PlayHitReactionEffects) == 0x000004, "Wrong alignment on RBNPC_Event_PlayHitReactionEffects");
static_assert(sizeof(RBNPC_Event_PlayHitReactionEffects) == 0x000018, "Wrong size on RBNPC_Event_PlayHitReactionEffects");
static_assert(offsetof(RBNPC_Event_PlayHitReactionEffects, AttackLoc) == 0x000000, "Member 'RBNPC_Event_PlayHitReactionEffects::AttackLoc' has a wrong offset!");
static_assert(offsetof(RBNPC_Event_PlayHitReactionEffects, EffectRotation) == 0x00000C, "Member 'RBNPC_Event_PlayHitReactionEffects::EffectRotation' has a wrong offset!");

// Function OPP.RBNPC.GetAmbientStationComponent
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_GetAmbientStationComponent final
{
public:
	class URBAmbientStationComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_GetAmbientStationComponent) == 0x000008, "Wrong alignment on RBNPC_GetAmbientStationComponent");
static_assert(sizeof(RBNPC_GetAmbientStationComponent) == 0x000008, "Wrong size on RBNPC_GetAmbientStationComponent");
static_assert(offsetof(RBNPC_GetAmbientStationComponent, ReturnValue) == 0x000000, "Member 'RBNPC_GetAmbientStationComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.Multicast_AlignToMark
// 0x0014 (0x0014 - 0x0000)
struct RBNPC_Multicast_AlignToMark final
{
public:
	struct FVector                                AlignPos;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlignYaw;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_AlignToMark) == 0x000004, "Wrong alignment on RBNPC_Multicast_AlignToMark");
static_assert(sizeof(RBNPC_Multicast_AlignToMark) == 0x000014, "Wrong size on RBNPC_Multicast_AlignToMark");
static_assert(offsetof(RBNPC_Multicast_AlignToMark, AlignPos) == 0x000000, "Member 'RBNPC_Multicast_AlignToMark::AlignPos' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_AlignToMark, AlignYaw) == 0x00000C, "Member 'RBNPC_Multicast_AlignToMark::AlignYaw' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_AlignToMark, blendTime) == 0x000010, "Member 'RBNPC_Multicast_AlignToMark::blendTime' has a wrong offset!");

// Function OPP.RBNPC.Multicast_AnimatedStart
// 0x0048 (0x0048 - 0x0000)
struct RBNPC_Multicast_AnimatedStart final
{
public:
	struct FNPCAnimatedStartData                  StartData;                                         // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_AnimatedStart) == 0x000008, "Wrong alignment on RBNPC_Multicast_AnimatedStart");
static_assert(sizeof(RBNPC_Multicast_AnimatedStart) == 0x000048, "Wrong size on RBNPC_Multicast_AnimatedStart");
static_assert(offsetof(RBNPC_Multicast_AnimatedStart, StartData) == 0x000000, "Member 'RBNPC_Multicast_AnimatedStart::StartData' has a wrong offset!");

// Function OPP.RBNPC.Multicast_AnimatedStop
// 0x0078 (0x0078 - 0x0000)
struct RBNPC_Multicast_AnimatedStop final
{
public:
	struct FNPCAnimatedStopData                   StopData;                                          // 0x0000(0x0078)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_AnimatedStop) == 0x000004, "Wrong alignment on RBNPC_Multicast_AnimatedStop");
static_assert(sizeof(RBNPC_Multicast_AnimatedStop) == 0x000078, "Wrong size on RBNPC_Multicast_AnimatedStop");
static_assert(offsetof(RBNPC_Multicast_AnimatedStop, StopData) == 0x000000, "Member 'RBNPC_Multicast_AnimatedStop::StopData' has a wrong offset!");

// Function OPP.RBNPC.Multicast_CompleteNPCSpecialMove
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_CompleteNPCSpecialMove final
{
public:
	ESpecialMove                                  SpecialMoveCompleted;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpecialMoveEndVelocityOverride;                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_CompleteNPCSpecialMove) == 0x000004, "Wrong alignment on RBNPC_Multicast_CompleteNPCSpecialMove");
static_assert(sizeof(RBNPC_Multicast_CompleteNPCSpecialMove) == 0x000008, "Wrong size on RBNPC_Multicast_CompleteNPCSpecialMove");
static_assert(offsetof(RBNPC_Multicast_CompleteNPCSpecialMove, SpecialMoveCompleted) == 0x000000, "Member 'RBNPC_Multicast_CompleteNPCSpecialMove::SpecialMoveCompleted' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_CompleteNPCSpecialMove, SpecialMoveEndVelocityOverride) == 0x000004, "Member 'RBNPC_Multicast_CompleteNPCSpecialMove::SpecialMoveEndVelocityOverride' has a wrong offset!");

// Function OPP.RBNPC.Multicast_CycleBreaker
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_CycleBreaker final
{
public:
	ENPCAnimStyle                                 breakerAnimStyle;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD1[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomSelector;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_CycleBreaker) == 0x000004, "Wrong alignment on RBNPC_Multicast_CycleBreaker");
static_assert(sizeof(RBNPC_Multicast_CycleBreaker) == 0x000008, "Wrong size on RBNPC_Multicast_CycleBreaker");
static_assert(offsetof(RBNPC_Multicast_CycleBreaker, breakerAnimStyle) == 0x000000, "Member 'RBNPC_Multicast_CycleBreaker::breakerAnimStyle' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_CycleBreaker, RandomSelector) == 0x000004, "Member 'RBNPC_Multicast_CycleBreaker::RandomSelector' has a wrong offset!");

// Function OPP.RBNPC.Multicast_DoorInvestigate
// 0x0030 (0x0030 - 0x0000)
struct RBNPC_Multicast_DoorInvestigate final
{
public:
	struct FNPCDoorInvestigationParams            Param_DoorInvParams;                               // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_DoorInvestigate) == 0x000008, "Wrong alignment on RBNPC_Multicast_DoorInvestigate");
static_assert(sizeof(RBNPC_Multicast_DoorInvestigate) == 0x000030, "Wrong size on RBNPC_Multicast_DoorInvestigate");
static_assert(offsetof(RBNPC_Multicast_DoorInvestigate, Param_DoorInvParams) == 0x000000, "Member 'RBNPC_Multicast_DoorInvestigate::Param_DoorInvParams' has a wrong offset!");

// Function OPP.RBNPC.Multicast_DoorPass
// 0x00A8 (0x00A8 - 0x0000)
struct RBNPC_Multicast_DoorPass final
{
public:
	struct FNPCDoorInteractionData                DoorPass;                                          // 0x0000(0x00A8)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_DoorPass) == 0x000008, "Wrong alignment on RBNPC_Multicast_DoorPass");
static_assert(sizeof(RBNPC_Multicast_DoorPass) == 0x0000A8, "Wrong size on RBNPC_Multicast_DoorPass");
static_assert(offsetof(RBNPC_Multicast_DoorPass, DoorPass) == 0x000000, "Member 'RBNPC_Multicast_DoorPass::DoorPass' has a wrong offset!");

// Function OPP.RBNPC.Multicast_EnterAmbientStation
// 0x0028 (0x0028 - 0x0000)
struct RBNPC_Multicast_EnterAmbientStation final
{
public:
	class URBAmbientStationComponent*             AmbientStation;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD2[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EntryLocation;                                     // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EntryForward;                                      // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD3[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_Multicast_EnterAmbientStation) == 0x000008, "Wrong alignment on RBNPC_Multicast_EnterAmbientStation");
static_assert(sizeof(RBNPC_Multicast_EnterAmbientStation) == 0x000028, "Wrong size on RBNPC_Multicast_EnterAmbientStation");
static_assert(offsetof(RBNPC_Multicast_EnterAmbientStation, AmbientStation) == 0x000000, "Member 'RBNPC_Multicast_EnterAmbientStation::AmbientStation' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterAmbientStation, bImmediate) == 0x000008, "Member 'RBNPC_Multicast_EnterAmbientStation::bImmediate' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterAmbientStation, EntryLocation) == 0x00000C, "Member 'RBNPC_Multicast_EnterAmbientStation::EntryLocation' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterAmbientStation, EntryForward) == 0x000018, "Member 'RBNPC_Multicast_EnterAmbientStation::EntryForward' has a wrong offset!");

// Function OPP.RBNPC.Multicast_EnterBlindPaintState
// 0x001C (0x001C - 0x0000)
struct RBNPC_Multicast_EnterBlindPaintState final
{
public:
	float                                         RelYawToPaint;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartDir;                                          // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_EnterBlindPaintState) == 0x000004, "Wrong alignment on RBNPC_Multicast_EnterBlindPaintState");
static_assert(sizeof(RBNPC_Multicast_EnterBlindPaintState) == 0x00001C, "Wrong size on RBNPC_Multicast_EnterBlindPaintState");
static_assert(offsetof(RBNPC_Multicast_EnterBlindPaintState, RelYawToPaint) == 0x000000, "Member 'RBNPC_Multicast_EnterBlindPaintState::RelYawToPaint' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterBlindPaintState, StartLocation) == 0x000004, "Member 'RBNPC_Multicast_EnterBlindPaintState::StartLocation' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterBlindPaintState, StartDir) == 0x000010, "Member 'RBNPC_Multicast_EnterBlindPaintState::StartDir' has a wrong offset!");

// Function OPP.RBNPC.Multicast_EnterGrenadeStun
// 0x001C (0x001C - 0x0000)
struct RBNPC_Multicast_EnterGrenadeStun final
{
public:
	float                                         StunDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_EnterGrenadeStun) == 0x000004, "Wrong alignment on RBNPC_Multicast_EnterGrenadeStun");
static_assert(sizeof(RBNPC_Multicast_EnterGrenadeStun) == 0x00001C, "Wrong size on RBNPC_Multicast_EnterGrenadeStun");
static_assert(offsetof(RBNPC_Multicast_EnterGrenadeStun, StunDuration) == 0x000000, "Member 'RBNPC_Multicast_EnterGrenadeStun::StunDuration' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterGrenadeStun, Location) == 0x000004, "Member 'RBNPC_Multicast_EnterGrenadeStun::Location' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterGrenadeStun, TargetDir) == 0x000010, "Member 'RBNPC_Multicast_EnterGrenadeStun::TargetDir' has a wrong offset!");

// Function OPP.RBNPC.Multicast_EnterGroundAndPoundAttacker
// 0x0028 (0x0028 - 0x0000)
struct RBNPC_Multicast_EnterGroundAndPoundAttacker final
{
public:
	class ARBPawn*                                Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          EnterGnPAnimSeq;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_EnterGroundAndPoundAttacker) == 0x000008, "Wrong alignment on RBNPC_Multicast_EnterGroundAndPoundAttacker");
static_assert(sizeof(RBNPC_Multicast_EnterGroundAndPoundAttacker) == 0x000028, "Wrong size on RBNPC_Multicast_EnterGroundAndPoundAttacker");
static_assert(offsetof(RBNPC_Multicast_EnterGroundAndPoundAttacker, Victim) == 0x000000, "Member 'RBNPC_Multicast_EnterGroundAndPoundAttacker::Victim' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterGroundAndPoundAttacker, TargetPos) == 0x000008, "Member 'RBNPC_Multicast_EnterGroundAndPoundAttacker::TargetPos' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterGroundAndPoundAttacker, TargetDir) == 0x000014, "Member 'RBNPC_Multicast_EnterGroundAndPoundAttacker::TargetDir' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_EnterGroundAndPoundAttacker, EnterGnPAnimSeq) == 0x000020, "Member 'RBNPC_Multicast_EnterGroundAndPoundAttacker::EnterGnPAnimSeq' has a wrong offset!");

// Function OPP.RBNPC.Multicast_EnterMonsterCloset
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_EnterMonsterCloset final
{
public:
	class ARBMonsterCloset*                       Closet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_EnterMonsterCloset) == 0x000008, "Wrong alignment on RBNPC_Multicast_EnterMonsterCloset");
static_assert(sizeof(RBNPC_Multicast_EnterMonsterCloset) == 0x000008, "Wrong size on RBNPC_Multicast_EnterMonsterCloset");
static_assert(offsetof(RBNPC_Multicast_EnterMonsterCloset, Closet) == 0x000000, "Member 'RBNPC_Multicast_EnterMonsterCloset::Closet' has a wrong offset!");

// Function OPP.RBNPC.Multicast_ExitGrenadeStun
// 0x0018 (0x0018 - 0x0000)
struct RBNPC_Multicast_ExitGrenadeStun final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_ExitGrenadeStun) == 0x000004, "Wrong alignment on RBNPC_Multicast_ExitGrenadeStun");
static_assert(sizeof(RBNPC_Multicast_ExitGrenadeStun) == 0x000018, "Wrong size on RBNPC_Multicast_ExitGrenadeStun");
static_assert(offsetof(RBNPC_Multicast_ExitGrenadeStun, Location) == 0x000000, "Member 'RBNPC_Multicast_ExitGrenadeStun::Location' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_ExitGrenadeStun, TargetDir) == 0x00000C, "Member 'RBNPC_Multicast_ExitGrenadeStun::TargetDir' has a wrong offset!");

// Function OPP.RBNPC.Multicast_ExitMonsterCloset
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_ExitMonsterCloset final
{
public:
	class ARBMonsterCloset*                       Closet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_ExitMonsterCloset) == 0x000008, "Wrong alignment on RBNPC_Multicast_ExitMonsterCloset");
static_assert(sizeof(RBNPC_Multicast_ExitMonsterCloset) == 0x000008, "Wrong size on RBNPC_Multicast_ExitMonsterCloset");
static_assert(offsetof(RBNPC_Multicast_ExitMonsterCloset, Closet) == 0x000000, "Member 'RBNPC_Multicast_ExitMonsterCloset::Closet' has a wrong offset!");

// Function OPP.RBNPC.Multicast_GroundAndPoundInterrupted
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Multicast_GroundAndPoundInterrupted final
{
public:
	class ARBPlayer*                              PinnedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NpcToInterrupterRelativeYaw;                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_Multicast_GroundAndPoundInterrupted) == 0x000008, "Wrong alignment on RBNPC_Multicast_GroundAndPoundInterrupted");
static_assert(sizeof(RBNPC_Multicast_GroundAndPoundInterrupted) == 0x000010, "Wrong size on RBNPC_Multicast_GroundAndPoundInterrupted");
static_assert(offsetof(RBNPC_Multicast_GroundAndPoundInterrupted, PinnedPlayer) == 0x000000, "Member 'RBNPC_Multicast_GroundAndPoundInterrupted::PinnedPlayer' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_GroundAndPoundInterrupted, NpcToInterrupterRelativeYaw) == 0x000008, "Member 'RBNPC_Multicast_GroundAndPoundInterrupted::NpcToInterrupterRelativeYaw' has a wrong offset!");

// Function OPP.RBNPC.Multicast_GroundAndPoundPlayerEscape
// 0x0020 (0x0020 - 0x0000)
struct RBNPC_Multicast_GroundAndPoundPlayerEscape final
{
public:
	class ARBPlayer*                              EscapingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PouncerAnim;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PlayerAnim;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBThrowableWeapon*                     EscapeItem;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_GroundAndPoundPlayerEscape) == 0x000008, "Wrong alignment on RBNPC_Multicast_GroundAndPoundPlayerEscape");
static_assert(sizeof(RBNPC_Multicast_GroundAndPoundPlayerEscape) == 0x000020, "Wrong size on RBNPC_Multicast_GroundAndPoundPlayerEscape");
static_assert(offsetof(RBNPC_Multicast_GroundAndPoundPlayerEscape, EscapingPlayer) == 0x000000, "Member 'RBNPC_Multicast_GroundAndPoundPlayerEscape::EscapingPlayer' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_GroundAndPoundPlayerEscape, PouncerAnim) == 0x000008, "Member 'RBNPC_Multicast_GroundAndPoundPlayerEscape::PouncerAnim' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_GroundAndPoundPlayerEscape, PlayerAnim) == 0x000010, "Member 'RBNPC_Multicast_GroundAndPoundPlayerEscape::PlayerAnim' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_GroundAndPoundPlayerEscape, EscapeItem) == 0x000018, "Member 'RBNPC_Multicast_GroundAndPoundPlayerEscape::EscapeItem' has a wrong offset!");

// Function OPP.RBNPC.Multicast_OnDealtUnarmedDamage
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Multicast_OnDealtUnarmedDamage final
{
public:
	class ARBPawn*                                OtherPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DamageSourceBone;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_OnDealtUnarmedDamage) == 0x000008, "Wrong alignment on RBNPC_Multicast_OnDealtUnarmedDamage");
static_assert(sizeof(RBNPC_Multicast_OnDealtUnarmedDamage) == 0x000010, "Wrong size on RBNPC_Multicast_OnDealtUnarmedDamage");
static_assert(offsetof(RBNPC_Multicast_OnDealtUnarmedDamage, OtherPawn) == 0x000000, "Member 'RBNPC_Multicast_OnDealtUnarmedDamage::OtherPawn' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_OnDealtUnarmedDamage, DamageSourceBone) == 0x000008, "Member 'RBNPC_Multicast_OnDealtUnarmedDamage::DamageSourceBone' has a wrong offset!");

// Function OPP.RBNPC.Multicast_OnDealtWeaponDamage
// 0x0018 (0x0018 - 0x0000)
struct RBNPC_Multicast_OnDealtWeaponDamage final
{
public:
	class ARBPawn*                                OtherPawn;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DamageLocation;                                    // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD5[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_Multicast_OnDealtWeaponDamage) == 0x000008, "Wrong alignment on RBNPC_Multicast_OnDealtWeaponDamage");
static_assert(sizeof(RBNPC_Multicast_OnDealtWeaponDamage) == 0x000018, "Wrong size on RBNPC_Multicast_OnDealtWeaponDamage");
static_assert(offsetof(RBNPC_Multicast_OnDealtWeaponDamage, OtherPawn) == 0x000000, "Member 'RBNPC_Multicast_OnDealtWeaponDamage::OtherPawn' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_OnDealtWeaponDamage, DamageLocation) == 0x000008, "Member 'RBNPC_Multicast_OnDealtWeaponDamage::DamageLocation' has a wrong offset!");

// Function OPP.RBNPC.Multicast_OnFinishedExitingMonsterCloset
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Multicast_OnFinishedExitingMonsterCloset final
{
public:
	class ARBMonsterCloset*                       Closet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayVO;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD6[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_Multicast_OnFinishedExitingMonsterCloset) == 0x000008, "Wrong alignment on RBNPC_Multicast_OnFinishedExitingMonsterCloset");
static_assert(sizeof(RBNPC_Multicast_OnFinishedExitingMonsterCloset) == 0x000010, "Wrong size on RBNPC_Multicast_OnFinishedExitingMonsterCloset");
static_assert(offsetof(RBNPC_Multicast_OnFinishedExitingMonsterCloset, Closet) == 0x000000, "Member 'RBNPC_Multicast_OnFinishedExitingMonsterCloset::Closet' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_OnFinishedExitingMonsterCloset, bPlayVO) == 0x000008, "Member 'RBNPC_Multicast_OnFinishedExitingMonsterCloset::bPlayVO' has a wrong offset!");

// Function OPP.RBNPC.Multicast_OverrideAnimRefs
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_OverrideAnimRefs final
{
public:
	class URBAnimReferences*                      OverrideAnimRefs;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_OverrideAnimRefs) == 0x000008, "Wrong alignment on RBNPC_Multicast_OverrideAnimRefs");
static_assert(sizeof(RBNPC_Multicast_OverrideAnimRefs) == 0x000008, "Wrong size on RBNPC_Multicast_OverrideAnimRefs");
static_assert(offsetof(RBNPC_Multicast_OverrideAnimRefs, OverrideAnimRefs) == 0x000000, "Member 'RBNPC_Multicast_OverrideAnimRefs::OverrideAnimRefs' has a wrong offset!");

// Function OPP.RBNPC.Multicast_PerformStandardFatality
// 0x0040 (0x0040 - 0x0000)
struct RBNPC_Multicast_PerformStandardFatality final
{
public:
	struct FStandardFatalityData                  FatalityData;                                      // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_PerformStandardFatality) == 0x000008, "Wrong alignment on RBNPC_Multicast_PerformStandardFatality");
static_assert(sizeof(RBNPC_Multicast_PerformStandardFatality) == 0x000040, "Wrong size on RBNPC_Multicast_PerformStandardFatality");
static_assert(offsetof(RBNPC_Multicast_PerformStandardFatality, FatalityData) == 0x000000, "Member 'RBNPC_Multicast_PerformStandardFatality::FatalityData' has a wrong offset!");

// Function OPP.RBNPC.Multicast_PlayAmbientStationExitAnim
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_PlayAmbientStationExitAnim final
{
public:
	class UAnimSequence*                          AnimSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_PlayAmbientStationExitAnim) == 0x000008, "Wrong alignment on RBNPC_Multicast_PlayAmbientStationExitAnim");
static_assert(sizeof(RBNPC_Multicast_PlayAmbientStationExitAnim) == 0x000008, "Wrong size on RBNPC_Multicast_PlayAmbientStationExitAnim");
static_assert(offsetof(RBNPC_Multicast_PlayAmbientStationExitAnim, AnimSeq) == 0x000000, "Member 'RBNPC_Multicast_PlayAmbientStationExitAnim::AnimSeq' has a wrong offset!");

// Function OPP.RBNPC.Multicast_PlayGrab
// 0x0058 (0x0058 - 0x0000)
struct RBNPC_Multicast_PlayGrab final
{
public:
	struct FPairedTwoPhaseAnimData                AnimData;                                          // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ARBPlayer*                              GrabbedPlayer;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0040(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x004C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_PlayGrab) == 0x000008, "Wrong alignment on RBNPC_Multicast_PlayGrab");
static_assert(sizeof(RBNPC_Multicast_PlayGrab) == 0x000058, "Wrong size on RBNPC_Multicast_PlayGrab");
static_assert(offsetof(RBNPC_Multicast_PlayGrab, AnimData) == 0x000000, "Member 'RBNPC_Multicast_PlayGrab::AnimData' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayGrab, GrabbedPlayer) == 0x000038, "Member 'RBNPC_Multicast_PlayGrab::GrabbedPlayer' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayGrab, TargetPos) == 0x000040, "Member 'RBNPC_Multicast_PlayGrab::TargetPos' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayGrab, TargetDir) == 0x00004C, "Member 'RBNPC_Multicast_PlayGrab::TargetDir' has a wrong offset!");

// Function OPP.RBNPC.Multicast_PlayNPCHitReaction
// 0x0038 (0x0038 - 0x0000)
struct RBNPC_Multicast_PlayNPCHitReaction final
{
public:
	struct FNPCHitReactionParams                  Params_0;                                          // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_PlayNPCHitReaction) == 0x000008, "Wrong alignment on RBNPC_Multicast_PlayNPCHitReaction");
static_assert(sizeof(RBNPC_Multicast_PlayNPCHitReaction) == 0x000038, "Wrong size on RBNPC_Multicast_PlayNPCHitReaction");
static_assert(offsetof(RBNPC_Multicast_PlayNPCHitReaction, Params_0) == 0x000000, "Member 'RBNPC_Multicast_PlayNPCHitReaction::Params_0' has a wrong offset!");

// Function OPP.RBNPC.Multicast_PlayPullFromHidespot
// 0x0060 (0x0060 - 0x0000)
struct RBNPC_Multicast_PlayPullFromHidespot final
{
public:
	struct FPairedTwoPhaseAnimData                AnimData;                                          // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ARBPlayer*                              GrabbedPlayer;                                     // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBHidespotComponent*                   Hidespot;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0048(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x0054(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_PlayPullFromHidespot) == 0x000008, "Wrong alignment on RBNPC_Multicast_PlayPullFromHidespot");
static_assert(sizeof(RBNPC_Multicast_PlayPullFromHidespot) == 0x000060, "Wrong size on RBNPC_Multicast_PlayPullFromHidespot");
static_assert(offsetof(RBNPC_Multicast_PlayPullFromHidespot, AnimData) == 0x000000, "Member 'RBNPC_Multicast_PlayPullFromHidespot::AnimData' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayPullFromHidespot, GrabbedPlayer) == 0x000038, "Member 'RBNPC_Multicast_PlayPullFromHidespot::GrabbedPlayer' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayPullFromHidespot, Hidespot) == 0x000040, "Member 'RBNPC_Multicast_PlayPullFromHidespot::Hidespot' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayPullFromHidespot, TargetPos) == 0x000048, "Member 'RBNPC_Multicast_PlayPullFromHidespot::TargetPos' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayPullFromHidespot, TargetDir) == 0x000054, "Member 'RBNPC_Multicast_PlayPullFromHidespot::TargetDir' has a wrong offset!");

// Function OPP.RBNPC.Multicast_PlaySingleShotAnim
// 0x0020 (0x0020 - 0x0000)
struct RBNPC_Multicast_PlaySingleShotAnim final
{
public:
	class UAnimSequence*                          AnimSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_PlaySingleShotAnim) == 0x000008, "Wrong alignment on RBNPC_Multicast_PlaySingleShotAnim");
static_assert(sizeof(RBNPC_Multicast_PlaySingleShotAnim) == 0x000020, "Wrong size on RBNPC_Multicast_PlaySingleShotAnim");
static_assert(offsetof(RBNPC_Multicast_PlaySingleShotAnim, AnimSeq) == 0x000000, "Member 'RBNPC_Multicast_PlaySingleShotAnim::AnimSeq' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlaySingleShotAnim, TargetPos) == 0x000008, "Member 'RBNPC_Multicast_PlaySingleShotAnim::TargetPos' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlaySingleShotAnim, TargetDir) == 0x000014, "Member 'RBNPC_Multicast_PlaySingleShotAnim::TargetDir' has a wrong offset!");

// Function OPP.RBNPC.Multicast_PlayStartled
// 0x0048 (0x0048 - 0x0000)
struct RBNPC_Multicast_PlayStartled final
{
public:
	struct FNPCStartleData                        StartleData;                                       // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_PlayStartled) == 0x000008, "Wrong alignment on RBNPC_Multicast_PlayStartled");
static_assert(sizeof(RBNPC_Multicast_PlayStartled) == 0x000048, "Wrong size on RBNPC_Multicast_PlayStartled");
static_assert(offsetof(RBNPC_Multicast_PlayStartled, StartleData) == 0x000000, "Member 'RBNPC_Multicast_PlayStartled::StartleData' has a wrong offset!");

// Function OPP.RBNPC.Multicast_PlayWaypointAnim
// 0x0028 (0x0028 - 0x0000)
struct RBNPC_Multicast_PlayWaypointAnim final
{
public:
	class UAnimSequence*                          AnimSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopAnim;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD7[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetPos;                                         // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD8[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_Multicast_PlayWaypointAnim) == 0x000008, "Wrong alignment on RBNPC_Multicast_PlayWaypointAnim");
static_assert(sizeof(RBNPC_Multicast_PlayWaypointAnim) == 0x000028, "Wrong size on RBNPC_Multicast_PlayWaypointAnim");
static_assert(offsetof(RBNPC_Multicast_PlayWaypointAnim, AnimSeq) == 0x000000, "Member 'RBNPC_Multicast_PlayWaypointAnim::AnimSeq' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayWaypointAnim, bLoopAnim) == 0x000008, "Member 'RBNPC_Multicast_PlayWaypointAnim::bLoopAnim' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayWaypointAnim, TargetPos) == 0x00000C, "Member 'RBNPC_Multicast_PlayWaypointAnim::TargetPos' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayWaypointAnim, TargetDir) == 0x000018, "Member 'RBNPC_Multicast_PlayWaypointAnim::TargetDir' has a wrong offset!");

// Function OPP.RBNPC.Multicast_PlayWeaponImpactParticles
// 0x0020 (0x0020 - 0x0000)
struct RBNPC_Multicast_PlayWeaponImpactParticles final
{
public:
	TArray<struct FVector>                        ImpactPoints;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               ImpactRotation;                                    // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DD9[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_Multicast_PlayWeaponImpactParticles) == 0x000008, "Wrong alignment on RBNPC_Multicast_PlayWeaponImpactParticles");
static_assert(sizeof(RBNPC_Multicast_PlayWeaponImpactParticles) == 0x000020, "Wrong size on RBNPC_Multicast_PlayWeaponImpactParticles");
static_assert(offsetof(RBNPC_Multicast_PlayWeaponImpactParticles, ImpactPoints) == 0x000000, "Member 'RBNPC_Multicast_PlayWeaponImpactParticles::ImpactPoints' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_PlayWeaponImpactParticles, ImpactRotation) == 0x000010, "Member 'RBNPC_Multicast_PlayWeaponImpactParticles::ImpactRotation' has a wrong offset!");

// Function OPP.RBNPC.Multicast_SetBlindPaintStateStyle
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_Multicast_SetBlindPaintStateStyle final
{
public:
	bool                                          bAgitated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_SetBlindPaintStateStyle) == 0x000001, "Wrong alignment on RBNPC_Multicast_SetBlindPaintStateStyle");
static_assert(sizeof(RBNPC_Multicast_SetBlindPaintStateStyle) == 0x000001, "Wrong size on RBNPC_Multicast_SetBlindPaintStateStyle");
static_assert(offsetof(RBNPC_Multicast_SetBlindPaintStateStyle, bAgitated) == 0x000000, "Member 'RBNPC_Multicast_SetBlindPaintStateStyle::bAgitated' has a wrong offset!");

// Function OPP.RBNPC.Multicast_SleeperDisturbed
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_SleeperDisturbed final
{
public:
	class UAnimSequence*                          AnimSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_SleeperDisturbed) == 0x000008, "Wrong alignment on RBNPC_Multicast_SleeperDisturbed");
static_assert(sizeof(RBNPC_Multicast_SleeperDisturbed) == 0x000008, "Wrong size on RBNPC_Multicast_SleeperDisturbed");
static_assert(offsetof(RBNPC_Multicast_SleeperDisturbed, AnimSeq) == 0x000000, "Member 'RBNPC_Multicast_SleeperDisturbed::AnimSeq' has a wrong offset!");

// Function OPP.RBNPC.Multicast_SleeperScream
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Multicast_SleeperScream final
{
public:
	class UAnimSequence*                          AnimSeq;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoScream;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDA[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreamDuration;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_SleeperScream) == 0x000008, "Wrong alignment on RBNPC_Multicast_SleeperScream");
static_assert(sizeof(RBNPC_Multicast_SleeperScream) == 0x000010, "Wrong size on RBNPC_Multicast_SleeperScream");
static_assert(offsetof(RBNPC_Multicast_SleeperScream, AnimSeq) == 0x000000, "Member 'RBNPC_Multicast_SleeperScream::AnimSeq' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_SleeperScream, bNoScream) == 0x000008, "Member 'RBNPC_Multicast_SleeperScream::bNoScream' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_SleeperScream, ScreamDuration) == 0x00000C, "Member 'RBNPC_Multicast_SleeperScream::ScreamDuration' has a wrong offset!");

// Function OPP.RBNPC.Multicast_StartAttackMove
// 0x0048 (0x0048 - 0x0000)
struct RBNPC_Multicast_StartAttackMove final
{
public:
	struct FVector                                StartPos;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartDir;                                          // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNPCAttackParams                       Param_AttackParams;                                // 0x0018(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_StartAttackMove) == 0x000008, "Wrong alignment on RBNPC_Multicast_StartAttackMove");
static_assert(sizeof(RBNPC_Multicast_StartAttackMove) == 0x000048, "Wrong size on RBNPC_Multicast_StartAttackMove");
static_assert(offsetof(RBNPC_Multicast_StartAttackMove, StartPos) == 0x000000, "Member 'RBNPC_Multicast_StartAttackMove::StartPos' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_StartAttackMove, StartDir) == 0x00000C, "Member 'RBNPC_Multicast_StartAttackMove::StartDir' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_StartAttackMove, Param_AttackParams) == 0x000018, "Member 'RBNPC_Multicast_StartAttackMove::Param_AttackParams' has a wrong offset!");

// Function OPP.RBNPC.Multicast_StartFixedDurationSpecialMove
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_StartFixedDurationSpecialMove final
{
public:
	ESpecialMove                                  SpecialMoveType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExpirationServerTime;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_StartFixedDurationSpecialMove) == 0x000004, "Wrong alignment on RBNPC_Multicast_StartFixedDurationSpecialMove");
static_assert(sizeof(RBNPC_Multicast_StartFixedDurationSpecialMove) == 0x000008, "Wrong size on RBNPC_Multicast_StartFixedDurationSpecialMove");
static_assert(offsetof(RBNPC_Multicast_StartFixedDurationSpecialMove, SpecialMoveType) == 0x000000, "Member 'RBNPC_Multicast_StartFixedDurationSpecialMove::SpecialMoveType' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_StartFixedDurationSpecialMove, ExpirationServerTime) == 0x000004, "Member 'RBNPC_Multicast_StartFixedDurationSpecialMove::ExpirationServerTime' has a wrong offset!");

// Function OPP.RBNPC.Multicast_StartHidespotPeeking
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Multicast_StartHidespotPeeking final
{
public:
	class URBHidespotComponent*                   Hidespot;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PeekingAnim;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_StartHidespotPeeking) == 0x000008, "Wrong alignment on RBNPC_Multicast_StartHidespotPeeking");
static_assert(sizeof(RBNPC_Multicast_StartHidespotPeeking) == 0x000010, "Wrong size on RBNPC_Multicast_StartHidespotPeeking");
static_assert(offsetof(RBNPC_Multicast_StartHidespotPeeking, Hidespot) == 0x000000, "Member 'RBNPC_Multicast_StartHidespotPeeking::Hidespot' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_StartHidespotPeeking, PeekingAnim) == 0x000008, "Member 'RBNPC_Multicast_StartHidespotPeeking::PeekingAnim' has a wrong offset!");

// Function OPP.RBNPC.Multicast_StartInvestigationAction
// 0x0028 (0x0028 - 0x0000)
struct RBNPC_Multicast_StartInvestigationAction final
{
public:
	struct FNPCInvestigationData                  Param_InvestigationData;                           // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_StartInvestigationAction) == 0x000008, "Wrong alignment on RBNPC_Multicast_StartInvestigationAction");
static_assert(sizeof(RBNPC_Multicast_StartInvestigationAction) == 0x000028, "Wrong size on RBNPC_Multicast_StartInvestigationAction");
static_assert(offsetof(RBNPC_Multicast_StartInvestigationAction, Param_InvestigationData) == 0x000000, "Member 'RBNPC_Multicast_StartInvestigationAction::Param_InvestigationData' has a wrong offset!");

// Function OPP.RBNPC.Multicast_StartRelativeYawSpecialMove
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_StartRelativeYawSpecialMove final
{
public:
	ESpecialMove                                  RelYawSpecialMove;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelativeYaw;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_StartRelativeYawSpecialMove) == 0x000004, "Wrong alignment on RBNPC_Multicast_StartRelativeYawSpecialMove");
static_assert(sizeof(RBNPC_Multicast_StartRelativeYawSpecialMove) == 0x000008, "Wrong size on RBNPC_Multicast_StartRelativeYawSpecialMove");
static_assert(offsetof(RBNPC_Multicast_StartRelativeYawSpecialMove, RelYawSpecialMove) == 0x000000, "Member 'RBNPC_Multicast_StartRelativeYawSpecialMove::RelYawSpecialMove' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_StartRelativeYawSpecialMove, RelativeYaw) == 0x000004, "Member 'RBNPC_Multicast_StartRelativeYawSpecialMove::RelativeYaw' has a wrong offset!");

// Function OPP.RBNPC.Multicast_StartSabotageAction
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_StartSabotageAction final
{
public:
	class UObject*                                SabotageInteractableTarget;                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_StartSabotageAction) == 0x000008, "Wrong alignment on RBNPC_Multicast_StartSabotageAction");
static_assert(sizeof(RBNPC_Multicast_StartSabotageAction) == 0x000008, "Wrong size on RBNPC_Multicast_StartSabotageAction");
static_assert(offsetof(RBNPC_Multicast_StartSabotageAction, SabotageInteractableTarget) == 0x000000, "Member 'RBNPC_Multicast_StartSabotageAction::SabotageInteractableTarget' has a wrong offset!");

// Function OPP.RBNPC.Multicast_StartSpecialMoveOrientedToActor
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Multicast_StartSpecialMoveOrientedToActor final
{
public:
	ESpecialMove                                  SpecialMoveType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_StartSpecialMoveOrientedToActor) == 0x000008, "Wrong alignment on RBNPC_Multicast_StartSpecialMoveOrientedToActor");
static_assert(sizeof(RBNPC_Multicast_StartSpecialMoveOrientedToActor) == 0x000010, "Wrong size on RBNPC_Multicast_StartSpecialMoveOrientedToActor");
static_assert(offsetof(RBNPC_Multicast_StartSpecialMoveOrientedToActor, SpecialMoveType) == 0x000000, "Member 'RBNPC_Multicast_StartSpecialMoveOrientedToActor::SpecialMoveType' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_StartSpecialMoveOrientedToActor, TargetActor) == 0x000008, "Member 'RBNPC_Multicast_StartSpecialMoveOrientedToActor::TargetActor' has a wrong offset!");

// Function OPP.RBNPC.Multicast_StartTurnOnSpot
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Multicast_StartTurnOnSpot final
{
public:
	struct FNPCTurnOnSpotData                     Param_TurnOnSpot;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_StartTurnOnSpot) == 0x000008, "Wrong alignment on RBNPC_Multicast_StartTurnOnSpot");
static_assert(sizeof(RBNPC_Multicast_StartTurnOnSpot) == 0x000010, "Wrong size on RBNPC_Multicast_StartTurnOnSpot");
static_assert(offsetof(RBNPC_Multicast_StartTurnOnSpot, Param_TurnOnSpot) == 0x000000, "Member 'RBNPC_Multicast_StartTurnOnSpot::Param_TurnOnSpot' has a wrong offset!");

// Function OPP.RBNPC.Multicast_TeleportTo
// 0x001C (0x001C - 0x0000)
struct RBNPC_Multicast_TeleportTo final
{
public:
	struct FVector                                DestLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DestRotation;                                      // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNoCheck;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDE[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNPC_Multicast_TeleportTo) == 0x000004, "Wrong alignment on RBNPC_Multicast_TeleportTo");
static_assert(sizeof(RBNPC_Multicast_TeleportTo) == 0x00001C, "Wrong size on RBNPC_Multicast_TeleportTo");
static_assert(offsetof(RBNPC_Multicast_TeleportTo, DestLocation) == 0x000000, "Member 'RBNPC_Multicast_TeleportTo::DestLocation' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_TeleportTo, DestRotation) == 0x00000C, "Member 'RBNPC_Multicast_TeleportTo::DestRotation' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_TeleportTo, bNoCheck) == 0x000018, "Member 'RBNPC_Multicast_TeleportTo::bNoCheck' has a wrong offset!");

// Function OPP.RBNPC.Multicast_TraversalMoveStarted
// 0x0070 (0x0070 - 0x0000)
struct RBNPC_Multicast_TraversalMoveStarted final
{
public:
	struct FTraversalMoveData                     MoveData;                                          // 0x0000(0x0070)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_TraversalMoveStarted) == 0x000008, "Wrong alignment on RBNPC_Multicast_TraversalMoveStarted");
static_assert(sizeof(RBNPC_Multicast_TraversalMoveStarted) == 0x000070, "Wrong size on RBNPC_Multicast_TraversalMoveStarted");
static_assert(offsetof(RBNPC_Multicast_TraversalMoveStarted, MoveData) == 0x000000, "Member 'RBNPC_Multicast_TraversalMoveStarted::MoveData' has a wrong offset!");

// Function OPP.RBNPC.Multicast_TriggerContextualVO
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_Multicast_TriggerContextualVO final
{
public:
	EVOContext                                    VOContext;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DDF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        RandomSeed;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_TriggerContextualVO) == 0x000004, "Wrong alignment on RBNPC_Multicast_TriggerContextualVO");
static_assert(sizeof(RBNPC_Multicast_TriggerContextualVO) == 0x000008, "Wrong size on RBNPC_Multicast_TriggerContextualVO");
static_assert(offsetof(RBNPC_Multicast_TriggerContextualVO, VOContext) == 0x000000, "Member 'RBNPC_Multicast_TriggerContextualVO::VOContext' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_TriggerContextualVO, RandomSeed) == 0x000004, "Member 'RBNPC_Multicast_TriggerContextualVO::RandomSeed' has a wrong offset!");

// Function OPP.RBNPC.Multicast_TriggerScriptedVO
// 0x0010 (0x0010 - 0x0000)
struct RBNPC_Multicast_TriggerScriptedVO final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOPriority                                   VOPriority;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        RandomSeed;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_TriggerScriptedVO) == 0x000008, "Wrong alignment on RBNPC_Multicast_TriggerScriptedVO");
static_assert(sizeof(RBNPC_Multicast_TriggerScriptedVO) == 0x000010, "Wrong size on RBNPC_Multicast_TriggerScriptedVO");
static_assert(offsetof(RBNPC_Multicast_TriggerScriptedVO, AudioEvent) == 0x000000, "Member 'RBNPC_Multicast_TriggerScriptedVO::AudioEvent' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_TriggerScriptedVO, VOPriority) == 0x000008, "Member 'RBNPC_Multicast_TriggerScriptedVO::VOPriority' has a wrong offset!");
static_assert(offsetof(RBNPC_Multicast_TriggerScriptedVO, RandomSeed) == 0x00000C, "Member 'RBNPC_Multicast_TriggerScriptedVO::RandomSeed' has a wrong offset!");

// Function OPP.RBNPC.Multicast_UpdateReplicatedNPCConfig
// 0x0020 (0x0020 - 0x0000)
struct RBNPC_Multicast_UpdateReplicatedNPCConfig final
{
public:
	struct FNPCReplicatedConfig                   ConfigData;                                        // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_Multicast_UpdateReplicatedNPCConfig) == 0x000004, "Wrong alignment on RBNPC_Multicast_UpdateReplicatedNPCConfig");
static_assert(sizeof(RBNPC_Multicast_UpdateReplicatedNPCConfig) == 0x000020, "Wrong size on RBNPC_Multicast_UpdateReplicatedNPCConfig");
static_assert(offsetof(RBNPC_Multicast_UpdateReplicatedNPCConfig, ConfigData) == 0x000000, "Member 'RBNPC_Multicast_UpdateReplicatedNPCConfig::ConfigData' has a wrong offset!");

// Function OPP.RBNPC.OnCanShowSpectreChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_OnCanShowSpectreChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_OnCanShowSpectreChangedCallback) == 0x000001, "Wrong alignment on RBNPC_OnCanShowSpectreChangedCallback");
static_assert(sizeof(RBNPC_OnCanShowSpectreChangedCallback) == 0x000001, "Wrong size on RBNPC_OnCanShowSpectreChangedCallback");
static_assert(offsetof(RBNPC_OnCanShowSpectreChangedCallback, ChangedType) == 0x000000, "Member 'RBNPC_OnCanShowSpectreChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBNPC.OnPlayingFullBodyIdleBreakerStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_OnPlayingFullBodyIdleBreakerStateChanged final
{
public:
	bool                                          bPlayingFullBodyIdleBreaker;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_OnPlayingFullBodyIdleBreakerStateChanged) == 0x000001, "Wrong alignment on RBNPC_OnPlayingFullBodyIdleBreakerStateChanged");
static_assert(sizeof(RBNPC_OnPlayingFullBodyIdleBreakerStateChanged) == 0x000001, "Wrong size on RBNPC_OnPlayingFullBodyIdleBreakerStateChanged");
static_assert(offsetof(RBNPC_OnPlayingFullBodyIdleBreakerStateChanged, bPlayingFullBodyIdleBreaker) == 0x000000, "Member 'RBNPC_OnPlayingFullBodyIdleBreakerStateChanged::bPlayingFullBodyIdleBreaker' has a wrong offset!");

// Function OPP.RBNPC.BP_GetWeaponActor
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_BP_GetWeaponActor final
{
public:
	class ARBNPCWeapon*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_BP_GetWeaponActor) == 0x000008, "Wrong alignment on RBNPC_BP_GetWeaponActor");
static_assert(sizeof(RBNPC_BP_GetWeaponActor) == 0x000008, "Wrong size on RBNPC_BP_GetWeaponActor");
static_assert(offsetof(RBNPC_BP_GetWeaponActor, ReturnValue) == 0x000000, "Member 'RBNPC_BP_GetWeaponActor::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.CanTriggerSoundTraps
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_CanTriggerSoundTraps final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_CanTriggerSoundTraps) == 0x000001, "Wrong alignment on RBNPC_CanTriggerSoundTraps");
static_assert(sizeof(RBNPC_CanTriggerSoundTraps) == 0x000001, "Wrong size on RBNPC_CanTriggerSoundTraps");
static_assert(offsetof(RBNPC_CanTriggerSoundTraps, ReturnValue) == 0x000000, "Member 'RBNPC_CanTriggerSoundTraps::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.GetAttachedScriptedAnimStation
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_GetAttachedScriptedAnimStation final
{
public:
	class ARBScriptedAnimStation*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_GetAttachedScriptedAnimStation) == 0x000008, "Wrong alignment on RBNPC_GetAttachedScriptedAnimStation");
static_assert(sizeof(RBNPC_GetAttachedScriptedAnimStation) == 0x000008, "Wrong size on RBNPC_GetAttachedScriptedAnimStation");
static_assert(offsetof(RBNPC_GetAttachedScriptedAnimStation, ReturnValue) == 0x000000, "Member 'RBNPC_GetAttachedScriptedAnimStation::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.GetFoleySwitchOverride
// 0x0008 (0x0008 - 0x0000)
struct RBNPC_GetFoleySwitchOverride final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_GetFoleySwitchOverride) == 0x000004, "Wrong alignment on RBNPC_GetFoleySwitchOverride");
static_assert(sizeof(RBNPC_GetFoleySwitchOverride) == 0x000008, "Wrong size on RBNPC_GetFoleySwitchOverride");
static_assert(offsetof(RBNPC_GetFoleySwitchOverride, ReturnValue) == 0x000000, "Member 'RBNPC_GetFoleySwitchOverride::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.GetWeaponType
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_GetWeaponType final
{
public:
	ENPCWeapon                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_GetWeaponType) == 0x000001, "Wrong alignment on RBNPC_GetWeaponType");
static_assert(sizeof(RBNPC_GetWeaponType) == 0x000001, "Wrong size on RBNPC_GetWeaponType");
static_assert(offsetof(RBNPC_GetWeaponType, ReturnValue) == 0x000000, "Member 'RBNPC_GetWeaponType::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.HasDoneGoryDeath
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_HasDoneGoryDeath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_HasDoneGoryDeath) == 0x000001, "Wrong alignment on RBNPC_HasDoneGoryDeath");
static_assert(sizeof(RBNPC_HasDoneGoryDeath) == 0x000001, "Wrong size on RBNPC_HasDoneGoryDeath");
static_assert(offsetof(RBNPC_HasDoneGoryDeath, ReturnValue) == 0x000000, "Member 'RBNPC_HasDoneGoryDeath::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.IsAHiddenSpectre
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_IsAHiddenSpectre final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_IsAHiddenSpectre) == 0x000001, "Wrong alignment on RBNPC_IsAHiddenSpectre");
static_assert(sizeof(RBNPC_IsAHiddenSpectre) == 0x000001, "Wrong size on RBNPC_IsAHiddenSpectre");
static_assert(offsetof(RBNPC_IsAHiddenSpectre, ReturnValue) == 0x000000, "Member 'RBNPC_IsAHiddenSpectre::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.IsForcedCustomizationFemale
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_IsForcedCustomizationFemale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_IsForcedCustomizationFemale) == 0x000001, "Wrong alignment on RBNPC_IsForcedCustomizationFemale");
static_assert(sizeof(RBNPC_IsForcedCustomizationFemale) == 0x000001, "Wrong size on RBNPC_IsForcedCustomizationFemale");
static_assert(offsetof(RBNPC_IsForcedCustomizationFemale, ReturnValue) == 0x000000, "Member 'RBNPC_IsForcedCustomizationFemale::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.IsForcedCustomizationSex
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_IsForcedCustomizationSex final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_IsForcedCustomizationSex) == 0x000001, "Wrong alignment on RBNPC_IsForcedCustomizationSex");
static_assert(sizeof(RBNPC_IsForcedCustomizationSex) == 0x000001, "Wrong size on RBNPC_IsForcedCustomizationSex");
static_assert(offsetof(RBNPC_IsForcedCustomizationSex, ReturnValue) == 0x000000, "Member 'RBNPC_IsForcedCustomizationSex::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.IsLocalSpectre
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_IsLocalSpectre final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_IsLocalSpectre) == 0x000001, "Wrong alignment on RBNPC_IsLocalSpectre");
static_assert(sizeof(RBNPC_IsLocalSpectre) == 0x000001, "Wrong size on RBNPC_IsLocalSpectre");
static_assert(offsetof(RBNPC_IsLocalSpectre, ReturnValue) == 0x000000, "Member 'RBNPC_IsLocalSpectre::ReturnValue' has a wrong offset!");

// Function OPP.RBNPC.IsUsingConfigVoiceType
// 0x0001 (0x0001 - 0x0000)
struct RBNPC_IsUsingConfigVoiceType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPC_IsUsingConfigVoiceType) == 0x000001, "Wrong alignment on RBNPC_IsUsingConfigVoiceType");
static_assert(sizeof(RBNPC_IsUsingConfigVoiceType) == 0x000001, "Wrong size on RBNPC_IsUsingConfigVoiceType");
static_assert(offsetof(RBNPC_IsUsingConfigVoiceType, ReturnValue) == 0x000000, "Member 'RBNPC_IsUsingConfigVoiceType::ReturnValue' has a wrong offset!");

// Function OPP.RBBackToLobbyMenu.BackToLobby
// 0x0001 (0x0001 - 0x0000)
struct RBBackToLobbyMenu_BackToLobby final
{
public:
	bool                                          bWithParty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBackToLobbyMenu_BackToLobby) == 0x000001, "Wrong alignment on RBBackToLobbyMenu_BackToLobby");
static_assert(sizeof(RBBackToLobbyMenu_BackToLobby) == 0x000001, "Wrong size on RBBackToLobbyMenu_BackToLobby");
static_assert(offsetof(RBBackToLobbyMenu_BackToLobby, bWithParty) == 0x000000, "Member 'RBBackToLobbyMenu_BackToLobby::bWithParty' has a wrong offset!");

// Function OPP.RBBackToLobbyMenu.CanReturnWithParty
// 0x0001 (0x0001 - 0x0000)
struct RBBackToLobbyMenu_CanReturnWithParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBackToLobbyMenu_CanReturnWithParty) == 0x000001, "Wrong alignment on RBBackToLobbyMenu_CanReturnWithParty");
static_assert(sizeof(RBBackToLobbyMenu_CanReturnWithParty) == 0x000001, "Wrong size on RBBackToLobbyMenu_CanReturnWithParty");
static_assert(offsetof(RBBackToLobbyMenu_CanReturnWithParty, ReturnValue) == 0x000000, "Member 'RBBackToLobbyMenu_CanReturnWithParty::ReturnValue' has a wrong offset!");

// Function OPP.RBBackToLobbyMenu.IsLeaving
// 0x0001 (0x0001 - 0x0000)
struct RBBackToLobbyMenu_IsLeaving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBackToLobbyMenu_IsLeaving) == 0x000001, "Wrong alignment on RBBackToLobbyMenu_IsLeaving");
static_assert(sizeof(RBBackToLobbyMenu_IsLeaving) == 0x000001, "Wrong size on RBBackToLobbyMenu_IsLeaving");
static_assert(offsetof(RBBackToLobbyMenu_IsLeaving, ReturnValue) == 0x000000, "Member 'RBBackToLobbyMenu_IsLeaving::ReturnValue' has a wrong offset!");

// Function OPP.RBBackToLobbyMenu.IsOperationPending
// 0x0001 (0x0001 - 0x0000)
struct RBBackToLobbyMenu_IsOperationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBackToLobbyMenu_IsOperationPending) == 0x000001, "Wrong alignment on RBBackToLobbyMenu_IsOperationPending");
static_assert(sizeof(RBBackToLobbyMenu_IsOperationPending) == 0x000001, "Wrong size on RBBackToLobbyMenu_IsOperationPending");
static_assert(offsetof(RBBackToLobbyMenu_IsOperationPending, ReturnValue) == 0x000000, "Member 'RBBackToLobbyMenu_IsOperationPending::ReturnValue' has a wrong offset!");

// Function OPP.RBBackToLobbyMenu.LeavingWillLeaveParty
// 0x0001 (0x0001 - 0x0000)
struct RBBackToLobbyMenu_LeavingWillLeaveParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBackToLobbyMenu_LeavingWillLeaveParty) == 0x000001, "Wrong alignment on RBBackToLobbyMenu_LeavingWillLeaveParty");
static_assert(sizeof(RBBackToLobbyMenu_LeavingWillLeaveParty) == 0x000001, "Wrong size on RBBackToLobbyMenu_LeavingWillLeaveParty");
static_assert(offsetof(RBBackToLobbyMenu_LeavingWillLeaveParty, ReturnValue) == 0x000000, "Member 'RBBackToLobbyMenu_LeavingWillLeaveParty::ReturnValue' has a wrong offset!");

// Function OPP.RBNotificationUserWidget.Event_UpdateDisplayTime
// 0x0008 (0x0008 - 0x0000)
struct RBNotificationUserWidget_Event_UpdateDisplayTime final
{
public:
	float                                         DisplayTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_TotalDisplayTime;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNotificationUserWidget_Event_UpdateDisplayTime) == 0x000004, "Wrong alignment on RBNotificationUserWidget_Event_UpdateDisplayTime");
static_assert(sizeof(RBNotificationUserWidget_Event_UpdateDisplayTime) == 0x000008, "Wrong size on RBNotificationUserWidget_Event_UpdateDisplayTime");
static_assert(offsetof(RBNotificationUserWidget_Event_UpdateDisplayTime, DisplayTime) == 0x000000, "Member 'RBNotificationUserWidget_Event_UpdateDisplayTime::DisplayTime' has a wrong offset!");
static_assert(offsetof(RBNotificationUserWidget_Event_UpdateDisplayTime, Param_TotalDisplayTime) == 0x000004, "Member 'RBNotificationUserWidget_Event_UpdateDisplayTime::Param_TotalDisplayTime' has a wrong offset!");

// Function OPP.RBMatchAcceptanceNotificationUserWidget.GetPartyMemberCount
// 0x0004 (0x0004 - 0x0000)
struct RBMatchAcceptanceNotificationUserWidget_GetPartyMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMatchAcceptanceNotificationUserWidget_GetPartyMemberCount) == 0x000004, "Wrong alignment on RBMatchAcceptanceNotificationUserWidget_GetPartyMemberCount");
static_assert(sizeof(RBMatchAcceptanceNotificationUserWidget_GetPartyMemberCount) == 0x000004, "Wrong size on RBMatchAcceptanceNotificationUserWidget_GetPartyMemberCount");
static_assert(offsetof(RBMatchAcceptanceNotificationUserWidget_GetPartyMemberCount, ReturnValue) == 0x000000, "Member 'RBMatchAcceptanceNotificationUserWidget_GetPartyMemberCount::ReturnValue' has a wrong offset!");

// Function OPP.RBMovieSubtitlePlayer.Start
// 0x0008 (0x0008 - 0x0000)
struct RBMovieSubtitlePlayer_Start final
{
public:
	const class URBMovieSubtitles*                Param_MovieSubtitles;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMovieSubtitlePlayer_Start) == 0x000008, "Wrong alignment on RBMovieSubtitlePlayer_Start");
static_assert(sizeof(RBMovieSubtitlePlayer_Start) == 0x000008, "Wrong size on RBMovieSubtitlePlayer_Start");
static_assert(offsetof(RBMovieSubtitlePlayer_Start, Param_MovieSubtitles) == 0x000000, "Member 'RBMovieSubtitlePlayer_Start::Param_MovieSubtitles' has a wrong offset!");

// Function OPP.RBMovieSubtitlePlayer.Update
// 0x0004 (0x0004 - 0x0000)
struct RBMovieSubtitlePlayer_Update final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMovieSubtitlePlayer_Update) == 0x000004, "Wrong alignment on RBMovieSubtitlePlayer_Update");
static_assert(sizeof(RBMovieSubtitlePlayer_Update) == 0x000004, "Wrong size on RBMovieSubtitlePlayer_Update");
static_assert(offsetof(RBMovieSubtitlePlayer_Update, TimeSeconds) == 0x000000, "Member 'RBMovieSubtitlePlayer_Update::TimeSeconds' has a wrong offset!");

// Function OPP.RBMovieSubtitlePlayer.IsStarted
// 0x0001 (0x0001 - 0x0000)
struct RBMovieSubtitlePlayer_IsStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMovieSubtitlePlayer_IsStarted) == 0x000001, "Wrong alignment on RBMovieSubtitlePlayer_IsStarted");
static_assert(sizeof(RBMovieSubtitlePlayer_IsStarted) == 0x000001, "Wrong size on RBMovieSubtitlePlayer_IsStarted");
static_assert(offsetof(RBMovieSubtitlePlayer_IsStarted, ReturnValue) == 0x000000, "Member 'RBMovieSubtitlePlayer_IsStarted::ReturnValue' has a wrong offset!");

// Function OPP.RBBarcodeScanner.Event_OnTVBarcodeChanged
// 0x0020 (0x0020 - 0x0000)
struct RBBarcodeScanner_Event_OnTVBarcodeChanged final
{
public:
	int32                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Prefix;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBarcodeScanner_Event_OnTVBarcodeChanged) == 0x000008, "Wrong alignment on RBBarcodeScanner_Event_OnTVBarcodeChanged");
static_assert(sizeof(RBBarcodeScanner_Event_OnTVBarcodeChanged) == 0x000020, "Wrong size on RBBarcodeScanner_Event_OnTVBarcodeChanged");
static_assert(offsetof(RBBarcodeScanner_Event_OnTVBarcodeChanged, Code) == 0x000000, "Member 'RBBarcodeScanner_Event_OnTVBarcodeChanged::Code' has a wrong offset!");
static_assert(offsetof(RBBarcodeScanner_Event_OnTVBarcodeChanged, Prefix) == 0x000008, "Member 'RBBarcodeScanner_Event_OnTVBarcodeChanged::Prefix' has a wrong offset!");

// Function OPP.RBMenuOptionsDescription.UpdateDescription
// 0x00E0 (0x00E0 - 0x0000)
struct RBMenuOptionsDescription_UpdateDescription final
{
public:
	struct FOptionData                            OptionData;                                        // 0x0000(0x00E0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsDescription_UpdateDescription) == 0x000008, "Wrong alignment on RBMenuOptionsDescription_UpdateDescription");
static_assert(sizeof(RBMenuOptionsDescription_UpdateDescription) == 0x0000E0, "Wrong size on RBMenuOptionsDescription_UpdateDescription");
static_assert(offsetof(RBMenuOptionsDescription_UpdateDescription, OptionData) == 0x000000, "Member 'RBMenuOptionsDescription_UpdateDescription::OptionData' has a wrong offset!");

// Function OPP.RBNetworkSoundComponent.OnRep_RTPCData
// 0x0010 (0x0010 - 0x0000)
struct RBNetworkSoundComponent_OnRep_RTPCData final
{
public:
	TArray<struct FNetworkSoundComponentRTPCData> OldRTPCData;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSoundComponent_OnRep_RTPCData) == 0x000008, "Wrong alignment on RBNetworkSoundComponent_OnRep_RTPCData");
static_assert(sizeof(RBNetworkSoundComponent_OnRep_RTPCData) == 0x000010, "Wrong size on RBNetworkSoundComponent_OnRep_RTPCData");
static_assert(offsetof(RBNetworkSoundComponent_OnRep_RTPCData, OldRTPCData) == 0x000000, "Member 'RBNetworkSoundComponent_OnRep_RTPCData::OldRTPCData' has a wrong offset!");

// Function OPP.RBNetworkSoundComponent.OnRep_SwitchStateData
// 0x0010 (0x0010 - 0x0000)
struct RBNetworkSoundComponent_OnRep_SwitchStateData final
{
public:
	TArray<struct FNetworkSoundComponentSwitchStateData> OldSwitchStateData;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSoundComponent_OnRep_SwitchStateData) == 0x000008, "Wrong alignment on RBNetworkSoundComponent_OnRep_SwitchStateData");
static_assert(sizeof(RBNetworkSoundComponent_OnRep_SwitchStateData) == 0x000010, "Wrong size on RBNetworkSoundComponent_OnRep_SwitchStateData");
static_assert(offsetof(RBNetworkSoundComponent_OnRep_SwitchStateData, OldSwitchStateData) == 0x000000, "Member 'RBNetworkSoundComponent_OnRep_SwitchStateData::OldSwitchStateData' has a wrong offset!");

// Function OPP.RBNetworkSoundComponent.SetRTPC
// 0x000C (0x000C - 0x0000)
struct RBNetworkSoundComponent_SetRTPC final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSoundComponent_SetRTPC) == 0x000004, "Wrong alignment on RBNetworkSoundComponent_SetRTPC");
static_assert(sizeof(RBNetworkSoundComponent_SetRTPC) == 0x00000C, "Wrong size on RBNetworkSoundComponent_SetRTPC");
static_assert(offsetof(RBNetworkSoundComponent_SetRTPC, Param_Name) == 0x000000, "Member 'RBNetworkSoundComponent_SetRTPC::Param_Name' has a wrong offset!");
static_assert(offsetof(RBNetworkSoundComponent_SetRTPC, Value) == 0x000008, "Member 'RBNetworkSoundComponent_SetRTPC::Value' has a wrong offset!");

// Function OPP.RBNetworkSoundComponent.SetSwitchState
// 0x0010 (0x0010 - 0x0000)
struct RBNetworkSoundComponent_SetSwitchState final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSoundComponent_SetSwitchState) == 0x000004, "Wrong alignment on RBNetworkSoundComponent_SetSwitchState");
static_assert(sizeof(RBNetworkSoundComponent_SetSwitchState) == 0x000010, "Wrong size on RBNetworkSoundComponent_SetSwitchState");
static_assert(offsetof(RBNetworkSoundComponent_SetSwitchState, Param_Name) == 0x000000, "Member 'RBNetworkSoundComponent_SetSwitchState::Param_Name' has a wrong offset!");
static_assert(offsetof(RBNetworkSoundComponent_SetSwitchState, State) == 0x000008, "Member 'RBNetworkSoundComponent_SetSwitchState::State' has a wrong offset!");

// Function OPP.RBUseQuestItemsObjectiveCoordinator.Event_OnSpawnObjectiveItem
// 0x0010 (0x0010 - 0x0000)
struct RBUseQuestItemsObjectiveCoordinator_Event_OnSpawnObjectiveItem final
{
public:
	class AActor*                                 Spawner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              NewObjectiveItem;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUseQuestItemsObjectiveCoordinator_Event_OnSpawnObjectiveItem) == 0x000008, "Wrong alignment on RBUseQuestItemsObjectiveCoordinator_Event_OnSpawnObjectiveItem");
static_assert(sizeof(RBUseQuestItemsObjectiveCoordinator_Event_OnSpawnObjectiveItem) == 0x000010, "Wrong size on RBUseQuestItemsObjectiveCoordinator_Event_OnSpawnObjectiveItem");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_Event_OnSpawnObjectiveItem, Spawner) == 0x000000, "Member 'RBUseQuestItemsObjectiveCoordinator_Event_OnSpawnObjectiveItem::Spawner' has a wrong offset!");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_Event_OnSpawnObjectiveItem, NewObjectiveItem) == 0x000008, "Member 'RBUseQuestItemsObjectiveCoordinator_Event_OnSpawnObjectiveItem::NewObjectiveItem' has a wrong offset!");

// Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPanelInteractionCompletedChanged
// 0x0010 (0x0010 - 0x0000)
struct RBUseQuestItemsObjectiveCoordinator_OnPanelInteractionCompletedChanged final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUseQuestItemsObjectiveCoordinator_OnPanelInteractionCompletedChanged) == 0x000008, "Wrong alignment on RBUseQuestItemsObjectiveCoordinator_OnPanelInteractionCompletedChanged");
static_assert(sizeof(RBUseQuestItemsObjectiveCoordinator_OnPanelInteractionCompletedChanged) == 0x000010, "Wrong size on RBUseQuestItemsObjectiveCoordinator_OnPanelInteractionCompletedChanged");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnPanelInteractionCompletedChanged, Panel) == 0x000000, "Member 'RBUseQuestItemsObjectiveCoordinator_OnPanelInteractionCompletedChanged::Panel' has a wrong offset!");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnPanelInteractionCompletedChanged, Pawn) == 0x000008, "Member 'RBUseQuestItemsObjectiveCoordinator_OnPanelInteractionCompletedChanged::Pawn' has a wrong offset!");

// Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPawnKilled
// 0x0010 (0x0010 - 0x0000)
struct RBUseQuestItemsObjectiveCoordinator_OnPawnKilled final
{
public:
	class ARBPawn*                                InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Subject;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUseQuestItemsObjectiveCoordinator_OnPawnKilled) == 0x000008, "Wrong alignment on RBUseQuestItemsObjectiveCoordinator_OnPawnKilled");
static_assert(sizeof(RBUseQuestItemsObjectiveCoordinator_OnPawnKilled) == 0x000010, "Wrong size on RBUseQuestItemsObjectiveCoordinator_OnPawnKilled");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnPawnKilled, InstigatorActor) == 0x000000, "Member 'RBUseQuestItemsObjectiveCoordinator_OnPawnKilled::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnPawnKilled, Subject) == 0x000008, "Member 'RBUseQuestItemsObjectiveCoordinator_OnPawnKilled::Subject' has a wrong offset!");

// Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPlayerDisconnect
// 0x0008 (0x0008 - 0x0000)
struct RBUseQuestItemsObjectiveCoordinator_OnPlayerDisconnect final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUseQuestItemsObjectiveCoordinator_OnPlayerDisconnect) == 0x000008, "Wrong alignment on RBUseQuestItemsObjectiveCoordinator_OnPlayerDisconnect");
static_assert(sizeof(RBUseQuestItemsObjectiveCoordinator_OnPlayerDisconnect) == 0x000008, "Wrong size on RBUseQuestItemsObjectiveCoordinator_OnPlayerDisconnect");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnPlayerDisconnect, Player) == 0x000000, "Member 'RBUseQuestItemsObjectiveCoordinator_OnPlayerDisconnect::Player' has a wrong offset!");

// Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPlayerDoAction
// 0x0010 (0x0010 - 0x0000)
struct RBUseQuestItemsObjectiveCoordinator_OnPlayerDoAction final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractibleComponent*               Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUseQuestItemsObjectiveCoordinator_OnPlayerDoAction) == 0x000008, "Wrong alignment on RBUseQuestItemsObjectiveCoordinator_OnPlayerDoAction");
static_assert(sizeof(RBUseQuestItemsObjectiveCoordinator_OnPlayerDoAction) == 0x000010, "Wrong size on RBUseQuestItemsObjectiveCoordinator_OnPlayerDoAction");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnPlayerDoAction, Player) == 0x000000, "Member 'RBUseQuestItemsObjectiveCoordinator_OnPlayerDoAction::Player' has a wrong offset!");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnPlayerDoAction, Component) == 0x000008, "Member 'RBUseQuestItemsObjectiveCoordinator_OnPlayerDoAction::Component' has a wrong offset!");

// Function OPP.RBUseQuestItemsObjectiveCoordinator.OnPlayerStoppedOperating
// 0x0010 (0x0010 - 0x0000)
struct RBUseQuestItemsObjectiveCoordinator_OnPlayerStoppedOperating final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBOperatable*                          Operatable;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUseQuestItemsObjectiveCoordinator_OnPlayerStoppedOperating) == 0x000008, "Wrong alignment on RBUseQuestItemsObjectiveCoordinator_OnPlayerStoppedOperating");
static_assert(sizeof(RBUseQuestItemsObjectiveCoordinator_OnPlayerStoppedOperating) == 0x000010, "Wrong size on RBUseQuestItemsObjectiveCoordinator_OnPlayerStoppedOperating");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnPlayerStoppedOperating, Pawn) == 0x000000, "Member 'RBUseQuestItemsObjectiveCoordinator_OnPlayerStoppedOperating::Pawn' has a wrong offset!");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnPlayerStoppedOperating, Operatable) == 0x000008, "Member 'RBUseQuestItemsObjectiveCoordinator_OnPlayerStoppedOperating::Operatable' has a wrong offset!");

// Function OPP.RBUseQuestItemsObjectiveCoordinator.OnQuestItemDropped_Server
// 0x0010 (0x0010 - 0x0000)
struct RBUseQuestItemsObjectiveCoordinator_OnQuestItemDropped_Server final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUseQuestItemsObjectiveCoordinator_OnQuestItemDropped_Server) == 0x000008, "Wrong alignment on RBUseQuestItemsObjectiveCoordinator_OnQuestItemDropped_Server");
static_assert(sizeof(RBUseQuestItemsObjectiveCoordinator_OnQuestItemDropped_Server) == 0x000010, "Wrong size on RBUseQuestItemsObjectiveCoordinator_OnQuestItemDropped_Server");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnQuestItemDropped_Server, Pawn) == 0x000000, "Member 'RBUseQuestItemsObjectiveCoordinator_OnQuestItemDropped_Server::Pawn' has a wrong offset!");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnQuestItemDropped_Server, Item) == 0x000008, "Member 'RBUseQuestItemsObjectiveCoordinator_OnQuestItemDropped_Server::Item' has a wrong offset!");

// Function OPP.RBUseQuestItemsObjectiveCoordinator.OnQuestItemPickedUp_Server
// 0x0010 (0x0010 - 0x0000)
struct RBUseQuestItemsObjectiveCoordinator_OnQuestItemPickedUp_Server final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUseQuestItemsObjectiveCoordinator_OnQuestItemPickedUp_Server) == 0x000008, "Wrong alignment on RBUseQuestItemsObjectiveCoordinator_OnQuestItemPickedUp_Server");
static_assert(sizeof(RBUseQuestItemsObjectiveCoordinator_OnQuestItemPickedUp_Server) == 0x000010, "Wrong size on RBUseQuestItemsObjectiveCoordinator_OnQuestItemPickedUp_Server");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnQuestItemPickedUp_Server, Pawn) == 0x000000, "Member 'RBUseQuestItemsObjectiveCoordinator_OnQuestItemPickedUp_Server::Pawn' has a wrong offset!");
static_assert(offsetof(RBUseQuestItemsObjectiveCoordinator_OnQuestItemPickedUp_Server, Item) == 0x000008, "Member 'RBUseQuestItemsObjectiveCoordinator_OnQuestItemPickedUp_Server::Item' has a wrong offset!");

// Function OPP.RBMinigameRoomsObjectiveCoordinator.OnMinigameRoomStateChanged
// 0x0008 (0x0008 - 0x0000)
struct RBMinigameRoomsObjectiveCoordinator_OnMinigameRoomStateChanged final
{
public:
	class URBMinigameRoomComponent*               MinigameRoom;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMinigameRoomsObjectiveCoordinator_OnMinigameRoomStateChanged) == 0x000008, "Wrong alignment on RBMinigameRoomsObjectiveCoordinator_OnMinigameRoomStateChanged");
static_assert(sizeof(RBMinigameRoomsObjectiveCoordinator_OnMinigameRoomStateChanged) == 0x000008, "Wrong size on RBMinigameRoomsObjectiveCoordinator_OnMinigameRoomStateChanged");
static_assert(offsetof(RBMinigameRoomsObjectiveCoordinator_OnMinigameRoomStateChanged, MinigameRoom) == 0x000000, "Member 'RBMinigameRoomsObjectiveCoordinator_OnMinigameRoomStateChanged::MinigameRoom' has a wrong offset!");

// Function OPP.RBMinigameRoomsObjectiveCoordinator.OnNumberOfItemUsedChanged
// 0x0010 (0x0010 - 0x0000)
struct RBMinigameRoomsObjectiveCoordinator_OnNumberOfItemUsedChanged final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMinigameRoomsObjectiveCoordinator_OnNumberOfItemUsedChanged) == 0x000008, "Wrong alignment on RBMinigameRoomsObjectiveCoordinator_OnNumberOfItemUsedChanged");
static_assert(sizeof(RBMinigameRoomsObjectiveCoordinator_OnNumberOfItemUsedChanged) == 0x000010, "Wrong size on RBMinigameRoomsObjectiveCoordinator_OnNumberOfItemUsedChanged");
static_assert(offsetof(RBMinigameRoomsObjectiveCoordinator_OnNumberOfItemUsedChanged, Panel) == 0x000000, "Member 'RBMinigameRoomsObjectiveCoordinator_OnNumberOfItemUsedChanged::Panel' has a wrong offset!");
static_assert(offsetof(RBMinigameRoomsObjectiveCoordinator_OnNumberOfItemUsedChanged, Pawn) == 0x000008, "Member 'RBMinigameRoomsObjectiveCoordinator_OnNumberOfItemUsedChanged::Pawn' has a wrong offset!");

// Function OPP.RBBlacklightable.FadeInLightState
// 0x0001 (0x0001 - 0x0000)
struct RBBlacklightable_FadeInLightState final
{
public:
	bool                                          bBlacklit;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlacklightable_FadeInLightState) == 0x000001, "Wrong alignment on RBBlacklightable_FadeInLightState");
static_assert(sizeof(RBBlacklightable_FadeInLightState) == 0x000001, "Wrong size on RBBlacklightable_FadeInLightState");
static_assert(offsetof(RBBlacklightable_FadeInLightState, bBlacklit) == 0x000000, "Member 'RBBlacklightable_FadeInLightState::bBlacklit' has a wrong offset!");

// Function OPP.RBBlacklightable.SetLightState
// 0x0001 (0x0001 - 0x0000)
struct RBBlacklightable_SetLightState final
{
public:
	bool                                          bBlacklit;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlacklightable_SetLightState) == 0x000001, "Wrong alignment on RBBlacklightable_SetLightState");
static_assert(sizeof(RBBlacklightable_SetLightState) == 0x000001, "Wrong size on RBBlacklightable_SetLightState");
static_assert(offsetof(RBBlacklightable_SetLightState, bBlacklit) == 0x000000, "Member 'RBBlacklightable_SetLightState::bBlacklit' has a wrong offset!");

// Function OPP.RBHUDHealthBar.SetPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBHUDHealthBar_SetPlayer final
{
public:
	class ARBPlayer*                              NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDHealthBar_SetPlayer) == 0x000008, "Wrong alignment on RBHUDHealthBar_SetPlayer");
static_assert(sizeof(RBHUDHealthBar_SetPlayer) == 0x000008, "Wrong size on RBHUDHealthBar_SetPlayer");
static_assert(offsetof(RBHUDHealthBar_SetPlayer, NewPlayer) == 0x000000, "Member 'RBHUDHealthBar_SetPlayer::NewPlayer' has a wrong offset!");

// Function OPP.RBBlockable.GetBlockableState
// 0x0001 (0x0001 - 0x0000)
struct RBBlockable_GetBlockableState final
{
public:
	EBlockableState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlockable_GetBlockableState) == 0x000001, "Wrong alignment on RBBlockable_GetBlockableState");
static_assert(sizeof(RBBlockable_GetBlockableState) == 0x000001, "Wrong size on RBBlockable_GetBlockableState");
static_assert(offsetof(RBBlockable_GetBlockableState, ReturnValue) == 0x000000, "Member 'RBBlockable_GetBlockableState::ReturnValue' has a wrong offset!");

// Function OPP.RBBlockingVolume.SetBlockingState
// 0x0002 (0x0002 - 0x0000)
struct RBBlockingVolume_SetBlockingState final
{
public:
	bool                                          bNewBlockNPCs;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewBlockPlayers;                                  // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlockingVolume_SetBlockingState) == 0x000001, "Wrong alignment on RBBlockingVolume_SetBlockingState");
static_assert(sizeof(RBBlockingVolume_SetBlockingState) == 0x000002, "Wrong size on RBBlockingVolume_SetBlockingState");
static_assert(offsetof(RBBlockingVolume_SetBlockingState, bNewBlockNPCs) == 0x000000, "Member 'RBBlockingVolume_SetBlockingState::bNewBlockNPCs' has a wrong offset!");
static_assert(offsetof(RBBlockingVolume_SetBlockingState, bNewBlockPlayers) == 0x000001, "Member 'RBBlockingVolume_SetBlockingState::bNewBlockPlayers' has a wrong offset!");

// Function OPP.RBBlockingVolume.GetBlockInteractions
// 0x0001 (0x0001 - 0x0000)
struct RBBlockingVolume_GetBlockInteractions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlockingVolume_GetBlockInteractions) == 0x000001, "Wrong alignment on RBBlockingVolume_GetBlockInteractions");
static_assert(sizeof(RBBlockingVolume_GetBlockInteractions) == 0x000001, "Wrong size on RBBlockingVolume_GetBlockInteractions");
static_assert(offsetof(RBBlockingVolume_GetBlockInteractions, ReturnValue) == 0x000000, "Member 'RBBlockingVolume_GetBlockInteractions::ReturnValue' has a wrong offset!");

// Function OPP.RBBlockingVolume.GetBlockNPCs
// 0x0001 (0x0001 - 0x0000)
struct RBBlockingVolume_GetBlockNPCs final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlockingVolume_GetBlockNPCs) == 0x000001, "Wrong alignment on RBBlockingVolume_GetBlockNPCs");
static_assert(sizeof(RBBlockingVolume_GetBlockNPCs) == 0x000001, "Wrong size on RBBlockingVolume_GetBlockNPCs");
static_assert(offsetof(RBBlockingVolume_GetBlockNPCs, ReturnValue) == 0x000000, "Member 'RBBlockingVolume_GetBlockNPCs::ReturnValue' has a wrong offset!");

// Function OPP.RBBlockingVolume.GetBlockPlayers
// 0x0001 (0x0001 - 0x0000)
struct RBBlockingVolume_GetBlockPlayers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlockingVolume_GetBlockPlayers) == 0x000001, "Wrong alignment on RBBlockingVolume_GetBlockPlayers");
static_assert(sizeof(RBBlockingVolume_GetBlockPlayers) == 0x000001, "Wrong size on RBBlockingVolume_GetBlockPlayers");
static_assert(offsetof(RBBlockingVolume_GetBlockPlayers, ReturnValue) == 0x000000, "Member 'RBBlockingVolume_GetBlockPlayers::ReturnValue' has a wrong offset!");

// Function OPP.RBBlockingVolume.GetBlockVisibility
// 0x0001 (0x0001 - 0x0000)
struct RBBlockingVolume_GetBlockVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlockingVolume_GetBlockVisibility) == 0x000001, "Wrong alignment on RBBlockingVolume_GetBlockVisibility");
static_assert(sizeof(RBBlockingVolume_GetBlockVisibility) == 0x000001, "Wrong size on RBBlockingVolume_GetBlockVisibility");
static_assert(offsetof(RBBlockingVolume_GetBlockVisibility, ReturnValue) == 0x000000, "Member 'RBBlockingVolume_GetBlockVisibility::ReturnValue' has a wrong offset!");

// Function OPP.RBBlockingVolume.GetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBBlockingVolume_GetEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlockingVolume_GetEnabled) == 0x000001, "Wrong alignment on RBBlockingVolume_GetEnabled");
static_assert(sizeof(RBBlockingVolume_GetEnabled) == 0x000001, "Wrong size on RBBlockingVolume_GetEnabled");
static_assert(offsetof(RBBlockingVolume_GetEnabled, ReturnValue) == 0x000000, "Member 'RBBlockingVolume_GetEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.AddRandomizeRelativeLocation
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_AddRandomizeRelativeLocation final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeXMin;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeXMax;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeYMin;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeYMax;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeZMin;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeZMax;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF8[0x4];                                     // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_AddRandomizeRelativeLocation) == 0x000008, "Wrong alignment on RBBlueprintLibrary_AddRandomizeRelativeLocation");
static_assert(sizeof(RBBlueprintLibrary_AddRandomizeRelativeLocation) == 0x000028, "Wrong size on RBBlueprintLibrary_AddRandomizeRelativeLocation");
static_assert(offsetof(RBBlueprintLibrary_AddRandomizeRelativeLocation, Component) == 0x000000, "Member 'RBBlueprintLibrary_AddRandomizeRelativeLocation::Component' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AddRandomizeRelativeLocation, RandomSeed) == 0x000008, "Member 'RBBlueprintLibrary_AddRandomizeRelativeLocation::RandomSeed' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AddRandomizeRelativeLocation, RangeXMin) == 0x00000C, "Member 'RBBlueprintLibrary_AddRandomizeRelativeLocation::RangeXMin' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AddRandomizeRelativeLocation, RangeXMax) == 0x000010, "Member 'RBBlueprintLibrary_AddRandomizeRelativeLocation::RangeXMax' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AddRandomizeRelativeLocation, RangeYMin) == 0x000014, "Member 'RBBlueprintLibrary_AddRandomizeRelativeLocation::RangeYMin' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AddRandomizeRelativeLocation, RangeYMax) == 0x000018, "Member 'RBBlueprintLibrary_AddRandomizeRelativeLocation::RangeYMax' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AddRandomizeRelativeLocation, RangeZMin) == 0x00001C, "Member 'RBBlueprintLibrary_AddRandomizeRelativeLocation::RangeZMin' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AddRandomizeRelativeLocation, RangeZMax) == 0x000020, "Member 'RBBlueprintLibrary_AddRandomizeRelativeLocation::RangeZMax' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.AddVariatorGlobalSwitch
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_AddVariatorGlobalSwitch final
{
public:
	class FName                                   SwitchGroup;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_AddVariatorGlobalSwitch) == 0x000004, "Wrong alignment on RBBlueprintLibrary_AddVariatorGlobalSwitch");
static_assert(sizeof(RBBlueprintLibrary_AddVariatorGlobalSwitch) == 0x000010, "Wrong size on RBBlueprintLibrary_AddVariatorGlobalSwitch");
static_assert(offsetof(RBBlueprintLibrary_AddVariatorGlobalSwitch, SwitchGroup) == 0x000000, "Member 'RBBlueprintLibrary_AddVariatorGlobalSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AddVariatorGlobalSwitch, SwitchName) == 0x000008, "Member 'RBBlueprintLibrary_AddVariatorGlobalSwitch::SwitchName' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.AInterpTo
// 0x0014 (0x0014 - 0x0000)
struct RBBlueprintLibrary_AInterpTo final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_AInterpTo) == 0x000004, "Wrong alignment on RBBlueprintLibrary_AInterpTo");
static_assert(sizeof(RBBlueprintLibrary_AInterpTo) == 0x000014, "Wrong size on RBBlueprintLibrary_AInterpTo");
static_assert(offsetof(RBBlueprintLibrary_AInterpTo, Current) == 0x000000, "Member 'RBBlueprintLibrary_AInterpTo::Current' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AInterpTo, Target) == 0x000004, "Member 'RBBlueprintLibrary_AInterpTo::Target' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AInterpTo, DeltaTime) == 0x000008, "Member 'RBBlueprintLibrary_AInterpTo::DeltaTime' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AInterpTo, InterpSpeed) == 0x00000C, "Member 'RBBlueprintLibrary_AInterpTo::InterpSpeed' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AInterpTo, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_AInterpTo::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ApplyVFXParam
// 0x0100 (0x0100 - 0x0000)
struct RBBlueprintLibrary_ApplyVFXParam final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ParticleComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVFXParams                             Params_0;                                          // 0x0010(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_ApplyVFXParam) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ApplyVFXParam");
static_assert(sizeof(RBBlueprintLibrary_ApplyVFXParam) == 0x000100, "Wrong size on RBBlueprintLibrary_ApplyVFXParam");
static_assert(offsetof(RBBlueprintLibrary_ApplyVFXParam, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_ApplyVFXParam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ApplyVFXParam, ParticleComponent) == 0x000008, "Member 'RBBlueprintLibrary_ApplyVFXParam::ParticleComponent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ApplyVFXParam, Params_0) == 0x000010, "Member 'RBBlueprintLibrary_ApplyVFXParam::Params_0' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Approach
// 0x0014 (0x0014 - 0x0000)
struct RBBlueprintLibrary_Approach final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coeff;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Approach) == 0x000004, "Wrong alignment on RBBlueprintLibrary_Approach");
static_assert(sizeof(RBBlueprintLibrary_Approach) == 0x000014, "Wrong size on RBBlueprintLibrary_Approach");
static_assert(offsetof(RBBlueprintLibrary_Approach, Current) == 0x000000, "Member 'RBBlueprintLibrary_Approach::Current' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Approach, Target) == 0x000004, "Member 'RBBlueprintLibrary_Approach::Target' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Approach, Coeff) == 0x000008, "Member 'RBBlueprintLibrary_Approach::Coeff' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Approach, DeltaTime) == 0x00000C, "Member 'RBBlueprintLibrary_Approach::DeltaTime' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Approach, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_Approach::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.AreCheatsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_AreCheatsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_AreCheatsEnabled) == 0x000001, "Wrong alignment on RBBlueprintLibrary_AreCheatsEnabled");
static_assert(sizeof(RBBlueprintLibrary_AreCheatsEnabled) == 0x000001, "Wrong size on RBBlueprintLibrary_AreCheatsEnabled");
static_assert(offsetof(RBBlueprintLibrary_AreCheatsEnabled, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_AreCheatsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.AreSameProfileIds
// 0x0024 (0x0024 - 0x0000)
struct RBBlueprintLibrary_AreSameProfileIds final
{
public:
	struct FProfileId                             FirstProfileId;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProfileId                             SecondProfileId;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF9[0x3];                                     // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_AreSameProfileIds) == 0x000004, "Wrong alignment on RBBlueprintLibrary_AreSameProfileIds");
static_assert(sizeof(RBBlueprintLibrary_AreSameProfileIds) == 0x000024, "Wrong size on RBBlueprintLibrary_AreSameProfileIds");
static_assert(offsetof(RBBlueprintLibrary_AreSameProfileIds, FirstProfileId) == 0x000000, "Member 'RBBlueprintLibrary_AreSameProfileIds::FirstProfileId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AreSameProfileIds, SecondProfileId) == 0x000010, "Member 'RBBlueprintLibrary_AreSameProfileIds::SecondProfileId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_AreSameProfileIds, ReturnValue) == 0x000020, "Member 'RBBlueprintLibrary_AreSameProfileIds::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.BlendVFX
// 0x02D8 (0x02D8 - 0x0000)
struct RBBlueprintLibrary_BlendVFX final
{
public:
	struct FVFXParams                             ParamsA;                                           // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVFXParams                             ParamsB;                                           // 0x00F0(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x01E0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFA[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVFXParams                             ReturnValue;                                       // 0x01E8(0x00F0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_BlendVFX) == 0x000008, "Wrong alignment on RBBlueprintLibrary_BlendVFX");
static_assert(sizeof(RBBlueprintLibrary_BlendVFX) == 0x0002D8, "Wrong size on RBBlueprintLibrary_BlendVFX");
static_assert(offsetof(RBBlueprintLibrary_BlendVFX, ParamsA) == 0x000000, "Member 'RBBlueprintLibrary_BlendVFX::ParamsA' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_BlendVFX, ParamsB) == 0x0000F0, "Member 'RBBlueprintLibrary_BlendVFX::ParamsB' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_BlendVFX, Alpha) == 0x0001E0, "Member 'RBBlueprintLibrary_BlendVFX::Alpha' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_BlendVFX, ReturnValue) == 0x0001E8, "Member 'RBBlueprintLibrary_BlendVFX::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.BlockPlayerRespawnInStage
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_BlockPlayerRespawnInStage final
{
public:
	class UObject*                                blockOwner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_BlockPlayerRespawnInStage) == 0x000008, "Wrong alignment on RBBlueprintLibrary_BlockPlayerRespawnInStage");
static_assert(sizeof(RBBlueprintLibrary_BlockPlayerRespawnInStage) == 0x000008, "Wrong size on RBBlueprintLibrary_BlockPlayerRespawnInStage");
static_assert(offsetof(RBBlueprintLibrary_BlockPlayerRespawnInStage, blockOwner) == 0x000000, "Member 'RBBlueprintLibrary_BlockPlayerRespawnInStage::blockOwner' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.BP_IsIndicatorOfIncapacitatedType
// 0x0002 (0x0002 - 0x0000)
struct RBBlueprintLibrary_BP_IsIndicatorOfIncapacitatedType final
{
public:
	EPlayerIndicatorType                          IndicatorType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_BP_IsIndicatorOfIncapacitatedType) == 0x000001, "Wrong alignment on RBBlueprintLibrary_BP_IsIndicatorOfIncapacitatedType");
static_assert(sizeof(RBBlueprintLibrary_BP_IsIndicatorOfIncapacitatedType) == 0x000002, "Wrong size on RBBlueprintLibrary_BP_IsIndicatorOfIncapacitatedType");
static_assert(offsetof(RBBlueprintLibrary_BP_IsIndicatorOfIncapacitatedType, IndicatorType) == 0x000000, "Member 'RBBlueprintLibrary_BP_IsIndicatorOfIncapacitatedType::IndicatorType' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_BP_IsIndicatorOfIncapacitatedType, ReturnValue) == 0x000001, "Member 'RBBlueprintLibrary_BP_IsIndicatorOfIncapacitatedType::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.BP_IsIndicatorOfObjectiveType
// 0x0002 (0x0002 - 0x0000)
struct RBBlueprintLibrary_BP_IsIndicatorOfObjectiveType final
{
public:
	EPlayerIndicatorType                          IndicatorType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_BP_IsIndicatorOfObjectiveType) == 0x000001, "Wrong alignment on RBBlueprintLibrary_BP_IsIndicatorOfObjectiveType");
static_assert(sizeof(RBBlueprintLibrary_BP_IsIndicatorOfObjectiveType) == 0x000002, "Wrong size on RBBlueprintLibrary_BP_IsIndicatorOfObjectiveType");
static_assert(offsetof(RBBlueprintLibrary_BP_IsIndicatorOfObjectiveType, IndicatorType) == 0x000000, "Member 'RBBlueprintLibrary_BP_IsIndicatorOfObjectiveType::IndicatorType' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_BP_IsIndicatorOfObjectiveType, ReturnValue) == 0x000001, "Member 'RBBlueprintLibrary_BP_IsIndicatorOfObjectiveType::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.BP_IsRayTracingEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_BP_IsRayTracingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_BP_IsRayTracingEnabled) == 0x000001, "Wrong alignment on RBBlueprintLibrary_BP_IsRayTracingEnabled");
static_assert(sizeof(RBBlueprintLibrary_BP_IsRayTracingEnabled) == 0x000001, "Wrong size on RBBlueprintLibrary_BP_IsRayTracingEnabled");
static_assert(offsetof(RBBlueprintLibrary_BP_IsRayTracingEnabled, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_BP_IsRayTracingEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.CanActorCollisionOverlapInEditor
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_CanActorCollisionOverlapInEditor final
{
public:
	class AActor*                                 baseActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToCheck;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_CanActorCollisionOverlapInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_CanActorCollisionOverlapInEditor");
static_assert(sizeof(RBBlueprintLibrary_CanActorCollisionOverlapInEditor) == 0x000018, "Wrong size on RBBlueprintLibrary_CanActorCollisionOverlapInEditor");
static_assert(offsetof(RBBlueprintLibrary_CanActorCollisionOverlapInEditor, baseActor) == 0x000000, "Member 'RBBlueprintLibrary_CanActorCollisionOverlapInEditor::baseActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_CanActorCollisionOverlapInEditor, ActorToCheck) == 0x000008, "Member 'RBBlueprintLibrary_CanActorCollisionOverlapInEditor::ActorToCheck' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_CanActorCollisionOverlapInEditor, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_CanActorCollisionOverlapInEditor::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.CanEditLoadouts
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_CanEditLoadouts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_CanEditLoadouts) == 0x000001, "Wrong alignment on RBBlueprintLibrary_CanEditLoadouts");
static_assert(sizeof(RBBlueprintLibrary_CanEditLoadouts) == 0x000001, "Wrong size on RBBlueprintLibrary_CanEditLoadouts");
static_assert(offsetof(RBBlueprintLibrary_CanEditLoadouts, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_CanEditLoadouts::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.CanNPCBeFemale
// 0x0188 (0x0188 - 0x0000)
struct RBBlueprintLibrary_CanNPCBeFemale final
{
public:
	struct FGruntCustomizationMeshesConfig        CustomizationMeshesConfig;                         // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ENPCFlavor                                    Flavor;                                            // 0x0180(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0181(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFC[0x6];                                     // 0x0182(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_CanNPCBeFemale) == 0x000008, "Wrong alignment on RBBlueprintLibrary_CanNPCBeFemale");
static_assert(sizeof(RBBlueprintLibrary_CanNPCBeFemale) == 0x000188, "Wrong size on RBBlueprintLibrary_CanNPCBeFemale");
static_assert(offsetof(RBBlueprintLibrary_CanNPCBeFemale, CustomizationMeshesConfig) == 0x000000, "Member 'RBBlueprintLibrary_CanNPCBeFemale::CustomizationMeshesConfig' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_CanNPCBeFemale, Flavor) == 0x000180, "Member 'RBBlueprintLibrary_CanNPCBeFemale::Flavor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_CanNPCBeFemale, ReturnValue) == 0x000181, "Member 'RBBlueprintLibrary_CanNPCBeFemale::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.CheckFeatureSwitch
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_CheckFeatureSwitch final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFD[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_CheckFeatureSwitch) == 0x000008, "Wrong alignment on RBBlueprintLibrary_CheckFeatureSwitch");
static_assert(sizeof(RBBlueprintLibrary_CheckFeatureSwitch) == 0x000018, "Wrong size on RBBlueprintLibrary_CheckFeatureSwitch");
static_assert(offsetof(RBBlueprintLibrary_CheckFeatureSwitch, Param_Name) == 0x000000, "Member 'RBBlueprintLibrary_CheckFeatureSwitch::Param_Name' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_CheckFeatureSwitch, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_CheckFeatureSwitch::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ClientOnly_PlayVOOnActor
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_ClientOnly_PlayVOOnActor final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOPriority                                   VOPriority;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFE[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ForcedRandomSeed;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_ClientOnly_PlayVOOnActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ClientOnly_PlayVOOnActor");
static_assert(sizeof(RBBlueprintLibrary_ClientOnly_PlayVOOnActor) == 0x000018, "Wrong size on RBBlueprintLibrary_ClientOnly_PlayVOOnActor");
static_assert(offsetof(RBBlueprintLibrary_ClientOnly_PlayVOOnActor, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_ClientOnly_PlayVOOnActor::AkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ClientOnly_PlayVOOnActor, Owner) == 0x000008, "Member 'RBBlueprintLibrary_ClientOnly_PlayVOOnActor::Owner' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ClientOnly_PlayVOOnActor, VOPriority) == 0x000010, "Member 'RBBlueprintLibrary_ClientOnly_PlayVOOnActor::VOPriority' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ClientOnly_PlayVOOnActor, ForcedRandomSeed) == 0x000014, "Member 'RBBlueprintLibrary_ClientOnly_PlayVOOnActor::ForcedRandomSeed' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ClientOnly_QueueVOOnActor
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_ClientOnly_QueueVOOnActor final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOPriority                                   VOPriority;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFF[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrePlayDelay;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedRandomSeed;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E00[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_ClientOnly_QueueVOOnActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ClientOnly_QueueVOOnActor");
static_assert(sizeof(RBBlueprintLibrary_ClientOnly_QueueVOOnActor) == 0x000020, "Wrong size on RBBlueprintLibrary_ClientOnly_QueueVOOnActor");
static_assert(offsetof(RBBlueprintLibrary_ClientOnly_QueueVOOnActor, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_ClientOnly_QueueVOOnActor::AkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ClientOnly_QueueVOOnActor, Owner) == 0x000008, "Member 'RBBlueprintLibrary_ClientOnly_QueueVOOnActor::Owner' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ClientOnly_QueueVOOnActor, VOPriority) == 0x000010, "Member 'RBBlueprintLibrary_ClientOnly_QueueVOOnActor::VOPriority' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ClientOnly_QueueVOOnActor, PrePlayDelay) == 0x000014, "Member 'RBBlueprintLibrary_ClientOnly_QueueVOOnActor::PrePlayDelay' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ClientOnly_QueueVOOnActor, ForcedRandomSeed) == 0x000018, "Member 'RBBlueprintLibrary_ClientOnly_QueueVOOnActor::ForcedRandomSeed' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.CompleteSingleObjective
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_CompleteSingleObjective final
{
public:
	class ARBPawn*                                PlayerCompleting;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ObjectiveActor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_CompleteSingleObjective) == 0x000008, "Wrong alignment on RBBlueprintLibrary_CompleteSingleObjective");
static_assert(sizeof(RBBlueprintLibrary_CompleteSingleObjective) == 0x000010, "Wrong size on RBBlueprintLibrary_CompleteSingleObjective");
static_assert(offsetof(RBBlueprintLibrary_CompleteSingleObjective, PlayerCompleting) == 0x000000, "Member 'RBBlueprintLibrary_CompleteSingleObjective::PlayerCompleting' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_CompleteSingleObjective, ObjectiveActor) == 0x000008, "Member 'RBBlueprintLibrary_CompleteSingleObjective::ObjectiveActor' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ConfigurableBoolToString
// 0x0070 (0x0070 - 0x0000)
struct RBBlueprintLibrary_ConfigurableBoolToString final
{
public:
	struct FConfigurableBool                      ConfigurableBool;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_ConfigurableBoolToString) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ConfigurableBoolToString");
static_assert(sizeof(RBBlueprintLibrary_ConfigurableBoolToString) == 0x000070, "Wrong size on RBBlueprintLibrary_ConfigurableBoolToString");
static_assert(offsetof(RBBlueprintLibrary_ConfigurableBoolToString, ConfigurableBool) == 0x000000, "Member 'RBBlueprintLibrary_ConfigurableBoolToString::ConfigurableBool' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ConfigurableBoolToString, ReturnValue) == 0x000060, "Member 'RBBlueprintLibrary_ConfigurableBoolToString::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ConfigurableFloatToString
// 0x00D8 (0x00D8 - 0x0000)
struct RBBlueprintLibrary_ConfigurableFloatToString final
{
public:
	struct FConfigurableFloat                     ConfigurableFloat;                                 // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00C8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_ConfigurableFloatToString) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ConfigurableFloatToString");
static_assert(sizeof(RBBlueprintLibrary_ConfigurableFloatToString) == 0x0000D8, "Wrong size on RBBlueprintLibrary_ConfigurableFloatToString");
static_assert(offsetof(RBBlueprintLibrary_ConfigurableFloatToString, ConfigurableFloat) == 0x000000, "Member 'RBBlueprintLibrary_ConfigurableFloatToString::ConfigurableFloat' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ConfigurableFloatToString, ReturnValue) == 0x0000C8, "Member 'RBBlueprintLibrary_ConfigurableFloatToString::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ConfigurableIntToString
// 0x00D8 (0x00D8 - 0x0000)
struct RBBlueprintLibrary_ConfigurableIntToString final
{
public:
	struct FConfigurableInt                       ConfigurableInt;                                   // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x00C8(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_ConfigurableIntToString) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ConfigurableIntToString");
static_assert(sizeof(RBBlueprintLibrary_ConfigurableIntToString) == 0x0000D8, "Wrong size on RBBlueprintLibrary_ConfigurableIntToString");
static_assert(offsetof(RBBlueprintLibrary_ConfigurableIntToString, ConfigurableInt) == 0x000000, "Member 'RBBlueprintLibrary_ConfigurableIntToString::ConfigurableInt' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ConfigurableIntToString, ReturnValue) == 0x0000C8, "Member 'RBBlueprintLibrary_ConfigurableIntToString::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.DefaultTestInteractionAngle
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_DefaultTestInteractionAngle final
{
public:
	const class UObject*                          InteractableObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ARBPawn*                          InteractorPawn;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsYFacing;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E01[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_DefaultTestInteractionAngle) == 0x000008, "Wrong alignment on RBBlueprintLibrary_DefaultTestInteractionAngle");
static_assert(sizeof(RBBlueprintLibrary_DefaultTestInteractionAngle) == 0x000018, "Wrong size on RBBlueprintLibrary_DefaultTestInteractionAngle");
static_assert(offsetof(RBBlueprintLibrary_DefaultTestInteractionAngle, InteractableObject) == 0x000000, "Member 'RBBlueprintLibrary_DefaultTestInteractionAngle::InteractableObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_DefaultTestInteractionAngle, InteractorPawn) == 0x000008, "Member 'RBBlueprintLibrary_DefaultTestInteractionAngle::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_DefaultTestInteractionAngle, bIsYFacing) == 0x000010, "Member 'RBBlueprintLibrary_DefaultTestInteractionAngle::bIsYFacing' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_DefaultTestInteractionAngle, ReturnValue) == 0x000011, "Member 'RBBlueprintLibrary_DefaultTestInteractionAngle::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.DestroyComponentHierarchy
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_DestroyComponentHierarchy final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_DestroyComponentHierarchy) == 0x000008, "Wrong alignment on RBBlueprintLibrary_DestroyComponentHierarchy");
static_assert(sizeof(RBBlueprintLibrary_DestroyComponentHierarchy) == 0x000008, "Wrong size on RBBlueprintLibrary_DestroyComponentHierarchy");
static_assert(offsetof(RBBlueprintLibrary_DestroyComponentHierarchy, Component) == 0x000000, "Member 'RBBlueprintLibrary_DestroyComponentHierarchy::Component' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.DisablePawnAnimOptims
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_DisablePawnAnimOptims final
{
public:
	class ARBPawn*                                RBPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableOptims;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E02[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_DisablePawnAnimOptims) == 0x000008, "Wrong alignment on RBBlueprintLibrary_DisablePawnAnimOptims");
static_assert(sizeof(RBBlueprintLibrary_DisablePawnAnimOptims) == 0x000010, "Wrong size on RBBlueprintLibrary_DisablePawnAnimOptims");
static_assert(offsetof(RBBlueprintLibrary_DisablePawnAnimOptims, RBPawn) == 0x000000, "Member 'RBBlueprintLibrary_DisablePawnAnimOptims::RBPawn' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_DisablePawnAnimOptims, bDisableOptims) == 0x000008, "Member 'RBBlueprintLibrary_DisablePawnAnimOptims::bDisableOptims' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_ActivateCameraShake
// 0x00A8 (0x00A8 - 0x0000)
struct RBBlueprintLibrary_Dispatch_ActivateCameraShake final
{
public:
	struct FCameraShakeData                       ShakeData;                                         // 0x0000(0x0090)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SourceLocation;                                    // 0x0090(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E03[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ShakeOwner;                                        // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_ActivateCameraShake) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_ActivateCameraShake");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_ActivateCameraShake) == 0x0000A8, "Wrong size on RBBlueprintLibrary_Dispatch_ActivateCameraShake");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_ActivateCameraShake, ShakeData) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_ActivateCameraShake::ShakeData' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_ActivateCameraShake, SourceLocation) == 0x000090, "Member 'RBBlueprintLibrary_Dispatch_ActivateCameraShake::SourceLocation' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_ActivateCameraShake, ShakeOwner) == 0x0000A0, "Member 'RBBlueprintLibrary_Dispatch_ActivateCameraShake::ShakeOwner' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_ActivateVFX
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_Dispatch_ActivateVFX final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_ActivateVFX) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_ActivateVFX");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_ActivateVFX) == 0x000008, "Wrong size on RBBlueprintLibrary_Dispatch_ActivateVFX");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_ActivateVFX, Actor) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_ActivateVFX::Actor' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PlaySingleShotMusicTrack
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack final
{
public:
	class UAkAudioEvent*                          MusicTrack;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseLevelMusic;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E04[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack) == 0x000018, "Wrong size on RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack, MusicTrack) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack::MusicTrack' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack, Player) == 0x000008, "Member 'RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack, bPauseLevelMusic) == 0x000010, "Member 'RBBlueprintLibrary_Dispatch_PlaySingleShotMusicTrack::bPauseLevelMusic' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PlayVOOnActor
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PlayVOOnActor final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOPriority                                   VOPriority;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOnPlayersWatch;                               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E05[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PlayVOOnActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PlayVOOnActor");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PlayVOOnActor) == 0x000018, "Wrong size on RBBlueprintLibrary_Dispatch_PlayVOOnActor");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlayVOOnActor, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PlayVOOnActor::AkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlayVOOnActor, Owner) == 0x000008, "Member 'RBBlueprintLibrary_Dispatch_PlayVOOnActor::Owner' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlayVOOnActor, VOPriority) == 0x000010, "Member 'RBBlueprintLibrary_Dispatch_PlayVOOnActor::VOPriority' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlayVOOnActor, bPlayOnPlayersWatch) == 0x000011, "Member 'RBBlueprintLibrary_Dispatch_PlayVOOnActor::bPlayOnPlayersWatch' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PlayVOOnNarrator
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PlayVOOnNarrator final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOPriority                                   VOPriority;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E06[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PlayVOOnNarrator) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PlayVOOnNarrator");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PlayVOOnNarrator) == 0x000010, "Wrong size on RBBlueprintLibrary_Dispatch_PlayVOOnNarrator");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlayVOOnNarrator, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PlayVOOnNarrator::AkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlayVOOnNarrator, VOPriority) == 0x000008, "Member 'RBBlueprintLibrary_Dispatch_PlayVOOnNarrator::VOPriority' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PlayVOOnWatch
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PlayVOOnWatch final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PlayVOOnWatch) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PlayVOOnWatch");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PlayVOOnWatch) == 0x000008, "Wrong size on RBBlueprintLibrary_Dispatch_PlayVOOnWatch");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PlayVOOnWatch, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PlayVOOnWatch::AkEvent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PostAkEvent
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PostAkEvent final
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PostAkEvent) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PostAkEvent");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PostAkEvent) == 0x000010, "Wrong size on RBBlueprintLibrary_Dispatch_PostAkEvent");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PostAkEvent, AkComponent) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PostAkEvent::AkComponent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PostAkEvent, AkEvent) == 0x000008, "Member 'RBBlueprintLibrary_Dispatch_PostAkEvent::AkEvent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PostAkEventGlobal
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PostAkEventGlobal final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PostAkEventGlobal) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PostAkEventGlobal");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PostAkEventGlobal) == 0x000008, "Wrong size on RBBlueprintLibrary_Dispatch_PostAkEventGlobal");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PostAkEventGlobal, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PostAkEventGlobal::AkEvent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PostAkEventOnActor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PostAkEventOnActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PostAkEventOnActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PostAkEventOnActor");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PostAkEventOnActor) == 0x000010, "Wrong size on RBBlueprintLibrary_Dispatch_PostAkEventOnActor");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PostAkEventOnActor, Actor) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PostAkEventOnActor::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PostAkEventOnActor, AkEvent) == 0x000008, "Member 'RBBlueprintLibrary_Dispatch_PostAkEventOnActor::AkEvent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PostAssociatedAKEvent
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PostAssociatedAKEvent final
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PostAssociatedAKEvent) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PostAssociatedAKEvent");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PostAssociatedAKEvent) == 0x000008, "Wrong size on RBBlueprintLibrary_Dispatch_PostAssociatedAKEvent");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PostAssociatedAKEvent, AkComponent) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PostAssociatedAKEvent::AkComponent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PostAudioEventOnGroup
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PostAudioEventOnGroup final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PostAudioEventOnGroup) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PostAudioEventOnGroup");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PostAudioEventOnGroup) == 0x000010, "Wrong size on RBBlueprintLibrary_Dispatch_PostAudioEventOnGroup");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PostAudioEventOnGroup, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PostAudioEventOnGroup::AkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PostAudioEventOnGroup, GroupName) == 0x000008, "Member 'RBBlueprintLibrary_Dispatch_PostAudioEventOnGroup::GroupName' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_PostAudioEventOnIntercom
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_Dispatch_PostAudioEventOnIntercom final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_PostAudioEventOnIntercom) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_PostAudioEventOnIntercom");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_PostAudioEventOnIntercom) == 0x000008, "Wrong size on RBBlueprintLibrary_Dispatch_PostAudioEventOnIntercom");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_PostAudioEventOnIntercom, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_PostAudioEventOnIntercom::AkEvent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Dispatch_StopCameraShake
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_Dispatch_StopCameraShake final
{
public:
	bool                                          bInstantly;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E07[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ShakeOwner;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreOwnerCondition;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E08[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_Dispatch_StopCameraShake) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Dispatch_StopCameraShake");
static_assert(sizeof(RBBlueprintLibrary_Dispatch_StopCameraShake) == 0x000018, "Wrong size on RBBlueprintLibrary_Dispatch_StopCameraShake");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_StopCameraShake, bInstantly) == 0x000000, "Member 'RBBlueprintLibrary_Dispatch_StopCameraShake::bInstantly' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_StopCameraShake, ShakeOwner) == 0x000008, "Member 'RBBlueprintLibrary_Dispatch_StopCameraShake::ShakeOwner' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Dispatch_StopCameraShake, bIgnoreOwnerCondition) == 0x000010, "Member 'RBBlueprintLibrary_Dispatch_StopCameraShake::bIgnoreOwnerCondition' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Editor_SelectActors
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_Editor_SelectActors final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Editor_SelectActors) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Editor_SelectActors");
static_assert(sizeof(RBBlueprintLibrary_Editor_SelectActors) == 0x000010, "Wrong size on RBBlueprintLibrary_Editor_SelectActors");
static_assert(offsetof(RBBlueprintLibrary_Editor_SelectActors, Actors) == 0x000000, "Member 'RBBlueprintLibrary_Editor_SelectActors::Actors' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Error
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_Error final
{
public:
	class FString                                 ErrorText;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Error) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Error");
static_assert(sizeof(RBBlueprintLibrary_Error) == 0x000010, "Wrong size on RBBlueprintLibrary_Error");
static_assert(offsetof(RBBlueprintLibrary_Error, ErrorText) == 0x000000, "Member 'RBBlueprintLibrary_Error::ErrorText' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.EvalRuntimeFloatCurve
// 0x0098 (0x0098 - 0x0000)
struct RBBlueprintLibrary_EvalRuntimeFloatCurve final
{
public:
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E09[0x4];                                     // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_EvalRuntimeFloatCurve) == 0x000008, "Wrong alignment on RBBlueprintLibrary_EvalRuntimeFloatCurve");
static_assert(sizeof(RBBlueprintLibrary_EvalRuntimeFloatCurve) == 0x000098, "Wrong size on RBBlueprintLibrary_EvalRuntimeFloatCurve");
static_assert(offsetof(RBBlueprintLibrary_EvalRuntimeFloatCurve, Curve) == 0x000000, "Member 'RBBlueprintLibrary_EvalRuntimeFloatCurve::Curve' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_EvalRuntimeFloatCurve, Time) == 0x000088, "Member 'RBBlueprintLibrary_EvalRuntimeFloatCurve::Time' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_EvalRuntimeFloatCurve, DefaultValue) == 0x00008C, "Member 'RBBlueprintLibrary_EvalRuntimeFloatCurve::DefaultValue' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_EvalRuntimeFloatCurve, ReturnValue) == 0x000090, "Member 'RBBlueprintLibrary_EvalRuntimeFloatCurve::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FBoxIntersect
// 0x003C (0x003C - 0x0000)
struct RBBlueprintLibrary_FBoxIntersect final
{
public:
	struct FBox                                   boxA;                                              // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   boxB;                                              // 0x001C(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0A[0x3];                                     // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_FBoxIntersect) == 0x000004, "Wrong alignment on RBBlueprintLibrary_FBoxIntersect");
static_assert(sizeof(RBBlueprintLibrary_FBoxIntersect) == 0x00003C, "Wrong size on RBBlueprintLibrary_FBoxIntersect");
static_assert(offsetof(RBBlueprintLibrary_FBoxIntersect, boxA) == 0x000000, "Member 'RBBlueprintLibrary_FBoxIntersect::boxA' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FBoxIntersect, boxB) == 0x00001C, "Member 'RBBlueprintLibrary_FBoxIntersect::boxB' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FBoxIntersect, ReturnValue) == 0x000038, "Member 'RBBlueprintLibrary_FBoxIntersect::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FilterByRandomState
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_FilterByRandomState final
{
public:
	TArray<class AActor*>                         InActors;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIsStateA;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0B[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_FilterByRandomState) == 0x000008, "Wrong alignment on RBBlueprintLibrary_FilterByRandomState");
static_assert(sizeof(RBBlueprintLibrary_FilterByRandomState) == 0x000028, "Wrong size on RBBlueprintLibrary_FilterByRandomState");
static_assert(offsetof(RBBlueprintLibrary_FilterByRandomState, InActors) == 0x000000, "Member 'RBBlueprintLibrary_FilterByRandomState::InActors' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FilterByRandomState, bIsStateA) == 0x000010, "Member 'RBBlueprintLibrary_FilterByRandomState::bIsStateA' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FilterByRandomState, ReturnValue) == 0x000018, "Member 'RBBlueprintLibrary_FilterByRandomState::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FindAssociatedComponent
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_FindAssociatedComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_FindAssociatedComponent) == 0x000008, "Wrong alignment on RBBlueprintLibrary_FindAssociatedComponent");
static_assert(sizeof(RBBlueprintLibrary_FindAssociatedComponent) == 0x000018, "Wrong size on RBBlueprintLibrary_FindAssociatedComponent");
static_assert(offsetof(RBBlueprintLibrary_FindAssociatedComponent, Component) == 0x000000, "Member 'RBBlueprintLibrary_FindAssociatedComponent::Component' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindAssociatedComponent, ComponentClass) == 0x000008, "Member 'RBBlueprintLibrary_FindAssociatedComponent::ComponentClass' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindAssociatedComponent, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_FindAssociatedComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FindChildComponentByTag
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_FindChildComponentByTag final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_FindChildComponentByTag) == 0x000008, "Wrong alignment on RBBlueprintLibrary_FindChildComponentByTag");
static_assert(sizeof(RBBlueprintLibrary_FindChildComponentByTag) == 0x000020, "Wrong size on RBBlueprintLibrary_FindChildComponentByTag");
static_assert(offsetof(RBBlueprintLibrary_FindChildComponentByTag, Component) == 0x000000, "Member 'RBBlueprintLibrary_FindChildComponentByTag::Component' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindChildComponentByTag, Tag) == 0x000008, "Member 'RBBlueprintLibrary_FindChildComponentByTag::Tag' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindChildComponentByTag, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_FindChildComponentByTag::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FindCollisionUVFromHit
// 0x0094 (0x0094 - 0x0000)
struct RBBlueprintLibrary_FindCollisionUVFromHit final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector2D                              UV;                                                // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0C[0x3];                                     // 0x0091(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_FindCollisionUVFromHit) == 0x000004, "Wrong alignment on RBBlueprintLibrary_FindCollisionUVFromHit");
static_assert(sizeof(RBBlueprintLibrary_FindCollisionUVFromHit) == 0x000094, "Wrong size on RBBlueprintLibrary_FindCollisionUVFromHit");
static_assert(offsetof(RBBlueprintLibrary_FindCollisionUVFromHit, Hit) == 0x000000, "Member 'RBBlueprintLibrary_FindCollisionUVFromHit::Hit' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindCollisionUVFromHit, UV) == 0x000088, "Member 'RBBlueprintLibrary_FindCollisionUVFromHit::UV' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindCollisionUVFromHit, ReturnValue) == 0x000090, "Member 'RBBlueprintLibrary_FindCollisionUVFromHit::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FindFaceAnimSequenceFromLobbyData
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_FindFaceAnimSequenceFromLobbyData final
{
public:
	class FString                                 LineId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_FindFaceAnimSequenceFromLobbyData) == 0x000008, "Wrong alignment on RBBlueprintLibrary_FindFaceAnimSequenceFromLobbyData");
static_assert(sizeof(RBBlueprintLibrary_FindFaceAnimSequenceFromLobbyData) == 0x000018, "Wrong size on RBBlueprintLibrary_FindFaceAnimSequenceFromLobbyData");
static_assert(offsetof(RBBlueprintLibrary_FindFaceAnimSequenceFromLobbyData, LineId) == 0x000000, "Member 'RBBlueprintLibrary_FindFaceAnimSequenceFromLobbyData::LineId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindFaceAnimSequenceFromLobbyData, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_FindFaceAnimSequenceFromLobbyData::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FindFaceAnimSequenceFromTrialAsyncData
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_FindFaceAnimSequenceFromTrialAsyncData final
{
public:
	class FString                                 LineId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_FindFaceAnimSequenceFromTrialAsyncData) == 0x000008, "Wrong alignment on RBBlueprintLibrary_FindFaceAnimSequenceFromTrialAsyncData");
static_assert(sizeof(RBBlueprintLibrary_FindFaceAnimSequenceFromTrialAsyncData) == 0x000018, "Wrong size on RBBlueprintLibrary_FindFaceAnimSequenceFromTrialAsyncData");
static_assert(offsetof(RBBlueprintLibrary_FindFaceAnimSequenceFromTrialAsyncData, LineId) == 0x000000, "Member 'RBBlueprintLibrary_FindFaceAnimSequenceFromTrialAsyncData::LineId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindFaceAnimSequenceFromTrialAsyncData, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_FindFaceAnimSequenceFromTrialAsyncData::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FindQuatBetweenVectors
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_FindQuatBetweenVectors final
{
public:
	struct FVector                                Vec1;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vec2;                                              // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0D[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_FindQuatBetweenVectors) == 0x000010, "Wrong alignment on RBBlueprintLibrary_FindQuatBetweenVectors");
static_assert(sizeof(RBBlueprintLibrary_FindQuatBetweenVectors) == 0x000030, "Wrong size on RBBlueprintLibrary_FindQuatBetweenVectors");
static_assert(offsetof(RBBlueprintLibrary_FindQuatBetweenVectors, Vec1) == 0x000000, "Member 'RBBlueprintLibrary_FindQuatBetweenVectors::Vec1' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindQuatBetweenVectors, Vec2) == 0x00000C, "Member 'RBBlueprintLibrary_FindQuatBetweenVectors::Vec2' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FindQuatBetweenVectors, ReturnValue) == 0x000020, "Member 'RBBlueprintLibrary_FindQuatBetweenVectors::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FlipRelativeLocation
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_FlipRelativeLocation final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipX;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipY;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipZ;                                            // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0E[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_FlipRelativeLocation) == 0x000008, "Wrong alignment on RBBlueprintLibrary_FlipRelativeLocation");
static_assert(sizeof(RBBlueprintLibrary_FlipRelativeLocation) == 0x000010, "Wrong size on RBBlueprintLibrary_FlipRelativeLocation");
static_assert(offsetof(RBBlueprintLibrary_FlipRelativeLocation, Component) == 0x000000, "Member 'RBBlueprintLibrary_FlipRelativeLocation::Component' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FlipRelativeLocation, bFlipX) == 0x000008, "Member 'RBBlueprintLibrary_FlipRelativeLocation::bFlipX' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FlipRelativeLocation, bFlipY) == 0x000009, "Member 'RBBlueprintLibrary_FlipRelativeLocation::bFlipY' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FlipRelativeLocation, bFlipZ) == 0x00000A, "Member 'RBBlueprintLibrary_FlipRelativeLocation::bFlipZ' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ForceSpecificClosetPlayerRespawnPoint
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_ForceSpecificClosetPlayerRespawnPoint final
{
public:
	class ARBMonsterCloset*                       Closet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_ForceSpecificClosetPlayerRespawnPoint) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ForceSpecificClosetPlayerRespawnPoint");
static_assert(sizeof(RBBlueprintLibrary_ForceSpecificClosetPlayerRespawnPoint) == 0x000008, "Wrong size on RBBlueprintLibrary_ForceSpecificClosetPlayerRespawnPoint");
static_assert(offsetof(RBBlueprintLibrary_ForceSpecificClosetPlayerRespawnPoint, Closet) == 0x000000, "Member 'RBBlueprintLibrary_ForceSpecificClosetPlayerRespawnPoint::Closet' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FormatTimeFromFloat
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_FormatTimeFromFloat final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_FormatTimeFromFloat) == 0x000008, "Wrong alignment on RBBlueprintLibrary_FormatTimeFromFloat");
static_assert(sizeof(RBBlueprintLibrary_FormatTimeFromFloat) == 0x000018, "Wrong size on RBBlueprintLibrary_FormatTimeFromFloat");
static_assert(offsetof(RBBlueprintLibrary_FormatTimeFromFloat, Seconds) == 0x000000, "Member 'RBBlueprintLibrary_FormatTimeFromFloat::Seconds' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FormatTimeFromFloat, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_FormatTimeFromFloat::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FormatTimeFromInt
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_FormatTimeFromInt final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E10[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_FormatTimeFromInt) == 0x000008, "Wrong alignment on RBBlueprintLibrary_FormatTimeFromInt");
static_assert(sizeof(RBBlueprintLibrary_FormatTimeFromInt) == 0x000018, "Wrong size on RBBlueprintLibrary_FormatTimeFromInt");
static_assert(offsetof(RBBlueprintLibrary_FormatTimeFromInt, Seconds) == 0x000000, "Member 'RBBlueprintLibrary_FormatTimeFromInt::Seconds' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FormatTimeFromInt, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_FormatTimeFromInt::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.FromUnixTimestamp
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_FromUnixTimestamp final
{
public:
	int64                                         Timestamp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_FromUnixTimestamp) == 0x000008, "Wrong alignment on RBBlueprintLibrary_FromUnixTimestamp");
static_assert(sizeof(RBBlueprintLibrary_FromUnixTimestamp) == 0x000010, "Wrong size on RBBlueprintLibrary_FromUnixTimestamp");
static_assert(offsetof(RBBlueprintLibrary_FromUnixTimestamp, Timestamp) == 0x000000, "Member 'RBBlueprintLibrary_FromUnixTimestamp::Timestamp' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_FromUnixTimestamp, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_FromUnixTimestamp::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GenerateDeterministicRandomString
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GenerateDeterministicRandomString final
{
public:
	int32                                         RandomSeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NbOfCharactersNeeded;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GenerateDeterministicRandomString) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GenerateDeterministicRandomString");
static_assert(sizeof(RBBlueprintLibrary_GenerateDeterministicRandomString) == 0x000018, "Wrong size on RBBlueprintLibrary_GenerateDeterministicRandomString");
static_assert(offsetof(RBBlueprintLibrary_GenerateDeterministicRandomString, RandomSeed) == 0x000000, "Member 'RBBlueprintLibrary_GenerateDeterministicRandomString::RandomSeed' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GenerateDeterministicRandomString, NbOfCharactersNeeded) == 0x000004, "Member 'RBBlueprintLibrary_GenerateDeterministicRandomString::NbOfCharactersNeeded' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GenerateDeterministicRandomString, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GenerateDeterministicRandomString::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GenerateRandomSeed
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GenerateRandomSeed final
{
public:
	class UObject*                                RandomSeedObject;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E11[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GenerateRandomSeed) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GenerateRandomSeed");
static_assert(sizeof(RBBlueprintLibrary_GenerateRandomSeed) == 0x000010, "Wrong size on RBBlueprintLibrary_GenerateRandomSeed");
static_assert(offsetof(RBBlueprintLibrary_GenerateRandomSeed, RandomSeedObject) == 0x000000, "Member 'RBBlueprintLibrary_GenerateRandomSeed::RandomSeedObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GenerateRandomSeed, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GenerateRandomSeed::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GenerateRandomSeedNonDeterministic
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GenerateRandomSeedNonDeterministic final
{
public:
	class UObject*                                RandomSeedObject;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E12[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GenerateRandomSeedNonDeterministic) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GenerateRandomSeedNonDeterministic");
static_assert(sizeof(RBBlueprintLibrary_GenerateRandomSeedNonDeterministic) == 0x000010, "Wrong size on RBBlueprintLibrary_GenerateRandomSeedNonDeterministic");
static_assert(offsetof(RBBlueprintLibrary_GenerateRandomSeedNonDeterministic, RandomSeedObject) == 0x000000, "Member 'RBBlueprintLibrary_GenerateRandomSeedNonDeterministic::RandomSeedObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GenerateRandomSeedNonDeterministic, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GenerateRandomSeedNonDeterministic::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GenerateRandomString
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GenerateRandomString final
{
public:
	int32                                         NbOfCharactersNeeded;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E13[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GenerateRandomString) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GenerateRandomString");
static_assert(sizeof(RBBlueprintLibrary_GenerateRandomString) == 0x000018, "Wrong size on RBBlueprintLibrary_GenerateRandomString");
static_assert(offsetof(RBBlueprintLibrary_GenerateRandomString, NbOfCharactersNeeded) == 0x000000, "Member 'RBBlueprintLibrary_GenerateRandomString::NbOfCharactersNeeded' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GenerateRandomString, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GenerateRandomString::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetActiveSkillClass
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetActiveSkillClass final
{
public:
	EActiveSkillType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E14[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ARBActiveSkill>             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetActiveSkillClass) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetActiveSkillClass");
static_assert(sizeof(RBBlueprintLibrary_GetActiveSkillClass) == 0x000010, "Wrong size on RBBlueprintLibrary_GetActiveSkillClass");
static_assert(offsetof(RBBlueprintLibrary_GetActiveSkillClass, Type) == 0x000000, "Member 'RBBlueprintLibrary_GetActiveSkillClass::Type' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetActiveSkillClass, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetActiveSkillClass::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetActiveSkillCommonParams
// 0x0080 (0x0080 - 0x0000)
struct RBBlueprintLibrary_GetActiveSkillCommonParams final
{
public:
	EActiveSkillType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E15[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveSkillCommonParams               ReturnValue;                                       // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetActiveSkillCommonParams) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetActiveSkillCommonParams");
static_assert(sizeof(RBBlueprintLibrary_GetActiveSkillCommonParams) == 0x000080, "Wrong size on RBBlueprintLibrary_GetActiveSkillCommonParams");
static_assert(offsetof(RBBlueprintLibrary_GetActiveSkillCommonParams, Type) == 0x000000, "Member 'RBBlueprintLibrary_GetActiveSkillCommonParams::Type' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetActiveSkillCommonParams, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetActiveSkillCommonParams::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetActiveSkillCommonParamsById
// 0x0080 (0x0080 - 0x0000)
struct RBBlueprintLibrary_GetActiveSkillCommonParamsById final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveSkillCommonParams               ReturnValue;                                       // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetActiveSkillCommonParamsById) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetActiveSkillCommonParamsById");
static_assert(sizeof(RBBlueprintLibrary_GetActiveSkillCommonParamsById) == 0x000080, "Wrong size on RBBlueprintLibrary_GetActiveSkillCommonParamsById");
static_assert(offsetof(RBBlueprintLibrary_GetActiveSkillCommonParamsById, ID) == 0x000000, "Member 'RBBlueprintLibrary_GetActiveSkillCommonParamsById::ID' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetActiveSkillCommonParamsById, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetActiveSkillCommonParamsById::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetActorSelectedInEditor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetActorSelectedInEditor final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetActorSelectedInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetActorSelectedInEditor");
static_assert(sizeof(RBBlueprintLibrary_GetActorSelectedInEditor) == 0x000010, "Wrong size on RBBlueprintLibrary_GetActorSelectedInEditor");
static_assert(offsetof(RBBlueprintLibrary_GetActorSelectedInEditor, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetActorSelectedInEditor::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAllPlayerStates
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetAllPlayerStates final
{
public:
	TArray<class ARBPlayerState*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetAllPlayerStates) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetAllPlayerStates");
static_assert(sizeof(RBBlueprintLibrary_GetAllPlayerStates) == 0x000010, "Wrong size on RBBlueprintLibrary_GetAllPlayerStates");
static_assert(offsetof(RBBlueprintLibrary_GetAllPlayerStates, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetAllPlayerStates::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAllPushableCarts
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetAllPushableCarts final
{
public:
	TArray<class ARBBasePushable*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetAllPushableCarts) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetAllPushableCarts");
static_assert(sizeof(RBBlueprintLibrary_GetAllPushableCarts) == 0x000010, "Wrong size on RBBlueprintLibrary_GetAllPushableCarts");
static_assert(offsetof(RBBlueprintLibrary_GetAllPushableCarts, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetAllPushableCarts::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAnchorOffsetTransform
// 0x0040 (0x0040 - 0x0000)
struct RBBlueprintLibrary_GetAnchorOffsetTransform final
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E16[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetAnchorOffsetTransform) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetAnchorOffsetTransform");
static_assert(sizeof(RBBlueprintLibrary_GetAnchorOffsetTransform) == 0x000040, "Wrong size on RBBlueprintLibrary_GetAnchorOffsetTransform");
static_assert(offsetof(RBBlueprintLibrary_GetAnchorOffsetTransform, Sequence) == 0x000000, "Member 'RBBlueprintLibrary_GetAnchorOffsetTransform::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnchorOffsetTransform, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetAnchorOffsetTransform::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAnchorOffsetTransformFromGhostAnimation
// 0x0040 (0x0040 - 0x0000)
struct RBBlueprintLibrary_GetAnchorOffsetTransformFromGhostAnimation final
{
public:
	TSubclassOf<class URBGhostAnimInstance>       GhostAnimClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E17[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetAnchorOffsetTransformFromGhostAnimation) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetAnchorOffsetTransformFromGhostAnimation");
static_assert(sizeof(RBBlueprintLibrary_GetAnchorOffsetTransformFromGhostAnimation) == 0x000040, "Wrong size on RBBlueprintLibrary_GetAnchorOffsetTransformFromGhostAnimation");
static_assert(offsetof(RBBlueprintLibrary_GetAnchorOffsetTransformFromGhostAnimation, GhostAnimClass) == 0x000000, "Member 'RBBlueprintLibrary_GetAnchorOffsetTransformFromGhostAnimation::GhostAnimClass' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnchorOffsetTransformFromGhostAnimation, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetAnchorOffsetTransformFromGhostAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAnchorTransformForInteraction
// 0x0040 (0x0040 - 0x0000)
struct RBBlueprintLibrary_GetAnchorTransformForInteraction final
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InSceneComponent;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetAnchorTransformForInteraction) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetAnchorTransformForInteraction");
static_assert(sizeof(RBBlueprintLibrary_GetAnchorTransformForInteraction) == 0x000040, "Wrong size on RBBlueprintLibrary_GetAnchorTransformForInteraction");
static_assert(offsetof(RBBlueprintLibrary_GetAnchorTransformForInteraction, Sequence) == 0x000000, "Member 'RBBlueprintLibrary_GetAnchorTransformForInteraction::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnchorTransformForInteraction, InSceneComponent) == 0x000008, "Member 'RBBlueprintLibrary_GetAnchorTransformForInteraction::InSceneComponent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnchorTransformForInteraction, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetAnchorTransformForInteraction::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAnimBoneTransform
// 0x0050 (0x0050 - 0x0000)
struct RBBlueprintLibrary_GetAnimBoneTransform final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    AnimAsset;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E18[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetAnimBoneTransform) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetAnimBoneTransform");
static_assert(sizeof(RBBlueprintLibrary_GetAnimBoneTransform) == 0x000050, "Wrong size on RBBlueprintLibrary_GetAnimBoneTransform");
static_assert(offsetof(RBBlueprintLibrary_GetAnimBoneTransform, SkeletalMesh) == 0x000000, "Member 'RBBlueprintLibrary_GetAnimBoneTransform::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnimBoneTransform, AnimAsset) == 0x000008, "Member 'RBBlueprintLibrary_GetAnimBoneTransform::AnimAsset' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnimBoneTransform, BoneName) == 0x000010, "Member 'RBBlueprintLibrary_GetAnimBoneTransform::BoneName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnimBoneTransform, Time) == 0x000018, "Member 'RBBlueprintLibrary_GetAnimBoneTransform::Time' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnimBoneTransform, ReturnValue) == 0x000020, "Member 'RBBlueprintLibrary_GetAnimBoneTransform::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAnimPlayLength
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetAnimPlayLength final
{
public:
	class UAnimSequence*                          AnimSeqence;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E19[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetAnimPlayLength) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetAnimPlayLength");
static_assert(sizeof(RBBlueprintLibrary_GetAnimPlayLength) == 0x000010, "Wrong size on RBBlueprintLibrary_GetAnimPlayLength");
static_assert(offsetof(RBBlueprintLibrary_GetAnimPlayLength, AnimSeqence) == 0x000000, "Member 'RBBlueprintLibrary_GetAnimPlayLength::AnimSeqence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnimPlayLength, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetAnimPlayLength::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAnimTimeMatchForCurve
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_GetAnimTimeMatchForCurve final
{
public:
	class UAnimSequence*                          AnimSequence;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveValue;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromEnd;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1A[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetAnimTimeMatchForCurve) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetAnimTimeMatchForCurve");
static_assert(sizeof(RBBlueprintLibrary_GetAnimTimeMatchForCurve) == 0x000020, "Wrong size on RBBlueprintLibrary_GetAnimTimeMatchForCurve");
static_assert(offsetof(RBBlueprintLibrary_GetAnimTimeMatchForCurve, AnimSequence) == 0x000000, "Member 'RBBlueprintLibrary_GetAnimTimeMatchForCurve::AnimSequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnimTimeMatchForCurve, CurveName) == 0x000008, "Member 'RBBlueprintLibrary_GetAnimTimeMatchForCurve::CurveName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnimTimeMatchForCurve, CurveValue) == 0x000010, "Member 'RBBlueprintLibrary_GetAnimTimeMatchForCurve::CurveValue' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnimTimeMatchForCurve, bFromEnd) == 0x000014, "Member 'RBBlueprintLibrary_GetAnimTimeMatchForCurve::bFromEnd' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetAnimTimeMatchForCurve, ReturnValue) == 0x000018, "Member 'RBBlueprintLibrary_GetAnimTimeMatchForCurve::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAnyAlivePlayer
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetAnyAlivePlayer final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetAnyAlivePlayer) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetAnyAlivePlayer");
static_assert(sizeof(RBBlueprintLibrary_GetAnyAlivePlayer) == 0x000008, "Wrong size on RBBlueprintLibrary_GetAnyAlivePlayer");
static_assert(offsetof(RBBlueprintLibrary_GetAnyAlivePlayer, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetAnyAlivePlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetAnyPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetAnyPlayer final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetAnyPlayer) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetAnyPlayer");
static_assert(sizeof(RBBlueprintLibrary_GetAnyPlayer) == 0x000008, "Wrong size on RBBlueprintLibrary_GetAnyPlayer");
static_assert(offsetof(RBBlueprintLibrary_GetAnyPlayer, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetAnyPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetBinariesVersion
// 0x0004 (0x0004 - 0x0000)
struct RBBlueprintLibrary_GetBinariesVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetBinariesVersion) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetBinariesVersion");
static_assert(sizeof(RBBlueprintLibrary_GetBinariesVersion) == 0x000004, "Wrong size on RBBlueprintLibrary_GetBinariesVersion");
static_assert(offsetof(RBBlueprintLibrary_GetBinariesVersion, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetBinariesVersion::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetBlacklightFromRoom
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetBlacklightFromRoom final
{
public:
	class ARBRoom*                                Room;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBBlacklight*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetBlacklightFromRoom) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetBlacklightFromRoom");
static_assert(sizeof(RBBlueprintLibrary_GetBlacklightFromRoom) == 0x000010, "Wrong size on RBBlueprintLibrary_GetBlacklightFromRoom");
static_assert(offsetof(RBBlueprintLibrary_GetBlacklightFromRoom, Room) == 0x000000, "Member 'RBBlueprintLibrary_GetBlacklightFromRoom::Room' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetBlacklightFromRoom, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetBlacklightFromRoom::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetBoneTransformForAnimation
// 0x0050 (0x0050 - 0x0000)
struct RBBlueprintLibrary_GetBoneTransformForAnimation final
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvalTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1C[0xC];                                     // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetBoneTransformForAnimation) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetBoneTransformForAnimation");
static_assert(sizeof(RBBlueprintLibrary_GetBoneTransformForAnimation) == 0x000050, "Wrong size on RBBlueprintLibrary_GetBoneTransformForAnimation");
static_assert(offsetof(RBBlueprintLibrary_GetBoneTransformForAnimation, Sequence) == 0x000000, "Member 'RBBlueprintLibrary_GetBoneTransformForAnimation::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetBoneTransformForAnimation, BoneName) == 0x000008, "Member 'RBBlueprintLibrary_GetBoneTransformForAnimation::BoneName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetBoneTransformForAnimation, EvalTime) == 0x000010, "Member 'RBBlueprintLibrary_GetBoneTransformForAnimation::EvalTime' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetBoneTransformForAnimation, ReturnValue) == 0x000020, "Member 'RBBlueprintLibrary_GetBoneTransformForAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetBoolValue
// 0x0068 (0x0068 - 0x0000)
struct RBBlueprintLibrary_GetBoolValue final
{
public:
	struct FConfigurableBool                      ConfigurableBool;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1D[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetBoolValue) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetBoolValue");
static_assert(sizeof(RBBlueprintLibrary_GetBoolValue) == 0x000068, "Wrong size on RBBlueprintLibrary_GetBoolValue");
static_assert(offsetof(RBBlueprintLibrary_GetBoolValue, ConfigurableBool) == 0x000000, "Member 'RBBlueprintLibrary_GetBoolValue::ConfigurableBool' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetBoolValue, ReturnValue) == 0x000060, "Member 'RBBlueprintLibrary_GetBoolValue::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetBoundsFromStaticMeshCollision
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetBoundsFromStaticMeshCollision final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBox>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetBoundsFromStaticMeshCollision) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetBoundsFromStaticMeshCollision");
static_assert(sizeof(RBBlueprintLibrary_GetBoundsFromStaticMeshCollision) == 0x000018, "Wrong size on RBBlueprintLibrary_GetBoundsFromStaticMeshCollision");
static_assert(offsetof(RBBlueprintLibrary_GetBoundsFromStaticMeshCollision, StaticMesh) == 0x000000, "Member 'RBBlueprintLibrary_GetBoundsFromStaticMeshCollision::StaticMesh' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetBoundsFromStaticMeshCollision, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetBoundsFromStaticMeshCollision::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetBoxFromPositions
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_GetBoxFromPositions final
{
public:
	TArray<struct FVector>                        Positions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0010(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1E[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetBoxFromPositions) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetBoxFromPositions");
static_assert(sizeof(RBBlueprintLibrary_GetBoxFromPositions) == 0x000030, "Wrong size on RBBlueprintLibrary_GetBoxFromPositions");
static_assert(offsetof(RBBlueprintLibrary_GetBoxFromPositions, Positions) == 0x000000, "Member 'RBBlueprintLibrary_GetBoxFromPositions::Positions' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetBoxFromPositions, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetBoxFromPositions::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetChildComponentByClass
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetChildComponentByClass final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USceneComponent>            ClassOf;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetChildComponentByClass) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetChildComponentByClass");
static_assert(sizeof(RBBlueprintLibrary_GetChildComponentByClass) == 0x000018, "Wrong size on RBBlueprintLibrary_GetChildComponentByClass");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentByClass, Component) == 0x000000, "Member 'RBBlueprintLibrary_GetChildComponentByClass::Component' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentByClass, ClassOf) == 0x000008, "Member 'RBBlueprintLibrary_GetChildComponentByClass::ClassOf' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentByClass, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetChildComponentByClass::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetChildComponentByTag
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetChildComponentByTag final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentTag;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        OutComponent;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetChildComponentByTag) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetChildComponentByTag");
static_assert(sizeof(RBBlueprintLibrary_GetChildComponentByTag) == 0x000018, "Wrong size on RBBlueprintLibrary_GetChildComponentByTag");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentByTag, Component) == 0x000000, "Member 'RBBlueprintLibrary_GetChildComponentByTag::Component' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentByTag, ComponentTag) == 0x000008, "Member 'RBBlueprintLibrary_GetChildComponentByTag::ComponentTag' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentByTag, OutComponent) == 0x000010, "Member 'RBBlueprintLibrary_GetChildComponentByTag::OutComponent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetChildComponentsByClass
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_GetChildComponentsByClass final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USceneComponent>            ClassOf;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                OutComponents;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetChildComponentsByClass) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetChildComponentsByClass");
static_assert(sizeof(RBBlueprintLibrary_GetChildComponentsByClass) == 0x000020, "Wrong size on RBBlueprintLibrary_GetChildComponentsByClass");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentsByClass, Component) == 0x000000, "Member 'RBBlueprintLibrary_GetChildComponentsByClass::Component' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentsByClass, ClassOf) == 0x000008, "Member 'RBBlueprintLibrary_GetChildComponentsByClass::ClassOf' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentsByClass, OutComponents) == 0x000010, "Member 'RBBlueprintLibrary_GetChildComponentsByClass::OutComponents' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetChildComponentsByTag
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_GetChildComponentsByTag final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ComponentTag;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                OutComponents;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetChildComponentsByTag) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetChildComponentsByTag");
static_assert(sizeof(RBBlueprintLibrary_GetChildComponentsByTag) == 0x000020, "Wrong size on RBBlueprintLibrary_GetChildComponentsByTag");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentsByTag, Component) == 0x000000, "Member 'RBBlueprintLibrary_GetChildComponentsByTag::Component' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentsByTag, ComponentTag) == 0x000008, "Member 'RBBlueprintLibrary_GetChildComponentsByTag::ComponentTag' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetChildComponentsByTag, OutComponents) == 0x000010, "Member 'RBBlueprintLibrary_GetChildComponentsByTag::OutComponents' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetChunkInstallManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetChunkInstallManager final
{
public:
	class URBChunkInstallManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetChunkInstallManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetChunkInstallManager");
static_assert(sizeof(RBBlueprintLibrary_GetChunkInstallManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetChunkInstallManager");
static_assert(offsetof(RBBlueprintLibrary_GetChunkInstallManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetChunkInstallManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetClosestPushCartGoalManager
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetClosestPushCartGoalManager final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E1F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPushCartGoalManager*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetClosestPushCartGoalManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetClosestPushCartGoalManager");
static_assert(sizeof(RBBlueprintLibrary_GetClosestPushCartGoalManager) == 0x000018, "Wrong size on RBBlueprintLibrary_GetClosestPushCartGoalManager");
static_assert(offsetof(RBBlueprintLibrary_GetClosestPushCartGoalManager, Position) == 0x000000, "Member 'RBBlueprintLibrary_GetClosestPushCartGoalManager::Position' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetClosestPushCartGoalManager, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetClosestPushCartGoalManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetCollectibleDocumentsConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetCollectibleDocumentsConfig final
{
public:
	class URBCollectibleDocumentsConfig*          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetCollectibleDocumentsConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetCollectibleDocumentsConfig");
static_assert(sizeof(RBBlueprintLibrary_GetCollectibleDocumentsConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetCollectibleDocumentsConfig");
static_assert(offsetof(RBBlueprintLibrary_GetCollectibleDocumentsConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetCollectibleDocumentsConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetComponentByClass
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_GetComponentByClass final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ClassOf;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                OutComponents;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetComponentByClass) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetComponentByClass");
static_assert(sizeof(RBBlueprintLibrary_GetComponentByClass) == 0x000020, "Wrong size on RBBlueprintLibrary_GetComponentByClass");
static_assert(offsetof(RBBlueprintLibrary_GetComponentByClass, Actor) == 0x000000, "Member 'RBBlueprintLibrary_GetComponentByClass::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetComponentByClass, ClassOf) == 0x000008, "Member 'RBBlueprintLibrary_GetComponentByClass::ClassOf' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetComponentByClass, OutComponents) == 0x000010, "Member 'RBBlueprintLibrary_GetComponentByClass::OutComponents' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetComponentFromSelector
// 0x0050 (0x0050 - 0x0000)
struct RBBlueprintLibrary_GetComponentFromSelector final
{
public:
	struct FRBComponentSelector                   ComponentSelector;                                 // 0x0000(0x0040)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0048(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetComponentFromSelector) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetComponentFromSelector");
static_assert(sizeof(RBBlueprintLibrary_GetComponentFromSelector) == 0x000050, "Wrong size on RBBlueprintLibrary_GetComponentFromSelector");
static_assert(offsetof(RBBlueprintLibrary_GetComponentFromSelector, ComponentSelector) == 0x000000, "Member 'RBBlueprintLibrary_GetComponentFromSelector::ComponentSelector' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetComponentFromSelector, Owner) == 0x000040, "Member 'RBBlueprintLibrary_GetComponentFromSelector::Owner' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetComponentFromSelector, ReturnValue) == 0x000048, "Member 'RBBlueprintLibrary_GetComponentFromSelector::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetControlledPawn
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetControlledPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetControlledPawn) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetControlledPawn");
static_assert(sizeof(RBBlueprintLibrary_GetControlledPawn) == 0x000008, "Wrong size on RBBlueprintLibrary_GetControlledPawn");
static_assert(offsetof(RBBlueprintLibrary_GetControlledPawn, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetControlledPawn::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetControlledPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetControlledPlayer final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetControlledPlayer) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetControlledPlayer");
static_assert(sizeof(RBBlueprintLibrary_GetControlledPlayer) == 0x000008, "Wrong size on RBBlueprintLibrary_GetControlledPlayer");
static_assert(offsetof(RBBlueprintLibrary_GetControlledPlayer, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetControlledPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetCurrentEditorNormal
// 0x000C (0x000C - 0x0000)
struct RBBlueprintLibrary_GetCurrentEditorNormal final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetCurrentEditorNormal) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetCurrentEditorNormal");
static_assert(sizeof(RBBlueprintLibrary_GetCurrentEditorNormal) == 0x00000C, "Wrong size on RBBlueprintLibrary_GetCurrentEditorNormal");
static_assert(offsetof(RBBlueprintLibrary_GetCurrentEditorNormal, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetCurrentEditorNormal::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetCurrentMissionID
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_GetCurrentMissionID final
{
public:
	struct FRBMissionID                           ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetCurrentMissionID) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetCurrentMissionID");
static_assert(sizeof(RBBlueprintLibrary_GetCurrentMissionID) == 0x000028, "Wrong size on RBBlueprintLibrary_GetCurrentMissionID");
static_assert(offsetof(RBBlueprintLibrary_GetCurrentMissionID, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetCurrentMissionID::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetCurrentSAS
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetCurrentSAS final
{
public:
	class ARBSAS*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetCurrentSAS) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetCurrentSAS");
static_assert(sizeof(RBBlueprintLibrary_GetCurrentSAS) == 0x000008, "Wrong size on RBBlueprintLibrary_GetCurrentSAS");
static_assert(offsetof(RBBlueprintLibrary_GetCurrentSAS, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetCurrentSAS::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetCurveValueForAnimation
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetCurveValueForAnimation final
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvalTime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetCurveValueForAnimation) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetCurveValueForAnimation");
static_assert(sizeof(RBBlueprintLibrary_GetCurveValueForAnimation) == 0x000018, "Wrong size on RBBlueprintLibrary_GetCurveValueForAnimation");
static_assert(offsetof(RBBlueprintLibrary_GetCurveValueForAnimation, Sequence) == 0x000000, "Member 'RBBlueprintLibrary_GetCurveValueForAnimation::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetCurveValueForAnimation, CurveName) == 0x000008, "Member 'RBBlueprintLibrary_GetCurveValueForAnimation::CurveName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetCurveValueForAnimation, EvalTime) == 0x000010, "Member 'RBBlueprintLibrary_GetCurveValueForAnimation::EvalTime' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetCurveValueForAnimation, ReturnValue) == 0x000014, "Member 'RBBlueprintLibrary_GetCurveValueForAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetCurveValueFromAnimInstance
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetCurveValueFromAnimInstance final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CurveName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Out_value;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E20[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetCurveValueFromAnimInstance) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetCurveValueFromAnimInstance");
static_assert(sizeof(RBBlueprintLibrary_GetCurveValueFromAnimInstance) == 0x000018, "Wrong size on RBBlueprintLibrary_GetCurveValueFromAnimInstance");
static_assert(offsetof(RBBlueprintLibrary_GetCurveValueFromAnimInstance, AnimInstance) == 0x000000, "Member 'RBBlueprintLibrary_GetCurveValueFromAnimInstance::AnimInstance' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetCurveValueFromAnimInstance, CurveName) == 0x000008, "Member 'RBBlueprintLibrary_GetCurveValueFromAnimInstance::CurveName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetCurveValueFromAnimInstance, Out_value) == 0x000010, "Member 'RBBlueprintLibrary_GetCurveValueFromAnimInstance::Out_value' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetCurveValueFromAnimInstance, ReturnValue) == 0x000014, "Member 'RBBlueprintLibrary_GetCurveValueFromAnimInstance::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetCustomizationMeshForGrunt
// 0x0268 (0x0268 - 0x0000)
struct RBBlueprintLibrary_GetCustomizationMeshForGrunt final
{
public:
	struct FGruntCustomizationMeshesConfig        CustomizationMeshesConfig;                         // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSelectedGruntCustomizationMeshesInfo  CustomizationMeshesInfo;                           // 0x0180(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ENPCCustomizationSlot                         Slot;                                              // 0x0194(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E21[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNPCCustomizationMesh                  ReturnValue;                                       // 0x0198(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetCustomizationMeshForGrunt) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetCustomizationMeshForGrunt");
static_assert(sizeof(RBBlueprintLibrary_GetCustomizationMeshForGrunt) == 0x000268, "Wrong size on RBBlueprintLibrary_GetCustomizationMeshForGrunt");
static_assert(offsetof(RBBlueprintLibrary_GetCustomizationMeshForGrunt, CustomizationMeshesConfig) == 0x000000, "Member 'RBBlueprintLibrary_GetCustomizationMeshForGrunt::CustomizationMeshesConfig' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetCustomizationMeshForGrunt, CustomizationMeshesInfo) == 0x000180, "Member 'RBBlueprintLibrary_GetCustomizationMeshForGrunt::CustomizationMeshesInfo' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetCustomizationMeshForGrunt, Slot) == 0x000194, "Member 'RBBlueprintLibrary_GetCustomizationMeshForGrunt::Slot' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetCustomizationMeshForGrunt, ReturnValue) == 0x000198, "Member 'RBBlueprintLibrary_GetCustomizationMeshForGrunt::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetDefaultObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetDefaultObject) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetDefaultObject");
static_assert(sizeof(RBBlueprintLibrary_GetDefaultObject) == 0x000010, "Wrong size on RBBlueprintLibrary_GetDefaultObject");
static_assert(offsetof(RBBlueprintLibrary_GetDefaultObject, Object) == 0x000000, "Member 'RBBlueprintLibrary_GetDefaultObject::Object' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetDefaultObject, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetDefaultObject::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetDefaultObjectFromAssetData
// 0x0068 (0x0068 - 0x0000)
struct RBBlueprintLibrary_GetDefaultObjectFromAssetData final
{
public:
	struct FAssetData                             Asset;                                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetDefaultObjectFromAssetData) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetDefaultObjectFromAssetData");
static_assert(sizeof(RBBlueprintLibrary_GetDefaultObjectFromAssetData) == 0x000068, "Wrong size on RBBlueprintLibrary_GetDefaultObjectFromAssetData");
static_assert(offsetof(RBBlueprintLibrary_GetDefaultObjectFromAssetData, Asset) == 0x000000, "Member 'RBBlueprintLibrary_GetDefaultObjectFromAssetData::Asset' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetDefaultObjectFromAssetData, ReturnValue) == 0x000060, "Member 'RBBlueprintLibrary_GetDefaultObjectFromAssetData::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetDefaultStagePrimeAssetType
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_GetDefaultStagePrimeAssetType final
{
public:
	ENPCType                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetDefaultStagePrimeAssetType) == 0x000001, "Wrong alignment on RBBlueprintLibrary_GetDefaultStagePrimeAssetType");
static_assert(sizeof(RBBlueprintLibrary_GetDefaultStagePrimeAssetType) == 0x000001, "Wrong size on RBBlueprintLibrary_GetDefaultStagePrimeAssetType");
static_assert(offsetof(RBBlueprintLibrary_GetDefaultStagePrimeAssetType, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetDefaultStagePrimeAssetType::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetDefaultVoiceComponent
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetDefaultVoiceComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBSoundComponent*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetDefaultVoiceComponent) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetDefaultVoiceComponent");
static_assert(sizeof(RBBlueprintLibrary_GetDefaultVoiceComponent) == 0x000010, "Wrong size on RBBlueprintLibrary_GetDefaultVoiceComponent");
static_assert(offsetof(RBBlueprintLibrary_GetDefaultVoiceComponent, Actor) == 0x000000, "Member 'RBBlueprintLibrary_GetDefaultVoiceComponent::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetDefaultVoiceComponent, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetDefaultVoiceComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetEditorWorldSettings
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetEditorWorldSettings final
{
public:
	class ARBWorldSettings*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetEditorWorldSettings) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetEditorWorldSettings");
static_assert(sizeof(RBBlueprintLibrary_GetEditorWorldSettings) == 0x000008, "Wrong size on RBBlueprintLibrary_GetEditorWorldSettings");
static_assert(offsetof(RBBlueprintLibrary_GetEditorWorldSettings, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetEditorWorldSettings::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetEffectivePlayerCountForConfiguration
// 0x0004 (0x0004 - 0x0000)
struct RBBlueprintLibrary_GetEffectivePlayerCountForConfiguration final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetEffectivePlayerCountForConfiguration) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetEffectivePlayerCountForConfiguration");
static_assert(sizeof(RBBlueprintLibrary_GetEffectivePlayerCountForConfiguration) == 0x000004, "Wrong size on RBBlueprintLibrary_GetEffectivePlayerCountForConfiguration");
static_assert(offsetof(RBBlueprintLibrary_GetEffectivePlayerCountForConfiguration, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetEffectivePlayerCountForConfiguration::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetEffectiveSASVariatorType
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_GetEffectiveSASVariatorType final
{
public:
	ESASVariatorType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetEffectiveSASVariatorType) == 0x000001, "Wrong alignment on RBBlueprintLibrary_GetEffectiveSASVariatorType");
static_assert(sizeof(RBBlueprintLibrary_GetEffectiveSASVariatorType) == 0x000001, "Wrong size on RBBlueprintLibrary_GetEffectiveSASVariatorType");
static_assert(offsetof(RBBlueprintLibrary_GetEffectiveSASVariatorType, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetEffectiveSASVariatorType::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetElapsedPawnTime
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetElapsedPawnTime final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetElapsedPawnTime) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetElapsedPawnTime");
static_assert(sizeof(RBBlueprintLibrary_GetElapsedPawnTime) == 0x000010, "Wrong size on RBBlueprintLibrary_GetElapsedPawnTime");
static_assert(offsetof(RBBlueprintLibrary_GetElapsedPawnTime, Pawn) == 0x000000, "Member 'RBBlueprintLibrary_GetElapsedPawnTime::Pawn' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetElapsedPawnTime, Time) == 0x000008, "Member 'RBBlueprintLibrary_GetElapsedPawnTime::Time' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetElapsedPawnTime, ReturnValue) == 0x00000C, "Member 'RBBlueprintLibrary_GetElapsedPawnTime::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetElapsedServerTime
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetElapsedServerTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetElapsedServerTime) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetElapsedServerTime");
static_assert(sizeof(RBBlueprintLibrary_GetElapsedServerTime) == 0x000008, "Wrong size on RBBlueprintLibrary_GetElapsedServerTime");
static_assert(offsetof(RBBlueprintLibrary_GetElapsedServerTime, Time) == 0x000000, "Member 'RBBlueprintLibrary_GetElapsedServerTime::Time' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetElapsedServerTime, ReturnValue) == 0x000004, "Member 'RBBlueprintLibrary_GetElapsedServerTime::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetElapsedTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetElapsedTime) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetElapsedTime");
static_assert(sizeof(RBBlueprintLibrary_GetElapsedTime) == 0x000008, "Wrong size on RBBlueprintLibrary_GetElapsedTime");
static_assert(offsetof(RBBlueprintLibrary_GetElapsedTime, Time) == 0x000000, "Member 'RBBlueprintLibrary_GetElapsedTime::Time' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetElapsedTime, ReturnValue) == 0x000004, "Member 'RBBlueprintLibrary_GetElapsedTime::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetFirstPushableCart
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetFirstPushableCart final
{
public:
	class ARBBasePushable*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetFirstPushableCart) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetFirstPushableCart");
static_assert(sizeof(RBBlueprintLibrary_GetFirstPushableCart) == 0x000008, "Wrong size on RBBlueprintLibrary_GetFirstPushableCart");
static_assert(offsetof(RBBlueprintLibrary_GetFirstPushableCart, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetFirstPushableCart::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetFloatValue
// 0x00D0 (0x00D0 - 0x0000)
struct RBBlueprintLibrary_GetFloatValue final
{
public:
	struct FConfigurableFloat                     ConfigurableFloat;                                 // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00C8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E22[0x4];                                     // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetFloatValue) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetFloatValue");
static_assert(sizeof(RBBlueprintLibrary_GetFloatValue) == 0x0000D0, "Wrong size on RBBlueprintLibrary_GetFloatValue");
static_assert(offsetof(RBBlueprintLibrary_GetFloatValue, ConfigurableFloat) == 0x000000, "Member 'RBBlueprintLibrary_GetFloatValue::ConfigurableFloat' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetFloatValue, ReturnValue) == 0x0000C8, "Member 'RBBlueprintLibrary_GetFloatValue::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetFoleySwitchOverrideFromGruntCustomization
// 0x01A0 (0x01A0 - 0x0000)
struct RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization final
{
public:
	struct FSelectedGruntCustomizationMeshesInfo  SelectedMeshInfo;                                  // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E23[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGruntCustomizationMeshesConfig        MeshesConfig;                                      // 0x0018(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0198(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization");
static_assert(sizeof(RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization) == 0x0001A0, "Wrong size on RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization");
static_assert(offsetof(RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization, SelectedMeshInfo) == 0x000000, "Member 'RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization::SelectedMeshInfo' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization, MeshesConfig) == 0x000018, "Member 'RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization::MeshesConfig' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization, ReturnValue) == 0x000198, "Member 'RBBlueprintLibrary_GetFoleySwitchOverrideFromGruntCustomization::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetFXManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetFXManager final
{
public:
	class URBFXManager*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetFXManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetFXManager");
static_assert(sizeof(RBBlueprintLibrary_GetFXManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetFXManager");
static_assert(offsetof(RBBlueprintLibrary_GetFXManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetFXManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetGameDifficulty
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_GetGameDifficulty final
{
public:
	EGameDifficulty                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetGameDifficulty) == 0x000001, "Wrong alignment on RBBlueprintLibrary_GetGameDifficulty");
static_assert(sizeof(RBBlueprintLibrary_GetGameDifficulty) == 0x000001, "Wrong size on RBBlueprintLibrary_GetGameDifficulty");
static_assert(offsetof(RBBlueprintLibrary_GetGameDifficulty, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetGameDifficulty::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetGameStageInfo
// 0x0068 (0x0068 - 0x0000)
struct RBBlueprintLibrary_GetGameStageInfo final
{
public:
	struct FRBGameStageInfo                       ReturnValue;                                       // 0x0000(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetGameStageInfo) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetGameStageInfo");
static_assert(sizeof(RBBlueprintLibrary_GetGameStageInfo) == 0x000068, "Wrong size on RBBlueprintLibrary_GetGameStageInfo");
static_assert(offsetof(RBBlueprintLibrary_GetGameStageInfo, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetGameStageInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetGameStructureConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetGameStructureConfig final
{
public:
	class URBGameStructureConfig*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetGameStructureConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetGameStructureConfig");
static_assert(sizeof(RBBlueprintLibrary_GetGameStructureConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetGameStructureConfig");
static_assert(offsetof(RBBlueprintLibrary_GetGameStructureConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetGameStructureConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetGameTime
// 0x0004 (0x0004 - 0x0000)
struct RBBlueprintLibrary_GetGameTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetGameTime) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetGameTime");
static_assert(sizeof(RBBlueprintLibrary_GetGameTime) == 0x000004, "Wrong size on RBBlueprintLibrary_GetGameTime");
static_assert(offsetof(RBBlueprintLibrary_GetGameTime, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetGameTime::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetGameVersionString
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetGameVersionString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetGameVersionString) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetGameVersionString");
static_assert(sizeof(RBBlueprintLibrary_GetGameVersionString) == 0x000010, "Wrong size on RBBlueprintLibrary_GetGameVersionString");
static_assert(offsetof(RBBlueprintLibrary_GetGameVersionString, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetGameVersionString::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetGlobalAudioConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetGlobalAudioConfig final
{
public:
	class URBGlobalAudioConfig*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetGlobalAudioConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetGlobalAudioConfig");
static_assert(sizeof(RBBlueprintLibrary_GetGlobalAudioConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetGlobalAudioConfig");
static_assert(offsetof(RBBlueprintLibrary_GetGlobalAudioConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetGlobalAudioConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetGlobalUIConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetGlobalUIConfig final
{
public:
	class URBGlobalUIConfig*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetGlobalUIConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetGlobalUIConfig");
static_assert(sizeof(RBBlueprintLibrary_GetGlobalUIConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetGlobalUIConfig");
static_assert(offsetof(RBBlueprintLibrary_GetGlobalUIConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetGlobalUIConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetHallucinationManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetHallucinationManager final
{
public:
	class ARBHallucinationManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetHallucinationManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetHallucinationManager");
static_assert(sizeof(RBBlueprintLibrary_GetHallucinationManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetHallucinationManager");
static_assert(offsetof(RBBlueprintLibrary_GetHallucinationManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetHallucinationManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetHUD
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetHUD final
{
public:
	class ARBHUD*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetHUD) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetHUD");
static_assert(sizeof(RBBlueprintLibrary_GetHUD) == 0x000008, "Wrong size on RBBlueprintLibrary_GetHUD");
static_assert(offsetof(RBBlueprintLibrary_GetHUD, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetHUD::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetHUDWidget
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetHUDWidget final
{
public:
	class URBHUDWidget*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetHUDWidget) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetHUDWidget");
static_assert(sizeof(RBBlueprintLibrary_GetHUDWidget) == 0x000008, "Wrong size on RBBlueprintLibrary_GetHUDWidget");
static_assert(offsetof(RBBlueprintLibrary_GetHUDWidget, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetHUDWidget::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetInputBinding
// 0x0038 (0x0038 - 0x0000)
struct RBBlueprintLibrary_GetInputBinding final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceGamepad;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceKBM;                                         // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E24[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetInputBinding) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetInputBinding");
static_assert(sizeof(RBBlueprintLibrary_GetInputBinding) == 0x000038, "Wrong size on RBBlueprintLibrary_GetInputBinding");
static_assert(offsetof(RBBlueprintLibrary_GetInputBinding, ActionName) == 0x000000, "Member 'RBBlueprintLibrary_GetInputBinding::ActionName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetInputBinding, Value) == 0x000008, "Member 'RBBlueprintLibrary_GetInputBinding::Value' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetInputBinding, bForceGamepad) == 0x00000C, "Member 'RBBlueprintLibrary_GetInputBinding::bForceGamepad' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetInputBinding, bForceKBM) == 0x00000D, "Member 'RBBlueprintLibrary_GetInputBinding::bForceKBM' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetInputBinding, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetInputBinding::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetIntValue
// 0x00D0 (0x00D0 - 0x0000)
struct RBBlueprintLibrary_GetIntValue final
{
public:
	struct FConfigurableInt                       ConfigurableInt;                                   // 0x0000(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00C8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E25[0x4];                                     // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetIntValue) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetIntValue");
static_assert(sizeof(RBBlueprintLibrary_GetIntValue) == 0x0000D0, "Wrong size on RBBlueprintLibrary_GetIntValue");
static_assert(offsetof(RBBlueprintLibrary_GetIntValue, ConfigurableInt) == 0x000000, "Member 'RBBlueprintLibrary_GetIntValue::ConfigurableInt' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetIntValue, ReturnValue) == 0x0000C8, "Member 'RBBlueprintLibrary_GetIntValue::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetKeyFName
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_GetKeyFName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetKeyFName) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetKeyFName");
static_assert(sizeof(RBBlueprintLibrary_GetKeyFName) == 0x000020, "Wrong size on RBBlueprintLibrary_GetKeyFName");
static_assert(offsetof(RBBlueprintLibrary_GetKeyFName, Key) == 0x000000, "Member 'RBBlueprintLibrary_GetKeyFName::Key' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetKeyFName, ReturnValue) == 0x000018, "Member 'RBBlueprintLibrary_GetKeyFName::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetLoadedOnServerComponents
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetLoadedOnServerComponents final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetLoadedOnServerComponents) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetLoadedOnServerComponents");
static_assert(sizeof(RBBlueprintLibrary_GetLoadedOnServerComponents) == 0x000018, "Wrong size on RBBlueprintLibrary_GetLoadedOnServerComponents");
static_assert(offsetof(RBBlueprintLibrary_GetLoadedOnServerComponents, Actor) == 0x000000, "Member 'RBBlueprintLibrary_GetLoadedOnServerComponents::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetLoadedOnServerComponents, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetLoadedOnServerComponents::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetLocalLobbyPlayerController
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetLocalLobbyPlayerController final
{
public:
	class ARBLobbyPlayerController*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetLocalLobbyPlayerController) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetLocalLobbyPlayerController");
static_assert(sizeof(RBBlueprintLibrary_GetLocalLobbyPlayerController) == 0x000008, "Wrong size on RBBlueprintLibrary_GetLocalLobbyPlayerController");
static_assert(offsetof(RBBlueprintLibrary_GetLocalLobbyPlayerController, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetLocalLobbyPlayerController::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetLocalMainMenuPlayerController
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetLocalMainMenuPlayerController final
{
public:
	class ARBMainMenuPlayerController*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetLocalMainMenuPlayerController) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetLocalMainMenuPlayerController");
static_assert(sizeof(RBBlueprintLibrary_GetLocalMainMenuPlayerController) == 0x000008, "Wrong size on RBBlueprintLibrary_GetLocalMainMenuPlayerController");
static_assert(offsetof(RBBlueprintLibrary_GetLocalMainMenuPlayerController, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetLocalMainMenuPlayerController::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetLocalMenuController
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetLocalMenuController final
{
public:
	class ARBMenuPlayerController*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetLocalMenuController) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetLocalMenuController");
static_assert(sizeof(RBBlueprintLibrary_GetLocalMenuController) == 0x000008, "Wrong size on RBBlueprintLibrary_GetLocalMenuController");
static_assert(offsetof(RBBlueprintLibrary_GetLocalMenuController, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetLocalMenuController::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetLocalPawn
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetLocalPawn final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetLocalPawn) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetLocalPawn");
static_assert(sizeof(RBBlueprintLibrary_GetLocalPawn) == 0x000008, "Wrong size on RBBlueprintLibrary_GetLocalPawn");
static_assert(offsetof(RBBlueprintLibrary_GetLocalPawn, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetLocalPawn::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetLocalPlayerController
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetLocalPlayerController final
{
public:
	class ARBController*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetLocalPlayerController) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetLocalPlayerController");
static_assert(sizeof(RBBlueprintLibrary_GetLocalPlayerController) == 0x000008, "Wrong size on RBBlueprintLibrary_GetLocalPlayerController");
static_assert(offsetof(RBBlueprintLibrary_GetLocalPlayerController, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetLocalPlayerProgressionData
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetLocalPlayerProgressionData final
{
public:
	class URBPlayerProgressionData*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetLocalPlayerProgressionData) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetLocalPlayerProgressionData");
static_assert(sizeof(RBBlueprintLibrary_GetLocalPlayerProgressionData) == 0x000008, "Wrong size on RBBlueprintLibrary_GetLocalPlayerProgressionData");
static_assert(offsetof(RBBlueprintLibrary_GetLocalPlayerProgressionData, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetLocalPlayerProgressionData::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetLocalPlayerState
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetLocalPlayerState final
{
public:
	class ARBPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetLocalPlayerState) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetLocalPlayerState");
static_assert(sizeof(RBBlueprintLibrary_GetLocalPlayerState) == 0x000008, "Wrong size on RBBlueprintLibrary_GetLocalPlayerState");
static_assert(offsetof(RBBlueprintLibrary_GetLocalPlayerState, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetLocalPlayerState::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetMenuManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetMenuManager final
{
public:
	class URBMenuManager*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetMenuManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetMenuManager");
static_assert(sizeof(RBBlueprintLibrary_GetMenuManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetMenuManager");
static_assert(offsetof(RBBlueprintLibrary_GetMenuManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetMenuManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetMissionInfo
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_GetMissionInfo final
{
public:
	struct FRBMissionID                           MissionID;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class URBMissionInfo*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetMissionInfo) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetMissionInfo");
static_assert(sizeof(RBBlueprintLibrary_GetMissionInfo) == 0x000030, "Wrong size on RBBlueprintLibrary_GetMissionInfo");
static_assert(offsetof(RBBlueprintLibrary_GetMissionInfo, MissionID) == 0x000000, "Member 'RBBlueprintLibrary_GetMissionInfo::MissionID' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetMissionInfo, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_GetMissionInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetNarrator_ClientOnly
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetNarrator_ClientOnly final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetNarrator_ClientOnly) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetNarrator_ClientOnly");
static_assert(sizeof(RBBlueprintLibrary_GetNarrator_ClientOnly) == 0x000008, "Wrong size on RBBlueprintLibrary_GetNarrator_ClientOnly");
static_assert(offsetof(RBBlueprintLibrary_GetNarrator_ClientOnly, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetNarrator_ClientOnly::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetNearbyBots
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_GetNearbyBots final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckClearance;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E26[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBBot*>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetNearbyBots) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetNearbyBots");
static_assert(sizeof(RBBlueprintLibrary_GetNearbyBots) == 0x000020, "Wrong size on RBBlueprintLibrary_GetNearbyBots");
static_assert(offsetof(RBBlueprintLibrary_GetNearbyBots, Source) == 0x000000, "Member 'RBBlueprintLibrary_GetNearbyBots::Source' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetNearbyBots, Radius) == 0x000008, "Member 'RBBlueprintLibrary_GetNearbyBots::Radius' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetNearbyBots, bCheckClearance) == 0x00000C, "Member 'RBBlueprintLibrary_GetNearbyBots::bCheckClearance' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetNearbyBots, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetNearbyBots::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetNearbyPlayers
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_GetNearbyPlayers final
{
public:
	class AActor*                                 Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckClearance;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E27[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OriginOffset;                                      // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E28[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBPlayer*>                      ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetNearbyPlayers) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetNearbyPlayers");
static_assert(sizeof(RBBlueprintLibrary_GetNearbyPlayers) == 0x000030, "Wrong size on RBBlueprintLibrary_GetNearbyPlayers");
static_assert(offsetof(RBBlueprintLibrary_GetNearbyPlayers, Source) == 0x000000, "Member 'RBBlueprintLibrary_GetNearbyPlayers::Source' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetNearbyPlayers, Radius) == 0x000008, "Member 'RBBlueprintLibrary_GetNearbyPlayers::Radius' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetNearbyPlayers, bCheckClearance) == 0x00000C, "Member 'RBBlueprintLibrary_GetNearbyPlayers::bCheckClearance' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetNearbyPlayers, OriginOffset) == 0x000010, "Member 'RBBlueprintLibrary_GetNearbyPlayers::OriginOffset' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetNearbyPlayers, ReturnValue) == 0x000020, "Member 'RBBlueprintLibrary_GetNearbyPlayers::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetNewRandomActor
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_GetNewRandomActor final
{
public:
	TArray<class AActor*>                         ActorList;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 CurrentActor;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetNewRandomActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetNewRandomActor");
static_assert(sizeof(RBBlueprintLibrary_GetNewRandomActor) == 0x000020, "Wrong size on RBBlueprintLibrary_GetNewRandomActor");
static_assert(offsetof(RBBlueprintLibrary_GetNewRandomActor, ActorList) == 0x000000, "Member 'RBBlueprintLibrary_GetNewRandomActor::ActorList' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetNewRandomActor, CurrentActor) == 0x000010, "Member 'RBBlueprintLibrary_GetNewRandomActor::CurrentActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetNewRandomActor, ReturnValue) == 0x000018, "Member 'RBBlueprintLibrary_GetNewRandomActor::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetNumberOfAlivePlayer
// 0x0004 (0x0004 - 0x0000)
struct RBBlueprintLibrary_GetNumberOfAlivePlayer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetNumberOfAlivePlayer) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetNumberOfAlivePlayer");
static_assert(sizeof(RBBlueprintLibrary_GetNumberOfAlivePlayer) == 0x000004, "Wrong size on RBBlueprintLibrary_GetNumberOfAlivePlayer");
static_assert(offsetof(RBBlueprintLibrary_GetNumberOfAlivePlayer, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetNumberOfAlivePlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetNumberOfPlayer
// 0x0004 (0x0004 - 0x0000)
struct RBBlueprintLibrary_GetNumberOfPlayer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetNumberOfPlayer) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetNumberOfPlayer");
static_assert(sizeof(RBBlueprintLibrary_GetNumberOfPlayer) == 0x000004, "Wrong size on RBBlueprintLibrary_GetNumberOfPlayer");
static_assert(offsetof(RBBlueprintLibrary_GetNumberOfPlayer, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetNumberOfPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPawnCustomizationManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetPawnCustomizationManager final
{
public:
	class URBPawnCustomizationManager*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPawnCustomizationManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPawnCustomizationManager");
static_assert(sizeof(RBBlueprintLibrary_GetPawnCustomizationManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetPawnCustomizationManager");
static_assert(offsetof(RBBlueprintLibrary_GetPawnCustomizationManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetPawnCustomizationManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerByPlayerId
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetPlayerByPlayerId final
{
public:
	struct FRBPlayerId                            PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ARBPlayer*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerByPlayerId) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerByPlayerId");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerByPlayerId) == 0x000018, "Wrong size on RBBlueprintLibrary_GetPlayerByPlayerId");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerByPlayerId, PlayerId) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerByPlayerId::PlayerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerByPlayerId, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetPlayerByPlayerId::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerByUniqueId
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_GetPlayerByUniqueId final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerByUniqueId) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerByUniqueId");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerByUniqueId) == 0x000030, "Wrong size on RBBlueprintLibrary_GetPlayerByUniqueId");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerByUniqueId, UniqueId) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerByUniqueId::UniqueId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerByUniqueId, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_GetPlayerByUniqueId::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerCellCustomizationConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetPlayerCellCustomizationConfig final
{
public:
	class URBPlayerCellCustomizationConfig*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerCellCustomizationConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerCellCustomizationConfig");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerCellCustomizationConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetPlayerCellCustomizationConfig");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerCellCustomizationConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerCellCustomizationConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerCustomizationConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetPlayerCustomizationConfig final
{
public:
	class URBPlayerCustomizationConfig*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerCustomizationConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerCustomizationConfig");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerCustomizationConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetPlayerCustomizationConfig");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerCustomizationConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerCustomizationConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerCustomizationOptionForSlot
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot final
{
public:
	class AActor*                                 CustomizationOwner;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCustomizationSlot                      Slot;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E29[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBPlayerCustomizationOption*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot) == 0x000018, "Wrong size on RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot, CustomizationOwner) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot::CustomizationOwner' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot, Slot) == 0x000008, "Member 'RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot::Slot' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetPlayerCustomizationOptionForSlot::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerGameSessionManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetPlayerGameSessionManager final
{
public:
	class URBPlayerGameSessionManager*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerGameSessionManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerGameSessionManager");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerGameSessionManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetPlayerGameSessionManager");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerGameSessionManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerGameSessionManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerLoadoutConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetPlayerLoadoutConfig final
{
public:
	class URBPlayerLoadoutConfig*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerLoadoutConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerLoadoutConfig");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerLoadoutConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetPlayerLoadoutConfig");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerLoadoutConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerLoadoutConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerPingDataFromId
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_GetPlayerPingDataFromId final
{
public:
	class FName                                   DataId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerPingData                        ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerPingDataFromId) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerPingDataFromId");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerPingDataFromId) == 0x000030, "Wrong size on RBBlueprintLibrary_GetPlayerPingDataFromId");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerPingDataFromId, DataId) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerPingDataFromId::DataId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerPingDataFromId, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetPlayerPingDataFromId::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerProgressionData
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetPlayerProgressionData final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBPlayerProgressionData*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerProgressionData) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerProgressionData");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerProgressionData) == 0x000010, "Wrong size on RBBlueprintLibrary_GetPlayerProgressionData");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerProgressionData, RBPlayerState) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerProgressionData::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerProgressionData, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetPlayerProgressionData::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerProgressionManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetPlayerProgressionManager final
{
public:
	class ARBPlayerProgressionManager*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerProgressionManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerProgressionManager");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerProgressionManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetPlayerProgressionManager");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerProgressionManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerProgressionManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerStateByPlayer
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetPlayerStateByPlayer final
{
public:
	const class ARBPlayer*                        Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayerState*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerStateByPlayer) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerStateByPlayer");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerStateByPlayer) == 0x000010, "Wrong size on RBBlueprintLibrary_GetPlayerStateByPlayer");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerStateByPlayer, Player) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerStateByPlayer::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerStateByPlayer, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetPlayerStateByPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerStateByPlayerId
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetPlayerStateByPlayerId final
{
public:
	struct FRBPlayerId                            PlayerId;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ARBPlayerState*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerStateByPlayerId) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerStateByPlayerId");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerStateByPlayerId) == 0x000018, "Wrong size on RBBlueprintLibrary_GetPlayerStateByPlayerId");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerStateByPlayerId, PlayerId) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerStateByPlayerId::PlayerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerStateByPlayerId, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetPlayerStateByPlayerId::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerStateByUniqueId
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_GetPlayerStateByUniqueId final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayerState*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerStateByUniqueId) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerStateByUniqueId");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerStateByUniqueId) == 0x000030, "Wrong size on RBBlueprintLibrary_GetPlayerStateByUniqueId");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerStateByUniqueId, UniqueId) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerStateByUniqueId::UniqueId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerStateByUniqueId, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_GetPlayerStateByUniqueId::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPlayerStatsConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetPlayerStatsConfig final
{
public:
	class URBPlayerStatsConfig*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPlayerStatsConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPlayerStatsConfig");
static_assert(sizeof(RBBlueprintLibrary_GetPlayerStatsConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetPlayerStatsConfig");
static_assert(offsetof(RBBlueprintLibrary_GetPlayerStatsConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetPlayerStatsConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetPostProcessUpdateManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetPostProcessUpdateManager final
{
public:
	class ARBPostProcessUpdateManager*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetPostProcessUpdateManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetPostProcessUpdateManager");
static_assert(sizeof(RBBlueprintLibrary_GetPostProcessUpdateManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetPostProcessUpdateManager");
static_assert(offsetof(RBBlueprintLibrary_GetPostProcessUpdateManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetPostProcessUpdateManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetProfile
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetProfile final
{
public:
	class URBLocalProfile*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetProfile) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetProfile");
static_assert(sizeof(RBBlueprintLibrary_GetProfile) == 0x000008, "Wrong size on RBBlueprintLibrary_GetProfile");
static_assert(offsetof(RBBlueprintLibrary_GetProfile, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetProfile::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRandomIndexForNPCCustomizationSlot
// 0x0188 (0x0188 - 0x0000)
struct RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot final
{
public:
	struct FGruntCustomizationMeshesConfig        CustomizationMeshesConfig;                         // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bFemale;                                           // 0x0180(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCCustomizationSlot                         Slot;                                              // 0x0181(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENPCFlavor                                    Flavor;                                            // 0x0182(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2A[0x1];                                     // 0x0183(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0184(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot");
static_assert(sizeof(RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot) == 0x000188, "Wrong size on RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot");
static_assert(offsetof(RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot, CustomizationMeshesConfig) == 0x000000, "Member 'RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot::CustomizationMeshesConfig' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot, bFemale) == 0x000180, "Member 'RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot::bFemale' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot, Slot) == 0x000181, "Member 'RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot::Slot' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot, Flavor) == 0x000182, "Member 'RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot::Flavor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot, ReturnValue) == 0x000184, "Member 'RBBlueprintLibrary_GetRandomIndexForNPCCustomizationSlot::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameInstance
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameInstance final
{
public:
	class URBGameInstance*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameInstance) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameInstance");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameInstance) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameInstance");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameInstance, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameInstance::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameMode
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameMode final
{
public:
	class ARBGameMode*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameMode) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameMode");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameMode) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameMode");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameMode, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameMode::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameModeBase
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameModeBase final
{
public:
	class ARBGameModeBase*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameModeBase) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameModeBase");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameModeBase) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameModeBase");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameModeBase, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameModeBase::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameModeLobby
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameModeLobby final
{
public:
	class ARBGameModeLobby*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameModeLobby) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameModeLobby");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameModeLobby) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameModeLobby");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameModeLobby, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameModeLobby::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameModeMainMenu
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameModeMainMenu final
{
public:
	class ARBGameModeMainMenu*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameModeMainMenu) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameModeMainMenu");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameModeMainMenu) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameModeMainMenu");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameModeMainMenu, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameModeMainMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameState
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameState final
{
public:
	class ARBGameState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameState) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameState");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameState) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameState");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameState, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameState::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameStateBase
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameStateBase final
{
public:
	class ARBGameStateBase*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameStateBase) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameStateBase");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameStateBase) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameStateBase");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameStateBase, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameStateBase::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameStateLobby
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameStateLobby final
{
public:
	class ARBGameStateLobby*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameStateLobby) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameStateLobby");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameStateLobby) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameStateLobby");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameStateLobby, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameStateLobby::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameUserPreferences
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameUserPreferences final
{
public:
	class URBGameUserPreferences*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameUserPreferences) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameUserPreferences");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameUserPreferences) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameUserPreferences");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameUserPreferences, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameUserPreferences::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBGameUserSettings final
{
public:
	class URBGameUserSettings*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBGameUserSettings) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBGameUserSettings");
static_assert(sizeof(RBBlueprintLibrary_GetRBGameUserSettings) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBGameUserSettings");
static_assert(offsetof(RBBlueprintLibrary_GetRBGameUserSettings, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBGameUserSettings::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBObjectiveManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBObjectiveManager final
{
public:
	class URBObjectiveManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBObjectiveManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBObjectiveManager");
static_assert(sizeof(RBBlueprintLibrary_GetRBObjectiveManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBObjectiveManager");
static_assert(offsetof(RBBlueprintLibrary_GetRBObjectiveManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBObjectiveManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBPlayerLoadoutManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBPlayerLoadoutManager final
{
public:
	class ARBPlayerLoadoutManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBPlayerLoadoutManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBPlayerLoadoutManager");
static_assert(sizeof(RBBlueprintLibrary_GetRBPlayerLoadoutManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBPlayerLoadoutManager");
static_assert(offsetof(RBBlueprintLibrary_GetRBPlayerLoadoutManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBPlayerLoadoutManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBSettings_Anim
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBSettings_Anim final
{
public:
	class URBSettings_Anim*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBSettings_Anim) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBSettings_Anim");
static_assert(sizeof(RBBlueprintLibrary_GetRBSettings_Anim) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBSettings_Anim");
static_assert(offsetof(RBBlueprintLibrary_GetRBSettings_Anim, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBSettings_Anim::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBSettings_Gameplay
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBSettings_Gameplay final
{
public:
	class URBSettings_Gameplay*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBSettings_Gameplay) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBSettings_Gameplay");
static_assert(sizeof(RBBlueprintLibrary_GetRBSettings_Gameplay) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBSettings_Gameplay");
static_assert(offsetof(RBBlueprintLibrary_GetRBSettings_Gameplay, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBSettings_Gameplay::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBStreaming
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBStreaming final
{
public:
	class ARBStreaming*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBStreaming) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBStreaming");
static_assert(sizeof(RBBlueprintLibrary_GetRBStreaming) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBStreaming");
static_assert(offsetof(RBBlueprintLibrary_GetRBStreaming, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBStreaming::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBTaskManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBTaskManager final
{
public:
	class ARBTaskManager*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBTaskManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBTaskManager");
static_assert(sizeof(RBBlueprintLibrary_GetRBTaskManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBTaskManager");
static_assert(offsetof(RBBlueprintLibrary_GetRBTaskManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBTaskManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRBWorld
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetRBWorld final
{
public:
	class URBWorld*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRBWorld) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRBWorld");
static_assert(sizeof(RBBlueprintLibrary_GetRBWorld) == 0x000008, "Wrong size on RBBlueprintLibrary_GetRBWorld");
static_assert(offsetof(RBBlueprintLibrary_GetRBWorld, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetRBWorld::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRefPoseBoneComponentSpace
// 0x0040 (0x0040 - 0x0000)
struct RBBlueprintLibrary_GetRefPoseBoneComponentSpace final
{
public:
	class USkeletalMeshComponent*                 SkelMesh;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRefPoseBoneComponentSpace) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetRefPoseBoneComponentSpace");
static_assert(sizeof(RBBlueprintLibrary_GetRefPoseBoneComponentSpace) == 0x000040, "Wrong size on RBBlueprintLibrary_GetRefPoseBoneComponentSpace");
static_assert(offsetof(RBBlueprintLibrary_GetRefPoseBoneComponentSpace, SkelMesh) == 0x000000, "Member 'RBBlueprintLibrary_GetRefPoseBoneComponentSpace::SkelMesh' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRefPoseBoneComponentSpace, BoneName) == 0x000008, "Member 'RBBlueprintLibrary_GetRefPoseBoneComponentSpace::BoneName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRefPoseBoneComponentSpace, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetRefPoseBoneComponentSpace::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRoomForActor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetRoomForActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBRoom*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRoomForActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRoomForActor");
static_assert(sizeof(RBBlueprintLibrary_GetRoomForActor) == 0x000010, "Wrong size on RBBlueprintLibrary_GetRoomForActor");
static_assert(offsetof(RBBlueprintLibrary_GetRoomForActor, Actor) == 0x000000, "Member 'RBBlueprintLibrary_GetRoomForActor::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRoomForActor, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetRoomForActor::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetRoomPathedDistance
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_GetRoomPathedDistance final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DestActor;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Out_ValidPath;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistance;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowCoopRooms;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2C[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetRoomPathedDistance) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetRoomPathedDistance");
static_assert(sizeof(RBBlueprintLibrary_GetRoomPathedDistance) == 0x000020, "Wrong size on RBBlueprintLibrary_GetRoomPathedDistance");
static_assert(offsetof(RBBlueprintLibrary_GetRoomPathedDistance, SourceActor) == 0x000000, "Member 'RBBlueprintLibrary_GetRoomPathedDistance::SourceActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRoomPathedDistance, DestActor) == 0x000008, "Member 'RBBlueprintLibrary_GetRoomPathedDistance::DestActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRoomPathedDistance, Out_ValidPath) == 0x000010, "Member 'RBBlueprintLibrary_GetRoomPathedDistance::Out_ValidPath' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRoomPathedDistance, MaxDistance) == 0x000014, "Member 'RBBlueprintLibrary_GetRoomPathedDistance::MaxDistance' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRoomPathedDistance, AllowCoopRooms) == 0x000018, "Member 'RBBlueprintLibrary_GetRoomPathedDistance::AllowCoopRooms' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetRoomPathedDistance, ReturnValue) == 0x00001C, "Member 'RBBlueprintLibrary_GetRoomPathedDistance::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetScoringConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetScoringConfig final
{
public:
	class URBScoringConfig*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetScoringConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetScoringConfig");
static_assert(sizeof(RBBlueprintLibrary_GetScoringConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetScoringConfig");
static_assert(offsetof(RBBlueprintLibrary_GetScoringConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetScoringConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetServerAddressUrl
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetServerAddressUrl final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetServerAddressUrl) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetServerAddressUrl");
static_assert(sizeof(RBBlueprintLibrary_GetServerAddressUrl) == 0x000010, "Wrong size on RBBlueprintLibrary_GetServerAddressUrl");
static_assert(offsetof(RBBlueprintLibrary_GetServerAddressUrl, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetServerAddressUrl::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetServerTime
// 0x0004 (0x0004 - 0x0000)
struct RBBlueprintLibrary_GetServerTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetServerTime) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetServerTime");
static_assert(sizeof(RBBlueprintLibrary_GetServerTime) == 0x000004, "Wrong size on RBBlueprintLibrary_GetServerTime");
static_assert(offsetof(RBBlueprintLibrary_GetServerTime, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetServerTime::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetSoftObjectPathFromSoftObjectReference
// 0x0040 (0x0040 - 0x0000)
struct RBBlueprintLibrary_GetSoftObjectPathFromSoftObjectReference final
{
public:
	TSoftObjectPtr<class UObject>                 SoftObjectReference;                               // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetSoftObjectPathFromSoftObjectReference) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetSoftObjectPathFromSoftObjectReference");
static_assert(sizeof(RBBlueprintLibrary_GetSoftObjectPathFromSoftObjectReference) == 0x000040, "Wrong size on RBBlueprintLibrary_GetSoftObjectPathFromSoftObjectReference");
static_assert(offsetof(RBBlueprintLibrary_GetSoftObjectPathFromSoftObjectReference, SoftObjectReference) == 0x000000, "Member 'RBBlueprintLibrary_GetSoftObjectPathFromSoftObjectReference::SoftObjectReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetSoftObjectPathFromSoftObjectReference, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_GetSoftObjectPathFromSoftObjectReference::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetSpectatedPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetSpectatedPlayer final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetSpectatedPlayer) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetSpectatedPlayer");
static_assert(sizeof(RBBlueprintLibrary_GetSpectatedPlayer) == 0x000008, "Wrong size on RBBlueprintLibrary_GetSpectatedPlayer");
static_assert(offsetof(RBBlueprintLibrary_GetSpectatedPlayer, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetSpectatedPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetSpectatorPawn
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetSpectatorPawn final
{
public:
	class ARBSpectatorPawn*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetSpectatorPawn) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetSpectatorPawn");
static_assert(sizeof(RBBlueprintLibrary_GetSpectatorPawn) == 0x000008, "Wrong size on RBBlueprintLibrary_GetSpectatorPawn");
static_assert(offsetof(RBBlueprintLibrary_GetSpectatorPawn, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetSpectatorPawn::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetStageInfo
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_GetStageInfo final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class URBStageInfo*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetStageInfo) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetStageInfo");
static_assert(sizeof(RBBlueprintLibrary_GetStageInfo) == 0x000030, "Wrong size on RBBlueprintLibrary_GetStageInfo");
static_assert(offsetof(RBBlueprintLibrary_GetStageInfo, StageID) == 0x000000, "Member 'RBBlueprintLibrary_GetStageInfo::StageID' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetStageInfo, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_GetStageInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetStageResetCount
// 0x0004 (0x0004 - 0x0000)
struct RBBlueprintLibrary_GetStageResetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetStageResetCount) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetStageResetCount");
static_assert(sizeof(RBBlueprintLibrary_GetStageResetCount) == 0x000004, "Wrong size on RBBlueprintLibrary_GetStageResetCount");
static_assert(offsetof(RBBlueprintLibrary_GetStageResetCount, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetStageResetCount::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetStageTime
// 0x0004 (0x0004 - 0x0000)
struct RBBlueprintLibrary_GetStageTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetStageTime) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetStageTime");
static_assert(sizeof(RBBlueprintLibrary_GetStageTime) == 0x000004, "Wrong size on RBBlueprintLibrary_GetStageTime");
static_assert(offsetof(RBBlueprintLibrary_GetStageTime, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetStageTime::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetStaticMeshImportSettingsGenerateLightmapUVs
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2D[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs");
static_assert(sizeof(RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs) == 0x000010, "Wrong size on RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs");
static_assert(offsetof(RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs, StaticMesh) == 0x000000, "Member 'RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs::StaticMesh' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs, LODIndex) == 0x000008, "Member 'RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs::LODIndex' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs, ReturnValue) == 0x00000C, "Member 'RBBlueprintLibrary_GetStaticMeshImportSettingsGenerateLightmapUVs::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetStaticMeshLODGenerateLightmapUVs
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2E[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs");
static_assert(sizeof(RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs) == 0x000010, "Wrong size on RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs");
static_assert(offsetof(RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs, StaticMesh) == 0x000000, "Member 'RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs::StaticMesh' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs, LODIndex) == 0x000008, "Member 'RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs::LODIndex' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs, ReturnValue) == 0x00000C, "Member 'RBBlueprintLibrary_GetStaticMeshLODGenerateLightmapUVs::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetStaticMeshMemorySize
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_GetStaticMeshMemorySize final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOccurences;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFileSize;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetStaticMeshMemorySize) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetStaticMeshMemorySize");
static_assert(sizeof(RBBlueprintLibrary_GetStaticMeshMemorySize) == 0x000010, "Wrong size on RBBlueprintLibrary_GetStaticMeshMemorySize");
static_assert(offsetof(RBBlueprintLibrary_GetStaticMeshMemorySize, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_GetStaticMeshMemorySize::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetStaticMeshMemorySize, MaxOccurences) == 0x000008, "Member 'RBBlueprintLibrary_GetStaticMeshMemorySize::MaxOccurences' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetStaticMeshMemorySize, MinFileSize) == 0x00000C, "Member 'RBBlueprintLibrary_GetStaticMeshMemorySize::MinFileSize' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetTasksConfig
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetTasksConfig final
{
public:
	class URBTasksConfig*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetTasksConfig) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetTasksConfig");
static_assert(sizeof(RBBlueprintLibrary_GetTasksConfig) == 0x000008, "Wrong size on RBBlueprintLibrary_GetTasksConfig");
static_assert(offsetof(RBBlueprintLibrary_GetTasksConfig, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetTasksConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetTexturesFromMaterial
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetTexturesFromMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTexture*>                       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetTexturesFromMaterial) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetTexturesFromMaterial");
static_assert(sizeof(RBBlueprintLibrary_GetTexturesFromMaterial) == 0x000018, "Wrong size on RBBlueprintLibrary_GetTexturesFromMaterial");
static_assert(offsetof(RBBlueprintLibrary_GetTexturesFromMaterial, Material) == 0x000000, "Member 'RBBlueprintLibrary_GetTexturesFromMaterial::Material' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetTexturesFromMaterial, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetTexturesFromMaterial::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetUniqueVariatorTypeValue
// 0x0014 (0x0014 - 0x0000)
struct RBBlueprintLibrary_GetUniqueVariatorTypeValue final
{
public:
	EUniqueVariatorType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Param_Name;                                        // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E30[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetUniqueVariatorTypeValue) == 0x000004, "Wrong alignment on RBBlueprintLibrary_GetUniqueVariatorTypeValue");
static_assert(sizeof(RBBlueprintLibrary_GetUniqueVariatorTypeValue) == 0x000014, "Wrong size on RBBlueprintLibrary_GetUniqueVariatorTypeValue");
static_assert(offsetof(RBBlueprintLibrary_GetUniqueVariatorTypeValue, Type) == 0x000000, "Member 'RBBlueprintLibrary_GetUniqueVariatorTypeValue::Type' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetUniqueVariatorTypeValue, Param_Name) == 0x000004, "Member 'RBBlueprintLibrary_GetUniqueVariatorTypeValue::Param_Name' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetUniqueVariatorTypeValue, OutValue) == 0x00000C, "Member 'RBBlueprintLibrary_GetUniqueVariatorTypeValue::OutValue' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetUniqueVariatorTypeValue, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetUniqueVariatorTypeValue::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetValidCustomizationOption
// 0x0038 (0x0038 - 0x0000)
struct RBBlueprintLibrary_GetValidCustomizationOption final
{
public:
	struct FUICustomizationItem                   Item;                                              // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class URBCustomizationOption*                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetValidCustomizationOption) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetValidCustomizationOption");
static_assert(sizeof(RBBlueprintLibrary_GetValidCustomizationOption) == 0x000038, "Wrong size on RBBlueprintLibrary_GetValidCustomizationOption");
static_assert(offsetof(RBBlueprintLibrary_GetValidCustomizationOption, Item) == 0x000000, "Member 'RBBlueprintLibrary_GetValidCustomizationOption::Item' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetValidCustomizationOption, ReturnValue) == 0x000030, "Member 'RBBlueprintLibrary_GetValidCustomizationOption::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetVariatorManager
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetVariatorManager final
{
public:
	class ARBVariatorManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetVariatorManager) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetVariatorManager");
static_assert(sizeof(RBBlueprintLibrary_GetVariatorManager) == 0x000008, "Wrong size on RBBlueprintLibrary_GetVariatorManager");
static_assert(offsetof(RBBlueprintLibrary_GetVariatorManager, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetVariatorManager::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetViewForward
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetViewForward final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E31[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetViewForward) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetViewForward");
static_assert(sizeof(RBBlueprintLibrary_GetViewForward) == 0x000018, "Wrong size on RBBlueprintLibrary_GetViewForward");
static_assert(offsetof(RBBlueprintLibrary_GetViewForward, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_GetViewForward::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetViewForward, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetViewForward::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetViewLocation
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetViewLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E32[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetViewLocation) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetViewLocation");
static_assert(sizeof(RBBlueprintLibrary_GetViewLocation) == 0x000018, "Wrong size on RBBlueprintLibrary_GetViewLocation");
static_assert(offsetof(RBBlueprintLibrary_GetViewLocation, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_GetViewLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetViewLocation, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetViewLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetViewPoint
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_GetViewPoint final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ViewLocation;                                      // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ViewRotation;                                      // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetViewPoint) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetViewPoint");
static_assert(sizeof(RBBlueprintLibrary_GetViewPoint) == 0x000020, "Wrong size on RBBlueprintLibrary_GetViewPoint");
static_assert(offsetof(RBBlueprintLibrary_GetViewPoint, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_GetViewPoint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetViewPoint, ViewLocation) == 0x000008, "Member 'RBBlueprintLibrary_GetViewPoint::ViewLocation' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetViewPoint, ViewRotation) == 0x000014, "Member 'RBBlueprintLibrary_GetViewPoint::ViewRotation' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetViewRotation
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_GetViewRotation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E33[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetViewRotation) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetViewRotation");
static_assert(sizeof(RBBlueprintLibrary_GetViewRotation) == 0x000018, "Wrong size on RBBlueprintLibrary_GetViewRotation");
static_assert(offsetof(RBBlueprintLibrary_GetViewRotation, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_GetViewRotation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetViewRotation, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_GetViewRotation::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldAnchorTransformForGhostAnimation
// 0x0040 (0x0040 - 0x0000)
struct RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation final
{
public:
	TSubclassOf<class URBGhostAnimInstance>       GhostAnimClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InSceneComponent;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation");
static_assert(sizeof(RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation) == 0x000040, "Wrong size on RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation");
static_assert(offsetof(RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation, GhostAnimClass) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation::GhostAnimClass' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation, InSceneComponent) == 0x000008, "Member 'RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation::InSceneComponent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_GetWorldAnchorTransformForGhostAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldSettings
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_GetWorldSettings final
{
public:
	class ARBWorldSettings*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetWorldSettings) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetWorldSettings");
static_assert(sizeof(RBBlueprintLibrary_GetWorldSettings) == 0x000008, "Wrong size on RBBlueprintLibrary_GetWorldSettings");
static_assert(offsetof(RBBlueprintLibrary_GetWorldSettings, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldSettings::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldTransformFromAnimationAnchor
// 0x0040 (0x0040 - 0x0000)
struct RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    Sequence;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InSceneComponent;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToGround;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E34[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutLocation;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDirection;                                      // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E35[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SnapToGroundRequester;                             // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor");
static_assert(sizeof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor) == 0x000040, "Wrong size on RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor, Pawn) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor::Pawn' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor, Sequence) == 0x000008, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor, InSceneComponent) == 0x000010, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor::InSceneComponent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor, bSnapToGround) == 0x000018, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor::bSnapToGround' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor, OutLocation) == 0x00001C, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor::OutLocation' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor, OutDirection) == 0x000028, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor::OutDirection' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor, SnapToGroundRequester) == 0x000038, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchor::SnapToGroundRequester' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldTransformFromAnimationAnchorByTransform
// 0x0070 (0x0070 - 0x0000)
struct RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    Sequence;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InTransformReference;                              // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSnapToGround;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E36[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutLocation;                                       // 0x0044(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDirection;                                      // 0x0050(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E37[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SnapToGroundRequester;                             // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E38[0x8];                                     // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform");
static_assert(sizeof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform) == 0x000070, "Wrong size on RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform, Pawn) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform::Pawn' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform, Sequence) == 0x000008, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform, InTransformReference) == 0x000010, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform::InTransformReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform, bSnapToGround) == 0x000040, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform::bSnapToGround' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform, OutLocation) == 0x000044, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform::OutLocation' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform, OutDirection) == 0x000050, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform::OutDirection' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform, SnapToGroundRequester) == 0x000060, "Member 'RBBlueprintLibrary_GetWorldTransformFromAnimationAnchorByTransform::SnapToGroundRequester' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldTransformFromGhostAnimationAnchorByTransform
// 0x0060 (0x0060 - 0x0000)
struct RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform final
{
public:
	TSubclassOf<class URBGhostAnimInstance>       GhostAnimClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E39[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransformReference;                              // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0040(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutDirection;                                      // 0x004C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3A[0x8];                                     // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform");
static_assert(sizeof(RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform) == 0x000060, "Wrong size on RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform, GhostAnimClass) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform::GhostAnimClass' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform, InTransformReference) == 0x000010, "Member 'RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform::InTransformReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform, OutLocation) == 0x000040, "Member 'RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform::OutLocation' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform, OutDirection) == 0x00004C, "Member 'RBBlueprintLibrary_GetWorldTransformFromGhostAnimationAnchorByTransform::OutDirection' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform
// 0x0070 (0x0070 - 0x0000)
struct RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform final
{
public:
	const class UAnimSequence*                    Sequence;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InTransformReference;                              // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             OutTransform;                                      // 0x0040(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform");
static_assert(sizeof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform) == 0x000070, "Wrong size on RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform, Sequence) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform, BoneName) == 0x000008, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform::BoneName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform, InTransformReference) == 0x000010, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform::InTransformReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform, OutTransform) == 0x000040, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTheEndOfTheSequenceRelativeToTransform::OutTransform' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixForBoneAtTimeRelativeToTransform
// 0x0080 (0x0080 - 0x0000)
struct RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform final
{
public:
	const class UAnimSequence*                    Sequence;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvalTime;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3B[0xC];                                     // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransformReference;                              // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             OutTransform;                                      // 0x0050(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform");
static_assert(sizeof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform) == 0x000080, "Wrong size on RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform, Sequence) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform, BoneName) == 0x000008, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform::BoneName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform, EvalTime) == 0x000010, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform::EvalTime' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform, InTransformReference) == 0x000020, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform::InTransformReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform, OutTransform) == 0x000050, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixForBoneAtTimeRelativeToTransform::OutTransform' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixFromAnimationAnchorByTransform
// 0x0090 (0x0090 - 0x0000)
struct RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    Sequence;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InTransformReference;                              // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSnapToGround;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3C[0xF];                                     // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0050(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                SnapToGroundRequester;                             // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3D[0x8];                                     // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform");
static_assert(sizeof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform) == 0x000090, "Wrong size on RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform, Pawn) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform::Pawn' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform, Sequence) == 0x000008, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform, InTransformReference) == 0x000010, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform::InTransformReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform, bSnapToGround) == 0x000040, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform::bSnapToGround' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform, OutTransform) == 0x000050, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform::OutTransform' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform, SnapToGroundRequester) == 0x000080, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransform::SnapToGroundRequester' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace
// 0x0090 (0x0090 - 0x0000)
struct RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequence*                    Sequence;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InTransformReference;                              // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSnapToGround;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3E[0xF];                                     // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0050(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                SnapToGroundRequester;                             // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3F[0x8];                                     // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace");
static_assert(sizeof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace) == 0x000090, "Wrong size on RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace, Pawn) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace::Pawn' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace, Sequence) == 0x000008, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace::Sequence' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace, InTransformReference) == 0x000010, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace::InTransformReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace, bSnapToGround) == 0x000040, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace::bSnapToGround' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace, OutTransform) == 0x000050, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace::OutTransform' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace, SnapToGroundRequester) == 0x000080, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromAnimationAnchorByTransformInMeshSpace::SnapToGroundRequester' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.GetWorldTransformMatrixFromGhostAnimationAnchorByTransform
// 0x0070 (0x0070 - 0x0000)
struct RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform final
{
public:
	TSubclassOf<class URBGhostAnimInstance>       GhostAnimClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E40[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransformReference;                              // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             OutTransform;                                      // 0x0040(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform) == 0x000010, "Wrong alignment on RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform");
static_assert(sizeof(RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform) == 0x000070, "Wrong size on RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform, GhostAnimClass) == 0x000000, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform::GhostAnimClass' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform, InTransformReference) == 0x000010, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform::InTransformReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform, OutTransform) == 0x000040, "Member 'RBBlueprintLibrary_GetWorldTransformMatrixFromGhostAnimationAnchorByTransform::OutTransform' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.HasActorBegunPlay
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_HasActorBegunPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E41[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_HasActorBegunPlay) == 0x000008, "Wrong alignment on RBBlueprintLibrary_HasActorBegunPlay");
static_assert(sizeof(RBBlueprintLibrary_HasActorBegunPlay) == 0x000010, "Wrong size on RBBlueprintLibrary_HasActorBegunPlay");
static_assert(offsetof(RBBlueprintLibrary_HasActorBegunPlay, Actor) == 0x000000, "Member 'RBBlueprintLibrary_HasActorBegunPlay::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_HasActorBegunPlay, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_HasActorBegunPlay::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.HasActorNotBegunPlay
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_HasActorNotBegunPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E42[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_HasActorNotBegunPlay) == 0x000008, "Wrong alignment on RBBlueprintLibrary_HasActorNotBegunPlay");
static_assert(sizeof(RBBlueprintLibrary_HasActorNotBegunPlay) == 0x000010, "Wrong size on RBBlueprintLibrary_HasActorNotBegunPlay");
static_assert(offsetof(RBBlueprintLibrary_HasActorNotBegunPlay, Actor) == 0x000000, "Member 'RBBlueprintLibrary_HasActorNotBegunPlay::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_HasActorNotBegunPlay, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_HasActorNotBegunPlay::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.HashString
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_HashString final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_HashString) == 0x000008, "Wrong alignment on RBBlueprintLibrary_HashString");
static_assert(sizeof(RBBlueprintLibrary_HashString) == 0x000020, "Wrong size on RBBlueprintLibrary_HashString");
static_assert(offsetof(RBBlueprintLibrary_HashString, String) == 0x000000, "Member 'RBBlueprintLibrary_HashString::String' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_HashString, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_HashString::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.HasPlayedTutorialMap
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_HasPlayedTutorialMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_HasPlayedTutorialMap) == 0x000001, "Wrong alignment on RBBlueprintLibrary_HasPlayedTutorialMap");
static_assert(sizeof(RBBlueprintLibrary_HasPlayedTutorialMap) == 0x000001, "Wrong size on RBBlueprintLibrary_HasPlayedTutorialMap");
static_assert(offsetof(RBBlueprintLibrary_HasPlayedTutorialMap, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_HasPlayedTutorialMap::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.HasPlayerUpgradeEffect
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_HasPlayerUpgradeEffect final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UpgradeID;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E43[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_HasPlayerUpgradeEffect) == 0x000008, "Wrong alignment on RBBlueprintLibrary_HasPlayerUpgradeEffect");
static_assert(sizeof(RBBlueprintLibrary_HasPlayerUpgradeEffect) == 0x000018, "Wrong size on RBBlueprintLibrary_HasPlayerUpgradeEffect");
static_assert(offsetof(RBBlueprintLibrary_HasPlayerUpgradeEffect, Player) == 0x000000, "Member 'RBBlueprintLibrary_HasPlayerUpgradeEffect::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_HasPlayerUpgradeEffect, UpgradeID) == 0x000008, "Member 'RBBlueprintLibrary_HasPlayerUpgradeEffect::UpgradeID' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_HasPlayerUpgradeEffect, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_HasPlayerUpgradeEffect::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.HideInteractionMessage
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_HideInteractionMessage final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_HideInteractionMessage) == 0x000008, "Wrong alignment on RBBlueprintLibrary_HideInteractionMessage");
static_assert(sizeof(RBBlueprintLibrary_HideInteractionMessage) == 0x000008, "Wrong size on RBBlueprintLibrary_HideInteractionMessage");
static_assert(offsetof(RBBlueprintLibrary_HideInteractionMessage, Player) == 0x000000, "Member 'RBBlueprintLibrary_HideInteractionMessage::Player' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ImportTexture
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_ImportTexture final
{
public:
	class FString                                 FileFullPath;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureCompressionSettings                   CompressionSettings;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E44[0x6];                                     // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_ImportTexture) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ImportTexture");
static_assert(sizeof(RBBlueprintLibrary_ImportTexture) == 0x000028, "Wrong size on RBBlueprintLibrary_ImportTexture");
static_assert(offsetof(RBBlueprintLibrary_ImportTexture, FileFullPath) == 0x000000, "Member 'RBBlueprintLibrary_ImportTexture::FileFullPath' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ImportTexture, Filename) == 0x000010, "Member 'RBBlueprintLibrary_ImportTexture::Filename' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ImportTexture, CompressionSettings) == 0x000020, "Member 'RBBlueprintLibrary_ImportTexture::CompressionSettings' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ImportTexture, ReturnValue) == 0x000021, "Member 'RBBlueprintLibrary_ImportTexture::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsActionMappingValid
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_IsActionMappingValid final
{
public:
	struct FInputActionKeyMapping                 KeyMapping;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E45[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsActionMappingValid) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsActionMappingValid");
static_assert(sizeof(RBBlueprintLibrary_IsActionMappingValid) == 0x000030, "Wrong size on RBBlueprintLibrary_IsActionMappingValid");
static_assert(offsetof(RBBlueprintLibrary_IsActionMappingValid, KeyMapping) == 0x000000, "Member 'RBBlueprintLibrary_IsActionMappingValid::KeyMapping' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsActionMappingValid, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_IsActionMappingValid::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsAxisMappingValid
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_IsAxisMappingValid final
{
public:
	struct FInputAxisKeyMapping                   KeyMapping;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E46[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsAxisMappingValid) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsAxisMappingValid");
static_assert(sizeof(RBBlueprintLibrary_IsAxisMappingValid) == 0x000030, "Wrong size on RBBlueprintLibrary_IsAxisMappingValid");
static_assert(offsetof(RBBlueprintLibrary_IsAxisMappingValid, KeyMapping) == 0x000000, "Member 'RBBlueprintLibrary_IsAxisMappingValid::KeyMapping' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsAxisMappingValid, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_IsAxisMappingValid::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsClient
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsClient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsClient) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsClient");
static_assert(sizeof(RBBlueprintLibrary_IsClient) == 0x000001, "Wrong size on RBBlueprintLibrary_IsClient");
static_assert(offsetof(RBBlueprintLibrary_IsClient, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsClient::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsConsideredSoloGame
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsConsideredSoloGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsConsideredSoloGame) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsConsideredSoloGame");
static_assert(sizeof(RBBlueprintLibrary_IsConsideredSoloGame) == 0x000001, "Wrong size on RBBlueprintLibrary_IsConsideredSoloGame");
static_assert(offsetof(RBBlueprintLibrary_IsConsideredSoloGame, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsConsideredSoloGame::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsConsole
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsConsole final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsConsole) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsConsole");
static_assert(sizeof(RBBlueprintLibrary_IsConsole) == 0x000001, "Wrong size on RBBlueprintLibrary_IsConsole");
static_assert(offsetof(RBBlueprintLibrary_IsConsole, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsConsole::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsDifficultyEqualOrGreaterThan
// 0x0002 (0x0002 - 0x0000)
struct RBBlueprintLibrary_IsDifficultyEqualOrGreaterThan final
{
public:
	EGameDifficulty                               Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsDifficultyEqualOrGreaterThan) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsDifficultyEqualOrGreaterThan");
static_assert(sizeof(RBBlueprintLibrary_IsDifficultyEqualOrGreaterThan) == 0x000002, "Wrong size on RBBlueprintLibrary_IsDifficultyEqualOrGreaterThan");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyEqualOrGreaterThan, Difficulty) == 0x000000, "Member 'RBBlueprintLibrary_IsDifficultyEqualOrGreaterThan::Difficulty' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyEqualOrGreaterThan, ReturnValue) == 0x000001, "Member 'RBBlueprintLibrary_IsDifficultyEqualOrGreaterThan::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsDifficultyEqualOrLessThan
// 0x0002 (0x0002 - 0x0000)
struct RBBlueprintLibrary_IsDifficultyEqualOrLessThan final
{
public:
	EGameDifficulty                               Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsDifficultyEqualOrLessThan) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsDifficultyEqualOrLessThan");
static_assert(sizeof(RBBlueprintLibrary_IsDifficultyEqualOrLessThan) == 0x000002, "Wrong size on RBBlueprintLibrary_IsDifficultyEqualOrLessThan");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyEqualOrLessThan, Difficulty) == 0x000000, "Member 'RBBlueprintLibrary_IsDifficultyEqualOrLessThan::Difficulty' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyEqualOrLessThan, ReturnValue) == 0x000001, "Member 'RBBlueprintLibrary_IsDifficultyEqualOrLessThan::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsDifficultyEqualTo
// 0x0002 (0x0002 - 0x0000)
struct RBBlueprintLibrary_IsDifficultyEqualTo final
{
public:
	EGameDifficulty                               Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsDifficultyEqualTo) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsDifficultyEqualTo");
static_assert(sizeof(RBBlueprintLibrary_IsDifficultyEqualTo) == 0x000002, "Wrong size on RBBlueprintLibrary_IsDifficultyEqualTo");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyEqualTo, Difficulty) == 0x000000, "Member 'RBBlueprintLibrary_IsDifficultyEqualTo::Difficulty' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyEqualTo, ReturnValue) == 0x000001, "Member 'RBBlueprintLibrary_IsDifficultyEqualTo::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsDifficultyGreaterThan
// 0x0002 (0x0002 - 0x0000)
struct RBBlueprintLibrary_IsDifficultyGreaterThan final
{
public:
	EGameDifficulty                               Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsDifficultyGreaterThan) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsDifficultyGreaterThan");
static_assert(sizeof(RBBlueprintLibrary_IsDifficultyGreaterThan) == 0x000002, "Wrong size on RBBlueprintLibrary_IsDifficultyGreaterThan");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyGreaterThan, Difficulty) == 0x000000, "Member 'RBBlueprintLibrary_IsDifficultyGreaterThan::Difficulty' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyGreaterThan, ReturnValue) == 0x000001, "Member 'RBBlueprintLibrary_IsDifficultyGreaterThan::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsDifficultyLessThan
// 0x0002 (0x0002 - 0x0000)
struct RBBlueprintLibrary_IsDifficultyLessThan final
{
public:
	EGameDifficulty                               Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsDifficultyLessThan) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsDifficultyLessThan");
static_assert(sizeof(RBBlueprintLibrary_IsDifficultyLessThan) == 0x000002, "Wrong size on RBBlueprintLibrary_IsDifficultyLessThan");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyLessThan, Difficulty) == 0x000000, "Member 'RBBlueprintLibrary_IsDifficultyLessThan::Difficulty' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsDifficultyLessThan, ReturnValue) == 0x000001, "Member 'RBBlueprintLibrary_IsDifficultyLessThan::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsEqual
// 0x0058 (0x0058 - 0x0000)
struct RBBlueprintLibrary_IsEqual final
{
public:
	struct FUniqueNetIdRepl                       UniqueID1;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueID2;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E47[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsEqual) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsEqual");
static_assert(sizeof(RBBlueprintLibrary_IsEqual) == 0x000058, "Wrong size on RBBlueprintLibrary_IsEqual");
static_assert(offsetof(RBBlueprintLibrary_IsEqual, UniqueID1) == 0x000000, "Member 'RBBlueprintLibrary_IsEqual::UniqueID1' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsEqual, UniqueID2) == 0x000028, "Member 'RBBlueprintLibrary_IsEqual::UniqueID2' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsEqual, ReturnValue) == 0x000050, "Member 'RBBlueprintLibrary_IsEqual::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsExperimentStarted
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsExperimentStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsExperimentStarted) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsExperimentStarted");
static_assert(sizeof(RBBlueprintLibrary_IsExperimentStarted) == 0x000001, "Wrong size on RBBlueprintLibrary_IsExperimentStarted");
static_assert(offsetof(RBBlueprintLibrary_IsExperimentStarted, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsExperimentStarted::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsHiddenInEditor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_IsHiddenInEditor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E48[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsHiddenInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsHiddenInEditor");
static_assert(sizeof(RBBlueprintLibrary_IsHiddenInEditor) == 0x000010, "Wrong size on RBBlueprintLibrary_IsHiddenInEditor");
static_assert(offsetof(RBBlueprintLibrary_IsHiddenInEditor, InActor) == 0x000000, "Member 'RBBlueprintLibrary_IsHiddenInEditor::InActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsHiddenInEditor, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsHiddenInEditor::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsInBlueprintEditor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_IsInBlueprintEditor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E49[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsInBlueprintEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsInBlueprintEditor");
static_assert(sizeof(RBBlueprintLibrary_IsInBlueprintEditor) == 0x000010, "Wrong size on RBBlueprintLibrary_IsInBlueprintEditor");
static_assert(offsetof(RBBlueprintLibrary_IsInBlueprintEditor, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_IsInBlueprintEditor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsInBlueprintEditor, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsInBlueprintEditor::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsInEditor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_IsInEditor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsInEditor");
static_assert(sizeof(RBBlueprintLibrary_IsInEditor) == 0x000010, "Wrong size on RBBlueprintLibrary_IsInEditor");
static_assert(offsetof(RBBlueprintLibrary_IsInEditor, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_IsInEditor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsInEditor, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsInEditor::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsInEditorOrCommandlet
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_IsInEditorOrCommandlet final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsInEditorOrCommandlet) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsInEditorOrCommandlet");
static_assert(sizeof(RBBlueprintLibrary_IsInEditorOrCommandlet) == 0x000010, "Wrong size on RBBlueprintLibrary_IsInEditorOrCommandlet");
static_assert(offsetof(RBBlueprintLibrary_IsInEditorOrCommandlet, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_IsInEditorOrCommandlet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsInEditorOrCommandlet, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsInEditorOrCommandlet::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsInPIE
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_IsInPIE final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsInPIE) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsInPIE");
static_assert(sizeof(RBBlueprintLibrary_IsInPIE) == 0x000010, "Wrong size on RBBlueprintLibrary_IsInPIE");
static_assert(offsetof(RBBlueprintLibrary_IsInPIE, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_IsInPIE::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsInPIE, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsInPIE::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsInReagentReleaseTrial
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsInReagentReleaseTrial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsInReagentReleaseTrial) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsInReagentReleaseTrial");
static_assert(sizeof(RBBlueprintLibrary_IsInReagentReleaseTrial) == 0x000001, "Wrong size on RBBlueprintLibrary_IsInReagentReleaseTrial");
static_assert(offsetof(RBBlueprintLibrary_IsInReagentReleaseTrial, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsInReagentReleaseTrial::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsInTutorialStage
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsInTutorialStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsInTutorialStage) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsInTutorialStage");
static_assert(sizeof(RBBlueprintLibrary_IsInTutorialStage) == 0x000001, "Wrong size on RBBlueprintLibrary_IsInTutorialStage");
static_assert(offsetof(RBBlueprintLibrary_IsInTutorialStage, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsInTutorialStage::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsMissionIDEqual
// 0x0058 (0x0058 - 0x0000)
struct RBBlueprintLibrary_IsMissionIDEqual final
{
public:
	struct FRBMissionID                           MissionID1;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID2;                                        // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4D[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsMissionIDEqual) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsMissionIDEqual");
static_assert(sizeof(RBBlueprintLibrary_IsMissionIDEqual) == 0x000058, "Wrong size on RBBlueprintLibrary_IsMissionIDEqual");
static_assert(offsetof(RBBlueprintLibrary_IsMissionIDEqual, MissionID1) == 0x000000, "Member 'RBBlueprintLibrary_IsMissionIDEqual::MissionID1' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsMissionIDEqual, MissionID2) == 0x000028, "Member 'RBBlueprintLibrary_IsMissionIDEqual::MissionID2' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsMissionIDEqual, ReturnValue) == 0x000050, "Member 'RBBlueprintLibrary_IsMissionIDEqual::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsMissionIDValid
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_IsMissionIDValid final
{
public:
	struct FRBMissionID                           MissionID;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4E[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsMissionIDValid) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsMissionIDValid");
static_assert(sizeof(RBBlueprintLibrary_IsMissionIDValid) == 0x000030, "Wrong size on RBBlueprintLibrary_IsMissionIDValid");
static_assert(offsetof(RBBlueprintLibrary_IsMissionIDValid, MissionID) == 0x000000, "Member 'RBBlueprintLibrary_IsMissionIDValid::MissionID' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsMissionIDValid, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_IsMissionIDValid::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsPlayInEditor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_IsPlayInEditor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsPlayInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsPlayInEditor");
static_assert(sizeof(RBBlueprintLibrary_IsPlayInEditor) == 0x000010, "Wrong size on RBBlueprintLibrary_IsPlayInEditor");
static_assert(offsetof(RBBlueprintLibrary_IsPlayInEditor, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_IsPlayInEditor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsPlayInEditor, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsPlayInEditor::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsProgramEnabled
// 0x000C (0x000C - 0x0000)
struct RBBlueprintLibrary_IsProgramEnabled final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E50[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsProgramEnabled) == 0x000004, "Wrong alignment on RBBlueprintLibrary_IsProgramEnabled");
static_assert(sizeof(RBBlueprintLibrary_IsProgramEnabled) == 0x00000C, "Wrong size on RBBlueprintLibrary_IsProgramEnabled");
static_assert(offsetof(RBBlueprintLibrary_IsProgramEnabled, ProgramId) == 0x000000, "Member 'RBBlueprintLibrary_IsProgramEnabled::ProgramId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsProgramEnabled, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsProgramEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsPropertyWidgetSelected
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_IsPropertyWidgetSelected final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InWidgetName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutWidgetIndex;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E51[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsPropertyWidgetSelected) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsPropertyWidgetSelected");
static_assert(sizeof(RBBlueprintLibrary_IsPropertyWidgetSelected) == 0x000020, "Wrong size on RBBlueprintLibrary_IsPropertyWidgetSelected");
static_assert(offsetof(RBBlueprintLibrary_IsPropertyWidgetSelected, InActor) == 0x000000, "Member 'RBBlueprintLibrary_IsPropertyWidgetSelected::InActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsPropertyWidgetSelected, InWidgetName) == 0x000008, "Member 'RBBlueprintLibrary_IsPropertyWidgetSelected::InWidgetName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsPropertyWidgetSelected, OutWidgetIndex) == 0x000018, "Member 'RBBlueprintLibrary_IsPropertyWidgetSelected::OutWidgetIndex' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsPropertyWidgetSelected, ReturnValue) == 0x00001C, "Member 'RBBlueprintLibrary_IsPropertyWidgetSelected::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsRecentEvent
// 0x000C (0x000C - 0x0000)
struct RBBlueprintLibrary_IsRecentEvent final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelay;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E52[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsRecentEvent) == 0x000004, "Wrong alignment on RBBlueprintLibrary_IsRecentEvent");
static_assert(sizeof(RBBlueprintLibrary_IsRecentEvent) == 0x00000C, "Wrong size on RBBlueprintLibrary_IsRecentEvent");
static_assert(offsetof(RBBlueprintLibrary_IsRecentEvent, Time) == 0x000000, "Member 'RBBlueprintLibrary_IsRecentEvent::Time' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsRecentEvent, MaxDelay) == 0x000004, "Member 'RBBlueprintLibrary_IsRecentEvent::MaxDelay' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsRecentEvent, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsRecentEvent::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsRecentServerEvent
// 0x000C (0x000C - 0x0000)
struct RBBlueprintLibrary_IsRecentServerEvent final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelay;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E53[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsRecentServerEvent) == 0x000004, "Wrong alignment on RBBlueprintLibrary_IsRecentServerEvent");
static_assert(sizeof(RBBlueprintLibrary_IsRecentServerEvent) == 0x00000C, "Wrong size on RBBlueprintLibrary_IsRecentServerEvent");
static_assert(offsetof(RBBlueprintLibrary_IsRecentServerEvent, Time) == 0x000000, "Member 'RBBlueprintLibrary_IsRecentServerEvent::Time' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsRecentServerEvent, MaxDelay) == 0x000004, "Member 'RBBlueprintLibrary_IsRecentServerEvent::MaxDelay' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsRecentServerEvent, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsRecentServerEvent::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsRunningFunctionalTests
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsRunningFunctionalTests final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsRunningFunctionalTests) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsRunningFunctionalTests");
static_assert(sizeof(RBBlueprintLibrary_IsRunningFunctionalTests) == 0x000001, "Wrong size on RBBlueprintLibrary_IsRunningFunctionalTests");
static_assert(offsetof(RBBlueprintLibrary_IsRunningFunctionalTests, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsRunningFunctionalTests::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsSoloMode
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsSoloMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsSoloMode) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsSoloMode");
static_assert(sizeof(RBBlueprintLibrary_IsSoloMode) == 0x000001, "Wrong size on RBBlueprintLibrary_IsSoloMode");
static_assert(offsetof(RBBlueprintLibrary_IsSoloMode, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsSoloMode::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsSonyConsole
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsSonyConsole final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsSonyConsole) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsSonyConsole");
static_assert(sizeof(RBBlueprintLibrary_IsSonyConsole) == 0x000001, "Wrong size on RBBlueprintLibrary_IsSonyConsole");
static_assert(offsetof(RBBlueprintLibrary_IsSonyConsole, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsSonyConsole::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsStageIDEqual
// 0x0058 (0x0058 - 0x0000)
struct RBBlueprintLibrary_IsStageIDEqual final
{
public:
	struct FRBStageID                             StageID1;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBStageID                             StageID2;                                          // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E54[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsStageIDEqual) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsStageIDEqual");
static_assert(sizeof(RBBlueprintLibrary_IsStageIDEqual) == 0x000058, "Wrong size on RBBlueprintLibrary_IsStageIDEqual");
static_assert(offsetof(RBBlueprintLibrary_IsStageIDEqual, StageID1) == 0x000000, "Member 'RBBlueprintLibrary_IsStageIDEqual::StageID1' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsStageIDEqual, StageID2) == 0x000028, "Member 'RBBlueprintLibrary_IsStageIDEqual::StageID2' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsStageIDEqual, ReturnValue) == 0x000050, "Member 'RBBlueprintLibrary_IsStageIDEqual::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsStageIDValid
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_IsStageIDValid final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E55[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsStageIDValid) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsStageIDValid");
static_assert(sizeof(RBBlueprintLibrary_IsStageIDValid) == 0x000030, "Wrong size on RBBlueprintLibrary_IsStageIDValid");
static_assert(offsetof(RBBlueprintLibrary_IsStageIDValid, StageID) == 0x000000, "Member 'RBBlueprintLibrary_IsStageIDValid::StageID' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsStageIDValid, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_IsStageIDValid::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsStagePrepared
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsStagePrepared final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsStagePrepared) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsStagePrepared");
static_assert(sizeof(RBBlueprintLibrary_IsStagePrepared) == 0x000001, "Wrong size on RBBlueprintLibrary_IsStagePrepared");
static_assert(offsetof(RBBlueprintLibrary_IsStagePrepared, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsStagePrepared::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsStageReady
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsStageReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsStageReady) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsStageReady");
static_assert(sizeof(RBBlueprintLibrary_IsStageReady) == 0x000001, "Wrong size on RBBlueprintLibrary_IsStageReady");
static_assert(offsetof(RBBlueprintLibrary_IsStageReady, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsStageReady::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsStageStarted
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsStageStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsStageStarted) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsStageStarted");
static_assert(sizeof(RBBlueprintLibrary_IsStageStarted) == 0x000001, "Wrong size on RBBlueprintLibrary_IsStageStarted");
static_assert(offsetof(RBBlueprintLibrary_IsStageStarted, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsStageStarted::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsTransactional
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_IsTransactional final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E56[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsTransactional) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsTransactional");
static_assert(sizeof(RBBlueprintLibrary_IsTransactional) == 0x000010, "Wrong size on RBBlueprintLibrary_IsTransactional");
static_assert(offsetof(RBBlueprintLibrary_IsTransactional, TargetActor) == 0x000000, "Member 'RBBlueprintLibrary_IsTransactional::TargetActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsTransactional, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsTransactional::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsTransient
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_IsTransient final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E57[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsTransient) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsTransient");
static_assert(sizeof(RBBlueprintLibrary_IsTransient) == 0x000010, "Wrong size on RBBlueprintLibrary_IsTransient");
static_assert(offsetof(RBBlueprintLibrary_IsTransient, TargetActor) == 0x000000, "Member 'RBBlueprintLibrary_IsTransient::TargetActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsTransient, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsTransient::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsTrialEnabled
// 0x000C (0x000C - 0x0000)
struct RBBlueprintLibrary_IsTrialEnabled final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E58[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsTrialEnabled) == 0x000004, "Wrong alignment on RBBlueprintLibrary_IsTrialEnabled");
static_assert(sizeof(RBBlueprintLibrary_IsTrialEnabled) == 0x00000C, "Wrong size on RBBlueprintLibrary_IsTrialEnabled");
static_assert(offsetof(RBBlueprintLibrary_IsTrialEnabled, TrialId) == 0x000000, "Member 'RBBlueprintLibrary_IsTrialEnabled::TrialId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsTrialEnabled, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsTrialEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsUniqueVariatorTypeActive
// 0x0002 (0x0002 - 0x0000)
struct RBBlueprintLibrary_IsUniqueVariatorTypeActive final
{
public:
	EUniqueVariatorType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsUniqueVariatorTypeActive) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsUniqueVariatorTypeActive");
static_assert(sizeof(RBBlueprintLibrary_IsUniqueVariatorTypeActive) == 0x000002, "Wrong size on RBBlueprintLibrary_IsUniqueVariatorTypeActive");
static_assert(offsetof(RBBlueprintLibrary_IsUniqueVariatorTypeActive, Type) == 0x000000, "Member 'RBBlueprintLibrary_IsUniqueVariatorTypeActive::Type' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsUniqueVariatorTypeActive, ReturnValue) == 0x000001, "Member 'RBBlueprintLibrary_IsUniqueVariatorTypeActive::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsValid
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_IsValid final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E59[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsValid) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsValid");
static_assert(sizeof(RBBlueprintLibrary_IsValid) == 0x000030, "Wrong size on RBBlueprintLibrary_IsValid");
static_assert(offsetof(RBBlueprintLibrary_IsValid, UniqueId) == 0x000000, "Member 'RBBlueprintLibrary_IsValid::UniqueId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsValid, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_IsValid::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsValidNPCForAuraVariator
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_IsValidNPCForAuraVariator final
{
public:
	class ARBNPC*                                 RBNPC;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_IsValidNPCForAuraVariator) == 0x000008, "Wrong alignment on RBBlueprintLibrary_IsValidNPCForAuraVariator");
static_assert(sizeof(RBBlueprintLibrary_IsValidNPCForAuraVariator) == 0x000010, "Wrong size on RBBlueprintLibrary_IsValidNPCForAuraVariator");
static_assert(offsetof(RBBlueprintLibrary_IsValidNPCForAuraVariator, RBNPC) == 0x000000, "Member 'RBBlueprintLibrary_IsValidNPCForAuraVariator::RBNPC' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_IsValidNPCForAuraVariator, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_IsValidNPCForAuraVariator::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsWaitingToStart
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsWaitingToStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsWaitingToStart) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsWaitingToStart");
static_assert(sizeof(RBBlueprintLibrary_IsWaitingToStart) == 0x000001, "Wrong size on RBBlueprintLibrary_IsWaitingToStart");
static_assert(offsetof(RBBlueprintLibrary_IsWaitingToStart, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsWaitingToStart::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsWorldPopulated
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsWorldPopulated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsWorldPopulated) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsWorldPopulated");
static_assert(sizeof(RBBlueprintLibrary_IsWorldPopulated) == 0x000001, "Wrong size on RBBlueprintLibrary_IsWorldPopulated");
static_assert(offsetof(RBBlueprintLibrary_IsWorldPopulated, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsWorldPopulated::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.IsWorldPopulatingOrPopulated
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_IsWorldPopulatingOrPopulated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_IsWorldPopulatingOrPopulated) == 0x000001, "Wrong alignment on RBBlueprintLibrary_IsWorldPopulatingOrPopulated");
static_assert(sizeof(RBBlueprintLibrary_IsWorldPopulatingOrPopulated) == 0x000001, "Wrong size on RBBlueprintLibrary_IsWorldPopulatingOrPopulated");
static_assert(offsetof(RBBlueprintLibrary_IsWorldPopulatingOrPopulated, ReturnValue) == 0x000000, "Member 'RBBlueprintLibrary_IsWorldPopulatingOrPopulated::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.LerpAngle
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_LerpAngle final
{
public:
	float                                         AngleA;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_LerpAngle) == 0x000004, "Wrong alignment on RBBlueprintLibrary_LerpAngle");
static_assert(sizeof(RBBlueprintLibrary_LerpAngle) == 0x000010, "Wrong size on RBBlueprintLibrary_LerpAngle");
static_assert(offsetof(RBBlueprintLibrary_LerpAngle, AngleA) == 0x000000, "Member 'RBBlueprintLibrary_LerpAngle::AngleA' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LerpAngle, AngleB) == 0x000004, "Member 'RBBlueprintLibrary_LerpAngle::AngleB' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LerpAngle, Alpha) == 0x000008, "Member 'RBBlueprintLibrary_LerpAngle::Alpha' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LerpAngle, ReturnValue) == 0x00000C, "Member 'RBBlueprintLibrary_LerpAngle::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.LevelRandomBool
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_LevelRandomBool final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5B[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_LevelRandomBool) == 0x000004, "Wrong alignment on RBBlueprintLibrary_LevelRandomBool");
static_assert(sizeof(RBBlueprintLibrary_LevelRandomBool) == 0x000008, "Wrong size on RBBlueprintLibrary_LevelRandomBool");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomBool, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_LevelRandomBool::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomBool, ReturnValue) == 0x000004, "Member 'RBBlueprintLibrary_LevelRandomBool::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.LevelRandomFloat
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_LevelRandomFloat final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_LevelRandomFloat) == 0x000004, "Wrong alignment on RBBlueprintLibrary_LevelRandomFloat");
static_assert(sizeof(RBBlueprintLibrary_LevelRandomFloat) == 0x000008, "Wrong size on RBBlueprintLibrary_LevelRandomFloat");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomFloat, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_LevelRandomFloat::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomFloat, ReturnValue) == 0x000004, "Member 'RBBlueprintLibrary_LevelRandomFloat::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.LevelRandomFloatRange
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_LevelRandomFloatRange final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_LevelRandomFloatRange) == 0x000004, "Wrong alignment on RBBlueprintLibrary_LevelRandomFloatRange");
static_assert(sizeof(RBBlueprintLibrary_LevelRandomFloatRange) == 0x000010, "Wrong size on RBBlueprintLibrary_LevelRandomFloatRange");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomFloatRange, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_LevelRandomFloatRange::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomFloatRange, MinValue) == 0x000004, "Member 'RBBlueprintLibrary_LevelRandomFloatRange::MinValue' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomFloatRange, MaxValue) == 0x000008, "Member 'RBBlueprintLibrary_LevelRandomFloatRange::MaxValue' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomFloatRange, ReturnValue) == 0x00000C, "Member 'RBBlueprintLibrary_LevelRandomFloatRange::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.LevelRandomInt
// 0x000C (0x000C - 0x0000)
struct RBBlueprintLibrary_LevelRandomInt final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_LevelRandomInt) == 0x000004, "Wrong alignment on RBBlueprintLibrary_LevelRandomInt");
static_assert(sizeof(RBBlueprintLibrary_LevelRandomInt) == 0x00000C, "Wrong size on RBBlueprintLibrary_LevelRandomInt");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomInt, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_LevelRandomInt::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomInt, MaxValue) == 0x000004, "Member 'RBBlueprintLibrary_LevelRandomInt::MaxValue' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomInt, ReturnValue) == 0x000008, "Member 'RBBlueprintLibrary_LevelRandomInt::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.LevelRandomIntRange
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_LevelRandomIntRange final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_LevelRandomIntRange) == 0x000004, "Wrong alignment on RBBlueprintLibrary_LevelRandomIntRange");
static_assert(sizeof(RBBlueprintLibrary_LevelRandomIntRange) == 0x000010, "Wrong size on RBBlueprintLibrary_LevelRandomIntRange");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomIntRange, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_LevelRandomIntRange::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomIntRange, MinValue) == 0x000004, "Member 'RBBlueprintLibrary_LevelRandomIntRange::MinValue' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomIntRange, MaxValue) == 0x000008, "Member 'RBBlueprintLibrary_LevelRandomIntRange::MaxValue' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LevelRandomIntRange, ReturnValue) == 0x00000C, "Member 'RBBlueprintLibrary_LevelRandomIntRange::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.LogMovement
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_LogMovement final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_LogMovement) == 0x000008, "Wrong alignment on RBBlueprintLibrary_LogMovement");
static_assert(sizeof(RBBlueprintLibrary_LogMovement) == 0x000018, "Wrong size on RBBlueprintLibrary_LogMovement");
static_assert(offsetof(RBBlueprintLibrary_LogMovement, Pawn) == 0x000000, "Member 'RBBlueprintLibrary_LogMovement::Pawn' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_LogMovement, String) == 0x000008, "Member 'RBBlueprintLibrary_LogMovement::String' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.MarkPackageDirty
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_MarkPackageDirty final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_MarkPackageDirty) == 0x000008, "Wrong alignment on RBBlueprintLibrary_MarkPackageDirty");
static_assert(sizeof(RBBlueprintLibrary_MarkPackageDirty) == 0x000008, "Wrong size on RBBlueprintLibrary_MarkPackageDirty");
static_assert(offsetof(RBBlueprintLibrary_MarkPackageDirty, Object) == 0x000000, "Member 'RBBlueprintLibrary_MarkPackageDirty::Object' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.MarkRenderStateDirty
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_MarkRenderStateDirty final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_MarkRenderStateDirty) == 0x000008, "Wrong alignment on RBBlueprintLibrary_MarkRenderStateDirty");
static_assert(sizeof(RBBlueprintLibrary_MarkRenderStateDirty) == 0x000008, "Wrong size on RBBlueprintLibrary_MarkRenderStateDirty");
static_assert(offsetof(RBBlueprintLibrary_MarkRenderStateDirty, PrimitiveComponent) == 0x000000, "Member 'RBBlueprintLibrary_MarkRenderStateDirty::PrimitiveComponent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.NormalizeRotationAngle
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_NormalizeRotationAngle final
{
public:
	float                                         Current;                                           // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_NormalizeRotationAngle) == 0x000004, "Wrong alignment on RBBlueprintLibrary_NormalizeRotationAngle");
static_assert(sizeof(RBBlueprintLibrary_NormalizeRotationAngle) == 0x000008, "Wrong size on RBBlueprintLibrary_NormalizeRotationAngle");
static_assert(offsetof(RBBlueprintLibrary_NormalizeRotationAngle, Current) == 0x000000, "Member 'RBBlueprintLibrary_NormalizeRotationAngle::Current' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_NormalizeRotationAngle, ReturnValue) == 0x000004, "Member 'RBBlueprintLibrary_NormalizeRotationAngle::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.PlayAnnouncerLine_Server
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_PlayAnnouncerLine_Server final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOBehavior                                   VoBehavior;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5C[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrePlayQueueDelay;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_PlayAnnouncerLine_Server) == 0x000008, "Wrong alignment on RBBlueprintLibrary_PlayAnnouncerLine_Server");
static_assert(sizeof(RBBlueprintLibrary_PlayAnnouncerLine_Server) == 0x000010, "Wrong size on RBBlueprintLibrary_PlayAnnouncerLine_Server");
static_assert(offsetof(RBBlueprintLibrary_PlayAnnouncerLine_Server, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_PlayAnnouncerLine_Server::AkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayAnnouncerLine_Server, VoBehavior) == 0x000008, "Member 'RBBlueprintLibrary_PlayAnnouncerLine_Server::VoBehavior' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayAnnouncerLine_Server, PrePlayQueueDelay) == 0x00000C, "Member 'RBBlueprintLibrary_PlayAnnouncerLine_Server::PrePlayQueueDelay' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.PlayLoopingMusicTrack
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_PlayLoopingMusicTrack final
{
public:
	class UAkAudioEvent*                          StartEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          StopEvent;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopLevelMusic;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_PlayLoopingMusicTrack) == 0x000008, "Wrong alignment on RBBlueprintLibrary_PlayLoopingMusicTrack");
static_assert(sizeof(RBBlueprintLibrary_PlayLoopingMusicTrack) == 0x000018, "Wrong size on RBBlueprintLibrary_PlayLoopingMusicTrack");
static_assert(offsetof(RBBlueprintLibrary_PlayLoopingMusicTrack, StartEvent) == 0x000000, "Member 'RBBlueprintLibrary_PlayLoopingMusicTrack::StartEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayLoopingMusicTrack, StopEvent) == 0x000008, "Member 'RBBlueprintLibrary_PlayLoopingMusicTrack::StopEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayLoopingMusicTrack, bStopLevelMusic) == 0x000010, "Member 'RBBlueprintLibrary_PlayLoopingMusicTrack::bStopLevelMusic' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.PlayLoopingSoundOnActor
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_PlayLoopingSoundOnActor final
{
public:
	class UAkAudioEvent*                          StartAkEvent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          StopAkEvent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5E[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_PlayLoopingSoundOnActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_PlayLoopingSoundOnActor");
static_assert(sizeof(RBBlueprintLibrary_PlayLoopingSoundOnActor) == 0x000020, "Wrong size on RBBlueprintLibrary_PlayLoopingSoundOnActor");
static_assert(offsetof(RBBlueprintLibrary_PlayLoopingSoundOnActor, StartAkEvent) == 0x000000, "Member 'RBBlueprintLibrary_PlayLoopingSoundOnActor::StartAkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayLoopingSoundOnActor, StopAkEvent) == 0x000008, "Member 'RBBlueprintLibrary_PlayLoopingSoundOnActor::StopAkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayLoopingSoundOnActor, Actor) == 0x000010, "Member 'RBBlueprintLibrary_PlayLoopingSoundOnActor::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayLoopingSoundOnActor, ReturnValue) == 0x000018, "Member 'RBBlueprintLibrary_PlayLoopingSoundOnActor::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.PlayMurkoffAnnouncement
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_PlayMurkoffAnnouncement final
{
public:
	struct FRBMurkoffAnnouncentData               AnnouncementData;                                  // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          StopEvent;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopDelay;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5F[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_PlayMurkoffAnnouncement) == 0x000008, "Wrong alignment on RBBlueprintLibrary_PlayMurkoffAnnouncement");
static_assert(sizeof(RBBlueprintLibrary_PlayMurkoffAnnouncement) == 0x000030, "Wrong size on RBBlueprintLibrary_PlayMurkoffAnnouncement");
static_assert(offsetof(RBBlueprintLibrary_PlayMurkoffAnnouncement, AnnouncementData) == 0x000000, "Member 'RBBlueprintLibrary_PlayMurkoffAnnouncement::AnnouncementData' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayMurkoffAnnouncement, StopEvent) == 0x000020, "Member 'RBBlueprintLibrary_PlayMurkoffAnnouncement::StopEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayMurkoffAnnouncement, StopDelay) == 0x000028, "Member 'RBBlueprintLibrary_PlayMurkoffAnnouncement::StopDelay' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.PlayObjectiveNarrativeScreenAnimation
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_PlayObjectiveNarrativeScreenAnimation final
{
public:
	struct FNarrativeScreenAnimationData          AnimData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPlayerDefaultIntro;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E60[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_PlayObjectiveNarrativeScreenAnimation) == 0x000008, "Wrong alignment on RBBlueprintLibrary_PlayObjectiveNarrativeScreenAnimation");
static_assert(sizeof(RBBlueprintLibrary_PlayObjectiveNarrativeScreenAnimation) == 0x000020, "Wrong size on RBBlueprintLibrary_PlayObjectiveNarrativeScreenAnimation");
static_assert(offsetof(RBBlueprintLibrary_PlayObjectiveNarrativeScreenAnimation, AnimData) == 0x000000, "Member 'RBBlueprintLibrary_PlayObjectiveNarrativeScreenAnimation::AnimData' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayObjectiveNarrativeScreenAnimation, bPlayerDefaultIntro) == 0x000018, "Member 'RBBlueprintLibrary_PlayObjectiveNarrativeScreenAnimation::bPlayerDefaultIntro' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.PlayScareStinger
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_PlayScareStinger final
{
public:
	class AActor*                                 ScareActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          StingerEvent;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_PlayScareStinger) == 0x000008, "Wrong alignment on RBBlueprintLibrary_PlayScareStinger");
static_assert(sizeof(RBBlueprintLibrary_PlayScareStinger) == 0x000020, "Wrong size on RBBlueprintLibrary_PlayScareStinger");
static_assert(offsetof(RBBlueprintLibrary_PlayScareStinger, ScareActor) == 0x000000, "Member 'RBBlueprintLibrary_PlayScareStinger::ScareActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayScareStinger, StingerEvent) == 0x000008, "Member 'RBBlueprintLibrary_PlayScareStinger::StingerEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayScareStinger, Location) == 0x000010, "Member 'RBBlueprintLibrary_PlayScareStinger::Location' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlayScareStinger, Distance) == 0x00001C, "Member 'RBBlueprintLibrary_PlayScareStinger::Distance' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.PlaySingleShotMusicTrack
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_PlaySingleShotMusicTrack final
{
public:
	class UAkAudioEvent*                          MusicTrack;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseLevelMusic;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E61[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_PlaySingleShotMusicTrack) == 0x000008, "Wrong alignment on RBBlueprintLibrary_PlaySingleShotMusicTrack");
static_assert(sizeof(RBBlueprintLibrary_PlaySingleShotMusicTrack) == 0x000010, "Wrong size on RBBlueprintLibrary_PlaySingleShotMusicTrack");
static_assert(offsetof(RBBlueprintLibrary_PlaySingleShotMusicTrack, MusicTrack) == 0x000000, "Member 'RBBlueprintLibrary_PlaySingleShotMusicTrack::MusicTrack' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PlaySingleShotMusicTrack, bPauseLevelMusic) == 0x000008, "Member 'RBBlueprintLibrary_PlaySingleShotMusicTrack::bPauseLevelMusic' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.PostAudioEventOnGroup_Client
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_PostAudioEventOnGroup_Client final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_PostAudioEventOnGroup_Client) == 0x000008, "Wrong alignment on RBBlueprintLibrary_PostAudioEventOnGroup_Client");
static_assert(sizeof(RBBlueprintLibrary_PostAudioEventOnGroup_Client) == 0x000010, "Wrong size on RBBlueprintLibrary_PostAudioEventOnGroup_Client");
static_assert(offsetof(RBBlueprintLibrary_PostAudioEventOnGroup_Client, AkEvent) == 0x000000, "Member 'RBBlueprintLibrary_PostAudioEventOnGroup_Client::AkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_PostAudioEventOnGroup_Client, GroupName) == 0x000008, "Member 'RBBlueprintLibrary_PostAudioEventOnGroup_Client::GroupName' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.PrintScreenMessage
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_PrintScreenMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_PrintScreenMessage) == 0x000008, "Wrong alignment on RBBlueprintLibrary_PrintScreenMessage");
static_assert(sizeof(RBBlueprintLibrary_PrintScreenMessage) == 0x000010, "Wrong size on RBBlueprintLibrary_PrintScreenMessage");
static_assert(offsetof(RBBlueprintLibrary_PrintScreenMessage, Message) == 0x000000, "Member 'RBBlueprintLibrary_PrintScreenMessage::Message' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.RandomizeActorArray
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_RandomizeActorArray final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E62[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InActors;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_RandomizeActorArray) == 0x000008, "Wrong alignment on RBBlueprintLibrary_RandomizeActorArray");
static_assert(sizeof(RBBlueprintLibrary_RandomizeActorArray) == 0x000028, "Wrong size on RBBlueprintLibrary_RandomizeActorArray");
static_assert(offsetof(RBBlueprintLibrary_RandomizeActorArray, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_RandomizeActorArray::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_RandomizeActorArray, InActors) == 0x000008, "Member 'RBBlueprintLibrary_RandomizeActorArray::InActors' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_RandomizeActorArray, ReturnValue) == 0x000018, "Member 'RBBlueprintLibrary_RandomizeActorArray::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.RemoveObjectiveIcon
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_RemoveObjectiveIcon final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_RemoveObjectiveIcon) == 0x000008, "Wrong alignment on RBBlueprintLibrary_RemoveObjectiveIcon");
static_assert(sizeof(RBBlueprintLibrary_RemoveObjectiveIcon) == 0x000008, "Wrong size on RBBlueprintLibrary_RemoveObjectiveIcon");
static_assert(offsetof(RBBlueprintLibrary_RemoveObjectiveIcon, InActor) == 0x000000, "Member 'RBBlueprintLibrary_RemoveObjectiveIcon::InActor' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.RemoveObjectiveIconForSpecificPlayer
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_RemoveObjectiveIconForSpecificPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InActor;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_RemoveObjectiveIconForSpecificPlayer) == 0x000008, "Wrong alignment on RBBlueprintLibrary_RemoveObjectiveIconForSpecificPlayer");
static_assert(sizeof(RBBlueprintLibrary_RemoveObjectiveIconForSpecificPlayer) == 0x000010, "Wrong size on RBBlueprintLibrary_RemoveObjectiveIconForSpecificPlayer");
static_assert(offsetof(RBBlueprintLibrary_RemoveObjectiveIconForSpecificPlayer, Player) == 0x000000, "Member 'RBBlueprintLibrary_RemoveObjectiveIconForSpecificPlayer::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_RemoveObjectiveIconForSpecificPlayer, InActor) == 0x000008, "Member 'RBBlueprintLibrary_RemoveObjectiveIconForSpecificPlayer::InActor' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.RemovePing
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_RemovePing final
{
public:
	class AActor*                                 PingedActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_RemovePing) == 0x000008, "Wrong alignment on RBBlueprintLibrary_RemovePing");
static_assert(sizeof(RBBlueprintLibrary_RemovePing) == 0x000008, "Wrong size on RBBlueprintLibrary_RemovePing");
static_assert(offsetof(RBBlueprintLibrary_RemovePing, PingedActor) == 0x000000, "Member 'RBBlueprintLibrary_RemovePing::PingedActor' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.RotatorToQuaternion
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_RotatorToQuaternion final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E63[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_RotatorToQuaternion) == 0x000010, "Wrong alignment on RBBlueprintLibrary_RotatorToQuaternion");
static_assert(sizeof(RBBlueprintLibrary_RotatorToQuaternion) == 0x000020, "Wrong size on RBBlueprintLibrary_RotatorToQuaternion");
static_assert(offsetof(RBBlueprintLibrary_RotatorToQuaternion, Rotation) == 0x000000, "Member 'RBBlueprintLibrary_RotatorToQuaternion::Rotation' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_RotatorToQuaternion, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_RotatorToQuaternion::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.RunConstructionScript
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_RunConstructionScript final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_RunConstructionScript) == 0x000008, "Wrong alignment on RBBlueprintLibrary_RunConstructionScript");
static_assert(sizeof(RBBlueprintLibrary_RunConstructionScript) == 0x000008, "Wrong size on RBBlueprintLibrary_RunConstructionScript");
static_assert(offsetof(RBBlueprintLibrary_RunConstructionScript, TargetActor) == 0x000000, "Member 'RBBlueprintLibrary_RunConstructionScript::TargetActor' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SeekOnEvent
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_SeekOnEvent final
{
public:
	class FString                                 In_EventName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           In_pComponent;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         In_fPercent;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          In_bSeekToNearestMarker;                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E64[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SeekOnEvent) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SeekOnEvent");
static_assert(sizeof(RBBlueprintLibrary_SeekOnEvent) == 0x000020, "Wrong size on RBBlueprintLibrary_SeekOnEvent");
static_assert(offsetof(RBBlueprintLibrary_SeekOnEvent, In_EventName) == 0x000000, "Member 'RBBlueprintLibrary_SeekOnEvent::In_EventName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SeekOnEvent, In_pComponent) == 0x000010, "Member 'RBBlueprintLibrary_SeekOnEvent::In_pComponent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SeekOnEvent, In_fPercent) == 0x000018, "Member 'RBBlueprintLibrary_SeekOnEvent::In_fPercent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SeekOnEvent, In_bSeekToNearestMarker) == 0x00001C, "Member 'RBBlueprintLibrary_SeekOnEvent::In_bSeekToNearestMarker' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Select3DWidget
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_Select3DWidget final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PropertyIndex;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPropertyTransform;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E65[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_Select3DWidget) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Select3DWidget");
static_assert(sizeof(RBBlueprintLibrary_Select3DWidget) == 0x000018, "Wrong size on RBBlueprintLibrary_Select3DWidget");
static_assert(offsetof(RBBlueprintLibrary_Select3DWidget, PropertyName) == 0x000000, "Member 'RBBlueprintLibrary_Select3DWidget::PropertyName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Select3DWidget, PropertyIndex) == 0x000010, "Member 'RBBlueprintLibrary_Select3DWidget::PropertyIndex' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Select3DWidget, bIsPropertyTransform) == 0x000014, "Member 'RBBlueprintLibrary_Select3DWidget::bIsPropertyTransform' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SelectActorsInEditor
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_SelectActorsInEditor final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bClearSelection;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E66[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SelectActorsInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SelectActorsInEditor");
static_assert(sizeof(RBBlueprintLibrary_SelectActorsInEditor) == 0x000018, "Wrong size on RBBlueprintLibrary_SelectActorsInEditor");
static_assert(offsetof(RBBlueprintLibrary_SelectActorsInEditor, Actors) == 0x000000, "Member 'RBBlueprintLibrary_SelectActorsInEditor::Actors' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SelectActorsInEditor, bClearSelection) == 0x000010, "Member 'RBBlueprintLibrary_SelectActorsInEditor::bClearSelection' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SelectComponentsInEditor
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_SelectComponentsInEditor final
{
public:
	TArray<class UActorComponent*>                Components;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bClearSelection;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E67[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SelectComponentsInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SelectComponentsInEditor");
static_assert(sizeof(RBBlueprintLibrary_SelectComponentsInEditor) == 0x000018, "Wrong size on RBBlueprintLibrary_SelectComponentsInEditor");
static_assert(offsetof(RBBlueprintLibrary_SelectComponentsInEditor, Components) == 0x000000, "Member 'RBBlueprintLibrary_SelectComponentsInEditor::Components' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SelectComponentsInEditor, bClearSelection) == 0x000010, "Member 'RBBlueprintLibrary_SelectComponentsInEditor::bClearSelection' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SelectInEditor
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_SelectInEditor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SelectInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SelectInEditor");
static_assert(sizeof(RBBlueprintLibrary_SelectInEditor) == 0x000008, "Wrong size on RBBlueprintLibrary_SelectInEditor");
static_assert(offsetof(RBBlueprintLibrary_SelectInEditor, TargetActor) == 0x000000, "Member 'RBBlueprintLibrary_SelectInEditor::TargetActor' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Set3DWidgetEnabled
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_Set3DWidgetEnabled final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWidgetEnabled;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E68[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_Set3DWidgetEnabled) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Set3DWidgetEnabled");
static_assert(sizeof(RBBlueprintLibrary_Set3DWidgetEnabled) == 0x000018, "Wrong size on RBBlueprintLibrary_Set3DWidgetEnabled");
static_assert(offsetof(RBBlueprintLibrary_Set3DWidgetEnabled, Actor) == 0x000000, "Member 'RBBlueprintLibrary_Set3DWidgetEnabled::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Set3DWidgetEnabled, PropertyName) == 0x000008, "Member 'RBBlueprintLibrary_Set3DWidgetEnabled::PropertyName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_Set3DWidgetEnabled, bWidgetEnabled) == 0x000010, "Member 'RBBlueprintLibrary_Set3DWidgetEnabled::bWidgetEnabled' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetActorTemporarilyHiddenInEditor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetActorTemporarilyHiddenInEditor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHidden;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E69[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SetActorTemporarilyHiddenInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetActorTemporarilyHiddenInEditor");
static_assert(sizeof(RBBlueprintLibrary_SetActorTemporarilyHiddenInEditor) == 0x000010, "Wrong size on RBBlueprintLibrary_SetActorTemporarilyHiddenInEditor");
static_assert(offsetof(RBBlueprintLibrary_SetActorTemporarilyHiddenInEditor, TargetActor) == 0x000000, "Member 'RBBlueprintLibrary_SetActorTemporarilyHiddenInEditor::TargetActor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetActorTemporarilyHiddenInEditor, bIsHidden) == 0x000008, "Member 'RBBlueprintLibrary_SetActorTemporarilyHiddenInEditor::bIsHidden' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetCanStepUpon
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetCanStepUpon final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECanBeCharacterBase                           CanStepUponValue;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6A[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SetCanStepUpon) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetCanStepUpon");
static_assert(sizeof(RBBlueprintLibrary_SetCanStepUpon) == 0x000010, "Wrong size on RBBlueprintLibrary_SetCanStepUpon");
static_assert(offsetof(RBBlueprintLibrary_SetCanStepUpon, SceneComponent) == 0x000000, "Member 'RBBlueprintLibrary_SetCanStepUpon::SceneComponent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetCanStepUpon, CanStepUponValue) == 0x000008, "Member 'RBBlueprintLibrary_SetCanStepUpon::CanStepUponValue' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetCanStepUpon, bPropagateToChildren) == 0x000009, "Member 'RBBlueprintLibrary_SetCanStepUpon::bPropagateToChildren' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetCollisionEnabledOnHierarchy
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetCollisionEnabledOnHierarchy final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             NewType;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SetCollisionEnabledOnHierarchy) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetCollisionEnabledOnHierarchy");
static_assert(sizeof(RBBlueprintLibrary_SetCollisionEnabledOnHierarchy) == 0x000010, "Wrong size on RBBlueprintLibrary_SetCollisionEnabledOnHierarchy");
static_assert(offsetof(RBBlueprintLibrary_SetCollisionEnabledOnHierarchy, SceneComponent) == 0x000000, "Member 'RBBlueprintLibrary_SetCollisionEnabledOnHierarchy::SceneComponent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetCollisionEnabledOnHierarchy, NewType) == 0x000008, "Member 'RBBlueprintLibrary_SetCollisionEnabledOnHierarchy::NewType' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetDoNotGenerateAutomaticUVs
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_SetDoNotGenerateAutomaticUVs final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SetDoNotGenerateAutomaticUVs) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetDoNotGenerateAutomaticUVs");
static_assert(sizeof(RBBlueprintLibrary_SetDoNotGenerateAutomaticUVs) == 0x000008, "Wrong size on RBBlueprintLibrary_SetDoNotGenerateAutomaticUVs");
static_assert(offsetof(RBBlueprintLibrary_SetDoNotGenerateAutomaticUVs, StaticMesh) == 0x000000, "Member 'RBBlueprintLibrary_SetDoNotGenerateAutomaticUVs::StaticMesh' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetForceNoVolumetricLightmapsOnHierarchy
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetForceNoVolumetricLightmapsOnHierarchy final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceNoVolumetricLightMap;                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SetForceNoVolumetricLightmapsOnHierarchy) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetForceNoVolumetricLightmapsOnHierarchy");
static_assert(sizeof(RBBlueprintLibrary_SetForceNoVolumetricLightmapsOnHierarchy) == 0x000010, "Wrong size on RBBlueprintLibrary_SetForceNoVolumetricLightmapsOnHierarchy");
static_assert(offsetof(RBBlueprintLibrary_SetForceNoVolumetricLightmapsOnHierarchy, SceneComponent) == 0x000000, "Member 'RBBlueprintLibrary_SetForceNoVolumetricLightmapsOnHierarchy::SceneComponent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetForceNoVolumetricLightmapsOnHierarchy, bForceNoVolumetricLightMap) == 0x000008, "Member 'RBBlueprintLibrary_SetForceNoVolumetricLightmapsOnHierarchy::bForceNoVolumetricLightMap' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetGlobalAudioRTPC
// 0x000C (0x000C - 0x0000)
struct RBBlueprintLibrary_SetGlobalAudioRTPC final
{
public:
	class FName                                   RtpcName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTPCValue;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SetGlobalAudioRTPC) == 0x000004, "Wrong alignment on RBBlueprintLibrary_SetGlobalAudioRTPC");
static_assert(sizeof(RBBlueprintLibrary_SetGlobalAudioRTPC) == 0x00000C, "Wrong size on RBBlueprintLibrary_SetGlobalAudioRTPC");
static_assert(offsetof(RBBlueprintLibrary_SetGlobalAudioRTPC, RtpcName) == 0x000000, "Member 'RBBlueprintLibrary_SetGlobalAudioRTPC::RtpcName' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetGlobalAudioRTPC, RTPCValue) == 0x000008, "Member 'RBBlueprintLibrary_SetGlobalAudioRTPC::RTPCValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetGlobalAudioState
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetGlobalAudioState final
{
public:
	class FName                                   StateGroup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateValue;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SetGlobalAudioState) == 0x000004, "Wrong alignment on RBBlueprintLibrary_SetGlobalAudioState");
static_assert(sizeof(RBBlueprintLibrary_SetGlobalAudioState) == 0x000010, "Wrong size on RBBlueprintLibrary_SetGlobalAudioState");
static_assert(offsetof(RBBlueprintLibrary_SetGlobalAudioState, StateGroup) == 0x000000, "Member 'RBBlueprintLibrary_SetGlobalAudioState::StateGroup' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetGlobalAudioState, StateValue) == 0x000008, "Member 'RBBlueprintLibrary_SetGlobalAudioState::StateValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetHiddenInEditor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetHiddenInEditor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SetHiddenInEditor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetHiddenInEditor");
static_assert(sizeof(RBBlueprintLibrary_SetHiddenInEditor) == 0x000010, "Wrong size on RBBlueprintLibrary_SetHiddenInEditor");
static_assert(offsetof(RBBlueprintLibrary_SetHiddenInEditor, Actor) == 0x000000, "Member 'RBBlueprintLibrary_SetHiddenInEditor::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetHiddenInEditor, bHidden) == 0x000008, "Member 'RBBlueprintLibrary_SetHiddenInEditor::bHidden' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetLevelMusic
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_SetLevelMusic final
{
public:
	TArray<class UAkAudioEvent*>                  StartEvents;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UAkAudioEvent*>                  StopEvents;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SetLevelMusic) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetLevelMusic");
static_assert(sizeof(RBBlueprintLibrary_SetLevelMusic) == 0x000020, "Wrong size on RBBlueprintLibrary_SetLevelMusic");
static_assert(offsetof(RBBlueprintLibrary_SetLevelMusic, StartEvents) == 0x000000, "Member 'RBBlueprintLibrary_SetLevelMusic::StartEvents' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetLevelMusic, StopEvents) == 0x000010, "Member 'RBBlueprintLibrary_SetLevelMusic::StopEvents' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetListenAtPlayerLocation
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetListenAtPlayerLocation final
{
public:
	class UObject*                                RequestOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bListenAtPlayerLocation;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SetListenAtPlayerLocation) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetListenAtPlayerLocation");
static_assert(sizeof(RBBlueprintLibrary_SetListenAtPlayerLocation) == 0x000010, "Wrong size on RBBlueprintLibrary_SetListenAtPlayerLocation");
static_assert(offsetof(RBBlueprintLibrary_SetListenAtPlayerLocation, RequestOwner) == 0x000000, "Member 'RBBlueprintLibrary_SetListenAtPlayerLocation::RequestOwner' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetListenAtPlayerLocation, bListenAtPlayerLocation) == 0x000008, "Member 'RBBlueprintLibrary_SetListenAtPlayerLocation::bListenAtPlayerLocation' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetNarrativeMusicClient
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_SetNarrativeMusicClient final
{
public:
	struct FNarrativeSoundEventsInfo              NarrativeSoundEventsInfo;                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class ARBPawn*                          Pawn;                                              // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SetNarrativeMusicClient) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetNarrativeMusicClient");
static_assert(sizeof(RBBlueprintLibrary_SetNarrativeMusicClient) == 0x000028, "Wrong size on RBBlueprintLibrary_SetNarrativeMusicClient");
static_assert(offsetof(RBBlueprintLibrary_SetNarrativeMusicClient, NarrativeSoundEventsInfo) == 0x000000, "Member 'RBBlueprintLibrary_SetNarrativeMusicClient::NarrativeSoundEventsInfo' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetNarrativeMusicClient, Pawn) == 0x000020, "Member 'RBBlueprintLibrary_SetNarrativeMusicClient::Pawn' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetNarrativeMusicServer
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_SetNarrativeMusicServer final
{
public:
	struct FNarrativeSoundEventsInfo              NarrativeSoundEventsInfo;                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bPauseLevelMusic;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6F[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SetNarrativeMusicServer) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetNarrativeMusicServer");
static_assert(sizeof(RBBlueprintLibrary_SetNarrativeMusicServer) == 0x000028, "Wrong size on RBBlueprintLibrary_SetNarrativeMusicServer");
static_assert(offsetof(RBBlueprintLibrary_SetNarrativeMusicServer, NarrativeSoundEventsInfo) == 0x000000, "Member 'RBBlueprintLibrary_SetNarrativeMusicServer::NarrativeSoundEventsInfo' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetNarrativeMusicServer, bPauseLevelMusic) == 0x000020, "Member 'RBBlueprintLibrary_SetNarrativeMusicServer::bPauseLevelMusic' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetNetworkSyncState
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetNetworkSyncState final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChain;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E70[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SetNetworkSyncState) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetNetworkSyncState");
static_assert(sizeof(RBBlueprintLibrary_SetNetworkSyncState) == 0x000010, "Wrong size on RBBlueprintLibrary_SetNetworkSyncState");
static_assert(offsetof(RBBlueprintLibrary_SetNetworkSyncState, Actor) == 0x000000, "Member 'RBBlueprintLibrary_SetNetworkSyncState::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetNetworkSyncState, bActive) == 0x000008, "Member 'RBBlueprintLibrary_SetNetworkSyncState::bActive' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetNetworkSyncState, bChain) == 0x000009, "Member 'RBBlueprintLibrary_SetNetworkSyncState::bChain' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetNVBattery
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetNVBattery final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E71[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SetNVBattery) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetNVBattery");
static_assert(sizeof(RBBlueprintLibrary_SetNVBattery) == 0x000010, "Wrong size on RBBlueprintLibrary_SetNVBattery");
static_assert(offsetof(RBBlueprintLibrary_SetNVBattery, Player) == 0x000000, "Member 'RBBlueprintLibrary_SetNVBattery::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetNVBattery, Value) == 0x000008, "Member 'RBBlueprintLibrary_SetNVBattery::Value' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetSwitchGlobal
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_SetSwitchGlobal final
{
public:
	class FName                                   SwitchGroup;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SetSwitchGlobal) == 0x000004, "Wrong alignment on RBBlueprintLibrary_SetSwitchGlobal");
static_assert(sizeof(RBBlueprintLibrary_SetSwitchGlobal) == 0x000010, "Wrong size on RBBlueprintLibrary_SetSwitchGlobal");
static_assert(offsetof(RBBlueprintLibrary_SetSwitchGlobal, SwitchGroup) == 0x000000, "Member 'RBBlueprintLibrary_SetSwitchGlobal::SwitchGroup' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SetSwitchGlobal, SwitchState) == 0x000008, "Member 'RBBlueprintLibrary_SetSwitchGlobal::SwitchState' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetupDisabledHidespotMeshCollision
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_SetupDisabledHidespotMeshCollision final
{
public:
	class UPrimitiveComponent*                    DisableMeshComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SetupDisabledHidespotMeshCollision) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetupDisabledHidespotMeshCollision");
static_assert(sizeof(RBBlueprintLibrary_SetupDisabledHidespotMeshCollision) == 0x000008, "Wrong size on RBBlueprintLibrary_SetupDisabledHidespotMeshCollision");
static_assert(offsetof(RBBlueprintLibrary_SetupDisabledHidespotMeshCollision, DisableMeshComponent) == 0x000000, "Member 'RBBlueprintLibrary_SetupDisabledHidespotMeshCollision::DisableMeshComponent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetupDisabledHidespotMeshesCollision
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_SetupDisabledHidespotMeshesCollision final
{
public:
	class USceneComponent*                        DisabledRoot;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SetupDisabledHidespotMeshesCollision) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetupDisabledHidespotMeshesCollision");
static_assert(sizeof(RBBlueprintLibrary_SetupDisabledHidespotMeshesCollision) == 0x000008, "Wrong size on RBBlueprintLibrary_SetupDisabledHidespotMeshesCollision");
static_assert(offsetof(RBBlueprintLibrary_SetupDisabledHidespotMeshesCollision, DisabledRoot) == 0x000000, "Member 'RBBlueprintLibrary_SetupDisabledHidespotMeshesCollision::DisabledRoot' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SetupMasterPose
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_SetupMasterPose final
{
public:
	class USkeletalMeshComponent*                 MasterPoseComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SetupMasterPose) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SetupMasterPose");
static_assert(sizeof(RBBlueprintLibrary_SetupMasterPose) == 0x000008, "Wrong size on RBBlueprintLibrary_SetupMasterPose");
static_assert(offsetof(RBBlueprintLibrary_SetupMasterPose, MasterPoseComponent) == 0x000000, "Member 'RBBlueprintLibrary_SetupMasterPose::MasterPoseComponent' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ShowInteractionMessage
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_ShowInteractionMessage final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMessagePriority                              Priority;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E72[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_ShowInteractionMessage) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ShowInteractionMessage");
static_assert(sizeof(RBBlueprintLibrary_ShowInteractionMessage) == 0x000028, "Wrong size on RBBlueprintLibrary_ShowInteractionMessage");
static_assert(offsetof(RBBlueprintLibrary_ShowInteractionMessage, Player) == 0x000000, "Member 'RBBlueprintLibrary_ShowInteractionMessage::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ShowInteractionMessage, Message) == 0x000008, "Member 'RBBlueprintLibrary_ShowInteractionMessage::Message' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ShowInteractionMessage, Priority) == 0x000020, "Member 'RBBlueprintLibrary_ShowInteractionMessage::Priority' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ShowInteractionMessage, Duration) == 0x000024, "Member 'RBBlueprintLibrary_ShowInteractionMessage::Duration' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ShowInteractionMessageToAllPlayers
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_ShowInteractionMessageToAllPlayers final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EMessagePriority                              Priority;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E73[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_ShowInteractionMessageToAllPlayers) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ShowInteractionMessageToAllPlayers");
static_assert(sizeof(RBBlueprintLibrary_ShowInteractionMessageToAllPlayers) == 0x000020, "Wrong size on RBBlueprintLibrary_ShowInteractionMessageToAllPlayers");
static_assert(offsetof(RBBlueprintLibrary_ShowInteractionMessageToAllPlayers, Message) == 0x000000, "Member 'RBBlueprintLibrary_ShowInteractionMessageToAllPlayers::Message' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ShowInteractionMessageToAllPlayers, Priority) == 0x000018, "Member 'RBBlueprintLibrary_ShowInteractionMessageToAllPlayers::Priority' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ShowInteractionMessageToAllPlayers, Duration) == 0x00001C, "Member 'RBBlueprintLibrary_ShowInteractionMessageToAllPlayers::Duration' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ShowObjectiveMessage
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_ShowObjectiveMessage final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaySounds;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E74[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_ShowObjectiveMessage) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ShowObjectiveMessage");
static_assert(sizeof(RBBlueprintLibrary_ShowObjectiveMessage) == 0x000028, "Wrong size on RBBlueprintLibrary_ShowObjectiveMessage");
static_assert(offsetof(RBBlueprintLibrary_ShowObjectiveMessage, WorldContextObject) == 0x000000, "Member 'RBBlueprintLibrary_ShowObjectiveMessage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ShowObjectiveMessage, Message) == 0x000008, "Member 'RBBlueprintLibrary_ShowObjectiveMessage::Message' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ShowObjectiveMessage, Duration) == 0x000020, "Member 'RBBlueprintLibrary_ShowObjectiveMessage::Duration' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ShowObjectiveMessage, PlaySounds) == 0x000024, "Member 'RBBlueprintLibrary_ShowObjectiveMessage::PlaySounds' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SortByName
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_SortByName final
{
public:
	TArray<class UObject*>                        InObjects;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_SortByName) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SortByName");
static_assert(sizeof(RBBlueprintLibrary_SortByName) == 0x000020, "Wrong size on RBBlueprintLibrary_SortByName");
static_assert(offsetof(RBBlueprintLibrary_SortByName, InObjects) == 0x000000, "Member 'RBBlueprintLibrary_SortByName::InObjects' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SortByName, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_SortByName::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SortCompareActorsByName
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_SortCompareActorsByName final
{
public:
	const class AActor*                           ActorA;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorB;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E75[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SortCompareActorsByName) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SortCompareActorsByName");
static_assert(sizeof(RBBlueprintLibrary_SortCompareActorsByName) == 0x000018, "Wrong size on RBBlueprintLibrary_SortCompareActorsByName");
static_assert(offsetof(RBBlueprintLibrary_SortCompareActorsByName, ActorA) == 0x000000, "Member 'RBBlueprintLibrary_SortCompareActorsByName::ActorA' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SortCompareActorsByName, ActorB) == 0x000008, "Member 'RBBlueprintLibrary_SortCompareActorsByName::ActorB' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SortCompareActorsByName, ReturnValue) == 0x000010, "Member 'RBBlueprintLibrary_SortCompareActorsByName::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SortCompareString
// 0x0028 (0x0028 - 0x0000)
struct RBBlueprintLibrary_SortCompareString final
{
public:
	class FString                                 StringA;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringB;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E76[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SortCompareString) == 0x000008, "Wrong alignment on RBBlueprintLibrary_SortCompareString");
static_assert(sizeof(RBBlueprintLibrary_SortCompareString) == 0x000028, "Wrong size on RBBlueprintLibrary_SortCompareString");
static_assert(offsetof(RBBlueprintLibrary_SortCompareString, StringA) == 0x000000, "Member 'RBBlueprintLibrary_SortCompareString::StringA' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SortCompareString, StringB) == 0x000010, "Member 'RBBlueprintLibrary_SortCompareString::StringB' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SortCompareString, ReturnValue) == 0x000020, "Member 'RBBlueprintLibrary_SortCompareString::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.StartPsychosisOnAllPlayers
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_StartPsychosisOnAllPlayers final
{
public:
	class URBHalluCfg_Psychosis*                  PsychosisConfig;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E77[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_StartPsychosisOnAllPlayers) == 0x000008, "Wrong alignment on RBBlueprintLibrary_StartPsychosisOnAllPlayers");
static_assert(sizeof(RBBlueprintLibrary_StartPsychosisOnAllPlayers) == 0x000010, "Wrong size on RBBlueprintLibrary_StartPsychosisOnAllPlayers");
static_assert(offsetof(RBBlueprintLibrary_StartPsychosisOnAllPlayers, PsychosisConfig) == 0x000000, "Member 'RBBlueprintLibrary_StartPsychosisOnAllPlayers::PsychosisConfig' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_StartPsychosisOnAllPlayers, Force) == 0x000008, "Member 'RBBlueprintLibrary_StartPsychosisOnAllPlayers::Force' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.StopAllTimersOnObject
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_StopAllTimersOnObject final
{
public:
	class UObject*                                TimerOwner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_StopAllTimersOnObject) == 0x000008, "Wrong alignment on RBBlueprintLibrary_StopAllTimersOnObject");
static_assert(sizeof(RBBlueprintLibrary_StopAllTimersOnObject) == 0x000008, "Wrong size on RBBlueprintLibrary_StopAllTimersOnObject");
static_assert(offsetof(RBBlueprintLibrary_StopAllTimersOnObject, TimerOwner) == 0x000000, "Member 'RBBlueprintLibrary_StopAllTimersOnObject::TimerOwner' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.StopLoopingSoundOnActor
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_StopLoopingSoundOnActor final
{
public:
	class UAkAudioEvent*                          StartAkEvent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          StopAkEvent;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_StopLoopingSoundOnActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_StopLoopingSoundOnActor");
static_assert(sizeof(RBBlueprintLibrary_StopLoopingSoundOnActor) == 0x000018, "Wrong size on RBBlueprintLibrary_StopLoopingSoundOnActor");
static_assert(offsetof(RBBlueprintLibrary_StopLoopingSoundOnActor, StartAkEvent) == 0x000000, "Member 'RBBlueprintLibrary_StopLoopingSoundOnActor::StartAkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_StopLoopingSoundOnActor, StopAkEvent) == 0x000008, "Member 'RBBlueprintLibrary_StopLoopingSoundOnActor::StopAkEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_StopLoopingSoundOnActor, Actor) == 0x000010, "Member 'RBBlueprintLibrary_StopLoopingSoundOnActor::Actor' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.StopMusicTrack
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_StopMusicTrack final
{
public:
	class UAkAudioEvent*                          StartEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          StopEvent;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResumeLevelMusic;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E78[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_StopMusicTrack) == 0x000008, "Wrong alignment on RBBlueprintLibrary_StopMusicTrack");
static_assert(sizeof(RBBlueprintLibrary_StopMusicTrack) == 0x000018, "Wrong size on RBBlueprintLibrary_StopMusicTrack");
static_assert(offsetof(RBBlueprintLibrary_StopMusicTrack, StartEvent) == 0x000000, "Member 'RBBlueprintLibrary_StopMusicTrack::StartEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_StopMusicTrack, StopEvent) == 0x000008, "Member 'RBBlueprintLibrary_StopMusicTrack::StopEvent' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_StopMusicTrack, bResumeLevelMusic) == 0x000010, "Member 'RBBlueprintLibrary_StopMusicTrack::bResumeLevelMusic' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.StopPsychosisOnAllPlayers
// 0x0001 (0x0001 - 0x0000)
struct RBBlueprintLibrary_StopPsychosisOnAllPlayers final
{
public:
	bool                                          bFadeOut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_StopPsychosisOnAllPlayers) == 0x000001, "Wrong alignment on RBBlueprintLibrary_StopPsychosisOnAllPlayers");
static_assert(sizeof(RBBlueprintLibrary_StopPsychosisOnAllPlayers) == 0x000001, "Wrong size on RBBlueprintLibrary_StopPsychosisOnAllPlayers");
static_assert(offsetof(RBBlueprintLibrary_StopPsychosisOnAllPlayers, bFadeOut) == 0x000000, "Member 'RBBlueprintLibrary_StopPsychosisOnAllPlayers::bFadeOut' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SwitchLevelRandom2
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_SwitchLevelRandom2 final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERandomSwitch2                                RandomSwitch;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E79[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SwitchLevelRandom2) == 0x000004, "Wrong alignment on RBBlueprintLibrary_SwitchLevelRandom2");
static_assert(sizeof(RBBlueprintLibrary_SwitchLevelRandom2) == 0x000008, "Wrong size on RBBlueprintLibrary_SwitchLevelRandom2");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandom2, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_SwitchLevelRandom2::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandom2, RandomSwitch) == 0x000004, "Member 'RBBlueprintLibrary_SwitchLevelRandom2::RandomSwitch' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SwitchLevelRandom3
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_SwitchLevelRandom3 final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERandomSwitch3                                RandomSwitch;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SwitchLevelRandom3) == 0x000004, "Wrong alignment on RBBlueprintLibrary_SwitchLevelRandom3");
static_assert(sizeof(RBBlueprintLibrary_SwitchLevelRandom3) == 0x000008, "Wrong size on RBBlueprintLibrary_SwitchLevelRandom3");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandom3, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_SwitchLevelRandom3::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandom3, RandomSwitch) == 0x000004, "Member 'RBBlueprintLibrary_SwitchLevelRandom3::RandomSwitch' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SwitchLevelRandom4
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_SwitchLevelRandom4 final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERandomSwitch4                                RandomSwitch;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7B[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SwitchLevelRandom4) == 0x000004, "Wrong alignment on RBBlueprintLibrary_SwitchLevelRandom4");
static_assert(sizeof(RBBlueprintLibrary_SwitchLevelRandom4) == 0x000008, "Wrong size on RBBlueprintLibrary_SwitchLevelRandom4");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandom4, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_SwitchLevelRandom4::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandom4, RandomSwitch) == 0x000004, "Member 'RBBlueprintLibrary_SwitchLevelRandom4::RandomSwitch' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SwitchLevelRandom5
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_SwitchLevelRandom5 final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERandomSwitch5                                RandomSwitch;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7C[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SwitchLevelRandom5) == 0x000004, "Wrong alignment on RBBlueprintLibrary_SwitchLevelRandom5");
static_assert(sizeof(RBBlueprintLibrary_SwitchLevelRandom5) == 0x000008, "Wrong size on RBBlueprintLibrary_SwitchLevelRandom5");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandom5, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_SwitchLevelRandom5::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandom5, RandomSwitch) == 0x000004, "Member 'RBBlueprintLibrary_SwitchLevelRandom5::RandomSwitch' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.SwitchLevelRandomN
// 0x000C (0x000C - 0x0000)
struct RBBlueprintLibrary_SwitchLevelRandomN final
{
public:
	int32                                         RandomizerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOptions;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERandomSwitch10                               RandomSwitch;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_SwitchLevelRandomN) == 0x000004, "Wrong alignment on RBBlueprintLibrary_SwitchLevelRandomN");
static_assert(sizeof(RBBlueprintLibrary_SwitchLevelRandomN) == 0x00000C, "Wrong size on RBBlueprintLibrary_SwitchLevelRandomN");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandomN, RandomizerId) == 0x000000, "Member 'RBBlueprintLibrary_SwitchLevelRandomN::RandomizerId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandomN, MaxOptions) == 0x000004, "Member 'RBBlueprintLibrary_SwitchLevelRandomN::MaxOptions' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_SwitchLevelRandomN, RandomSwitch) == 0x000008, "Member 'RBBlueprintLibrary_SwitchLevelRandomN::RandomSwitch' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.TeleportPlayer
// 0x0018 (0x0018 - 0x0000)
struct RBBlueprintLibrary_TeleportPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetLocation;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTransitionFX;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTargetForRotation;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptAction;                                  // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7E[0x5];                                     // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_TeleportPlayer) == 0x000008, "Wrong alignment on RBBlueprintLibrary_TeleportPlayer");
static_assert(sizeof(RBBlueprintLibrary_TeleportPlayer) == 0x000018, "Wrong size on RBBlueprintLibrary_TeleportPlayer");
static_assert(offsetof(RBBlueprintLibrary_TeleportPlayer, Player) == 0x000000, "Member 'RBBlueprintLibrary_TeleportPlayer::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TeleportPlayer, TargetLocation) == 0x000008, "Member 'RBBlueprintLibrary_TeleportPlayer::TargetLocation' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TeleportPlayer, bUseTransitionFX) == 0x000010, "Member 'RBBlueprintLibrary_TeleportPlayer::bUseTransitionFX' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TeleportPlayer, bUseTargetForRotation) == 0x000011, "Member 'RBBlueprintLibrary_TeleportPlayer::bUseTargetForRotation' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TeleportPlayer, bInterruptAction) == 0x000012, "Member 'RBBlueprintLibrary_TeleportPlayer::bInterruptAction' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.TeleportRelative
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_TeleportRelative final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           SourceReference;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetReference;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTransitionFX;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E7F[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_TeleportRelative) == 0x000008, "Wrong alignment on RBBlueprintLibrary_TeleportRelative");
static_assert(sizeof(RBBlueprintLibrary_TeleportRelative) == 0x000020, "Wrong size on RBBlueprintLibrary_TeleportRelative");
static_assert(offsetof(RBBlueprintLibrary_TeleportRelative, Player) == 0x000000, "Member 'RBBlueprintLibrary_TeleportRelative::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TeleportRelative, SourceReference) == 0x000008, "Member 'RBBlueprintLibrary_TeleportRelative::SourceReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TeleportRelative, TargetReference) == 0x000010, "Member 'RBBlueprintLibrary_TeleportRelative::TargetReference' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TeleportRelative, bUseTransitionFX) == 0x000018, "Member 'RBBlueprintLibrary_TeleportRelative::bUseTransitionFX' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.TestPlayerConditions
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_TestPlayerConditions final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoolCommandResult                            OperationResult;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E80[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBPlayerConditionSet                  ConditionSet;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_TestPlayerConditions) == 0x000008, "Wrong alignment on RBBlueprintLibrary_TestPlayerConditions");
static_assert(sizeof(RBBlueprintLibrary_TestPlayerConditions) == 0x000020, "Wrong size on RBBlueprintLibrary_TestPlayerConditions");
static_assert(offsetof(RBBlueprintLibrary_TestPlayerConditions, Player) == 0x000000, "Member 'RBBlueprintLibrary_TestPlayerConditions::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TestPlayerConditions, OperationResult) == 0x000008, "Member 'RBBlueprintLibrary_TestPlayerConditions::OperationResult' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TestPlayerConditions, ConditionSet) == 0x000010, "Member 'RBBlueprintLibrary_TestPlayerConditions::ConditionSet' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ToggleActor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_ToggleActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E81[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_ToggleActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ToggleActor");
static_assert(sizeof(RBBlueprintLibrary_ToggleActor) == 0x000010, "Wrong size on RBBlueprintLibrary_ToggleActor");
static_assert(offsetof(RBBlueprintLibrary_ToggleActor, Actor) == 0x000000, "Member 'RBBlueprintLibrary_ToggleActor::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ToggleActor, bEnabled) == 0x000008, "Member 'RBBlueprintLibrary_ToggleActor::bEnabled' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ToggleLedgeMarkerOnActor
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_ToggleLedgeMarkerOnActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E82[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_ToggleLedgeMarkerOnActor) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ToggleLedgeMarkerOnActor");
static_assert(sizeof(RBBlueprintLibrary_ToggleLedgeMarkerOnActor) == 0x000010, "Wrong size on RBBlueprintLibrary_ToggleLedgeMarkerOnActor");
static_assert(offsetof(RBBlueprintLibrary_ToggleLedgeMarkerOnActor, Actor) == 0x000000, "Member 'RBBlueprintLibrary_ToggleLedgeMarkerOnActor::Actor' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ToggleLedgeMarkerOnActor, bEnabled) == 0x000008, "Member 'RBBlueprintLibrary_ToggleLedgeMarkerOnActor::bEnabled' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.ToString
// 0x0038 (0x0038 - 0x0000)
struct RBBlueprintLibrary_ToString final
{
public:
	struct FUniqueNetIdRepl                       UniqueId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_ToString) == 0x000008, "Wrong alignment on RBBlueprintLibrary_ToString");
static_assert(sizeof(RBBlueprintLibrary_ToString) == 0x000038, "Wrong size on RBBlueprintLibrary_ToString");
static_assert(offsetof(RBBlueprintLibrary_ToString, UniqueId) == 0x000000, "Member 'RBBlueprintLibrary_ToString::UniqueId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_ToString, ReturnValue) == 0x000028, "Member 'RBBlueprintLibrary_ToString::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.TryPlayFacialAnim
// 0x0020 (0x0020 - 0x0000)
struct RBBlueprintLibrary_TryPlayFacialAnim final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LineId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E83[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBBlueprintLibrary_TryPlayFacialAnim) == 0x000008, "Wrong alignment on RBBlueprintLibrary_TryPlayFacialAnim");
static_assert(sizeof(RBBlueprintLibrary_TryPlayFacialAnim) == 0x000020, "Wrong size on RBBlueprintLibrary_TryPlayFacialAnim");
static_assert(offsetof(RBBlueprintLibrary_TryPlayFacialAnim, Target) == 0x000000, "Member 'RBBlueprintLibrary_TryPlayFacialAnim::Target' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TryPlayFacialAnim, LineId) == 0x000008, "Member 'RBBlueprintLibrary_TryPlayFacialAnim::LineId' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_TryPlayFacialAnim, ReturnValue) == 0x000018, "Member 'RBBlueprintLibrary_TryPlayFacialAnim::ReturnValue' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.UnblockPlayerRespawnInStage
// 0x0008 (0x0008 - 0x0000)
struct RBBlueprintLibrary_UnblockPlayerRespawnInStage final
{
public:
	class UObject*                                blockOwner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_UnblockPlayerRespawnInStage) == 0x000008, "Wrong alignment on RBBlueprintLibrary_UnblockPlayerRespawnInStage");
static_assert(sizeof(RBBlueprintLibrary_UnblockPlayerRespawnInStage) == 0x000008, "Wrong size on RBBlueprintLibrary_UnblockPlayerRespawnInStage");
static_assert(offsetof(RBBlueprintLibrary_UnblockPlayerRespawnInStage, blockOwner) == 0x000000, "Member 'RBBlueprintLibrary_UnblockPlayerRespawnInStage::blockOwner' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.WaitForPlayerConditions
// 0x0030 (0x0030 - 0x0000)
struct RBBlueprintLibrary_WaitForPlayerConditions final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRBPlayerConditionSet                  ConditionSet;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_WaitForPlayerConditions) == 0x000008, "Wrong alignment on RBBlueprintLibrary_WaitForPlayerConditions");
static_assert(sizeof(RBBlueprintLibrary_WaitForPlayerConditions) == 0x000030, "Wrong size on RBBlueprintLibrary_WaitForPlayerConditions");
static_assert(offsetof(RBBlueprintLibrary_WaitForPlayerConditions, Player) == 0x000000, "Member 'RBBlueprintLibrary_WaitForPlayerConditions::Player' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_WaitForPlayerConditions, LatentInfo) == 0x000008, "Member 'RBBlueprintLibrary_WaitForPlayerConditions::LatentInfo' has a wrong offset!");
static_assert(offsetof(RBBlueprintLibrary_WaitForPlayerConditions, ConditionSet) == 0x000020, "Member 'RBBlueprintLibrary_WaitForPlayerConditions::ConditionSet' has a wrong offset!");

// Function OPP.RBBlueprintLibrary.Warning
// 0x0010 (0x0010 - 0x0000)
struct RBBlueprintLibrary_Warning final
{
public:
	class FString                                 WarningText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBlueprintLibrary_Warning) == 0x000008, "Wrong alignment on RBBlueprintLibrary_Warning");
static_assert(sizeof(RBBlueprintLibrary_Warning) == 0x000010, "Wrong size on RBBlueprintLibrary_Warning");
static_assert(offsetof(RBBlueprintLibrary_Warning, WarningText) == 0x000000, "Member 'RBBlueprintLibrary_Warning::WarningText' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.Event_AddEntry
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_Event_AddEntry final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_Event_AddEntry) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_Event_AddEntry");
static_assert(sizeof(RBTrialBoardMenuTabWidget_Event_AddEntry) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_Event_AddEntry");
static_assert(offsetof(RBTrialBoardMenuTabWidget_Event_AddEntry, Entry) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_Event_AddEntry::Entry' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.Event_OnFilterChanged
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_Event_OnFilterChanged final
{
public:
	ERBSocialMenuEntryFilter                      Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_Event_OnFilterChanged) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_Event_OnFilterChanged");
static_assert(sizeof(RBTrialBoardMenuTabWidget_Event_OnFilterChanged) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_Event_OnFilterChanged");
static_assert(offsetof(RBTrialBoardMenuTabWidget_Event_OnFilterChanged, Filter) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_Event_OnFilterChanged::Filter' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.Event_RemoveEntry
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_Event_RemoveEntry final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_Event_RemoveEntry) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_Event_RemoveEntry");
static_assert(sizeof(RBTrialBoardMenuTabWidget_Event_RemoveEntry) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_Event_RemoveEntry");
static_assert(offsetof(RBTrialBoardMenuTabWidget_Event_RemoveEntry, Entry) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_Event_RemoveEntry::Entry' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.Event_RestoreEntryFocus
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_Event_RestoreEntryFocus final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_Event_RestoreEntryFocus) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_Event_RestoreEntryFocus");
static_assert(sizeof(RBTrialBoardMenuTabWidget_Event_RestoreEntryFocus) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_Event_RestoreEntryFocus");
static_assert(offsetof(RBTrialBoardMenuTabWidget_Event_RestoreEntryFocus, Entry) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_Event_RestoreEntryFocus::Entry' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.Event_SetEntryPosition
// 0x0010 (0x0010 - 0x0000)
struct RBTrialBoardMenuTabWidget_Event_SetEntryPosition final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_Event_SetEntryPosition) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_Event_SetEntryPosition");
static_assert(sizeof(RBTrialBoardMenuTabWidget_Event_SetEntryPosition) == 0x000010, "Wrong size on RBTrialBoardMenuTabWidget_Event_SetEntryPosition");
static_assert(offsetof(RBTrialBoardMenuTabWidget_Event_SetEntryPosition, Entry) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_Event_SetEntryPosition::Entry' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_Event_SetEntryPosition, Position) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_Event_SetEntryPosition::Position' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.Event_UpdatePartyInviteWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_Event_UpdatePartyInviteWidgetVisibility final
{
public:
	bool                                          bShouldBeVisible;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_Event_UpdatePartyInviteWidgetVisibility) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_Event_UpdatePartyInviteWidgetVisibility");
static_assert(sizeof(RBTrialBoardMenuTabWidget_Event_UpdatePartyInviteWidgetVisibility) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_Event_UpdatePartyInviteWidgetVisibility");
static_assert(offsetof(RBTrialBoardMenuTabWidget_Event_UpdatePartyInviteWidgetVisibility, bShouldBeVisible) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_Event_UpdatePartyInviteWidgetVisibility::bShouldBeVisible' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.FindParty
// 0x0010 (0x0010 - 0x0000)
struct RBTrialBoardMenuTabWidget_FindParty final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrialId;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_FindParty) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_FindParty");
static_assert(sizeof(RBTrialBoardMenuTabWidget_FindParty) == 0x000010, "Wrong size on RBTrialBoardMenuTabWidget_FindParty");
static_assert(offsetof(RBTrialBoardMenuTabWidget_FindParty, ProgramId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_FindParty::ProgramId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_FindParty, TrialId) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_FindParty::TrialId' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.GetSceneActor
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_GetSceneActor final
{
public:
	class ARBSocialMenuSceneActor*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_GetSceneActor) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_GetSceneActor");
static_assert(sizeof(RBTrialBoardMenuTabWidget_GetSceneActor) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_GetSceneActor");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetSceneActor, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_GetSceneActor::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.GetSocialMenuManager
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_GetSocialMenuManager final
{
public:
	class URBSocialMenuManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_GetSocialMenuManager) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_GetSocialMenuManager");
static_assert(sizeof(RBTrialBoardMenuTabWidget_GetSocialMenuManager) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_GetSocialMenuManager");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetSocialMenuManager, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_GetSocialMenuManager::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnEntryActionRequested
// 0x0010 (0x0010 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnEntryActionRequested final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBSocialMenuEntryAction                      Action;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E89[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnEntryActionRequested) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_OnEntryActionRequested");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnEntryActionRequested) == 0x000010, "Wrong size on RBTrialBoardMenuTabWidget_OnEntryActionRequested");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnEntryActionRequested, Entry) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnEntryActionRequested::Entry' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnEntryActionRequested, Action) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_OnEntryActionRequested::Action' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnFilterChanged
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnFilterChanged final
{
public:
	ERBSocialMenuEntryFilter                      Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnFilterChanged) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_OnFilterChanged");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnFilterChanged) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_OnFilterChanged");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnFilterChanged, Filter) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnFilterChanged::Filter' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnFindPartyStateUpdated
// 0x0030 (0x0030 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnFindPartyStateUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFindPartyState                        FindPartyState;                                    // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnFindPartyStateUpdated) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_OnFindPartyStateUpdated");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnFindPartyStateUpdated) == 0x000030, "Wrong size on RBTrialBoardMenuTabWidget_OnFindPartyStateUpdated");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnFindPartyStateUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnFindPartyStateUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnFindPartyStateUpdated, FindPartyState) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_OnFindPartyStateUpdated::FindPartyState' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnGameStageInfoUpdated
// 0x0068 (0x0068 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnGameStageInfoUpdated final
{
public:
	struct FRBGameStageInfo                       GameStageInfo;                                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnGameStageInfoUpdated) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_OnGameStageInfoUpdated");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnGameStageInfoUpdated) == 0x000068, "Wrong size on RBTrialBoardMenuTabWidget_OnGameStageInfoUpdated");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnGameStageInfoUpdated, GameStageInfo) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnGameStageInfoUpdated::GameStageInfo' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnMatchSettingsUpdated
// 0x0024 (0x0024 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnMatchSettingsUpdated final
{
public:
	struct FMatchSettings                         MatchSettings;                                     // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnMatchSettingsUpdated) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_OnMatchSettingsUpdated");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnMatchSettingsUpdated) == 0x000024, "Wrong size on RBTrialBoardMenuTabWidget_OnMatchSettingsUpdated");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnMatchSettingsUpdated, MatchSettings) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnMatchSettingsUpdated::MatchSettings' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnMatchStateUpdated
// 0x0028 (0x0028 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnMatchStateUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchState                            MatchState;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnMatchStateUpdated) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_OnMatchStateUpdated");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnMatchStateUpdated) == 0x000028, "Wrong size on RBTrialBoardMenuTabWidget_OnMatchStateUpdated");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnMatchStateUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnMatchStateUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnMatchStateUpdated, MatchState) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_OnMatchStateUpdated::MatchState' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnPartyOwnerMatchSettingsUpdated
// 0x0030 (0x0030 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnPartyOwnerMatchSettingsUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchSettings                         MatchSettings;                                     // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8A[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnPartyOwnerMatchSettingsUpdated) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_OnPartyOwnerMatchSettingsUpdated");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnPartyOwnerMatchSettingsUpdated) == 0x000030, "Wrong size on RBTrialBoardMenuTabWidget_OnPartyOwnerMatchSettingsUpdated");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnPartyOwnerMatchSettingsUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnPartyOwnerMatchSettingsUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnPartyOwnerMatchSettingsUpdated, MatchSettings) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_OnPartyOwnerMatchSettingsUpdated::MatchSettings' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnPlayerJoinedGame
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnPlayerJoinedGame final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnPlayerJoinedGame) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_OnPlayerJoinedGame");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnPlayerJoinedGame) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_OnPlayerJoinedGame");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnPlayerJoinedGame, RBPlayerState) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnPlayerJoinedGame::RBPlayerState' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnPlayerLeaving
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnPlayerLeaving final
{
public:
	EPlayerLeaveTarget                            Target;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnPlayerLeaving) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_OnPlayerLeaving");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnPlayerLeaving) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_OnPlayerLeaving");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnPlayerLeaving, Target) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnPlayerLeaving::Target' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnPlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnPlayerLeftGame final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnPlayerLeftGame) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_OnPlayerLeftGame");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnPlayerLeftGame) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_OnPlayerLeftGame");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnPlayerLeftGame, RBPlayerState) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnPlayerLeftGame::RBPlayerState' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnPlayerStatsDataAvailable
// 0x0020 (0x0020 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnPlayerStatsDataAvailable final
{
public:
	TArray<struct FRBStatContext>                 Stats;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRBUIReleasedCharacterDetails>  ReleasedCharacterDetailsList;                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnPlayerStatsDataAvailable) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_OnPlayerStatsDataAvailable");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnPlayerStatsDataAvailable) == 0x000020, "Wrong size on RBTrialBoardMenuTabWidget_OnPlayerStatsDataAvailable");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnPlayerStatsDataAvailable, Stats) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnPlayerStatsDataAvailable::Stats' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnPlayerStatsDataAvailable, ReleasedCharacterDetailsList) == 0x000010, "Member 'RBTrialBoardMenuTabWidget_OnPlayerStatsDataAvailable::ReleasedCharacterDetailsList' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.OnSocialMenuEntryCustomizationUpdated
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_OnSocialMenuEntryCustomizationUpdated final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_OnSocialMenuEntryCustomizationUpdated) == 0x000008, "Wrong alignment on RBTrialBoardMenuTabWidget_OnSocialMenuEntryCustomizationUpdated");
static_assert(sizeof(RBTrialBoardMenuTabWidget_OnSocialMenuEntryCustomizationUpdated) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_OnSocialMenuEntryCustomizationUpdated");
static_assert(offsetof(RBTrialBoardMenuTabWidget_OnSocialMenuEntryCustomizationUpdated, Entry) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_OnSocialMenuEntryCustomizationUpdated::Entry' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.SetEnableCharacterOverlayWidgets
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_SetEnableCharacterOverlayWidgets final
{
public:
	bool                                          bInEnableCharacterOverlayWidgets;                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_SetEnableCharacterOverlayWidgets) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_SetEnableCharacterOverlayWidgets");
static_assert(sizeof(RBTrialBoardMenuTabWidget_SetEnableCharacterOverlayWidgets) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_SetEnableCharacterOverlayWidgets");
static_assert(offsetof(RBTrialBoardMenuTabWidget_SetEnableCharacterOverlayWidgets, bInEnableCharacterOverlayWidgets) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_SetEnableCharacterOverlayWidgets::bInEnableCharacterOverlayWidgets' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.SetFilter
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_SetFilter final
{
public:
	ERBSocialMenuEntryFilter                      Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_SetFilter) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_SetFilter");
static_assert(sizeof(RBTrialBoardMenuTabWidget_SetFilter) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_SetFilter");
static_assert(offsetof(RBTrialBoardMenuTabWidget_SetFilter, Filter) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_SetFilter::Filter' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.SetShowOtherPlayerOverlayWidgets
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_SetShowOtherPlayerOverlayWidgets final
{
public:
	bool                                          bInShowOtherPlayerOverlayWidgets;                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_SetShowOtherPlayerOverlayWidgets) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_SetShowOtherPlayerOverlayWidgets");
static_assert(sizeof(RBTrialBoardMenuTabWidget_SetShowOtherPlayerOverlayWidgets) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_SetShowOtherPlayerOverlayWidgets");
static_assert(offsetof(RBTrialBoardMenuTabWidget_SetShowOtherPlayerOverlayWidgets, bInShowOtherPlayerOverlayWidgets) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_SetShowOtherPlayerOverlayWidgets::bInShowOtherPlayerOverlayWidgets' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.SetTrialChainId
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_SetTrialChainId final
{
public:
	class FName                                   TrialChainId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_SetTrialChainId) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_SetTrialChainId");
static_assert(sizeof(RBTrialBoardMenuTabWidget_SetTrialChainId) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_SetTrialChainId");
static_assert(offsetof(RBTrialBoardMenuTabWidget_SetTrialChainId, TrialChainId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_SetTrialChainId::TrialChainId' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.SetTrialId
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_SetTrialId final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_SetTrialId) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_SetTrialId");
static_assert(sizeof(RBTrialBoardMenuTabWidget_SetTrialId) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_SetTrialId");
static_assert(offsetof(RBTrialBoardMenuTabWidget_SetTrialId, TrialId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_SetTrialId::TrialId' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.AreTrialsFromSameProgram
// 0x0014 (0x0014 - 0x0000)
struct RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram final
{
public:
	class FName                                   FirstTrialId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SecondTrialId;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8B[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram");
static_assert(sizeof(RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram) == 0x000014, "Wrong size on RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram");
static_assert(offsetof(RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram, FirstTrialId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram::FirstTrialId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram, SecondTrialId) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram::SecondTrialId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram, ReturnValue) == 0x000010, "Member 'RBTrialBoardMenuTabWidget_AreTrialsFromSameProgram::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.CanAddFriend
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_CanAddFriend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_CanAddFriend) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_CanAddFriend");
static_assert(sizeof(RBTrialBoardMenuTabWidget_CanAddFriend) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_CanAddFriend");
static_assert(offsetof(RBTrialBoardMenuTabWidget_CanAddFriend, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_CanAddFriend::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.CanCancelFindParty
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_CanCancelFindParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_CanCancelFindParty) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_CanCancelFindParty");
static_assert(sizeof(RBTrialBoardMenuTabWidget_CanCancelFindParty) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_CanCancelFindParty");
static_assert(offsetof(RBTrialBoardMenuTabWidget_CanCancelFindParty, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_CanCancelFindParty::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.CanCancelMatch
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_CanCancelMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_CanCancelMatch) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_CanCancelMatch");
static_assert(sizeof(RBTrialBoardMenuTabWidget_CanCancelMatch) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_CanCancelMatch");
static_assert(offsetof(RBTrialBoardMenuTabWidget_CanCancelMatch, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_CanCancelMatch::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.CanFindParty
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_CanFindParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_CanFindParty) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_CanFindParty");
static_assert(sizeof(RBTrialBoardMenuTabWidget_CanFindParty) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_CanFindParty");
static_assert(offsetof(RBTrialBoardMenuTabWidget_CanFindParty, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_CanFindParty::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.CanSelectTrial
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_CanSelectTrial final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8C[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_CanSelectTrial) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_CanSelectTrial");
static_assert(sizeof(RBTrialBoardMenuTabWidget_CanSelectTrial) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_CanSelectTrial");
static_assert(offsetof(RBTrialBoardMenuTabWidget_CanSelectTrial, TrialId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_CanSelectTrial::TrialId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_CanSelectTrial, ReturnValue) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_CanSelectTrial::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.CanSendPartyInvite
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_CanSendPartyInvite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_CanSendPartyInvite) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_CanSendPartyInvite");
static_assert(sizeof(RBTrialBoardMenuTabWidget_CanSendPartyInvite) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_CanSendPartyInvite");
static_assert(offsetof(RBTrialBoardMenuTabWidget_CanSendPartyInvite, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_CanSendPartyInvite::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.CanStartMatch
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_CanStartMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_CanStartMatch) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_CanStartMatch");
static_assert(sizeof(RBTrialBoardMenuTabWidget_CanStartMatch) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_CanStartMatch");
static_assert(offsetof(RBTrialBoardMenuTabWidget_CanStartMatch, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_CanStartMatch::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.GetBestTrialPersonalTQ
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_GetBestTrialPersonalTQ final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_GetBestTrialPersonalTQ) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_GetBestTrialPersonalTQ");
static_assert(sizeof(RBTrialBoardMenuTabWidget_GetBestTrialPersonalTQ) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_GetBestTrialPersonalTQ");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetBestTrialPersonalTQ, TrialId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_GetBestTrialPersonalTQ::TrialId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetBestTrialPersonalTQ, ReturnValue) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_GetBestTrialPersonalTQ::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.GetFilter
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_GetFilter final
{
public:
	ERBSocialMenuEntryFilter                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_GetFilter) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_GetFilter");
static_assert(sizeof(RBTrialBoardMenuTabWidget_GetFilter) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_GetFilter");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetFilter, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_GetFilter::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.GetMatchCurrentPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct RBTrialBoardMenuTabWidget_GetMatchCurrentPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_GetMatchCurrentPlayerCount) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_GetMatchCurrentPlayerCount");
static_assert(sizeof(RBTrialBoardMenuTabWidget_GetMatchCurrentPlayerCount) == 0x000004, "Wrong size on RBTrialBoardMenuTabWidget_GetMatchCurrentPlayerCount");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetMatchCurrentPlayerCount, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_GetMatchCurrentPlayerCount::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.GetMatchSettings
// 0x0024 (0x0024 - 0x0000)
struct RBTrialBoardMenuTabWidget_GetMatchSettings final
{
public:
	struct FMatchSettings                         ReturnValue;                                       // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_GetMatchSettings) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_GetMatchSettings");
static_assert(sizeof(RBTrialBoardMenuTabWidget_GetMatchSettings) == 0x000024, "Wrong size on RBTrialBoardMenuTabWidget_GetMatchSettings");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetMatchSettings, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_GetMatchSettings::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.GetPlatform
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_GetPlatform final
{
public:
	EProfilePlatform                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_GetPlatform) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_GetPlatform");
static_assert(sizeof(RBTrialBoardMenuTabWidget_GetPlatform) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_GetPlatform");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetPlatform, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_GetPlatform::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.GetProgramId
// 0x0008 (0x0008 - 0x0000)
struct RBTrialBoardMenuTabWidget_GetProgramId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_GetProgramId) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_GetProgramId");
static_assert(sizeof(RBTrialBoardMenuTabWidget_GetProgramId) == 0x000008, "Wrong size on RBTrialBoardMenuTabWidget_GetProgramId");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetProgramId, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_GetProgramId::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.GetProgramTQ
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_GetProgramTQ final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_GetProgramTQ) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_GetProgramTQ");
static_assert(sizeof(RBTrialBoardMenuTabWidget_GetProgramTQ) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_GetProgramTQ");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetProgramTQ, ProgramId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_GetProgramTQ::ProgramId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_GetProgramTQ, ReturnValue) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_GetProgramTQ::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.HasAttemptedTrial
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_HasAttemptedTrial final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_HasAttemptedTrial) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_HasAttemptedTrial");
static_assert(sizeof(RBTrialBoardMenuTabWidget_HasAttemptedTrial) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_HasAttemptedTrial");
static_assert(offsetof(RBTrialBoardMenuTabWidget_HasAttemptedTrial, TrialId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_HasAttemptedTrial::TrialId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_HasAttemptedTrial, ReturnValue) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_HasAttemptedTrial::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.HasCompletedProgram
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_HasCompletedProgram final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8E[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_HasCompletedProgram) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_HasCompletedProgram");
static_assert(sizeof(RBTrialBoardMenuTabWidget_HasCompletedProgram) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_HasCompletedProgram");
static_assert(offsetof(RBTrialBoardMenuTabWidget_HasCompletedProgram, ProgramId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_HasCompletedProgram::ProgramId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_HasCompletedProgram, ReturnValue) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_HasCompletedProgram::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.IsDataPending
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_IsDataPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_IsDataPending) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_IsDataPending");
static_assert(sizeof(RBTrialBoardMenuTabWidget_IsDataPending) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_IsDataPending");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsDataPending, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_IsDataPending::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.IsMatchOwner
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_IsMatchOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_IsMatchOwner) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_IsMatchOwner");
static_assert(sizeof(RBTrialBoardMenuTabWidget_IsMatchOwner) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_IsMatchOwner");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsMatchOwner, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_IsMatchOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.IsOperationPending
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_IsOperationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_IsOperationPending) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_IsOperationPending");
static_assert(sizeof(RBTrialBoardMenuTabWidget_IsOperationPending) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_IsOperationPending");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsOperationPending, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_IsOperationPending::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.IsProgramUnlocked
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_IsProgramUnlocked final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8F[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_IsProgramUnlocked) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_IsProgramUnlocked");
static_assert(sizeof(RBTrialBoardMenuTabWidget_IsProgramUnlocked) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_IsProgramUnlocked");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsProgramUnlocked, ProgramId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_IsProgramUnlocked::ProgramId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsProgramUnlocked, ReturnValue) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_IsProgramUnlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.IsProgramVisible
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_IsProgramVisible final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E90[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_IsProgramVisible) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_IsProgramVisible");
static_assert(sizeof(RBTrialBoardMenuTabWidget_IsProgramVisible) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_IsProgramVisible");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsProgramVisible, ProgramId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_IsProgramVisible::ProgramId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsProgramVisible, ReturnValue) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_IsProgramVisible::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.IsSolo
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_IsSolo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_IsSolo) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_IsSolo");
static_assert(sizeof(RBTrialBoardMenuTabWidget_IsSolo) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_IsSolo");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsSolo, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_IsSolo::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.IsTrialCompleted
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_IsTrialCompleted final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerfect;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E91[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_IsTrialCompleted) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_IsTrialCompleted");
static_assert(sizeof(RBTrialBoardMenuTabWidget_IsTrialCompleted) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_IsTrialCompleted");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsTrialCompleted, TrialId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_IsTrialCompleted::TrialId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsTrialCompleted, bPerfect) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_IsTrialCompleted::bPerfect' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsTrialCompleted, ReturnValue) == 0x000009, "Member 'RBTrialBoardMenuTabWidget_IsTrialCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.IsTrialEnabled
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_IsTrialEnabled final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E92[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_IsTrialEnabled) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_IsTrialEnabled");
static_assert(sizeof(RBTrialBoardMenuTabWidget_IsTrialEnabled) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_IsTrialEnabled");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsTrialEnabled, TrialId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_IsTrialEnabled::TrialId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsTrialEnabled, ReturnValue) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_IsTrialEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.IsTrialUnlocked
// 0x000C (0x000C - 0x0000)
struct RBTrialBoardMenuTabWidget_IsTrialUnlocked final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E93[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_IsTrialUnlocked) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_IsTrialUnlocked");
static_assert(sizeof(RBTrialBoardMenuTabWidget_IsTrialUnlocked) == 0x00000C, "Wrong size on RBTrialBoardMenuTabWidget_IsTrialUnlocked");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsTrialUnlocked, TrialId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_IsTrialUnlocked::TrialId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_IsTrialUnlocked, ReturnValue) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_IsTrialUnlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.ShowFilter
// 0x0001 (0x0001 - 0x0000)
struct RBTrialBoardMenuTabWidget_ShowFilter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrialBoardMenuTabWidget_ShowFilter) == 0x000001, "Wrong alignment on RBTrialBoardMenuTabWidget_ShowFilter");
static_assert(sizeof(RBTrialBoardMenuTabWidget_ShowFilter) == 0x000001, "Wrong size on RBTrialBoardMenuTabWidget_ShowFilter");
static_assert(offsetof(RBTrialBoardMenuTabWidget_ShowFilter, ReturnValue) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_ShowFilter::ReturnValue' has a wrong offset!");

// Function OPP.RBTrialBoardMenuTabWidget.WouldTrialCompletionUnlockProgram
// 0x0014 (0x0014 - 0x0000)
struct RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutProgramId;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E94[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram) == 0x000004, "Wrong alignment on RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram");
static_assert(sizeof(RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram) == 0x000014, "Wrong size on RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram");
static_assert(offsetof(RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram, TrialId) == 0x000000, "Member 'RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram::TrialId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram, OutProgramId) == 0x000008, "Member 'RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram::OutProgramId' has a wrong offset!");
static_assert(offsetof(RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram, ReturnValue) == 0x000010, "Member 'RBTrialBoardMenuTabWidget_WouldTrialCompletionUnlockProgram::ReturnValue' has a wrong offset!");

// Function OPP.RBBot.ReleaseFromAIDirector
// 0x0001 (0x0001 - 0x0000)
struct RBBot_ReleaseFromAIDirector final
{
public:
	bool                                          bCancelRetirement;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBot_ReleaseFromAIDirector) == 0x000001, "Wrong alignment on RBBot_ReleaseFromAIDirector");
static_assert(sizeof(RBBot_ReleaseFromAIDirector) == 0x000001, "Wrong size on RBBot_ReleaseFromAIDirector");
static_assert(offsetof(RBBot_ReleaseFromAIDirector, bCancelRetirement) == 0x000000, "Member 'RBBot_ReleaseFromAIDirector::bCancelRetirement' has a wrong offset!");

// Function OPP.RBBot.BP_GetDebugPawnName
// 0x0010 (0x0010 - 0x0000)
struct RBBot_BP_GetDebugPawnName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBot_BP_GetDebugPawnName) == 0x000008, "Wrong alignment on RBBot_BP_GetDebugPawnName");
static_assert(sizeof(RBBot_BP_GetDebugPawnName) == 0x000010, "Wrong size on RBBot_BP_GetDebugPawnName");
static_assert(offsetof(RBBot_BP_GetDebugPawnName, ReturnValue) == 0x000000, "Member 'RBBot_BP_GetDebugPawnName::ReturnValue' has a wrong offset!");

// Function OPP.RBBot.CanReleaseFromAIDirector
// 0x0001 (0x0001 - 0x0000)
struct RBBot_CanReleaseFromAIDirector final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBot_CanReleaseFromAIDirector) == 0x000001, "Wrong alignment on RBBot_CanReleaseFromAIDirector");
static_assert(sizeof(RBBot_CanReleaseFromAIDirector) == 0x000001, "Wrong size on RBBot_CanReleaseFromAIDirector");
static_assert(offsetof(RBBot_CanReleaseFromAIDirector, ReturnValue) == 0x000000, "Member 'RBBot_CanReleaseFromAIDirector::ReturnValue' has a wrong offset!");

// Function OPP.RBBot.GetAwarenessStateType
// 0x0001 (0x0001 - 0x0000)
struct RBBot_GetAwarenessStateType final
{
public:
	EAIAwarenessStateType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBot_GetAwarenessStateType) == 0x000001, "Wrong alignment on RBBot_GetAwarenessStateType");
static_assert(sizeof(RBBot_GetAwarenessStateType) == 0x000001, "Wrong size on RBBot_GetAwarenessStateType");
static_assert(offsetof(RBBot_GetAwarenessStateType, ReturnValue) == 0x000000, "Member 'RBBot_GetAwarenessStateType::ReturnValue' has a wrong offset!");

// Function OPP.RBBot.GetCurrentActivity
// 0x0001 (0x0001 - 0x0000)
struct RBBot_GetCurrentActivity final
{
public:
	EAIActivity                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBot_GetCurrentActivity) == 0x000001, "Wrong alignment on RBBot_GetCurrentActivity");
static_assert(sizeof(RBBot_GetCurrentActivity) == 0x000001, "Wrong size on RBBot_GetCurrentActivity");
static_assert(offsetof(RBBot_GetCurrentActivity, ReturnValue) == 0x000000, "Member 'RBBot_GetCurrentActivity::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDWorldIconWidget.Event_DrawHudUpdate
// 0x0060 (0x0060 - 0x0000)
struct RBHUDWorldIconWidget_Event_DrawHudUpdate final
{
public:
	struct FRBWorldIconUpdateContext              UpdateContext;                                     // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDWorldIconWidget_Event_DrawHudUpdate) == 0x000008, "Wrong alignment on RBHUDWorldIconWidget_Event_DrawHudUpdate");
static_assert(sizeof(RBHUDWorldIconWidget_Event_DrawHudUpdate) == 0x000060, "Wrong size on RBHUDWorldIconWidget_Event_DrawHudUpdate");
static_assert(offsetof(RBHUDWorldIconWidget_Event_DrawHudUpdate, UpdateContext) == 0x000000, "Member 'RBHUDWorldIconWidget_Event_DrawHudUpdate::UpdateContext' has a wrong offset!");

// Function OPP.RBHUDPlayerPingIconWidget.SetupIcon
// 0x0008 (0x0008 - 0x0000)
struct RBHUDPlayerPingIconWidget_SetupIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerPingIconWidget_SetupIcon) == 0x000008, "Wrong alignment on RBHUDPlayerPingIconWidget_SetupIcon");
static_assert(sizeof(RBHUDPlayerPingIconWidget_SetupIcon) == 0x000008, "Wrong size on RBHUDPlayerPingIconWidget_SetupIcon");
static_assert(offsetof(RBHUDPlayerPingIconWidget_SetupIcon, Icon) == 0x000000, "Member 'RBHUDPlayerPingIconWidget_SetupIcon::Icon' has a wrong offset!");

// Function OPP.RBHUDPlayerPingIconWidget.IsSharedWithObjectiveIcon
// 0x0001 (0x0001 - 0x0000)
struct RBHUDPlayerPingIconWidget_IsSharedWithObjectiveIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerPingIconWidget_IsSharedWithObjectiveIcon) == 0x000001, "Wrong alignment on RBHUDPlayerPingIconWidget_IsSharedWithObjectiveIcon");
static_assert(sizeof(RBHUDPlayerPingIconWidget_IsSharedWithObjectiveIcon) == 0x000001, "Wrong size on RBHUDPlayerPingIconWidget_IsSharedWithObjectiveIcon");
static_assert(offsetof(RBHUDPlayerPingIconWidget_IsSharedWithObjectiveIcon, ReturnValue) == 0x000000, "Member 'RBHUDPlayerPingIconWidget_IsSharedWithObjectiveIcon::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.BP_GetRHIName
// 0x0018 (0x0018 - 0x0000)
struct RBUIBlueprintLibrary_BP_GetRHIName final
{
public:
	EGraphicsRHI                                  Version;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_BP_GetRHIName) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_BP_GetRHIName");
static_assert(sizeof(RBUIBlueprintLibrary_BP_GetRHIName) == 0x000018, "Wrong size on RBUIBlueprintLibrary_BP_GetRHIName");
static_assert(offsetof(RBUIBlueprintLibrary_BP_GetRHIName, Version) == 0x000000, "Member 'RBUIBlueprintLibrary_BP_GetRHIName::Version' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_BP_GetRHIName, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_BP_GetRHIName::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.BP_IsInteractingWithCursorEnabledPanelComponent
// 0x0010 (0x0010 - 0x0000)
struct RBUIBlueprintLibrary_BP_IsInteractingWithCursorEnabledPanelComponent final
{
public:
	const class ARBPlayer*                        RBPlayer;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_BP_IsInteractingWithCursorEnabledPanelComponent) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_BP_IsInteractingWithCursorEnabledPanelComponent");
static_assert(sizeof(RBUIBlueprintLibrary_BP_IsInteractingWithCursorEnabledPanelComponent) == 0x000010, "Wrong size on RBUIBlueprintLibrary_BP_IsInteractingWithCursorEnabledPanelComponent");
static_assert(offsetof(RBUIBlueprintLibrary_BP_IsInteractingWithCursorEnabledPanelComponent, RBPlayer) == 0x000000, "Member 'RBUIBlueprintLibrary_BP_IsInteractingWithCursorEnabledPanelComponent::RBPlayer' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_BP_IsInteractingWithCursorEnabledPanelComponent, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_BP_IsInteractingWithCursorEnabledPanelComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.BP_IsQuestGiverUnlocked
// 0x0010 (0x0010 - 0x0000)
struct RBUIBlueprintLibrary_BP_IsQuestGiverUnlocked final
{
public:
	const class ARBQuestGiver*                    QuestGiver;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_BP_IsQuestGiverUnlocked) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_BP_IsQuestGiverUnlocked");
static_assert(sizeof(RBUIBlueprintLibrary_BP_IsQuestGiverUnlocked) == 0x000010, "Wrong size on RBUIBlueprintLibrary_BP_IsQuestGiverUnlocked");
static_assert(offsetof(RBUIBlueprintLibrary_BP_IsQuestGiverUnlocked, QuestGiver) == 0x000000, "Member 'RBUIBlueprintLibrary_BP_IsQuestGiverUnlocked::QuestGiver' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_BP_IsQuestGiverUnlocked, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_BP_IsQuestGiverUnlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.ClearMenuFocusAction
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_ClearMenuFocusAction final
{
public:
	class UWidget*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_ClearMenuFocusAction) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_ClearMenuFocusAction");
static_assert(sizeof(RBUIBlueprintLibrary_ClearMenuFocusAction) == 0x000008, "Wrong size on RBUIBlueprintLibrary_ClearMenuFocusAction");
static_assert(offsetof(RBUIBlueprintLibrary_ClearMenuFocusAction, Source) == 0x000000, "Member 'RBUIBlueprintLibrary_ClearMenuFocusAction::Source' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.CustomizationCategoryContainsSameItems
// 0x0003 (0x0003 - 0x0000)
struct RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems final
{
public:
	ECustomizationMenuCategory                    Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomizationMenuCategory                    Target;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems");
static_assert(sizeof(RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems) == 0x000003, "Wrong size on RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems");
static_assert(offsetof(RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems, Source) == 0x000000, "Member 'RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems::Source' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems, Target) == 0x000001, "Member 'RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems::Target' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems, ReturnValue) == 0x000002, "Member 'RBUIBlueprintLibrary_CustomizationCategoryContainsSameItems::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.FilterRecentlyBoughtUpdates
// 0x0018 (0x0018 - 0x0000)
struct RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates final
{
public:
	EItemProgressionCategory                      Category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActiveSkillType                              AssociatedActiveSkillType;                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProfileUpgradeCategory                       ProfileUpgradeCategory;                            // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPerkCategory                                 PerkCategory;                                      // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAD[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates");
static_assert(sizeof(RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates) == 0x000018, "Wrong size on RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates");
static_assert(offsetof(RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates, Category) == 0x000000, "Member 'RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates::Category' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates, AssociatedActiveSkillType) == 0x000001, "Member 'RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates::AssociatedActiveSkillType' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates, ProfileUpgradeCategory) == 0x000002, "Member 'RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates::ProfileUpgradeCategory' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates, PerkCategory) == 0x000003, "Member 'RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates::PerkCategory' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_FilterRecentlyBoughtUpdates::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.FormatPlayerName
// 0x0028 (0x0028 - 0x0000)
struct RBUIBlueprintLibrary_FormatPlayerName final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLength;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAE[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_FormatPlayerName) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_FormatPlayerName");
static_assert(sizeof(RBUIBlueprintLibrary_FormatPlayerName) == 0x000028, "Wrong size on RBUIBlueprintLibrary_FormatPlayerName");
static_assert(offsetof(RBUIBlueprintLibrary_FormatPlayerName, DisplayName) == 0x000000, "Member 'RBUIBlueprintLibrary_FormatPlayerName::DisplayName' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FormatPlayerName, MaxLength) == 0x000010, "Member 'RBUIBlueprintLibrary_FormatPlayerName::MaxLength' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FormatPlayerName, ReturnValue) == 0x000018, "Member 'RBUIBlueprintLibrary_FormatPlayerName::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.FormatTextForDecorator
// 0x0038 (0x0038 - 0x0000)
struct RBUIBlueprintLibrary_FormatTextForDecorator final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         HeightOverride;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EAF[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_FormatTextForDecorator) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_FormatTextForDecorator");
static_assert(sizeof(RBUIBlueprintLibrary_FormatTextForDecorator) == 0x000038, "Wrong size on RBUIBlueprintLibrary_FormatTextForDecorator");
static_assert(offsetof(RBUIBlueprintLibrary_FormatTextForDecorator, Message) == 0x000000, "Member 'RBUIBlueprintLibrary_FormatTextForDecorator::Message' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FormatTextForDecorator, HeightOverride) == 0x000018, "Member 'RBUIBlueprintLibrary_FormatTextForDecorator::HeightOverride' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FormatTextForDecorator, ReturnValue) == 0x000020, "Member 'RBUIBlueprintLibrary_FormatTextForDecorator::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.FormatUpgradeEffectText
// 0x0020 (0x0020 - 0x0000)
struct RBUIBlueprintLibrary_FormatUpgradeEffectText final
{
public:
	class FName                                   UpgradeOnlineId;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_FormatUpgradeEffectText) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_FormatUpgradeEffectText");
static_assert(sizeof(RBUIBlueprintLibrary_FormatUpgradeEffectText) == 0x000020, "Wrong size on RBUIBlueprintLibrary_FormatUpgradeEffectText");
static_assert(offsetof(RBUIBlueprintLibrary_FormatUpgradeEffectText, UpgradeOnlineId) == 0x000000, "Member 'RBUIBlueprintLibrary_FormatUpgradeEffectText::UpgradeOnlineId' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FormatUpgradeEffectText, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_FormatUpgradeEffectText::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.FormatUpgradeEffectTexts
// 0x0018 (0x0018 - 0x0000)
struct RBUIBlueprintLibrary_FormatUpgradeEffectTexts final
{
public:
	class FName                                   UpgradeOnlineId;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_FormatUpgradeEffectTexts) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_FormatUpgradeEffectTexts");
static_assert(sizeof(RBUIBlueprintLibrary_FormatUpgradeEffectTexts) == 0x000018, "Wrong size on RBUIBlueprintLibrary_FormatUpgradeEffectTexts");
static_assert(offsetof(RBUIBlueprintLibrary_FormatUpgradeEffectTexts, UpgradeOnlineId) == 0x000000, "Member 'RBUIBlueprintLibrary_FormatUpgradeEffectTexts::UpgradeOnlineId' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_FormatUpgradeEffectTexts, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_FormatUpgradeEffectTexts::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.GetCurrencyReward
// 0x0050 (0x0050 - 0x0000)
struct RBUIBlueprintLibrary_GetCurrencyReward final
{
public:
	struct FRBGeneratedRewardData                 RewardData;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ECurrencyType                                 CurrencyType;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB0[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_GetCurrencyReward) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_GetCurrencyReward");
static_assert(sizeof(RBUIBlueprintLibrary_GetCurrencyReward) == 0x000050, "Wrong size on RBUIBlueprintLibrary_GetCurrencyReward");
static_assert(offsetof(RBUIBlueprintLibrary_GetCurrencyReward, RewardData) == 0x000000, "Member 'RBUIBlueprintLibrary_GetCurrencyReward::RewardData' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_GetCurrencyReward, CurrencyType) == 0x000048, "Member 'RBUIBlueprintLibrary_GetCurrencyReward::CurrencyType' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_GetCurrencyReward, ReturnValue) == 0x00004C, "Member 'RBUIBlueprintLibrary_GetCurrencyReward::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.GetGamepadInputTextureFromKey
// 0x0020 (0x0020 - 0x0000)
struct RBUIBlueprintLibrary_GetGamepadInputTextureFromKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_GetGamepadInputTextureFromKey) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_GetGamepadInputTextureFromKey");
static_assert(sizeof(RBUIBlueprintLibrary_GetGamepadInputTextureFromKey) == 0x000020, "Wrong size on RBUIBlueprintLibrary_GetGamepadInputTextureFromKey");
static_assert(offsetof(RBUIBlueprintLibrary_GetGamepadInputTextureFromKey, Key) == 0x000000, "Member 'RBUIBlueprintLibrary_GetGamepadInputTextureFromKey::Key' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_GetGamepadInputTextureFromKey, ReturnValue) == 0x000018, "Member 'RBUIBlueprintLibrary_GetGamepadInputTextureFromKey::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.GetGamepadSpecificData
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_GetGamepadSpecificData final
{
public:
	const class URBGamepadSpecificData*           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_GetGamepadSpecificData) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_GetGamepadSpecificData");
static_assert(sizeof(RBUIBlueprintLibrary_GetGamepadSpecificData) == 0x000008, "Wrong size on RBUIBlueprintLibrary_GetGamepadSpecificData");
static_assert(offsetof(RBUIBlueprintLibrary_GetGamepadSpecificData, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_GetGamepadSpecificData::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.GetLocalCellMenuCharacter
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_GetLocalCellMenuCharacter final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_GetLocalCellMenuCharacter) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_GetLocalCellMenuCharacter");
static_assert(sizeof(RBUIBlueprintLibrary_GetLocalCellMenuCharacter) == 0x000008, "Wrong size on RBUIBlueprintLibrary_GetLocalCellMenuCharacter");
static_assert(offsetof(RBUIBlueprintLibrary_GetLocalCellMenuCharacter, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_GetLocalCellMenuCharacter::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.GetMatchmakingRegionName
// 0x0020 (0x0020 - 0x0000)
struct RBUIBlueprintLibrary_GetMatchmakingRegionName final
{
public:
	class FString                                 Region;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_GetMatchmakingRegionName) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_GetMatchmakingRegionName");
static_assert(sizeof(RBUIBlueprintLibrary_GetMatchmakingRegionName) == 0x000020, "Wrong size on RBUIBlueprintLibrary_GetMatchmakingRegionName");
static_assert(offsetof(RBUIBlueprintLibrary_GetMatchmakingRegionName, Region) == 0x000000, "Member 'RBUIBlueprintLibrary_GetMatchmakingRegionName::Region' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_GetMatchmakingRegionName, ReturnValue) == 0x000010, "Member 'RBUIBlueprintLibrary_GetMatchmakingRegionName::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.GetPlayerDisplayName
// 0x0010 (0x0010 - 0x0000)
struct RBUIBlueprintLibrary_GetPlayerDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_GetPlayerDisplayName) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_GetPlayerDisplayName");
static_assert(sizeof(RBUIBlueprintLibrary_GetPlayerDisplayName) == 0x000010, "Wrong size on RBUIBlueprintLibrary_GetPlayerDisplayName");
static_assert(offsetof(RBUIBlueprintLibrary_GetPlayerDisplayName, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_GetPlayerDisplayName::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.GetPsychosisColorData
// 0x0060 (0x0060 - 0x0000)
struct RBUIBlueprintLibrary_GetPsychosisColorData final
{
public:
	struct FPsychosisColorData                    ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_GetPsychosisColorData) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_GetPsychosisColorData");
static_assert(sizeof(RBUIBlueprintLibrary_GetPsychosisColorData) == 0x000060, "Wrong size on RBUIBlueprintLibrary_GetPsychosisColorData");
static_assert(offsetof(RBUIBlueprintLibrary_GetPsychosisColorData, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_GetPsychosisColorData::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasAnyNewShopItem
// 0x0002 (0x0002 - 0x0000)
struct RBUIBlueprintLibrary_HasAnyNewShopItem final
{
public:
	bool                                          IsCustomizingFemale;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_HasAnyNewShopItem) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_HasAnyNewShopItem");
static_assert(sizeof(RBUIBlueprintLibrary_HasAnyNewShopItem) == 0x000002, "Wrong size on RBUIBlueprintLibrary_HasAnyNewShopItem");
static_assert(offsetof(RBUIBlueprintLibrary_HasAnyNewShopItem, IsCustomizingFemale) == 0x000000, "Member 'RBUIBlueprintLibrary_HasAnyNewShopItem::IsCustomizingFemale' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasAnyNewShopItem, ReturnValue) == 0x000001, "Member 'RBUIBlueprintLibrary_HasAnyNewShopItem::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasNewShopItem
// 0x0002 (0x0002 - 0x0000)
struct RBUIBlueprintLibrary_HasNewShopItem final
{
public:
	ECustomizationMenuCategory                    Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_HasNewShopItem) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_HasNewShopItem");
static_assert(sizeof(RBUIBlueprintLibrary_HasNewShopItem) == 0x000002, "Wrong size on RBUIBlueprintLibrary_HasNewShopItem");
static_assert(offsetof(RBUIBlueprintLibrary_HasNewShopItem, Category) == 0x000000, "Member 'RBUIBlueprintLibrary_HasNewShopItem::Category' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasNewShopItem, ReturnValue) == 0x000001, "Member 'RBUIBlueprintLibrary_HasNewShopItem::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasPlayedMenuTutorial
// 0x000C (0x000C - 0x0000)
struct RBUIBlueprintLibrary_HasPlayedMenuTutorial final
{
public:
	class FName                                   TutorialId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB1[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_HasPlayedMenuTutorial) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_HasPlayedMenuTutorial");
static_assert(sizeof(RBUIBlueprintLibrary_HasPlayedMenuTutorial) == 0x00000C, "Wrong size on RBUIBlueprintLibrary_HasPlayedMenuTutorial");
static_assert(offsetof(RBUIBlueprintLibrary_HasPlayedMenuTutorial, TutorialId) == 0x000000, "Member 'RBUIBlueprintLibrary_HasPlayedMenuTutorial::TutorialId' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasPlayedMenuTutorial, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_HasPlayedMenuTutorial::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasPlayedNPCUnlockAnnouncement
// 0x0002 (0x0002 - 0x0000)
struct RBUIBlueprintLibrary_HasPlayedNPCUnlockAnnouncement final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_HasPlayedNPCUnlockAnnouncement) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_HasPlayedNPCUnlockAnnouncement");
static_assert(sizeof(RBUIBlueprintLibrary_HasPlayedNPCUnlockAnnouncement) == 0x000002, "Wrong size on RBUIBlueprintLibrary_HasPlayedNPCUnlockAnnouncement");
static_assert(offsetof(RBUIBlueprintLibrary_HasPlayedNPCUnlockAnnouncement, NPCType) == 0x000000, "Member 'RBUIBlueprintLibrary_HasPlayedNPCUnlockAnnouncement::NPCType' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasPlayedNPCUnlockAnnouncement, ReturnValue) == 0x000001, "Member 'RBUIBlueprintLibrary_HasPlayedNPCUnlockAnnouncement::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasPlayedTutorial
// 0x000C (0x000C - 0x0000)
struct RBUIBlueprintLibrary_HasPlayedTutorial final
{
public:
	class FName                                   TutorialId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB2[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_HasPlayedTutorial) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_HasPlayedTutorial");
static_assert(sizeof(RBUIBlueprintLibrary_HasPlayedTutorial) == 0x00000C, "Wrong size on RBUIBlueprintLibrary_HasPlayedTutorial");
static_assert(offsetof(RBUIBlueprintLibrary_HasPlayedTutorial, TutorialId) == 0x000000, "Member 'RBUIBlueprintLibrary_HasPlayedTutorial::TutorialId' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasPlayedTutorial, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_HasPlayedTutorial::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasPlayedVoicelineForLastLevelGained
// 0x0014 (0x0014 - 0x0000)
struct RBUIBlueprintLibrary_HasPlayedVoicelineForLastLevelGained final
{
public:
	struct FUILevelInfo                           LevelInfo;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB3[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_HasPlayedVoicelineForLastLevelGained) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_HasPlayedVoicelineForLastLevelGained");
static_assert(sizeof(RBUIBlueprintLibrary_HasPlayedVoicelineForLastLevelGained) == 0x000014, "Wrong size on RBUIBlueprintLibrary_HasPlayedVoicelineForLastLevelGained");
static_assert(offsetof(RBUIBlueprintLibrary_HasPlayedVoicelineForLastLevelGained, LevelInfo) == 0x000000, "Member 'RBUIBlueprintLibrary_HasPlayedVoicelineForLastLevelGained::LevelInfo' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasPlayedVoicelineForLastLevelGained, ReturnValue) == 0x000010, "Member 'RBUIBlueprintLibrary_HasPlayedVoicelineForLastLevelGained::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasRecentlyBoughtAnyUpgrade
// 0x0001 (0x0001 - 0x0000)
struct RBUIBlueprintLibrary_HasRecentlyBoughtAnyUpgrade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_HasRecentlyBoughtAnyUpgrade) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_HasRecentlyBoughtAnyUpgrade");
static_assert(sizeof(RBUIBlueprintLibrary_HasRecentlyBoughtAnyUpgrade) == 0x000001, "Wrong size on RBUIBlueprintLibrary_HasRecentlyBoughtAnyUpgrade");
static_assert(offsetof(RBUIBlueprintLibrary_HasRecentlyBoughtAnyUpgrade, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_HasRecentlyBoughtAnyUpgrade::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasRecentlyBoughtUpgradeOfType
// 0x0005 (0x0005 - 0x0000)
struct RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType final
{
public:
	EItemProgressionCategory                      Category;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActiveSkillType                              AssociatedActiveSkillType;                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProfileUpgradeCategory                       ProfileUpgradeCategory;                            // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPerkCategory                                 PerkCategory;                                      // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType");
static_assert(sizeof(RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType) == 0x000005, "Wrong size on RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType");
static_assert(offsetof(RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType, Category) == 0x000000, "Member 'RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType::Category' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType, AssociatedActiveSkillType) == 0x000001, "Member 'RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType::AssociatedActiveSkillType' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType, ProfileUpgradeCategory) == 0x000002, "Member 'RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType::ProfileUpgradeCategory' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType, PerkCategory) == 0x000003, "Member 'RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType::PerkCategory' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType, ReturnValue) == 0x000004, "Member 'RBUIBlueprintLibrary_HasRecentlyBoughtUpgradeOfType::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasSeenDocument
// 0x000C (0x000C - 0x0000)
struct RBUIBlueprintLibrary_HasSeenDocument final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_HasSeenDocument) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_HasSeenDocument");
static_assert(sizeof(RBUIBlueprintLibrary_HasSeenDocument) == 0x00000C, "Wrong size on RBUIBlueprintLibrary_HasSeenDocument");
static_assert(offsetof(RBUIBlueprintLibrary_HasSeenDocument, ID) == 0x000000, "Member 'RBUIBlueprintLibrary_HasSeenDocument::ID' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasSeenDocument, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_HasSeenDocument::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasUnseenAcquiredDocument
// 0x0001 (0x0001 - 0x0000)
struct RBUIBlueprintLibrary_HasUnseenAcquiredDocument final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_HasUnseenAcquiredDocument) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_HasUnseenAcquiredDocument");
static_assert(sizeof(RBUIBlueprintLibrary_HasUnseenAcquiredDocument) == 0x000001, "Wrong size on RBUIBlueprintLibrary_HasUnseenAcquiredDocument");
static_assert(offsetof(RBUIBlueprintLibrary_HasUnseenAcquiredDocument, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_HasUnseenAcquiredDocument::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.HasVisitedNPC
// 0x0002 (0x0002 - 0x0000)
struct RBUIBlueprintLibrary_HasVisitedNPC final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_HasVisitedNPC) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_HasVisitedNPC");
static_assert(sizeof(RBUIBlueprintLibrary_HasVisitedNPC) == 0x000002, "Wrong size on RBUIBlueprintLibrary_HasVisitedNPC");
static_assert(offsetof(RBUIBlueprintLibrary_HasVisitedNPC, NPCType) == 0x000000, "Member 'RBUIBlueprintLibrary_HasVisitedNPC::NPCType' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_HasVisitedNPC, ReturnValue) == 0x000001, "Member 'RBUIBlueprintLibrary_HasVisitedNPC::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.IsMetaNPCUnlocked
// 0x0002 (0x0002 - 0x0000)
struct RBUIBlueprintLibrary_IsMetaNPCUnlocked final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_IsMetaNPCUnlocked) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_IsMetaNPCUnlocked");
static_assert(sizeof(RBUIBlueprintLibrary_IsMetaNPCUnlocked) == 0x000002, "Wrong size on RBUIBlueprintLibrary_IsMetaNPCUnlocked");
static_assert(offsetof(RBUIBlueprintLibrary_IsMetaNPCUnlocked, NPCType) == 0x000000, "Member 'RBUIBlueprintLibrary_IsMetaNPCUnlocked::NPCType' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_IsMetaNPCUnlocked, ReturnValue) == 0x000001, "Member 'RBUIBlueprintLibrary_IsMetaNPCUnlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.IsReplayingMenuTutorials
// 0x0001 (0x0001 - 0x0000)
struct RBUIBlueprintLibrary_IsReplayingMenuTutorials final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_IsReplayingMenuTutorials) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_IsReplayingMenuTutorials");
static_assert(sizeof(RBUIBlueprintLibrary_IsReplayingMenuTutorials) == 0x000001, "Wrong size on RBUIBlueprintLibrary_IsReplayingMenuTutorials");
static_assert(offsetof(RBUIBlueprintLibrary_IsReplayingMenuTutorials, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_IsReplayingMenuTutorials::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.IsShippingBuild
// 0x0001 (0x0001 - 0x0000)
struct RBUIBlueprintLibrary_IsShippingBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_IsShippingBuild) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_IsShippingBuild");
static_assert(sizeof(RBUIBlueprintLibrary_IsShippingBuild) == 0x000001, "Wrong size on RBUIBlueprintLibrary_IsShippingBuild");
static_assert(offsetof(RBUIBlueprintLibrary_IsShippingBuild, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_IsShippingBuild::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.IsShowingLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct RBUIBlueprintLibrary_IsShowingLoadingScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_IsShowingLoadingScreen) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_IsShowingLoadingScreen");
static_assert(sizeof(RBUIBlueprintLibrary_IsShowingLoadingScreen) == 0x000001, "Wrong size on RBUIBlueprintLibrary_IsShowingLoadingScreen");
static_assert(offsetof(RBUIBlueprintLibrary_IsShowingLoadingScreen, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_IsShowingLoadingScreen::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.IsUsingAnalogPeekControlScheme
// 0x0001 (0x0001 - 0x0000)
struct RBUIBlueprintLibrary_IsUsingAnalogPeekControlScheme final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_IsUsingAnalogPeekControlScheme) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_IsUsingAnalogPeekControlScheme");
static_assert(sizeof(RBUIBlueprintLibrary_IsUsingAnalogPeekControlScheme) == 0x000001, "Wrong size on RBUIBlueprintLibrary_IsUsingAnalogPeekControlScheme");
static_assert(offsetof(RBUIBlueprintLibrary_IsUsingAnalogPeekControlScheme, ReturnValue) == 0x000000, "Member 'RBUIBlueprintLibrary_IsUsingAnalogPeekControlScheme::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.IsWiderInputTexture
// 0x0020 (0x0020 - 0x0000)
struct RBUIBlueprintLibrary_IsWiderInputTexture final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_IsWiderInputTexture) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_IsWiderInputTexture");
static_assert(sizeof(RBUIBlueprintLibrary_IsWiderInputTexture) == 0x000020, "Wrong size on RBUIBlueprintLibrary_IsWiderInputTexture");
static_assert(offsetof(RBUIBlueprintLibrary_IsWiderInputTexture, Key) == 0x000000, "Member 'RBUIBlueprintLibrary_IsWiderInputTexture::Key' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_IsWiderInputTexture, ReturnValue) == 0x000018, "Member 'RBUIBlueprintLibrary_IsWiderInputTexture::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.NormalizedScoreToRating
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_NormalizedScoreToRating final
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerTrialRating                            ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB6[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_NormalizedScoreToRating) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_NormalizedScoreToRating");
static_assert(sizeof(RBUIBlueprintLibrary_NormalizedScoreToRating) == 0x000008, "Wrong size on RBUIBlueprintLibrary_NormalizedScoreToRating");
static_assert(offsetof(RBUIBlueprintLibrary_NormalizedScoreToRating, Score) == 0x000000, "Member 'RBUIBlueprintLibrary_NormalizedScoreToRating::Score' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_NormalizedScoreToRating, ReturnValue) == 0x000004, "Member 'RBUIBlueprintLibrary_NormalizedScoreToRating::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.NormalizedScoreToText
// 0x0020 (0x0020 - 0x0000)
struct RBUIBlueprintLibrary_NormalizedScoreToText final
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_NormalizedScoreToText) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_NormalizedScoreToText");
static_assert(sizeof(RBUIBlueprintLibrary_NormalizedScoreToText) == 0x000020, "Wrong size on RBUIBlueprintLibrary_NormalizedScoreToText");
static_assert(offsetof(RBUIBlueprintLibrary_NormalizedScoreToText, Score) == 0x000000, "Member 'RBUIBlueprintLibrary_NormalizedScoreToText::Score' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_NormalizedScoreToText, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_NormalizedScoreToText::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.ParseTVChannelTextIntoLines
// 0x0020 (0x0020 - 0x0000)
struct RBUIBlueprintLibrary_ParseTVChannelTextIntoLines final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_ParseTVChannelTextIntoLines) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_ParseTVChannelTextIntoLines");
static_assert(sizeof(RBUIBlueprintLibrary_ParseTVChannelTextIntoLines) == 0x000020, "Wrong size on RBUIBlueprintLibrary_ParseTVChannelTextIntoLines");
static_assert(offsetof(RBUIBlueprintLibrary_ParseTVChannelTextIntoLines, Text) == 0x000000, "Member 'RBUIBlueprintLibrary_ParseTVChannelTextIntoLines::Text' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_ParseTVChannelTextIntoLines, ReturnValue) == 0x000010, "Member 'RBUIBlueprintLibrary_ParseTVChannelTextIntoLines::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.PushHUDTutorial
// 0x0040 (0x0040 - 0x0000)
struct RBUIBlueprintLibrary_PushHUDTutorial final
{
public:
	struct FHUDTutorialTextData                   HUDTutorialTextData;                               // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_PushHUDTutorial) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_PushHUDTutorial");
static_assert(sizeof(RBUIBlueprintLibrary_PushHUDTutorial) == 0x000040, "Wrong size on RBUIBlueprintLibrary_PushHUDTutorial");
static_assert(offsetof(RBUIBlueprintLibrary_PushHUDTutorial, HUDTutorialTextData) == 0x000000, "Member 'RBUIBlueprintLibrary_PushHUDTutorial::HUDTutorialTextData' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.RemoveUpgradeFromRecentlyBought
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_RemoveUpgradeFromRecentlyBought final
{
public:
	class FName                                   OnlineID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_RemoveUpgradeFromRecentlyBought) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_RemoveUpgradeFromRecentlyBought");
static_assert(sizeof(RBUIBlueprintLibrary_RemoveUpgradeFromRecentlyBought) == 0x000008, "Wrong size on RBUIBlueprintLibrary_RemoveUpgradeFromRecentlyBought");
static_assert(offsetof(RBUIBlueprintLibrary_RemoveUpgradeFromRecentlyBought, OnlineID) == 0x000000, "Member 'RBUIBlueprintLibrary_RemoveUpgradeFromRecentlyBought::OnlineID' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SaveThumbnailForCellItems
// 0x0018 (0x0018 - 0x0000)
struct RBUIBlueprintLibrary_SaveThumbnailForCellItems final
{
public:
	TArray<class URBPlayerCellItemDefinition*>    RbPlayerCellItems;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ForceCleanCategory;                                // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB8[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_SaveThumbnailForCellItems) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_SaveThumbnailForCellItems");
static_assert(sizeof(RBUIBlueprintLibrary_SaveThumbnailForCellItems) == 0x000018, "Wrong size on RBUIBlueprintLibrary_SaveThumbnailForCellItems");
static_assert(offsetof(RBUIBlueprintLibrary_SaveThumbnailForCellItems, RbPlayerCellItems) == 0x000000, "Member 'RBUIBlueprintLibrary_SaveThumbnailForCellItems::RbPlayerCellItems' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_SaveThumbnailForCellItems, ForceCleanCategory) == 0x000010, "Member 'RBUIBlueprintLibrary_SaveThumbnailForCellItems::ForceCleanCategory' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SaveThumbnailForOptions
// 0x0018 (0x0018 - 0x0000)
struct RBUIBlueprintLibrary_SaveThumbnailForOptions final
{
public:
	TArray<class URBPlayerCustomizationOption*>   RbCustomizationOptions;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ForceCleanCategory;                                // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EB9[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_SaveThumbnailForOptions) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_SaveThumbnailForOptions");
static_assert(sizeof(RBUIBlueprintLibrary_SaveThumbnailForOptions) == 0x000018, "Wrong size on RBUIBlueprintLibrary_SaveThumbnailForOptions");
static_assert(offsetof(RBUIBlueprintLibrary_SaveThumbnailForOptions, RbCustomizationOptions) == 0x000000, "Member 'RBUIBlueprintLibrary_SaveThumbnailForOptions::RbCustomizationOptions' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_SaveThumbnailForOptions, ForceCleanCategory) == 0x000010, "Member 'RBUIBlueprintLibrary_SaveThumbnailForOptions::ForceCleanCategory' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SaveThumbnailForOutfits
// 0x0018 (0x0018 - 0x0000)
struct RBUIBlueprintLibrary_SaveThumbnailForOutfits final
{
public:
	TArray<class URBCustomizationOutfit*>         RbCustomizationOutfits;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ForceCleanCategory;                                // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBA[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_SaveThumbnailForOutfits) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_SaveThumbnailForOutfits");
static_assert(sizeof(RBUIBlueprintLibrary_SaveThumbnailForOutfits) == 0x000018, "Wrong size on RBUIBlueprintLibrary_SaveThumbnailForOutfits");
static_assert(offsetof(RBUIBlueprintLibrary_SaveThumbnailForOutfits, RbCustomizationOutfits) == 0x000000, "Member 'RBUIBlueprintLibrary_SaveThumbnailForOutfits::RbCustomizationOutfits' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_SaveThumbnailForOutfits, ForceCleanCategory) == 0x000010, "Member 'RBUIBlueprintLibrary_SaveThumbnailForOutfits::ForceCleanCategory' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetHasSeenDocument
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_SetHasSeenDocument final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetHasSeenDocument) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_SetHasSeenDocument");
static_assert(sizeof(RBUIBlueprintLibrary_SetHasSeenDocument) == 0x000008, "Wrong size on RBUIBlueprintLibrary_SetHasSeenDocument");
static_assert(offsetof(RBUIBlueprintLibrary_SetHasSeenDocument, ID) == 0x000000, "Member 'RBUIBlueprintLibrary_SetHasSeenDocument::ID' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetHasSeenItemInMenu
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_SetHasSeenItemInMenu final
{
public:
	class FName                                   OnlineID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetHasSeenItemInMenu) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_SetHasSeenItemInMenu");
static_assert(sizeof(RBUIBlueprintLibrary_SetHasSeenItemInMenu) == 0x000008, "Wrong size on RBUIBlueprintLibrary_SetHasSeenItemInMenu");
static_assert(offsetof(RBUIBlueprintLibrary_SetHasSeenItemInMenu, OnlineID) == 0x000000, "Member 'RBUIBlueprintLibrary_SetHasSeenItemInMenu::OnlineID' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetHasVisitedNPC
// 0x0001 (0x0001 - 0x0000)
struct RBUIBlueprintLibrary_SetHasVisitedNPC final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetHasVisitedNPC) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_SetHasVisitedNPC");
static_assert(sizeof(RBUIBlueprintLibrary_SetHasVisitedNPC) == 0x000001, "Wrong size on RBUIBlueprintLibrary_SetHasVisitedNPC");
static_assert(offsetof(RBUIBlueprintLibrary_SetHasVisitedNPC, NPCType) == 0x000000, "Member 'RBUIBlueprintLibrary_SetHasVisitedNPC::NPCType' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetLastLevelGainedVoicelinePlayed
// 0x0010 (0x0010 - 0x0000)
struct RBUIBlueprintLibrary_SetLastLevelGainedVoicelinePlayed final
{
public:
	struct FUILevelInfo                           LevelInfo;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetLastLevelGainedVoicelinePlayed) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_SetLastLevelGainedVoicelinePlayed");
static_assert(sizeof(RBUIBlueprintLibrary_SetLastLevelGainedVoicelinePlayed) == 0x000010, "Wrong size on RBUIBlueprintLibrary_SetLastLevelGainedVoicelinePlayed");
static_assert(offsetof(RBUIBlueprintLibrary_SetLastLevelGainedVoicelinePlayed, LevelInfo) == 0x000000, "Member 'RBUIBlueprintLibrary_SetLastLevelGainedVoicelinePlayed::LevelInfo' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetMenuFocusAction
// 0x0028 (0x0028 - 0x0000)
struct RBUIBlueprintLibrary_SetMenuFocusAction final
{
public:
	class UWidget*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Action;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetMenuFocusAction) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_SetMenuFocusAction");
static_assert(sizeof(RBUIBlueprintLibrary_SetMenuFocusAction) == 0x000028, "Wrong size on RBUIBlueprintLibrary_SetMenuFocusAction");
static_assert(offsetof(RBUIBlueprintLibrary_SetMenuFocusAction, Source) == 0x000000, "Member 'RBUIBlueprintLibrary_SetMenuFocusAction::Source' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_SetMenuFocusAction, Action) == 0x000008, "Member 'RBUIBlueprintLibrary_SetMenuFocusAction::Action' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_SetMenuFocusAction, Text) == 0x000010, "Member 'RBUIBlueprintLibrary_SetMenuFocusAction::Text' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetMenuTutorialPlayed
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_SetMenuTutorialPlayed final
{
public:
	class FName                                   TutorialId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetMenuTutorialPlayed) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_SetMenuTutorialPlayed");
static_assert(sizeof(RBUIBlueprintLibrary_SetMenuTutorialPlayed) == 0x000008, "Wrong size on RBUIBlueprintLibrary_SetMenuTutorialPlayed");
static_assert(offsetof(RBUIBlueprintLibrary_SetMenuTutorialPlayed, TutorialId) == 0x000000, "Member 'RBUIBlueprintLibrary_SetMenuTutorialPlayed::TutorialId' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetMinigameProgressHUDOwner
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_SetMinigameProgressHUDOwner final
{
public:
	class AActor*                                 ProgressOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetMinigameProgressHUDOwner) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_SetMinigameProgressHUDOwner");
static_assert(sizeof(RBUIBlueprintLibrary_SetMinigameProgressHUDOwner) == 0x000008, "Wrong size on RBUIBlueprintLibrary_SetMinigameProgressHUDOwner");
static_assert(offsetof(RBUIBlueprintLibrary_SetMinigameProgressHUDOwner, ProgressOwner) == 0x000000, "Member 'RBUIBlueprintLibrary_SetMinigameProgressHUDOwner::ProgressOwner' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetNPCUnlockAnnouncementPlayed
// 0x0001 (0x0001 - 0x0000)
struct RBUIBlueprintLibrary_SetNPCUnlockAnnouncementPlayed final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetNPCUnlockAnnouncementPlayed) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_SetNPCUnlockAnnouncementPlayed");
static_assert(sizeof(RBUIBlueprintLibrary_SetNPCUnlockAnnouncementPlayed) == 0x000001, "Wrong size on RBUIBlueprintLibrary_SetNPCUnlockAnnouncementPlayed");
static_assert(offsetof(RBUIBlueprintLibrary_SetNPCUnlockAnnouncementPlayed, NPCType) == 0x000000, "Member 'RBUIBlueprintLibrary_SetNPCUnlockAnnouncementPlayed::NPCType' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetShouldReplayMenuTutorials
// 0x0001 (0x0001 - 0x0000)
struct RBUIBlueprintLibrary_SetShouldReplayMenuTutorials final
{
public:
	bool                                          ShouldReplay;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetShouldReplayMenuTutorials) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_SetShouldReplayMenuTutorials");
static_assert(sizeof(RBUIBlueprintLibrary_SetShouldReplayMenuTutorials) == 0x000001, "Wrong size on RBUIBlueprintLibrary_SetShouldReplayMenuTutorials");
static_assert(offsetof(RBUIBlueprintLibrary_SetShouldReplayMenuTutorials, ShouldReplay) == 0x000000, "Member 'RBUIBlueprintLibrary_SetShouldReplayMenuTutorials::ShouldReplay' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.SetTutorialPlayed
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_SetTutorialPlayed final
{
public:
	class FName                                   TutorialId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_SetTutorialPlayed) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_SetTutorialPlayed");
static_assert(sizeof(RBUIBlueprintLibrary_SetTutorialPlayed) == 0x000008, "Wrong size on RBUIBlueprintLibrary_SetTutorialPlayed");
static_assert(offsetof(RBUIBlueprintLibrary_SetTutorialPlayed, TutorialId) == 0x000000, "Member 'RBUIBlueprintLibrary_SetTutorialPlayed::TutorialId' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.ShouldDisplayGenericPlatformIcon
// 0x0002 (0x0002 - 0x0000)
struct RBUIBlueprintLibrary_ShouldDisplayGenericPlatformIcon final
{
public:
	EProfilePlatform                              Platform;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_ShouldDisplayGenericPlatformIcon) == 0x000001, "Wrong alignment on RBUIBlueprintLibrary_ShouldDisplayGenericPlatformIcon");
static_assert(sizeof(RBUIBlueprintLibrary_ShouldDisplayGenericPlatformIcon) == 0x000002, "Wrong size on RBUIBlueprintLibrary_ShouldDisplayGenericPlatformIcon");
static_assert(offsetof(RBUIBlueprintLibrary_ShouldDisplayGenericPlatformIcon, Platform) == 0x000000, "Member 'RBUIBlueprintLibrary_ShouldDisplayGenericPlatformIcon::Platform' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_ShouldDisplayGenericPlatformIcon, ReturnValue) == 0x000001, "Member 'RBUIBlueprintLibrary_ShouldDisplayGenericPlatformIcon::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.ShowContextualTutorial
// 0x0020 (0x0020 - 0x0000)
struct RBUIBlueprintLibrary_ShowContextualTutorial final
{
public:
	class FText                                   TutorialText;                                      // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBB[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_ShowContextualTutorial) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_ShowContextualTutorial");
static_assert(sizeof(RBUIBlueprintLibrary_ShowContextualTutorial) == 0x000020, "Wrong size on RBUIBlueprintLibrary_ShowContextualTutorial");
static_assert(offsetof(RBUIBlueprintLibrary_ShowContextualTutorial, TutorialText) == 0x000000, "Member 'RBUIBlueprintLibrary_ShowContextualTutorial::TutorialText' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_ShowContextualTutorial, Duration) == 0x000018, "Member 'RBUIBlueprintLibrary_ShowContextualTutorial::Duration' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.ShowTextChatNofitication
// 0x0018 (0x0018 - 0x0000)
struct RBUIBlueprintLibrary_ShowTextChatNofitication final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_ShowTextChatNofitication) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_ShowTextChatNofitication");
static_assert(sizeof(RBUIBlueprintLibrary_ShowTextChatNofitication) == 0x000018, "Wrong size on RBUIBlueprintLibrary_ShowTextChatNofitication");
static_assert(offsetof(RBUIBlueprintLibrary_ShowTextChatNofitication, Message) == 0x000000, "Member 'RBUIBlueprintLibrary_ShowTextChatNofitication::Message' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.TryClearMinigameProgressHUDOwner
// 0x0008 (0x0008 - 0x0000)
struct RBUIBlueprintLibrary_TryClearMinigameProgressHUDOwner final
{
public:
	class AActor*                                 ProgressOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_TryClearMinigameProgressHUDOwner) == 0x000008, "Wrong alignment on RBUIBlueprintLibrary_TryClearMinigameProgressHUDOwner");
static_assert(sizeof(RBUIBlueprintLibrary_TryClearMinigameProgressHUDOwner) == 0x000008, "Wrong size on RBUIBlueprintLibrary_TryClearMinigameProgressHUDOwner");
static_assert(offsetof(RBUIBlueprintLibrary_TryClearMinigameProgressHUDOwner, ProgressOwner) == 0x000000, "Member 'RBUIBlueprintLibrary_TryClearMinigameProgressHUDOwner::ProgressOwner' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.UpdateLastLevelGainedInfo
// 0x0010 (0x0010 - 0x0000)
struct RBUIBlueprintLibrary_UpdateLastLevelGainedInfo final
{
public:
	struct FUILevelInfo                           LevelInfo;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUIBlueprintLibrary_UpdateLastLevelGainedInfo) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_UpdateLastLevelGainedInfo");
static_assert(sizeof(RBUIBlueprintLibrary_UpdateLastLevelGainedInfo) == 0x000010, "Wrong size on RBUIBlueprintLibrary_UpdateLastLevelGainedInfo");
static_assert(offsetof(RBUIBlueprintLibrary_UpdateLastLevelGainedInfo, LevelInfo) == 0x000000, "Member 'RBUIBlueprintLibrary_UpdateLastLevelGainedInfo::LevelInfo' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.WasSeenInMenu
// 0x000C (0x000C - 0x0000)
struct RBUIBlueprintLibrary_WasSeenInMenu final
{
public:
	class FName                                   OnlineID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBC[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_WasSeenInMenu) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_WasSeenInMenu");
static_assert(sizeof(RBUIBlueprintLibrary_WasSeenInMenu) == 0x00000C, "Wrong size on RBUIBlueprintLibrary_WasSeenInMenu");
static_assert(offsetof(RBUIBlueprintLibrary_WasSeenInMenu, OnlineID) == 0x000000, "Member 'RBUIBlueprintLibrary_WasSeenInMenu::OnlineID' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_WasSeenInMenu, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_WasSeenInMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBUIBlueprintLibrary.WasUpgradeRecentlyBought
// 0x000C (0x000C - 0x0000)
struct RBUIBlueprintLibrary_WasUpgradeRecentlyBought final
{
public:
	class FName                                   OnlineID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EBD[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBUIBlueprintLibrary_WasUpgradeRecentlyBought) == 0x000004, "Wrong alignment on RBUIBlueprintLibrary_WasUpgradeRecentlyBought");
static_assert(sizeof(RBUIBlueprintLibrary_WasUpgradeRecentlyBought) == 0x00000C, "Wrong size on RBUIBlueprintLibrary_WasUpgradeRecentlyBought");
static_assert(offsetof(RBUIBlueprintLibrary_WasUpgradeRecentlyBought, OnlineID) == 0x000000, "Member 'RBUIBlueprintLibrary_WasUpgradeRecentlyBought::OnlineID' has a wrong offset!");
static_assert(offsetof(RBUIBlueprintLibrary_WasUpgradeRecentlyBought, ReturnValue) == 0x000008, "Member 'RBUIBlueprintLibrary_WasUpgradeRecentlyBought::ReturnValue' has a wrong offset!");

// Function OPP.RBBoxNavMeshBlockingComponent.SetBlocking
// 0x0001 (0x0001 - 0x0000)
struct RBBoxNavMeshBlockingComponent_SetBlocking final
{
public:
	bool                                          bBlockingValue;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBoxNavMeshBlockingComponent_SetBlocking) == 0x000001, "Wrong alignment on RBBoxNavMeshBlockingComponent_SetBlocking");
static_assert(sizeof(RBBoxNavMeshBlockingComponent_SetBlocking) == 0x000001, "Wrong size on RBBoxNavMeshBlockingComponent_SetBlocking");
static_assert(offsetof(RBBoxNavMeshBlockingComponent_SetBlocking, bBlockingValue) == 0x000000, "Member 'RBBoxNavMeshBlockingComponent_SetBlocking::bBlockingValue' has a wrong offset!");

// Function OPP.RBBreadcrumbActivatedTriggerable.OnBreadcrumbStopOperating
// 0x0010 (0x0010 - 0x0000)
struct RBBreadcrumbActivatedTriggerable_OnBreadcrumbStopOperating final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBOperatable*                          Operatable;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreadcrumbActivatedTriggerable_OnBreadcrumbStopOperating) == 0x000008, "Wrong alignment on RBBreadcrumbActivatedTriggerable_OnBreadcrumbStopOperating");
static_assert(sizeof(RBBreadcrumbActivatedTriggerable_OnBreadcrumbStopOperating) == 0x000010, "Wrong size on RBBreadcrumbActivatedTriggerable_OnBreadcrumbStopOperating");
static_assert(offsetof(RBBreadcrumbActivatedTriggerable_OnBreadcrumbStopOperating, Interactor) == 0x000000, "Member 'RBBreadcrumbActivatedTriggerable_OnBreadcrumbStopOperating::Interactor' has a wrong offset!");
static_assert(offsetof(RBBreadcrumbActivatedTriggerable_OnBreadcrumbStopOperating, Operatable) == 0x000008, "Member 'RBBreadcrumbActivatedTriggerable_OnBreadcrumbStopOperating::Operatable' has a wrong offset!");

// Function OPP.RBGameModeBase.RespawnPlayer
// 0x0018 (0x0018 - 0x0000)
struct RBGameModeBase_RespawnPlayer final
{
public:
	class ARBController*                          RBController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 StartSpot;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerSpawnType                              SpawnType;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC5[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameModeBase_RespawnPlayer) == 0x000008, "Wrong alignment on RBGameModeBase_RespawnPlayer");
static_assert(sizeof(RBGameModeBase_RespawnPlayer) == 0x000018, "Wrong size on RBGameModeBase_RespawnPlayer");
static_assert(offsetof(RBGameModeBase_RespawnPlayer, RBController) == 0x000000, "Member 'RBGameModeBase_RespawnPlayer::RBController' has a wrong offset!");
static_assert(offsetof(RBGameModeBase_RespawnPlayer, StartSpot) == 0x000008, "Member 'RBGameModeBase_RespawnPlayer::StartSpot' has a wrong offset!");
static_assert(offsetof(RBGameModeBase_RespawnPlayer, SpawnType) == 0x000010, "Member 'RBGameModeBase_RespawnPlayer::SpawnType' has a wrong offset!");
static_assert(offsetof(RBGameModeBase_RespawnPlayer, ReturnValue) == 0x000011, "Member 'RBGameModeBase_RespawnPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBGameModeBase.GetExpectedPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct RBGameModeBase_GetExpectedPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeBase_GetExpectedPlayerCount) == 0x000004, "Wrong alignment on RBGameModeBase_GetExpectedPlayerCount");
static_assert(sizeof(RBGameModeBase_GetExpectedPlayerCount) == 0x000004, "Wrong size on RBGameModeBase_GetExpectedPlayerCount");
static_assert(offsetof(RBGameModeBase_GetExpectedPlayerCount, ReturnValue) == 0x000000, "Member 'RBGameModeBase_GetExpectedPlayerCount::ReturnValue' has a wrong offset!");

// Function OPP.RBBreadcrumbSwitchesCoordinator.OnInteractibleAddedToWorld
// 0x0008 (0x0008 - 0x0000)
struct RBBreadcrumbSwitchesCoordinator_OnInteractibleAddedToWorld final
{
public:
	class ARBInteractible*                        Interactible;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreadcrumbSwitchesCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong alignment on RBBreadcrumbSwitchesCoordinator_OnInteractibleAddedToWorld");
static_assert(sizeof(RBBreadcrumbSwitchesCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong size on RBBreadcrumbSwitchesCoordinator_OnInteractibleAddedToWorld");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnInteractibleAddedToWorld, Interactible) == 0x000000, "Member 'RBBreadcrumbSwitchesCoordinator_OnInteractibleAddedToWorld::Interactible' has a wrong offset!");

// Function OPP.RBBreadcrumbSwitchesCoordinator.OnLargeObjectInteractionDoAction
// 0x0018 (0x0018 - 0x0000)
struct RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction final
{
public:
	class URBLargeObjectInteractionPanelComponent* LargeObjectPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Interactor;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction) == 0x000008, "Wrong alignment on RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction");
static_assert(sizeof(RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction) == 0x000018, "Wrong size on RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction, LargeObjectPanel) == 0x000000, "Member 'RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction::LargeObjectPanel' has a wrong offset!");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction, LargePickup) == 0x000008, "Member 'RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction::LargePickup' has a wrong offset!");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction, Interactor) == 0x000010, "Member 'RBBreadcrumbSwitchesCoordinator_OnLargeObjectInteractionDoAction::Interactor' has a wrong offset!");

// Function OPP.RBBreadcrumbSwitchesCoordinator.OnLargePickupUsed_Server
// 0x0008 (0x0008 - 0x0000)
struct RBBreadcrumbSwitchesCoordinator_OnLargePickupUsed_Server final
{
public:
	class ARBLargePickup*                         Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreadcrumbSwitchesCoordinator_OnLargePickupUsed_Server) == 0x000008, "Wrong alignment on RBBreadcrumbSwitchesCoordinator_OnLargePickupUsed_Server");
static_assert(sizeof(RBBreadcrumbSwitchesCoordinator_OnLargePickupUsed_Server) == 0x000008, "Wrong size on RBBreadcrumbSwitchesCoordinator_OnLargePickupUsed_Server");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnLargePickupUsed_Server, Pickup) == 0x000000, "Member 'RBBreadcrumbSwitchesCoordinator_OnLargePickupUsed_Server::Pickup' has a wrong offset!");

// Function OPP.RBBreadcrumbSwitchesCoordinator.OnLargePickupUsedOnObject
// 0x0018 (0x0018 - 0x0000)
struct RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBLargeObjectInteractionPanelComponent* Interactible;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject) == 0x000008, "Wrong alignment on RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject");
static_assert(sizeof(RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject) == 0x000018, "Wrong size on RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject, Interactor) == 0x000000, "Member 'RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject::Interactor' has a wrong offset!");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject, LargePickup) == 0x000008, "Member 'RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject::LargePickup' has a wrong offset!");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject, Interactible) == 0x000010, "Member 'RBBreadcrumbSwitchesCoordinator_OnLargePickupUsedOnObject::Interactible' has a wrong offset!");

// Function OPP.RBBreadcrumbSwitchesCoordinator.OnPickupHolderChanged
// 0x0010 (0x0010 - 0x0000)
struct RBBreadcrumbSwitchesCoordinator_OnPickupHolderChanged final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreadcrumbSwitchesCoordinator_OnPickupHolderChanged) == 0x000008, "Wrong alignment on RBBreadcrumbSwitchesCoordinator_OnPickupHolderChanged");
static_assert(sizeof(RBBreadcrumbSwitchesCoordinator_OnPickupHolderChanged) == 0x000010, "Wrong size on RBBreadcrumbSwitchesCoordinator_OnPickupHolderChanged");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnPickupHolderChanged, Player) == 0x000000, "Member 'RBBreadcrumbSwitchesCoordinator_OnPickupHolderChanged::Player' has a wrong offset!");
static_assert(offsetof(RBBreadcrumbSwitchesCoordinator_OnPickupHolderChanged, LargePickup) == 0x000008, "Member 'RBBreadcrumbSwitchesCoordinator_OnPickupHolderChanged::LargePickup' has a wrong offset!");

// Function OPP.RBBreakableObstacle.BrokenChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBBreakableObstacle_BrokenChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableObstacle_BrokenChangedCallback) == 0x000001, "Wrong alignment on RBBreakableObstacle_BrokenChangedCallback");
static_assert(sizeof(RBBreakableObstacle_BrokenChangedCallback) == 0x000001, "Wrong size on RBBreakableObstacle_BrokenChangedCallback");
static_assert(offsetof(RBBreakableObstacle_BrokenChangedCallback, ChangedType) == 0x000000, "Member 'RBBreakableObstacle_BrokenChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBBreakableObstacle.Event_OnBreakObject
// 0x0008 (0x0008 - 0x0000)
struct RBBreakableObstacle_Event_OnBreakObject final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableObstacle_Event_OnBreakObject) == 0x000008, "Wrong alignment on RBBreakableObstacle_Event_OnBreakObject");
static_assert(sizeof(RBBreakableObstacle_Event_OnBreakObject) == 0x000008, "Wrong size on RBBreakableObstacle_Event_OnBreakObject");
static_assert(offsetof(RBBreakableObstacle_Event_OnBreakObject, SourceActor) == 0x000000, "Member 'RBBreakableObstacle_Event_OnBreakObject::SourceActor' has a wrong offset!");

// Function OPP.RBBreakableObstacle.OnBreak
// 0x0008 (0x0008 - 0x0000)
struct RBBreakableObstacle_OnBreak final
{
public:
	class URBDamageableComponent*                 DamageComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableObstacle_OnBreak) == 0x000008, "Wrong alignment on RBBreakableObstacle_OnBreak");
static_assert(sizeof(RBBreakableObstacle_OnBreak) == 0x000008, "Wrong size on RBBreakableObstacle_OnBreak");
static_assert(offsetof(RBBreakableObstacle_OnBreak, DamageComponent) == 0x000000, "Member 'RBBreakableObstacle_OnBreak::DamageComponent' has a wrong offset!");

// Function OPP.RBBreakableObstacle.BP_IsActive
// 0x0001 (0x0001 - 0x0000)
struct RBBreakableObstacle_BP_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableObstacle_BP_IsActive) == 0x000001, "Wrong alignment on RBBreakableObstacle_BP_IsActive");
static_assert(sizeof(RBBreakableObstacle_BP_IsActive) == 0x000001, "Wrong size on RBBreakableObstacle_BP_IsActive");
static_assert(offsetof(RBBreakableObstacle_BP_IsActive, ReturnValue) == 0x000000, "Member 'RBBreakableObstacle_BP_IsActive::ReturnValue' has a wrong offset!");

// Function OPP.RBBreakableObstacle.BP_IsBroken
// 0x0001 (0x0001 - 0x0000)
struct RBBreakableObstacle_BP_IsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableObstacle_BP_IsBroken) == 0x000001, "Wrong alignment on RBBreakableObstacle_BP_IsBroken");
static_assert(sizeof(RBBreakableObstacle_BP_IsBroken) == 0x000001, "Wrong size on RBBreakableObstacle_BP_IsBroken");
static_assert(offsetof(RBBreakableObstacle_BP_IsBroken, ReturnValue) == 0x000000, "Member 'RBBreakableObstacle_BP_IsBroken::ReturnValue' has a wrong offset!");

// Function OPP.RBBreakableObstacle.IsBlocked
// 0x0001 (0x0001 - 0x0000)
struct RBBreakableObstacle_IsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableObstacle_IsBlocked) == 0x000001, "Wrong alignment on RBBreakableObstacle_IsBlocked");
static_assert(sizeof(RBBreakableObstacle_IsBlocked) == 0x000001, "Wrong size on RBBreakableObstacle_IsBlocked");
static_assert(offsetof(RBBreakableObstacle_IsBlocked, ReturnValue) == 0x000000, "Member 'RBBreakableObstacle_IsBlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBBreakableWindowReplaceableClass.OnReplacedWindow
// 0x0008 (0x0008 - 0x0000)
struct RBBreakableWindowReplaceableClass_OnReplacedWindow final
{
public:
	class ARBBreakableWindow*                     Window;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableWindowReplaceableClass_OnReplacedWindow) == 0x000008, "Wrong alignment on RBBreakableWindowReplaceableClass_OnReplacedWindow");
static_assert(sizeof(RBBreakableWindowReplaceableClass_OnReplacedWindow) == 0x000008, "Wrong size on RBBreakableWindowReplaceableClass_OnReplacedWindow");
static_assert(offsetof(RBBreakableWindowReplaceableClass_OnReplacedWindow, Window) == 0x000000, "Member 'RBBreakableWindowReplaceableClass_OnReplacedWindow::Window' has a wrong offset!");

// Function OPP.RBBreakableWindow.BP_ForceBlockableState
// 0x0001 (0x0001 - 0x0000)
struct RBBreakableWindow_BP_ForceBlockableState final
{
public:
	EBlockableState                               InBlockableState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableWindow_BP_ForceBlockableState) == 0x000001, "Wrong alignment on RBBreakableWindow_BP_ForceBlockableState");
static_assert(sizeof(RBBreakableWindow_BP_ForceBlockableState) == 0x000001, "Wrong size on RBBreakableWindow_BP_ForceBlockableState");
static_assert(offsetof(RBBreakableWindow_BP_ForceBlockableState, InBlockableState) == 0x000000, "Member 'RBBreakableWindow_BP_ForceBlockableState::InBlockableState' has a wrong offset!");

// Function OPP.RBBreakableWindow.OnLinkedShutterStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBBreakableWindow_OnLinkedShutterStateChanged final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         Triggerable;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableWindow_OnLinkedShutterStateChanged) == 0x000008, "Wrong alignment on RBBreakableWindow_OnLinkedShutterStateChanged");
static_assert(sizeof(RBBreakableWindow_OnLinkedShutterStateChanged) == 0x000010, "Wrong size on RBBreakableWindow_OnLinkedShutterStateChanged");
static_assert(offsetof(RBBreakableWindow_OnLinkedShutterStateChanged, IsOn) == 0x000000, "Member 'RBBreakableWindow_OnLinkedShutterStateChanged::IsOn' has a wrong offset!");
static_assert(offsetof(RBBreakableWindow_OnLinkedShutterStateChanged, Triggerable) == 0x000008, "Member 'RBBreakableWindow_OnLinkedShutterStateChanged::Triggerable' has a wrong offset!");

// Function OPP.RBBreakableWindow.GetBlockableState
// 0x0001 (0x0001 - 0x0000)
struct RBBreakableWindow_GetBlockableState final
{
public:
	EBlockableState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakableWindow_GetBlockableState) == 0x000001, "Wrong alignment on RBBreakableWindow_GetBlockableState");
static_assert(sizeof(RBBreakableWindow_GetBlockableState) == 0x000001, "Wrong size on RBBreakableWindow_GetBlockableState");
static_assert(offsetof(RBBreakableWindow_GetBlockableState, ReturnValue) == 0x000000, "Member 'RBBreakableWindow_GetBlockableState::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.IsExperimentStarted
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_IsExperimentStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_IsExperimentStarted) == 0x000001, "Wrong alignment on RBGameState_IsExperimentStarted");
static_assert(sizeof(RBGameState_IsExperimentStarted) == 0x000001, "Wrong size on RBGameState_IsExperimentStarted");
static_assert(offsetof(RBGameState_IsExperimentStarted, ReturnValue) == 0x000000, "Member 'RBGameState_IsExperimentStarted::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.IsStagePrepared
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_IsStagePrepared final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_IsStagePrepared) == 0x000001, "Wrong alignment on RBGameState_IsStagePrepared");
static_assert(sizeof(RBGameState_IsStagePrepared) == 0x000001, "Wrong size on RBGameState_IsStagePrepared");
static_assert(offsetof(RBGameState_IsStagePrepared, ReturnValue) == 0x000000, "Member 'RBGameState_IsStagePrepared::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.IsStageReady
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_IsStageReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_IsStageReady) == 0x000001, "Wrong alignment on RBGameState_IsStageReady");
static_assert(sizeof(RBGameState_IsStageReady) == 0x000001, "Wrong size on RBGameState_IsStageReady");
static_assert(offsetof(RBGameState_IsStageReady, ReturnValue) == 0x000000, "Member 'RBGameState_IsStageReady::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.IsStageStarted
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_IsStageStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_IsStageStarted) == 0x000001, "Wrong alignment on RBGameState_IsStageStarted");
static_assert(sizeof(RBGameState_IsStageStarted) == 0x000001, "Wrong size on RBGameState_IsStageStarted");
static_assert(offsetof(RBGameState_IsStageStarted, ReturnValue) == 0x000000, "Member 'RBGameState_IsStageStarted::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.Multicast_ApplyStageReset
// 0x0010 (0x0010 - 0x0000)
struct RBGameState_Multicast_ApplyStageReset final
{
public:
	TArray<class FString>                         StageLevels;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_Multicast_ApplyStageReset) == 0x000008, "Wrong alignment on RBGameState_Multicast_ApplyStageReset");
static_assert(sizeof(RBGameState_Multicast_ApplyStageReset) == 0x000010, "Wrong size on RBGameState_Multicast_ApplyStageReset");
static_assert(offsetof(RBGameState_Multicast_ApplyStageReset, StageLevels) == 0x000000, "Member 'RBGameState_Multicast_ApplyStageReset::StageLevels' has a wrong offset!");

// Function OPP.RBGameState.Multicast_ScareStinger
// 0x0020 (0x0020 - 0x0000)
struct RBGameState_Multicast_ScareStinger final
{
public:
	class AActor*                                 ScareActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          StingerEvent;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_Multicast_ScareStinger) == 0x000008, "Wrong alignment on RBGameState_Multicast_ScareStinger");
static_assert(sizeof(RBGameState_Multicast_ScareStinger) == 0x000020, "Wrong size on RBGameState_Multicast_ScareStinger");
static_assert(offsetof(RBGameState_Multicast_ScareStinger, ScareActor) == 0x000000, "Member 'RBGameState_Multicast_ScareStinger::ScareActor' has a wrong offset!");
static_assert(offsetof(RBGameState_Multicast_ScareStinger, StingerEvent) == 0x000008, "Member 'RBGameState_Multicast_ScareStinger::StingerEvent' has a wrong offset!");
static_assert(offsetof(RBGameState_Multicast_ScareStinger, Location) == 0x000010, "Member 'RBGameState_Multicast_ScareStinger::Location' has a wrong offset!");
static_assert(offsetof(RBGameState_Multicast_ScareStinger, Range) == 0x00001C, "Member 'RBGameState_Multicast_ScareStinger::Range' has a wrong offset!");

// Function OPP.RBGameState.OnRep_CurrentSAS
// 0x0008 (0x0008 - 0x0000)
struct RBGameState_OnRep_CurrentSAS final
{
public:
	class ARBSAS*                                 OldSASValue;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_OnRep_CurrentSAS) == 0x000008, "Wrong alignment on RBGameState_OnRep_CurrentSAS");
static_assert(sizeof(RBGameState_OnRep_CurrentSAS) == 0x000008, "Wrong size on RBGameState_OnRep_CurrentSAS");
static_assert(offsetof(RBGameState_OnRep_CurrentSAS, OldSASValue) == 0x000000, "Member 'RBGameState_OnRep_CurrentSAS::OldSASValue' has a wrong offset!");

// Function OPP.RBGameState.WaitingForPlayers
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_WaitingForPlayers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_WaitingForPlayers) == 0x000001, "Wrong alignment on RBGameState_WaitingForPlayers");
static_assert(sizeof(RBGameState_WaitingForPlayers) == 0x000001, "Wrong size on RBGameState_WaitingForPlayers");
static_assert(offsetof(RBGameState_WaitingForPlayers, ReturnValue) == 0x000000, "Member 'RBGameState_WaitingForPlayers::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.GetBombTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct RBGameState_GetBombTimeLeft final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_GetBombTimeLeft) == 0x000004, "Wrong alignment on RBGameState_GetBombTimeLeft");
static_assert(sizeof(RBGameState_GetBombTimeLeft) == 0x000004, "Wrong size on RBGameState_GetBombTimeLeft");
static_assert(offsetof(RBGameState_GetBombTimeLeft, ReturnValue) == 0x000000, "Member 'RBGameState_GetBombTimeLeft::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.GetGameStageInfo
// 0x0068 (0x0068 - 0x0000)
struct RBGameState_GetGameStageInfo final
{
public:
	struct FRBGameStageInfo                       ReturnValue;                                       // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_GetGameStageInfo) == 0x000008, "Wrong alignment on RBGameState_GetGameStageInfo");
static_assert(sizeof(RBGameState_GetGameStageInfo) == 0x000068, "Wrong size on RBGameState_GetGameStageInfo");
static_assert(offsetof(RBGameState_GetGameStageInfo, ReturnValue) == 0x000000, "Member 'RBGameState_GetGameStageInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.GetMissionID
// 0x0028 (0x0028 - 0x0000)
struct RBGameState_GetMissionID final
{
public:
	struct FRBMissionID                           ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_GetMissionID) == 0x000008, "Wrong alignment on RBGameState_GetMissionID");
static_assert(sizeof(RBGameState_GetMissionID) == 0x000028, "Wrong size on RBGameState_GetMissionID");
static_assert(offsetof(RBGameState_GetMissionID, ReturnValue) == 0x000000, "Member 'RBGameState_GetMissionID::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.GetStageID
// 0x0028 (0x0028 - 0x0000)
struct RBGameState_GetStageID final
{
public:
	struct FRBStageID                             ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_GetStageID) == 0x000008, "Wrong alignment on RBGameState_GetStageID");
static_assert(sizeof(RBGameState_GetStageID) == 0x000028, "Wrong size on RBGameState_GetStageID");
static_assert(offsetof(RBGameState_GetStageID, ReturnValue) == 0x000000, "Member 'RBGameState_GetStageID::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.GetTrialId
// 0x0008 (0x0008 - 0x0000)
struct RBGameState_GetTrialId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_GetTrialId) == 0x000004, "Wrong alignment on RBGameState_GetTrialId");
static_assert(sizeof(RBGameState_GetTrialId) == 0x000008, "Wrong size on RBGameState_GetTrialId");
static_assert(offsetof(RBGameState_GetTrialId, ReturnValue) == 0x000000, "Member 'RBGameState_GetTrialId::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.IsDrugSequenceCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_IsDrugSequenceCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_IsDrugSequenceCompleted) == 0x000001, "Wrong alignment on RBGameState_IsDrugSequenceCompleted");
static_assert(sizeof(RBGameState_IsDrugSequenceCompleted) == 0x000001, "Wrong size on RBGameState_IsDrugSequenceCompleted");
static_assert(offsetof(RBGameState_IsDrugSequenceCompleted, ReturnValue) == 0x000000, "Member 'RBGameState_IsDrugSequenceCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.IsEndOfStageDamageStarted
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_IsEndOfStageDamageStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_IsEndOfStageDamageStarted) == 0x000001, "Wrong alignment on RBGameState_IsEndOfStageDamageStarted");
static_assert(sizeof(RBGameState_IsEndOfStageDamageStarted) == 0x000001, "Wrong size on RBGameState_IsEndOfStageDamageStarted");
static_assert(offsetof(RBGameState_IsEndOfStageDamageStarted, ReturnValue) == 0x000000, "Member 'RBGameState_IsEndOfStageDamageStarted::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.IsExperimentCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_IsExperimentCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_IsExperimentCompleted) == 0x000001, "Wrong alignment on RBGameState_IsExperimentCompleted");
static_assert(sizeof(RBGameState_IsExperimentCompleted) == 0x000001, "Wrong size on RBGameState_IsExperimentCompleted");
static_assert(offsetof(RBGameState_IsExperimentCompleted, ReturnValue) == 0x000000, "Member 'RBGameState_IsExperimentCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.IsExperimentSuccess
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_IsExperimentSuccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_IsExperimentSuccess) == 0x000001, "Wrong alignment on RBGameState_IsExperimentSuccess");
static_assert(sizeof(RBGameState_IsExperimentSuccess) == 0x000001, "Wrong size on RBGameState_IsExperimentSuccess");
static_assert(offsetof(RBGameState_IsExperimentSuccess, ReturnValue) == 0x000000, "Member 'RBGameState_IsExperimentSuccess::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.IsSoloGame
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_IsSoloGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_IsSoloGame) == 0x000001, "Wrong alignment on RBGameState_IsSoloGame");
static_assert(sizeof(RBGameState_IsSoloGame) == 0x000001, "Wrong size on RBGameState_IsSoloGame");
static_assert(offsetof(RBGameState_IsSoloGame, ReturnValue) == 0x000000, "Member 'RBGameState_IsSoloGame::ReturnValue' has a wrong offset!");

// Function OPP.RBGameState.WasResetTimerSkipped
// 0x0001 (0x0001 - 0x0000)
struct RBGameState_WasResetTimerSkipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameState_WasResetTimerSkipped) == 0x000001, "Wrong alignment on RBGameState_WasResetTimerSkipped");
static_assert(sizeof(RBGameState_WasResetTimerSkipped) == 0x000001, "Wrong size on RBGameState_WasResetTimerSkipped");
static_assert(offsetof(RBGameState_WasResetTimerSkipped, ReturnValue) == 0x000000, "Member 'RBGameState_WasResetTimerSkipped::ReturnValue' has a wrong offset!");

// Function OPP.RBTutorialManager.OnObjectiveCoordinatorStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBTutorialManager_OnObjectiveCoordinatorStateChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveCoordinatorState                    State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTutorialManager_OnObjectiveCoordinatorStateChanged) == 0x000008, "Wrong alignment on RBTutorialManager_OnObjectiveCoordinatorStateChanged");
static_assert(sizeof(RBTutorialManager_OnObjectiveCoordinatorStateChanged) == 0x000010, "Wrong size on RBTutorialManager_OnObjectiveCoordinatorStateChanged");
static_assert(offsetof(RBTutorialManager_OnObjectiveCoordinatorStateChanged, Coordinator) == 0x000000, "Member 'RBTutorialManager_OnObjectiveCoordinatorStateChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(RBTutorialManager_OnObjectiveCoordinatorStateChanged, State) == 0x000008, "Member 'RBTutorialManager_OnObjectiveCoordinatorStateChanged::State' has a wrong offset!");

// Function OPP.RBTutorialManager.OnPlayerRevived
// 0x0010 (0x0010 - 0x0000)
struct RBTutorialManager_OnPlayerRevived final
{
public:
	class ARBPlayer*                              InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              SubjectActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTutorialManager_OnPlayerRevived) == 0x000008, "Wrong alignment on RBTutorialManager_OnPlayerRevived");
static_assert(sizeof(RBTutorialManager_OnPlayerRevived) == 0x000010, "Wrong size on RBTutorialManager_OnPlayerRevived");
static_assert(offsetof(RBTutorialManager_OnPlayerRevived, InstigatorActor) == 0x000000, "Member 'RBTutorialManager_OnPlayerRevived::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBTutorialManager_OnPlayerRevived, SubjectActor) == 0x000008, "Member 'RBTutorialManager_OnPlayerRevived::SubjectActor' has a wrong offset!");

// Function OPP.RBBreakActorsCoordinator.Multicast_OnBreakableDestroyed
// 0x0010 (0x0010 - 0x0000)
struct RBBreakActorsCoordinator_Multicast_OnBreakableDestroyed final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 breakable;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakActorsCoordinator_Multicast_OnBreakableDestroyed) == 0x000008, "Wrong alignment on RBBreakActorsCoordinator_Multicast_OnBreakableDestroyed");
static_assert(sizeof(RBBreakActorsCoordinator_Multicast_OnBreakableDestroyed) == 0x000010, "Wrong size on RBBreakActorsCoordinator_Multicast_OnBreakableDestroyed");
static_assert(offsetof(RBBreakActorsCoordinator_Multicast_OnBreakableDestroyed, Player) == 0x000000, "Member 'RBBreakActorsCoordinator_Multicast_OnBreakableDestroyed::Player' has a wrong offset!");
static_assert(offsetof(RBBreakActorsCoordinator_Multicast_OnBreakableDestroyed, breakable) == 0x000008, "Member 'RBBreakActorsCoordinator_Multicast_OnBreakableDestroyed::breakable' has a wrong offset!");

// Function OPP.RBBreakActorsCoordinator.OnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct RBBreakActorsCoordinator_OnDestroyed final
{
public:
	class URBDamageableComponent*                 DamageableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBBreakActorsCoordinator_OnDestroyed) == 0x000008, "Wrong alignment on RBBreakActorsCoordinator_OnDestroyed");
static_assert(sizeof(RBBreakActorsCoordinator_OnDestroyed) == 0x000008, "Wrong size on RBBreakActorsCoordinator_OnDestroyed");
static_assert(offsetof(RBBreakActorsCoordinator_OnDestroyed, DamageableComponent) == 0x000000, "Member 'RBBreakActorsCoordinator_OnDestroyed::DamageableComponent' has a wrong offset!");

// Function OPP.RBLargePickup.BP_OnTrapTriggered
// 0x0001 (0x0001 - 0x0000)
struct RBLargePickup_BP_OnTrapTriggered final
{
public:
	bool                                          bPsychosis;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_BP_OnTrapTriggered) == 0x000001, "Wrong alignment on RBLargePickup_BP_OnTrapTriggered");
static_assert(sizeof(RBLargePickup_BP_OnTrapTriggered) == 0x000001, "Wrong size on RBLargePickup_BP_OnTrapTriggered");
static_assert(offsetof(RBLargePickup_BP_OnTrapTriggered, bPsychosis) == 0x000000, "Member 'RBLargePickup_BP_OnTrapTriggered::bPsychosis' has a wrong offset!");

// Function OPP.RBLargePickup.BP_PlaySequence
// 0x0008 (0x0008 - 0x0000)
struct RBLargePickup_BP_PlaySequence final
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_BP_PlaySequence) == 0x000008, "Wrong alignment on RBLargePickup_BP_PlaySequence");
static_assert(sizeof(RBLargePickup_BP_PlaySequence) == 0x000008, "Wrong size on RBLargePickup_BP_PlaySequence");
static_assert(offsetof(RBLargePickup_BP_PlaySequence, Sequence) == 0x000000, "Member 'RBLargePickup_BP_PlaySequence::Sequence' has a wrong offset!");

// Function OPP.RBLargePickup.BP_SetDesiredTransform
// 0x0040 (0x0040 - 0x0000)
struct RBLargePickup_BP_SetDesiredTransform final
{
public:
	struct FTransform                             DesiredTransform;                                  // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EFA[0xC];                                     // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLargePickup_BP_SetDesiredTransform) == 0x000010, "Wrong alignment on RBLargePickup_BP_SetDesiredTransform");
static_assert(sizeof(RBLargePickup_BP_SetDesiredTransform) == 0x000040, "Wrong size on RBLargePickup_BP_SetDesiredTransform");
static_assert(offsetof(RBLargePickup_BP_SetDesiredTransform, DesiredTransform) == 0x000000, "Member 'RBLargePickup_BP_SetDesiredTransform::DesiredTransform' has a wrong offset!");
static_assert(offsetof(RBLargePickup_BP_SetDesiredTransform, Delay) == 0x000030, "Member 'RBLargePickup_BP_SetDesiredTransform::Delay' has a wrong offset!");

// Function OPP.RBLargePickup.Event_OnUsedOnInteractible
// 0x0010 (0x0010 - 0x0000)
struct RBLargePickup_Event_OnUsedOnInteractible final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBLargeObjectInteractionPanelComponent* Interactible;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_Event_OnUsedOnInteractible) == 0x000008, "Wrong alignment on RBLargePickup_Event_OnUsedOnInteractible");
static_assert(sizeof(RBLargePickup_Event_OnUsedOnInteractible) == 0x000010, "Wrong size on RBLargePickup_Event_OnUsedOnInteractible");
static_assert(offsetof(RBLargePickup_Event_OnUsedOnInteractible, Interactor) == 0x000000, "Member 'RBLargePickup_Event_OnUsedOnInteractible::Interactor' has a wrong offset!");
static_assert(offsetof(RBLargePickup_Event_OnUsedOnInteractible, Interactible) == 0x000008, "Member 'RBLargePickup_Event_OnUsedOnInteractible::Interactible' has a wrong offset!");

// Function OPP.RBLargePickup.Multicast_TriggerTrap
// 0x0001 (0x0001 - 0x0000)
struct RBLargePickup_Multicast_TriggerTrap final
{
public:
	bool                                          bPsychosis;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_Multicast_TriggerTrap) == 0x000001, "Wrong alignment on RBLargePickup_Multicast_TriggerTrap");
static_assert(sizeof(RBLargePickup_Multicast_TriggerTrap) == 0x000001, "Wrong size on RBLargePickup_Multicast_TriggerTrap");
static_assert(offsetof(RBLargePickup_Multicast_TriggerTrap, bPsychosis) == 0x000000, "Member 'RBLargePickup_Multicast_TriggerTrap::bPsychosis' has a wrong offset!");

// Function OPP.RBLargePickup.OnHoldingPawnChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBLargePickup_OnHoldingPawnChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_OnHoldingPawnChangedCallback) == 0x000001, "Wrong alignment on RBLargePickup_OnHoldingPawnChangedCallback");
static_assert(sizeof(RBLargePickup_OnHoldingPawnChangedCallback) == 0x000001, "Wrong size on RBLargePickup_OnHoldingPawnChangedCallback");
static_assert(offsetof(RBLargePickup_OnHoldingPawnChangedCallback, ChangedType) == 0x000000, "Member 'RBLargePickup_OnHoldingPawnChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBLargePickup.OnPickupTransformChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBLargePickup_OnPickupTransformChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_OnPickupTransformChangedCallback) == 0x000001, "Wrong alignment on RBLargePickup_OnPickupTransformChangedCallback");
static_assert(sizeof(RBLargePickup_OnPickupTransformChangedCallback) == 0x000001, "Wrong size on RBLargePickup_OnPickupTransformChangedCallback");
static_assert(offsetof(RBLargePickup_OnPickupTransformChangedCallback, ChangedType) == 0x000000, "Member 'RBLargePickup_OnPickupTransformChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBLargePickup.OnUsedOnObjectChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBLargePickup_OnUsedOnObjectChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_OnUsedOnObjectChangedCallback) == 0x000001, "Wrong alignment on RBLargePickup_OnUsedOnObjectChangedCallback");
static_assert(sizeof(RBLargePickup_OnUsedOnObjectChangedCallback) == 0x000001, "Wrong size on RBLargePickup_OnUsedOnObjectChangedCallback");
static_assert(offsetof(RBLargePickup_OnUsedOnObjectChangedCallback, ChangedType) == 0x000000, "Member 'RBLargePickup_OnUsedOnObjectChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBLargePickup.BP_ShouldPlayAnimAfterAdjustPosition
// 0x0010 (0x0010 - 0x0000)
struct RBLargePickup_BP_ShouldPlayAnimAfterAdjustPosition final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EFB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLargePickup_BP_ShouldPlayAnimAfterAdjustPosition) == 0x000008, "Wrong alignment on RBLargePickup_BP_ShouldPlayAnimAfterAdjustPosition");
static_assert(sizeof(RBLargePickup_BP_ShouldPlayAnimAfterAdjustPosition) == 0x000010, "Wrong size on RBLargePickup_BP_ShouldPlayAnimAfterAdjustPosition");
static_assert(offsetof(RBLargePickup_BP_ShouldPlayAnimAfterAdjustPosition, Pawn) == 0x000000, "Member 'RBLargePickup_BP_ShouldPlayAnimAfterAdjustPosition::Pawn' has a wrong offset!");
static_assert(offsetof(RBLargePickup_BP_ShouldPlayAnimAfterAdjustPosition, ReturnValue) == 0x000008, "Member 'RBLargePickup_BP_ShouldPlayAnimAfterAdjustPosition::ReturnValue' has a wrong offset!");

// Function OPP.RBLargePickup.GetCustomDropInteractionText
// 0x0028 (0x0028 - 0x0000)
struct RBLargePickup_GetCustomDropInteractionText final
{
public:
	const class ARBPlayer*                        Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Out_CustomInteractionText;                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EFC[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLargePickup_GetCustomDropInteractionText) == 0x000008, "Wrong alignment on RBLargePickup_GetCustomDropInteractionText");
static_assert(sizeof(RBLargePickup_GetCustomDropInteractionText) == 0x000028, "Wrong size on RBLargePickup_GetCustomDropInteractionText");
static_assert(offsetof(RBLargePickup_GetCustomDropInteractionText, Player) == 0x000000, "Member 'RBLargePickup_GetCustomDropInteractionText::Player' has a wrong offset!");
static_assert(offsetof(RBLargePickup_GetCustomDropInteractionText, Out_CustomInteractionText) == 0x000008, "Member 'RBLargePickup_GetCustomDropInteractionText::Out_CustomInteractionText' has a wrong offset!");
static_assert(offsetof(RBLargePickup_GetCustomDropInteractionText, ReturnValue) == 0x000020, "Member 'RBLargePickup_GetCustomDropInteractionText::ReturnValue' has a wrong offset!");

// Function OPP.RBLargePickup.GetCustomPickupInteractionText
// 0x0028 (0x0028 - 0x0000)
struct RBLargePickup_GetCustomPickupInteractionText final
{
public:
	const class ARBPlayer*                        Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Out_CustomInteractionText;                         // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EFD[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLargePickup_GetCustomPickupInteractionText) == 0x000008, "Wrong alignment on RBLargePickup_GetCustomPickupInteractionText");
static_assert(sizeof(RBLargePickup_GetCustomPickupInteractionText) == 0x000028, "Wrong size on RBLargePickup_GetCustomPickupInteractionText");
static_assert(offsetof(RBLargePickup_GetCustomPickupInteractionText, Player) == 0x000000, "Member 'RBLargePickup_GetCustomPickupInteractionText::Player' has a wrong offset!");
static_assert(offsetof(RBLargePickup_GetCustomPickupInteractionText, Out_CustomInteractionText) == 0x000008, "Member 'RBLargePickup_GetCustomPickupInteractionText::Out_CustomInteractionText' has a wrong offset!");
static_assert(offsetof(RBLargePickup_GetCustomPickupInteractionText, ReturnValue) == 0x000020, "Member 'RBLargePickup_GetCustomPickupInteractionText::ReturnValue' has a wrong offset!");

// Function OPP.RBLargePickup.GetHoldingPawn
// 0x0008 (0x0008 - 0x0000)
struct RBLargePickup_GetHoldingPawn final
{
public:
	class ARBPawn*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_GetHoldingPawn) == 0x000008, "Wrong alignment on RBLargePickup_GetHoldingPawn");
static_assert(sizeof(RBLargePickup_GetHoldingPawn) == 0x000008, "Wrong size on RBLargePickup_GetHoldingPawn");
static_assert(offsetof(RBLargePickup_GetHoldingPawn, ReturnValue) == 0x000000, "Member 'RBLargePickup_GetHoldingPawn::ReturnValue' has a wrong offset!");

// Function OPP.RBLargePickup.GetHoldingPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBLargePickup_GetHoldingPlayer final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_GetHoldingPlayer) == 0x000008, "Wrong alignment on RBLargePickup_GetHoldingPlayer");
static_assert(sizeof(RBLargePickup_GetHoldingPlayer) == 0x000008, "Wrong size on RBLargePickup_GetHoldingPlayer");
static_assert(offsetof(RBLargePickup_GetHoldingPlayer, ReturnValue) == 0x000000, "Member 'RBLargePickup_GetHoldingPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBLargePickup.GetUsedOnObject
// 0x0008 (0x0008 - 0x0000)
struct RBLargePickup_GetUsedOnObject final
{
public:
	class URBLargeObjectInteractionPanelComponent* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_GetUsedOnObject) == 0x000008, "Wrong alignment on RBLargePickup_GetUsedOnObject");
static_assert(sizeof(RBLargePickup_GetUsedOnObject) == 0x000008, "Wrong size on RBLargePickup_GetUsedOnObject");
static_assert(offsetof(RBLargePickup_GetUsedOnObject, ReturnValue) == 0x000000, "Member 'RBLargePickup_GetUsedOnObject::ReturnValue' has a wrong offset!");

// Function OPP.RBLargePickup.IsConsideredActiveForObjective
// 0x0001 (0x0001 - 0x0000)
struct RBLargePickup_IsConsideredActiveForObjective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_IsConsideredActiveForObjective) == 0x000001, "Wrong alignment on RBLargePickup_IsConsideredActiveForObjective");
static_assert(sizeof(RBLargePickup_IsConsideredActiveForObjective) == 0x000001, "Wrong size on RBLargePickup_IsConsideredActiveForObjective");
static_assert(offsetof(RBLargePickup_IsConsideredActiveForObjective, ReturnValue) == 0x000000, "Member 'RBLargePickup_IsConsideredActiveForObjective::ReturnValue' has a wrong offset!");

// Function OPP.RBLargePickup.IsUsable
// 0x0001 (0x0001 - 0x0000)
struct RBLargePickup_IsUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_IsUsable) == 0x000001, "Wrong alignment on RBLargePickup_IsUsable");
static_assert(sizeof(RBLargePickup_IsUsable) == 0x000001, "Wrong size on RBLargePickup_IsUsable");
static_assert(offsetof(RBLargePickup_IsUsable, ReturnValue) == 0x000000, "Member 'RBLargePickup_IsUsable::ReturnValue' has a wrong offset!");

// Function OPP.RBLargePickup.IsUsedOnObject
// 0x0001 (0x0001 - 0x0000)
struct RBLargePickup_IsUsedOnObject final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_IsUsedOnObject) == 0x000001, "Wrong alignment on RBLargePickup_IsUsedOnObject");
static_assert(sizeof(RBLargePickup_IsUsedOnObject) == 0x000001, "Wrong size on RBLargePickup_IsUsedOnObject");
static_assert(offsetof(RBLargePickup_IsUsedOnObject, ReturnValue) == 0x000000, "Member 'RBLargePickup_IsUsedOnObject::ReturnValue' has a wrong offset!");

// Function OPP.RBLargePickup.ShouldBPTick
// 0x0001 (0x0001 - 0x0000)
struct RBLargePickup_ShouldBPTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargePickup_ShouldBPTick) == 0x000001, "Wrong alignment on RBLargePickup_ShouldBPTick");
static_assert(sizeof(RBLargePickup_ShouldBPTick) == 0x000001, "Wrong size on RBLargePickup_ShouldBPTick");
static_assert(offsetof(RBLargePickup_ShouldBPTick, ReturnValue) == 0x000000, "Member 'RBLargePickup_ShouldBPTick::ReturnValue' has a wrong offset!");

// Function OPP.RBHotPotato.Event_OnIsDamageTimerActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHotPotato_Event_OnIsDamageTimerActiveChanged final
{
public:
	bool                                          IsDamageTimerActive;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotato_Event_OnIsDamageTimerActiveChanged) == 0x000001, "Wrong alignment on RBHotPotato_Event_OnIsDamageTimerActiveChanged");
static_assert(sizeof(RBHotPotato_Event_OnIsDamageTimerActiveChanged) == 0x000001, "Wrong size on RBHotPotato_Event_OnIsDamageTimerActiveChanged");
static_assert(offsetof(RBHotPotato_Event_OnIsDamageTimerActiveChanged, IsDamageTimerActive) == 0x000000, "Member 'RBHotPotato_Event_OnIsDamageTimerActiveChanged::IsDamageTimerActive' has a wrong offset!");

// Function OPP.RBHotPotato.Event_OnObjectiveProgressChanged
// 0x0008 (0x0008 - 0x0000)
struct RBHotPotato_Event_OnObjectiveProgressChanged final
{
public:
	float                                         NewProgress;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldProgress;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotato_Event_OnObjectiveProgressChanged) == 0x000004, "Wrong alignment on RBHotPotato_Event_OnObjectiveProgressChanged");
static_assert(sizeof(RBHotPotato_Event_OnObjectiveProgressChanged) == 0x000008, "Wrong size on RBHotPotato_Event_OnObjectiveProgressChanged");
static_assert(offsetof(RBHotPotato_Event_OnObjectiveProgressChanged, NewProgress) == 0x000000, "Member 'RBHotPotato_Event_OnObjectiveProgressChanged::NewProgress' has a wrong offset!");
static_assert(offsetof(RBHotPotato_Event_OnObjectiveProgressChanged, OldProgress) == 0x000004, "Member 'RBHotPotato_Event_OnObjectiveProgressChanged::OldProgress' has a wrong offset!");

// Function OPP.RBHotPotato.Event_OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHotPotato_Event_OnStateChanged final
{
public:
	EHotPotatoState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotato_Event_OnStateChanged) == 0x000001, "Wrong alignment on RBHotPotato_Event_OnStateChanged");
static_assert(sizeof(RBHotPotato_Event_OnStateChanged) == 0x000001, "Wrong size on RBHotPotato_Event_OnStateChanged");
static_assert(offsetof(RBHotPotato_Event_OnStateChanged, NewState) == 0x000000, "Member 'RBHotPotato_Event_OnStateChanged::NewState' has a wrong offset!");

// Function OPP.RBHotPotato.OnRep_ObjectiveProgress
// 0x0004 (0x0004 - 0x0000)
struct RBHotPotato_OnRep_ObjectiveProgress final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotato_OnRep_ObjectiveProgress) == 0x000004, "Wrong alignment on RBHotPotato_OnRep_ObjectiveProgress");
static_assert(sizeof(RBHotPotato_OnRep_ObjectiveProgress) == 0x000004, "Wrong size on RBHotPotato_OnRep_ObjectiveProgress");
static_assert(offsetof(RBHotPotato_OnRep_ObjectiveProgress, OldValue) == 0x000000, "Member 'RBHotPotato_OnRep_ObjectiveProgress::OldValue' has a wrong offset!");

// Function OPP.RBHotPotato.IsHotPotatoActivated
// 0x0001 (0x0001 - 0x0000)
struct RBHotPotato_IsHotPotatoActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotato_IsHotPotatoActivated) == 0x000001, "Wrong alignment on RBHotPotato_IsHotPotatoActivated");
static_assert(sizeof(RBHotPotato_IsHotPotatoActivated) == 0x000001, "Wrong size on RBHotPotato_IsHotPotatoActivated");
static_assert(offsetof(RBHotPotato_IsHotPotatoActivated, ReturnValue) == 0x000000, "Member 'RBHotPotato_IsHotPotatoActivated::ReturnValue' has a wrong offset!");

// Function OPP.RBHotPotato.IsHotPotatoCompletedOrExpired
// 0x0001 (0x0001 - 0x0000)
struct RBHotPotato_IsHotPotatoCompletedOrExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotato_IsHotPotatoCompletedOrExpired) == 0x000001, "Wrong alignment on RBHotPotato_IsHotPotatoCompletedOrExpired");
static_assert(sizeof(RBHotPotato_IsHotPotatoCompletedOrExpired) == 0x000001, "Wrong size on RBHotPotato_IsHotPotatoCompletedOrExpired");
static_assert(offsetof(RBHotPotato_IsHotPotatoCompletedOrExpired, ReturnValue) == 0x000000, "Member 'RBHotPotato_IsHotPotatoCompletedOrExpired::ReturnValue' has a wrong offset!");

// Function OPP.RBHotPotato.IsHotPotatoEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBHotPotato_IsHotPotatoEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotato_IsHotPotatoEnabled) == 0x000001, "Wrong alignment on RBHotPotato_IsHotPotatoEnabled");
static_assert(sizeof(RBHotPotato_IsHotPotatoEnabled) == 0x000001, "Wrong size on RBHotPotato_IsHotPotatoEnabled");
static_assert(offsetof(RBHotPotato_IsHotPotatoEnabled, ReturnValue) == 0x000000, "Member 'RBHotPotato_IsHotPotatoEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBSwitchPanel.BP_OnStartedInteraction
// 0x0010 (0x0010 - 0x0000)
struct RBSwitchPanel_BP_OnStartedInteraction final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBSwitchPanelPart*                     PanelPart;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanel_BP_OnStartedInteraction) == 0x000008, "Wrong alignment on RBSwitchPanel_BP_OnStartedInteraction");
static_assert(sizeof(RBSwitchPanel_BP_OnStartedInteraction) == 0x000010, "Wrong size on RBSwitchPanel_BP_OnStartedInteraction");
static_assert(offsetof(RBSwitchPanel_BP_OnStartedInteraction, Pawn) == 0x000000, "Member 'RBSwitchPanel_BP_OnStartedInteraction::Pawn' has a wrong offset!");
static_assert(offsetof(RBSwitchPanel_BP_OnStartedInteraction, PanelPart) == 0x000008, "Member 'RBSwitchPanel_BP_OnStartedInteraction::PanelPart' has a wrong offset!");

// Function OPP.RBSwitchPanel.BP_OnStoppedInteraction
// 0x0010 (0x0010 - 0x0000)
struct RBSwitchPanel_BP_OnStoppedInteraction final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBSwitchPanelPart*                     PanelPart;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanel_BP_OnStoppedInteraction) == 0x000008, "Wrong alignment on RBSwitchPanel_BP_OnStoppedInteraction");
static_assert(sizeof(RBSwitchPanel_BP_OnStoppedInteraction) == 0x000010, "Wrong size on RBSwitchPanel_BP_OnStoppedInteraction");
static_assert(offsetof(RBSwitchPanel_BP_OnStoppedInteraction, Pawn) == 0x000000, "Member 'RBSwitchPanel_BP_OnStoppedInteraction::Pawn' has a wrong offset!");
static_assert(offsetof(RBSwitchPanel_BP_OnStoppedInteraction, PanelPart) == 0x000008, "Member 'RBSwitchPanel_BP_OnStoppedInteraction::PanelPart' has a wrong offset!");

// Function OPP.RBSwitchPanel.BP_ResetAllPartsValues
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchPanel_BP_ResetAllPartsValues final
{
public:
	bool                                          bKeepCurrentValues;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanel_BP_ResetAllPartsValues) == 0x000001, "Wrong alignment on RBSwitchPanel_BP_ResetAllPartsValues");
static_assert(sizeof(RBSwitchPanel_BP_ResetAllPartsValues) == 0x000001, "Wrong size on RBSwitchPanel_BP_ResetAllPartsValues");
static_assert(offsetof(RBSwitchPanel_BP_ResetAllPartsValues, bKeepCurrentValues) == 0x000000, "Member 'RBSwitchPanel_BP_ResetAllPartsValues::bKeepCurrentValues' has a wrong offset!");

// Function OPP.RBSwitchPanel.BP_SetPanelEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchPanel_BP_SetPanelEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanel_BP_SetPanelEnabled) == 0x000001, "Wrong alignment on RBSwitchPanel_BP_SetPanelEnabled");
static_assert(sizeof(RBSwitchPanel_BP_SetPanelEnabled) == 0x000001, "Wrong size on RBSwitchPanel_BP_SetPanelEnabled");
static_assert(offsetof(RBSwitchPanel_BP_SetPanelEnabled, bEnabledValue) == 0x000000, "Member 'RBSwitchPanel_BP_SetPanelEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBSwitchPanel.Event_PanelEnabledChanged
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchPanel_Event_PanelEnabledChanged final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanel_Event_PanelEnabledChanged) == 0x000001, "Wrong alignment on RBSwitchPanel_Event_PanelEnabledChanged");
static_assert(sizeof(RBSwitchPanel_Event_PanelEnabledChanged) == 0x000001, "Wrong size on RBSwitchPanel_Event_PanelEnabledChanged");
static_assert(offsetof(RBSwitchPanel_Event_PanelEnabledChanged, bEnabledValue) == 0x000000, "Member 'RBSwitchPanel_Event_PanelEnabledChanged::bEnabledValue' has a wrong offset!");

// Function OPP.RBSwitchPanel.GivesFocusTo
// 0x0010 (0x0010 - 0x0000)
struct RBSwitchPanel_GivesFocusTo final
{
public:
	const class ARBPawn*                          InteractorPawn;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractionZoneComponent*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanel_GivesFocusTo) == 0x000008, "Wrong alignment on RBSwitchPanel_GivesFocusTo");
static_assert(sizeof(RBSwitchPanel_GivesFocusTo) == 0x000010, "Wrong size on RBSwitchPanel_GivesFocusTo");
static_assert(offsetof(RBSwitchPanel_GivesFocusTo, InteractorPawn) == 0x000000, "Member 'RBSwitchPanel_GivesFocusTo::InteractorPawn' has a wrong offset!");
static_assert(offsetof(RBSwitchPanel_GivesFocusTo, ReturnValue) == 0x000008, "Member 'RBSwitchPanel_GivesFocusTo::ReturnValue' has a wrong offset!");

// Function OPP.RBCameraPanel.BP_SetCameraPowerButton
// 0x0008 (0x0008 - 0x0000)
struct RBCameraPanel_BP_SetCameraPowerButton final
{
public:
	class ARBSwitchPanelPart*                     Part;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCameraPanel_BP_SetCameraPowerButton) == 0x000008, "Wrong alignment on RBCameraPanel_BP_SetCameraPowerButton");
static_assert(sizeof(RBCameraPanel_BP_SetCameraPowerButton) == 0x000008, "Wrong size on RBCameraPanel_BP_SetCameraPowerButton");
static_assert(offsetof(RBCameraPanel_BP_SetCameraPowerButton, Part) == 0x000000, "Member 'RBCameraPanel_BP_SetCameraPowerButton::Part' has a wrong offset!");

// Function OPP.RBCameraPanel.Event_PowerButtonActivatedChanged
// 0x0001 (0x0001 - 0x0000)
struct RBCameraPanel_Event_PowerButtonActivatedChanged final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCameraPanel_Event_PowerButtonActivatedChanged) == 0x000001, "Wrong alignment on RBCameraPanel_Event_PowerButtonActivatedChanged");
static_assert(sizeof(RBCameraPanel_Event_PowerButtonActivatedChanged) == 0x000001, "Wrong size on RBCameraPanel_Event_PowerButtonActivatedChanged");
static_assert(offsetof(RBCameraPanel_Event_PowerButtonActivatedChanged, bEnabledValue) == 0x000000, "Member 'RBCameraPanel_Event_PowerButtonActivatedChanged::bEnabledValue' has a wrong offset!");

// Function OPP.RBCameraPanel.OnRep_DestructionStage
// 0x0004 (0x0004 - 0x0000)
struct RBCameraPanel_OnRep_DestructionStage final
{
public:
	int32                                         OldDestructionStage;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCameraPanel_OnRep_DestructionStage) == 0x000004, "Wrong alignment on RBCameraPanel_OnRep_DestructionStage");
static_assert(sizeof(RBCameraPanel_OnRep_DestructionStage) == 0x000004, "Wrong size on RBCameraPanel_OnRep_DestructionStage");
static_assert(offsetof(RBCameraPanel_OnRep_DestructionStage, OldDestructionStage) == 0x000000, "Member 'RBCameraPanel_OnRep_DestructionStage::OldDestructionStage' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.GetItemCountForCategory
// 0x0008 (0x0008 - 0x0000)
struct RBCharacterCustomizationContent_GetItemCountForCategory final
{
public:
	ECustomizationMenuCategory                    Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCustomizingFemale;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0D[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_GetItemCountForCategory) == 0x000004, "Wrong alignment on RBCharacterCustomizationContent_GetItemCountForCategory");
static_assert(sizeof(RBCharacterCustomizationContent_GetItemCountForCategory) == 0x000008, "Wrong size on RBCharacterCustomizationContent_GetItemCountForCategory");
static_assert(offsetof(RBCharacterCustomizationContent_GetItemCountForCategory, Category) == 0x000000, "Member 'RBCharacterCustomizationContent_GetItemCountForCategory::Category' has a wrong offset!");
static_assert(offsetof(RBCharacterCustomizationContent_GetItemCountForCategory, IsCustomizingFemale) == 0x000001, "Member 'RBCharacterCustomizationContent_GetItemCountForCategory::IsCustomizingFemale' has a wrong offset!");
static_assert(offsetof(RBCharacterCustomizationContent_GetItemCountForCategory, ReturnValue) == 0x000004, "Member 'RBCharacterCustomizationContent_GetItemCountForCategory::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.CategoryClicked
// 0x0001 (0x0001 - 0x0000)
struct RBCharacterCustomizationContent_CategoryClicked final
{
public:
	ECustomizationMenuCategory                    Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_CategoryClicked) == 0x000001, "Wrong alignment on RBCharacterCustomizationContent_CategoryClicked");
static_assert(sizeof(RBCharacterCustomizationContent_CategoryClicked) == 0x000001, "Wrong size on RBCharacterCustomizationContent_CategoryClicked");
static_assert(offsetof(RBCharacterCustomizationContent_CategoryClicked, Category) == 0x000000, "Member 'RBCharacterCustomizationContent_CategoryClicked::Category' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.EquipItem
// 0x0008 (0x0008 - 0x0000)
struct RBCharacterCustomizationContent_EquipItem final
{
public:
	class URBPlayerCustomizationOption*           ClickedOption;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_EquipItem) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_EquipItem");
static_assert(sizeof(RBCharacterCustomizationContent_EquipItem) == 0x000008, "Wrong size on RBCharacterCustomizationContent_EquipItem");
static_assert(offsetof(RBCharacterCustomizationContent_EquipItem, ClickedOption) == 0x000000, "Member 'RBCharacterCustomizationContent_EquipItem::ClickedOption' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.EquipOutfit
// 0x0008 (0x0008 - 0x0000)
struct RBCharacterCustomizationContent_EquipOutfit final
{
public:
	class URBCustomizationOutfit*                 ClickedOutfit;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_EquipOutfit) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_EquipOutfit");
static_assert(sizeof(RBCharacterCustomizationContent_EquipOutfit) == 0x000008, "Wrong size on RBCharacterCustomizationContent_EquipOutfit");
static_assert(offsetof(RBCharacterCustomizationContent_EquipOutfit, ClickedOutfit) == 0x000000, "Member 'RBCharacterCustomizationContent_EquipOutfit::ClickedOutfit' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.EquipPlayerIcon
// 0x0008 (0x0008 - 0x0000)
struct RBCharacterCustomizationContent_EquipPlayerIcon final
{
public:
	class URBPlayerIconCustomizationOption*       ClickedPlayerIcon;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_EquipPlayerIcon) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_EquipPlayerIcon");
static_assert(sizeof(RBCharacterCustomizationContent_EquipPlayerIcon) == 0x000008, "Wrong size on RBCharacterCustomizationContent_EquipPlayerIcon");
static_assert(offsetof(RBCharacterCustomizationContent_EquipPlayerIcon, ClickedPlayerIcon) == 0x000000, "Member 'RBCharacterCustomizationContent_EquipPlayerIcon::ClickedPlayerIcon' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.EquipVoice
// 0x0008 (0x0008 - 0x0000)
struct RBCharacterCustomizationContent_EquipVoice final
{
public:
	class URBVoiceCustomizationOption*            ClickedVoice;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_EquipVoice) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_EquipVoice");
static_assert(sizeof(RBCharacterCustomizationContent_EquipVoice) == 0x000008, "Wrong size on RBCharacterCustomizationContent_EquipVoice");
static_assert(offsetof(RBCharacterCustomizationContent_EquipVoice, ClickedVoice) == 0x000000, "Member 'RBCharacterCustomizationContent_EquipVoice::ClickedVoice' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.Event_AddCustomizationItems
// 0x0010 (0x0010 - 0x0000)
struct RBCharacterCustomizationContent_Event_AddCustomizationItems final
{
public:
	TArray<struct FUICustomizationItem>           Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_Event_AddCustomizationItems) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_Event_AddCustomizationItems");
static_assert(sizeof(RBCharacterCustomizationContent_Event_AddCustomizationItems) == 0x000010, "Wrong size on RBCharacterCustomizationContent_Event_AddCustomizationItems");
static_assert(offsetof(RBCharacterCustomizationContent_Event_AddCustomizationItems, Items) == 0x000000, "Member 'RBCharacterCustomizationContent_Event_AddCustomizationItems::Items' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.Event_AddCustomizationSlotOptions
// 0x0018 (0x0018 - 0x0000)
struct RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions final
{
public:
	TArray<class URBPlayerCustomizationOption*>   Options;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          SelectSpecificIndex;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectedIndex;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions");
static_assert(sizeof(RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions) == 0x000018, "Wrong size on RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions");
static_assert(offsetof(RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions, Options) == 0x000000, "Member 'RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions::Options' has a wrong offset!");
static_assert(offsetof(RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions, SelectSpecificIndex) == 0x000010, "Member 'RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions::SelectSpecificIndex' has a wrong offset!");
static_assert(offsetof(RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions, SelectedIndex) == 0x000014, "Member 'RBCharacterCustomizationContent_Event_AddCustomizationSlotOptions::SelectedIndex' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.Event_AddPlayerIconOptions
// 0x0010 (0x0010 - 0x0000)
struct RBCharacterCustomizationContent_Event_AddPlayerIconOptions final
{
public:
	TArray<class URBPlayerIconCustomizationOption*> PlayerIconOptions;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_Event_AddPlayerIconOptions) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_Event_AddPlayerIconOptions");
static_assert(sizeof(RBCharacterCustomizationContent_Event_AddPlayerIconOptions) == 0x000010, "Wrong size on RBCharacterCustomizationContent_Event_AddPlayerIconOptions");
static_assert(offsetof(RBCharacterCustomizationContent_Event_AddPlayerIconOptions, PlayerIconOptions) == 0x000000, "Member 'RBCharacterCustomizationContent_Event_AddPlayerIconOptions::PlayerIconOptions' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.Event_AddVoiceOptions
// 0x0010 (0x0010 - 0x0000)
struct RBCharacterCustomizationContent_Event_AddVoiceOptions final
{
public:
	TArray<class URBVoiceCustomizationOption*>    VoiceOptions;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_Event_AddVoiceOptions) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_Event_AddVoiceOptions");
static_assert(sizeof(RBCharacterCustomizationContent_Event_AddVoiceOptions) == 0x000010, "Wrong size on RBCharacterCustomizationContent_Event_AddVoiceOptions");
static_assert(offsetof(RBCharacterCustomizationContent_Event_AddVoiceOptions, VoiceOptions) == 0x000000, "Member 'RBCharacterCustomizationContent_Event_AddVoiceOptions::VoiceOptions' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.Event_ItemBought
// 0x0030 (0x0030 - 0x0000)
struct RBCharacterCustomizationContent_Event_ItemBought final
{
public:
	struct FUICustomizationItem                   Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_Event_ItemBought) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_Event_ItemBought");
static_assert(sizeof(RBCharacterCustomizationContent_Event_ItemBought) == 0x000030, "Wrong size on RBCharacterCustomizationContent_Event_ItemBought");
static_assert(offsetof(RBCharacterCustomizationContent_Event_ItemBought, Item) == 0x000000, "Member 'RBCharacterCustomizationContent_Event_ItemBought::Item' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.Event_ItemEquipped
// 0x0030 (0x0030 - 0x0000)
struct RBCharacterCustomizationContent_Event_ItemEquipped final
{
public:
	struct FUICustomizationItem                   Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_Event_ItemEquipped) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_Event_ItemEquipped");
static_assert(sizeof(RBCharacterCustomizationContent_Event_ItemEquipped) == 0x000030, "Wrong size on RBCharacterCustomizationContent_Event_ItemEquipped");
static_assert(offsetof(RBCharacterCustomizationContent_Event_ItemEquipped, Item) == 0x000000, "Member 'RBCharacterCustomizationContent_Event_ItemEquipped::Item' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.Event_RefreshItemInfos
// 0x0010 (0x0010 - 0x0000)
struct RBCharacterCustomizationContent_Event_RefreshItemInfos final
{
public:
	TArray<struct FUICustomizationItem>           Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_Event_RefreshItemInfos) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_Event_RefreshItemInfos");
static_assert(sizeof(RBCharacterCustomizationContent_Event_RefreshItemInfos) == 0x000010, "Wrong size on RBCharacterCustomizationContent_Event_RefreshItemInfos");
static_assert(offsetof(RBCharacterCustomizationContent_Event_RefreshItemInfos, Items) == 0x000000, "Member 'RBCharacterCustomizationContent_Event_RefreshItemInfos::Items' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.OnHairColorClicked
// 0x0008 (0x0008 - 0x0000)
struct RBCharacterCustomizationContent_OnHairColorClicked final
{
public:
	class FName                                   NewHairColorId;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_OnHairColorClicked) == 0x000004, "Wrong alignment on RBCharacterCustomizationContent_OnHairColorClicked");
static_assert(sizeof(RBCharacterCustomizationContent_OnHairColorClicked) == 0x000008, "Wrong size on RBCharacterCustomizationContent_OnHairColorClicked");
static_assert(offsetof(RBCharacterCustomizationContent_OnHairColorClicked, NewHairColorId) == 0x000000, "Member 'RBCharacterCustomizationContent_OnHairColorClicked::NewHairColorId' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.OnItemClicked
// 0x0038 (0x0038 - 0x0000)
struct RBCharacterCustomizationContent_OnItemClicked final
{
public:
	struct FUICustomizationItem                   Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ECustomizationMenuCategory                    Category;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0F[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCharacterCustomizationContent_OnItemClicked) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_OnItemClicked");
static_assert(sizeof(RBCharacterCustomizationContent_OnItemClicked) == 0x000038, "Wrong size on RBCharacterCustomizationContent_OnItemClicked");
static_assert(offsetof(RBCharacterCustomizationContent_OnItemClicked, Item) == 0x000000, "Member 'RBCharacterCustomizationContent_OnItemClicked::Item' has a wrong offset!");
static_assert(offsetof(RBCharacterCustomizationContent_OnItemClicked, Category) == 0x000030, "Member 'RBCharacterCustomizationContent_OnItemClicked::Category' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.OnItemMouseDown
// 0x0030 (0x0030 - 0x0000)
struct RBCharacterCustomizationContent_OnItemMouseDown final
{
public:
	struct FUICustomizationItem                   Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_OnItemMouseDown) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_OnItemMouseDown");
static_assert(sizeof(RBCharacterCustomizationContent_OnItemMouseDown) == 0x000030, "Wrong size on RBCharacterCustomizationContent_OnItemMouseDown");
static_assert(offsetof(RBCharacterCustomizationContent_OnItemMouseDown, Item) == 0x000000, "Member 'RBCharacterCustomizationContent_OnItemMouseDown::Item' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.OnItemMouseUp
// 0x0030 (0x0030 - 0x0000)
struct RBCharacterCustomizationContent_OnItemMouseUp final
{
public:
	struct FUICustomizationItem                   Item;                                              // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_OnItemMouseUp) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_OnItemMouseUp");
static_assert(sizeof(RBCharacterCustomizationContent_OnItemMouseUp) == 0x000030, "Wrong size on RBCharacterCustomizationContent_OnItemMouseUp");
static_assert(offsetof(RBCharacterCustomizationContent_OnItemMouseUp, Item) == 0x000000, "Member 'RBCharacterCustomizationContent_OnItemMouseUp::Item' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.OnPlayerCustomizationUpdated
// 0x0038 (0x0038 - 0x0000)
struct RBCharacterCustomizationContent_OnPlayerCustomizationUpdated final
{
public:
	struct FRBPlayerCustomizationInfo             CustomizationInfo;                                 // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_OnPlayerCustomizationUpdated) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_OnPlayerCustomizationUpdated");
static_assert(sizeof(RBCharacterCustomizationContent_OnPlayerCustomizationUpdated) == 0x000038, "Wrong size on RBCharacterCustomizationContent_OnPlayerCustomizationUpdated");
static_assert(offsetof(RBCharacterCustomizationContent_OnPlayerCustomizationUpdated, CustomizationInfo) == 0x000000, "Member 'RBCharacterCustomizationContent_OnPlayerCustomizationUpdated::CustomizationInfo' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.BP_GetCurrentPreviewOptions
// 0x0038 (0x0038 - 0x0000)
struct RBCharacterCustomizationContent_BP_GetCurrentPreviewOptions final
{
public:
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_BP_GetCurrentPreviewOptions) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_BP_GetCurrentPreviewOptions");
static_assert(sizeof(RBCharacterCustomizationContent_BP_GetCurrentPreviewOptions) == 0x000038, "Wrong size on RBCharacterCustomizationContent_BP_GetCurrentPreviewOptions");
static_assert(offsetof(RBCharacterCustomizationContent_BP_GetCurrentPreviewOptions, ReturnValue) == 0x000000, "Member 'RBCharacterCustomizationContent_BP_GetCurrentPreviewOptions::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.BP_GetOptionsForPreview
// 0x0048 (0x0048 - 0x0000)
struct RBCharacterCustomizationContent_BP_GetOptionsForPreview final
{
public:
	class URBPlayerCustomizationOption*           OptionToPreview;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBCustomizationOutfit*                 OutfitToPreview;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_BP_GetOptionsForPreview) == 0x000008, "Wrong alignment on RBCharacterCustomizationContent_BP_GetOptionsForPreview");
static_assert(sizeof(RBCharacterCustomizationContent_BP_GetOptionsForPreview) == 0x000048, "Wrong size on RBCharacterCustomizationContent_BP_GetOptionsForPreview");
static_assert(offsetof(RBCharacterCustomizationContent_BP_GetOptionsForPreview, OptionToPreview) == 0x000000, "Member 'RBCharacterCustomizationContent_BP_GetOptionsForPreview::OptionToPreview' has a wrong offset!");
static_assert(offsetof(RBCharacterCustomizationContent_BP_GetOptionsForPreview, OutfitToPreview) == 0x000008, "Member 'RBCharacterCustomizationContent_BP_GetOptionsForPreview::OutfitToPreview' has a wrong offset!");
static_assert(offsetof(RBCharacterCustomizationContent_BP_GetOptionsForPreview, ReturnValue) == 0x000010, "Member 'RBCharacterCustomizationContent_BP_GetOptionsForPreview::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.GetEquippedHairColor
// 0x0008 (0x0008 - 0x0000)
struct RBCharacterCustomizationContent_GetEquippedHairColor final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_GetEquippedHairColor) == 0x000004, "Wrong alignment on RBCharacterCustomizationContent_GetEquippedHairColor");
static_assert(sizeof(RBCharacterCustomizationContent_GetEquippedHairColor) == 0x000008, "Wrong size on RBCharacterCustomizationContent_GetEquippedHairColor");
static_assert(offsetof(RBCharacterCustomizationContent_GetEquippedHairColor, ReturnValue) == 0x000000, "Member 'RBCharacterCustomizationContent_GetEquippedHairColor::ReturnValue' has a wrong offset!");

// Function OPP.RBCharacterCustomizationContent.GetIsCustomizingFemale
// 0x0001 (0x0001 - 0x0000)
struct RBCharacterCustomizationContent_GetIsCustomizingFemale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCharacterCustomizationContent_GetIsCustomizingFemale) == 0x000001, "Wrong alignment on RBCharacterCustomizationContent_GetIsCustomizingFemale");
static_assert(sizeof(RBCharacterCustomizationContent_GetIsCustomizingFemale) == 0x000001, "Wrong size on RBCharacterCustomizationContent_GetIsCustomizingFemale");
static_assert(offsetof(RBCharacterCustomizationContent_GetIsCustomizingFemale, ReturnValue) == 0x000000, "Member 'RBCharacterCustomizationContent_GetIsCustomizingFemale::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.BP_Initialize
// 0x0018 (0x0018 - 0x0000)
struct RBMenuWithTabsWidget_BP_Initialize final
{
public:
	TArray<class URBMenuTabButton*>               InTabButtons;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UWidgetSwitcher*                        InTabSwitcher;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_BP_Initialize) == 0x000008, "Wrong alignment on RBMenuWithTabsWidget_BP_Initialize");
static_assert(sizeof(RBMenuWithTabsWidget_BP_Initialize) == 0x000018, "Wrong size on RBMenuWithTabsWidget_BP_Initialize");
static_assert(offsetof(RBMenuWithTabsWidget_BP_Initialize, InTabButtons) == 0x000000, "Member 'RBMenuWithTabsWidget_BP_Initialize::InTabButtons' has a wrong offset!");
static_assert(offsetof(RBMenuWithTabsWidget_BP_Initialize, InTabSwitcher) == 0x000010, "Member 'RBMenuWithTabsWidget_BP_Initialize::InTabSwitcher' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.BP_SetSelectedTab
// 0x0004 (0x0004 - 0x0000)
struct RBMenuWithTabsWidget_BP_SetSelectedTab final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_BP_SetSelectedTab) == 0x000004, "Wrong alignment on RBMenuWithTabsWidget_BP_SetSelectedTab");
static_assert(sizeof(RBMenuWithTabsWidget_BP_SetSelectedTab) == 0x000004, "Wrong size on RBMenuWithTabsWidget_BP_SetSelectedTab");
static_assert(offsetof(RBMenuWithTabsWidget_BP_SetSelectedTab, Param_Index) == 0x000000, "Member 'RBMenuWithTabsWidget_BP_SetSelectedTab::Param_Index' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.BP_SetSelectedTabFromButton
// 0x0008 (0x0008 - 0x0000)
struct RBMenuWithTabsWidget_BP_SetSelectedTabFromButton final
{
public:
	class URBMenuTabButton*                       Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_BP_SetSelectedTabFromButton) == 0x000008, "Wrong alignment on RBMenuWithTabsWidget_BP_SetSelectedTabFromButton");
static_assert(sizeof(RBMenuWithTabsWidget_BP_SetSelectedTabFromButton) == 0x000008, "Wrong size on RBMenuWithTabsWidget_BP_SetSelectedTabFromButton");
static_assert(offsetof(RBMenuWithTabsWidget_BP_SetSelectedTabFromButton, Button) == 0x000000, "Member 'RBMenuWithTabsWidget_BP_SetSelectedTabFromButton::Button' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.Event_OnMenuTabSwitched
// 0x0004 (0x0004 - 0x0000)
struct RBMenuWithTabsWidget_Event_OnMenuTabSwitched final
{
public:
	int32                                         PreviousIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_Event_OnMenuTabSwitched) == 0x000004, "Wrong alignment on RBMenuWithTabsWidget_Event_OnMenuTabSwitched");
static_assert(sizeof(RBMenuWithTabsWidget_Event_OnMenuTabSwitched) == 0x000004, "Wrong size on RBMenuWithTabsWidget_Event_OnMenuTabSwitched");
static_assert(offsetof(RBMenuWithTabsWidget_Event_OnMenuTabSwitched, PreviousIndex) == 0x000000, "Member 'RBMenuWithTabsWidget_Event_OnMenuTabSwitched::PreviousIndex' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.Event_UpdateNavigation
// 0x0001 (0x0001 - 0x0000)
struct RBMenuWithTabsWidget_Event_UpdateNavigation final
{
public:
	bool                                          CanExitMenu;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_Event_UpdateNavigation) == 0x000001, "Wrong alignment on RBMenuWithTabsWidget_Event_UpdateNavigation");
static_assert(sizeof(RBMenuWithTabsWidget_Event_UpdateNavigation) == 0x000001, "Wrong size on RBMenuWithTabsWidget_Event_UpdateNavigation");
static_assert(offsetof(RBMenuWithTabsWidget_Event_UpdateNavigation, CanExitMenu) == 0x000000, "Member 'RBMenuWithTabsWidget_Event_UpdateNavigation::CanExitMenu' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.OnTabButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct RBMenuWithTabsWidget_OnTabButtonClicked final
{
public:
	class URBMenuTabButton*                       Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_OnTabButtonClicked) == 0x000008, "Wrong alignment on RBMenuWithTabsWidget_OnTabButtonClicked");
static_assert(sizeof(RBMenuWithTabsWidget_OnTabButtonClicked) == 0x000008, "Wrong size on RBMenuWithTabsWidget_OnTabButtonClicked");
static_assert(offsetof(RBMenuWithTabsWidget_OnTabButtonClicked, Button) == 0x000000, "Member 'RBMenuWithTabsWidget_OnTabButtonClicked::Button' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.OnTabNavigationChanged
// 0x0001 (0x0001 - 0x0000)
struct RBMenuWithTabsWidget_OnTabNavigationChanged final
{
public:
	bool                                          CanExitMenu;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_OnTabNavigationChanged) == 0x000001, "Wrong alignment on RBMenuWithTabsWidget_OnTabNavigationChanged");
static_assert(sizeof(RBMenuWithTabsWidget_OnTabNavigationChanged) == 0x000001, "Wrong size on RBMenuWithTabsWidget_OnTabNavigationChanged");
static_assert(offsetof(RBMenuWithTabsWidget_OnTabNavigationChanged, CanExitMenu) == 0x000000, "Member 'RBMenuWithTabsWidget_OnTabNavigationChanged::CanExitMenu' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.PreNavigationChangeAction
// 0x0001 (0x0001 - 0x0000)
struct RBMenuWithTabsWidget_PreNavigationChangeAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_PreNavigationChangeAction) == 0x000001, "Wrong alignment on RBMenuWithTabsWidget_PreNavigationChangeAction");
static_assert(sizeof(RBMenuWithTabsWidget_PreNavigationChangeAction) == 0x000001, "Wrong size on RBMenuWithTabsWidget_PreNavigationChangeAction");
static_assert(offsetof(RBMenuWithTabsWidget_PreNavigationChangeAction, ReturnValue) == 0x000000, "Member 'RBMenuWithTabsWidget_PreNavigationChangeAction::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.TryChangeTab
// 0x0004 (0x0004 - 0x0000)
struct RBMenuWithTabsWidget_TryChangeTab final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_TryChangeTab) == 0x000004, "Wrong alignment on RBMenuWithTabsWidget_TryChangeTab");
static_assert(sizeof(RBMenuWithTabsWidget_TryChangeTab) == 0x000004, "Wrong size on RBMenuWithTabsWidget_TryChangeTab");
static_assert(offsetof(RBMenuWithTabsWidget_TryChangeTab, Param_Index) == 0x000000, "Member 'RBMenuWithTabsWidget_TryChangeTab::Param_Index' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.CanExitMenu
// 0x0001 (0x0001 - 0x0000)
struct RBMenuWithTabsWidget_CanExitMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_CanExitMenu) == 0x000001, "Wrong alignment on RBMenuWithTabsWidget_CanExitMenu");
static_assert(sizeof(RBMenuWithTabsWidget_CanExitMenu) == 0x000001, "Wrong size on RBMenuWithTabsWidget_CanExitMenu");
static_assert(offsetof(RBMenuWithTabsWidget_CanExitMenu, ReturnValue) == 0x000000, "Member 'RBMenuWithTabsWidget_CanExitMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuWithTabsWidget.GetSelectedTabButton
// 0x0008 (0x0008 - 0x0000)
struct RBMenuWithTabsWidget_GetSelectedTabButton final
{
public:
	class URBMenuTabButton*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuWithTabsWidget_GetSelectedTabButton) == 0x000008, "Wrong alignment on RBMenuWithTabsWidget_GetSelectedTabButton");
static_assert(sizeof(RBMenuWithTabsWidget_GetSelectedTabButton) == 0x000008, "Wrong size on RBMenuWithTabsWidget_GetSelectedTabButton");
static_assert(offsetof(RBMenuWithTabsWidget_GetSelectedTabButton, ReturnValue) == 0x000000, "Member 'RBMenuWithTabsWidget_GetSelectedTabButton::ReturnValue' has a wrong offset!");

// Function OPP.RBGeneratorMultiObjectiveActor.OnPanelStateChanged_Server
// 0x0010 (0x0010 - 0x0000)
struct RBGeneratorMultiObjectiveActor_OnPanelStateChanged_Server final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGeneratorMultiObjectiveActor_OnPanelStateChanged_Server) == 0x000008, "Wrong alignment on RBGeneratorMultiObjectiveActor_OnPanelStateChanged_Server");
static_assert(sizeof(RBGeneratorMultiObjectiveActor_OnPanelStateChanged_Server) == 0x000010, "Wrong size on RBGeneratorMultiObjectiveActor_OnPanelStateChanged_Server");
static_assert(offsetof(RBGeneratorMultiObjectiveActor_OnPanelStateChanged_Server, Panel) == 0x000000, "Member 'RBGeneratorMultiObjectiveActor_OnPanelStateChanged_Server::Panel' has a wrong offset!");
static_assert(offsetof(RBGeneratorMultiObjectiveActor_OnPanelStateChanged_Server, PawnInteracting) == 0x000008, "Member 'RBGeneratorMultiObjectiveActor_OnPanelStateChanged_Server::PawnInteracting' has a wrong offset!");

// Function OPP.RBGeneratorMultiObjectiveActor.IsCrankCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBGeneratorMultiObjectiveActor_IsCrankCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGeneratorMultiObjectiveActor_IsCrankCompleted) == 0x000001, "Wrong alignment on RBGeneratorMultiObjectiveActor_IsCrankCompleted");
static_assert(sizeof(RBGeneratorMultiObjectiveActor_IsCrankCompleted) == 0x000001, "Wrong size on RBGeneratorMultiObjectiveActor_IsCrankCompleted");
static_assert(offsetof(RBGeneratorMultiObjectiveActor_IsCrankCompleted, ReturnValue) == 0x000000, "Member 'RBGeneratorMultiObjectiveActor_IsCrankCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBGeneratorMultiObjectiveActor.IsGasReservoirFilled
// 0x0001 (0x0001 - 0x0000)
struct RBGeneratorMultiObjectiveActor_IsGasReservoirFilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGeneratorMultiObjectiveActor_IsGasReservoirFilled) == 0x000001, "Wrong alignment on RBGeneratorMultiObjectiveActor_IsGasReservoirFilled");
static_assert(sizeof(RBGeneratorMultiObjectiveActor_IsGasReservoirFilled) == 0x000001, "Wrong size on RBGeneratorMultiObjectiveActor_IsGasReservoirFilled");
static_assert(offsetof(RBGeneratorMultiObjectiveActor_IsGasReservoirFilled, ReturnValue) == 0x000000, "Member 'RBGeneratorMultiObjectiveActor_IsGasReservoirFilled::ReturnValue' has a wrong offset!");

// Function OPP.RBGeneratorMultiObjectiveActor.IsLeftElectricPanelCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBGeneratorMultiObjectiveActor_IsLeftElectricPanelCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGeneratorMultiObjectiveActor_IsLeftElectricPanelCompleted) == 0x000001, "Wrong alignment on RBGeneratorMultiObjectiveActor_IsLeftElectricPanelCompleted");
static_assert(sizeof(RBGeneratorMultiObjectiveActor_IsLeftElectricPanelCompleted) == 0x000001, "Wrong size on RBGeneratorMultiObjectiveActor_IsLeftElectricPanelCompleted");
static_assert(offsetof(RBGeneratorMultiObjectiveActor_IsLeftElectricPanelCompleted, ReturnValue) == 0x000000, "Member 'RBGeneratorMultiObjectiveActor_IsLeftElectricPanelCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBGeneratorMultiObjectiveActor.IsRightElectricPanelCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBGeneratorMultiObjectiveActor_IsRightElectricPanelCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGeneratorMultiObjectiveActor_IsRightElectricPanelCompleted) == 0x000001, "Wrong alignment on RBGeneratorMultiObjectiveActor_IsRightElectricPanelCompleted");
static_assert(sizeof(RBGeneratorMultiObjectiveActor_IsRightElectricPanelCompleted) == 0x000001, "Wrong size on RBGeneratorMultiObjectiveActor_IsRightElectricPanelCompleted");
static_assert(offsetof(RBGeneratorMultiObjectiveActor_IsRightElectricPanelCompleted, ReturnValue) == 0x000000, "Member 'RBGeneratorMultiObjectiveActor_IsRightElectricPanelCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBCheatManager.AcquireBadge
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_AcquireBadge final
{
public:
	class FString                                 BadgeId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AcquireBadge) == 0x000008, "Wrong alignment on RBCheatManager_AcquireBadge");
static_assert(sizeof(RBCheatManager_AcquireBadge) == 0x000010, "Wrong size on RBCheatManager_AcquireBadge");
static_assert(offsetof(RBCheatManager_AcquireBadge, BadgeId) == 0x000000, "Member 'RBCheatManager_AcquireBadge::BadgeId' has a wrong offset!");

// Function OPP.RBCheatManager.AcquireFullRewardPool
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_AcquireFullRewardPool final
{
public:
	class FName                                   RewardPoolId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AcquireFullRewardPool) == 0x000004, "Wrong alignment on RBCheatManager_AcquireFullRewardPool");
static_assert(sizeof(RBCheatManager_AcquireFullRewardPool) == 0x000008, "Wrong size on RBCheatManager_AcquireFullRewardPool");
static_assert(offsetof(RBCheatManager_AcquireFullRewardPool, RewardPoolId) == 0x000000, "Member 'RBCheatManager_AcquireFullRewardPool::RewardPoolId' has a wrong offset!");

// Function OPP.RBCheatManager.AcquireRewardPoolItem
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_AcquireRewardPoolItem final
{
public:
	class FName                                   RewardPoolId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AcquireRewardPoolItem) == 0x000004, "Wrong alignment on RBCheatManager_AcquireRewardPoolItem");
static_assert(sizeof(RBCheatManager_AcquireRewardPoolItem) == 0x000008, "Wrong size on RBCheatManager_AcquireRewardPoolItem");
static_assert(offsetof(RBCheatManager_AcquireRewardPoolItem, RewardPoolId) == 0x000000, "Member 'RBCheatManager_AcquireRewardPoolItem::RewardPoolId' has a wrong offset!");

// Function OPP.RBCheatManager.AddCurrency
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_AddCurrency final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F21[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddCurrency) == 0x000004, "Wrong alignment on RBCheatManager_AddCurrency");
static_assert(sizeof(RBCheatManager_AddCurrency) == 0x000008, "Wrong size on RBCheatManager_AddCurrency");
static_assert(offsetof(RBCheatManager_AddCurrency, CurrencyType) == 0x000000, "Member 'RBCheatManager_AddCurrency::CurrencyType' has a wrong offset!");
static_assert(offsetof(RBCheatManager_AddCurrency, Amount) == 0x000004, "Member 'RBCheatManager_AddCurrency::Amount' has a wrong offset!");

// Function OPP.RBCheatManager.AddDebugActorInViewFilter
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_AddDebugActorInViewFilter final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddDebugActorInViewFilter) == 0x000008, "Wrong alignment on RBCheatManager_AddDebugActorInViewFilter");
static_assert(sizeof(RBCheatManager_AddDebugActorInViewFilter) == 0x000010, "Wrong size on RBCheatManager_AddDebugActorInViewFilter");
static_assert(offsetof(RBCheatManager_AddDebugActorInViewFilter, Filter) == 0x000000, "Member 'RBCheatManager_AddDebugActorInViewFilter::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.AddItem
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_AddItem final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddItem) == 0x000008, "Wrong alignment on RBCheatManager_AddItem");
static_assert(sizeof(RBCheatManager_AddItem) == 0x000010, "Wrong size on RBCheatManager_AddItem");
static_assert(offsetof(RBCheatManager_AddItem, ItemName) == 0x000000, "Member 'RBCheatManager_AddItem::ItemName' has a wrong offset!");

// Function OPP.RBCheatManager.AddMultipleItems
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_AddMultipleItems final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfCopy;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F22[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCheatManager_AddMultipleItems) == 0x000008, "Wrong alignment on RBCheatManager_AddMultipleItems");
static_assert(sizeof(RBCheatManager_AddMultipleItems) == 0x000018, "Wrong size on RBCheatManager_AddMultipleItems");
static_assert(offsetof(RBCheatManager_AddMultipleItems, ItemName) == 0x000000, "Member 'RBCheatManager_AddMultipleItems::ItemName' has a wrong offset!");
static_assert(offsetof(RBCheatManager_AddMultipleItems, NumberOfCopy) == 0x000010, "Member 'RBCheatManager_AddMultipleItems::NumberOfCopy' has a wrong offset!");

// Function OPP.RBCheatManager.AddMurkoffDollars
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_AddMurkoffDollars final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddMurkoffDollars) == 0x000004, "Wrong alignment on RBCheatManager_AddMurkoffDollars");
static_assert(sizeof(RBCheatManager_AddMurkoffDollars) == 0x000004, "Wrong size on RBCheatManager_AddMurkoffDollars");
static_assert(offsetof(RBCheatManager_AddMurkoffDollars, Amount) == 0x000000, "Member 'RBCheatManager_AddMurkoffDollars::Amount' has a wrong offset!");

// Function OPP.RBCheatManager.AddMurkoffPoints
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_AddMurkoffPoints final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddMurkoffPoints) == 0x000004, "Wrong alignment on RBCheatManager_AddMurkoffPoints");
static_assert(sizeof(RBCheatManager_AddMurkoffPoints) == 0x000004, "Wrong size on RBCheatManager_AddMurkoffPoints");
static_assert(offsetof(RBCheatManager_AddMurkoffPoints, Amount) == 0x000000, "Member 'RBCheatManager_AddMurkoffPoints::Amount' has a wrong offset!");

// Function OPP.RBCheatManager.AddOnlineItemWithID
// 0x000C (0x000C - 0x0000)
struct RBCheatManager_AddOnlineItemWithID final
{
public:
	class FName                                   UpgradeOnlineItemId;                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPersistentItem;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F23[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCheatManager_AddOnlineItemWithID) == 0x000004, "Wrong alignment on RBCheatManager_AddOnlineItemWithID");
static_assert(sizeof(RBCheatManager_AddOnlineItemWithID) == 0x00000C, "Wrong size on RBCheatManager_AddOnlineItemWithID");
static_assert(offsetof(RBCheatManager_AddOnlineItemWithID, UpgradeOnlineItemId) == 0x000000, "Member 'RBCheatManager_AddOnlineItemWithID::UpgradeOnlineItemId' has a wrong offset!");
static_assert(offsetof(RBCheatManager_AddOnlineItemWithID, bIsPersistentItem) == 0x000008, "Member 'RBCheatManager_AddOnlineItemWithID::bIsPersistentItem' has a wrong offset!");

// Function OPP.RBCheatManager.AddPsychosis
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_AddPsychosis final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddPsychosis) == 0x000004, "Wrong alignment on RBCheatManager_AddPsychosis");
static_assert(sizeof(RBCheatManager_AddPsychosis) == 0x000004, "Wrong size on RBCheatManager_AddPsychosis");
static_assert(offsetof(RBCheatManager_AddPsychosis, Amount) == 0x000000, "Member 'RBCheatManager_AddPsychosis::Amount' has a wrong offset!");

// Function OPP.RBCheatManager.AddStageXp
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_AddStageXp final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddStageXp) == 0x000004, "Wrong alignment on RBCheatManager_AddStageXp");
static_assert(sizeof(RBCheatManager_AddStageXp) == 0x000004, "Wrong size on RBCheatManager_AddStageXp");
static_assert(offsetof(RBCheatManager_AddStageXp, Amount) == 0x000000, "Member 'RBCheatManager_AddStageXp::Amount' has a wrong offset!");

// Function OPP.RBCheatManager.AddTask
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_AddTask final
{
public:
	class FString                                 TaskTitle;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddTask) == 0x000008, "Wrong alignment on RBCheatManager_AddTask");
static_assert(sizeof(RBCheatManager_AddTask) == 0x000010, "Wrong size on RBCheatManager_AddTask");
static_assert(offsetof(RBCheatManager_AddTask, TaskTitle) == 0x000000, "Member 'RBCheatManager_AddTask::TaskTitle' has a wrong offset!");

// Function OPP.RBCheatManager.AddTaskByID
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_AddTaskByID final
{
public:
	class FName                                   TaskId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddTaskByID) == 0x000004, "Wrong alignment on RBCheatManager_AddTaskByID");
static_assert(sizeof(RBCheatManager_AddTaskByID) == 0x000008, "Wrong size on RBCheatManager_AddTaskByID");
static_assert(offsetof(RBCheatManager_AddTaskByID, TaskId) == 0x000000, "Member 'RBCheatManager_AddTaskByID::TaskId' has a wrong offset!");

// Function OPP.RBCheatManager.AddTQ
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_AddTQ final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddTQ) == 0x000004, "Wrong alignment on RBCheatManager_AddTQ");
static_assert(sizeof(RBCheatManager_AddTQ) == 0x000004, "Wrong size on RBCheatManager_AddTQ");
static_assert(offsetof(RBCheatManager_AddTQ, Amount) == 0x000000, "Member 'RBCheatManager_AddTQ::Amount' has a wrong offset!");

// Function OPP.RBCheatManager.AddVariator
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_AddVariator final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddVariator) == 0x000008, "Wrong alignment on RBCheatManager_AddVariator");
static_assert(sizeof(RBCheatManager_AddVariator) == 0x000010, "Wrong size on RBCheatManager_AddVariator");
static_assert(offsetof(RBCheatManager_AddVariator, Param_Name) == 0x000000, "Member 'RBCheatManager_AddVariator::Param_Name' has a wrong offset!");

// Function OPP.RBCheatManager.AddXp
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_AddXp final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_AddXp) == 0x000004, "Wrong alignment on RBCheatManager_AddXp");
static_assert(sizeof(RBCheatManager_AddXp) == 0x000004, "Wrong size on RBCheatManager_AddXp");
static_assert(offsetof(RBCheatManager_AddXp, Amount) == 0x000000, "Member 'RBCheatManager_AddXp::Amount' has a wrong offset!");

// Function OPP.RBCheatManager.BugIt_TextEnteredCallback
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_BugIt_TextEnteredCallback final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_BugIt_TextEnteredCallback) == 0x000008, "Wrong alignment on RBCheatManager_BugIt_TextEnteredCallback");
static_assert(sizeof(RBCheatManager_BugIt_TextEnteredCallback) == 0x000010, "Wrong size on RBCheatManager_BugIt_TextEnteredCallback");
static_assert(offsetof(RBCheatManager_BugIt_TextEnteredCallback, Text) == 0x000000, "Member 'RBCheatManager_BugIt_TextEnteredCallback::Text' has a wrong offset!");

// Function OPP.RBCheatManager.ClearRandomState
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ClearRandomState final
{
public:
	class FString                                 SearchQuery;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ClearRandomState) == 0x000008, "Wrong alignment on RBCheatManager_ClearRandomState");
static_assert(sizeof(RBCheatManager_ClearRandomState) == 0x000010, "Wrong size on RBCheatManager_ClearRandomState");
static_assert(offsetof(RBCheatManager_ClearRandomState, SearchQuery) == 0x000000, "Member 'RBCheatManager_ClearRandomState::SearchQuery' has a wrong offset!");

// Function OPP.RBCheatManager.CompleteMainObjectivesTo
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_CompleteMainObjectivesTo final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_CompleteMainObjectivesTo) == 0x000008, "Wrong alignment on RBCheatManager_CompleteMainObjectivesTo");
static_assert(sizeof(RBCheatManager_CompleteMainObjectivesTo) == 0x000010, "Wrong size on RBCheatManager_CompleteMainObjectivesTo");
static_assert(offsetof(RBCheatManager_CompleteMainObjectivesTo, Param_Name) == 0x000000, "Member 'RBCheatManager_CompleteMainObjectivesTo::Param_Name' has a wrong offset!");

// Function OPP.RBCheatManager.CompleteMainObjectivesToIndex
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_CompleteMainObjectivesToIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_CompleteMainObjectivesToIndex) == 0x000004, "Wrong alignment on RBCheatManager_CompleteMainObjectivesToIndex");
static_assert(sizeof(RBCheatManager_CompleteMainObjectivesToIndex) == 0x000004, "Wrong size on RBCheatManager_CompleteMainObjectivesToIndex");
static_assert(offsetof(RBCheatManager_CompleteMainObjectivesToIndex, Param_Index) == 0x000000, "Member 'RBCheatManager_CompleteMainObjectivesToIndex::Param_Index' has a wrong offset!");

// Function OPP.RBCheatManager.CompleteObjectiveCoordinator
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_CompleteObjectiveCoordinator final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_CompleteObjectiveCoordinator) == 0x000008, "Wrong alignment on RBCheatManager_CompleteObjectiveCoordinator");
static_assert(sizeof(RBCheatManager_CompleteObjectiveCoordinator) == 0x000010, "Wrong size on RBCheatManager_CompleteObjectiveCoordinator");
static_assert(offsetof(RBCheatManager_CompleteObjectiveCoordinator, Param_Name) == 0x000000, "Member 'RBCheatManager_CompleteObjectiveCoordinator::Param_Name' has a wrong offset!");

// Function OPP.RBCheatManager.DebugAlertedStance
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_DebugAlertedStance final
{
public:
	int32                                         Option;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugAlertedStance) == 0x000004, "Wrong alignment on RBCheatManager_DebugAlertedStance");
static_assert(sizeof(RBCheatManager_DebugAlertedStance) == 0x000004, "Wrong size on RBCheatManager_DebugAlertedStance");
static_assert(offsetof(RBCheatManager_DebugAlertedStance, Option) == 0x000000, "Member 'RBCheatManager_DebugAlertedStance::Option' has a wrong offset!");

// Function OPP.RBCheatManager.DebugAudioEvents
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_DebugAudioEvents final
{
public:
	int32                                         PlayingIDFilter;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugAudioEvents) == 0x000004, "Wrong alignment on RBCheatManager_DebugAudioEvents");
static_assert(sizeof(RBCheatManager_DebugAudioEvents) == 0x000004, "Wrong size on RBCheatManager_DebugAudioEvents");
static_assert(offsetof(RBCheatManager_DebugAudioEvents, PlayingIDFilter) == 0x000000, "Member 'RBCheatManager_DebugAudioEvents::PlayingIDFilter' has a wrong offset!");

// Function OPP.RBCheatManager.DebugClearance
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_DebugClearance final
{
public:
	bool                                          bForceShowValid;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugClearance) == 0x000001, "Wrong alignment on RBCheatManager_DebugClearance");
static_assert(sizeof(RBCheatManager_DebugClearance) == 0x000001, "Wrong size on RBCheatManager_DebugClearance");
static_assert(offsetof(RBCheatManager_DebugClearance, bForceShowValid) == 0x000000, "Member 'RBCheatManager_DebugClearance::bForceShowValid' has a wrong offset!");

// Function OPP.RBCheatManager.DebugCoopMove
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_DebugCoopMove final
{
public:
	bool                                          bExceptLocal;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugCoopMove) == 0x000001, "Wrong alignment on RBCheatManager_DebugCoopMove");
static_assert(sizeof(RBCheatManager_DebugCoopMove) == 0x000001, "Wrong size on RBCheatManager_DebugCoopMove");
static_assert(offsetof(RBCheatManager_DebugCoopMove, bExceptLocal) == 0x000000, "Member 'RBCheatManager_DebugCoopMove::bExceptLocal' has a wrong offset!");

// Function OPP.RBCheatManager.DebugDoorRepulsion
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_DebugDoorRepulsion final
{
public:
	bool                                          bSlam;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugDoorRepulsion) == 0x000001, "Wrong alignment on RBCheatManager_DebugDoorRepulsion");
static_assert(sizeof(RBCheatManager_DebugDoorRepulsion) == 0x000001, "Wrong size on RBCheatManager_DebugDoorRepulsion");
static_assert(offsetof(RBCheatManager_DebugDoorRepulsion, bSlam) == 0x000000, "Member 'RBCheatManager_DebugDoorRepulsion::bSlam' has a wrong offset!");

// Function OPP.RBCheatManager.DebugDrawInteractionBox
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_DebugDrawInteractionBox final
{
public:
	bool                                          bServer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugDrawInteractionBox) == 0x000001, "Wrong alignment on RBCheatManager_DebugDrawInteractionBox");
static_assert(sizeof(RBCheatManager_DebugDrawInteractionBox) == 0x000001, "Wrong size on RBCheatManager_DebugDrawInteractionBox");
static_assert(offsetof(RBCheatManager_DebugDrawInteractionBox, bServer) == 0x000000, "Member 'RBCheatManager_DebugDrawInteractionBox::bServer' has a wrong offset!");

// Function OPP.RBCheatManager.DebugFatalities
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_DebugFatalities final
{
public:
	int32                                         Option;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugFatalities) == 0x000004, "Wrong alignment on RBCheatManager_DebugFatalities");
static_assert(sizeof(RBCheatManager_DebugFatalities) == 0x000004, "Wrong size on RBCheatManager_DebugFatalities");
static_assert(offsetof(RBCheatManager_DebugFatalities, Option) == 0x000000, "Member 'RBCheatManager_DebugFatalities::Option' has a wrong offset!");

// Function OPP.RBCheatManager.DebugFatalitiesForceIndex
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_DebugFatalitiesForceIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugFatalitiesForceIndex) == 0x000004, "Wrong alignment on RBCheatManager_DebugFatalitiesForceIndex");
static_assert(sizeof(RBCheatManager_DebugFatalitiesForceIndex) == 0x000004, "Wrong size on RBCheatManager_DebugFatalitiesForceIndex");
static_assert(offsetof(RBCheatManager_DebugFatalitiesForceIndex, Param_Index) == 0x000000, "Member 'RBCheatManager_DebugFatalitiesForceIndex::Param_Index' has a wrong offset!");

// Function OPP.RBCheatManager.DebugFootsteps
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_DebugFootsteps final
{
public:
	bool                                          bShowGrid;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugFootsteps) == 0x000001, "Wrong alignment on RBCheatManager_DebugFootsteps");
static_assert(sizeof(RBCheatManager_DebugFootsteps) == 0x000001, "Wrong size on RBCheatManager_DebugFootsteps");
static_assert(offsetof(RBCheatManager_DebugFootsteps, bShowGrid) == 0x000000, "Member 'RBCheatManager_DebugFootsteps::bShowGrid' has a wrong offset!");

// Function OPP.RBCheatManager.DebugGasPropagation
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_DebugGasPropagation final
{
public:
	bool                                          bForceShowValid;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugGasPropagation) == 0x000001, "Wrong alignment on RBCheatManager_DebugGasPropagation");
static_assert(sizeof(RBCheatManager_DebugGasPropagation) == 0x000001, "Wrong size on RBCheatManager_DebugGasPropagation");
static_assert(offsetof(RBCheatManager_DebugGasPropagation, bForceShowValid) == 0x000000, "Member 'RBCheatManager_DebugGasPropagation::bForceShowValid' has a wrong offset!");

// Function OPP.RBCheatManager.DebugProjectileTrajectory
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_DebugProjectileTrajectory final
{
public:
	bool                                          bForceShowValid;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugProjectileTrajectory) == 0x000001, "Wrong alignment on RBCheatManager_DebugProjectileTrajectory");
static_assert(sizeof(RBCheatManager_DebugProjectileTrajectory) == 0x000001, "Wrong size on RBCheatManager_DebugProjectileTrajectory");
static_assert(offsetof(RBCheatManager_DebugProjectileTrajectory, bForceShowValid) == 0x000000, "Member 'RBCheatManager_DebugProjectileTrajectory::bForceShowValid' has a wrong offset!");

// Function OPP.RBCheatManager.DebugRTPC
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_DebugRTPC final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugRTPC) == 0x000008, "Wrong alignment on RBCheatManager_DebugRTPC");
static_assert(sizeof(RBCheatManager_DebugRTPC) == 0x000010, "Wrong size on RBCheatManager_DebugRTPC");
static_assert(offsetof(RBCheatManager_DebugRTPC, Filter) == 0x000000, "Member 'RBCheatManager_DebugRTPC::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.DebugScheduledSpecialMoveLate
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_DebugScheduledSpecialMoveLate final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugScheduledSpecialMoveLate) == 0x000004, "Wrong alignment on RBCheatManager_DebugScheduledSpecialMoveLate");
static_assert(sizeof(RBCheatManager_DebugScheduledSpecialMoveLate) == 0x000004, "Wrong size on RBCheatManager_DebugScheduledSpecialMoveLate");
static_assert(offsetof(RBCheatManager_DebugScheduledSpecialMoveLate, Time) == 0x000000, "Member 'RBCheatManager_DebugScheduledSpecialMoveLate::Time' has a wrong offset!");

// Function OPP.RBCheatManager.DebugSoundEnvironment
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_DebugSoundEnvironment final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugSoundEnvironment) == 0x000008, "Wrong alignment on RBCheatManager_DebugSoundEnvironment");
static_assert(sizeof(RBCheatManager_DebugSoundEnvironment) == 0x000010, "Wrong size on RBCheatManager_DebugSoundEnvironment");
static_assert(offsetof(RBCheatManager_DebugSoundEnvironment, Filter) == 0x000000, "Member 'RBCheatManager_DebugSoundEnvironment::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.DebugSoundEnvironmentForCloneGroups
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_DebugSoundEnvironmentForCloneGroups final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugSoundEnvironmentForCloneGroups) == 0x000008, "Wrong alignment on RBCheatManager_DebugSoundEnvironmentForCloneGroups");
static_assert(sizeof(RBCheatManager_DebugSoundEnvironmentForCloneGroups) == 0x000010, "Wrong size on RBCheatManager_DebugSoundEnvironmentForCloneGroups");
static_assert(offsetof(RBCheatManager_DebugSoundEnvironmentForCloneGroups, Filter) == 0x000000, "Member 'RBCheatManager_DebugSoundEnvironmentForCloneGroups::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.DebugSoundEnvironmentOnPlayer
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_DebugSoundEnvironmentOnPlayer final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugSoundEnvironmentOnPlayer) == 0x000008, "Wrong alignment on RBCheatManager_DebugSoundEnvironmentOnPlayer");
static_assert(sizeof(RBCheatManager_DebugSoundEnvironmentOnPlayer) == 0x000010, "Wrong size on RBCheatManager_DebugSoundEnvironmentOnPlayer");
static_assert(offsetof(RBCheatManager_DebugSoundEnvironmentOnPlayer, Filter) == 0x000000, "Member 'RBCheatManager_DebugSoundEnvironmentOnPlayer::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.DebugTraps
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_DebugTraps final
{
public:
	bool                                          bShowDisabled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DebugTraps) == 0x000001, "Wrong alignment on RBCheatManager_DebugTraps");
static_assert(sizeof(RBCheatManager_DebugTraps) == 0x000001, "Wrong size on RBCheatManager_DebugTraps");
static_assert(offsetof(RBCheatManager_DebugTraps, bShowDisabled) == 0x000000, "Member 'RBCheatManager_DebugTraps::bShowDisabled' has a wrong offset!");

// Function OPP.RBCheatManager.DelayedBugIt
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_DelayedBugIt final
{
public:
	float                                         DelayInSeconds;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F24[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Description;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DelayedBugIt) == 0x000008, "Wrong alignment on RBCheatManager_DelayedBugIt");
static_assert(sizeof(RBCheatManager_DelayedBugIt) == 0x000018, "Wrong size on RBCheatManager_DelayedBugIt");
static_assert(offsetof(RBCheatManager_DelayedBugIt, DelayInSeconds) == 0x000000, "Member 'RBCheatManager_DelayedBugIt::DelayInSeconds' has a wrong offset!");
static_assert(offsetof(RBCheatManager_DelayedBugIt, Description) == 0x000008, "Member 'RBCheatManager_DelayedBugIt::Description' has a wrong offset!");

// Function OPP.RBCheatManager.DisableActiveSkill
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_DisableActiveSkill final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DisableActiveSkill) == 0x000004, "Wrong alignment on RBCheatManager_DisableActiveSkill");
static_assert(sizeof(RBCheatManager_DisableActiveSkill) == 0x000004, "Wrong size on RBCheatManager_DisableActiveSkill");
static_assert(offsetof(RBCheatManager_DisableActiveSkill, Duration) == 0x000000, "Member 'RBCheatManager_DisableActiveSkill::Duration' has a wrong offset!");

// Function OPP.RBCheatManager.DisableSkelCompTick
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_DisableSkelCompTick final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DisableSkelCompTick) == 0x000008, "Wrong alignment on RBCheatManager_DisableSkelCompTick");
static_assert(sizeof(RBCheatManager_DisableSkelCompTick) == 0x000010, "Wrong size on RBCheatManager_DisableSkelCompTick");
static_assert(offsetof(RBCheatManager_DisableSkelCompTick, Filter) == 0x000000, "Member 'RBCheatManager_DisableSkelCompTick::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.DisconnectOnlineModule
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_DisconnectOnlineModule final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DisconnectOnlineModule) == 0x000008, "Wrong alignment on RBCheatManager_DisconnectOnlineModule");
static_assert(sizeof(RBCheatManager_DisconnectOnlineModule) == 0x000010, "Wrong size on RBCheatManager_DisconnectOnlineModule");
static_assert(offsetof(RBCheatManager_DisconnectOnlineModule, Param_Name) == 0x000000, "Member 'RBCheatManager_DisconnectOnlineModule::Param_Name' has a wrong offset!");

// Function OPP.RBCheatManager.DrawLocXYZ
// 0x000C (0x000C - 0x0000)
struct RBCheatManager_DrawLocXYZ final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DrawLocXYZ) == 0x000004, "Wrong alignment on RBCheatManager_DrawLocXYZ");
static_assert(sizeof(RBCheatManager_DrawLocXYZ) == 0x00000C, "Wrong size on RBCheatManager_DrawLocXYZ");
static_assert(offsetof(RBCheatManager_DrawLocXYZ, X) == 0x000000, "Member 'RBCheatManager_DrawLocXYZ::X' has a wrong offset!");
static_assert(offsetof(RBCheatManager_DrawLocXYZ, Y) == 0x000004, "Member 'RBCheatManager_DrawLocXYZ::Y' has a wrong offset!");
static_assert(offsetof(RBCheatManager_DrawLocXYZ, Z) == 0x000008, "Member 'RBCheatManager_DrawLocXYZ::Z' has a wrong offset!");

// Function OPP.RBCheatManager.DumpWWWStats
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_DumpWWWStats final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_DumpWWWStats) == 0x000008, "Wrong alignment on RBCheatManager_DumpWWWStats");
static_assert(sizeof(RBCheatManager_DumpWWWStats) == 0x000010, "Wrong size on RBCheatManager_DumpWWWStats");
static_assert(offsetof(RBCheatManager_DumpWWWStats, Filename) == 0x000000, "Member 'RBCheatManager_DumpWWWStats::Filename' has a wrong offset!");

// Function OPP.RBCheatManager.EquipOutfit
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_EquipOutfit final
{
public:
	class FString                                 OutfitId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_EquipOutfit) == 0x000008, "Wrong alignment on RBCheatManager_EquipOutfit");
static_assert(sizeof(RBCheatManager_EquipOutfit) == 0x000010, "Wrong size on RBCheatManager_EquipOutfit");
static_assert(offsetof(RBCheatManager_EquipOutfit, OutfitId) == 0x000000, "Member 'RBCheatManager_EquipOutfit::OutfitId' has a wrong offset!");

// Function OPP.RBCheatManager.FeatureSwitchOff
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_FeatureSwitchOff final
{
public:
	class FString                                 FeatureSwitch;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_FeatureSwitchOff) == 0x000008, "Wrong alignment on RBCheatManager_FeatureSwitchOff");
static_assert(sizeof(RBCheatManager_FeatureSwitchOff) == 0x000010, "Wrong size on RBCheatManager_FeatureSwitchOff");
static_assert(offsetof(RBCheatManager_FeatureSwitchOff, FeatureSwitch) == 0x000000, "Member 'RBCheatManager_FeatureSwitchOff::FeatureSwitch' has a wrong offset!");

// Function OPP.RBCheatManager.FeatureSwitchOn
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_FeatureSwitchOn final
{
public:
	class FString                                 FeatureSwitch;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_FeatureSwitchOn) == 0x000008, "Wrong alignment on RBCheatManager_FeatureSwitchOn");
static_assert(sizeof(RBCheatManager_FeatureSwitchOn) == 0x000010, "Wrong size on RBCheatManager_FeatureSwitchOn");
static_assert(offsetof(RBCheatManager_FeatureSwitchOn, FeatureSwitch) == 0x000000, "Member 'RBCheatManager_FeatureSwitchOn::FeatureSwitch' has a wrong offset!");

// Function OPP.RBCheatManager.FeatureSwitchToggle
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_FeatureSwitchToggle final
{
public:
	class FString                                 FeatureSwitch;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_FeatureSwitchToggle) == 0x000008, "Wrong alignment on RBCheatManager_FeatureSwitchToggle");
static_assert(sizeof(RBCheatManager_FeatureSwitchToggle) == 0x000010, "Wrong size on RBCheatManager_FeatureSwitchToggle");
static_assert(offsetof(RBCheatManager_FeatureSwitchToggle, FeatureSwitch) == 0x000000, "Member 'RBCheatManager_FeatureSwitchToggle::FeatureSwitch' has a wrong offset!");

// Function OPP.RBCheatManager.ForceAssignPlayerCell
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_ForceAssignPlayerCell final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ForceAssignPlayerCell) == 0x000004, "Wrong alignment on RBCheatManager_ForceAssignPlayerCell");
static_assert(sizeof(RBCheatManager_ForceAssignPlayerCell) == 0x000004, "Wrong size on RBCheatManager_ForceAssignPlayerCell");
static_assert(offsetof(RBCheatManager_ForceAssignPlayerCell, Param_Index) == 0x000000, "Member 'RBCheatManager_ForceAssignPlayerCell::Param_Index' has a wrong offset!");

// Function OPP.RBCheatManager.ForceGrabsInDirection
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ForceGrabsInDirection final
{
public:
	class FString                                 Direction;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ForceGrabsInDirection) == 0x000008, "Wrong alignment on RBCheatManager_ForceGrabsInDirection");
static_assert(sizeof(RBCheatManager_ForceGrabsInDirection) == 0x000010, "Wrong size on RBCheatManager_ForceGrabsInDirection");
static_assert(offsetof(RBCheatManager_ForceGrabsInDirection, Direction) == 0x000000, "Member 'RBCheatManager_ForceGrabsInDirection::Direction' has a wrong offset!");

// Function OPP.RBCheatManager.ForceHudMode
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_ForceHudMode final
{
public:
	EHudMode                                      HudMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ForceHudMode) == 0x000001, "Wrong alignment on RBCheatManager_ForceHudMode");
static_assert(sizeof(RBCheatManager_ForceHudMode) == 0x000001, "Wrong size on RBCheatManager_ForceHudMode");
static_assert(offsetof(RBCheatManager_ForceHudMode, HudMode) == 0x000000, "Member 'RBCheatManager_ForceHudMode::HudMode' has a wrong offset!");

// Function OPP.RBCheatManager.ForceJoinPlayerSessionErrors
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_ForceJoinPlayerSessionErrors final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ForceJoinPlayerSessionErrors) == 0x000004, "Wrong alignment on RBCheatManager_ForceJoinPlayerSessionErrors");
static_assert(sizeof(RBCheatManager_ForceJoinPlayerSessionErrors) == 0x000004, "Wrong size on RBCheatManager_ForceJoinPlayerSessionErrors");
static_assert(offsetof(RBCheatManager_ForceJoinPlayerSessionErrors, Amount) == 0x000000, "Member 'RBCheatManager_ForceJoinPlayerSessionErrors::Amount' has a wrong offset!");

// Function OPP.RBCheatManager.ForceMovementDesynch
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_ForceMovementDesynch final
{
public:
	float                                         DesyncSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ForceMovementDesynch) == 0x000004, "Wrong alignment on RBCheatManager_ForceMovementDesynch");
static_assert(sizeof(RBCheatManager_ForceMovementDesynch) == 0x000004, "Wrong size on RBCheatManager_ForceMovementDesynch");
static_assert(offsetof(RBCheatManager_ForceMovementDesynch, DesyncSize) == 0x000000, "Member 'RBCheatManager_ForceMovementDesynch::DesyncSize' has a wrong offset!");

// Function OPP.RBCheatManager.ForcePawnAnimOptimLevel
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_ForcePawnAnimOptimLevel final
{
public:
	int32                                         ForcedLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ForcePawnAnimOptimLevel) == 0x000004, "Wrong alignment on RBCheatManager_ForcePawnAnimOptimLevel");
static_assert(sizeof(RBCheatManager_ForcePawnAnimOptimLevel) == 0x000004, "Wrong size on RBCheatManager_ForcePawnAnimOptimLevel");
static_assert(offsetof(RBCheatManager_ForcePawnAnimOptimLevel, ForcedLevel) == 0x000000, "Member 'RBCheatManager_ForcePawnAnimOptimLevel::ForcedLevel' has a wrong offset!");

// Function OPP.RBCheatManager.ForcePreLoginError
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_ForcePreLoginError final
{
public:
	class FString                                 Error;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F25[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCheatManager_ForcePreLoginError) == 0x000008, "Wrong alignment on RBCheatManager_ForcePreLoginError");
static_assert(sizeof(RBCheatManager_ForcePreLoginError) == 0x000018, "Wrong size on RBCheatManager_ForcePreLoginError");
static_assert(offsetof(RBCheatManager_ForcePreLoginError, Error) == 0x000000, "Member 'RBCheatManager_ForcePreLoginError::Error' has a wrong offset!");
static_assert(offsetof(RBCheatManager_ForcePreLoginError, Amount) == 0x000010, "Member 'RBCheatManager_ForcePreLoginError::Amount' has a wrong offset!");

// Function OPP.RBCheatManager.ForceRandomSoundsCycle
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ForceRandomSoundsCycle final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ForceRandomSoundsCycle) == 0x000008, "Wrong alignment on RBCheatManager_ForceRandomSoundsCycle");
static_assert(sizeof(RBCheatManager_ForceRandomSoundsCycle) == 0x000010, "Wrong size on RBCheatManager_ForceRandomSoundsCycle");
static_assert(offsetof(RBCheatManager_ForceRandomSoundsCycle, Filter) == 0x000000, "Member 'RBCheatManager_ForceRandomSoundsCycle::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.ForceRandomState
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_ForceRandomState final
{
public:
	class FString                                 SearchQuery;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateA;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F26[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCheatManager_ForceRandomState) == 0x000008, "Wrong alignment on RBCheatManager_ForceRandomState");
static_assert(sizeof(RBCheatManager_ForceRandomState) == 0x000018, "Wrong size on RBCheatManager_ForceRandomState");
static_assert(offsetof(RBCheatManager_ForceRandomState, SearchQuery) == 0x000000, "Member 'RBCheatManager_ForceRandomState::SearchQuery' has a wrong offset!");
static_assert(offsetof(RBCheatManager_ForceRandomState, bStateA) == 0x000010, "Member 'RBCheatManager_ForceRandomState::bStateA' has a wrong offset!");

// Function OPP.RBCheatManager.ForceUseAllTrapsOfType
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_ForceUseAllTrapsOfType final
{
public:
	EObstacleVariatorType                         TrapType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ForceUseAllTrapsOfType) == 0x000001, "Wrong alignment on RBCheatManager_ForceUseAllTrapsOfType");
static_assert(sizeof(RBCheatManager_ForceUseAllTrapsOfType) == 0x000001, "Wrong size on RBCheatManager_ForceUseAllTrapsOfType");
static_assert(offsetof(RBCheatManager_ForceUseAllTrapsOfType, TrapType) == 0x000000, "Member 'RBCheatManager_ForceUseAllTrapsOfType::TrapType' has a wrong offset!");

// Function OPP.RBCheatManager.GetGoodCharacter
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_GetGoodCharacter final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_GetGoodCharacter) == 0x000004, "Wrong alignment on RBCheatManager_GetGoodCharacter");
static_assert(sizeof(RBCheatManager_GetGoodCharacter) == 0x000004, "Wrong size on RBCheatManager_GetGoodCharacter");
static_assert(offsetof(RBCheatManager_GetGoodCharacter, Level) == 0x000000, "Member 'RBCheatManager_GetGoodCharacter::Level' has a wrong offset!");

// Function OPP.RBCheatManager.HeatmapClampMax
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_HeatmapClampMax final
{
public:
	float                                         Max;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_HeatmapClampMax) == 0x000004, "Wrong alignment on RBCheatManager_HeatmapClampMax");
static_assert(sizeof(RBCheatManager_HeatmapClampMax) == 0x000004, "Wrong size on RBCheatManager_HeatmapClampMax");
static_assert(offsetof(RBCheatManager_HeatmapClampMax, Max) == 0x000000, "Member 'RBCheatManager_HeatmapClampMax::Max' has a wrong offset!");

// Function OPP.RBCheatManager.HeatmapClampMin
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_HeatmapClampMin final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_HeatmapClampMin) == 0x000004, "Wrong alignment on RBCheatManager_HeatmapClampMin");
static_assert(sizeof(RBCheatManager_HeatmapClampMin) == 0x000004, "Wrong size on RBCheatManager_HeatmapClampMin");
static_assert(offsetof(RBCheatManager_HeatmapClampMin, Min) == 0x000000, "Member 'RBCheatManager_HeatmapClampMin::Min' has a wrong offset!");

// Function OPP.RBCheatManager.HitReaction_Dead
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_HitReaction_Dead final
{
public:
	float                                         RelativeAngle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_HitReaction_Dead) == 0x000004, "Wrong alignment on RBCheatManager_HitReaction_Dead");
static_assert(sizeof(RBCheatManager_HitReaction_Dead) == 0x000004, "Wrong size on RBCheatManager_HitReaction_Dead");
static_assert(offsetof(RBCheatManager_HitReaction_Dead, RelativeAngle) == 0x000000, "Member 'RBCheatManager_HitReaction_Dead::RelativeAngle' has a wrong offset!");

// Function OPP.RBCheatManager.HitReaction_Flinch
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_HitReaction_Flinch final
{
public:
	float                                         RelativeAngle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_HitReaction_Flinch) == 0x000004, "Wrong alignment on RBCheatManager_HitReaction_Flinch");
static_assert(sizeof(RBCheatManager_HitReaction_Flinch) == 0x000004, "Wrong size on RBCheatManager_HitReaction_Flinch");
static_assert(offsetof(RBCheatManager_HitReaction_Flinch, RelativeAngle) == 0x000000, "Member 'RBCheatManager_HitReaction_Flinch::RelativeAngle' has a wrong offset!");

// Function OPP.RBCheatManager.HitReaction_Heavy
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_HitReaction_Heavy final
{
public:
	float                                         RelativeAngle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_HitReaction_Heavy) == 0x000004, "Wrong alignment on RBCheatManager_HitReaction_Heavy");
static_assert(sizeof(RBCheatManager_HitReaction_Heavy) == 0x000004, "Wrong size on RBCheatManager_HitReaction_Heavy");
static_assert(offsetof(RBCheatManager_HitReaction_Heavy, RelativeAngle) == 0x000000, "Member 'RBCheatManager_HitReaction_Heavy::RelativeAngle' has a wrong offset!");

// Function OPP.RBCheatManager.HitReaction_Knockdown
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_HitReaction_Knockdown final
{
public:
	float                                         RelativeAngle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_HitReaction_Knockdown) == 0x000004, "Wrong alignment on RBCheatManager_HitReaction_Knockdown");
static_assert(sizeof(RBCheatManager_HitReaction_Knockdown) == 0x000004, "Wrong size on RBCheatManager_HitReaction_Knockdown");
static_assert(offsetof(RBCheatManager_HitReaction_Knockdown, RelativeAngle) == 0x000000, "Member 'RBCheatManager_HitReaction_Knockdown::RelativeAngle' has a wrong offset!");

// Function OPP.RBCheatManager.HitReaction_Light
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_HitReaction_Light final
{
public:
	float                                         RelativeAngle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_HitReaction_Light) == 0x000004, "Wrong alignment on RBCheatManager_HitReaction_Light");
static_assert(sizeof(RBCheatManager_HitReaction_Light) == 0x000004, "Wrong size on RBCheatManager_HitReaction_Light");
static_assert(offsetof(RBCheatManager_HitReaction_Light, RelativeAngle) == 0x000000, "Member 'RBCheatManager_HitReaction_Light::RelativeAngle' has a wrong offset!");

// Function OPP.RBCheatManager.HitReaction_Medium
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_HitReaction_Medium final
{
public:
	float                                         RelativeAngle;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_HitReaction_Medium) == 0x000004, "Wrong alignment on RBCheatManager_HitReaction_Medium");
static_assert(sizeof(RBCheatManager_HitReaction_Medium) == 0x000004, "Wrong size on RBCheatManager_HitReaction_Medium");
static_assert(offsetof(RBCheatManager_HitReaction_Medium, RelativeAngle) == 0x000000, "Member 'RBCheatManager_HitReaction_Medium::RelativeAngle' has a wrong offset!");

// Function OPP.RBCheatManager.HurtSelf
// 0x000C (0x000C - 0x0000)
struct RBCheatManager_HurtSelf final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitReaction;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F27[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HurtType;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_HurtSelf) == 0x000004, "Wrong alignment on RBCheatManager_HurtSelf");
static_assert(sizeof(RBCheatManager_HurtSelf) == 0x00000C, "Wrong size on RBCheatManager_HurtSelf");
static_assert(offsetof(RBCheatManager_HurtSelf, Amount) == 0x000000, "Member 'RBCheatManager_HurtSelf::Amount' has a wrong offset!");
static_assert(offsetof(RBCheatManager_HurtSelf, bHitReaction) == 0x000004, "Member 'RBCheatManager_HurtSelf::bHitReaction' has a wrong offset!");
static_assert(offsetof(RBCheatManager_HurtSelf, HurtType) == 0x000008, "Member 'RBCheatManager_HurtSelf::HurtType' has a wrong offset!");

// Function OPP.RBCheatManager.JoinParty
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_JoinParty final
{
public:
	class FString                                 ProfileId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_JoinParty) == 0x000008, "Wrong alignment on RBCheatManager_JoinParty");
static_assert(sizeof(RBCheatManager_JoinParty) == 0x000010, "Wrong size on RBCheatManager_JoinParty");
static_assert(offsetof(RBCheatManager_JoinParty, ProfileId) == 0x000000, "Member 'RBCheatManager_JoinParty::ProfileId' has a wrong offset!");

// Function OPP.RBCheatManager.keOnDebugActorInView
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_KeOnDebugActorInView final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_KeOnDebugActorInView) == 0x000008, "Wrong alignment on RBCheatManager_KeOnDebugActorInView");
static_assert(sizeof(RBCheatManager_KeOnDebugActorInView) == 0x000010, "Wrong size on RBCheatManager_KeOnDebugActorInView");
static_assert(offsetof(RBCheatManager_KeOnDebugActorInView, Command) == 0x000000, "Member 'RBCheatManager_KeOnDebugActorInView::Command' has a wrong offset!");

// Function OPP.RBCheatManager.keOnDebugActorInViewOnServer
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_KeOnDebugActorInViewOnServer final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_KeOnDebugActorInViewOnServer) == 0x000008, "Wrong alignment on RBCheatManager_KeOnDebugActorInViewOnServer");
static_assert(sizeof(RBCheatManager_KeOnDebugActorInViewOnServer) == 0x000010, "Wrong size on RBCheatManager_KeOnDebugActorInViewOnServer");
static_assert(offsetof(RBCheatManager_KeOnDebugActorInViewOnServer, Command) == 0x000000, "Member 'RBCheatManager_KeOnDebugActorInViewOnServer::Command' has a wrong offset!");

// Function OPP.RBCheatManager.ListAllActiveSoundsInGroup
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_ListAllActiveSoundsInGroup final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ListAllActiveSoundsInGroup) == 0x000004, "Wrong alignment on RBCheatManager_ListAllActiveSoundsInGroup");
static_assert(sizeof(RBCheatManager_ListAllActiveSoundsInGroup) == 0x000008, "Wrong size on RBCheatManager_ListAllActiveSoundsInGroup");
static_assert(offsetof(RBCheatManager_ListAllActiveSoundsInGroup, GroupName) == 0x000000, "Member 'RBCheatManager_ListAllActiveSoundsInGroup::GroupName' has a wrong offset!");

// Function OPP.RBCheatManager.ListAllTickingActors
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ListAllTickingActors final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ListAllTickingActors) == 0x000008, "Wrong alignment on RBCheatManager_ListAllTickingActors");
static_assert(sizeof(RBCheatManager_ListAllTickingActors) == 0x000010, "Wrong size on RBCheatManager_ListAllTickingActors");
static_assert(offsetof(RBCheatManager_ListAllTickingActors, Filter) == 0x000000, "Member 'RBCheatManager_ListAllTickingActors::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.ListTickingSkelComp
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ListTickingSkelComp final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ListTickingSkelComp) == 0x000008, "Wrong alignment on RBCheatManager_ListTickingSkelComp");
static_assert(sizeof(RBCheatManager_ListTickingSkelComp) == 0x000010, "Wrong size on RBCheatManager_ListTickingSkelComp");
static_assert(offsetof(RBCheatManager_ListTickingSkelComp, Filter) == 0x000000, "Member 'RBCheatManager_ListTickingSkelComp::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.LoadHeatmap
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_LoadHeatmap final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_LoadHeatmap) == 0x000008, "Wrong alignment on RBCheatManager_LoadHeatmap");
static_assert(sizeof(RBCheatManager_LoadHeatmap) == 0x000010, "Wrong size on RBCheatManager_LoadHeatmap");
static_assert(offsetof(RBCheatManager_LoadHeatmap, FilePath) == 0x000000, "Member 'RBCheatManager_LoadHeatmap::FilePath' has a wrong offset!");

// Function OPP.RBCheatManager.LoadWWW
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_LoadWWW final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_LoadWWW) == 0x000008, "Wrong alignment on RBCheatManager_LoadWWW");
static_assert(sizeof(RBCheatManager_LoadWWW) == 0x000010, "Wrong size on RBCheatManager_LoadWWW");
static_assert(offsetof(RBCheatManager_LoadWWW, Filename) == 0x000000, "Member 'RBCheatManager_LoadWWW::Filename' has a wrong offset!");

// Function OPP.RBCheatManager.Local_SetInteractibleNetCullDistanceSquared
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_Local_SetInteractibleNetCullDistanceSquared final
{
public:
	float                                         NetCullDistanceSquared;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_Local_SetInteractibleNetCullDistanceSquared) == 0x000004, "Wrong alignment on RBCheatManager_Local_SetInteractibleNetCullDistanceSquared");
static_assert(sizeof(RBCheatManager_Local_SetInteractibleNetCullDistanceSquared) == 0x000004, "Wrong size on RBCheatManager_Local_SetInteractibleNetCullDistanceSquared");
static_assert(offsetof(RBCheatManager_Local_SetInteractibleNetCullDistanceSquared, NetCullDistanceSquared) == 0x000000, "Member 'RBCheatManager_Local_SetInteractibleNetCullDistanceSquared::NetCullDistanceSquared' has a wrong offset!");

// Function OPP.RBCheatManager.Local_SetTriggerableNetCullDistanceSquared
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_Local_SetTriggerableNetCullDistanceSquared final
{
public:
	float                                         NetCullDistanceSquared;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_Local_SetTriggerableNetCullDistanceSquared) == 0x000004, "Wrong alignment on RBCheatManager_Local_SetTriggerableNetCullDistanceSquared");
static_assert(sizeof(RBCheatManager_Local_SetTriggerableNetCullDistanceSquared) == 0x000004, "Wrong size on RBCheatManager_Local_SetTriggerableNetCullDistanceSquared");
static_assert(offsetof(RBCheatManager_Local_SetTriggerableNetCullDistanceSquared, NetCullDistanceSquared) == 0x000000, "Member 'RBCheatManager_Local_SetTriggerableNetCullDistanceSquared::NetCullDistanceSquared' has a wrong offset!");

// Function OPP.RBCheatManager.MulticastCommand
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_MulticastCommand final
{
public:
	class FString                                 InMulticastCommand;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_MulticastCommand) == 0x000008, "Wrong alignment on RBCheatManager_MulticastCommand");
static_assert(sizeof(RBCheatManager_MulticastCommand) == 0x000010, "Wrong size on RBCheatManager_MulticastCommand");
static_assert(offsetof(RBCheatManager_MulticastCommand, InMulticastCommand) == 0x000000, "Member 'RBCheatManager_MulticastCommand::InMulticastCommand' has a wrong offset!");

// Function OPP.RBCheatManager.PlayVO
// 0x0038 (0x0038 - 0x0000)
struct RBCheatManager_PlayVO final
{
public:
	class FString                                 SoundEventName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchGroup;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForcedRandomSeed;                                  // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F28[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCheatManager_PlayVO) == 0x000008, "Wrong alignment on RBCheatManager_PlayVO");
static_assert(sizeof(RBCheatManager_PlayVO) == 0x000038, "Wrong size on RBCheatManager_PlayVO");
static_assert(offsetof(RBCheatManager_PlayVO, SoundEventName) == 0x000000, "Member 'RBCheatManager_PlayVO::SoundEventName' has a wrong offset!");
static_assert(offsetof(RBCheatManager_PlayVO, SwitchGroup) == 0x000010, "Member 'RBCheatManager_PlayVO::SwitchGroup' has a wrong offset!");
static_assert(offsetof(RBCheatManager_PlayVO, SwitchState) == 0x000020, "Member 'RBCheatManager_PlayVO::SwitchState' has a wrong offset!");
static_assert(offsetof(RBCheatManager_PlayVO, ForcedRandomSeed) == 0x000030, "Member 'RBCheatManager_PlayVO::ForcedRandomSeed' has a wrong offset!");

// Function OPP.RBCheatManager.RemoveDebugActorInViewFilter
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_RemoveDebugActorInViewFilter final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_RemoveDebugActorInViewFilter) == 0x000008, "Wrong alignment on RBCheatManager_RemoveDebugActorInViewFilter");
static_assert(sizeof(RBCheatManager_RemoveDebugActorInViewFilter) == 0x000010, "Wrong size on RBCheatManager_RemoveDebugActorInViewFilter");
static_assert(offsetof(RBCheatManager_RemoveDebugActorInViewFilter, Filter) == 0x000000, "Member 'RBCheatManager_RemoveDebugActorInViewFilter::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.RemoveVariator
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_RemoveVariator final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_RemoveVariator) == 0x000008, "Wrong alignment on RBCheatManager_RemoveVariator");
static_assert(sizeof(RBCheatManager_RemoveVariator) == 0x000010, "Wrong size on RBCheatManager_RemoveVariator");
static_assert(offsetof(RBCheatManager_RemoveVariator, Param_Name) == 0x000000, "Member 'RBCheatManager_RemoveVariator::Param_Name' has a wrong offset!");

// Function OPP.RBCheatManager.ResetStageWithSeed
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_ResetStageWithSeed final
{
public:
	int32                                         RandomSeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ResetStageWithSeed) == 0x000004, "Wrong alignment on RBCheatManager_ResetStageWithSeed");
static_assert(sizeof(RBCheatManager_ResetStageWithSeed) == 0x000004, "Wrong size on RBCheatManager_ResetStageWithSeed");
static_assert(offsetof(RBCheatManager_ResetStageWithSeed, RandomSeed) == 0x000000, "Member 'RBCheatManager_ResetStageWithSeed::RandomSeed' has a wrong offset!");

// Function OPP.RBCheatManager.ResetWorldStateWithSeed
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_ResetWorldStateWithSeed final
{
public:
	int32                                         RandomSeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ResetWorldStateWithSeed) == 0x000004, "Wrong alignment on RBCheatManager_ResetWorldStateWithSeed");
static_assert(sizeof(RBCheatManager_ResetWorldStateWithSeed) == 0x000004, "Wrong size on RBCheatManager_ResetWorldStateWithSeed");
static_assert(offsetof(RBCheatManager_ResetWorldStateWithSeed, RandomSeed) == 0x000000, "Member 'RBCheatManager_ResetWorldStateWithSeed::RandomSeed' has a wrong offset!");

// Function OPP.RBCheatManager.RespawnDeadPlayers
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_RespawnDeadPlayers final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_RespawnDeadPlayers) == 0x000001, "Wrong alignment on RBCheatManager_RespawnDeadPlayers");
static_assert(sizeof(RBCheatManager_RespawnDeadPlayers) == 0x000001, "Wrong size on RBCheatManager_RespawnDeadPlayers");
static_assert(offsetof(RBCheatManager_RespawnDeadPlayers, Force) == 0x000000, "Member 'RBCheatManager_RespawnDeadPlayers::Force' has a wrong offset!");

// Function OPP.RBCheatManager.SaveWWW
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SaveWWW final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SaveWWW) == 0x000008, "Wrong alignment on RBCheatManager_SaveWWW");
static_assert(sizeof(RBCheatManager_SaveWWW) == 0x000010, "Wrong size on RBCheatManager_SaveWWW");
static_assert(offsetof(RBCheatManager_SaveWWW, Filename) == 0x000000, "Member 'RBCheatManager_SaveWWW::Filename' has a wrong offset!");

// Function OPP.RBCheatManager.SCE
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SCE final
{
public:
	class FString                                 ServerConsoleEvent;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SCE) == 0x000008, "Wrong alignment on RBCheatManager_SCE");
static_assert(sizeof(RBCheatManager_SCE) == 0x000010, "Wrong size on RBCheatManager_SCE");
static_assert(offsetof(RBCheatManager_SCE, ServerConsoleEvent) == 0x000000, "Member 'RBCheatManager_SCE::ServerConsoleEvent' has a wrong offset!");

// Function OPP.RBCheatManager.SendXPEvent
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_SendXPEvent final
{
public:
	EPlayerEvent                                  EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SendXPEvent) == 0x000001, "Wrong alignment on RBCheatManager_SendXPEvent");
static_assert(sizeof(RBCheatManager_SendXPEvent) == 0x000001, "Wrong size on RBCheatManager_SendXPEvent");
static_assert(offsetof(RBCheatManager_SendXPEvent, EventType) == 0x000000, "Member 'RBCheatManager_SendXPEvent::EventType' has a wrong offset!");

// Function OPP.RBCheatManager.ServerCmd
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ServerCmd final
{
public:
	class FString                                 Param_ServerCmd;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ServerCmd) == 0x000008, "Wrong alignment on RBCheatManager_ServerCmd");
static_assert(sizeof(RBCheatManager_ServerCmd) == 0x000010, "Wrong size on RBCheatManager_ServerCmd");
static_assert(offsetof(RBCheatManager_ServerCmd, Param_ServerCmd) == 0x000000, "Member 'RBCheatManager_ServerCmd::Param_ServerCmd' has a wrong offset!");

// Function OPP.RBCheatManager.SetActiveSkill
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SetActiveSkill final
{
public:
	class FString                                 SkillDisplayName;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetActiveSkill) == 0x000008, "Wrong alignment on RBCheatManager_SetActiveSkill");
static_assert(sizeof(RBCheatManager_SetActiveSkill) == 0x000010, "Wrong size on RBCheatManager_SetActiveSkill");
static_assert(offsetof(RBCheatManager_SetActiveSkill, SkillDisplayName) == 0x000000, "Member 'RBCheatManager_SetActiveSkill::SkillDisplayName' has a wrong offset!");

// Function OPP.RBCheatManager.SetBreadcrumbsLogsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_SetBreadcrumbsLogsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetBreadcrumbsLogsEnabled) == 0x000001, "Wrong alignment on RBCheatManager_SetBreadcrumbsLogsEnabled");
static_assert(sizeof(RBCheatManager_SetBreadcrumbsLogsEnabled) == 0x000001, "Wrong size on RBCheatManager_SetBreadcrumbsLogsEnabled");
static_assert(offsetof(RBCheatManager_SetBreadcrumbsLogsEnabled, bEnabled) == 0x000000, "Member 'RBCheatManager_SetBreadcrumbsLogsEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBCheatManager.SetBudgetPawnsHigh
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetBudgetPawnsHigh final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetBudgetPawnsHigh) == 0x000004, "Wrong alignment on RBCheatManager_SetBudgetPawnsHigh");
static_assert(sizeof(RBCheatManager_SetBudgetPawnsHigh) == 0x000004, "Wrong size on RBCheatManager_SetBudgetPawnsHigh");
static_assert(offsetof(RBCheatManager_SetBudgetPawnsHigh, Value) == 0x000000, "Member 'RBCheatManager_SetBudgetPawnsHigh::Value' has a wrong offset!");

// Function OPP.RBCheatManager.SetBudgetPawnsVeryHigh
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetBudgetPawnsVeryHigh final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetBudgetPawnsVeryHigh) == 0x000004, "Wrong alignment on RBCheatManager_SetBudgetPawnsVeryHigh");
static_assert(sizeof(RBCheatManager_SetBudgetPawnsVeryHigh) == 0x000004, "Wrong size on RBCheatManager_SetBudgetPawnsVeryHigh");
static_assert(offsetof(RBCheatManager_SetBudgetPawnsVeryHigh, Value) == 0x000000, "Member 'RBCheatManager_SetBudgetPawnsVeryHigh::Value' has a wrong offset!");

// Function OPP.RBCheatManager.SetCharacterIcon
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_SetCharacterIcon final
{
public:
	class FName                                   IconId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetCharacterIcon) == 0x000004, "Wrong alignment on RBCheatManager_SetCharacterIcon");
static_assert(sizeof(RBCheatManager_SetCharacterIcon) == 0x000008, "Wrong size on RBCheatManager_SetCharacterIcon");
static_assert(offsetof(RBCheatManager_SetCharacterIcon, IconId) == 0x000000, "Member 'RBCheatManager_SetCharacterIcon::IconId' has a wrong offset!");

// Function OPP.RBCheatManager.SetCharacterLevel
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetCharacterLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetCharacterLevel) == 0x000004, "Wrong alignment on RBCheatManager_SetCharacterLevel");
static_assert(sizeof(RBCheatManager_SetCharacterLevel) == 0x000004, "Wrong size on RBCheatManager_SetCharacterLevel");
static_assert(offsetof(RBCheatManager_SetCharacterLevel, Level) == 0x000000, "Member 'RBCheatManager_SetCharacterLevel::Level' has a wrong offset!");

// Function OPP.RBCheatManager.SetCpulimit
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetCpulimit final
{
public:
	int32                                         Limit;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetCpulimit) == 0x000004, "Wrong alignment on RBCheatManager_SetCpulimit");
static_assert(sizeof(RBCheatManager_SetCpulimit) == 0x000004, "Wrong size on RBCheatManager_SetCpulimit");
static_assert(offsetof(RBCheatManager_SetCpulimit, Limit) == 0x000000, "Member 'RBCheatManager_SetCpulimit::Limit' has a wrong offset!");

// Function OPP.RBCheatManager.SetDebugCameraRotationRatio
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetDebugCameraRotationRatio final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetDebugCameraRotationRatio) == 0x000004, "Wrong alignment on RBCheatManager_SetDebugCameraRotationRatio");
static_assert(sizeof(RBCheatManager_SetDebugCameraRotationRatio) == 0x000004, "Wrong size on RBCheatManager_SetDebugCameraRotationRatio");
static_assert(offsetof(RBCheatManager_SetDebugCameraRotationRatio, Ratio) == 0x000000, "Member 'RBCheatManager_SetDebugCameraRotationRatio::Ratio' has a wrong offset!");

// Function OPP.RBCheatManager.SetDebugForceFeedbackScaling
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_SetDebugForceFeedbackScaling final
{
public:
	float                                         SmallScaling;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LargeScaling;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetDebugForceFeedbackScaling) == 0x000004, "Wrong alignment on RBCheatManager_SetDebugForceFeedbackScaling");
static_assert(sizeof(RBCheatManager_SetDebugForceFeedbackScaling) == 0x000008, "Wrong size on RBCheatManager_SetDebugForceFeedbackScaling");
static_assert(offsetof(RBCheatManager_SetDebugForceFeedbackScaling, SmallScaling) == 0x000000, "Member 'RBCheatManager_SetDebugForceFeedbackScaling::SmallScaling' has a wrong offset!");
static_assert(offsetof(RBCheatManager_SetDebugForceFeedbackScaling, LargeScaling) == 0x000004, "Member 'RBCheatManager_SetDebugForceFeedbackScaling::LargeScaling' has a wrong offset!");

// Function OPP.RBCheatManager.SetFreeCamGamepadLookSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetFreeCamGamepadLookSensitivity final
{
public:
	float                                         Sensitivity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetFreeCamGamepadLookSensitivity) == 0x000004, "Wrong alignment on RBCheatManager_SetFreeCamGamepadLookSensitivity");
static_assert(sizeof(RBCheatManager_SetFreeCamGamepadLookSensitivity) == 0x000004, "Wrong size on RBCheatManager_SetFreeCamGamepadLookSensitivity");
static_assert(offsetof(RBCheatManager_SetFreeCamGamepadLookSensitivity, Sensitivity) == 0x000000, "Member 'RBCheatManager_SetFreeCamGamepadLookSensitivity::Sensitivity' has a wrong offset!");

// Function OPP.RBCheatManager.SetFreeCamMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetFreeCamMouseSensitivity final
{
public:
	float                                         Sensitivity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetFreeCamMouseSensitivity) == 0x000004, "Wrong alignment on RBCheatManager_SetFreeCamMouseSensitivity");
static_assert(sizeof(RBCheatManager_SetFreeCamMouseSensitivity) == 0x000004, "Wrong size on RBCheatManager_SetFreeCamMouseSensitivity");
static_assert(offsetof(RBCheatManager_SetFreeCamMouseSensitivity, Sensitivity) == 0x000000, "Member 'RBCheatManager_SetFreeCamMouseSensitivity::Sensitivity' has a wrong offset!");

// Function OPP.RBCheatManager.SetFreeCamMoveSpeed
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetFreeCamMoveSpeed final
{
public:
	float                                         MovementSpeed;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetFreeCamMoveSpeed) == 0x000004, "Wrong alignment on RBCheatManager_SetFreeCamMoveSpeed");
static_assert(sizeof(RBCheatManager_SetFreeCamMoveSpeed) == 0x000004, "Wrong size on RBCheatManager_SetFreeCamMoveSpeed");
static_assert(offsetof(RBCheatManager_SetFreeCamMoveSpeed, MovementSpeed) == 0x000000, "Member 'RBCheatManager_SetFreeCamMoveSpeed::MovementSpeed' has a wrong offset!");

// Function OPP.RBCheatManager.SetFreeCamPos
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_SetFreeCamPos final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetFreeCamPos) == 0x000004, "Wrong alignment on RBCheatManager_SetFreeCamPos");
static_assert(sizeof(RBCheatManager_SetFreeCamPos) == 0x000018, "Wrong size on RBCheatManager_SetFreeCamPos");
static_assert(offsetof(RBCheatManager_SetFreeCamPos, X) == 0x000000, "Member 'RBCheatManager_SetFreeCamPos::X' has a wrong offset!");
static_assert(offsetof(RBCheatManager_SetFreeCamPos, Y) == 0x000004, "Member 'RBCheatManager_SetFreeCamPos::Y' has a wrong offset!");
static_assert(offsetof(RBCheatManager_SetFreeCamPos, Z) == 0x000008, "Member 'RBCheatManager_SetFreeCamPos::Z' has a wrong offset!");
static_assert(offsetof(RBCheatManager_SetFreeCamPos, Roll) == 0x00000C, "Member 'RBCheatManager_SetFreeCamPos::Roll' has a wrong offset!");
static_assert(offsetof(RBCheatManager_SetFreeCamPos, Pitch) == 0x000010, "Member 'RBCheatManager_SetFreeCamPos::Pitch' has a wrong offset!");
static_assert(offsetof(RBCheatManager_SetFreeCamPos, Yaw) == 0x000014, "Member 'RBCheatManager_SetFreeCamPos::Yaw' has a wrong offset!");

// Function OPP.RBCheatManager.SetGameDifficulty
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SetGameDifficulty final
{
public:
	class FString                                 DifficultyStr;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetGameDifficulty) == 0x000008, "Wrong alignment on RBCheatManager_SetGameDifficulty");
static_assert(sizeof(RBCheatManager_SetGameDifficulty) == 0x000010, "Wrong size on RBCheatManager_SetGameDifficulty");
static_assert(offsetof(RBCheatManager_SetGameDifficulty, DifficultyStr) == 0x000000, "Member 'RBCheatManager_SetGameDifficulty::DifficultyStr' has a wrong offset!");

// Function OPP.RBCheatManager.SetInteractibleNetCullDistanceSquared
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetInteractibleNetCullDistanceSquared final
{
public:
	float                                         NetCullDistanceSquared;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetInteractibleNetCullDistanceSquared) == 0x000004, "Wrong alignment on RBCheatManager_SetInteractibleNetCullDistanceSquared");
static_assert(sizeof(RBCheatManager_SetInteractibleNetCullDistanceSquared) == 0x000004, "Wrong size on RBCheatManager_SetInteractibleNetCullDistanceSquared");
static_assert(offsetof(RBCheatManager_SetInteractibleNetCullDistanceSquared, NetCullDistanceSquared) == 0x000000, "Member 'RBCheatManager_SetInteractibleNetCullDistanceSquared::NetCullDistanceSquared' has a wrong offset!");

// Function OPP.RBCheatManager.SetLevelSeed
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetLevelSeed final
{
public:
	uint32                                        InitSeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetLevelSeed) == 0x000004, "Wrong alignment on RBCheatManager_SetLevelSeed");
static_assert(sizeof(RBCheatManager_SetLevelSeed) == 0x000004, "Wrong size on RBCheatManager_SetLevelSeed");
static_assert(offsetof(RBCheatManager_SetLevelSeed, InitSeed) == 0x000000, "Member 'RBCheatManager_SetLevelSeed::InitSeed' has a wrong offset!");

// Function OPP.RBCheatManager.SetMarketingMode
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_SetMarketingMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetMarketingMode) == 0x000001, "Wrong alignment on RBCheatManager_SetMarketingMode");
static_assert(sizeof(RBCheatManager_SetMarketingMode) == 0x000001, "Wrong size on RBCheatManager_SetMarketingMode");
static_assert(offsetof(RBCheatManager_SetMarketingMode, bEnable) == 0x000000, "Member 'RBCheatManager_SetMarketingMode::bEnable' has a wrong offset!");

// Function OPP.RBCheatManager.SetMaxNumberOfPlayers
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetMaxNumberOfPlayers final
{
public:
	int32                                         MaxNumberOfPlayers;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetMaxNumberOfPlayers) == 0x000004, "Wrong alignment on RBCheatManager_SetMaxNumberOfPlayers");
static_assert(sizeof(RBCheatManager_SetMaxNumberOfPlayers) == 0x000004, "Wrong size on RBCheatManager_SetMaxNumberOfPlayers");
static_assert(offsetof(RBCheatManager_SetMaxNumberOfPlayers, MaxNumberOfPlayers) == 0x000000, "Member 'RBCheatManager_SetMaxNumberOfPlayers::MaxNumberOfPlayers' has a wrong offset!");

// Function OPP.RBCheatManager.SetMaxReservedPlayerSlotsOverride
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetMaxReservedPlayerSlotsOverride final
{
public:
	int32                                         MaxReservedPlayerSlotsOverride;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetMaxReservedPlayerSlotsOverride) == 0x000004, "Wrong alignment on RBCheatManager_SetMaxReservedPlayerSlotsOverride");
static_assert(sizeof(RBCheatManager_SetMaxReservedPlayerSlotsOverride) == 0x000004, "Wrong size on RBCheatManager_SetMaxReservedPlayerSlotsOverride");
static_assert(offsetof(RBCheatManager_SetMaxReservedPlayerSlotsOverride, MaxReservedPlayerSlotsOverride) == 0x000000, "Member 'RBCheatManager_SetMaxReservedPlayerSlotsOverride::MaxReservedPlayerSlotsOverride' has a wrong offset!");

// Function OPP.RBCheatManager.SetNoConnectionTimeout
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_SetNoConnectionTimeout final
{
public:
	bool                                          NoTimeout;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetNoConnectionTimeout) == 0x000001, "Wrong alignment on RBCheatManager_SetNoConnectionTimeout");
static_assert(sizeof(RBCheatManager_SetNoConnectionTimeout) == 0x000001, "Wrong size on RBCheatManager_SetNoConnectionTimeout");
static_assert(offsetof(RBCheatManager_SetNoConnectionTimeout, NoTimeout) == 0x000000, "Member 'RBCheatManager_SetNoConnectionTimeout::NoTimeout' has a wrong offset!");

// Function OPP.RBCheatManager.SetNVBattery
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetNVBattery final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetNVBattery) == 0x000004, "Wrong alignment on RBCheatManager_SetNVBattery");
static_assert(sizeof(RBCheatManager_SetNVBattery) == 0x000004, "Wrong size on RBCheatManager_SetNVBattery");
static_assert(offsetof(RBCheatManager_SetNVBattery, Value) == 0x000000, "Member 'RBCheatManager_SetNVBattery::Value' has a wrong offset!");

// Function OPP.RBCheatManager.SetPlatformPartition
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SetPlatformPartition final
{
public:
	class FString                                 Partition;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetPlatformPartition) == 0x000008, "Wrong alignment on RBCheatManager_SetPlatformPartition");
static_assert(sizeof(RBCheatManager_SetPlatformPartition) == 0x000010, "Wrong size on RBCheatManager_SetPlatformPartition");
static_assert(offsetof(RBCheatManager_SetPlatformPartition, Partition) == 0x000000, "Member 'RBCheatManager_SetPlatformPartition::Partition' has a wrong offset!");

// Function OPP.RBCheatManager.SetPlayerLoadout
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SetPlayerLoadout final
{
public:
	class FString                                 LoadoutCode;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetPlayerLoadout) == 0x000008, "Wrong alignment on RBCheatManager_SetPlayerLoadout");
static_assert(sizeof(RBCheatManager_SetPlayerLoadout) == 0x000010, "Wrong size on RBCheatManager_SetPlayerLoadout");
static_assert(offsetof(RBCheatManager_SetPlayerLoadout, LoadoutCode) == 0x000000, "Member 'RBCheatManager_SetPlayerLoadout::LoadoutCode' has a wrong offset!");

// Function OPP.RBCheatManager.SetServerAnimTickOptimsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_SetServerAnimTickOptimsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetServerAnimTickOptimsEnabled) == 0x000001, "Wrong alignment on RBCheatManager_SetServerAnimTickOptimsEnabled");
static_assert(sizeof(RBCheatManager_SetServerAnimTickOptimsEnabled) == 0x000001, "Wrong size on RBCheatManager_SetServerAnimTickOptimsEnabled");
static_assert(offsetof(RBCheatManager_SetServerAnimTickOptimsEnabled, bEnabled) == 0x000000, "Member 'RBCheatManager_SetServerAnimTickOptimsEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBCheatManager.SetServerPartition
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SetServerPartition final
{
public:
	class FString                                 Partition;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetServerPartition) == 0x000008, "Wrong alignment on RBCheatManager_SetServerPartition");
static_assert(sizeof(RBCheatManager_SetServerPartition) == 0x000010, "Wrong size on RBCheatManager_SetServerPartition");
static_assert(offsetof(RBCheatManager_SetServerPartition, Partition) == 0x000000, "Member 'RBCheatManager_SetServerPartition::Partition' has a wrong offset!");

// Function OPP.RBCheatManager.SetSoloMode
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_SetSoloMode final
{
public:
	bool                                          bSoloMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetSoloMode) == 0x000001, "Wrong alignment on RBCheatManager_SetSoloMode");
static_assert(sizeof(RBCheatManager_SetSoloMode) == 0x000001, "Wrong size on RBCheatManager_SetSoloMode");
static_assert(offsetof(RBCheatManager_SetSoloMode, bSoloMode) == 0x000000, "Member 'RBCheatManager_SetSoloMode::bSoloMode' has a wrong offset!");

// Function OPP.RBCheatManager.SetSubtitleSize
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_SetSubtitleSize final
{
public:
	EUIFontSize                                   Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetSubtitleSize) == 0x000001, "Wrong alignment on RBCheatManager_SetSubtitleSize");
static_assert(sizeof(RBCheatManager_SetSubtitleSize) == 0x000001, "Wrong size on RBCheatManager_SetSubtitleSize");
static_assert(offsetof(RBCheatManager_SetSubtitleSize, Size) == 0x000000, "Member 'RBCheatManager_SetSubtitleSize::Size' has a wrong offset!");

// Function OPP.RBCheatManager.SetTrialChain
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SetTrialChain final
{
public:
	class FString                                 TrialChainName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetTrialChain) == 0x000008, "Wrong alignment on RBCheatManager_SetTrialChain");
static_assert(sizeof(RBCheatManager_SetTrialChain) == 0x000010, "Wrong size on RBCheatManager_SetTrialChain");
static_assert(offsetof(RBCheatManager_SetTrialChain, TrialChainName) == 0x000000, "Member 'RBCheatManager_SetTrialChain::TrialChainName' has a wrong offset!");

// Function OPP.RBCheatManager.SetTrialCompleted
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_SetTrialCompleted final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetTrialCompleted) == 0x000004, "Wrong alignment on RBCheatManager_SetTrialCompleted");
static_assert(sizeof(RBCheatManager_SetTrialCompleted) == 0x000008, "Wrong size on RBCheatManager_SetTrialCompleted");
static_assert(offsetof(RBCheatManager_SetTrialCompleted, TrialId) == 0x000000, "Member 'RBCheatManager_SetTrialCompleted::TrialId' has a wrong offset!");

// Function OPP.RBCheatManager.SetTrialsCompletedCount
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetTrialsCompletedCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetTrialsCompletedCount) == 0x000004, "Wrong alignment on RBCheatManager_SetTrialsCompletedCount");
static_assert(sizeof(RBCheatManager_SetTrialsCompletedCount) == 0x000004, "Wrong size on RBCheatManager_SetTrialsCompletedCount");
static_assert(offsetof(RBCheatManager_SetTrialsCompletedCount, Count) == 0x000000, "Member 'RBCheatManager_SetTrialsCompletedCount::Count' has a wrong offset!");

// Function OPP.RBCheatManager.SetTriggerableNetCullDistanceSquared
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_SetTriggerableNetCullDistanceSquared final
{
public:
	float                                         NetCullDistanceSquared;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetTriggerableNetCullDistanceSquared) == 0x000004, "Wrong alignment on RBCheatManager_SetTriggerableNetCullDistanceSquared");
static_assert(sizeof(RBCheatManager_SetTriggerableNetCullDistanceSquared) == 0x000004, "Wrong size on RBCheatManager_SetTriggerableNetCullDistanceSquared");
static_assert(offsetof(RBCheatManager_SetTriggerableNetCullDistanceSquared, NetCullDistanceSquared) == 0x000000, "Member 'RBCheatManager_SetTriggerableNetCullDistanceSquared::NetCullDistanceSquared' has a wrong offset!");

// Function OPP.RBCheatManager.SetTutorialSize
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_SetTutorialSize final
{
public:
	EUIFontSize                                   Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetTutorialSize) == 0x000001, "Wrong alignment on RBCheatManager_SetTutorialSize");
static_assert(sizeof(RBCheatManager_SetTutorialSize) == 0x000001, "Wrong size on RBCheatManager_SetTutorialSize");
static_assert(offsetof(RBCheatManager_SetTutorialSize, Size) == 0x000000, "Member 'RBCheatManager_SetTutorialSize::Size' has a wrong offset!");

// Function OPP.RBCheatManager.SetVOSwitch
// 0x0020 (0x0020 - 0x0000)
struct RBCheatManager_SetVOSwitch final
{
public:
	class FString                                 SwitchGroup;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SwitchState;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SetVOSwitch) == 0x000008, "Wrong alignment on RBCheatManager_SetVOSwitch");
static_assert(sizeof(RBCheatManager_SetVOSwitch) == 0x000020, "Wrong size on RBCheatManager_SetVOSwitch");
static_assert(offsetof(RBCheatManager_SetVOSwitch, SwitchGroup) == 0x000000, "Member 'RBCheatManager_SetVOSwitch::SwitchGroup' has a wrong offset!");
static_assert(offsetof(RBCheatManager_SetVOSwitch, SwitchState) == 0x000010, "Member 'RBCheatManager_SetVOSwitch::SwitchState' has a wrong offset!");

// Function OPP.RBCheatManager.ShowAll
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ShowAll final
{
public:
	class FString                                 SearchQuery;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ShowAll) == 0x000008, "Wrong alignment on RBCheatManager_ShowAll");
static_assert(sizeof(RBCheatManager_ShowAll) == 0x000010, "Wrong size on RBCheatManager_ShowAll");
static_assert(offsetof(RBCheatManager_ShowAll, SearchQuery) == 0x000000, "Member 'RBCheatManager_ShowAll::SearchQuery' has a wrong offset!");

// Function OPP.RBCheatManager.ShowAllItems
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_ShowAllItems final
{
public:
	EItemType                                     ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ShowAllItems) == 0x000001, "Wrong alignment on RBCheatManager_ShowAllItems");
static_assert(sizeof(RBCheatManager_ShowAllItems) == 0x000001, "Wrong size on RBCheatManager_ShowAllItems");
static_assert(offsetof(RBCheatManager_ShowAllItems, ItemType) == 0x000000, "Member 'RBCheatManager_ShowAllItems::ItemType' has a wrong offset!");

// Function OPP.RBCheatManager.ShowBadgeNotification
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ShowBadgeNotification final
{
public:
	class FString                                 BadgeId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ShowBadgeNotification) == 0x000008, "Wrong alignment on RBCheatManager_ShowBadgeNotification");
static_assert(sizeof(RBCheatManager_ShowBadgeNotification) == 0x000010, "Wrong size on RBCheatManager_ShowBadgeNotification");
static_assert(offsetof(RBCheatManager_ShowBadgeNotification, BadgeId) == 0x000000, "Member 'RBCheatManager_ShowBadgeNotification::BadgeId' has a wrong offset!");

// Function OPP.RBCheatManager.ShowEndOfStageScreen
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_ShowEndOfStageScreen final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ShowEndOfStageScreen) == 0x000001, "Wrong alignment on RBCheatManager_ShowEndOfStageScreen");
static_assert(sizeof(RBCheatManager_ShowEndOfStageScreen) == 0x000001, "Wrong size on RBCheatManager_ShowEndOfStageScreen");
static_assert(offsetof(RBCheatManager_ShowEndOfStageScreen, bSuccess) == 0x000000, "Member 'RBCheatManager_ShowEndOfStageScreen::bSuccess' has a wrong offset!");

// Function OPP.RBCheatManager.ShowError
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_ShowError final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Facility;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Code;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ShowError) == 0x000008, "Wrong alignment on RBCheatManager_ShowError");
static_assert(sizeof(RBCheatManager_ShowError) == 0x000018, "Wrong size on RBCheatManager_ShowError");
static_assert(offsetof(RBCheatManager_ShowError, Message) == 0x000000, "Member 'RBCheatManager_ShowError::Message' has a wrong offset!");
static_assert(offsetof(RBCheatManager_ShowError, Facility) == 0x000010, "Member 'RBCheatManager_ShowError::Facility' has a wrong offset!");
static_assert(offsetof(RBCheatManager_ShowError, Code) == 0x000014, "Member 'RBCheatManager_ShowError::Code' has a wrong offset!");

// Function OPP.RBCheatManager.ShowFirstPartyStore
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ShowFirstPartyStore final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ShowFirstPartyStore) == 0x000008, "Wrong alignment on RBCheatManager_ShowFirstPartyStore");
static_assert(sizeof(RBCheatManager_ShowFirstPartyStore) == 0x000010, "Wrong size on RBCheatManager_ShowFirstPartyStore");
static_assert(offsetof(RBCheatManager_ShowFirstPartyStore, ProductId) == 0x000000, "Member 'RBCheatManager_ShowFirstPartyStore::ProductId' has a wrong offset!");

// Function OPP.RBCheatManager.ShowHudGameMessage
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ShowHudGameMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ShowHudGameMessage) == 0x000008, "Wrong alignment on RBCheatManager_ShowHudGameMessage");
static_assert(sizeof(RBCheatManager_ShowHudGameMessage) == 0x000010, "Wrong size on RBCheatManager_ShowHudGameMessage");
static_assert(offsetof(RBCheatManager_ShowHudGameMessage, Message) == 0x000000, "Member 'RBCheatManager_ShowHudGameMessage::Message' has a wrong offset!");

// Function OPP.RBCheatManager.ShowQuickGraph
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ShowQuickGraph final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ShowQuickGraph) == 0x000008, "Wrong alignment on RBCheatManager_ShowQuickGraph");
static_assert(sizeof(RBCheatManager_ShowQuickGraph) == 0x000010, "Wrong size on RBCheatManager_ShowQuickGraph");
static_assert(offsetof(RBCheatManager_ShowQuickGraph, Filter) == 0x000000, "Member 'RBCheatManager_ShowQuickGraph::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.ShowWorldOctreeObjects
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_ShowWorldOctreeObjects final
{
public:
	EDebugWorldOctreeObjectType                   ObjectType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F29[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ShowWorldOctreeObjects) == 0x000004, "Wrong alignment on RBCheatManager_ShowWorldOctreeObjects");
static_assert(sizeof(RBCheatManager_ShowWorldOctreeObjects) == 0x000008, "Wrong size on RBCheatManager_ShowWorldOctreeObjects");
static_assert(offsetof(RBCheatManager_ShowWorldOctreeObjects, ObjectType) == 0x000000, "Member 'RBCheatManager_ShowWorldOctreeObjects::ObjectType' has a wrong offset!");
static_assert(offsetof(RBCheatManager_ShowWorldOctreeObjects, Range) == 0x000004, "Member 'RBCheatManager_ShowWorldOctreeObjects::Range' has a wrong offset!");

// Function OPP.RBCheatManager.SpawnAI
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SpawnAI final
{
public:
	class FString                                 CheatName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SpawnAI) == 0x000008, "Wrong alignment on RBCheatManager_SpawnAI");
static_assert(sizeof(RBCheatManager_SpawnAI) == 0x000010, "Wrong size on RBCheatManager_SpawnAI");
static_assert(offsetof(RBCheatManager_SpawnAI, CheatName) == 0x000000, "Member 'RBCheatManager_SpawnAI::CheatName' has a wrong offset!");

// Function OPP.RBCheatManager.SpawnFollowAI
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SpawnFollowAI final
{
public:
	class FString                                 CheatName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SpawnFollowAI) == 0x000008, "Wrong alignment on RBCheatManager_SpawnFollowAI");
static_assert(sizeof(RBCheatManager_SpawnFollowAI) == 0x000010, "Wrong size on RBCheatManager_SpawnFollowAI");
static_assert(offsetof(RBCheatManager_SpawnFollowAI, CheatName) == 0x000000, "Member 'RBCheatManager_SpawnFollowAI::CheatName' has a wrong offset!");

// Function OPP.RBCheatManager.SpawnGuard
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SpawnGuard final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SpawnGuard) == 0x000008, "Wrong alignment on RBCheatManager_SpawnGuard");
static_assert(sizeof(RBCheatManager_SpawnGuard) == 0x000010, "Wrong size on RBCheatManager_SpawnGuard");
static_assert(offsetof(RBCheatManager_SpawnGuard, Options) == 0x000000, "Member 'RBCheatManager_SpawnGuard::Options' has a wrong offset!");

// Function OPP.RBCheatManager.SpawnLargePickup
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SpawnLargePickup final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SpawnLargePickup) == 0x000008, "Wrong alignment on RBCheatManager_SpawnLargePickup");
static_assert(sizeof(RBCheatManager_SpawnLargePickup) == 0x000010, "Wrong size on RBCheatManager_SpawnLargePickup");
static_assert(offsetof(RBCheatManager_SpawnLargePickup, ItemName) == 0x000000, "Member 'RBCheatManager_SpawnLargePickup::ItemName' has a wrong offset!");

// Function OPP.RBCheatManager.SpawnMultipleLargePickups
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_SpawnMultipleLargePickups final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfCopy;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2A[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCheatManager_SpawnMultipleLargePickups) == 0x000008, "Wrong alignment on RBCheatManager_SpawnMultipleLargePickups");
static_assert(sizeof(RBCheatManager_SpawnMultipleLargePickups) == 0x000018, "Wrong size on RBCheatManager_SpawnMultipleLargePickups");
static_assert(offsetof(RBCheatManager_SpawnMultipleLargePickups, ItemName) == 0x000000, "Member 'RBCheatManager_SpawnMultipleLargePickups::ItemName' has a wrong offset!");
static_assert(offsetof(RBCheatManager_SpawnMultipleLargePickups, NumberOfCopy) == 0x000010, "Member 'RBCheatManager_SpawnMultipleLargePickups::NumberOfCopy' has a wrong offset!");

// Function OPP.RBCheatManager.SpawnScientist
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_SpawnScientist final
{
public:
	class FString                                 Options;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_SpawnScientist) == 0x000008, "Wrong alignment on RBCheatManager_SpawnScientist");
static_assert(sizeof(RBCheatManager_SpawnScientist) == 0x000010, "Wrong size on RBCheatManager_SpawnScientist");
static_assert(offsetof(RBCheatManager_SpawnScientist, Options) == 0x000000, "Member 'RBCheatManager_SpawnScientist::Options' has a wrong offset!");

// Function OPP.RBCheatManager.StartObjectiveCoordinator
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_StartObjectiveCoordinator final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_StartObjectiveCoordinator) == 0x000008, "Wrong alignment on RBCheatManager_StartObjectiveCoordinator");
static_assert(sizeof(RBCheatManager_StartObjectiveCoordinator) == 0x000010, "Wrong size on RBCheatManager_StartObjectiveCoordinator");
static_assert(offsetof(RBCheatManager_StartObjectiveCoordinator, Param_Name) == 0x000000, "Member 'RBCheatManager_StartObjectiveCoordinator::Param_Name' has a wrong offset!");

// Function OPP.RBCheatManager.TeleportAtLocation
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_TeleportAtLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_TeleportAtLocation) == 0x000004, "Wrong alignment on RBCheatManager_TeleportAtLocation");
static_assert(sizeof(RBCheatManager_TeleportAtLocation) == 0x000018, "Wrong size on RBCheatManager_TeleportAtLocation");
static_assert(offsetof(RBCheatManager_TeleportAtLocation, X) == 0x000000, "Member 'RBCheatManager_TeleportAtLocation::X' has a wrong offset!");
static_assert(offsetof(RBCheatManager_TeleportAtLocation, Y) == 0x000004, "Member 'RBCheatManager_TeleportAtLocation::Y' has a wrong offset!");
static_assert(offsetof(RBCheatManager_TeleportAtLocation, Z) == 0x000008, "Member 'RBCheatManager_TeleportAtLocation::Z' has a wrong offset!");
static_assert(offsetof(RBCheatManager_TeleportAtLocation, Pitch) == 0x00000C, "Member 'RBCheatManager_TeleportAtLocation::Pitch' has a wrong offset!");
static_assert(offsetof(RBCheatManager_TeleportAtLocation, Yaw) == 0x000010, "Member 'RBCheatManager_TeleportAtLocation::Yaw' has a wrong offset!");
static_assert(offsetof(RBCheatManager_TeleportAtLocation, Roll) == 0x000014, "Member 'RBCheatManager_TeleportAtLocation::Roll' has a wrong offset!");

// Function OPP.RBCheatManager.ToggleAll
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_ToggleAll final
{
public:
	class FString                                 SearchQuery;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateA;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCheatManager_ToggleAll) == 0x000008, "Wrong alignment on RBCheatManager_ToggleAll");
static_assert(sizeof(RBCheatManager_ToggleAll) == 0x000018, "Wrong size on RBCheatManager_ToggleAll");
static_assert(offsetof(RBCheatManager_ToggleAll, SearchQuery) == 0x000000, "Member 'RBCheatManager_ToggleAll::SearchQuery' has a wrong offset!");
static_assert(offsetof(RBCheatManager_ToggleAll, bStateA) == 0x000010, "Member 'RBCheatManager_ToggleAll::bStateA' has a wrong offset!");

// Function OPP.RBCheatManager.ToggleAnimationLog
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ToggleAnimationLog final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ToggleAnimationLog) == 0x000008, "Wrong alignment on RBCheatManager_ToggleAnimationLog");
static_assert(sizeof(RBCheatManager_ToggleAnimationLog) == 0x000010, "Wrong size on RBCheatManager_ToggleAnimationLog");
static_assert(offsetof(RBCheatManager_ToggleAnimationLog, Filter) == 0x000000, "Member 'RBCheatManager_ToggleAnimationLog::Filter' has a wrong offset!");

// Function OPP.RBCheatManager.ToggleReplacementSound
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ToggleReplacementSound final
{
public:
	class FString                                 SoundEventName;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ToggleReplacementSound) == 0x000008, "Wrong alignment on RBCheatManager_ToggleReplacementSound");
static_assert(sizeof(RBCheatManager_ToggleReplacementSound) == 0x000010, "Wrong size on RBCheatManager_ToggleReplacementSound");
static_assert(offsetof(RBCheatManager_ToggleReplacementSound, SoundEventName) == 0x000000, "Member 'RBCheatManager_ToggleReplacementSound::SoundEventName' has a wrong offset!");

// Function OPP.RBCheatManager.ToggleVariator
// 0x0010 (0x0010 - 0x0000)
struct RBCheatManager_ToggleVariator final
{
public:
	class FString                                 VariatorName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_ToggleVariator) == 0x000008, "Wrong alignment on RBCheatManager_ToggleVariator");
static_assert(sizeof(RBCheatManager_ToggleVariator) == 0x000010, "Wrong size on RBCheatManager_ToggleVariator");
static_assert(offsetof(RBCheatManager_ToggleVariator, VariatorName) == 0x000000, "Member 'RBCheatManager_ToggleVariator::VariatorName' has a wrong offset!");

// Function OPP.RBCheatManager.TriggerAIEvent
// 0x0001 (0x0001 - 0x0000)
struct RBCheatManager_TriggerAIEvent final
{
public:
	EAIEvent                                      AIEvent;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_TriggerAIEvent) == 0x000001, "Wrong alignment on RBCheatManager_TriggerAIEvent");
static_assert(sizeof(RBCheatManager_TriggerAIEvent) == 0x000001, "Wrong size on RBCheatManager_TriggerAIEvent");
static_assert(offsetof(RBCheatManager_TriggerAIEvent, AIEvent) == 0x000000, "Member 'RBCheatManager_TriggerAIEvent::AIEvent' has a wrong offset!");

// Function OPP.RBCheatManager.TriggerForceFeedback
// 0x0018 (0x0018 - 0x0000)
struct RBCheatManager_TriggerForceFeedback final
{
public:
	class FString                                 TypeName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCheatManager_TriggerForceFeedback) == 0x000008, "Wrong alignment on RBCheatManager_TriggerForceFeedback");
static_assert(sizeof(RBCheatManager_TriggerForceFeedback) == 0x000018, "Wrong size on RBCheatManager_TriggerForceFeedback");
static_assert(offsetof(RBCheatManager_TriggerForceFeedback, TypeName) == 0x000000, "Member 'RBCheatManager_TriggerForceFeedback::TypeName' has a wrong offset!");
static_assert(offsetof(RBCheatManager_TriggerForceFeedback, bLoop) == 0x000010, "Member 'RBCheatManager_TriggerForceFeedback::bLoop' has a wrong offset!");

// Function OPP.RBCheatManager.TriggerPeriodicHazard
// 0x0004 (0x0004 - 0x0000)
struct RBCheatManager_TriggerPeriodicHazard final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_TriggerPeriodicHazard) == 0x000004, "Wrong alignment on RBCheatManager_TriggerPeriodicHazard");
static_assert(sizeof(RBCheatManager_TriggerPeriodicHazard) == 0x000004, "Wrong size on RBCheatManager_TriggerPeriodicHazard");
static_assert(offsetof(RBCheatManager_TriggerPeriodicHazard, Delay) == 0x000000, "Member 'RBCheatManager_TriggerPeriodicHazard::Delay' has a wrong offset!");

// Function OPP.RBCheatManager.UpdateStatistic
// 0x0008 (0x0008 - 0x0000)
struct RBCheatManager_UpdateStatistic final
{
public:
	EPlayerStat                                   PlayerStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F2D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCheatManager_UpdateStatistic) == 0x000004, "Wrong alignment on RBCheatManager_UpdateStatistic");
static_assert(sizeof(RBCheatManager_UpdateStatistic) == 0x000008, "Wrong size on RBCheatManager_UpdateStatistic");
static_assert(offsetof(RBCheatManager_UpdateStatistic, PlayerStat) == 0x000000, "Member 'RBCheatManager_UpdateStatistic::PlayerStat' has a wrong offset!");
static_assert(offsetof(RBCheatManager_UpdateStatistic, Value) == 0x000004, "Member 'RBCheatManager_UpdateStatistic::Value' has a wrong offset!");

// Function OPP.RBTasksConfig.FindTaskData
// 0x0010 (0x0010 - 0x0000)
struct RBTasksConfig_FindTaskData final
{
public:
	class FName                                   TaskId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBTaskData*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTasksConfig_FindTaskData) == 0x000008, "Wrong alignment on RBTasksConfig_FindTaskData");
static_assert(sizeof(RBTasksConfig_FindTaskData) == 0x000010, "Wrong size on RBTasksConfig_FindTaskData");
static_assert(offsetof(RBTasksConfig_FindTaskData, TaskId) == 0x000000, "Member 'RBTasksConfig_FindTaskData::TaskId' has a wrong offset!");
static_assert(offsetof(RBTasksConfig_FindTaskData, ReturnValue) == 0x000008, "Member 'RBTasksConfig_FindTaskData::ReturnValue' has a wrong offset!");

// Function OPP.RBChemicalZone.OnActorEnterZone
// 0x0010 (0x0010 - 0x0000)
struct RBChemicalZone_OnActorEnterZone final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChemicalZone_OnActorEnterZone) == 0x000008, "Wrong alignment on RBChemicalZone_OnActorEnterZone");
static_assert(sizeof(RBChemicalZone_OnActorEnterZone) == 0x000010, "Wrong size on RBChemicalZone_OnActorEnterZone");
static_assert(offsetof(RBChemicalZone_OnActorEnterZone, OverlappedActor) == 0x000000, "Member 'RBChemicalZone_OnActorEnterZone::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBChemicalZone_OnActorEnterZone, OtherActor) == 0x000008, "Member 'RBChemicalZone_OnActorEnterZone::OtherActor' has a wrong offset!");

// Function OPP.RBChemicalZone.OnActorExitZone
// 0x0010 (0x0010 - 0x0000)
struct RBChemicalZone_OnActorExitZone final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChemicalZone_OnActorExitZone) == 0x000008, "Wrong alignment on RBChemicalZone_OnActorExitZone");
static_assert(sizeof(RBChemicalZone_OnActorExitZone) == 0x000010, "Wrong size on RBChemicalZone_OnActorExitZone");
static_assert(offsetof(RBChemicalZone_OnActorExitZone, OverlappedActor) == 0x000000, "Member 'RBChemicalZone_OnActorExitZone::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBChemicalZone_OnActorExitZone, OtherActor) == 0x000008, "Member 'RBChemicalZone_OnActorExitZone::OtherActor' has a wrong offset!");

// Function OPP.RBChemicalZone.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBChemicalZone_SetEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChemicalZone_SetEnabled) == 0x000001, "Wrong alignment on RBChemicalZone_SetEnabled");
static_assert(sizeof(RBChemicalZone_SetEnabled) == 0x000001, "Wrong size on RBChemicalZone_SetEnabled");
static_assert(offsetof(RBChemicalZone_SetEnabled, bEnable) == 0x000000, "Member 'RBChemicalZone_SetEnabled::bEnable' has a wrong offset!");

// Function OPP.RBChessBoard.GetLocalPanel
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoard_GetLocalPanel final
{
public:
	class URBChessBoardPanelComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetLocalPanel) == 0x000008, "Wrong alignment on RBChessBoard_GetLocalPanel");
static_assert(sizeof(RBChessBoard_GetLocalPanel) == 0x000008, "Wrong size on RBChessBoard_GetLocalPanel");
static_assert(offsetof(RBChessBoard_GetLocalPanel, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetLocalPanel::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetLocalPositionForCoord
// 0x0014 (0x0014 - 0x0000)
struct RBChessBoard_GetLocalPositionForCoord final
{
public:
	struct FIntPoint                              Coord;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetLocalPositionForCoord) == 0x000004, "Wrong alignment on RBChessBoard_GetLocalPositionForCoord");
static_assert(sizeof(RBChessBoard_GetLocalPositionForCoord) == 0x000014, "Wrong size on RBChessBoard_GetLocalPositionForCoord");
static_assert(offsetof(RBChessBoard_GetLocalPositionForCoord, Coord) == 0x000000, "Member 'RBChessBoard_GetLocalPositionForCoord::Coord' has a wrong offset!");
static_assert(offsetof(RBChessBoard_GetLocalPositionForCoord, ReturnValue) == 0x000008, "Member 'RBChessBoard_GetLocalPositionForCoord::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetMatchesLost
// 0x0004 (0x0004 - 0x0000)
struct RBChessBoard_GetMatchesLost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetMatchesLost) == 0x000004, "Wrong alignment on RBChessBoard_GetMatchesLost");
static_assert(sizeof(RBChessBoard_GetMatchesLost) == 0x000004, "Wrong size on RBChessBoard_GetMatchesLost");
static_assert(offsetof(RBChessBoard_GetMatchesLost, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetMatchesLost::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetMatchesWon
// 0x0004 (0x0004 - 0x0000)
struct RBChessBoard_GetMatchesWon final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetMatchesWon) == 0x000004, "Wrong alignment on RBChessBoard_GetMatchesWon");
static_assert(sizeof(RBChessBoard_GetMatchesWon) == 0x000004, "Wrong size on RBChessBoard_GetMatchesWon");
static_assert(offsetof(RBChessBoard_GetMatchesWon, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetMatchesWon::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetOpponentMatchesLost
// 0x0004 (0x0004 - 0x0000)
struct RBChessBoard_GetOpponentMatchesLost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetOpponentMatchesLost) == 0x000004, "Wrong alignment on RBChessBoard_GetOpponentMatchesLost");
static_assert(sizeof(RBChessBoard_GetOpponentMatchesLost) == 0x000004, "Wrong size on RBChessBoard_GetOpponentMatchesLost");
static_assert(offsetof(RBChessBoard_GetOpponentMatchesLost, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetOpponentMatchesLost::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetOpponentMatchesWon
// 0x0004 (0x0004 - 0x0000)
struct RBChessBoard_GetOpponentMatchesWon final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetOpponentMatchesWon) == 0x000004, "Wrong alignment on RBChessBoard_GetOpponentMatchesWon");
static_assert(sizeof(RBChessBoard_GetOpponentMatchesWon) == 0x000004, "Wrong size on RBChessBoard_GetOpponentMatchesWon");
static_assert(offsetof(RBChessBoard_GetOpponentMatchesWon, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetOpponentMatchesWon::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetOpponentPanel
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoard_GetOpponentPanel final
{
public:
	class URBChessBoardPanelComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetOpponentPanel) == 0x000008, "Wrong alignment on RBChessBoard_GetOpponentPanel");
static_assert(sizeof(RBChessBoard_GetOpponentPanel) == 0x000008, "Wrong size on RBChessBoard_GetOpponentPanel");
static_assert(offsetof(RBChessBoard_GetOpponentPanel, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetOpponentPanel::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetOpponentPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoard_GetOpponentPlayer final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetOpponentPlayer) == 0x000008, "Wrong alignment on RBChessBoard_GetOpponentPlayer");
static_assert(sizeof(RBChessBoard_GetOpponentPlayer) == 0x000008, "Wrong size on RBChessBoard_GetOpponentPlayer");
static_assert(offsetof(RBChessBoard_GetOpponentPlayer, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetOpponentPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetOpponentRating
// 0x0004 (0x0004 - 0x0000)
struct RBChessBoard_GetOpponentRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetOpponentRating) == 0x000004, "Wrong alignment on RBChessBoard_GetOpponentRating");
static_assert(sizeof(RBChessBoard_GetOpponentRating) == 0x000004, "Wrong size on RBChessBoard_GetOpponentRating");
static_assert(offsetof(RBChessBoard_GetOpponentRating, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetOpponentRating::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetPossibleCoordsForPiece
// 0x0018 (0x0018 - 0x0000)
struct RBChessBoard_GetPossibleCoordsForPiece final
{
public:
	class URBChessPieceComponent*                 ChessPiece;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIntPoint>                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetPossibleCoordsForPiece) == 0x000008, "Wrong alignment on RBChessBoard_GetPossibleCoordsForPiece");
static_assert(sizeof(RBChessBoard_GetPossibleCoordsForPiece) == 0x000018, "Wrong size on RBChessBoard_GetPossibleCoordsForPiece");
static_assert(offsetof(RBChessBoard_GetPossibleCoordsForPiece, ChessPiece) == 0x000000, "Member 'RBChessBoard_GetPossibleCoordsForPiece::ChessPiece' has a wrong offset!");
static_assert(offsetof(RBChessBoard_GetPossibleCoordsForPiece, ReturnValue) == 0x000008, "Member 'RBChessBoard_GetPossibleCoordsForPiece::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetPromotingCoords
// 0x0010 (0x0010 - 0x0000)
struct RBChessBoard_GetPromotingCoords final
{
public:
	TArray<struct FIntPoint>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetPromotingCoords) == 0x000008, "Wrong alignment on RBChessBoard_GetPromotingCoords");
static_assert(sizeof(RBChessBoard_GetPromotingCoords) == 0x000010, "Wrong size on RBChessBoard_GetPromotingCoords");
static_assert(offsetof(RBChessBoard_GetPromotingCoords, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetPromotingCoords::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetRating
// 0x0004 (0x0004 - 0x0000)
struct RBChessBoard_GetRating final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetRating) == 0x000004, "Wrong alignment on RBChessBoard_GetRating");
static_assert(sizeof(RBChessBoard_GetRating) == 0x000004, "Wrong size on RBChessBoard_GetRating");
static_assert(offsetof(RBChessBoard_GetRating, ReturnValue) == 0x000000, "Member 'RBChessBoard_GetRating::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetTeamChessPanelComponent
// 0x0010 (0x0010 - 0x0000)
struct RBChessBoard_GetTeamChessPanelComponent final
{
public:
	EChessTeam                                    Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBChessBoardPanelComponent*            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetTeamChessPanelComponent) == 0x000008, "Wrong alignment on RBChessBoard_GetTeamChessPanelComponent");
static_assert(sizeof(RBChessBoard_GetTeamChessPanelComponent) == 0x000010, "Wrong size on RBChessBoard_GetTeamChessPanelComponent");
static_assert(offsetof(RBChessBoard_GetTeamChessPanelComponent, Team) == 0x000000, "Member 'RBChessBoard_GetTeamChessPanelComponent::Team' has a wrong offset!");
static_assert(offsetof(RBChessBoard_GetTeamChessPanelComponent, ReturnValue) == 0x000008, "Member 'RBChessBoard_GetTeamChessPanelComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.GetTeamRemainingTime
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoard_GetTeamRemainingTime final
{
public:
	EChessTeam                                    Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_GetTeamRemainingTime) == 0x000004, "Wrong alignment on RBChessBoard_GetTeamRemainingTime");
static_assert(sizeof(RBChessBoard_GetTeamRemainingTime) == 0x000008, "Wrong size on RBChessBoard_GetTeamRemainingTime");
static_assert(offsetof(RBChessBoard_GetTeamRemainingTime, Team) == 0x000000, "Member 'RBChessBoard_GetTeamRemainingTime::Team' has a wrong offset!");
static_assert(offsetof(RBChessBoard_GetTeamRemainingTime, ReturnValue) == 0x000004, "Member 'RBChessBoard_GetTeamRemainingTime::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.IsEndReasonDrawType
// 0x0002 (0x0002 - 0x0000)
struct RBChessBoard_IsEndReasonDrawType final
{
public:
	EChessGameEndReason                           EndReason;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_IsEndReasonDrawType) == 0x000001, "Wrong alignment on RBChessBoard_IsEndReasonDrawType");
static_assert(sizeof(RBChessBoard_IsEndReasonDrawType) == 0x000002, "Wrong size on RBChessBoard_IsEndReasonDrawType");
static_assert(offsetof(RBChessBoard_IsEndReasonDrawType, EndReason) == 0x000000, "Member 'RBChessBoard_IsEndReasonDrawType::EndReason' has a wrong offset!");
static_assert(offsetof(RBChessBoard_IsEndReasonDrawType, ReturnValue) == 0x000001, "Member 'RBChessBoard_IsEndReasonDrawType::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.IsGameInProgress
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoard_IsGameInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_IsGameInProgress) == 0x000001, "Wrong alignment on RBChessBoard_IsGameInProgress");
static_assert(sizeof(RBChessBoard_IsGameInProgress) == 0x000001, "Wrong size on RBChessBoard_IsGameInProgress");
static_assert(offsetof(RBChessBoard_IsGameInProgress, ReturnValue) == 0x000000, "Member 'RBChessBoard_IsGameInProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoard.Multicast_BroadcastMatchEndMessage
// 0x0018 (0x0018 - 0x0000)
struct RBChessBoard_Multicast_BroadcastMatchEndMessage final
{
public:
	class ARBPlayer*                              WinnerPtr;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              LoserPtr;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDraw;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBChessBoard_Multicast_BroadcastMatchEndMessage) == 0x000008, "Wrong alignment on RBChessBoard_Multicast_BroadcastMatchEndMessage");
static_assert(sizeof(RBChessBoard_Multicast_BroadcastMatchEndMessage) == 0x000018, "Wrong size on RBChessBoard_Multicast_BroadcastMatchEndMessage");
static_assert(offsetof(RBChessBoard_Multicast_BroadcastMatchEndMessage, WinnerPtr) == 0x000000, "Member 'RBChessBoard_Multicast_BroadcastMatchEndMessage::WinnerPtr' has a wrong offset!");
static_assert(offsetof(RBChessBoard_Multicast_BroadcastMatchEndMessage, LoserPtr) == 0x000008, "Member 'RBChessBoard_Multicast_BroadcastMatchEndMessage::LoserPtr' has a wrong offset!");
static_assert(offsetof(RBChessBoard_Multicast_BroadcastMatchEndMessage, bIsDraw) == 0x000010, "Member 'RBChessBoard_Multicast_BroadcastMatchEndMessage::bIsDraw' has a wrong offset!");

// Function OPP.RBChessBoard.Multicast_BroadcastMatchStartMessage
// 0x0010 (0x0010 - 0x0000)
struct RBChessBoard_Multicast_BroadcastMatchStartMessage final
{
public:
	class ARBPlayer*                              Player1Ptr;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player2Ptr;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_Multicast_BroadcastMatchStartMessage) == 0x000008, "Wrong alignment on RBChessBoard_Multicast_BroadcastMatchStartMessage");
static_assert(sizeof(RBChessBoard_Multicast_BroadcastMatchStartMessage) == 0x000010, "Wrong size on RBChessBoard_Multicast_BroadcastMatchStartMessage");
static_assert(offsetof(RBChessBoard_Multicast_BroadcastMatchStartMessage, Player1Ptr) == 0x000000, "Member 'RBChessBoard_Multicast_BroadcastMatchStartMessage::Player1Ptr' has a wrong offset!");
static_assert(offsetof(RBChessBoard_Multicast_BroadcastMatchStartMessage, Player2Ptr) == 0x000008, "Member 'RBChessBoard_Multicast_BroadcastMatchStartMessage::Player2Ptr' has a wrong offset!");

// Function OPP.RBChessBoard.Multicast_PlayerDropPieceAt
// 0x000C (0x000C - 0x0000)
struct RBChessBoard_Multicast_PlayerDropPieceAt final
{
public:
	EChessTeam                                    Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F3D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              TargetLocation;                                    // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoard_Multicast_PlayerDropPieceAt) == 0x000004, "Wrong alignment on RBChessBoard_Multicast_PlayerDropPieceAt");
static_assert(sizeof(RBChessBoard_Multicast_PlayerDropPieceAt) == 0x00000C, "Wrong size on RBChessBoard_Multicast_PlayerDropPieceAt");
static_assert(offsetof(RBChessBoard_Multicast_PlayerDropPieceAt, Team) == 0x000000, "Member 'RBChessBoard_Multicast_PlayerDropPieceAt::Team' has a wrong offset!");
static_assert(offsetof(RBChessBoard_Multicast_PlayerDropPieceAt, TargetLocation) == 0x000004, "Member 'RBChessBoard_Multicast_PlayerDropPieceAt::TargetLocation' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.Event_PlayerDropPieceAt
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponent_Event_PlayerDropPieceAt final
{
public:
	struct FVector2D                              Coords;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_Event_PlayerDropPieceAt) == 0x000004, "Wrong alignment on RBChessBoardPanelComponent_Event_PlayerDropPieceAt");
static_assert(sizeof(RBChessBoardPanelComponent_Event_PlayerDropPieceAt) == 0x000008, "Wrong size on RBChessBoardPanelComponent_Event_PlayerDropPieceAt");
static_assert(offsetof(RBChessBoardPanelComponent_Event_PlayerDropPieceAt, Coords) == 0x000000, "Member 'RBChessBoardPanelComponent_Event_PlayerDropPieceAt::Coords' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.Event_PlayerEnteredGame
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponent_Event_PlayerEnteredGame final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_Event_PlayerEnteredGame) == 0x000008, "Wrong alignment on RBChessBoardPanelComponent_Event_PlayerEnteredGame");
static_assert(sizeof(RBChessBoardPanelComponent_Event_PlayerEnteredGame) == 0x000008, "Wrong size on RBChessBoardPanelComponent_Event_PlayerEnteredGame");
static_assert(offsetof(RBChessBoardPanelComponent_Event_PlayerEnteredGame, Player) == 0x000000, "Member 'RBChessBoardPanelComponent_Event_PlayerEnteredGame::Player' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.Event_PlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponent_Event_PlayerLeftGame final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_Event_PlayerLeftGame) == 0x000008, "Wrong alignment on RBChessBoardPanelComponent_Event_PlayerLeftGame");
static_assert(sizeof(RBChessBoardPanelComponent_Event_PlayerLeftGame) == 0x000008, "Wrong size on RBChessBoardPanelComponent_Event_PlayerLeftGame");
static_assert(offsetof(RBChessBoardPanelComponent_Event_PlayerLeftGame, Player) == 0x000000, "Member 'RBChessBoardPanelComponent_Event_PlayerLeftGame::Player' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.Event_ShowMoveLeavesOwnKingChecked
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponent_Event_ShowMoveLeavesOwnKingChecked final
{
public:
	class URBChessPieceComponent*                 KingPiece;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_Event_ShowMoveLeavesOwnKingChecked) == 0x000008, "Wrong alignment on RBChessBoardPanelComponent_Event_ShowMoveLeavesOwnKingChecked");
static_assert(sizeof(RBChessBoardPanelComponent_Event_ShowMoveLeavesOwnKingChecked) == 0x000008, "Wrong size on RBChessBoardPanelComponent_Event_ShowMoveLeavesOwnKingChecked");
static_assert(offsetof(RBChessBoardPanelComponent_Event_ShowMoveLeavesOwnKingChecked, KingPiece) == 0x000000, "Member 'RBChessBoardPanelComponent_Event_ShowMoveLeavesOwnKingChecked::KingPiece' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.GetHoldingPiece
// 0x0008 (0x0008 - 0x0000)
struct RBChessBoardPanelComponent_GetHoldingPiece final
{
public:
	class URBChessPieceComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_GetHoldingPiece) == 0x000008, "Wrong alignment on RBChessBoardPanelComponent_GetHoldingPiece");
static_assert(sizeof(RBChessBoardPanelComponent_GetHoldingPiece) == 0x000008, "Wrong size on RBChessBoardPanelComponent_GetHoldingPiece");
static_assert(offsetof(RBChessBoardPanelComponent_GetHoldingPiece, ReturnValue) == 0x000000, "Member 'RBChessBoardPanelComponent_GetHoldingPiece::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.GetLocalPosFromCoord
// 0x0010 (0x0010 - 0x0000)
struct RBChessBoardPanelComponent_GetLocalPosFromCoord final
{
public:
	struct FIntPoint                              Coords;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_GetLocalPosFromCoord) == 0x000004, "Wrong alignment on RBChessBoardPanelComponent_GetLocalPosFromCoord");
static_assert(sizeof(RBChessBoardPanelComponent_GetLocalPosFromCoord) == 0x000010, "Wrong size on RBChessBoardPanelComponent_GetLocalPosFromCoord");
static_assert(offsetof(RBChessBoardPanelComponent_GetLocalPosFromCoord, Coords) == 0x000000, "Member 'RBChessBoardPanelComponent_GetLocalPosFromCoord::Coords' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponent_GetLocalPosFromCoord, ReturnValue) == 0x000008, "Member 'RBChessBoardPanelComponent_GetLocalPosFromCoord::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.GetLocalPosFromProjPos
// 0x0014 (0x0014 - 0x0000)
struct RBChessBoardPanelComponent_GetLocalPosFromProjPos final
{
public:
	struct FVector                                ProjWorldPos;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_GetLocalPosFromProjPos) == 0x000004, "Wrong alignment on RBChessBoardPanelComponent_GetLocalPosFromProjPos");
static_assert(sizeof(RBChessBoardPanelComponent_GetLocalPosFromProjPos) == 0x000014, "Wrong size on RBChessBoardPanelComponent_GetLocalPosFromProjPos");
static_assert(offsetof(RBChessBoardPanelComponent_GetLocalPosFromProjPos, ProjWorldPos) == 0x000000, "Member 'RBChessBoardPanelComponent_GetLocalPosFromProjPos::ProjWorldPos' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponent_GetLocalPosFromProjPos, ReturnValue) == 0x00000C, "Member 'RBChessBoardPanelComponent_GetLocalPosFromProjPos::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.GetWorldPosFromCoord
// 0x0014 (0x0014 - 0x0000)
struct RBChessBoardPanelComponent_GetWorldPosFromCoord final
{
public:
	struct FIntPoint                              Coords;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_GetWorldPosFromCoord) == 0x000004, "Wrong alignment on RBChessBoardPanelComponent_GetWorldPosFromCoord");
static_assert(sizeof(RBChessBoardPanelComponent_GetWorldPosFromCoord) == 0x000014, "Wrong size on RBChessBoardPanelComponent_GetWorldPosFromCoord");
static_assert(offsetof(RBChessBoardPanelComponent_GetWorldPosFromCoord, Coords) == 0x000000, "Member 'RBChessBoardPanelComponent_GetWorldPosFromCoord::Coords' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponent_GetWorldPosFromCoord, ReturnValue) == 0x000008, "Member 'RBChessBoardPanelComponent_GetWorldPosFromCoord::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.GetWSFocusedLocation
// 0x0010 (0x0010 - 0x0000)
struct RBChessBoardPanelComponent_GetWSFocusedLocation final
{
public:
	bool                                          bUseReplicatedValue;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F44[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_GetWSFocusedLocation) == 0x000004, "Wrong alignment on RBChessBoardPanelComponent_GetWSFocusedLocation");
static_assert(sizeof(RBChessBoardPanelComponent_GetWSFocusedLocation) == 0x000010, "Wrong size on RBChessBoardPanelComponent_GetWSFocusedLocation");
static_assert(offsetof(RBChessBoardPanelComponent_GetWSFocusedLocation, bUseReplicatedValue) == 0x000000, "Member 'RBChessBoardPanelComponent_GetWSFocusedLocation::bUseReplicatedValue' has a wrong offset!");
static_assert(offsetof(RBChessBoardPanelComponent_GetWSFocusedLocation, ReturnValue) == 0x000004, "Member 'RBChessBoardPanelComponent_GetWSFocusedLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.IsPlayer1
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponent_IsPlayer1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_IsPlayer1) == 0x000001, "Wrong alignment on RBChessBoardPanelComponent_IsPlayer1");
static_assert(sizeof(RBChessBoardPanelComponent_IsPlayer1) == 0x000001, "Wrong size on RBChessBoardPanelComponent_IsPlayer1");
static_assert(offsetof(RBChessBoardPanelComponent_IsPlayer1, ReturnValue) == 0x000000, "Member 'RBChessBoardPanelComponent_IsPlayer1::ReturnValue' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.OnChessGameStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponent_OnChessGameStateChanged final
{
public:
	EChessGameState                               NewGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_OnChessGameStateChanged) == 0x000001, "Wrong alignment on RBChessBoardPanelComponent_OnChessGameStateChanged");
static_assert(sizeof(RBChessBoardPanelComponent_OnChessGameStateChanged) == 0x000001, "Wrong size on RBChessBoardPanelComponent_OnChessGameStateChanged");
static_assert(offsetof(RBChessBoardPanelComponent_OnChessGameStateChanged, NewGameState) == 0x000000, "Member 'RBChessBoardPanelComponent_OnChessGameStateChanged::NewGameState' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.OnHoldingPieceChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponent_OnHoldingPieceChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_OnHoldingPieceChangedCallback) == 0x000001, "Wrong alignment on RBChessBoardPanelComponent_OnHoldingPieceChangedCallback");
static_assert(sizeof(RBChessBoardPanelComponent_OnHoldingPieceChangedCallback) == 0x000001, "Wrong size on RBChessBoardPanelComponent_OnHoldingPieceChangedCallback");
static_assert(offsetof(RBChessBoardPanelComponent_OnHoldingPieceChangedCallback, ChangedType) == 0x000000, "Member 'RBChessBoardPanelComponent_OnHoldingPieceChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.OnTurnChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponent_OnTurnChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_OnTurnChangedCallback) == 0x000001, "Wrong alignment on RBChessBoardPanelComponent_OnTurnChangedCallback");
static_assert(sizeof(RBChessBoardPanelComponent_OnTurnChangedCallback) == 0x000001, "Wrong size on RBChessBoardPanelComponent_OnTurnChangedCallback");
static_assert(offsetof(RBChessBoardPanelComponent_OnTurnChangedCallback, ChangedType) == 0x000000, "Member 'RBChessBoardPanelComponent_OnTurnChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBChessBoardPanelComponent.SetChessGamePlayerAnimState
// 0x0001 (0x0001 - 0x0000)
struct RBChessBoardPanelComponent_SetChessGamePlayerAnimState final
{
public:
	EChessGamePlayerAnimState                     NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessBoardPanelComponent_SetChessGamePlayerAnimState) == 0x000001, "Wrong alignment on RBChessBoardPanelComponent_SetChessGamePlayerAnimState");
static_assert(sizeof(RBChessBoardPanelComponent_SetChessGamePlayerAnimState) == 0x000001, "Wrong size on RBChessBoardPanelComponent_SetChessGamePlayerAnimState");
static_assert(offsetof(RBChessBoardPanelComponent_SetChessGamePlayerAnimState, NewState) == 0x000000, "Member 'RBChessBoardPanelComponent_SetChessGamePlayerAnimState::NewState' has a wrong offset!");

// Function OPP.RBChessPieceComponent.GetCoordinates
// 0x0008 (0x0008 - 0x0000)
struct RBChessPieceComponent_GetCoordinates final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChessPieceComponent_GetCoordinates) == 0x000004, "Wrong alignment on RBChessPieceComponent_GetCoordinates");
static_assert(sizeof(RBChessPieceComponent_GetCoordinates) == 0x000008, "Wrong size on RBChessPieceComponent_GetCoordinates");
static_assert(offsetof(RBChessPieceComponent_GetCoordinates, ReturnValue) == 0x000000, "Member 'RBChessPieceComponent_GetCoordinates::ReturnValue' has a wrong offset!");

// Function OPP.RBChunkInstallManager.GetChunkInstallationStatus
// 0x0008 (0x0008 - 0x0000)
struct RBChunkInstallManager_GetChunkInstallationStatus final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F48[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBChunkInstallManager_GetChunkInstallationStatus) == 0x000004, "Wrong alignment on RBChunkInstallManager_GetChunkInstallationStatus");
static_assert(sizeof(RBChunkInstallManager_GetChunkInstallationStatus) == 0x000008, "Wrong size on RBChunkInstallManager_GetChunkInstallationStatus");
static_assert(offsetof(RBChunkInstallManager_GetChunkInstallationStatus, Percent) == 0x000000, "Member 'RBChunkInstallManager_GetChunkInstallationStatus::Percent' has a wrong offset!");
static_assert(offsetof(RBChunkInstallManager_GetChunkInstallationStatus, ReturnValue) == 0x000004, "Member 'RBChunkInstallManager_GetChunkInstallationStatus::ReturnValue' has a wrong offset!");

// Function OPP.RBChunkInstallManager.IsChunkInstallationCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBChunkInstallManager_IsChunkInstallationCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBChunkInstallManager_IsChunkInstallationCompleted) == 0x000001, "Wrong alignment on RBChunkInstallManager_IsChunkInstallationCompleted");
static_assert(sizeof(RBChunkInstallManager_IsChunkInstallationCompleted) == 0x000001, "Wrong size on RBChunkInstallManager_IsChunkInstallationCompleted");
static_assert(offsetof(RBChunkInstallManager_IsChunkInstallationCompleted, ReturnValue) == 0x000000, "Member 'RBChunkInstallManager_IsChunkInstallationCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBCinematicZoneComponent.OnActiveSkillActorChanged
// 0x0008 (0x0008 - 0x0000)
struct RBCinematicZoneComponent_OnActiveSkillActorChanged final
{
public:
	class ARBActiveSkill*                         ActiveSkillActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCinematicZoneComponent_OnActiveSkillActorChanged) == 0x000008, "Wrong alignment on RBCinematicZoneComponent_OnActiveSkillActorChanged");
static_assert(sizeof(RBCinematicZoneComponent_OnActiveSkillActorChanged) == 0x000008, "Wrong size on RBCinematicZoneComponent_OnActiveSkillActorChanged");
static_assert(offsetof(RBCinematicZoneComponent_OnActiveSkillActorChanged, ActiveSkillActor) == 0x000000, "Member 'RBCinematicZoneComponent_OnActiveSkillActorChanged::ActiveSkillActor' has a wrong offset!");

// Function OPP.RBCinematicZoneComponent.OnPlayerCustomizationChanged
// 0x0008 (0x0008 - 0x0000)
struct RBCinematicZoneComponent_OnPlayerCustomizationChanged final
{
public:
	class ARBPlayer*                              RBPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCinematicZoneComponent_OnPlayerCustomizationChanged) == 0x000008, "Wrong alignment on RBCinematicZoneComponent_OnPlayerCustomizationChanged");
static_assert(sizeof(RBCinematicZoneComponent_OnPlayerCustomizationChanged) == 0x000008, "Wrong size on RBCinematicZoneComponent_OnPlayerCustomizationChanged");
static_assert(offsetof(RBCinematicZoneComponent_OnPlayerCustomizationChanged, RBPlayer) == 0x000000, "Member 'RBCinematicZoneComponent_OnPlayerCustomizationChanged::RBPlayer' has a wrong offset!");

// Function OPP.RBCinematicZoneComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBCinematicZoneComponent_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCinematicZoneComponent_SetEnabled) == 0x000001, "Wrong alignment on RBCinematicZoneComponent_SetEnabled");
static_assert(sizeof(RBCinematicZoneComponent_SetEnabled) == 0x000001, "Wrong size on RBCinematicZoneComponent_SetEnabled");
static_assert(offsetof(RBCinematicZoneComponent_SetEnabled, Enabled) == 0x000000, "Member 'RBCinematicZoneComponent_SetEnabled::Enabled' has a wrong offset!");

// Function OPP.RBMenuTabButton.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct RBMenuTabButton_SetSelected final
{
public:
	bool                                          bInSelected;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuTabButton_SetSelected) == 0x000001, "Wrong alignment on RBMenuTabButton_SetSelected");
static_assert(sizeof(RBMenuTabButton_SetSelected) == 0x000001, "Wrong size on RBMenuTabButton_SetSelected");
static_assert(offsetof(RBMenuTabButton_SetSelected, bInSelected) == 0x000000, "Member 'RBMenuTabButton_SetSelected::bInSelected' has a wrong offset!");

// Function OPP.RBClueable.GetAssociatedInvestigationComponent
// 0x0008 (0x0008 - 0x0000)
struct RBClueable_GetAssociatedInvestigationComponent final
{
public:
	class URBPlayerInvestigationZoneComponent*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBClueable_GetAssociatedInvestigationComponent) == 0x000008, "Wrong alignment on RBClueable_GetAssociatedInvestigationComponent");
static_assert(sizeof(RBClueable_GetAssociatedInvestigationComponent) == 0x000008, "Wrong size on RBClueable_GetAssociatedInvestigationComponent");
static_assert(offsetof(RBClueable_GetAssociatedInvestigationComponent, ReturnValue) == 0x000000, "Member 'RBClueable_GetAssociatedInvestigationComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBClueable.GetClue
// 0x0008 (0x0008 - 0x0000)
struct RBClueable_GetClue final
{
public:
	struct FClueData                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBClueable_GetClue) == 0x000004, "Wrong alignment on RBClueable_GetClue");
static_assert(sizeof(RBClueable_GetClue) == 0x000008, "Wrong size on RBClueable_GetClue");
static_assert(offsetof(RBClueable_GetClue, ReturnValue) == 0x000000, "Member 'RBClueable_GetClue::ReturnValue' has a wrong offset!");

// Function OPP.RBClueable.SetClue
// 0x0008 (0x0008 - 0x0000)
struct RBClueable_SetClue final
{
public:
	struct FClueData                              ClueData;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBClueable_SetClue) == 0x000004, "Wrong alignment on RBClueable_SetClue");
static_assert(sizeof(RBClueable_SetClue) == 0x000008, "Wrong size on RBClueable_SetClue");
static_assert(offsetof(RBClueable_SetClue, ClueData) == 0x000000, "Member 'RBClueable_SetClue::ClueData' has a wrong offset!");

// Function OPP.RBCollectibleDocumentsConfig.GetCollectibleDocumentDefinition
// 0x00F0 (0x00F0 - 0x0000)
struct RBCollectibleDocumentsConfig_GetCollectibleDocumentDefinition final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBCollectibleDocumentDefinitionRow    ReturnValue;                                       // 0x0008(0x00E8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCollectibleDocumentsConfig_GetCollectibleDocumentDefinition) == 0x000008, "Wrong alignment on RBCollectibleDocumentsConfig_GetCollectibleDocumentDefinition");
static_assert(sizeof(RBCollectibleDocumentsConfig_GetCollectibleDocumentDefinition) == 0x0000F0, "Wrong size on RBCollectibleDocumentsConfig_GetCollectibleDocumentDefinition");
static_assert(offsetof(RBCollectibleDocumentsConfig_GetCollectibleDocumentDefinition, ID) == 0x000000, "Member 'RBCollectibleDocumentsConfig_GetCollectibleDocumentDefinition::ID' has a wrong offset!");
static_assert(offsetof(RBCollectibleDocumentsConfig_GetCollectibleDocumentDefinition, ReturnValue) == 0x000008, "Member 'RBCollectibleDocumentsConfig_GetCollectibleDocumentDefinition::ReturnValue' has a wrong offset!");

// Function OPP.RBCollectibleDocumentsConfig.GetDocumentGroup
// 0x0070 (0x0070 - 0x0000)
struct RBCollectibleDocumentsConfig_GetDocumentGroup final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBCollectibleDocumentGroupRow         ReturnValue;                                       // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCollectibleDocumentsConfig_GetDocumentGroup) == 0x000008, "Wrong alignment on RBCollectibleDocumentsConfig_GetDocumentGroup");
static_assert(sizeof(RBCollectibleDocumentsConfig_GetDocumentGroup) == 0x000070, "Wrong size on RBCollectibleDocumentsConfig_GetDocumentGroup");
static_assert(offsetof(RBCollectibleDocumentsConfig_GetDocumentGroup, ID) == 0x000000, "Member 'RBCollectibleDocumentsConfig_GetDocumentGroup::ID' has a wrong offset!");
static_assert(offsetof(RBCollectibleDocumentsConfig_GetDocumentGroup, ReturnValue) == 0x000008, "Member 'RBCollectibleDocumentsConfig_GetDocumentGroup::ReturnValue' has a wrong offset!");

// Function OPP.RBCollectibleDocumentsConfig.GetDocumentGroupDocuments
// 0x0018 (0x0018 - 0x0000)
struct RBCollectibleDocumentsConfig_GetDocumentGroupDocuments final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRBCollectibleDocumentDefinitionRow> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCollectibleDocumentsConfig_GetDocumentGroupDocuments) == 0x000008, "Wrong alignment on RBCollectibleDocumentsConfig_GetDocumentGroupDocuments");
static_assert(sizeof(RBCollectibleDocumentsConfig_GetDocumentGroupDocuments) == 0x000018, "Wrong size on RBCollectibleDocumentsConfig_GetDocumentGroupDocuments");
static_assert(offsetof(RBCollectibleDocumentsConfig_GetDocumentGroupDocuments, ID) == 0x000000, "Member 'RBCollectibleDocumentsConfig_GetDocumentGroupDocuments::ID' has a wrong offset!");
static_assert(offsetof(RBCollectibleDocumentsConfig_GetDocumentGroupDocuments, ReturnValue) == 0x000008, "Member 'RBCollectibleDocumentsConfig_GetDocumentGroupDocuments::ReturnValue' has a wrong offset!");

// Function OPP.RBCollectibleDocumentsConfig.GetDocumentGroups
// 0x0010 (0x0010 - 0x0000)
struct RBCollectibleDocumentsConfig_GetDocumentGroups final
{
public:
	TArray<struct FRBCollectibleDocumentGroupRow> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCollectibleDocumentsConfig_GetDocumentGroups) == 0x000008, "Wrong alignment on RBCollectibleDocumentsConfig_GetDocumentGroups");
static_assert(sizeof(RBCollectibleDocumentsConfig_GetDocumentGroups) == 0x000010, "Wrong size on RBCollectibleDocumentsConfig_GetDocumentGroups");
static_assert(offsetof(RBCollectibleDocumentsConfig_GetDocumentGroups, ReturnValue) == 0x000000, "Member 'RBCollectibleDocumentsConfig_GetDocumentGroups::ReturnValue' has a wrong offset!");

// Function OPP.RBCollectibleDocumentPickup.Multicast_OnDocumentPickedUp
// 0x0010 (0x0010 - 0x0000)
struct RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp final
{
public:
	class ARBPlayer*                              RBPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstInteraction;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasAcquired;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F50[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp) == 0x000008, "Wrong alignment on RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp");
static_assert(sizeof(RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp) == 0x000010, "Wrong size on RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp");
static_assert(offsetof(RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp, RBPlayer) == 0x000000, "Member 'RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp::RBPlayer' has a wrong offset!");
static_assert(offsetof(RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp, bFirstInteraction) == 0x000008, "Member 'RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp::bFirstInteraction' has a wrong offset!");
static_assert(offsetof(RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp, bWasAcquired) == 0x000009, "Member 'RBCollectibleDocumentPickup_Multicast_OnDocumentPickedUp::bWasAcquired' has a wrong offset!");

// Function OPP.RBCollectibleDocumentPickup.GetDocumentId
// 0x0010 (0x0010 - 0x0000)
struct RBCollectibleDocumentPickup_GetDocumentId final
{
public:
	class ARBPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCollectibleDocumentPickup_GetDocumentId) == 0x000008, "Wrong alignment on RBCollectibleDocumentPickup_GetDocumentId");
static_assert(sizeof(RBCollectibleDocumentPickup_GetDocumentId) == 0x000010, "Wrong size on RBCollectibleDocumentPickup_GetDocumentId");
static_assert(offsetof(RBCollectibleDocumentPickup_GetDocumentId, PlayerState) == 0x000000, "Member 'RBCollectibleDocumentPickup_GetDocumentId::PlayerState' has a wrong offset!");
static_assert(offsetof(RBCollectibleDocumentPickup_GetDocumentId, ReturnValue) == 0x000008, "Member 'RBCollectibleDocumentPickup_GetDocumentId::ReturnValue' has a wrong offset!");

// Function OPP.RBVoiceChatManager.OnLoadingScreenStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBVoiceChatManager_OnLoadingScreenStateUpdated final
{
public:
	bool                                          bShowing;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBVoiceChatManager_OnLoadingScreenStateUpdated) == 0x000001, "Wrong alignment on RBVoiceChatManager_OnLoadingScreenStateUpdated");
static_assert(sizeof(RBVoiceChatManager_OnLoadingScreenStateUpdated) == 0x000001, "Wrong size on RBVoiceChatManager_OnLoadingScreenStateUpdated");
static_assert(offsetof(RBVoiceChatManager_OnLoadingScreenStateUpdated, bShowing) == 0x000000, "Member 'RBVoiceChatManager_OnLoadingScreenStateUpdated::bShowing' has a wrong offset!");

// Function OPP.RBVoiceChatManager.OnVoiceChatEnabledChanged
// 0x0008 (0x0008 - 0x0000)
struct RBVoiceChatManager_OnVoiceChatEnabledChanged final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBVoiceChatManager_OnVoiceChatEnabledChanged) == 0x000008, "Wrong alignment on RBVoiceChatManager_OnVoiceChatEnabledChanged");
static_assert(sizeof(RBVoiceChatManager_OnVoiceChatEnabledChanged) == 0x000008, "Wrong size on RBVoiceChatManager_OnVoiceChatEnabledChanged");
static_assert(offsetof(RBVoiceChatManager_OnVoiceChatEnabledChanged, RBPlayerState) == 0x000000, "Member 'RBVoiceChatManager_OnVoiceChatEnabledChanged::RBPlayerState' has a wrong offset!");

// Function OPP.RBCollectItemsCoordinator.Multicast_OnPickupCollected
// 0x0010 (0x0010 - 0x0000)
struct RBCollectItemsCoordinator_Multicast_OnPickupCollected final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              Pickup;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCollectItemsCoordinator_Multicast_OnPickupCollected) == 0x000008, "Wrong alignment on RBCollectItemsCoordinator_Multicast_OnPickupCollected");
static_assert(sizeof(RBCollectItemsCoordinator_Multicast_OnPickupCollected) == 0x000010, "Wrong size on RBCollectItemsCoordinator_Multicast_OnPickupCollected");
static_assert(offsetof(RBCollectItemsCoordinator_Multicast_OnPickupCollected, Player) == 0x000000, "Member 'RBCollectItemsCoordinator_Multicast_OnPickupCollected::Player' has a wrong offset!");
static_assert(offsetof(RBCollectItemsCoordinator_Multicast_OnPickupCollected, Pickup) == 0x000008, "Member 'RBCollectItemsCoordinator_Multicast_OnPickupCollected::Pickup' has a wrong offset!");

// Function OPP.RBCollectItemsCoordinator.OnPlayerCollectItem
// 0x0010 (0x0010 - 0x0000)
struct RBCollectItemsCoordinator_OnPlayerCollectItem final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCollectItemsCoordinator_OnPlayerCollectItem) == 0x000008, "Wrong alignment on RBCollectItemsCoordinator_OnPlayerCollectItem");
static_assert(sizeof(RBCollectItemsCoordinator_OnPlayerCollectItem) == 0x000010, "Wrong size on RBCollectItemsCoordinator_OnPlayerCollectItem");
static_assert(offsetof(RBCollectItemsCoordinator_OnPlayerCollectItem, Pawn) == 0x000000, "Member 'RBCollectItemsCoordinator_OnPlayerCollectItem::Pawn' has a wrong offset!");
static_assert(offsetof(RBCollectItemsCoordinator_OnPlayerCollectItem, Item) == 0x000008, "Member 'RBCollectItemsCoordinator_OnPlayerCollectItem::Item' has a wrong offset!");

// Function OPP.RBMonsterClosetReplaceClass.OnMonsterClosetReplaced_Server
// 0x0010 (0x0010 - 0x0000)
struct RBMonsterClosetReplaceClass_OnMonsterClosetReplaced_Server final
{
public:
	class ARBMonsterCloset*                       MonsterCloset;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReplacementSource;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterClosetReplaceClass_OnMonsterClosetReplaced_Server) == 0x000008, "Wrong alignment on RBMonsterClosetReplaceClass_OnMonsterClosetReplaced_Server");
static_assert(sizeof(RBMonsterClosetReplaceClass_OnMonsterClosetReplaced_Server) == 0x000010, "Wrong size on RBMonsterClosetReplaceClass_OnMonsterClosetReplaced_Server");
static_assert(offsetof(RBMonsterClosetReplaceClass_OnMonsterClosetReplaced_Server, MonsterCloset) == 0x000000, "Member 'RBMonsterClosetReplaceClass_OnMonsterClosetReplaced_Server::MonsterCloset' has a wrong offset!");
static_assert(offsetof(RBMonsterClosetReplaceClass_OnMonsterClosetReplaced_Server, ReplacementSource) == 0x000008, "Member 'RBMonsterClosetReplaceClass_OnMonsterClosetReplaced_Server::ReplacementSource' has a wrong offset!");

// Function OPP.RBLocationHintBoard.Event_OnSelectedHintIndex
// 0x0004 (0x0004 - 0x0000)
struct RBLocationHintBoard_Event_OnSelectedHintIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocationHintBoard_Event_OnSelectedHintIndex) == 0x000004, "Wrong alignment on RBLocationHintBoard_Event_OnSelectedHintIndex");
static_assert(sizeof(RBLocationHintBoard_Event_OnSelectedHintIndex) == 0x000004, "Wrong size on RBLocationHintBoard_Event_OnSelectedHintIndex");
static_assert(offsetof(RBLocationHintBoard_Event_OnSelectedHintIndex, Param_Index) == 0x000000, "Member 'RBLocationHintBoard_Event_OnSelectedHintIndex::Param_Index' has a wrong offset!");

// Function OPP.RBVariatorInfo.GetActions
// 0x0010 (0x0010 - 0x0000)
struct RBVariatorInfo_GetActions final
{
public:
	TArray<class URBVariatorAction*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBVariatorInfo_GetActions) == 0x000008, "Wrong alignment on RBVariatorInfo_GetActions");
static_assert(sizeof(RBVariatorInfo_GetActions) == 0x000010, "Wrong size on RBVariatorInfo_GetActions");
static_assert(offsetof(RBVariatorInfo_GetActions, ReturnValue) == 0x000000, "Member 'RBVariatorInfo_GetActions::ReturnValue' has a wrong offset!");

// Function OPP.RBGameModeLobby.OnPawnKilled
// 0x0010 (0x0010 - 0x0000)
struct RBGameModeLobby_OnPawnKilled final
{
public:
	class ARBPawn*                                InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                SubjectActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeLobby_OnPawnKilled) == 0x000008, "Wrong alignment on RBGameModeLobby_OnPawnKilled");
static_assert(sizeof(RBGameModeLobby_OnPawnKilled) == 0x000010, "Wrong size on RBGameModeLobby_OnPawnKilled");
static_assert(offsetof(RBGameModeLobby_OnPawnKilled, InstigatorActor) == 0x000000, "Member 'RBGameModeLobby_OnPawnKilled::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBGameModeLobby_OnPawnKilled, SubjectActor) == 0x000008, "Member 'RBGameModeLobby_OnPawnKilled::SubjectActor' has a wrong offset!");

// Function OPP.RBGameModeLobby.StartRelease
// 0x0008 (0x0008 - 0x0000)
struct RBGameModeLobby_StartRelease final
{
public:
	class ARBLobbyPlayerController*               RBLobbyPlayerController;                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeLobby_StartRelease) == 0x000008, "Wrong alignment on RBGameModeLobby_StartRelease");
static_assert(sizeof(RBGameModeLobby_StartRelease) == 0x000008, "Wrong size on RBGameModeLobby_StartRelease");
static_assert(offsetof(RBGameModeLobby_StartRelease, RBLobbyPlayerController) == 0x000000, "Member 'RBGameModeLobby_StartRelease::RBLobbyPlayerController' has a wrong offset!");

// Function OPP.RBTimerInterface.SetTimer
// 0x0010 (0x0010 - 0x0000)
struct RBTimerInterface_SetTimer final
{
public:
	int32                                         MinuteTen;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinuteSingle;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsTen;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsSingle;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTimerInterface_SetTimer) == 0x000004, "Wrong alignment on RBTimerInterface_SetTimer");
static_assert(sizeof(RBTimerInterface_SetTimer) == 0x000010, "Wrong size on RBTimerInterface_SetTimer");
static_assert(offsetof(RBTimerInterface_SetTimer, MinuteTen) == 0x000000, "Member 'RBTimerInterface_SetTimer::MinuteTen' has a wrong offset!");
static_assert(offsetof(RBTimerInterface_SetTimer, MinuteSingle) == 0x000004, "Member 'RBTimerInterface_SetTimer::MinuteSingle' has a wrong offset!");
static_assert(offsetof(RBTimerInterface_SetTimer, SecondsTen) == 0x000008, "Member 'RBTimerInterface_SetTimer::SecondsTen' has a wrong offset!");
static_assert(offsetof(RBTimerInterface_SetTimer, SecondsSingle) == 0x00000C, "Member 'RBTimerInterface_SetTimer::SecondsSingle' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Client_KickedFromServer
// 0x0048 (0x0048 - 0x0000)
struct RBMenuPlayerController_Client_KickedFromServer final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ErrorCauseMessage;                                 // 0x0018(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ErrorFacility;                                     // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformErrorCode;                                 // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_Client_KickedFromServer) == 0x000008, "Wrong alignment on RBMenuPlayerController_Client_KickedFromServer");
static_assert(sizeof(RBMenuPlayerController_Client_KickedFromServer) == 0x000048, "Wrong size on RBMenuPlayerController_Client_KickedFromServer");
static_assert(offsetof(RBMenuPlayerController_Client_KickedFromServer, Message) == 0x000000, "Member 'RBMenuPlayerController_Client_KickedFromServer::Message' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Client_KickedFromServer, ErrorCauseMessage) == 0x000018, "Member 'RBMenuPlayerController_Client_KickedFromServer::ErrorCauseMessage' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Client_KickedFromServer, ErrorFacility) == 0x000030, "Member 'RBMenuPlayerController_Client_KickedFromServer::ErrorFacility' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Client_KickedFromServer, ErrorCode) == 0x000034, "Member 'RBMenuPlayerController_Client_KickedFromServer::ErrorCode' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Client_KickedFromServer, PlatformErrorCode) == 0x000038, "Member 'RBMenuPlayerController_Client_KickedFromServer::PlatformErrorCode' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Client_PartyMemberPlayerSlotsReservationProcessed
// 0x0018 (0x0018 - 0x0000)
struct RBMenuPlayerController_Client_PartyMemberPlayerSlotsReservationProcessed final
{
public:
	TArray<struct FProfileId>                     Members;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAccepted;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F69[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMenuPlayerController_Client_PartyMemberPlayerSlotsReservationProcessed) == 0x000008, "Wrong alignment on RBMenuPlayerController_Client_PartyMemberPlayerSlotsReservationProcessed");
static_assert(sizeof(RBMenuPlayerController_Client_PartyMemberPlayerSlotsReservationProcessed) == 0x000018, "Wrong size on RBMenuPlayerController_Client_PartyMemberPlayerSlotsReservationProcessed");
static_assert(offsetof(RBMenuPlayerController_Client_PartyMemberPlayerSlotsReservationProcessed, Members) == 0x000000, "Member 'RBMenuPlayerController_Client_PartyMemberPlayerSlotsReservationProcessed::Members' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Client_PartyMemberPlayerSlotsReservationProcessed, bAccepted) == 0x000010, "Member 'RBMenuPlayerController_Client_PartyMemberPlayerSlotsReservationProcessed::bAccepted' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Client_SetPlayerStatsData
// 0x0020 (0x0020 - 0x0000)
struct RBMenuPlayerController_Client_SetPlayerStatsData final
{
public:
	TArray<struct FRBStatContext>                 Stats;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRBUIReleasedCharacterDetails>  ReleasedCharacterDetailsList;                      // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_Client_SetPlayerStatsData) == 0x000008, "Wrong alignment on RBMenuPlayerController_Client_SetPlayerStatsData");
static_assert(sizeof(RBMenuPlayerController_Client_SetPlayerStatsData) == 0x000020, "Wrong size on RBMenuPlayerController_Client_SetPlayerStatsData");
static_assert(offsetof(RBMenuPlayerController_Client_SetPlayerStatsData, Stats) == 0x000000, "Member 'RBMenuPlayerController_Client_SetPlayerStatsData::Stats' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Client_SetPlayerStatsData, ReleasedCharacterDetailsList) == 0x000010, "Member 'RBMenuPlayerController_Client_SetPlayerStatsData::ReleasedCharacterDetailsList' has a wrong offset!");

// Function OPP.RBMenuPlayerController.OnExpectedPlayerCountUpdated
// 0x0004 (0x0004 - 0x0000)
struct RBMenuPlayerController_OnExpectedPlayerCountUpdated final
{
public:
	int32                                         ExpectedPlayerCount;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_OnExpectedPlayerCountUpdated) == 0x000004, "Wrong alignment on RBMenuPlayerController_OnExpectedPlayerCountUpdated");
static_assert(sizeof(RBMenuPlayerController_OnExpectedPlayerCountUpdated) == 0x000004, "Wrong size on RBMenuPlayerController_OnExpectedPlayerCountUpdated");
static_assert(offsetof(RBMenuPlayerController_OnExpectedPlayerCountUpdated, ExpectedPlayerCount) == 0x000000, "Member 'RBMenuPlayerController_OnExpectedPlayerCountUpdated::ExpectedPlayerCount' has a wrong offset!");

// Function OPP.RBMenuPlayerController.RestorePlayerViewTarget
// 0x0018 (0x0018 - 0x0000)
struct RBMenuPlayerController_RestorePlayerViewTarget final
{
public:
	class AActor*                                 OldMenuViewTarget;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6A[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6B[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMenuPlayerController_RestorePlayerViewTarget) == 0x000008, "Wrong alignment on RBMenuPlayerController_RestorePlayerViewTarget");
static_assert(sizeof(RBMenuPlayerController_RestorePlayerViewTarget) == 0x000018, "Wrong size on RBMenuPlayerController_RestorePlayerViewTarget");
static_assert(offsetof(RBMenuPlayerController_RestorePlayerViewTarget, OldMenuViewTarget) == 0x000000, "Member 'RBMenuPlayerController_RestorePlayerViewTarget::OldMenuViewTarget' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_RestorePlayerViewTarget, blendTime) == 0x000008, "Member 'RBMenuPlayerController_RestorePlayerViewTarget::blendTime' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_RestorePlayerViewTarget, BlendFunc) == 0x00000C, "Member 'RBMenuPlayerController_RestorePlayerViewTarget::BlendFunc' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_RestorePlayerViewTarget, BlendExp) == 0x000010, "Member 'RBMenuPlayerController_RestorePlayerViewTarget::BlendExp' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_RestorePlayerViewTarget, bLockOutgoing) == 0x000014, "Member 'RBMenuPlayerController_RestorePlayerViewTarget::bLockOutgoing' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Server_Report
// 0x0028 (0x0028 - 0x0000)
struct RBMenuPlayerController_Server_Report final
{
public:
	struct FProfileId                             TargetProfileId;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerReportReason                           Reason;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReasonText;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_Server_Report) == 0x000008, "Wrong alignment on RBMenuPlayerController_Server_Report");
static_assert(sizeof(RBMenuPlayerController_Server_Report) == 0x000028, "Wrong size on RBMenuPlayerController_Server_Report");
static_assert(offsetof(RBMenuPlayerController_Server_Report, TargetProfileId) == 0x000000, "Member 'RBMenuPlayerController_Server_Report::TargetProfileId' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Server_Report, Reason) == 0x000010, "Member 'RBMenuPlayerController_Server_Report::Reason' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Server_Report, ReasonText) == 0x000018, "Member 'RBMenuPlayerController_Server_Report::ReasonText' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Server_ReservePartyMemberPlayerSlots
// 0x0010 (0x0010 - 0x0000)
struct RBMenuPlayerController_Server_ReservePartyMemberPlayerSlots final
{
public:
	TArray<struct FProfileId>                     Members;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_Server_ReservePartyMemberPlayerSlots) == 0x000008, "Wrong alignment on RBMenuPlayerController_Server_ReservePartyMemberPlayerSlots");
static_assert(sizeof(RBMenuPlayerController_Server_ReservePartyMemberPlayerSlots) == 0x000010, "Wrong size on RBMenuPlayerController_Server_ReservePartyMemberPlayerSlots");
static_assert(offsetof(RBMenuPlayerController_Server_ReservePartyMemberPlayerSlots, Members) == 0x000000, "Member 'RBMenuPlayerController_Server_ReservePartyMemberPlayerSlots::Members' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Server_SetBlockedProfileIds
// 0x0010 (0x0010 - 0x0000)
struct RBMenuPlayerController_Server_SetBlockedProfileIds final
{
public:
	TArray<struct FProfileId>                     ProfileIds;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_Server_SetBlockedProfileIds) == 0x000008, "Wrong alignment on RBMenuPlayerController_Server_SetBlockedProfileIds");
static_assert(sizeof(RBMenuPlayerController_Server_SetBlockedProfileIds) == 0x000010, "Wrong size on RBMenuPlayerController_Server_SetBlockedProfileIds");
static_assert(offsetof(RBMenuPlayerController_Server_SetBlockedProfileIds, ProfileIds) == 0x000000, "Member 'RBMenuPlayerController_Server_SetBlockedProfileIds::ProfileIds' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Server_SetIsInLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_Server_SetIsInLoadingScreen final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_Server_SetIsInLoadingScreen) == 0x000001, "Wrong alignment on RBMenuPlayerController_Server_SetIsInLoadingScreen");
static_assert(sizeof(RBMenuPlayerController_Server_SetIsInLoadingScreen) == 0x000001, "Wrong size on RBMenuPlayerController_Server_SetIsInLoadingScreen");
static_assert(offsetof(RBMenuPlayerController_Server_SetIsInLoadingScreen, bValue) == 0x000000, "Member 'RBMenuPlayerController_Server_SetIsInLoadingScreen::bValue' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Server_SetIsLeaving
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_Server_SetIsLeaving final
{
public:
	EPlayerLeaveTarget                            Target;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_Server_SetIsLeaving) == 0x000001, "Wrong alignment on RBMenuPlayerController_Server_SetIsLeaving");
static_assert(sizeof(RBMenuPlayerController_Server_SetIsLeaving) == 0x000001, "Wrong size on RBMenuPlayerController_Server_SetIsLeaving");
static_assert(offsetof(RBMenuPlayerController_Server_SetIsLeaving, Target) == 0x000000, "Member 'RBMenuPlayerController_Server_SetIsLeaving::Target' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Server_SetPresenceInfo
// 0x0018 (0x0018 - 0x0000)
struct RBMenuPlayerController_Server_SetPresenceInfo final
{
public:
	class FString                                 PartyId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerCount;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJoinable;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFriendRequiresInvite;                             // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPublicRequiresInvite;                             // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6D[0x1];                                     // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMenuPlayerController_Server_SetPresenceInfo) == 0x000008, "Wrong alignment on RBMenuPlayerController_Server_SetPresenceInfo");
static_assert(sizeof(RBMenuPlayerController_Server_SetPresenceInfo) == 0x000018, "Wrong size on RBMenuPlayerController_Server_SetPresenceInfo");
static_assert(offsetof(RBMenuPlayerController_Server_SetPresenceInfo, PartyId) == 0x000000, "Member 'RBMenuPlayerController_Server_SetPresenceInfo::PartyId' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Server_SetPresenceInfo, PlayerCount) == 0x000010, "Member 'RBMenuPlayerController_Server_SetPresenceInfo::PlayerCount' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Server_SetPresenceInfo, bJoinable) == 0x000014, "Member 'RBMenuPlayerController_Server_SetPresenceInfo::bJoinable' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Server_SetPresenceInfo, bFriendRequiresInvite) == 0x000015, "Member 'RBMenuPlayerController_Server_SetPresenceInfo::bFriendRequiresInvite' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_Server_SetPresenceInfo, bPublicRequiresInvite) == 0x000016, "Member 'RBMenuPlayerController_Server_SetPresenceInfo::bPublicRequiresInvite' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Server_SetRegionLatency
// 0x0010 (0x0010 - 0x0000)
struct RBMenuPlayerController_Server_SetRegionLatency final
{
public:
	TArray<struct FRegionLatency>                 RegionLatency;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_Server_SetRegionLatency) == 0x000008, "Wrong alignment on RBMenuPlayerController_Server_SetRegionLatency");
static_assert(sizeof(RBMenuPlayerController_Server_SetRegionLatency) == 0x000010, "Wrong size on RBMenuPlayerController_Server_SetRegionLatency");
static_assert(offsetof(RBMenuPlayerController_Server_SetRegionLatency, RegionLatency) == 0x000000, "Member 'RBMenuPlayerController_Server_SetRegionLatency::RegionLatency' has a wrong offset!");

// Function OPP.RBMenuPlayerController.Server_SetVoiceChatState
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_Server_SetVoiceChatState final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_Server_SetVoiceChatState) == 0x000001, "Wrong alignment on RBMenuPlayerController_Server_SetVoiceChatState");
static_assert(sizeof(RBMenuPlayerController_Server_SetVoiceChatState) == 0x000001, "Wrong size on RBMenuPlayerController_Server_SetVoiceChatState");
static_assert(offsetof(RBMenuPlayerController_Server_SetVoiceChatState, bEnabled) == 0x000000, "Member 'RBMenuPlayerController_Server_SetVoiceChatState::bEnabled' has a wrong offset!");

// Function OPP.RBMenuPlayerController.SetAllowLookInMenu
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_SetAllowLookInMenu final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_SetAllowLookInMenu) == 0x000001, "Wrong alignment on RBMenuPlayerController_SetAllowLookInMenu");
static_assert(sizeof(RBMenuPlayerController_SetAllowLookInMenu) == 0x000001, "Wrong size on RBMenuPlayerController_SetAllowLookInMenu");
static_assert(offsetof(RBMenuPlayerController_SetAllowLookInMenu, bValue) == 0x000000, "Member 'RBMenuPlayerController_SetAllowLookInMenu::bValue' has a wrong offset!");

// Function OPP.RBMenuPlayerController.SetMenuViewTargetWithBlend
// 0x0018 (0x0018 - 0x0000)
struct RBMenuPlayerController_SetMenuViewTargetWithBlend final
{
public:
	class AActor*                                 NewViewTarget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6E[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F6F[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMenuPlayerController_SetMenuViewTargetWithBlend) == 0x000008, "Wrong alignment on RBMenuPlayerController_SetMenuViewTargetWithBlend");
static_assert(sizeof(RBMenuPlayerController_SetMenuViewTargetWithBlend) == 0x000018, "Wrong size on RBMenuPlayerController_SetMenuViewTargetWithBlend");
static_assert(offsetof(RBMenuPlayerController_SetMenuViewTargetWithBlend, NewViewTarget) == 0x000000, "Member 'RBMenuPlayerController_SetMenuViewTargetWithBlend::NewViewTarget' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_SetMenuViewTargetWithBlend, blendTime) == 0x000008, "Member 'RBMenuPlayerController_SetMenuViewTargetWithBlend::blendTime' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_SetMenuViewTargetWithBlend, BlendFunc) == 0x00000C, "Member 'RBMenuPlayerController_SetMenuViewTargetWithBlend::BlendFunc' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_SetMenuViewTargetWithBlend, BlendExp) == 0x000010, "Member 'RBMenuPlayerController_SetMenuViewTargetWithBlend::BlendExp' has a wrong offset!");
static_assert(offsetof(RBMenuPlayerController_SetMenuViewTargetWithBlend, bLockOutgoing) == 0x000014, "Member 'RBMenuPlayerController_SetMenuViewTargetWithBlend::bLockOutgoing' has a wrong offset!");

// Function OPP.RBMenuPlayerController.GetAllowLookInMenu
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_GetAllowLookInMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_GetAllowLookInMenu) == 0x000001, "Wrong alignment on RBMenuPlayerController_GetAllowLookInMenu");
static_assert(sizeof(RBMenuPlayerController_GetAllowLookInMenu) == 0x000001, "Wrong size on RBMenuPlayerController_GetAllowLookInMenu");
static_assert(offsetof(RBMenuPlayerController_GetAllowLookInMenu, ReturnValue) == 0x000000, "Member 'RBMenuPlayerController_GetAllowLookInMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuPlayerController.GetCurrentGamepadType
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_GetCurrentGamepadType final
{
public:
	EGamepadType                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_GetCurrentGamepadType) == 0x000001, "Wrong alignment on RBMenuPlayerController_GetCurrentGamepadType");
static_assert(sizeof(RBMenuPlayerController_GetCurrentGamepadType) == 0x000001, "Wrong size on RBMenuPlayerController_GetCurrentGamepadType");
static_assert(offsetof(RBMenuPlayerController_GetCurrentGamepadType, ReturnValue) == 0x000000, "Member 'RBMenuPlayerController_GetCurrentGamepadType::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuPlayerController.GetLeaveTarget
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_GetLeaveTarget final
{
public:
	EPlayerLeaveTarget                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_GetLeaveTarget) == 0x000001, "Wrong alignment on RBMenuPlayerController_GetLeaveTarget");
static_assert(sizeof(RBMenuPlayerController_GetLeaveTarget) == 0x000001, "Wrong size on RBMenuPlayerController_GetLeaveTarget");
static_assert(offsetof(RBMenuPlayerController_GetLeaveTarget, ReturnValue) == 0x000000, "Member 'RBMenuPlayerController_GetLeaveTarget::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuPlayerController.IsInLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_IsInLoadingScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_IsInLoadingScreen) == 0x000001, "Wrong alignment on RBMenuPlayerController_IsInLoadingScreen");
static_assert(sizeof(RBMenuPlayerController_IsInLoadingScreen) == 0x000001, "Wrong size on RBMenuPlayerController_IsInLoadingScreen");
static_assert(offsetof(RBMenuPlayerController_IsInLoadingScreen, ReturnValue) == 0x000000, "Member 'RBMenuPlayerController_IsInLoadingScreen::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuPlayerController.IsInMenu
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_IsInMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_IsInMenu) == 0x000001, "Wrong alignment on RBMenuPlayerController_IsInMenu");
static_assert(sizeof(RBMenuPlayerController_IsInMenu) == 0x000001, "Wrong size on RBMenuPlayerController_IsInMenu");
static_assert(offsetof(RBMenuPlayerController_IsInMenu, ReturnValue) == 0x000000, "Member 'RBMenuPlayerController_IsInMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuPlayerController.IsLeaving
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_IsLeaving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_IsLeaving) == 0x000001, "Wrong alignment on RBMenuPlayerController_IsLeaving");
static_assert(sizeof(RBMenuPlayerController_IsLeaving) == 0x000001, "Wrong size on RBMenuPlayerController_IsLeaving");
static_assert(offsetof(RBMenuPlayerController_IsLeaving, ReturnValue) == 0x000000, "Member 'RBMenuPlayerController_IsLeaving::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuPlayerController.IsUsingGamePad
// 0x0001 (0x0001 - 0x0000)
struct RBMenuPlayerController_IsUsingGamePad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuPlayerController_IsUsingGamePad) == 0x000001, "Wrong alignment on RBMenuPlayerController_IsUsingGamePad");
static_assert(sizeof(RBMenuPlayerController_IsUsingGamePad) == 0x000001, "Wrong size on RBMenuPlayerController_IsUsingGamePad");
static_assert(offsetof(RBMenuPlayerController_IsUsingGamePad, ReturnValue) == 0x000000, "Member 'RBMenuPlayerController_IsUsingGamePad::ReturnValue' has a wrong offset!");

// Function OPP.RBController.BP_Cheat_AddOnlineItem
// 0x000C (0x000C - 0x0000)
struct RBController_BP_Cheat_AddOnlineItem final
{
public:
	class FName                                   OnlineItemId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPersistentItem;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F7C[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_BP_Cheat_AddOnlineItem) == 0x000004, "Wrong alignment on RBController_BP_Cheat_AddOnlineItem");
static_assert(sizeof(RBController_BP_Cheat_AddOnlineItem) == 0x00000C, "Wrong size on RBController_BP_Cheat_AddOnlineItem");
static_assert(offsetof(RBController_BP_Cheat_AddOnlineItem, OnlineItemId) == 0x000000, "Member 'RBController_BP_Cheat_AddOnlineItem::OnlineItemId' has a wrong offset!");
static_assert(offsetof(RBController_BP_Cheat_AddOnlineItem, bIsPersistentItem) == 0x000008, "Member 'RBController_BP_Cheat_AddOnlineItem::bIsPersistentItem' has a wrong offset!");

// Function OPP.RBController.BP_Cheat_SetActiveSkill
// 0x0001 (0x0001 - 0x0000)
struct RBController_BP_Cheat_SetActiveSkill final
{
public:
	EActiveSkillType                              SkillType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_BP_Cheat_SetActiveSkill) == 0x000001, "Wrong alignment on RBController_BP_Cheat_SetActiveSkill");
static_assert(sizeof(RBController_BP_Cheat_SetActiveSkill) == 0x000001, "Wrong size on RBController_BP_Cheat_SetActiveSkill");
static_assert(offsetof(RBController_BP_Cheat_SetActiveSkill, SkillType) == 0x000000, "Member 'RBController_BP_Cheat_SetActiveSkill::SkillType' has a wrong offset!");

// Function OPP.RBController.BP_GetRBSpectatedPawn
// 0x0008 (0x0008 - 0x0000)
struct RBController_BP_GetRBSpectatedPawn final
{
public:
	class ARBPlayer*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_BP_GetRBSpectatedPawn) == 0x000008, "Wrong alignment on RBController_BP_GetRBSpectatedPawn");
static_assert(sizeof(RBController_BP_GetRBSpectatedPawn) == 0x000008, "Wrong size on RBController_BP_GetRBSpectatedPawn");
static_assert(offsetof(RBController_BP_GetRBSpectatedPawn, ReturnValue) == 0x000000, "Member 'RBController_BP_GetRBSpectatedPawn::ReturnValue' has a wrong offset!");

// Function OPP.RBController.Client_ActivateVFX
// 0x0008 (0x0008 - 0x0000)
struct RBController_Client_ActivateVFX final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_ActivateVFX) == 0x000008, "Wrong alignment on RBController_Client_ActivateVFX");
static_assert(sizeof(RBController_Client_ActivateVFX) == 0x000008, "Wrong size on RBController_Client_ActivateVFX");
static_assert(offsetof(RBController_Client_ActivateVFX, Actor) == 0x000000, "Member 'RBController_Client_ActivateVFX::Actor' has a wrong offset!");

// Function OPP.RBController.Client_AddHudMessage
// 0x0030 (0x0030 - 0x0000)
struct RBController_Client_AddHudMessage final
{
public:
	class FName                                   MessageId;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	EMessagePriority                              Priority;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F7D[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameMessageCategory                          GameMessageCategory;                               // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F7E[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Client_AddHudMessage) == 0x000008, "Wrong alignment on RBController_Client_AddHudMessage");
static_assert(sizeof(RBController_Client_AddHudMessage) == 0x000030, "Wrong size on RBController_Client_AddHudMessage");
static_assert(offsetof(RBController_Client_AddHudMessage, MessageId) == 0x000000, "Member 'RBController_Client_AddHudMessage::MessageId' has a wrong offset!");
static_assert(offsetof(RBController_Client_AddHudMessage, Text) == 0x000008, "Member 'RBController_Client_AddHudMessage::Text' has a wrong offset!");
static_assert(offsetof(RBController_Client_AddHudMessage, Priority) == 0x000020, "Member 'RBController_Client_AddHudMessage::Priority' has a wrong offset!");
static_assert(offsetof(RBController_Client_AddHudMessage, Duration) == 0x000024, "Member 'RBController_Client_AddHudMessage::Duration' has a wrong offset!");
static_assert(offsetof(RBController_Client_AddHudMessage, GameMessageCategory) == 0x000028, "Member 'RBController_Client_AddHudMessage::GameMessageCategory' has a wrong offset!");

// Function OPP.RBController.Client_BadgeAcquired
// 0x0008 (0x0008 - 0x0000)
struct RBController_Client_BadgeAcquired final
{
public:
	class FName                                   BadgeId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_BadgeAcquired) == 0x000004, "Wrong alignment on RBController_Client_BadgeAcquired");
static_assert(sizeof(RBController_Client_BadgeAcquired) == 0x000008, "Wrong size on RBController_Client_BadgeAcquired");
static_assert(offsetof(RBController_Client_BadgeAcquired, BadgeId) == 0x000000, "Member 'RBController_Client_BadgeAcquired::BadgeId' has a wrong offset!");

// Function OPP.RBController.Client_Cheat_DebugCorridorDebugInfo
// 0x0038 (0x0038 - 0x0000)
struct RBController_Client_Cheat_DebugCorridorDebugInfo final
{
public:
	struct FRBEvalCorridorDebugInfo               ServerDebugInfo;                                   // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_Cheat_DebugCorridorDebugInfo) == 0x000008, "Wrong alignment on RBController_Client_Cheat_DebugCorridorDebugInfo");
static_assert(sizeof(RBController_Client_Cheat_DebugCorridorDebugInfo) == 0x000038, "Wrong size on RBController_Client_Cheat_DebugCorridorDebugInfo");
static_assert(offsetof(RBController_Client_Cheat_DebugCorridorDebugInfo, ServerDebugInfo) == 0x000000, "Member 'RBController_Client_Cheat_DebugCorridorDebugInfo::ServerDebugInfo' has a wrong offset!");

// Function OPP.RBController.Client_DumpAILog
// 0x0020 (0x0020 - 0x0000)
struct RBController_Client_DumpAILog final
{
public:
	class FString                                 BotName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAIEventLogItem>                EventLog;                                          // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_DumpAILog) == 0x000008, "Wrong alignment on RBController_Client_DumpAILog");
static_assert(sizeof(RBController_Client_DumpAILog) == 0x000020, "Wrong size on RBController_Client_DumpAILog");
static_assert(offsetof(RBController_Client_DumpAILog, BotName) == 0x000000, "Member 'RBController_Client_DumpAILog::BotName' has a wrong offset!");
static_assert(offsetof(RBController_Client_DumpAILog, EventLog) == 0x000010, "Member 'RBController_Client_DumpAILog::EventLog' has a wrong offset!");

// Function OPP.RBController.Client_DumpGameEventLog
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_DumpGameEventLog final
{
public:
	TArray<struct FGameEvent>                     EventLog;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_DumpGameEventLog) == 0x000008, "Wrong alignment on RBController_Client_DumpGameEventLog");
static_assert(sizeof(RBController_Client_DumpGameEventLog) == 0x000010, "Wrong size on RBController_Client_DumpGameEventLog");
static_assert(offsetof(RBController_Client_DumpGameEventLog, EventLog) == 0x000000, "Member 'RBController_Client_DumpGameEventLog::EventLog' has a wrong offset!");

// Function OPP.RBController.Client_DumpRecentServerLog
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_DumpRecentServerLog final
{
public:
	class FString                                 ServerLog;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_DumpRecentServerLog) == 0x000008, "Wrong alignment on RBController_Client_DumpRecentServerLog");
static_assert(sizeof(RBController_Client_DumpRecentServerLog) == 0x000010, "Wrong size on RBController_Client_DumpRecentServerLog");
static_assert(offsetof(RBController_Client_DumpRecentServerLog, ServerLog) == 0x000000, "Member 'RBController_Client_DumpRecentServerLog::ServerLog' has a wrong offset!");

// Function OPP.RBController.Client_EnterSpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct RBController_Client_EnterSpectatorMode final
{
public:
	ESpectatorMode                                Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_EnterSpectatorMode) == 0x000001, "Wrong alignment on RBController_Client_EnterSpectatorMode");
static_assert(sizeof(RBController_Client_EnterSpectatorMode) == 0x000001, "Wrong size on RBController_Client_EnterSpectatorMode");
static_assert(offsetof(RBController_Client_EnterSpectatorMode, Mode) == 0x000000, "Member 'RBController_Client_EnterSpectatorMode::Mode' has a wrong offset!");

// Function OPP.RBController.Client_LeaveSpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct RBController_Client_LeaveSpectatorMode final
{
public:
	bool                                          bRestartingPlayer;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_LeaveSpectatorMode) == 0x000001, "Wrong alignment on RBController_Client_LeaveSpectatorMode");
static_assert(sizeof(RBController_Client_LeaveSpectatorMode) == 0x000001, "Wrong size on RBController_Client_LeaveSpectatorMode");
static_assert(offsetof(RBController_Client_LeaveSpectatorMode, bRestartingPlayer) == 0x000000, "Member 'RBController_Client_LeaveSpectatorMode::bRestartingPlayer' has a wrong offset!");

// Function OPP.RBController.Client_OnPlayerScoringEventRecorded
// 0x0014 (0x0014 - 0x0000)
struct RBController_Client_OnPlayerScoringEventRecorded final
{
public:
	EPlayerEvent                                  EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F7F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RuleId;                                            // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         XpValue;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_OnPlayerScoringEventRecorded) == 0x000004, "Wrong alignment on RBController_Client_OnPlayerScoringEventRecorded");
static_assert(sizeof(RBController_Client_OnPlayerScoringEventRecorded) == 0x000014, "Wrong size on RBController_Client_OnPlayerScoringEventRecorded");
static_assert(offsetof(RBController_Client_OnPlayerScoringEventRecorded, EventType) == 0x000000, "Member 'RBController_Client_OnPlayerScoringEventRecorded::EventType' has a wrong offset!");
static_assert(offsetof(RBController_Client_OnPlayerScoringEventRecorded, RuleId) == 0x000004, "Member 'RBController_Client_OnPlayerScoringEventRecorded::RuleId' has a wrong offset!");
static_assert(offsetof(RBController_Client_OnPlayerScoringEventRecorded, ScoreValue) == 0x00000C, "Member 'RBController_Client_OnPlayerScoringEventRecorded::ScoreValue' has a wrong offset!");
static_assert(offsetof(RBController_Client_OnPlayerScoringEventRecorded, XpValue) == 0x000010, "Member 'RBController_Client_OnPlayerScoringEventRecorded::XpValue' has a wrong offset!");

// Function OPP.RBController.Client_PlaySingleShotMusicTrack
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_PlaySingleShotMusicTrack final
{
public:
	class UAkAudioEvent*                          MusicTrack;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseLevelMusic;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F80[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Client_PlaySingleShotMusicTrack) == 0x000008, "Wrong alignment on RBController_Client_PlaySingleShotMusicTrack");
static_assert(sizeof(RBController_Client_PlaySingleShotMusicTrack) == 0x000010, "Wrong size on RBController_Client_PlaySingleShotMusicTrack");
static_assert(offsetof(RBController_Client_PlaySingleShotMusicTrack, MusicTrack) == 0x000000, "Member 'RBController_Client_PlaySingleShotMusicTrack::MusicTrack' has a wrong offset!");
static_assert(offsetof(RBController_Client_PlaySingleShotMusicTrack, bPauseLevelMusic) == 0x000008, "Member 'RBController_Client_PlaySingleShotMusicTrack::bPauseLevelMusic' has a wrong offset!");

// Function OPP.RBController.Client_PlayVOOnActor
// 0x0020 (0x0020 - 0x0000)
struct RBController_Client_PlayVOOnActor final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 VoOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOPriority                                   VOPriority;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F81[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        RandomSeed;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayOnPlayersWatch;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F82[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Client_PlayVOOnActor) == 0x000008, "Wrong alignment on RBController_Client_PlayVOOnActor");
static_assert(sizeof(RBController_Client_PlayVOOnActor) == 0x000020, "Wrong size on RBController_Client_PlayVOOnActor");
static_assert(offsetof(RBController_Client_PlayVOOnActor, AkEvent) == 0x000000, "Member 'RBController_Client_PlayVOOnActor::AkEvent' has a wrong offset!");
static_assert(offsetof(RBController_Client_PlayVOOnActor, VoOwner) == 0x000008, "Member 'RBController_Client_PlayVOOnActor::VoOwner' has a wrong offset!");
static_assert(offsetof(RBController_Client_PlayVOOnActor, VOPriority) == 0x000010, "Member 'RBController_Client_PlayVOOnActor::VOPriority' has a wrong offset!");
static_assert(offsetof(RBController_Client_PlayVOOnActor, RandomSeed) == 0x000014, "Member 'RBController_Client_PlayVOOnActor::RandomSeed' has a wrong offset!");
static_assert(offsetof(RBController_Client_PlayVOOnActor, bPlayOnPlayersWatch) == 0x000018, "Member 'RBController_Client_PlayVOOnActor::bPlayOnPlayersWatch' has a wrong offset!");

// Function OPP.RBController.Client_PlayVOOnNarrator
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_PlayVOOnNarrator final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVOPriority                                   VOPriority;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F83[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        RandomSeed;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_PlayVOOnNarrator) == 0x000008, "Wrong alignment on RBController_Client_PlayVOOnNarrator");
static_assert(sizeof(RBController_Client_PlayVOOnNarrator) == 0x000010, "Wrong size on RBController_Client_PlayVOOnNarrator");
static_assert(offsetof(RBController_Client_PlayVOOnNarrator, AkEvent) == 0x000000, "Member 'RBController_Client_PlayVOOnNarrator::AkEvent' has a wrong offset!");
static_assert(offsetof(RBController_Client_PlayVOOnNarrator, VOPriority) == 0x000008, "Member 'RBController_Client_PlayVOOnNarrator::VOPriority' has a wrong offset!");
static_assert(offsetof(RBController_Client_PlayVOOnNarrator, RandomSeed) == 0x00000C, "Member 'RBController_Client_PlayVOOnNarrator::RandomSeed' has a wrong offset!");

// Function OPP.RBController.Client_PlayVOOnWatch
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_PlayVOOnWatch final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        RandomSeed;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F84[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Client_PlayVOOnWatch) == 0x000008, "Wrong alignment on RBController_Client_PlayVOOnWatch");
static_assert(sizeof(RBController_Client_PlayVOOnWatch) == 0x000010, "Wrong size on RBController_Client_PlayVOOnWatch");
static_assert(offsetof(RBController_Client_PlayVOOnWatch, AkEvent) == 0x000000, "Member 'RBController_Client_PlayVOOnWatch::AkEvent' has a wrong offset!");
static_assert(offsetof(RBController_Client_PlayVOOnWatch, RandomSeed) == 0x000008, "Member 'RBController_Client_PlayVOOnWatch::RandomSeed' has a wrong offset!");

// Function OPP.RBController.Client_PostAkEvent
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_PostAkEvent final
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_PostAkEvent) == 0x000008, "Wrong alignment on RBController_Client_PostAkEvent");
static_assert(sizeof(RBController_Client_PostAkEvent) == 0x000010, "Wrong size on RBController_Client_PostAkEvent");
static_assert(offsetof(RBController_Client_PostAkEvent, AkComponent) == 0x000000, "Member 'RBController_Client_PostAkEvent::AkComponent' has a wrong offset!");
static_assert(offsetof(RBController_Client_PostAkEvent, AkEvent) == 0x000008, "Member 'RBController_Client_PostAkEvent::AkEvent' has a wrong offset!");

// Function OPP.RBController.Client_PostAkEventGlobal
// 0x0008 (0x0008 - 0x0000)
struct RBController_Client_PostAkEventGlobal final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_PostAkEventGlobal) == 0x000008, "Wrong alignment on RBController_Client_PostAkEventGlobal");
static_assert(sizeof(RBController_Client_PostAkEventGlobal) == 0x000008, "Wrong size on RBController_Client_PostAkEventGlobal");
static_assert(offsetof(RBController_Client_PostAkEventGlobal, AkEvent) == 0x000000, "Member 'RBController_Client_PostAkEventGlobal::AkEvent' has a wrong offset!");

// Function OPP.RBController.Client_PostAkEventOnActor
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_PostAkEventOnActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_PostAkEventOnActor) == 0x000008, "Wrong alignment on RBController_Client_PostAkEventOnActor");
static_assert(sizeof(RBController_Client_PostAkEventOnActor) == 0x000010, "Wrong size on RBController_Client_PostAkEventOnActor");
static_assert(offsetof(RBController_Client_PostAkEventOnActor, Actor) == 0x000000, "Member 'RBController_Client_PostAkEventOnActor::Actor' has a wrong offset!");
static_assert(offsetof(RBController_Client_PostAkEventOnActor, AkEvent) == 0x000008, "Member 'RBController_Client_PostAkEventOnActor::AkEvent' has a wrong offset!");

// Function OPP.RBController.Client_PostAssociatedAKEvent
// 0x0008 (0x0008 - 0x0000)
struct RBController_Client_PostAssociatedAKEvent final
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_PostAssociatedAKEvent) == 0x000008, "Wrong alignment on RBController_Client_PostAssociatedAKEvent");
static_assert(sizeof(RBController_Client_PostAssociatedAKEvent) == 0x000008, "Wrong size on RBController_Client_PostAssociatedAKEvent");
static_assert(offsetof(RBController_Client_PostAssociatedAKEvent, AkComponent) == 0x000000, "Member 'RBController_Client_PostAssociatedAKEvent::AkComponent' has a wrong offset!");

// Function OPP.RBController.Client_PostAudioEventOnGroup
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_PostAudioEventOnGroup final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GroupName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_PostAudioEventOnGroup) == 0x000008, "Wrong alignment on RBController_Client_PostAudioEventOnGroup");
static_assert(sizeof(RBController_Client_PostAudioEventOnGroup) == 0x000010, "Wrong size on RBController_Client_PostAudioEventOnGroup");
static_assert(offsetof(RBController_Client_PostAudioEventOnGroup, AkEvent) == 0x000000, "Member 'RBController_Client_PostAudioEventOnGroup::AkEvent' has a wrong offset!");
static_assert(offsetof(RBController_Client_PostAudioEventOnGroup, GroupName) == 0x000008, "Member 'RBController_Client_PostAudioEventOnGroup::GroupName' has a wrong offset!");

// Function OPP.RBController.Client_ResolvePendingOrders
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_ResolvePendingOrders final
{
public:
	TArray<int64>                                 PendingOrderIds;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_ResolvePendingOrders) == 0x000008, "Wrong alignment on RBController_Client_ResolvePendingOrders");
static_assert(sizeof(RBController_Client_ResolvePendingOrders) == 0x000010, "Wrong size on RBController_Client_ResolvePendingOrders");
static_assert(offsetof(RBController_Client_ResolvePendingOrders, PendingOrderIds) == 0x000000, "Member 'RBController_Client_ResolvePendingOrders::PendingOrderIds' has a wrong offset!");

// Function OPP.RBController.Client_ReturningToLobby
// 0x0030 (0x0030 - 0x0000)
struct RBController_Client_ReturningToLobby final
{
public:
	class FString                                 TicketId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingConfigurationName;                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProfileId>                     GroupMembers;                                      // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_ReturningToLobby) == 0x000008, "Wrong alignment on RBController_Client_ReturningToLobby");
static_assert(sizeof(RBController_Client_ReturningToLobby) == 0x000030, "Wrong size on RBController_Client_ReturningToLobby");
static_assert(offsetof(RBController_Client_ReturningToLobby, TicketId) == 0x000000, "Member 'RBController_Client_ReturningToLobby::TicketId' has a wrong offset!");
static_assert(offsetof(RBController_Client_ReturningToLobby, MatchmakingConfigurationName) == 0x000010, "Member 'RBController_Client_ReturningToLobby::MatchmakingConfigurationName' has a wrong offset!");
static_assert(offsetof(RBController_Client_ReturningToLobby, GroupMembers) == 0x000020, "Member 'RBController_Client_ReturningToLobby::GroupMembers' has a wrong offset!");

// Function OPP.RBController.Client_ServerError
// 0x0018 (0x0018 - 0x0000)
struct RBController_Client_ServerError final
{
public:
	class FString                                 ServerError;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayOnScreen;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F85[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Client_ServerError) == 0x000008, "Wrong alignment on RBController_Client_ServerError");
static_assert(sizeof(RBController_Client_ServerError) == 0x000018, "Wrong size on RBController_Client_ServerError");
static_assert(offsetof(RBController_Client_ServerError, ServerError) == 0x000000, "Member 'RBController_Client_ServerError::ServerError' has a wrong offset!");
static_assert(offsetof(RBController_Client_ServerError, bDisplayOnScreen) == 0x000010, "Member 'RBController_Client_ServerError::bDisplayOnScreen' has a wrong offset!");

// Function OPP.RBController.Client_ServerMsg
// 0x0018 (0x0018 - 0x0000)
struct RBController_Client_ServerMsg final
{
public:
	class FString                                 ServerMsg;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayOnScreen;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F86[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Client_ServerMsg) == 0x000008, "Wrong alignment on RBController_Client_ServerMsg");
static_assert(sizeof(RBController_Client_ServerMsg) == 0x000018, "Wrong size on RBController_Client_ServerMsg");
static_assert(offsetof(RBController_Client_ServerMsg, ServerMsg) == 0x000000, "Member 'RBController_Client_ServerMsg::ServerMsg' has a wrong offset!");
static_assert(offsetof(RBController_Client_ServerMsg, bDisplayOnScreen) == 0x000010, "Member 'RBController_Client_ServerMsg::bDisplayOnScreen' has a wrong offset!");

// Function OPP.RBController.Client_SetIgnoreLookInput
// 0x0001 (0x0001 - 0x0000)
struct RBController_Client_SetIgnoreLookInput final
{
public:
	bool                                          bNewMoveInput;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_SetIgnoreLookInput) == 0x000001, "Wrong alignment on RBController_Client_SetIgnoreLookInput");
static_assert(sizeof(RBController_Client_SetIgnoreLookInput) == 0x000001, "Wrong size on RBController_Client_SetIgnoreLookInput");
static_assert(offsetof(RBController_Client_SetIgnoreLookInput, bNewMoveInput) == 0x000000, "Member 'RBController_Client_SetIgnoreLookInput::bNewMoveInput' has a wrong offset!");

// Function OPP.RBController.Client_SetIgnoreMoveInput
// 0x0001 (0x0001 - 0x0000)
struct RBController_Client_SetIgnoreMoveInput final
{
public:
	bool                                          bNewMoveInput;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_SetIgnoreMoveInput) == 0x000001, "Wrong alignment on RBController_Client_SetIgnoreMoveInput");
static_assert(sizeof(RBController_Client_SetIgnoreMoveInput) == 0x000001, "Wrong size on RBController_Client_SetIgnoreMoveInput");
static_assert(offsetof(RBController_Client_SetIgnoreMoveInput, bNewMoveInput) == 0x000000, "Member 'RBController_Client_SetIgnoreMoveInput::bNewMoveInput' has a wrong offset!");

// Function OPP.RBController.Client_ShowGameMessage
// 0x0018 (0x0018 - 0x0000)
struct RBController_Client_ShowGameMessage final
{
public:
	class FText                                   ObjectiveText;                                     // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_ShowGameMessage) == 0x000008, "Wrong alignment on RBController_Client_ShowGameMessage");
static_assert(sizeof(RBController_Client_ShowGameMessage) == 0x000018, "Wrong size on RBController_Client_ShowGameMessage");
static_assert(offsetof(RBController_Client_ShowGameMessage, ObjectiveText) == 0x000000, "Member 'RBController_Client_ShowGameMessage::ObjectiveText' has a wrong offset!");

// Function OPP.RBController.Client_TriggerGlobalAudioAnnouncement
// 0x0008 (0x0008 - 0x0000)
struct RBController_Client_TriggerGlobalAudioAnnouncement final
{
public:
	class UAkAudioEvent*                          AnnouncementEvent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_TriggerGlobalAudioAnnouncement) == 0x000008, "Wrong alignment on RBController_Client_TriggerGlobalAudioAnnouncement");
static_assert(sizeof(RBController_Client_TriggerGlobalAudioAnnouncement) == 0x000008, "Wrong size on RBController_Client_TriggerGlobalAudioAnnouncement");
static_assert(offsetof(RBController_Client_TriggerGlobalAudioAnnouncement, AnnouncementEvent) == 0x000000, "Member 'RBController_Client_TriggerGlobalAudioAnnouncement::AnnouncementEvent' has a wrong offset!");

// Function OPP.RBController.Client_VoiceChat_SetChannelToken
// 0x0020 (0x0020 - 0x0000)
struct RBController_Client_VoiceChat_SetChannelToken final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_VoiceChat_SetChannelToken) == 0x000008, "Wrong alignment on RBController_Client_VoiceChat_SetChannelToken");
static_assert(sizeof(RBController_Client_VoiceChat_SetChannelToken) == 0x000020, "Wrong size on RBController_Client_VoiceChat_SetChannelToken");
static_assert(offsetof(RBController_Client_VoiceChat_SetChannelToken, ProfileId) == 0x000000, "Member 'RBController_Client_VoiceChat_SetChannelToken::ProfileId' has a wrong offset!");
static_assert(offsetof(RBController_Client_VoiceChat_SetChannelToken, Token) == 0x000010, "Member 'RBController_Client_VoiceChat_SetChannelToken::Token' has a wrong offset!");

// Function OPP.RBController.Client_VoiceChat_SetEchoChannelToken
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_VoiceChat_SetEchoChannelToken final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_VoiceChat_SetEchoChannelToken) == 0x000008, "Wrong alignment on RBController_Client_VoiceChat_SetEchoChannelToken");
static_assert(sizeof(RBController_Client_VoiceChat_SetEchoChannelToken) == 0x000010, "Wrong size on RBController_Client_VoiceChat_SetEchoChannelToken");
static_assert(offsetof(RBController_Client_VoiceChat_SetEchoChannelToken, Token) == 0x000000, "Member 'RBController_Client_VoiceChat_SetEchoChannelToken::Token' has a wrong offset!");

// Function OPP.RBController.Client_VoiceChat_SetLoginToken
// 0x0010 (0x0010 - 0x0000)
struct RBController_Client_VoiceChat_SetLoginToken final
{
public:
	class FString                                 Token;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Client_VoiceChat_SetLoginToken) == 0x000008, "Wrong alignment on RBController_Client_VoiceChat_SetLoginToken");
static_assert(sizeof(RBController_Client_VoiceChat_SetLoginToken) == 0x000010, "Wrong size on RBController_Client_VoiceChat_SetLoginToken");
static_assert(offsetof(RBController_Client_VoiceChat_SetLoginToken, Token) == 0x000000, "Member 'RBController_Client_VoiceChat_SetLoginToken::Token' has a wrong offset!");

// Function OPP.RBController.IsPlaytestMode
// 0x0001 (0x0001 - 0x0000)
struct RBController_IsPlaytestMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_IsPlaytestMode) == 0x000001, "Wrong alignment on RBController_IsPlaytestMode");
static_assert(sizeof(RBController_IsPlaytestMode) == 0x000001, "Wrong size on RBController_IsPlaytestMode");
static_assert(offsetof(RBController_IsPlaytestMode, ReturnValue) == 0x000000, "Member 'RBController_IsPlaytestMode::ReturnValue' has a wrong offset!");

// Function OPP.RBController.Multicast_NotifyEndOfStage
// 0x0038 (0x0038 - 0x0000)
struct RBController_Multicast_NotifyEndOfStage final
{
public:
	struct FEndStageInfo                          EndOfStageInfo;                                    // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShowEndOfMatchScreen;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F87[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Multicast_NotifyEndOfStage) == 0x000008, "Wrong alignment on RBController_Multicast_NotifyEndOfStage");
static_assert(sizeof(RBController_Multicast_NotifyEndOfStage) == 0x000038, "Wrong size on RBController_Multicast_NotifyEndOfStage");
static_assert(offsetof(RBController_Multicast_NotifyEndOfStage, EndOfStageInfo) == 0x000000, "Member 'RBController_Multicast_NotifyEndOfStage::EndOfStageInfo' has a wrong offset!");
static_assert(offsetof(RBController_Multicast_NotifyEndOfStage, bShowEndOfMatchScreen) == 0x000030, "Member 'RBController_Multicast_NotifyEndOfStage::bShowEndOfMatchScreen' has a wrong offset!");

// Function OPP.RBController.Multicast_SetNoConnectionTimeout
// 0x0001 (0x0001 - 0x0000)
struct RBController_Multicast_SetNoConnectionTimeout final
{
public:
	bool                                          NoTimeout;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Multicast_SetNoConnectionTimeout) == 0x000001, "Wrong alignment on RBController_Multicast_SetNoConnectionTimeout");
static_assert(sizeof(RBController_Multicast_SetNoConnectionTimeout) == 0x000001, "Wrong size on RBController_Multicast_SetNoConnectionTimeout");
static_assert(offsetof(RBController_Multicast_SetNoConnectionTimeout, NoTimeout) == 0x000000, "Member 'RBController_Multicast_SetNoConnectionTimeout::NoTimeout' has a wrong offset!");

// Function OPP.RBController.Multicast_StartTransitionFeedback
// 0x0004 (0x0004 - 0x0000)
struct RBController_Multicast_StartTransitionFeedback final
{
public:
	float                                         TransitionDuration;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Multicast_StartTransitionFeedback) == 0x000004, "Wrong alignment on RBController_Multicast_StartTransitionFeedback");
static_assert(sizeof(RBController_Multicast_StartTransitionFeedback) == 0x000004, "Wrong size on RBController_Multicast_StartTransitionFeedback");
static_assert(offsetof(RBController_Multicast_StartTransitionFeedback, TransitionDuration) == 0x000000, "Member 'RBController_Multicast_StartTransitionFeedback::TransitionDuration' has a wrong offset!");

// Function OPP.RBController.OnGamePhaseUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBController_OnGamePhaseUpdated final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_OnGamePhaseUpdated) == 0x000001, "Wrong alignment on RBController_OnGamePhaseUpdated");
static_assert(sizeof(RBController_OnGamePhaseUpdated) == 0x000001, "Wrong size on RBController_OnGamePhaseUpdated");
static_assert(offsetof(RBController_OnGamePhaseUpdated, GamePhase) == 0x000000, "Member 'RBController_OnGamePhaseUpdated::GamePhase' has a wrong offset!");

// Function OPP.RBController.OnPlayerInsideActiveSkillChanged
// 0x0008 (0x0008 - 0x0000)
struct RBController_OnPlayerInsideActiveSkillChanged final
{
public:
	class ARBActiveSkill*                         ActiveSkillActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_OnPlayerInsideActiveSkillChanged) == 0x000008, "Wrong alignment on RBController_OnPlayerInsideActiveSkillChanged");
static_assert(sizeof(RBController_OnPlayerInsideActiveSkillChanged) == 0x000008, "Wrong size on RBController_OnPlayerInsideActiveSkillChanged");
static_assert(offsetof(RBController_OnPlayerInsideActiveSkillChanged, ActiveSkillActor) == 0x000000, "Member 'RBController_OnPlayerInsideActiveSkillChanged::ActiveSkillActor' has a wrong offset!");

// Function OPP.RBController.OnPlayerInsideCameraCustomizationChanged
// 0x0008 (0x0008 - 0x0000)
struct RBController_OnPlayerInsideCameraCustomizationChanged final
{
public:
	class ARBPlayer*                              Param_RBPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_OnPlayerInsideCameraCustomizationChanged) == 0x000008, "Wrong alignment on RBController_OnPlayerInsideCameraCustomizationChanged");
static_assert(sizeof(RBController_OnPlayerInsideCameraCustomizationChanged) == 0x000008, "Wrong size on RBController_OnPlayerInsideCameraCustomizationChanged");
static_assert(offsetof(RBController_OnPlayerInsideCameraCustomizationChanged, Param_RBPlayer) == 0x000000, "Member 'RBController_OnPlayerInsideCameraCustomizationChanged::Param_RBPlayer' has a wrong offset!");

// Function OPP.RBController.OnPlayerJoinedGame
// 0x0008 (0x0008 - 0x0000)
struct RBController_OnPlayerJoinedGame final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_OnPlayerJoinedGame) == 0x000008, "Wrong alignment on RBController_OnPlayerJoinedGame");
static_assert(sizeof(RBController_OnPlayerJoinedGame) == 0x000008, "Wrong size on RBController_OnPlayerJoinedGame");
static_assert(offsetof(RBController_OnPlayerJoinedGame, RBPlayerState) == 0x000000, "Member 'RBController_OnPlayerJoinedGame::RBPlayerState' has a wrong offset!");

// Function OPP.RBController.OnPlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct RBController_OnPlayerLeftGame final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_OnPlayerLeftGame) == 0x000008, "Wrong alignment on RBController_OnPlayerLeftGame");
static_assert(sizeof(RBController_OnPlayerLeftGame) == 0x000008, "Wrong size on RBController_OnPlayerLeftGame");
static_assert(offsetof(RBController_OnPlayerLeftGame, RBPlayerState) == 0x000000, "Member 'RBController_OnPlayerLeftGame::RBPlayerState' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AcquireBadge
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_AcquireBadge final
{
public:
	class FName                                   BadgeId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AcquireBadge) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AcquireBadge");
static_assert(sizeof(RBController_Server_Cheat_AcquireBadge) == 0x000008, "Wrong size on RBController_Server_Cheat_AcquireBadge");
static_assert(offsetof(RBController_Server_Cheat_AcquireBadge, BadgeId) == 0x000000, "Member 'RBController_Server_Cheat_AcquireBadge::BadgeId' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AcquireFullRewardPool
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_AcquireFullRewardPool final
{
public:
	class FName                                   RewardPoolId;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AcquireFullRewardPool) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AcquireFullRewardPool");
static_assert(sizeof(RBController_Server_Cheat_AcquireFullRewardPool) == 0x000008, "Wrong size on RBController_Server_Cheat_AcquireFullRewardPool");
static_assert(offsetof(RBController_Server_Cheat_AcquireFullRewardPool, RewardPoolId) == 0x000000, "Member 'RBController_Server_Cheat_AcquireFullRewardPool::RewardPoolId' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AcquireRewardPoolItem
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_AcquireRewardPoolItem final
{
public:
	class FName                                   RewardPoolId;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AcquireRewardPoolItem) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AcquireRewardPoolItem");
static_assert(sizeof(RBController_Server_Cheat_AcquireRewardPoolItem) == 0x000008, "Wrong size on RBController_Server_Cheat_AcquireRewardPoolItem");
static_assert(offsetof(RBController_Server_Cheat_AcquireRewardPoolItem, RewardPoolId) == 0x000000, "Member 'RBController_Server_Cheat_AcquireRewardPoolItem::RewardPoolId' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddCurrency
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_AddCurrency final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F88[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AddCurrency) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AddCurrency");
static_assert(sizeof(RBController_Server_Cheat_AddCurrency) == 0x000008, "Wrong size on RBController_Server_Cheat_AddCurrency");
static_assert(offsetof(RBController_Server_Cheat_AddCurrency, CurrencyType) == 0x000000, "Member 'RBController_Server_Cheat_AddCurrency::CurrencyType' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_AddCurrency, Amount) == 0x000004, "Member 'RBController_Server_Cheat_AddCurrency::Amount' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddItem
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_AddItem final
{
public:
	TSubclassOf<class ARBPickup>                  ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AddItem) == 0x000008, "Wrong alignment on RBController_Server_Cheat_AddItem");
static_assert(sizeof(RBController_Server_Cheat_AddItem) == 0x000008, "Wrong size on RBController_Server_Cheat_AddItem");
static_assert(offsetof(RBController_Server_Cheat_AddItem, ItemClass) == 0x000000, "Member 'RBController_Server_Cheat_AddItem::ItemClass' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddMurkoffDollars
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_AddMurkoffDollars final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AddMurkoffDollars) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AddMurkoffDollars");
static_assert(sizeof(RBController_Server_Cheat_AddMurkoffDollars) == 0x000004, "Wrong size on RBController_Server_Cheat_AddMurkoffDollars");
static_assert(offsetof(RBController_Server_Cheat_AddMurkoffDollars, Amount) == 0x000000, "Member 'RBController_Server_Cheat_AddMurkoffDollars::Amount' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddMurkoffPoints
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_AddMurkoffPoints final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AddMurkoffPoints) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AddMurkoffPoints");
static_assert(sizeof(RBController_Server_Cheat_AddMurkoffPoints) == 0x000004, "Wrong size on RBController_Server_Cheat_AddMurkoffPoints");
static_assert(offsetof(RBController_Server_Cheat_AddMurkoffPoints, Amount) == 0x000000, "Member 'RBController_Server_Cheat_AddMurkoffPoints::Amount' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddOnlineItem
// 0x000C (0x000C - 0x0000)
struct RBController_Server_Cheat_AddOnlineItem final
{
public:
	class FName                                   OnlineItemId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPersistentItem;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F89[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Server_Cheat_AddOnlineItem) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AddOnlineItem");
static_assert(sizeof(RBController_Server_Cheat_AddOnlineItem) == 0x00000C, "Wrong size on RBController_Server_Cheat_AddOnlineItem");
static_assert(offsetof(RBController_Server_Cheat_AddOnlineItem, OnlineItemId) == 0x000000, "Member 'RBController_Server_Cheat_AddOnlineItem::OnlineItemId' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_AddOnlineItem, bIsPersistentItem) == 0x000008, "Member 'RBController_Server_Cheat_AddOnlineItem::bIsPersistentItem' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddProgressivePsychosis
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_AddProgressivePsychosis final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGas;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Server_Cheat_AddProgressivePsychosis) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AddProgressivePsychosis");
static_assert(sizeof(RBController_Server_Cheat_AddProgressivePsychosis) == 0x000008, "Wrong size on RBController_Server_Cheat_AddProgressivePsychosis");
static_assert(offsetof(RBController_Server_Cheat_AddProgressivePsychosis, Amount) == 0x000000, "Member 'RBController_Server_Cheat_AddProgressivePsychosis::Amount' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_AddProgressivePsychosis, bGas) == 0x000004, "Member 'RBController_Server_Cheat_AddProgressivePsychosis::bGas' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddStageXp
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_AddStageXp final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AddStageXp) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AddStageXp");
static_assert(sizeof(RBController_Server_Cheat_AddStageXp) == 0x000004, "Wrong size on RBController_Server_Cheat_AddStageXp");
static_assert(offsetof(RBController_Server_Cheat_AddStageXp, Amount) == 0x000000, "Member 'RBController_Server_Cheat_AddStageXp::Amount' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddTask
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_AddTask final
{
public:
	class FName                                   TaskId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AddTask) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AddTask");
static_assert(sizeof(RBController_Server_Cheat_AddTask) == 0x000008, "Wrong size on RBController_Server_Cheat_AddTask");
static_assert(offsetof(RBController_Server_Cheat_AddTask, TaskId) == 0x000000, "Member 'RBController_Server_Cheat_AddTask::TaskId' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddTQ
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_AddTQ final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AddTQ) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AddTQ");
static_assert(sizeof(RBController_Server_Cheat_AddTQ) == 0x000004, "Wrong size on RBController_Server_Cheat_AddTQ");
static_assert(offsetof(RBController_Server_Cheat_AddTQ, Amount) == 0x000000, "Member 'RBController_Server_Cheat_AddTQ::Amount' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_AddXp
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_AddXp final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_AddXp) == 0x000004, "Wrong alignment on RBController_Server_Cheat_AddXp");
static_assert(sizeof(RBController_Server_Cheat_AddXp) == 0x000004, "Wrong size on RBController_Server_Cheat_AddXp");
static_assert(offsetof(RBController_Server_Cheat_AddXp, Amount) == 0x000000, "Member 'RBController_Server_Cheat_AddXp::Amount' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ClearRandomState
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_Cheat_ClearRandomState final
{
public:
	class FString                                 Query;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_ClearRandomState) == 0x000008, "Wrong alignment on RBController_Server_Cheat_ClearRandomState");
static_assert(sizeof(RBController_Server_Cheat_ClearRandomState) == 0x000010, "Wrong size on RBController_Server_Cheat_ClearRandomState");
static_assert(offsetof(RBController_Server_Cheat_ClearRandomState, Query) == 0x000000, "Member 'RBController_Server_Cheat_ClearRandomState::Query' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_CompleteMainObjectivesTo
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_CompleteMainObjectivesTo final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_CompleteMainObjectivesTo) == 0x000004, "Wrong alignment on RBController_Server_Cheat_CompleteMainObjectivesTo");
static_assert(sizeof(RBController_Server_Cheat_CompleteMainObjectivesTo) == 0x000004, "Wrong size on RBController_Server_Cheat_CompleteMainObjectivesTo");
static_assert(offsetof(RBController_Server_Cheat_CompleteMainObjectivesTo, Param_Index) == 0x000000, "Member 'RBController_Server_Cheat_CompleteMainObjectivesTo::Param_Index' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_CompleteObjectiveCoordinator
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_Cheat_CompleteObjectiveCoordinator final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_CompleteObjectiveCoordinator) == 0x000008, "Wrong alignment on RBController_Server_Cheat_CompleteObjectiveCoordinator");
static_assert(sizeof(RBController_Server_Cheat_CompleteObjectiveCoordinator) == 0x000010, "Wrong size on RBController_Server_Cheat_CompleteObjectiveCoordinator");
static_assert(offsetof(RBController_Server_Cheat_CompleteObjectiveCoordinator, Param_Name) == 0x000000, "Member 'RBController_Server_Cheat_CompleteObjectiveCoordinator::Param_Name' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_DebugAlertedStance
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_DebugAlertedStance final
{
public:
	int32                                         DebugOption;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_DebugAlertedStance) == 0x000004, "Wrong alignment on RBController_Server_Cheat_DebugAlertedStance");
static_assert(sizeof(RBController_Server_Cheat_DebugAlertedStance) == 0x000004, "Wrong size on RBController_Server_Cheat_DebugAlertedStance");
static_assert(offsetof(RBController_Server_Cheat_DebugAlertedStance, DebugOption) == 0x000000, "Member 'RBController_Server_Cheat_DebugAlertedStance::DebugOption' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_DebugDoorRepulsion
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_DebugDoorRepulsion final
{
public:
	bool                                          bSlam;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_DebugDoorRepulsion) == 0x000001, "Wrong alignment on RBController_Server_Cheat_DebugDoorRepulsion");
static_assert(sizeof(RBController_Server_Cheat_DebugDoorRepulsion) == 0x000001, "Wrong size on RBController_Server_Cheat_DebugDoorRepulsion");
static_assert(offsetof(RBController_Server_Cheat_DebugDoorRepulsion, bSlam) == 0x000000, "Member 'RBController_Server_Cheat_DebugDoorRepulsion::bSlam' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_DebugInventory
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_DebugInventory final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_DebugInventory) == 0x000001, "Wrong alignment on RBController_Server_Cheat_DebugInventory");
static_assert(sizeof(RBController_Server_Cheat_DebugInventory) == 0x000001, "Wrong size on RBController_Server_Cheat_DebugInventory");
static_assert(offsetof(RBController_Server_Cheat_DebugInventory, bEnabled) == 0x000000, "Member 'RBController_Server_Cheat_DebugInventory::bEnabled' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_DisabledActiveSkill
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_DisabledActiveSkill final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_DisabledActiveSkill) == 0x000004, "Wrong alignment on RBController_Server_Cheat_DisabledActiveSkill");
static_assert(sizeof(RBController_Server_Cheat_DisabledActiveSkill) == 0x000004, "Wrong size on RBController_Server_Cheat_DisabledActiveSkill");
static_assert(offsetof(RBController_Server_Cheat_DisabledActiveSkill, Duration) == 0x000000, "Member 'RBController_Server_Cheat_DisabledActiveSkill::Duration' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ForceGrabs
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_Cheat_ForceGrabs final
{
public:
	class FString                                 Direction;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_ForceGrabs) == 0x000008, "Wrong alignment on RBController_Server_Cheat_ForceGrabs");
static_assert(sizeof(RBController_Server_Cheat_ForceGrabs) == 0x000010, "Wrong size on RBController_Server_Cheat_ForceGrabs");
static_assert(offsetof(RBController_Server_Cheat_ForceGrabs, Direction) == 0x000000, "Member 'RBController_Server_Cheat_ForceGrabs::Direction' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ForceMovementDesynch
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_ForceMovementDesynch final
{
public:
	float                                         DesyncSize;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_ForceMovementDesynch) == 0x000004, "Wrong alignment on RBController_Server_Cheat_ForceMovementDesynch");
static_assert(sizeof(RBController_Server_Cheat_ForceMovementDesynch) == 0x000004, "Wrong size on RBController_Server_Cheat_ForceMovementDesynch");
static_assert(offsetof(RBController_Server_Cheat_ForceMovementDesynch, DesyncSize) == 0x000000, "Member 'RBController_Server_Cheat_ForceMovementDesynch::DesyncSize' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ForcePreLoginError
// 0x0018 (0x0018 - 0x0000)
struct RBController_Server_Cheat_ForcePreLoginError final
{
public:
	class FString                                 Error;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Server_Cheat_ForcePreLoginError) == 0x000008, "Wrong alignment on RBController_Server_Cheat_ForcePreLoginError");
static_assert(sizeof(RBController_Server_Cheat_ForcePreLoginError) == 0x000018, "Wrong size on RBController_Server_Cheat_ForcePreLoginError");
static_assert(offsetof(RBController_Server_Cheat_ForcePreLoginError, Error) == 0x000000, "Member 'RBController_Server_Cheat_ForcePreLoginError::Error' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_ForcePreLoginError, Amount) == 0x000010, "Member 'RBController_Server_Cheat_ForcePreLoginError::Amount' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ForceRandomState
// 0x0018 (0x0018 - 0x0000)
struct RBController_Server_Cheat_ForceRandomState final
{
public:
	class FString                                 Query;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateA;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Server_Cheat_ForceRandomState) == 0x000008, "Wrong alignment on RBController_Server_Cheat_ForceRandomState");
static_assert(sizeof(RBController_Server_Cheat_ForceRandomState) == 0x000018, "Wrong size on RBController_Server_Cheat_ForceRandomState");
static_assert(offsetof(RBController_Server_Cheat_ForceRandomState, Query) == 0x000000, "Member 'RBController_Server_Cheat_ForceRandomState::Query' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_ForceRandomState, bStateA) == 0x000010, "Member 'RBController_Server_Cheat_ForceRandomState::bStateA' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ForceUseAllTrapsOfType
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_ForceUseAllTrapsOfType final
{
public:
	EObstacleVariatorType                         TrapType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_ForceUseAllTrapsOfType) == 0x000001, "Wrong alignment on RBController_Server_Cheat_ForceUseAllTrapsOfType");
static_assert(sizeof(RBController_Server_Cheat_ForceUseAllTrapsOfType) == 0x000001, "Wrong size on RBController_Server_Cheat_ForceUseAllTrapsOfType");
static_assert(offsetof(RBController_Server_Cheat_ForceUseAllTrapsOfType, TrapType) == 0x000000, "Member 'RBController_Server_Cheat_ForceUseAllTrapsOfType::TrapType' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_GetGoodCharacter
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_GetGoodCharacter final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_GetGoodCharacter) == 0x000004, "Wrong alignment on RBController_Server_Cheat_GetGoodCharacter");
static_assert(sizeof(RBController_Server_Cheat_GetGoodCharacter) == 0x000004, "Wrong size on RBController_Server_Cheat_GetGoodCharacter");
static_assert(offsetof(RBController_Server_Cheat_GetGoodCharacter, Level) == 0x000000, "Member 'RBController_Server_Cheat_GetGoodCharacter::Level' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_keOnActor
// 0x0018 (0x0018 - 0x0000)
struct RBController_Server_Cheat_keOnActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Command;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_keOnActor) == 0x000008, "Wrong alignment on RBController_Server_Cheat_keOnActor");
static_assert(sizeof(RBController_Server_Cheat_keOnActor) == 0x000018, "Wrong size on RBController_Server_Cheat_keOnActor");
static_assert(offsetof(RBController_Server_Cheat_keOnActor, Actor) == 0x000000, "Member 'RBController_Server_Cheat_keOnActor::Actor' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_keOnActor, Command) == 0x000008, "Member 'RBController_Server_Cheat_keOnActor::Command' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ResetStage
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_ResetStage final
{
public:
	uint32                                        RandomSeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_ResetStage) == 0x000004, "Wrong alignment on RBController_Server_Cheat_ResetStage");
static_assert(sizeof(RBController_Server_Cheat_ResetStage) == 0x000004, "Wrong size on RBController_Server_Cheat_ResetStage");
static_assert(offsetof(RBController_Server_Cheat_ResetStage, RandomSeed) == 0x000000, "Member 'RBController_Server_Cheat_ResetStage::RandomSeed' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ResetWorldState
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_ResetWorldState final
{
public:
	uint32                                        RandomSeed;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_ResetWorldState) == 0x000004, "Wrong alignment on RBController_Server_Cheat_ResetWorldState");
static_assert(sizeof(RBController_Server_Cheat_ResetWorldState) == 0x000004, "Wrong size on RBController_Server_Cheat_ResetWorldState");
static_assert(offsetof(RBController_Server_Cheat_ResetWorldState, RandomSeed) == 0x000000, "Member 'RBController_Server_Cheat_ResetWorldState::RandomSeed' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetActiveSkill
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_SetActiveSkill final
{
public:
	EActiveSkillType                              SkillType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetActiveSkill) == 0x000001, "Wrong alignment on RBController_Server_Cheat_SetActiveSkill");
static_assert(sizeof(RBController_Server_Cheat_SetActiveSkill) == 0x000001, "Wrong size on RBController_Server_Cheat_SetActiveSkill");
static_assert(offsetof(RBController_Server_Cheat_SetActiveSkill, SkillType) == 0x000000, "Member 'RBController_Server_Cheat_SetActiveSkill::SkillType' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetActiveUpgrades
// 0x0038 (0x0038 - 0x0000)
struct RBController_Server_Cheat_SetActiveUpgrades final
{
public:
	TArray<class FName>                           CoreUpgrades;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EActiveSkillType                              ActiveSkillType;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8D[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActiveSkillUpgrades;                               // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           Perks;                                             // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetActiveUpgrades) == 0x000008, "Wrong alignment on RBController_Server_Cheat_SetActiveUpgrades");
static_assert(sizeof(RBController_Server_Cheat_SetActiveUpgrades) == 0x000038, "Wrong size on RBController_Server_Cheat_SetActiveUpgrades");
static_assert(offsetof(RBController_Server_Cheat_SetActiveUpgrades, CoreUpgrades) == 0x000000, "Member 'RBController_Server_Cheat_SetActiveUpgrades::CoreUpgrades' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_SetActiveUpgrades, ActiveSkillType) == 0x000010, "Member 'RBController_Server_Cheat_SetActiveUpgrades::ActiveSkillType' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_SetActiveUpgrades, ActiveSkillUpgrades) == 0x000018, "Member 'RBController_Server_Cheat_SetActiveUpgrades::ActiveSkillUpgrades' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_SetActiveUpgrades, Perks) == 0x000028, "Member 'RBController_Server_Cheat_SetActiveUpgrades::Perks' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetAlwaysKeepConsumables
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_SetAlwaysKeepConsumables final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetAlwaysKeepConsumables) == 0x000001, "Wrong alignment on RBController_Server_Cheat_SetAlwaysKeepConsumables");
static_assert(sizeof(RBController_Server_Cheat_SetAlwaysKeepConsumables) == 0x000001, "Wrong size on RBController_Server_Cheat_SetAlwaysKeepConsumables");
static_assert(offsetof(RBController_Server_Cheat_SetAlwaysKeepConsumables, bEnabled) == 0x000000, "Member 'RBController_Server_Cheat_SetAlwaysKeepConsumables::bEnabled' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetCharacterIcon
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_SetCharacterIcon final
{
public:
	class FName                                   IconId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetCharacterIcon) == 0x000004, "Wrong alignment on RBController_Server_Cheat_SetCharacterIcon");
static_assert(sizeof(RBController_Server_Cheat_SetCharacterIcon) == 0x000008, "Wrong size on RBController_Server_Cheat_SetCharacterIcon");
static_assert(offsetof(RBController_Server_Cheat_SetCharacterIcon, IconId) == 0x000000, "Member 'RBController_Server_Cheat_SetCharacterIcon::IconId' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetCharacterLevel
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_SetCharacterLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetCharacterLevel) == 0x000004, "Wrong alignment on RBController_Server_Cheat_SetCharacterLevel");
static_assert(sizeof(RBController_Server_Cheat_SetCharacterLevel) == 0x000004, "Wrong size on RBController_Server_Cheat_SetCharacterLevel");
static_assert(offsetof(RBController_Server_Cheat_SetCharacterLevel, Level) == 0x000000, "Member 'RBController_Server_Cheat_SetCharacterLevel::Level' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetDebugFailedAdjustment
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_SetDebugFailedAdjustment final
{
public:
	bool                                          bNewDebugFailedAdjustment;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetDebugFailedAdjustment) == 0x000001, "Wrong alignment on RBController_Server_Cheat_SetDebugFailedAdjustment");
static_assert(sizeof(RBController_Server_Cheat_SetDebugFailedAdjustment) == 0x000001, "Wrong size on RBController_Server_Cheat_SetDebugFailedAdjustment");
static_assert(offsetof(RBController_Server_Cheat_SetDebugFailedAdjustment, bNewDebugFailedAdjustment) == 0x000000, "Member 'RBController_Server_Cheat_SetDebugFailedAdjustment::bNewDebugFailedAdjustment' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetFeatureSwitchOverrides
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_Cheat_SetFeatureSwitchOverrides final
{
public:
	TArray<struct FRBFeatureSwitchOverride>       FeatureSwitchOverrides;                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetFeatureSwitchOverrides) == 0x000008, "Wrong alignment on RBController_Server_Cheat_SetFeatureSwitchOverrides");
static_assert(sizeof(RBController_Server_Cheat_SetFeatureSwitchOverrides) == 0x000010, "Wrong size on RBController_Server_Cheat_SetFeatureSwitchOverrides");
static_assert(offsetof(RBController_Server_Cheat_SetFeatureSwitchOverrides, FeatureSwitchOverrides) == 0x000000, "Member 'RBController_Server_Cheat_SetFeatureSwitchOverrides::FeatureSwitchOverrides' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetForcedRollingGateVariatorIndex
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_SetForcedRollingGateVariatorIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetForcedRollingGateVariatorIndex) == 0x000004, "Wrong alignment on RBController_Server_Cheat_SetForcedRollingGateVariatorIndex");
static_assert(sizeof(RBController_Server_Cheat_SetForcedRollingGateVariatorIndex) == 0x000004, "Wrong size on RBController_Server_Cheat_SetForcedRollingGateVariatorIndex");
static_assert(offsetof(RBController_Server_Cheat_SetForcedRollingGateVariatorIndex, Param_Index) == 0x000000, "Member 'RBController_Server_Cheat_SetForcedRollingGateVariatorIndex::Param_Index' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetForcedSASVariatorIndex
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_SetForcedSASVariatorIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetForcedSASVariatorIndex) == 0x000004, "Wrong alignment on RBController_Server_Cheat_SetForcedSASVariatorIndex");
static_assert(sizeof(RBController_Server_Cheat_SetForcedSASVariatorIndex) == 0x000004, "Wrong size on RBController_Server_Cheat_SetForcedSASVariatorIndex");
static_assert(offsetof(RBController_Server_Cheat_SetForcedSASVariatorIndex, Param_Index) == 0x000000, "Member 'RBController_Server_Cheat_SetForcedSASVariatorIndex::Param_Index' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetInfiniteActiveSkills
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_SetInfiniteActiveSkills final
{
public:
	bool                                          bInfinite;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetInfiniteActiveSkills) == 0x000001, "Wrong alignment on RBController_Server_Cheat_SetInfiniteActiveSkills");
static_assert(sizeof(RBController_Server_Cheat_SetInfiniteActiveSkills) == 0x000001, "Wrong size on RBController_Server_Cheat_SetInfiniteActiveSkills");
static_assert(offsetof(RBController_Server_Cheat_SetInfiniteActiveSkills, bInfinite) == 0x000000, "Member 'RBController_Server_Cheat_SetInfiniteActiveSkills::bInfinite' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetInfiniteThrowables
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_SetInfiniteThrowables final
{
public:
	bool                                          bInfinite;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetInfiniteThrowables) == 0x000001, "Wrong alignment on RBController_Server_Cheat_SetInfiniteThrowables");
static_assert(sizeof(RBController_Server_Cheat_SetInfiniteThrowables) == 0x000001, "Wrong size on RBController_Server_Cheat_SetInfiniteThrowables");
static_assert(offsetof(RBController_Server_Cheat_SetInfiniteThrowables, bInfinite) == 0x000000, "Member 'RBController_Server_Cheat_SetInfiniteThrowables::bInfinite' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetLevelSeed
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_SetLevelSeed final
{
public:
	uint32                                        Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetLevelSeed) == 0x000004, "Wrong alignment on RBController_Server_Cheat_SetLevelSeed");
static_assert(sizeof(RBController_Server_Cheat_SetLevelSeed) == 0x000004, "Wrong size on RBController_Server_Cheat_SetLevelSeed");
static_assert(offsetof(RBController_Server_Cheat_SetLevelSeed, Seed) == 0x000000, "Member 'RBController_Server_Cheat_SetLevelSeed::Seed' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetMaxReservedPlayerSlotsOverride
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_Cheat_SetMaxReservedPlayerSlotsOverride final
{
public:
	int32                                         MaxReservedPlayerSlotsOverride;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetMaxReservedPlayerSlotsOverride) == 0x000004, "Wrong alignment on RBController_Server_Cheat_SetMaxReservedPlayerSlotsOverride");
static_assert(sizeof(RBController_Server_Cheat_SetMaxReservedPlayerSlotsOverride) == 0x000004, "Wrong size on RBController_Server_Cheat_SetMaxReservedPlayerSlotsOverride");
static_assert(offsetof(RBController_Server_Cheat_SetMaxReservedPlayerSlotsOverride, MaxReservedPlayerSlotsOverride) == 0x000000, "Member 'RBController_Server_Cheat_SetMaxReservedPlayerSlotsOverride::MaxReservedPlayerSlotsOverride' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetNPCToDebug
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_SetNPCToDebug final
{
public:
	class ARBPawn*                                NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetNPCToDebug) == 0x000008, "Wrong alignment on RBController_Server_Cheat_SetNPCToDebug");
static_assert(sizeof(RBController_Server_Cheat_SetNPCToDebug) == 0x000008, "Wrong size on RBController_Server_Cheat_SetNPCToDebug");
static_assert(offsetof(RBController_Server_Cheat_SetNPCToDebug, NPC) == 0x000000, "Member 'RBController_Server_Cheat_SetNPCToDebug::NPC' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetPlayerLoadout
// 0x0018 (0x0018 - 0x0000)
struct RBController_Server_Cheat_SetPlayerLoadout final
{
public:
	struct FRBPlayerLoadout                       Loadout;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetPlayerLoadout) == 0x000008, "Wrong alignment on RBController_Server_Cheat_SetPlayerLoadout");
static_assert(sizeof(RBController_Server_Cheat_SetPlayerLoadout) == 0x000018, "Wrong size on RBController_Server_Cheat_SetPlayerLoadout");
static_assert(offsetof(RBController_Server_Cheat_SetPlayerLoadout, Loadout) == 0x000000, "Member 'RBController_Server_Cheat_SetPlayerLoadout::Loadout' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetServerAnimTickOptimsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_SetServerAnimTickOptimsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetServerAnimTickOptimsEnabled) == 0x000001, "Wrong alignment on RBController_Server_Cheat_SetServerAnimTickOptimsEnabled");
static_assert(sizeof(RBController_Server_Cheat_SetServerAnimTickOptimsEnabled) == 0x000001, "Wrong size on RBController_Server_Cheat_SetServerAnimTickOptimsEnabled");
static_assert(offsetof(RBController_Server_Cheat_SetServerAnimTickOptimsEnabled, bEnabled) == 0x000000, "Member 'RBController_Server_Cheat_SetServerAnimTickOptimsEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetServerPartition
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_Cheat_SetServerPartition final
{
public:
	class FString                                 Partition;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetServerPartition) == 0x000008, "Wrong alignment on RBController_Server_Cheat_SetServerPartition");
static_assert(sizeof(RBController_Server_Cheat_SetServerPartition) == 0x000010, "Wrong size on RBController_Server_Cheat_SetServerPartition");
static_assert(offsetof(RBController_Server_Cheat_SetServerPartition, Partition) == 0x000000, "Member 'RBController_Server_Cheat_SetServerPartition::Partition' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetSoloMode
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_SetSoloMode final
{
public:
	bool                                          bSoloMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetSoloMode) == 0x000001, "Wrong alignment on RBController_Server_Cheat_SetSoloMode");
static_assert(sizeof(RBController_Server_Cheat_SetSoloMode) == 0x000001, "Wrong size on RBController_Server_Cheat_SetSoloMode");
static_assert(offsetof(RBController_Server_Cheat_SetSoloMode, bSoloMode) == 0x000000, "Member 'RBController_Server_Cheat_SetSoloMode::bSoloMode' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetStimulusDebug
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_SetStimulusDebug final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetStimulusDebug) == 0x000001, "Wrong alignment on RBController_Server_Cheat_SetStimulusDebug");
static_assert(sizeof(RBController_Server_Cheat_SetStimulusDebug) == 0x000001, "Wrong size on RBController_Server_Cheat_SetStimulusDebug");
static_assert(offsetof(RBController_Server_Cheat_SetStimulusDebug, bEnabled) == 0x000000, "Member 'RBController_Server_Cheat_SetStimulusDebug::bEnabled' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetTrialChain
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_Cheat_SetTrialChain final
{
public:
	class FString                                 TrialChainName;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetTrialChain) == 0x000008, "Wrong alignment on RBController_Server_Cheat_SetTrialChain");
static_assert(sizeof(RBController_Server_Cheat_SetTrialChain) == 0x000010, "Wrong size on RBController_Server_Cheat_SetTrialChain");
static_assert(offsetof(RBController_Server_Cheat_SetTrialChain, TrialChainName) == 0x000000, "Member 'RBController_Server_Cheat_SetTrialChain::TrialChainName' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SetTrialCompleted
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_SetTrialCompleted final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SetTrialCompleted) == 0x000004, "Wrong alignment on RBController_Server_Cheat_SetTrialCompleted");
static_assert(sizeof(RBController_Server_Cheat_SetTrialCompleted) == 0x000008, "Wrong size on RBController_Server_Cheat_SetTrialCompleted");
static_assert(offsetof(RBController_Server_Cheat_SetTrialCompleted, TrialId) == 0x000000, "Member 'RBController_Server_Cheat_SetTrialCompleted::TrialId' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ShowEndOfStageScreen
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_Cheat_ShowEndOfStageScreen final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_ShowEndOfStageScreen) == 0x000001, "Wrong alignment on RBController_Server_Cheat_ShowEndOfStageScreen");
static_assert(sizeof(RBController_Server_Cheat_ShowEndOfStageScreen) == 0x000001, "Wrong size on RBController_Server_Cheat_ShowEndOfStageScreen");
static_assert(offsetof(RBController_Server_Cheat_ShowEndOfStageScreen, bSuccess) == 0x000000, "Member 'RBController_Server_Cheat_ShowEndOfStageScreen::bSuccess' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_SpawnLargePickup
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_SpawnLargePickup final
{
public:
	TSubclassOf<class ARBLargePickup>             ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_SpawnLargePickup) == 0x000008, "Wrong alignment on RBController_Server_Cheat_SpawnLargePickup");
static_assert(sizeof(RBController_Server_Cheat_SpawnLargePickup) == 0x000008, "Wrong size on RBController_Server_Cheat_SpawnLargePickup");
static_assert(offsetof(RBController_Server_Cheat_SpawnLargePickup, ItemClass) == 0x000000, "Member 'RBController_Server_Cheat_SpawnLargePickup::ItemClass' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_StartObjectiveCoordinator
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_Cheat_StartObjectiveCoordinator final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_StartObjectiveCoordinator) == 0x000008, "Wrong alignment on RBController_Server_Cheat_StartObjectiveCoordinator");
static_assert(sizeof(RBController_Server_Cheat_StartObjectiveCoordinator) == 0x000010, "Wrong size on RBController_Server_Cheat_StartObjectiveCoordinator");
static_assert(offsetof(RBController_Server_Cheat_StartObjectiveCoordinator, Param_Name) == 0x000000, "Member 'RBController_Server_Cheat_StartObjectiveCoordinator::Param_Name' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ToggleAll
// 0x0018 (0x0018 - 0x0000)
struct RBController_Server_Cheat_ToggleAll final
{
public:
	class FString                                 Query;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateA;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Server_Cheat_ToggleAll) == 0x000008, "Wrong alignment on RBController_Server_Cheat_ToggleAll");
static_assert(sizeof(RBController_Server_Cheat_ToggleAll) == 0x000018, "Wrong size on RBController_Server_Cheat_ToggleAll");
static_assert(offsetof(RBController_Server_Cheat_ToggleAll, Query) == 0x000000, "Member 'RBController_Server_Cheat_ToggleAll::Query' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_ToggleAll, bStateA) == 0x000010, "Member 'RBController_Server_Cheat_ToggleAll::bStateA' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_ToggleVariator
// 0x000C (0x000C - 0x0000)
struct RBController_Server_Cheat_ToggleVariator final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8F[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Server_Cheat_ToggleVariator) == 0x000004, "Wrong alignment on RBController_Server_Cheat_ToggleVariator");
static_assert(sizeof(RBController_Server_Cheat_ToggleVariator) == 0x00000C, "Wrong size on RBController_Server_Cheat_ToggleVariator");
static_assert(offsetof(RBController_Server_Cheat_ToggleVariator, ID) == 0x000000, "Member 'RBController_Server_Cheat_ToggleVariator::ID' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_ToggleVariator, bEnabled) == 0x000008, "Member 'RBController_Server_Cheat_ToggleVariator::bEnabled' has a wrong offset!");

// Function OPP.RBController.Server_Cheat_UpdateStatistic
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_Cheat_UpdateStatistic final
{
public:
	EPlayerStat                                   PlayerStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F90[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cheat_UpdateStatistic) == 0x000004, "Wrong alignment on RBController_Server_Cheat_UpdateStatistic");
static_assert(sizeof(RBController_Server_Cheat_UpdateStatistic) == 0x000008, "Wrong size on RBController_Server_Cheat_UpdateStatistic");
static_assert(offsetof(RBController_Server_Cheat_UpdateStatistic, PlayerStat) == 0x000000, "Member 'RBController_Server_Cheat_UpdateStatistic::PlayerStat' has a wrong offset!");
static_assert(offsetof(RBController_Server_Cheat_UpdateStatistic, Value) == 0x000004, "Member 'RBController_Server_Cheat_UpdateStatistic::Value' has a wrong offset!");

// Function OPP.RBController.Server_CheatDestroyNPC
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_CheatDestroyNPC final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_CheatDestroyNPC) == 0x000008, "Wrong alignment on RBController_Server_CheatDestroyNPC");
static_assert(sizeof(RBController_Server_CheatDestroyNPC) == 0x000008, "Wrong size on RBController_Server_CheatDestroyNPC");
static_assert(offsetof(RBController_Server_CheatDestroyNPC, NPC) == 0x000000, "Member 'RBController_Server_CheatDestroyNPC::NPC' has a wrong offset!");

// Function OPP.RBController.Server_CheatDestroyOtherNPC
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_CheatDestroyOtherNPC final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_CheatDestroyOtherNPC) == 0x000008, "Wrong alignment on RBController_Server_CheatDestroyOtherNPC");
static_assert(sizeof(RBController_Server_CheatDestroyOtherNPC) == 0x000008, "Wrong size on RBController_Server_CheatDestroyOtherNPC");
static_assert(offsetof(RBController_Server_CheatDestroyOtherNPC, NPC) == 0x000000, "Member 'RBController_Server_CheatDestroyOtherNPC::NPC' has a wrong offset!");

// Function OPP.RBController.Server_CheatRespawnDeadPlayers
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_CheatRespawnDeadPlayers final
{
public:
	bool                                          Force;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_CheatRespawnDeadPlayers) == 0x000001, "Wrong alignment on RBController_Server_CheatRespawnDeadPlayers");
static_assert(sizeof(RBController_Server_CheatRespawnDeadPlayers) == 0x000001, "Wrong size on RBController_Server_CheatRespawnDeadPlayers");
static_assert(offsetof(RBController_Server_CheatRespawnDeadPlayers, Force) == 0x000000, "Member 'RBController_Server_CheatRespawnDeadPlayers::Force' has a wrong offset!");

// Function OPP.RBController.Server_CheatSendXPEvent
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_CheatSendXPEvent final
{
public:
	EPlayerEvent                                  EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_CheatSendXPEvent) == 0x000001, "Wrong alignment on RBController_Server_CheatSendXPEvent");
static_assert(sizeof(RBController_Server_CheatSendXPEvent) == 0x000001, "Wrong size on RBController_Server_CheatSendXPEvent");
static_assert(offsetof(RBController_Server_CheatSendXPEvent, EventType) == 0x000000, "Member 'RBController_Server_CheatSendXPEvent::EventType' has a wrong offset!");

// Function OPP.RBController.Server_CheatSpawnAIFollow
// 0x0028 (0x0028 - 0x0000)
struct RBController_Server_CheatSpawnAIFollow final
{
public:
	struct FVector                                SpawnLoc;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRot;                                          // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 CheatName;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_CheatSpawnAIFollow) == 0x000008, "Wrong alignment on RBController_Server_CheatSpawnAIFollow");
static_assert(sizeof(RBController_Server_CheatSpawnAIFollow) == 0x000028, "Wrong size on RBController_Server_CheatSpawnAIFollow");
static_assert(offsetof(RBController_Server_CheatSpawnAIFollow, SpawnLoc) == 0x000000, "Member 'RBController_Server_CheatSpawnAIFollow::SpawnLoc' has a wrong offset!");
static_assert(offsetof(RBController_Server_CheatSpawnAIFollow, SpawnRot) == 0x00000C, "Member 'RBController_Server_CheatSpawnAIFollow::SpawnRot' has a wrong offset!");
static_assert(offsetof(RBController_Server_CheatSpawnAIFollow, CheatName) == 0x000018, "Member 'RBController_Server_CheatSpawnAIFollow::CheatName' has a wrong offset!");

// Function OPP.RBController.Server_CheatSpawnBot
// 0x0028 (0x0028 - 0x0000)
struct RBController_Server_CheatSpawnBot final
{
public:
	struct FVector                                SpawnLoc;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRot;                                          // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 CheatName;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_CheatSpawnBot) == 0x000008, "Wrong alignment on RBController_Server_CheatSpawnBot");
static_assert(sizeof(RBController_Server_CheatSpawnBot) == 0x000028, "Wrong size on RBController_Server_CheatSpawnBot");
static_assert(offsetof(RBController_Server_CheatSpawnBot, SpawnLoc) == 0x000000, "Member 'RBController_Server_CheatSpawnBot::SpawnLoc' has a wrong offset!");
static_assert(offsetof(RBController_Server_CheatSpawnBot, SpawnRot) == 0x00000C, "Member 'RBController_Server_CheatSpawnBot::SpawnRot' has a wrong offset!");
static_assert(offsetof(RBController_Server_CheatSpawnBot, CheatName) == 0x000018, "Member 'RBController_Server_CheatSpawnBot::CheatName' has a wrong offset!");

// Function OPP.RBController.Server_CheatSpawnPouncersInHidingSpot
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_CheatSpawnPouncersInHidingSpot final
{
public:
	class URBHidespotComponent*                   HidingSpot;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_CheatSpawnPouncersInHidingSpot) == 0x000008, "Wrong alignment on RBController_Server_CheatSpawnPouncersInHidingSpot");
static_assert(sizeof(RBController_Server_CheatSpawnPouncersInHidingSpot) == 0x000008, "Wrong size on RBController_Server_CheatSpawnPouncersInHidingSpot");
static_assert(offsetof(RBController_Server_CheatSpawnPouncersInHidingSpot, HidingSpot) == 0x000000, "Member 'RBController_Server_CheatSpawnPouncersInHidingSpot::HidingSpot' has a wrong offset!");

// Function OPP.RBController.Server_CheatTeleportAtLocation
// 0x0018 (0x0018 - 0x0000)
struct RBController_Server_CheatTeleportAtLocation final
{
public:
	struct FVector                                TargetLoc;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRot;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_CheatTeleportAtLocation) == 0x000004, "Wrong alignment on RBController_Server_CheatTeleportAtLocation");
static_assert(sizeof(RBController_Server_CheatTeleportAtLocation) == 0x000018, "Wrong size on RBController_Server_CheatTeleportAtLocation");
static_assert(offsetof(RBController_Server_CheatTeleportAtLocation, TargetLoc) == 0x000000, "Member 'RBController_Server_CheatTeleportAtLocation::TargetLoc' has a wrong offset!");
static_assert(offsetof(RBController_Server_CheatTeleportAtLocation, TargetRot) == 0x00000C, "Member 'RBController_Server_CheatTeleportAtLocation::TargetRot' has a wrong offset!");

// Function OPP.RBController.Server_ClaimBadgeReward
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_ClaimBadgeReward final
{
public:
	class FName                                   BadgeId;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_ClaimBadgeReward) == 0x000004, "Wrong alignment on RBController_Server_ClaimBadgeReward");
static_assert(sizeof(RBController_Server_ClaimBadgeReward) == 0x000008, "Wrong size on RBController_Server_ClaimBadgeReward");
static_assert(offsetof(RBController_Server_ClaimBadgeReward, BadgeId) == 0x000000, "Member 'RBController_Server_ClaimBadgeReward::BadgeId' has a wrong offset!");

// Function OPP.RBController.Server_Cmd
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_Cmd final
{
public:
	class FString                                 ServerCmd;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Cmd) == 0x000008, "Wrong alignment on RBController_Server_Cmd");
static_assert(sizeof(RBController_Server_Cmd) == 0x000010, "Wrong size on RBController_Server_Cmd");
static_assert(offsetof(RBController_Server_Cmd, ServerCmd) == 0x000000, "Member 'RBController_Server_Cmd::ServerCmd' has a wrong offset!");

// Function OPP.RBController.Server_DumpAILog
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_DumpAILog final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEvents;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F91[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Server_DumpAILog) == 0x000008, "Wrong alignment on RBController_Server_DumpAILog");
static_assert(sizeof(RBController_Server_DumpAILog) == 0x000010, "Wrong size on RBController_Server_DumpAILog");
static_assert(offsetof(RBController_Server_DumpAILog, NPC) == 0x000000, "Member 'RBController_Server_DumpAILog::NPC' has a wrong offset!");
static_assert(offsetof(RBController_Server_DumpAILog, MaxEvents) == 0x000008, "Member 'RBController_Server_DumpAILog::MaxEvents' has a wrong offset!");

// Function OPP.RBController.Server_EquipOutfit
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_EquipOutfit final
{
public:
	class URBCustomizationOutfit*                 Outfit;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_EquipOutfit) == 0x000008, "Wrong alignment on RBController_Server_EquipOutfit");
static_assert(sizeof(RBController_Server_EquipOutfit) == 0x000008, "Wrong size on RBController_Server_EquipOutfit");
static_assert(offsetof(RBController_Server_EquipOutfit, Outfit) == 0x000000, "Member 'RBController_Server_EquipOutfit::Outfit' has a wrong offset!");

// Function OPP.RBController.Server_GhostPawn
// 0x001C (0x001C - 0x0000)
struct RBController_Server_GhostPawn final
{
public:
	bool                                          bGhost;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F92[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CamLoc;                                            // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CamRot;                                            // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_GhostPawn) == 0x000004, "Wrong alignment on RBController_Server_GhostPawn");
static_assert(sizeof(RBController_Server_GhostPawn) == 0x00001C, "Wrong size on RBController_Server_GhostPawn");
static_assert(offsetof(RBController_Server_GhostPawn, bGhost) == 0x000000, "Member 'RBController_Server_GhostPawn::bGhost' has a wrong offset!");
static_assert(offsetof(RBController_Server_GhostPawn, CamLoc) == 0x000004, "Member 'RBController_Server_GhostPawn::CamLoc' has a wrong offset!");
static_assert(offsetof(RBController_Server_GhostPawn, CamRot) == 0x000010, "Member 'RBController_Server_GhostPawn::CamRot' has a wrong offset!");

// Function OPP.RBController.Server_Multicast_Command
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_Multicast_Command final
{
public:
	class FString                                 ServerMulticastCommand;                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_Multicast_Command) == 0x000008, "Wrong alignment on RBController_Server_Multicast_Command");
static_assert(sizeof(RBController_Server_Multicast_Command) == 0x000010, "Wrong size on RBController_Server_Multicast_Command");
static_assert(offsetof(RBController_Server_Multicast_Command, ServerMulticastCommand) == 0x000000, "Member 'RBController_Server_Multicast_Command::ServerMulticastCommand' has a wrong offset!");

// Function OPP.RBController.Server_PurchasedCurrencyPack
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_PurchasedCurrencyPack final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F93[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Quantity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_PurchasedCurrencyPack) == 0x000004, "Wrong alignment on RBController_Server_PurchasedCurrencyPack");
static_assert(sizeof(RBController_Server_PurchasedCurrencyPack) == 0x000008, "Wrong size on RBController_Server_PurchasedCurrencyPack");
static_assert(offsetof(RBController_Server_PurchasedCurrencyPack, CurrencyType) == 0x000000, "Member 'RBController_Server_PurchasedCurrencyPack::CurrencyType' has a wrong offset!");
static_assert(offsetof(RBController_Server_PurchasedCurrencyPack, Quantity) == 0x000004, "Member 'RBController_Server_PurchasedCurrencyPack::Quantity' has a wrong offset!");

// Function OPP.RBController.Server_PurchaseItem
// 0x000C (0x000C - 0x0000)
struct RBController_Server_PurchaseItem final
{
public:
	class FName                                   ItemOnlineUnlockId;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerCustomizationRarity                    Rarity;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F94[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBController_Server_PurchaseItem) == 0x000004, "Wrong alignment on RBController_Server_PurchaseItem");
static_assert(sizeof(RBController_Server_PurchaseItem) == 0x00000C, "Wrong size on RBController_Server_PurchaseItem");
static_assert(offsetof(RBController_Server_PurchaseItem, ItemOnlineUnlockId) == 0x000000, "Member 'RBController_Server_PurchaseItem::ItemOnlineUnlockId' has a wrong offset!");
static_assert(offsetof(RBController_Server_PurchaseItem, Rarity) == 0x000008, "Member 'RBController_Server_PurchaseItem::Rarity' has a wrong offset!");

// Function OPP.RBController.Server_PurchaseOutfit
// 0x0008 (0x0008 - 0x0000)
struct RBController_Server_PurchaseOutfit final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_PurchaseOutfit) == 0x000004, "Wrong alignment on RBController_Server_PurchaseOutfit");
static_assert(sizeof(RBController_Server_PurchaseOutfit) == 0x000008, "Wrong size on RBController_Server_PurchaseOutfit");
static_assert(offsetof(RBController_Server_PurchaseOutfit, ItemId) == 0x000000, "Member 'RBController_Server_PurchaseOutfit::ItemId' has a wrong offset!");

// Function OPP.RBController.Server_SetClientInitData
// 0x0028 (0x0028 - 0x0000)
struct RBController_Server_SetClientInitData final
{
public:
	bool                                          bVoiceChatEnabled;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F95[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRegionLatency>                 RegionLatency;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         OwnedProductIds;                                   // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetClientInitData) == 0x000008, "Wrong alignment on RBController_Server_SetClientInitData");
static_assert(sizeof(RBController_Server_SetClientInitData) == 0x000028, "Wrong size on RBController_Server_SetClientInitData");
static_assert(offsetof(RBController_Server_SetClientInitData, bVoiceChatEnabled) == 0x000000, "Member 'RBController_Server_SetClientInitData::bVoiceChatEnabled' has a wrong offset!");
static_assert(offsetof(RBController_Server_SetClientInitData, RegionLatency) == 0x000008, "Member 'RBController_Server_SetClientInitData::RegionLatency' has a wrong offset!");
static_assert(offsetof(RBController_Server_SetClientInitData, OwnedProductIds) == 0x000018, "Member 'RBController_Server_SetClientInitData::OwnedProductIds' has a wrong offset!");

// Function OPP.RBController.Server_SetIsRunningFunctionalTest
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_SetIsRunningFunctionalTest final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetIsRunningFunctionalTest) == 0x000001, "Wrong alignment on RBController_Server_SetIsRunningFunctionalTest");
static_assert(sizeof(RBController_Server_SetIsRunningFunctionalTest) == 0x000001, "Wrong size on RBController_Server_SetIsRunningFunctionalTest");
static_assert(offsetof(RBController_Server_SetIsRunningFunctionalTest, bValue) == 0x000000, "Member 'RBController_Server_SetIsRunningFunctionalTest::bValue' has a wrong offset!");

// Function OPP.RBController.Server_SetNewPlayerCustomizationOptions
// 0x0038 (0x0038 - 0x0000)
struct RBController_Server_SetNewPlayerCustomizationOptions final
{
public:
	bool                                          bIsFemale;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F96[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class URBPlayerCustomizationOption*>   NewCustomizationOptions;                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   NewHairColor;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBCustomizationOutfit*                 LegendaryOutfit;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBVoiceCustomizationOption*            VoiceOption;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBPlayerIconCustomizationOption*       PlayerIconOption;                                  // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetNewPlayerCustomizationOptions) == 0x000008, "Wrong alignment on RBController_Server_SetNewPlayerCustomizationOptions");
static_assert(sizeof(RBController_Server_SetNewPlayerCustomizationOptions) == 0x000038, "Wrong size on RBController_Server_SetNewPlayerCustomizationOptions");
static_assert(offsetof(RBController_Server_SetNewPlayerCustomizationOptions, bIsFemale) == 0x000000, "Member 'RBController_Server_SetNewPlayerCustomizationOptions::bIsFemale' has a wrong offset!");
static_assert(offsetof(RBController_Server_SetNewPlayerCustomizationOptions, NewCustomizationOptions) == 0x000008, "Member 'RBController_Server_SetNewPlayerCustomizationOptions::NewCustomizationOptions' has a wrong offset!");
static_assert(offsetof(RBController_Server_SetNewPlayerCustomizationOptions, NewHairColor) == 0x000018, "Member 'RBController_Server_SetNewPlayerCustomizationOptions::NewHairColor' has a wrong offset!");
static_assert(offsetof(RBController_Server_SetNewPlayerCustomizationOptions, LegendaryOutfit) == 0x000020, "Member 'RBController_Server_SetNewPlayerCustomizationOptions::LegendaryOutfit' has a wrong offset!");
static_assert(offsetof(RBController_Server_SetNewPlayerCustomizationOptions, VoiceOption) == 0x000028, "Member 'RBController_Server_SetNewPlayerCustomizationOptions::VoiceOption' has a wrong offset!");
static_assert(offsetof(RBController_Server_SetNewPlayerCustomizationOptions, PlayerIconOption) == 0x000030, "Member 'RBController_Server_SetNewPlayerCustomizationOptions::PlayerIconOption' has a wrong offset!");

// Function OPP.RBController.Server_SetNoConnectionTimeout
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_SetNoConnectionTimeout final
{
public:
	bool                                          NoTimeout;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetNoConnectionTimeout) == 0x000001, "Wrong alignment on RBController_Server_SetNoConnectionTimeout");
static_assert(sizeof(RBController_Server_SetNoConnectionTimeout) == 0x000001, "Wrong size on RBController_Server_SetNoConnectionTimeout");
static_assert(offsetof(RBController_Server_SetNoConnectionTimeout, NoTimeout) == 0x000000, "Member 'RBController_Server_SetNoConnectionTimeout::NoTimeout' has a wrong offset!");

// Function OPP.RBController.Server_SetProcessId
// 0x0004 (0x0004 - 0x0000)
struct RBController_Server_SetProcessId final
{
public:
	uint32                                        ProcessId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetProcessId) == 0x000004, "Wrong alignment on RBController_Server_SetProcessId");
static_assert(sizeof(RBController_Server_SetProcessId) == 0x000004, "Wrong size on RBController_Server_SetProcessId");
static_assert(offsetof(RBController_Server_SetProcessId, ProcessId) == 0x000000, "Member 'RBController_Server_SetProcessId::ProcessId' has a wrong offset!");

// Function OPP.RBController.Server_SetReadyForStageReset
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_SetReadyForStageReset final
{
public:
	bool                                          bReadyForStageReset;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetReadyForStageReset) == 0x000001, "Wrong alignment on RBController_Server_SetReadyForStageReset");
static_assert(sizeof(RBController_Server_SetReadyForStageReset) == 0x000001, "Wrong size on RBController_Server_SetReadyForStageReset");
static_assert(offsetof(RBController_Server_SetReadyForStageReset, bReadyForStageReset) == 0x000000, "Member 'RBController_Server_SetReadyForStageReset::bReadyForStageReset' has a wrong offset!");

// Function OPP.RBController.Server_SetStreamingReadyToCommit
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_SetStreamingReadyToCommit final
{
public:
	bool                                          bStreamingReadyToCommit;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetStreamingReadyToCommit) == 0x000001, "Wrong alignment on RBController_Server_SetStreamingReadyToCommit");
static_assert(sizeof(RBController_Server_SetStreamingReadyToCommit) == 0x000001, "Wrong size on RBController_Server_SetStreamingReadyToCommit");
static_assert(offsetof(RBController_Server_SetStreamingReadyToCommit, bStreamingReadyToCommit) == 0x000000, "Member 'RBController_Server_SetStreamingReadyToCommit::bStreamingReadyToCommit' has a wrong offset!");

// Function OPP.RBController.Server_SetStreamingStable
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_SetStreamingStable final
{
public:
	bool                                          bStreamingStable;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetStreamingStable) == 0x000001, "Wrong alignment on RBController_Server_SetStreamingStable");
static_assert(sizeof(RBController_Server_SetStreamingStable) == 0x000001, "Wrong size on RBController_Server_SetStreamingStable");
static_assert(offsetof(RBController_Server_SetStreamingStable, bStreamingStable) == 0x000000, "Member 'RBController_Server_SetStreamingStable::bStreamingStable' has a wrong offset!");

// Function OPP.RBController.Server_SetStreamingTargetStateReached
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_SetStreamingTargetStateReached final
{
public:
	bool                                          bStreamingTargetStateReached;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetStreamingTargetStateReached) == 0x000001, "Wrong alignment on RBController_Server_SetStreamingTargetStateReached");
static_assert(sizeof(RBController_Server_SetStreamingTargetStateReached) == 0x000001, "Wrong size on RBController_Server_SetStreamingTargetStateReached");
static_assert(offsetof(RBController_Server_SetStreamingTargetStateReached, bStreamingTargetStateReached) == 0x000000, "Member 'RBController_Server_SetStreamingTargetStateReached::bStreamingTargetStateReached' has a wrong offset!");

// Function OPP.RBController.Server_SetTemporarySpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_SetTemporarySpectatorMode final
{
public:
	bool                                          bSpectate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetTemporarySpectatorMode) == 0x000001, "Wrong alignment on RBController_Server_SetTemporarySpectatorMode");
static_assert(sizeof(RBController_Server_SetTemporarySpectatorMode) == 0x000001, "Wrong size on RBController_Server_SetTemporarySpectatorMode");
static_assert(offsetof(RBController_Server_SetTemporarySpectatorMode, bSpectate) == 0x000000, "Member 'RBController_Server_SetTemporarySpectatorMode::bSpectate' has a wrong offset!");

// Function OPP.RBController.Server_SetWorldPopulatingDone
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_SetWorldPopulatingDone final
{
public:
	bool                                          bbWorldPopulatingDone;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SetWorldPopulatingDone) == 0x000001, "Wrong alignment on RBController_Server_SetWorldPopulatingDone");
static_assert(sizeof(RBController_Server_SetWorldPopulatingDone) == 0x000001, "Wrong size on RBController_Server_SetWorldPopulatingDone");
static_assert(offsetof(RBController_Server_SetWorldPopulatingDone, bbWorldPopulatingDone) == 0x000000, "Member 'RBController_Server_SetWorldPopulatingDone::bbWorldPopulatingDone' has a wrong offset!");

// Function OPP.RBController.Server_SpectatorCyclePlayer
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_SpectatorCyclePlayer final
{
public:
	bool                                          bNext;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_SpectatorCyclePlayer) == 0x000001, "Wrong alignment on RBController_Server_SpectatorCyclePlayer");
static_assert(sizeof(RBController_Server_SpectatorCyclePlayer) == 0x000001, "Wrong size on RBController_Server_SpectatorCyclePlayer");
static_assert(offsetof(RBController_Server_SpectatorCyclePlayer, bNext) == 0x000000, "Member 'RBController_Server_SpectatorCyclePlayer::bNext' has a wrong offset!");

// Function OPP.RBController.Server_UpdatePlayerLoadout
// 0x0018 (0x0018 - 0x0000)
struct RBController_Server_UpdatePlayerLoadout final
{
public:
	struct FRBPlayerLoadout                       Loadout;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_UpdatePlayerLoadout) == 0x000008, "Wrong alignment on RBController_Server_UpdatePlayerLoadout");
static_assert(sizeof(RBController_Server_UpdatePlayerLoadout) == 0x000018, "Wrong size on RBController_Server_UpdatePlayerLoadout");
static_assert(offsetof(RBController_Server_UpdatePlayerLoadout, Loadout) == 0x000000, "Member 'RBController_Server_UpdatePlayerLoadout::Loadout' has a wrong offset!");

// Function OPP.RBController.Server_VoiceChat_RequestChannelToken
// 0x0010 (0x0010 - 0x0000)
struct RBController_Server_VoiceChat_RequestChannelToken final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_VoiceChat_RequestChannelToken) == 0x000004, "Wrong alignment on RBController_Server_VoiceChat_RequestChannelToken");
static_assert(sizeof(RBController_Server_VoiceChat_RequestChannelToken) == 0x000010, "Wrong size on RBController_Server_VoiceChat_RequestChannelToken");
static_assert(offsetof(RBController_Server_VoiceChat_RequestChannelToken, ProfileId) == 0x000000, "Member 'RBController_Server_VoiceChat_RequestChannelToken::ProfileId' has a wrong offset!");

// Function OPP.RBController.Server_VoiceChat_VoiceChatActiveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBController_Server_VoiceChat_VoiceChatActiveStateChanged final
{
public:
	bool                                          bNewVoiceChatActive;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_Server_VoiceChat_VoiceChatActiveStateChanged) == 0x000001, "Wrong alignment on RBController_Server_VoiceChat_VoiceChatActiveStateChanged");
static_assert(sizeof(RBController_Server_VoiceChat_VoiceChatActiveStateChanged) == 0x000001, "Wrong size on RBController_Server_VoiceChat_VoiceChatActiveStateChanged");
static_assert(offsetof(RBController_Server_VoiceChat_VoiceChatActiveStateChanged, bNewVoiceChatActive) == 0x000000, "Member 'RBController_Server_VoiceChat_VoiceChatActiveStateChanged::bNewVoiceChatActive' has a wrong offset!");

// Function OPP.RBController.SetForceHideObjectiveIcons
// 0x0001 (0x0001 - 0x0000)
struct RBController_SetForceHideObjectiveIcons final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_SetForceHideObjectiveIcons) == 0x000001, "Wrong alignment on RBController_SetForceHideObjectiveIcons");
static_assert(sizeof(RBController_SetForceHideObjectiveIcons) == 0x000001, "Wrong size on RBController_SetForceHideObjectiveIcons");
static_assert(offsetof(RBController_SetForceHideObjectiveIcons, InBool) == 0x000000, "Member 'RBController_SetForceHideObjectiveIcons::InBool' has a wrong offset!");

// Function OPP.RBController.StartTransitionFeedback_Server
// 0x0004 (0x0004 - 0x0000)
struct RBController_StartTransitionFeedback_Server final
{
public:
	float                                         TransitionDuration;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_StartTransitionFeedback_Server) == 0x000004, "Wrong alignment on RBController_StartTransitionFeedback_Server");
static_assert(sizeof(RBController_StartTransitionFeedback_Server) == 0x000004, "Wrong size on RBController_StartTransitionFeedback_Server");
static_assert(offsetof(RBController_StartTransitionFeedback_Server, TransitionDuration) == 0x000000, "Member 'RBController_StartTransitionFeedback_Server::TransitionDuration' has a wrong offset!");

// Function OPP.RBController.BP_CanSpectatorRespawn
// 0x0001 (0x0001 - 0x0000)
struct RBController_BP_CanSpectatorRespawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_BP_CanSpectatorRespawn) == 0x000001, "Wrong alignment on RBController_BP_CanSpectatorRespawn");
static_assert(sizeof(RBController_BP_CanSpectatorRespawn) == 0x000001, "Wrong size on RBController_BP_CanSpectatorRespawn");
static_assert(offsetof(RBController_BP_CanSpectatorRespawn, ReturnValue) == 0x000000, "Member 'RBController_BP_CanSpectatorRespawn::ReturnValue' has a wrong offset!");

// Function OPP.RBController.BP_GetPlayerViewPoint
// 0x0018 (0x0018 - 0x0000)
struct RBController_BP_GetPlayerViewPoint final
{
public:
	struct FVector                                Out_location;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Out_Rotation;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_BP_GetPlayerViewPoint) == 0x000004, "Wrong alignment on RBController_BP_GetPlayerViewPoint");
static_assert(sizeof(RBController_BP_GetPlayerViewPoint) == 0x000018, "Wrong size on RBController_BP_GetPlayerViewPoint");
static_assert(offsetof(RBController_BP_GetPlayerViewPoint, Out_location) == 0x000000, "Member 'RBController_BP_GetPlayerViewPoint::Out_location' has a wrong offset!");
static_assert(offsetof(RBController_BP_GetPlayerViewPoint, Out_Rotation) == 0x00000C, "Member 'RBController_BP_GetPlayerViewPoint::Out_Rotation' has a wrong offset!");

// Function OPP.RBController.CanTravelToLobby
// 0x0001 (0x0001 - 0x0000)
struct RBController_CanTravelToLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBController_CanTravelToLobby) == 0x000001, "Wrong alignment on RBController_CanTravelToLobby");
static_assert(sizeof(RBController_CanTravelToLobby) == 0x000001, "Wrong size on RBController_CanTravelToLobby");
static_assert(offsetof(RBController_CanTravelToLobby, ReturnValue) == 0x000000, "Member 'RBController_CanTravelToLobby::ReturnValue' has a wrong offset!");

// Function OPP.RBConveyorBelt.SetInteractible_Server
// 0x0001 (0x0001 - 0x0000)
struct RBConveyorBelt_SetInteractible_Server final
{
public:
	bool                                          bInteractible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBConveyorBelt_SetInteractible_Server) == 0x000001, "Wrong alignment on RBConveyorBelt_SetInteractible_Server");
static_assert(sizeof(RBConveyorBelt_SetInteractible_Server) == 0x000001, "Wrong size on RBConveyorBelt_SetInteractible_Server");
static_assert(offsetof(RBConveyorBelt_SetInteractible_Server, bInteractible) == 0x000000, "Member 'RBConveyorBelt_SetInteractible_Server::bInteractible' has a wrong offset!");

// Function OPP.RBThrowableWeapon.BP_OnThrownHit
// 0x0028 (0x0028 - 0x0000)
struct RBThrowableWeapon_BP_OnThrownHit final
{
public:
	struct FVector                                HitNormal;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitReflectionNormal;                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      ImpactMaterial;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBThrowableWeapon_BP_OnThrownHit) == 0x000008, "Wrong alignment on RBThrowableWeapon_BP_OnThrownHit");
static_assert(sizeof(RBThrowableWeapon_BP_OnThrownHit) == 0x000028, "Wrong size on RBThrowableWeapon_BP_OnThrownHit");
static_assert(offsetof(RBThrowableWeapon_BP_OnThrownHit, HitNormal) == 0x000000, "Member 'RBThrowableWeapon_BP_OnThrownHit::HitNormal' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_BP_OnThrownHit, HitReflectionNormal) == 0x00000C, "Member 'RBThrowableWeapon_BP_OnThrownHit::HitReflectionNormal' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_BP_OnThrownHit, ImpactMaterial) == 0x000018, "Member 'RBThrowableWeapon_BP_OnThrownHit::ImpactMaterial' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_BP_OnThrownHit, HitActor) == 0x000020, "Member 'RBThrowableWeapon_BP_OnThrownHit::HitActor' has a wrong offset!");

// Function OPP.RBThrowableWeapon.Multicast_BouncedDestroy
// 0x0018 (0x0018 - 0x0000)
struct RBThrowableWeapon_Multicast_BouncedDestroy final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBThrowableWeapon_Multicast_BouncedDestroy) == 0x000004, "Wrong alignment on RBThrowableWeapon_Multicast_BouncedDestroy");
static_assert(sizeof(RBThrowableWeapon_Multicast_BouncedDestroy) == 0x000018, "Wrong size on RBThrowableWeapon_Multicast_BouncedDestroy");
static_assert(offsetof(RBThrowableWeapon_Multicast_BouncedDestroy, HitLocation) == 0x000000, "Member 'RBThrowableWeapon_Multicast_BouncedDestroy::HitLocation' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_Multicast_BouncedDestroy, HitNormal) == 0x00000C, "Member 'RBThrowableWeapon_Multicast_BouncedDestroy::HitNormal' has a wrong offset!");

// Function OPP.RBThrowableWeapon.Multicast_Throw
// 0x0028 (0x0028 - 0x0000)
struct RBThrowableWeapon_Multicast_Throw final
{
public:
	class ARBPawn*                                ThrowOwner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ThrowStartLocation;                                // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ThrowOnCurveLocationaimAssistTargetComp;           // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBAimAssistComponent*                  AimAssistTargetComp;                               // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBThrowableWeapon_Multicast_Throw) == 0x000008, "Wrong alignment on RBThrowableWeapon_Multicast_Throw");
static_assert(sizeof(RBThrowableWeapon_Multicast_Throw) == 0x000028, "Wrong size on RBThrowableWeapon_Multicast_Throw");
static_assert(offsetof(RBThrowableWeapon_Multicast_Throw, ThrowOwner) == 0x000000, "Member 'RBThrowableWeapon_Multicast_Throw::ThrowOwner' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_Multicast_Throw, ThrowStartLocation) == 0x000008, "Member 'RBThrowableWeapon_Multicast_Throw::ThrowStartLocation' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_Multicast_Throw, ThrowOnCurveLocationaimAssistTargetComp) == 0x000014, "Member 'RBThrowableWeapon_Multicast_Throw::ThrowOnCurveLocationaimAssistTargetComp' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_Multicast_Throw, AimAssistTargetComp) == 0x000020, "Member 'RBThrowableWeapon_Multicast_Throw::AimAssistTargetComp' has a wrong offset!");

// Function OPP.RBThrowableWeapon.Multicast_ThrownHit
// 0x0040 (0x0040 - 0x0000)
struct RBThrowableWeapon_Multicast_ThrownHit final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitNormal;                                         // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReflectedDir;                                      // 0x0018(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA5[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      ImpactMaterial;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceBreak;                                        // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FA6[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBThrowableWeapon_Multicast_ThrownHit) == 0x000008, "Wrong alignment on RBThrowableWeapon_Multicast_ThrownHit");
static_assert(sizeof(RBThrowableWeapon_Multicast_ThrownHit) == 0x000040, "Wrong size on RBThrowableWeapon_Multicast_ThrownHit");
static_assert(offsetof(RBThrowableWeapon_Multicast_ThrownHit, HitLocation) == 0x000000, "Member 'RBThrowableWeapon_Multicast_ThrownHit::HitLocation' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_Multicast_ThrownHit, HitNormal) == 0x00000C, "Member 'RBThrowableWeapon_Multicast_ThrownHit::HitNormal' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_Multicast_ThrownHit, ReflectedDir) == 0x000018, "Member 'RBThrowableWeapon_Multicast_ThrownHit::ReflectedDir' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_Multicast_ThrownHit, ImpactMaterial) == 0x000028, "Member 'RBThrowableWeapon_Multicast_ThrownHit::ImpactMaterial' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_Multicast_ThrownHit, HitActor) == 0x000030, "Member 'RBThrowableWeapon_Multicast_ThrownHit::HitActor' has a wrong offset!");
static_assert(offsetof(RBThrowableWeapon_Multicast_ThrownHit, ForceBreak) == 0x000038, "Member 'RBThrowableWeapon_Multicast_ThrownHit::ForceBreak' has a wrong offset!");

// Function OPP.RBThrowableSkillItem.GetImpactRadius
// 0x0004 (0x0004 - 0x0000)
struct RBThrowableSkillItem_GetImpactRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBThrowableSkillItem_GetImpactRadius) == 0x000004, "Wrong alignment on RBThrowableSkillItem_GetImpactRadius");
static_assert(sizeof(RBThrowableSkillItem_GetImpactRadius) == 0x000004, "Wrong size on RBThrowableSkillItem_GetImpactRadius");
static_assert(offsetof(RBThrowableSkillItem_GetImpactRadius, ReturnValue) == 0x000000, "Member 'RBThrowableSkillItem_GetImpactRadius::ReturnValue' has a wrong offset!");

// Function OPP.RBSplineFollowingActor.BP_ForceRefreshTransform
// 0x0001 (0x0001 - 0x0000)
struct RBSplineFollowingActor_BP_ForceRefreshTransform final
{
public:
	bool                                          bRefreshTickState;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingActor_BP_ForceRefreshTransform) == 0x000001, "Wrong alignment on RBSplineFollowingActor_BP_ForceRefreshTransform");
static_assert(sizeof(RBSplineFollowingActor_BP_ForceRefreshTransform) == 0x000001, "Wrong size on RBSplineFollowingActor_BP_ForceRefreshTransform");
static_assert(offsetof(RBSplineFollowingActor_BP_ForceRefreshTransform, bRefreshTickState) == 0x000000, "Member 'RBSplineFollowingActor_BP_ForceRefreshTransform::bRefreshTickState' has a wrong offset!");

// Function OPP.RBSplineFollowingActor.BP_OnPingPongExtremityEvent
// 0x0004 (0x0004 - 0x0000)
struct RBSplineFollowingActor_BP_OnPingPongExtremityEvent final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingActor_BP_OnPingPongExtremityEvent) == 0x000004, "Wrong alignment on RBSplineFollowingActor_BP_OnPingPongExtremityEvent");
static_assert(sizeof(RBSplineFollowingActor_BP_OnPingPongExtremityEvent) == 0x000004, "Wrong size on RBSplineFollowingActor_BP_OnPingPongExtremityEvent");
static_assert(offsetof(RBSplineFollowingActor_BP_OnPingPongExtremityEvent, Progress) == 0x000000, "Member 'RBSplineFollowingActor_BP_OnPingPongExtremityEvent::Progress' has a wrong offset!");

// Function OPP.RBSplineFollowingActor.BP_SetCurrentSplineComp
// 0x0008 (0x0008 - 0x0000)
struct RBSplineFollowingActor_BP_SetCurrentSplineComp final
{
public:
	class USplineComponent*                       NewSplineComp;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingActor_BP_SetCurrentSplineComp) == 0x000008, "Wrong alignment on RBSplineFollowingActor_BP_SetCurrentSplineComp");
static_assert(sizeof(RBSplineFollowingActor_BP_SetCurrentSplineComp) == 0x000008, "Wrong size on RBSplineFollowingActor_BP_SetCurrentSplineComp");
static_assert(offsetof(RBSplineFollowingActor_BP_SetCurrentSplineComp, NewSplineComp) == 0x000000, "Member 'RBSplineFollowingActor_BP_SetCurrentSplineComp::NewSplineComp' has a wrong offset!");

// Function OPP.RBSplineFollowingActor.FindDefaultSplineComponent
// 0x0008 (0x0008 - 0x0000)
struct RBSplineFollowingActor_FindDefaultSplineComponent final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingActor_FindDefaultSplineComponent) == 0x000008, "Wrong alignment on RBSplineFollowingActor_FindDefaultSplineComponent");
static_assert(sizeof(RBSplineFollowingActor_FindDefaultSplineComponent) == 0x000008, "Wrong size on RBSplineFollowingActor_FindDefaultSplineComponent");
static_assert(offsetof(RBSplineFollowingActor_FindDefaultSplineComponent, ReturnValue) == 0x000000, "Member 'RBSplineFollowingActor_FindDefaultSplineComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBSplineFollowingActor.OnNetworkSyncInitialValueChanged
// 0x0008 (0x0008 - 0x0000)
struct RBSplineFollowingActor_OnNetworkSyncInitialValueChanged final
{
public:
	class URBNetworkSyncComponent*                NetworkSyncComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingActor_OnNetworkSyncInitialValueChanged) == 0x000008, "Wrong alignment on RBSplineFollowingActor_OnNetworkSyncInitialValueChanged");
static_assert(sizeof(RBSplineFollowingActor_OnNetworkSyncInitialValueChanged) == 0x000008, "Wrong size on RBSplineFollowingActor_OnNetworkSyncInitialValueChanged");
static_assert(offsetof(RBSplineFollowingActor_OnNetworkSyncInitialValueChanged, NetworkSyncComponent) == 0x000000, "Member 'RBSplineFollowingActor_OnNetworkSyncInitialValueChanged::NetworkSyncComponent' has a wrong offset!");

// Function OPP.RBSplineFollowingActor.OnNetworkSyncPlayStateChanged
// 0x0008 (0x0008 - 0x0000)
struct RBSplineFollowingActor_OnNetworkSyncPlayStateChanged final
{
public:
	class URBNetworkSyncComponent*                NetworkSyncComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingActor_OnNetworkSyncPlayStateChanged) == 0x000008, "Wrong alignment on RBSplineFollowingActor_OnNetworkSyncPlayStateChanged");
static_assert(sizeof(RBSplineFollowingActor_OnNetworkSyncPlayStateChanged) == 0x000008, "Wrong size on RBSplineFollowingActor_OnNetworkSyncPlayStateChanged");
static_assert(offsetof(RBSplineFollowingActor_OnNetworkSyncPlayStateChanged, NetworkSyncComponent) == 0x000000, "Member 'RBSplineFollowingActor_OnNetworkSyncPlayStateChanged::NetworkSyncComponent' has a wrong offset!");

// Function OPP.RBHotPotatoObjectiveCoordinator.Multicast_OnNewHotPotatoSpawned
// 0x0008 (0x0008 - 0x0000)
struct RBHotPotatoObjectiveCoordinator_Multicast_OnNewHotPotatoSpawned final
{
public:
	class ARBHotPotato*                           NewHotPotato;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotatoObjectiveCoordinator_Multicast_OnNewHotPotatoSpawned) == 0x000008, "Wrong alignment on RBHotPotatoObjectiveCoordinator_Multicast_OnNewHotPotatoSpawned");
static_assert(sizeof(RBHotPotatoObjectiveCoordinator_Multicast_OnNewHotPotatoSpawned) == 0x000008, "Wrong size on RBHotPotatoObjectiveCoordinator_Multicast_OnNewHotPotatoSpawned");
static_assert(offsetof(RBHotPotatoObjectiveCoordinator_Multicast_OnNewHotPotatoSpawned, NewHotPotato) == 0x000000, "Member 'RBHotPotatoObjectiveCoordinator_Multicast_OnNewHotPotatoSpawned::NewHotPotato' has a wrong offset!");

// Function OPP.RBHotPotatoObjectiveCoordinator.OnHotPotatoObjectiveProgressChanged
// 0x0010 (0x0010 - 0x0000)
struct RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged final
{
public:
	class ARBHotPotato*                           HotPotato;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewProgress;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OldValue;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged) == 0x000008, "Wrong alignment on RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged");
static_assert(sizeof(RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged) == 0x000010, "Wrong size on RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged");
static_assert(offsetof(RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged, HotPotato) == 0x000000, "Member 'RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged::HotPotato' has a wrong offset!");
static_assert(offsetof(RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged, NewProgress) == 0x000008, "Member 'RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged::NewProgress' has a wrong offset!");
static_assert(offsetof(RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged, OldValue) == 0x00000C, "Member 'RBHotPotatoObjectiveCoordinator_OnHotPotatoObjectiveProgressChanged::OldValue' has a wrong offset!");

// Function OPP.RBHotPotatoObjectiveCoordinator.OnHotPotatoStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBHotPotatoObjectiveCoordinator_OnHotPotatoStateChanged final
{
public:
	class ARBHotPotato*                           HotPotato;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHotPotatoState                               NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FB2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHotPotatoObjectiveCoordinator_OnHotPotatoStateChanged) == 0x000008, "Wrong alignment on RBHotPotatoObjectiveCoordinator_OnHotPotatoStateChanged");
static_assert(sizeof(RBHotPotatoObjectiveCoordinator_OnHotPotatoStateChanged) == 0x000010, "Wrong size on RBHotPotatoObjectiveCoordinator_OnHotPotatoStateChanged");
static_assert(offsetof(RBHotPotatoObjectiveCoordinator_OnHotPotatoStateChanged, HotPotato) == 0x000000, "Member 'RBHotPotatoObjectiveCoordinator_OnHotPotatoStateChanged::HotPotato' has a wrong offset!");
static_assert(offsetof(RBHotPotatoObjectiveCoordinator_OnHotPotatoStateChanged, NewState) == 0x000008, "Member 'RBHotPotatoObjectiveCoordinator_OnHotPotatoStateChanged::NewState' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.Event_OnLargeObjectDoAction
// 0x0010 (0x0010 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_Event_OnLargeObjectDoAction final
{
public:
	class ARBLargePickup*                         LargeObject;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_Event_OnLargeObjectDoAction) == 0x000008, "Wrong alignment on RBLargeObjectInteractionPanelComponent_Event_OnLargeObjectDoAction");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_Event_OnLargeObjectDoAction) == 0x000010, "Wrong size on RBLargeObjectInteractionPanelComponent_Event_OnLargeObjectDoAction");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_Event_OnLargeObjectDoAction, LargeObject) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_Event_OnLargeObjectDoAction::LargeObject' has a wrong offset!");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_Event_OnLargeObjectDoAction, Interactor) == 0x000008, "Member 'RBLargeObjectInteractionPanelComponent_Event_OnLargeObjectDoAction::Interactor' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.Event_OnTossIntoFinished
// 0x0008 (0x0008 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_Event_OnTossIntoFinished final
{
public:
	class ARBLargePickup*                         LargeObject;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_Event_OnTossIntoFinished) == 0x000008, "Wrong alignment on RBLargeObjectInteractionPanelComponent_Event_OnTossIntoFinished");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_Event_OnTossIntoFinished) == 0x000008, "Wrong size on RBLargeObjectInteractionPanelComponent_Event_OnTossIntoFinished");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_Event_OnTossIntoFinished, LargeObject) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_Event_OnTossIntoFinished::LargeObject' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.OnAccumulatedInteractionTimeChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_OnAccumulatedInteractionTimeChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_OnAccumulatedInteractionTimeChangedCallback) == 0x000001, "Wrong alignment on RBLargeObjectInteractionPanelComponent_OnAccumulatedInteractionTimeChangedCallback");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_OnAccumulatedInteractionTimeChangedCallback) == 0x000001, "Wrong size on RBLargeObjectInteractionPanelComponent_OnAccumulatedInteractionTimeChangedCallback");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_OnAccumulatedInteractionTimeChangedCallback, ChangeType) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_OnAccumulatedInteractionTimeChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.OnInteractionTimeStartedPawnTimestampChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_OnInteractionTimeStartedPawnTimestampChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_OnInteractionTimeStartedPawnTimestampChangedCallback) == 0x000001, "Wrong alignment on RBLargeObjectInteractionPanelComponent_OnInteractionTimeStartedPawnTimestampChangedCallback");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_OnInteractionTimeStartedPawnTimestampChangedCallback) == 0x000001, "Wrong size on RBLargeObjectInteractionPanelComponent_OnInteractionTimeStartedPawnTimestampChangedCallback");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_OnInteractionTimeStartedPawnTimestampChangedCallback, ChangeType) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_OnInteractionTimeStartedPawnTimestampChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.OnNumberOfCompletedInteractionsChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_OnNumberOfCompletedInteractionsChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_OnNumberOfCompletedInteractionsChangedCallback) == 0x000001, "Wrong alignment on RBLargeObjectInteractionPanelComponent_OnNumberOfCompletedInteractionsChangedCallback");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_OnNumberOfCompletedInteractionsChangedCallback) == 0x000001, "Wrong size on RBLargeObjectInteractionPanelComponent_OnNumberOfCompletedInteractionsChangedCallback");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_OnNumberOfCompletedInteractionsChangedCallback, ChangedType) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_OnNumberOfCompletedInteractionsChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.GetInteractionDuration
// 0x0004 (0x0004 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_GetInteractionDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_GetInteractionDuration) == 0x000004, "Wrong alignment on RBLargeObjectInteractionPanelComponent_GetInteractionDuration");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_GetInteractionDuration) == 0x000004, "Wrong size on RBLargeObjectInteractionPanelComponent_GetInteractionDuration");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_GetInteractionDuration, ReturnValue) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_GetInteractionDuration::ReturnValue' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.GetLargeObjectRef
// 0x0010 (0x0010 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_GetLargeObjectRef final
{
public:
	class ARBLargePickup*                         Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_GetLargeObjectRef) == 0x000008, "Wrong alignment on RBLargeObjectInteractionPanelComponent_GetLargeObjectRef");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_GetLargeObjectRef) == 0x000010, "Wrong size on RBLargeObjectInteractionPanelComponent_GetLargeObjectRef");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_GetLargeObjectRef, Pickup) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_GetLargeObjectRef::Pickup' has a wrong offset!");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_GetLargeObjectRef, ReturnValue) == 0x000008, "Member 'RBLargeObjectInteractionPanelComponent_GetLargeObjectRef::ReturnValue' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.GetProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_GetProgressRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_GetProgressRatio) == 0x000004, "Wrong alignment on RBLargeObjectInteractionPanelComponent_GetProgressRatio");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_GetProgressRatio) == 0x000004, "Wrong size on RBLargeObjectInteractionPanelComponent_GetProgressRatio");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_GetProgressRatio, ReturnValue) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_GetProgressRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.GetSpecialMoveAnimation
// 0x0018 (0x0018 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFirstPerson;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FB8[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation) == 0x000008, "Wrong alignment on RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation) == 0x000018, "Wrong size on RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation, Pawn) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation::Pawn' has a wrong offset!");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation, bIsFirstPerson) == 0x000008, "Member 'RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation::bIsFirstPerson' has a wrong offset!");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation, ReturnValue) == 0x000010, "Member 'RBLargeObjectInteractionPanelComponent_GetSpecialMoveAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBLargeObjectInteractionPanelComponent.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBLargeObjectInteractionPanelComponent_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeObjectInteractionPanelComponent_IsCompleted) == 0x000001, "Wrong alignment on RBLargeObjectInteractionPanelComponent_IsCompleted");
static_assert(sizeof(RBLargeObjectInteractionPanelComponent_IsCompleted) == 0x000001, "Wrong size on RBLargeObjectInteractionPanelComponent_IsCompleted");
static_assert(offsetof(RBLargeObjectInteractionPanelComponent_IsCompleted, ReturnValue) == 0x000000, "Member 'RBLargeObjectInteractionPanelComponent_IsCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBUnlockableLargePickup.BP_SetIsLocked
// 0x0001 (0x0001 - 0x0000)
struct RBUnlockableLargePickup_BP_SetIsLocked final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUnlockableLargePickup_BP_SetIsLocked) == 0x000001, "Wrong alignment on RBUnlockableLargePickup_BP_SetIsLocked");
static_assert(sizeof(RBUnlockableLargePickup_BP_SetIsLocked) == 0x000001, "Wrong size on RBUnlockableLargePickup_BP_SetIsLocked");
static_assert(offsetof(RBUnlockableLargePickup_BP_SetIsLocked, bValue) == 0x000000, "Member 'RBUnlockableLargePickup_BP_SetIsLocked::bValue' has a wrong offset!");

// Function OPP.RBUnlockableLargePickup.Event_OnIsLockedChanged
// 0x0001 (0x0001 - 0x0000)
struct RBUnlockableLargePickup_Event_OnIsLockedChanged final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUnlockableLargePickup_Event_OnIsLockedChanged) == 0x000001, "Wrong alignment on RBUnlockableLargePickup_Event_OnIsLockedChanged");
static_assert(sizeof(RBUnlockableLargePickup_Event_OnIsLockedChanged) == 0x000001, "Wrong size on RBUnlockableLargePickup_Event_OnIsLockedChanged");
static_assert(offsetof(RBUnlockableLargePickup_Event_OnIsLockedChanged, bValue) == 0x000000, "Member 'RBUnlockableLargePickup_Event_OnIsLockedChanged::bValue' has a wrong offset!");

// Function OPP.RBOperatableComponent.CanOperate
// 0x0010 (0x0010 - 0x0000)
struct RBOperatableComponent_CanOperate final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FBC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBOperatableComponent_CanOperate) == 0x000008, "Wrong alignment on RBOperatableComponent_CanOperate");
static_assert(sizeof(RBOperatableComponent_CanOperate) == 0x000010, "Wrong size on RBOperatableComponent_CanOperate");
static_assert(offsetof(RBOperatableComponent_CanOperate, Pawn) == 0x000000, "Member 'RBOperatableComponent_CanOperate::Pawn' has a wrong offset!");
static_assert(offsetof(RBOperatableComponent_CanOperate, ReturnValue) == 0x000008, "Member 'RBOperatableComponent_CanOperate::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatableComponent.GetOperateTransform
// 0x0040 (0x0040 - 0x0000)
struct RBOperatableComponent_GetOperateTransform final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FBD[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableComponent_GetOperateTransform) == 0x000010, "Wrong alignment on RBOperatableComponent_GetOperateTransform");
static_assert(sizeof(RBOperatableComponent_GetOperateTransform) == 0x000040, "Wrong size on RBOperatableComponent_GetOperateTransform");
static_assert(offsetof(RBOperatableComponent_GetOperateTransform, Pawn) == 0x000000, "Member 'RBOperatableComponent_GetOperateTransform::Pawn' has a wrong offset!");
static_assert(offsetof(RBOperatableComponent_GetOperateTransform, ReturnValue) == 0x000010, "Member 'RBOperatableComponent_GetOperateTransform::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatableComponent.GetOperatorLoopAnimation
// 0x0018 (0x0018 - 0x0000)
struct RBOperatableComponent_GetOperatorLoopAnimation final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstPerson;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FBE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableComponent_GetOperatorLoopAnimation) == 0x000008, "Wrong alignment on RBOperatableComponent_GetOperatorLoopAnimation");
static_assert(sizeof(RBOperatableComponent_GetOperatorLoopAnimation) == 0x000018, "Wrong size on RBOperatableComponent_GetOperatorLoopAnimation");
static_assert(offsetof(RBOperatableComponent_GetOperatorLoopAnimation, Pawn) == 0x000000, "Member 'RBOperatableComponent_GetOperatorLoopAnimation::Pawn' has a wrong offset!");
static_assert(offsetof(RBOperatableComponent_GetOperatorLoopAnimation, bFirstPerson) == 0x000008, "Member 'RBOperatableComponent_GetOperatorLoopAnimation::bFirstPerson' has a wrong offset!");
static_assert(offsetof(RBOperatableComponent_GetOperatorLoopAnimation, ReturnValue) == 0x000010, "Member 'RBOperatableComponent_GetOperatorLoopAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatableComponent.GetOperatorStartAnimation
// 0x0018 (0x0018 - 0x0000)
struct RBOperatableComponent_GetOperatorStartAnimation final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstPerson;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FBF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableComponent_GetOperatorStartAnimation) == 0x000008, "Wrong alignment on RBOperatableComponent_GetOperatorStartAnimation");
static_assert(sizeof(RBOperatableComponent_GetOperatorStartAnimation) == 0x000018, "Wrong size on RBOperatableComponent_GetOperatorStartAnimation");
static_assert(offsetof(RBOperatableComponent_GetOperatorStartAnimation, Pawn) == 0x000000, "Member 'RBOperatableComponent_GetOperatorStartAnimation::Pawn' has a wrong offset!");
static_assert(offsetof(RBOperatableComponent_GetOperatorStartAnimation, bFirstPerson) == 0x000008, "Member 'RBOperatableComponent_GetOperatorStartAnimation::bFirstPerson' has a wrong offset!");
static_assert(offsetof(RBOperatableComponent_GetOperatorStartAnimation, ReturnValue) == 0x000010, "Member 'RBOperatableComponent_GetOperatorStartAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatableComponent.GetOperatorStopAnimation
// 0x0018 (0x0018 - 0x0000)
struct RBOperatableComponent_GetOperatorStopAnimation final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstPerson;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC0[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableComponent_GetOperatorStopAnimation) == 0x000008, "Wrong alignment on RBOperatableComponent_GetOperatorStopAnimation");
static_assert(sizeof(RBOperatableComponent_GetOperatorStopAnimation) == 0x000018, "Wrong size on RBOperatableComponent_GetOperatorStopAnimation");
static_assert(offsetof(RBOperatableComponent_GetOperatorStopAnimation, Pawn) == 0x000000, "Member 'RBOperatableComponent_GetOperatorStopAnimation::Pawn' has a wrong offset!");
static_assert(offsetof(RBOperatableComponent_GetOperatorStopAnimation, bFirstPerson) == 0x000008, "Member 'RBOperatableComponent_GetOperatorStopAnimation::bFirstPerson' has a wrong offset!");
static_assert(offsetof(RBOperatableComponent_GetOperatorStopAnimation, ReturnValue) == 0x000010, "Member 'RBOperatableComponent_GetOperatorStopAnimation::ReturnValue' has a wrong offset!");

// Function OPP.RBCoopOperatableComponent.OnCoopOperatableActiveChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBCoopOperatableComponent_OnCoopOperatableActiveChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCoopOperatableComponent_OnCoopOperatableActiveChangedCallback) == 0x000001, "Wrong alignment on RBCoopOperatableComponent_OnCoopOperatableActiveChangedCallback");
static_assert(sizeof(RBCoopOperatableComponent_OnCoopOperatableActiveChangedCallback) == 0x000001, "Wrong size on RBCoopOperatableComponent_OnCoopOperatableActiveChangedCallback");
static_assert(offsetof(RBCoopOperatableComponent_OnCoopOperatableActiveChangedCallback, ChangeType) == 0x000000, "Member 'RBCoopOperatableComponent_OnCoopOperatableActiveChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBCoopOperatableComponent.SetLinkedCoopOperatableComponent
// 0x0008 (0x0008 - 0x0000)
struct RBCoopOperatableComponent_SetLinkedCoopOperatableComponent final
{
public:
	class URBCoopOperatableComponent*             Cmp;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCoopOperatableComponent_SetLinkedCoopOperatableComponent) == 0x000008, "Wrong alignment on RBCoopOperatableComponent_SetLinkedCoopOperatableComponent");
static_assert(sizeof(RBCoopOperatableComponent_SetLinkedCoopOperatableComponent) == 0x000008, "Wrong size on RBCoopOperatableComponent_SetLinkedCoopOperatableComponent");
static_assert(offsetof(RBCoopOperatableComponent_SetLinkedCoopOperatableComponent, Cmp) == 0x000000, "Member 'RBCoopOperatableComponent_SetLinkedCoopOperatableComponent::Cmp' has a wrong offset!");

// Function OPP.RBCoopOperatableComponent.GetDelayedReleaseTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct RBCoopOperatableComponent_GetDelayedReleaseTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCoopOperatableComponent_GetDelayedReleaseTimeLeft) == 0x000004, "Wrong alignment on RBCoopOperatableComponent_GetDelayedReleaseTimeLeft");
static_assert(sizeof(RBCoopOperatableComponent_GetDelayedReleaseTimeLeft) == 0x000004, "Wrong size on RBCoopOperatableComponent_GetDelayedReleaseTimeLeft");
static_assert(offsetof(RBCoopOperatableComponent_GetDelayedReleaseTimeLeft, ReturnValue) == 0x000000, "Member 'RBCoopOperatableComponent_GetDelayedReleaseTimeLeft::ReturnValue' has a wrong offset!");

// Function OPP.RBCoopOperatableComponent.GetDelayedReleaseTimeLeftRatio
// 0x0004 (0x0004 - 0x0000)
struct RBCoopOperatableComponent_GetDelayedReleaseTimeLeftRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCoopOperatableComponent_GetDelayedReleaseTimeLeftRatio) == 0x000004, "Wrong alignment on RBCoopOperatableComponent_GetDelayedReleaseTimeLeftRatio");
static_assert(sizeof(RBCoopOperatableComponent_GetDelayedReleaseTimeLeftRatio) == 0x000004, "Wrong size on RBCoopOperatableComponent_GetDelayedReleaseTimeLeftRatio");
static_assert(offsetof(RBCoopOperatableComponent_GetDelayedReleaseTimeLeftRatio, ReturnValue) == 0x000000, "Member 'RBCoopOperatableComponent_GetDelayedReleaseTimeLeftRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBCoopOperatableComponent.GetLinkedCoopOperatableComponent
// 0x0008 (0x0008 - 0x0000)
struct RBCoopOperatableComponent_GetLinkedCoopOperatableComponent final
{
public:
	class URBCoopOperatableComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCoopOperatableComponent_GetLinkedCoopOperatableComponent) == 0x000008, "Wrong alignment on RBCoopOperatableComponent_GetLinkedCoopOperatableComponent");
static_assert(sizeof(RBCoopOperatableComponent_GetLinkedCoopOperatableComponent) == 0x000008, "Wrong size on RBCoopOperatableComponent_GetLinkedCoopOperatableComponent");
static_assert(offsetof(RBCoopOperatableComponent_GetLinkedCoopOperatableComponent, ReturnValue) == 0x000000, "Member 'RBCoopOperatableComponent_GetLinkedCoopOperatableComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBCoopOperatableComponent.ShouldActivateDelayedRelease
// 0x0001 (0x0001 - 0x0000)
struct RBCoopOperatableComponent_ShouldActivateDelayedRelease final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCoopOperatableComponent_ShouldActivateDelayedRelease) == 0x000001, "Wrong alignment on RBCoopOperatableComponent_ShouldActivateDelayedRelease");
static_assert(sizeof(RBCoopOperatableComponent_ShouldActivateDelayedRelease) == 0x000001, "Wrong size on RBCoopOperatableComponent_ShouldActivateDelayedRelease");
static_assert(offsetof(RBCoopOperatableComponent_ShouldActivateDelayedRelease, ReturnValue) == 0x000000, "Member 'RBCoopOperatableComponent_ShouldActivateDelayedRelease::ReturnValue' has a wrong offset!");

// Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_ClueGathered
// 0x0008 (0x0008 - 0x0000)
struct RBCorpseSearchObjectiveCoordinator_Multicast_ClueGathered final
{
public:
	struct FClueData                              ClueData;                                          // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCorpseSearchObjectiveCoordinator_Multicast_ClueGathered) == 0x000004, "Wrong alignment on RBCorpseSearchObjectiveCoordinator_Multicast_ClueGathered");
static_assert(sizeof(RBCorpseSearchObjectiveCoordinator_Multicast_ClueGathered) == 0x000008, "Wrong size on RBCorpseSearchObjectiveCoordinator_Multicast_ClueGathered");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_Multicast_ClueGathered, ClueData) == 0x000000, "Member 'RBCorpseSearchObjectiveCoordinator_Multicast_ClueGathered::ClueData' has a wrong offset!");

// Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_CorpseClueGathered
// 0x0008 (0x0008 - 0x0000)
struct RBCorpseSearchObjectiveCoordinator_Multicast_CorpseClueGathered final
{
public:
	class URBPlayerInvestigationZoneComponent*    InvestigationComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCorpseSearchObjectiveCoordinator_Multicast_CorpseClueGathered) == 0x000008, "Wrong alignment on RBCorpseSearchObjectiveCoordinator_Multicast_CorpseClueGathered");
static_assert(sizeof(RBCorpseSearchObjectiveCoordinator_Multicast_CorpseClueGathered) == 0x000008, "Wrong size on RBCorpseSearchObjectiveCoordinator_Multicast_CorpseClueGathered");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_Multicast_CorpseClueGathered, InvestigationComponent) == 0x000000, "Member 'RBCorpseSearchObjectiveCoordinator_Multicast_CorpseClueGathered::InvestigationComponent' has a wrong offset!");

// Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_KeyPickedUp
// 0x000C (0x000C - 0x0000)
struct RBCorpseSearchObjectiveCoordinator_Multicast_KeyPickedUp final
{
public:
	struct FClueData                              ClueData;                                          // 0x0000(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bFirstTimePickedUp;                                // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC5[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCorpseSearchObjectiveCoordinator_Multicast_KeyPickedUp) == 0x000004, "Wrong alignment on RBCorpseSearchObjectiveCoordinator_Multicast_KeyPickedUp");
static_assert(sizeof(RBCorpseSearchObjectiveCoordinator_Multicast_KeyPickedUp) == 0x00000C, "Wrong size on RBCorpseSearchObjectiveCoordinator_Multicast_KeyPickedUp");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_Multicast_KeyPickedUp, ClueData) == 0x000000, "Member 'RBCorpseSearchObjectiveCoordinator_Multicast_KeyPickedUp::ClueData' has a wrong offset!");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_Multicast_KeyPickedUp, bFirstTimePickedUp) == 0x000008, "Member 'RBCorpseSearchObjectiveCoordinator_Multicast_KeyPickedUp::bFirstTimePickedUp' has a wrong offset!");

// Function OPP.RBCorpseSearchObjectiveCoordinator.Multicast_OnEmptyCorpseInteractionDone
// 0x0008 (0x0008 - 0x0000)
struct RBCorpseSearchObjectiveCoordinator_Multicast_OnEmptyCorpseInteractionDone final
{
public:
	class ARBPawn*                                RBPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCorpseSearchObjectiveCoordinator_Multicast_OnEmptyCorpseInteractionDone) == 0x000008, "Wrong alignment on RBCorpseSearchObjectiveCoordinator_Multicast_OnEmptyCorpseInteractionDone");
static_assert(sizeof(RBCorpseSearchObjectiveCoordinator_Multicast_OnEmptyCorpseInteractionDone) == 0x000008, "Wrong size on RBCorpseSearchObjectiveCoordinator_Multicast_OnEmptyCorpseInteractionDone");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_Multicast_OnEmptyCorpseInteractionDone, RBPawn) == 0x000000, "Member 'RBCorpseSearchObjectiveCoordinator_Multicast_OnEmptyCorpseInteractionDone::RBPawn' has a wrong offset!");

// Function OPP.RBCorpseSearchObjectiveCoordinator.OnClueDiscovered
// 0x0008 (0x0008 - 0x0000)
struct RBCorpseSearchObjectiveCoordinator_OnClueDiscovered final
{
public:
	class URBPlayerInvestigationZoneComponent*    InvestigationComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCorpseSearchObjectiveCoordinator_OnClueDiscovered) == 0x000008, "Wrong alignment on RBCorpseSearchObjectiveCoordinator_OnClueDiscovered");
static_assert(sizeof(RBCorpseSearchObjectiveCoordinator_OnClueDiscovered) == 0x000008, "Wrong size on RBCorpseSearchObjectiveCoordinator_OnClueDiscovered");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_OnClueDiscovered, InvestigationComponent) == 0x000000, "Member 'RBCorpseSearchObjectiveCoordinator_OnClueDiscovered::InvestigationComponent' has a wrong offset!");

// Function OPP.RBCorpseSearchObjectiveCoordinator.OnCorpseClueDiscovered
// 0x0008 (0x0008 - 0x0000)
struct RBCorpseSearchObjectiveCoordinator_OnCorpseClueDiscovered final
{
public:
	class URBPlayerInvestigationZoneComponent*    InvestigationComponent;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCorpseSearchObjectiveCoordinator_OnCorpseClueDiscovered) == 0x000008, "Wrong alignment on RBCorpseSearchObjectiveCoordinator_OnCorpseClueDiscovered");
static_assert(sizeof(RBCorpseSearchObjectiveCoordinator_OnCorpseClueDiscovered) == 0x000008, "Wrong size on RBCorpseSearchObjectiveCoordinator_OnCorpseClueDiscovered");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_OnCorpseClueDiscovered, InvestigationComponent) == 0x000000, "Member 'RBCorpseSearchObjectiveCoordinator_OnCorpseClueDiscovered::InvestigationComponent' has a wrong offset!");

// Function OPP.RBCorpseSearchObjectiveCoordinator.OnEmptyCorpseInteractionDone
// 0x0010 (0x0010 - 0x0000)
struct RBCorpseSearchObjectiveCoordinator_OnEmptyCorpseInteractionDone final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCorpseSearchObjectiveCoordinator_OnEmptyCorpseInteractionDone) == 0x000008, "Wrong alignment on RBCorpseSearchObjectiveCoordinator_OnEmptyCorpseInteractionDone");
static_assert(sizeof(RBCorpseSearchObjectiveCoordinator_OnEmptyCorpseInteractionDone) == 0x000010, "Wrong size on RBCorpseSearchObjectiveCoordinator_OnEmptyCorpseInteractionDone");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_OnEmptyCorpseInteractionDone, Panel) == 0x000000, "Member 'RBCorpseSearchObjectiveCoordinator_OnEmptyCorpseInteractionDone::Panel' has a wrong offset!");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_OnEmptyCorpseInteractionDone, PawnInteracting) == 0x000008, "Member 'RBCorpseSearchObjectiveCoordinator_OnEmptyCorpseInteractionDone::PawnInteracting' has a wrong offset!");

// Function OPP.RBCorpseSearchObjectiveCoordinator.GetClueObjectiveIconFromClueName
// 0x0090 (0x0090 - 0x0000)
struct RBCorpseSearchObjectiveCoordinator_GetClueObjectiveIconFromClueName final
{
public:
	class FName                                   ClueName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0008(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCorpseSearchObjectiveCoordinator_GetClueObjectiveIconFromClueName) == 0x000008, "Wrong alignment on RBCorpseSearchObjectiveCoordinator_GetClueObjectiveIconFromClueName");
static_assert(sizeof(RBCorpseSearchObjectiveCoordinator_GetClueObjectiveIconFromClueName) == 0x000090, "Wrong size on RBCorpseSearchObjectiveCoordinator_GetClueObjectiveIconFromClueName");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_GetClueObjectiveIconFromClueName, ClueName) == 0x000000, "Member 'RBCorpseSearchObjectiveCoordinator_GetClueObjectiveIconFromClueName::ClueName' has a wrong offset!");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_GetClueObjectiveIconFromClueName, ReturnValue) == 0x000008, "Member 'RBCorpseSearchObjectiveCoordinator_GetClueObjectiveIconFromClueName::ReturnValue' has a wrong offset!");

// Function OPP.RBCorpseSearchObjectiveCoordinator.GetClueTextFromClueName
// 0x0020 (0x0020 - 0x0000)
struct RBCorpseSearchObjectiveCoordinator_GetClueTextFromClueName final
{
public:
	class FName                                   ClueName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCorpseSearchObjectiveCoordinator_GetClueTextFromClueName) == 0x000008, "Wrong alignment on RBCorpseSearchObjectiveCoordinator_GetClueTextFromClueName");
static_assert(sizeof(RBCorpseSearchObjectiveCoordinator_GetClueTextFromClueName) == 0x000020, "Wrong size on RBCorpseSearchObjectiveCoordinator_GetClueTextFromClueName");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_GetClueTextFromClueName, ClueName) == 0x000000, "Member 'RBCorpseSearchObjectiveCoordinator_GetClueTextFromClueName::ClueName' has a wrong offset!");
static_assert(offsetof(RBCorpseSearchObjectiveCoordinator_GetClueTextFromClueName, ReturnValue) == 0x000008, "Member 'RBCorpseSearchObjectiveCoordinator_GetClueTextFromClueName::ReturnValue' has a wrong offset!");

// Function OPP.RBToyMachineLargeObjectCoordinator.OnInteractibleAddedToWorld
// 0x0008 (0x0008 - 0x0000)
struct RBToyMachineLargeObjectCoordinator_OnInteractibleAddedToWorld final
{
public:
	class ARBInteractible*                        Interactible;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBToyMachineLargeObjectCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong alignment on RBToyMachineLargeObjectCoordinator_OnInteractibleAddedToWorld");
static_assert(sizeof(RBToyMachineLargeObjectCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong size on RBToyMachineLargeObjectCoordinator_OnInteractibleAddedToWorld");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnInteractibleAddedToWorld, Interactible) == 0x000000, "Member 'RBToyMachineLargeObjectCoordinator_OnInteractibleAddedToWorld::Interactible' has a wrong offset!");

// Function OPP.RBToyMachineLargeObjectCoordinator.OnLargeObjectInteractionDoAction
// 0x0018 (0x0018 - 0x0000)
struct RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction final
{
public:
	class URBLargeObjectInteractionPanelComponent* LargeObjectPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Interactor;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction) == 0x000008, "Wrong alignment on RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction");
static_assert(sizeof(RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction) == 0x000018, "Wrong size on RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction, LargeObjectPanel) == 0x000000, "Member 'RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction::LargeObjectPanel' has a wrong offset!");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction, LargePickup) == 0x000008, "Member 'RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction::LargePickup' has a wrong offset!");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction, Interactor) == 0x000010, "Member 'RBToyMachineLargeObjectCoordinator_OnLargeObjectInteractionDoAction::Interactor' has a wrong offset!");

// Function OPP.RBToyMachineLargeObjectCoordinator.OnLargePickupUsed_Server
// 0x0008 (0x0008 - 0x0000)
struct RBToyMachineLargeObjectCoordinator_OnLargePickupUsed_Server final
{
public:
	class ARBLargePickup*                         Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBToyMachineLargeObjectCoordinator_OnLargePickupUsed_Server) == 0x000008, "Wrong alignment on RBToyMachineLargeObjectCoordinator_OnLargePickupUsed_Server");
static_assert(sizeof(RBToyMachineLargeObjectCoordinator_OnLargePickupUsed_Server) == 0x000008, "Wrong size on RBToyMachineLargeObjectCoordinator_OnLargePickupUsed_Server");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnLargePickupUsed_Server, Pickup) == 0x000000, "Member 'RBToyMachineLargeObjectCoordinator_OnLargePickupUsed_Server::Pickup' has a wrong offset!");

// Function OPP.RBToyMachineLargeObjectCoordinator.OnLargePickupUsedOnObject
// 0x0018 (0x0018 - 0x0000)
struct RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBLargeObjectInteractionPanelComponent* Interactible;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject) == 0x000008, "Wrong alignment on RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject");
static_assert(sizeof(RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject) == 0x000018, "Wrong size on RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject, Interactor) == 0x000000, "Member 'RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject::Interactor' has a wrong offset!");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject, LargePickup) == 0x000008, "Member 'RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject::LargePickup' has a wrong offset!");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject, Interactible) == 0x000010, "Member 'RBToyMachineLargeObjectCoordinator_OnLargePickupUsedOnObject::Interactible' has a wrong offset!");

// Function OPP.RBToyMachineLargeObjectCoordinator.OnPickupHolderChanged
// 0x0010 (0x0010 - 0x0000)
struct RBToyMachineLargeObjectCoordinator_OnPickupHolderChanged final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBToyMachineLargeObjectCoordinator_OnPickupHolderChanged) == 0x000008, "Wrong alignment on RBToyMachineLargeObjectCoordinator_OnPickupHolderChanged");
static_assert(sizeof(RBToyMachineLargeObjectCoordinator_OnPickupHolderChanged) == 0x000010, "Wrong size on RBToyMachineLargeObjectCoordinator_OnPickupHolderChanged");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnPickupHolderChanged, Player) == 0x000000, "Member 'RBToyMachineLargeObjectCoordinator_OnPickupHolderChanged::Player' has a wrong offset!");
static_assert(offsetof(RBToyMachineLargeObjectCoordinator_OnPickupHolderChanged, LargePickup) == 0x000008, "Member 'RBToyMachineLargeObjectCoordinator_OnPickupHolderChanged::LargePickup' has a wrong offset!");

// Function OPP.RBCounterInterface.GetCounter
// 0x0004 (0x0004 - 0x0000)
struct RBCounterInterface_GetCounter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCounterInterface_GetCounter) == 0x000004, "Wrong alignment on RBCounterInterface_GetCounter");
static_assert(sizeof(RBCounterInterface_GetCounter) == 0x000004, "Wrong size on RBCounterInterface_GetCounter");
static_assert(offsetof(RBCounterInterface_GetCounter, ReturnValue) == 0x000000, "Member 'RBCounterInterface_GetCounter::ReturnValue' has a wrong offset!");

// Function OPP.RBCounterInterface.SetCounter
// 0x0004 (0x0004 - 0x0000)
struct RBCounterInterface_SetCounter final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCounterInterface_SetCounter) == 0x000004, "Wrong alignment on RBCounterInterface_SetCounter");
static_assert(sizeof(RBCounterInterface_SetCounter) == 0x000004, "Wrong size on RBCounterInterface_SetCounter");
static_assert(offsetof(RBCounterInterface_SetCounter, Value) == 0x000000, "Member 'RBCounterInterface_SetCounter::Value' has a wrong offset!");

// Function OPP.RBCrouchUnderMarker.SetBlocksNavMesh
// 0x0001 (0x0001 - 0x0000)
struct RBCrouchUnderMarker_SetBlocksNavMesh final
{
public:
	bool                                          bBlocks;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCrouchUnderMarker_SetBlocksNavMesh) == 0x000001, "Wrong alignment on RBCrouchUnderMarker_SetBlocksNavMesh");
static_assert(sizeof(RBCrouchUnderMarker_SetBlocksNavMesh) == 0x000001, "Wrong size on RBCrouchUnderMarker_SetBlocksNavMesh");
static_assert(offsetof(RBCrouchUnderMarker_SetBlocksNavMesh, bBlocks) == 0x000000, "Member 'RBCrouchUnderMarker_SetBlocksNavMesh::bBlocks' has a wrong offset!");

// Function OPP.RBCrouchUnderMarker.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBCrouchUnderMarker_SetEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCrouchUnderMarker_SetEnabled) == 0x000001, "Wrong alignment on RBCrouchUnderMarker_SetEnabled");
static_assert(sizeof(RBCrouchUnderMarker_SetEnabled) == 0x000001, "Wrong size on RBCrouchUnderMarker_SetEnabled");
static_assert(offsetof(RBCrouchUnderMarker_SetEnabled, bEnabledValue) == 0x000000, "Member 'RBCrouchUnderMarker_SetEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBCurrencyItem.OnSpectatingPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct RBCurrencyItem_OnSpectatingPlayerChanged final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCurrencyItem_OnSpectatingPlayerChanged) == 0x000008, "Wrong alignment on RBCurrencyItem_OnSpectatingPlayerChanged");
static_assert(sizeof(RBCurrencyItem_OnSpectatingPlayerChanged) == 0x000008, "Wrong size on RBCurrencyItem_OnSpectatingPlayerChanged");
static_assert(offsetof(RBCurrencyItem_OnSpectatingPlayerChanged, Player) == 0x000000, "Member 'RBCurrencyItem_OnSpectatingPlayerChanged::Player' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.Event_OnPlayerSASChanged
// 0x0010 (0x0010 - 0x0000)
struct RBGroupStatusEntryWidget_Event_OnPlayerSASChanged final
{
public:
	class ARBPlayerState*                         Param_RBPlayerState;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBSAS*                                 CurrentSAS;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_Event_OnPlayerSASChanged) == 0x000008, "Wrong alignment on RBGroupStatusEntryWidget_Event_OnPlayerSASChanged");
static_assert(sizeof(RBGroupStatusEntryWidget_Event_OnPlayerSASChanged) == 0x000010, "Wrong size on RBGroupStatusEntryWidget_Event_OnPlayerSASChanged");
static_assert(offsetof(RBGroupStatusEntryWidget_Event_OnPlayerSASChanged, Param_RBPlayerState) == 0x000000, "Member 'RBGroupStatusEntryWidget_Event_OnPlayerSASChanged::Param_RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBGroupStatusEntryWidget_Event_OnPlayerSASChanged, CurrentSAS) == 0x000008, "Member 'RBGroupStatusEntryWidget_Event_OnPlayerSASChanged::CurrentSAS' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.Event_Refresh_Health
// 0x0008 (0x0008 - 0x0000)
struct RBGroupStatusEntryWidget_Event_Refresh_Health final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipAnim;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FD1[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGroupStatusEntryWidget_Event_Refresh_Health) == 0x000004, "Wrong alignment on RBGroupStatusEntryWidget_Event_Refresh_Health");
static_assert(sizeof(RBGroupStatusEntryWidget_Event_Refresh_Health) == 0x000008, "Wrong size on RBGroupStatusEntryWidget_Event_Refresh_Health");
static_assert(offsetof(RBGroupStatusEntryWidget_Event_Refresh_Health, NewHealth) == 0x000000, "Member 'RBGroupStatusEntryWidget_Event_Refresh_Health::NewHealth' has a wrong offset!");
static_assert(offsetof(RBGroupStatusEntryWidget_Event_Refresh_Health, SkipAnim) == 0x000004, "Member 'RBGroupStatusEntryWidget_Event_Refresh_Health::SkipAnim' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.Event_Refresh_MaxHealth
// 0x0004 (0x0004 - 0x0000)
struct RBGroupStatusEntryWidget_Event_Refresh_MaxHealth final
{
public:
	float                                         NewMaxHealth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_Event_Refresh_MaxHealth) == 0x000004, "Wrong alignment on RBGroupStatusEntryWidget_Event_Refresh_MaxHealth");
static_assert(sizeof(RBGroupStatusEntryWidget_Event_Refresh_MaxHealth) == 0x000004, "Wrong size on RBGroupStatusEntryWidget_Event_Refresh_MaxHealth");
static_assert(offsetof(RBGroupStatusEntryWidget_Event_Refresh_MaxHealth, NewMaxHealth) == 0x000000, "Member 'RBGroupStatusEntryWidget_Event_Refresh_MaxHealth::NewMaxHealth' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.GetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct RBGroupStatusEntryWidget_GetPlayerState final
{
public:
	class ARBPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_GetPlayerState) == 0x000008, "Wrong alignment on RBGroupStatusEntryWidget_GetPlayerState");
static_assert(sizeof(RBGroupStatusEntryWidget_GetPlayerState) == 0x000008, "Wrong size on RBGroupStatusEntryWidget_GetPlayerState");
static_assert(offsetof(RBGroupStatusEntryWidget_GetPlayerState, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_GetPlayerState::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.OnHealthUpdated
// 0x0004 (0x0004 - 0x0000)
struct RBGroupStatusEntryWidget_OnHealthUpdated final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_OnHealthUpdated) == 0x000004, "Wrong alignment on RBGroupStatusEntryWidget_OnHealthUpdated");
static_assert(sizeof(RBGroupStatusEntryWidget_OnHealthUpdated) == 0x000004, "Wrong size on RBGroupStatusEntryWidget_OnHealthUpdated");
static_assert(offsetof(RBGroupStatusEntryWidget_OnHealthUpdated, NewHealth) == 0x000000, "Member 'RBGroupStatusEntryWidget_OnHealthUpdated::NewHealth' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.OnPlayerIndicatorUpdated
// 0x000C (0x000C - 0x0000)
struct RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated final
{
public:
	EPlayerIndicatorType                          PlayerIndicatorType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FD2[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLeft;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated) == 0x000004, "Wrong alignment on RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated");
static_assert(sizeof(RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated) == 0x00000C, "Wrong size on RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated");
static_assert(offsetof(RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated, PlayerIndicatorType) == 0x000000, "Member 'RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated::PlayerIndicatorType' has a wrong offset!");
static_assert(offsetof(RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated, TimeLeft) == 0x000004, "Member 'RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated::TimeLeft' has a wrong offset!");
static_assert(offsetof(RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated, Progress) == 0x000008, "Member 'RBGroupStatusEntryWidget_OnPlayerIndicatorUpdated::Progress' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.OnPlayerVoiceChatVolumeChanged
// 0x0014 (0x0014 - 0x0000)
struct RBGroupStatusEntryWidget_OnPlayerVoiceChatVolumeChanged final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_OnPlayerVoiceChatVolumeChanged) == 0x000004, "Wrong alignment on RBGroupStatusEntryWidget_OnPlayerVoiceChatVolumeChanged");
static_assert(sizeof(RBGroupStatusEntryWidget_OnPlayerVoiceChatVolumeChanged) == 0x000014, "Wrong size on RBGroupStatusEntryWidget_OnPlayerVoiceChatVolumeChanged");
static_assert(offsetof(RBGroupStatusEntryWidget_OnPlayerVoiceChatVolumeChanged, ProfileId) == 0x000000, "Member 'RBGroupStatusEntryWidget_OnPlayerVoiceChatVolumeChanged::ProfileId' has a wrong offset!");
static_assert(offsetof(RBGroupStatusEntryWidget_OnPlayerVoiceChatVolumeChanged, Volume) == 0x000010, "Member 'RBGroupStatusEntryWidget_OnPlayerVoiceChatVolumeChanged::Volume' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.SetMaxDisplayNameLength
// 0x0004 (0x0004 - 0x0000)
struct RBGroupStatusEntryWidget_SetMaxDisplayNameLength final
{
public:
	int32                                         MaxDisplayNameLength;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_SetMaxDisplayNameLength) == 0x000004, "Wrong alignment on RBGroupStatusEntryWidget_SetMaxDisplayNameLength");
static_assert(sizeof(RBGroupStatusEntryWidget_SetMaxDisplayNameLength) == 0x000004, "Wrong size on RBGroupStatusEntryWidget_SetMaxDisplayNameLength");
static_assert(offsetof(RBGroupStatusEntryWidget_SetMaxDisplayNameLength, MaxDisplayNameLength) == 0x000000, "Member 'RBGroupStatusEntryWidget_SetMaxDisplayNameLength::MaxDisplayNameLength' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.GetActiveSkillType
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_GetActiveSkillType final
{
public:
	EActiveSkillType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_GetActiveSkillType) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_GetActiveSkillType");
static_assert(sizeof(RBGroupStatusEntryWidget_GetActiveSkillType) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_GetActiveSkillType");
static_assert(offsetof(RBGroupStatusEntryWidget_GetActiveSkillType, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_GetActiveSkillType::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct RBGroupStatusEntryWidget_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_GetDisplayName) == 0x000008, "Wrong alignment on RBGroupStatusEntryWidget_GetDisplayName");
static_assert(sizeof(RBGroupStatusEntryWidget_GetDisplayName) == 0x000010, "Wrong size on RBGroupStatusEntryWidget_GetDisplayName");
static_assert(offsetof(RBGroupStatusEntryWidget_GetDisplayName, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_GetDisplayName::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.GetMaxDisplayNameLength
// 0x0004 (0x0004 - 0x0000)
struct RBGroupStatusEntryWidget_GetMaxDisplayNameLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_GetMaxDisplayNameLength) == 0x000004, "Wrong alignment on RBGroupStatusEntryWidget_GetMaxDisplayNameLength");
static_assert(sizeof(RBGroupStatusEntryWidget_GetMaxDisplayNameLength) == 0x000004, "Wrong size on RBGroupStatusEntryWidget_GetMaxDisplayNameLength");
static_assert(offsetof(RBGroupStatusEntryWidget_GetMaxDisplayNameLength, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_GetMaxDisplayNameLength::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.GetPlayerIndicatorIconProgress
// 0x0004 (0x0004 - 0x0000)
struct RBGroupStatusEntryWidget_GetPlayerIndicatorIconProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_GetPlayerIndicatorIconProgress) == 0x000004, "Wrong alignment on RBGroupStatusEntryWidget_GetPlayerIndicatorIconProgress");
static_assert(sizeof(RBGroupStatusEntryWidget_GetPlayerIndicatorIconProgress) == 0x000004, "Wrong size on RBGroupStatusEntryWidget_GetPlayerIndicatorIconProgress");
static_assert(offsetof(RBGroupStatusEntryWidget_GetPlayerIndicatorIconProgress, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_GetPlayerIndicatorIconProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.GetPlayerIndicatorTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct RBGroupStatusEntryWidget_GetPlayerIndicatorTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_GetPlayerIndicatorTimeLeft) == 0x000004, "Wrong alignment on RBGroupStatusEntryWidget_GetPlayerIndicatorTimeLeft");
static_assert(sizeof(RBGroupStatusEntryWidget_GetPlayerIndicatorTimeLeft) == 0x000004, "Wrong size on RBGroupStatusEntryWidget_GetPlayerIndicatorTimeLeft");
static_assert(offsetof(RBGroupStatusEntryWidget_GetPlayerIndicatorTimeLeft, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_GetPlayerIndicatorTimeLeft::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.GetPlayerIndicatorType
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_GetPlayerIndicatorType final
{
public:
	EPlayerIndicatorType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_GetPlayerIndicatorType) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_GetPlayerIndicatorType");
static_assert(sizeof(RBGroupStatusEntryWidget_GetPlayerIndicatorType) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_GetPlayerIndicatorType");
static_assert(offsetof(RBGroupStatusEntryWidget_GetPlayerIndicatorType, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_GetPlayerIndicatorType::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.HasVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_HasVoiceChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_HasVoiceChatEnabled) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_HasVoiceChatEnabled");
static_assert(sizeof(RBGroupStatusEntryWidget_HasVoiceChatEnabled) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_HasVoiceChatEnabled");
static_assert(offsetof(RBGroupStatusEntryWidget_HasVoiceChatEnabled, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_HasVoiceChatEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.IsBlocked
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_IsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_IsBlocked) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_IsBlocked");
static_assert(sizeof(RBGroupStatusEntryWidget_IsBlocked) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_IsBlocked");
static_assert(offsetof(RBGroupStatusEntryWidget_IsBlocked, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_IsBlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.IsGloballyMuted
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_IsGloballyMuted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_IsGloballyMuted) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_IsGloballyMuted");
static_assert(sizeof(RBGroupStatusEntryWidget_IsGloballyMuted) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_IsGloballyMuted");
static_assert(offsetof(RBGroupStatusEntryWidget_IsGloballyMuted, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_IsGloballyMuted::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.IsMuted
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_IsMuted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_IsMuted) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_IsMuted");
static_assert(sizeof(RBGroupStatusEntryWidget_IsMuted) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_IsMuted");
static_assert(offsetof(RBGroupStatusEntryWidget_IsMuted, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_IsMuted::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.IsPartyOwner
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_IsPartyOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_IsPartyOwner) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_IsPartyOwner");
static_assert(sizeof(RBGroupStatusEntryWidget_IsPartyOwner) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_IsPartyOwner");
static_assert(offsetof(RBGroupStatusEntryWidget_IsPartyOwner, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_IsPartyOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.IsSelf
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_IsSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_IsSelf) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_IsSelf");
static_assert(sizeof(RBGroupStatusEntryWidget_IsSelf) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_IsSelf");
static_assert(offsetof(RBGroupStatusEntryWidget_IsSelf, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_IsSelf::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.IsSpeaking
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_IsSpeaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_IsSpeaking) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_IsSpeaking");
static_assert(sizeof(RBGroupStatusEntryWidget_IsSpeaking) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_IsSpeaking");
static_assert(offsetof(RBGroupStatusEntryWidget_IsSpeaking, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_IsSpeaking::ReturnValue' has a wrong offset!");

// Function OPP.RBGroupStatusEntryWidget.IsVoiceChatConnected
// 0x0001 (0x0001 - 0x0000)
struct RBGroupStatusEntryWidget_IsVoiceChatConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusEntryWidget_IsVoiceChatConnected) == 0x000001, "Wrong alignment on RBGroupStatusEntryWidget_IsVoiceChatConnected");
static_assert(sizeof(RBGroupStatusEntryWidget_IsVoiceChatConnected) == 0x000001, "Wrong size on RBGroupStatusEntryWidget_IsVoiceChatConnected");
static_assert(offsetof(RBGroupStatusEntryWidget_IsVoiceChatConnected, ReturnValue) == 0x000000, "Member 'RBGroupStatusEntryWidget_IsVoiceChatConnected::ReturnValue' has a wrong offset!");

// Function OPP.RBCurrencyPackMenu.Event_CompletedPurchase
// 0x0060 (0x0060 - 0x0000)
struct RBCurrencyPackMenu_Event_CompletedPurchase final
{
public:
	struct FCurrencyPackMenuItem                  Item;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCurrencyPackMenu_Event_CompletedPurchase) == 0x000008, "Wrong alignment on RBCurrencyPackMenu_Event_CompletedPurchase");
static_assert(sizeof(RBCurrencyPackMenu_Event_CompletedPurchase) == 0x000060, "Wrong size on RBCurrencyPackMenu_Event_CompletedPurchase");
static_assert(offsetof(RBCurrencyPackMenu_Event_CompletedPurchase, Item) == 0x000000, "Member 'RBCurrencyPackMenu_Event_CompletedPurchase::Item' has a wrong offset!");

// Function OPP.RBCurrencyPackMenu.Purchase
// 0x0060 (0x0060 - 0x0000)
struct RBCurrencyPackMenu_Purchase final
{
public:
	struct FCurrencyPackMenuItem                  Item;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCurrencyPackMenu_Purchase) == 0x000008, "Wrong alignment on RBCurrencyPackMenu_Purchase");
static_assert(sizeof(RBCurrencyPackMenu_Purchase) == 0x000060, "Wrong size on RBCurrencyPackMenu_Purchase");
static_assert(offsetof(RBCurrencyPackMenu_Purchase, Item) == 0x000000, "Member 'RBCurrencyPackMenu_Purchase::Item' has a wrong offset!");

// Function OPP.RBCurrencyPackMenu.CanCancelPurchase
// 0x0001 (0x0001 - 0x0000)
struct RBCurrencyPackMenu_CanCancelPurchase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCurrencyPackMenu_CanCancelPurchase) == 0x000001, "Wrong alignment on RBCurrencyPackMenu_CanCancelPurchase");
static_assert(sizeof(RBCurrencyPackMenu_CanCancelPurchase) == 0x000001, "Wrong size on RBCurrencyPackMenu_CanCancelPurchase");
static_assert(offsetof(RBCurrencyPackMenu_CanCancelPurchase, ReturnValue) == 0x000000, "Member 'RBCurrencyPackMenu_CanCancelPurchase::ReturnValue' has a wrong offset!");

// Function OPP.RBCurrencyPackMenu.GetCurrencyPackItems
// 0x0010 (0x0010 - 0x0000)
struct RBCurrencyPackMenu_GetCurrencyPackItems final
{
public:
	TArray<struct FCurrencyPackMenuItem>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCurrencyPackMenu_GetCurrencyPackItems) == 0x000008, "Wrong alignment on RBCurrencyPackMenu_GetCurrencyPackItems");
static_assert(sizeof(RBCurrencyPackMenu_GetCurrencyPackItems) == 0x000010, "Wrong size on RBCurrencyPackMenu_GetCurrencyPackItems");
static_assert(offsetof(RBCurrencyPackMenu_GetCurrencyPackItems, ReturnValue) == 0x000000, "Member 'RBCurrencyPackMenu_GetCurrencyPackItems::ReturnValue' has a wrong offset!");

// Function OPP.RBCurrencyPackMenu.IsDataPending
// 0x0001 (0x0001 - 0x0000)
struct RBCurrencyPackMenu_IsDataPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCurrencyPackMenu_IsDataPending) == 0x000001, "Wrong alignment on RBCurrencyPackMenu_IsDataPending");
static_assert(sizeof(RBCurrencyPackMenu_IsDataPending) == 0x000001, "Wrong size on RBCurrencyPackMenu_IsDataPending");
static_assert(offsetof(RBCurrencyPackMenu_IsDataPending, ReturnValue) == 0x000000, "Member 'RBCurrencyPackMenu_IsDataPending::ReturnValue' has a wrong offset!");

// Function OPP.RBCurrencyPackMenu.IsOperationPending
// 0x0001 (0x0001 - 0x0000)
struct RBCurrencyPackMenu_IsOperationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCurrencyPackMenu_IsOperationPending) == 0x000001, "Wrong alignment on RBCurrencyPackMenu_IsOperationPending");
static_assert(sizeof(RBCurrencyPackMenu_IsOperationPending) == 0x000001, "Wrong size on RBCurrencyPackMenu_IsOperationPending");
static_assert(offsetof(RBCurrencyPackMenu_IsOperationPending, ReturnValue) == 0x000000, "Member 'RBCurrencyPackMenu_IsOperationPending::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDStaminaBar.SetPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBHUDStaminaBar_SetPlayer final
{
public:
	class ARBPlayer*                              NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDStaminaBar_SetPlayer) == 0x000008, "Wrong alignment on RBHUDStaminaBar_SetPlayer");
static_assert(sizeof(RBHUDStaminaBar_SetPlayer) == 0x000008, "Wrong size on RBHUDStaminaBar_SetPlayer");
static_assert(offsetof(RBHUDStaminaBar_SetPlayer, NewPlayer) == 0x000000, "Member 'RBHUDStaminaBar_SetPlayer::NewPlayer' has a wrong offset!");

// Function OPP.RBCutsceneMenu.Event_ShowSkipPrompt
// 0x0001 (0x0001 - 0x0000)
struct RBCutsceneMenu_Event_ShowSkipPrompt final
{
public:
	bool                                          bShouldStartHideTimer;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCutsceneMenu_Event_ShowSkipPrompt) == 0x000001, "Wrong alignment on RBCutsceneMenu_Event_ShowSkipPrompt");
static_assert(sizeof(RBCutsceneMenu_Event_ShowSkipPrompt) == 0x000001, "Wrong size on RBCutsceneMenu_Event_ShowSkipPrompt");
static_assert(offsetof(RBCutsceneMenu_Event_ShowSkipPrompt, bShouldStartHideTimer) == 0x000000, "Member 'RBCutsceneMenu_Event_ShowSkipPrompt::bShouldStartHideTimer' has a wrong offset!");

// Function OPP.RBCutsceneMenu.OnInputKey
// 0x0020 (0x0020 - 0x0000)
struct RBCutsceneMenu_OnInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FD5[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBCutsceneMenu_OnInputKey) == 0x000008, "Wrong alignment on RBCutsceneMenu_OnInputKey");
static_assert(sizeof(RBCutsceneMenu_OnInputKey) == 0x000020, "Wrong size on RBCutsceneMenu_OnInputKey");
static_assert(offsetof(RBCutsceneMenu_OnInputKey, Key) == 0x000000, "Member 'RBCutsceneMenu_OnInputKey::Key' has a wrong offset!");
static_assert(offsetof(RBCutsceneMenu_OnInputKey, EventType) == 0x000018, "Member 'RBCutsceneMenu_OnInputKey::EventType' has a wrong offset!");
static_assert(offsetof(RBCutsceneMenu_OnInputKey, bGamepad) == 0x000019, "Member 'RBCutsceneMenu_OnInputKey::bGamepad' has a wrong offset!");

// Function OPP.RBDamageableComponent.BP_Damage
// 0x0004 (0x0004 - 0x0000)
struct RBDamageableComponent_BP_Damage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageableComponent_BP_Damage) == 0x000004, "Wrong alignment on RBDamageableComponent_BP_Damage");
static_assert(sizeof(RBDamageableComponent_BP_Damage) == 0x000004, "Wrong size on RBDamageableComponent_BP_Damage");
static_assert(offsetof(RBDamageableComponent_BP_Damage, DamageAmount) == 0x000000, "Member 'RBDamageableComponent_BP_Damage::DamageAmount' has a wrong offset!");

// Function OPP.RBDamageableComponent.BP_SetCanBeDamaged
// 0x0001 (0x0001 - 0x0000)
struct RBDamageableComponent_BP_SetCanBeDamaged final
{
public:
	bool                                          bCanBeDamagedValue;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageableComponent_BP_SetCanBeDamaged) == 0x000001, "Wrong alignment on RBDamageableComponent_BP_SetCanBeDamaged");
static_assert(sizeof(RBDamageableComponent_BP_SetCanBeDamaged) == 0x000001, "Wrong size on RBDamageableComponent_BP_SetCanBeDamaged");
static_assert(offsetof(RBDamageableComponent_BP_SetCanBeDamaged, bCanBeDamagedValue) == 0x000000, "Member 'RBDamageableComponent_BP_SetCanBeDamaged::bCanBeDamagedValue' has a wrong offset!");

// Function OPP.RBDamageableComponent.ForceDurability_Server
// 0x0004 (0x0004 - 0x0000)
struct RBDamageableComponent_ForceDurability_Server final
{
public:
	float                                         Param_Durability;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageableComponent_ForceDurability_Server) == 0x000004, "Wrong alignment on RBDamageableComponent_ForceDurability_Server");
static_assert(sizeof(RBDamageableComponent_ForceDurability_Server) == 0x000004, "Wrong size on RBDamageableComponent_ForceDurability_Server");
static_assert(offsetof(RBDamageableComponent_ForceDurability_Server, Param_Durability) == 0x000000, "Member 'RBDamageableComponent_ForceDurability_Server::Param_Durability' has a wrong offset!");

// Function OPP.RBDamageableComponent.BP_GetDurabilityRatio
// 0x0004 (0x0004 - 0x0000)
struct RBDamageableComponent_BP_GetDurabilityRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageableComponent_BP_GetDurabilityRatio) == 0x000004, "Wrong alignment on RBDamageableComponent_BP_GetDurabilityRatio");
static_assert(sizeof(RBDamageableComponent_BP_GetDurabilityRatio) == 0x000004, "Wrong size on RBDamageableComponent_BP_GetDurabilityRatio");
static_assert(offsetof(RBDamageableComponent_BP_GetDurabilityRatio, ReturnValue) == 0x000000, "Member 'RBDamageableComponent_BP_GetDurabilityRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBDamageableComponent.CanBeDamaged
// 0x0001 (0x0001 - 0x0000)
struct RBDamageableComponent_CanBeDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageableComponent_CanBeDamaged) == 0x000001, "Wrong alignment on RBDamageableComponent_CanBeDamaged");
static_assert(sizeof(RBDamageableComponent_CanBeDamaged) == 0x000001, "Wrong size on RBDamageableComponent_CanBeDamaged");
static_assert(offsetof(RBDamageableComponent_CanBeDamaged, ReturnValue) == 0x000000, "Member 'RBDamageableComponent_CanBeDamaged::ReturnValue' has a wrong offset!");

// Function OPP.RBDamageableComponent.GetDurability
// 0x0004 (0x0004 - 0x0000)
struct RBDamageableComponent_GetDurability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageableComponent_GetDurability) == 0x000004, "Wrong alignment on RBDamageableComponent_GetDurability");
static_assert(sizeof(RBDamageableComponent_GetDurability) == 0x000004, "Wrong size on RBDamageableComponent_GetDurability");
static_assert(offsetof(RBDamageableComponent_GetDurability, ReturnValue) == 0x000000, "Member 'RBDamageableComponent_GetDurability::ReturnValue' has a wrong offset!");

// Function OPP.RBDamageableComponent.GetMaxDurability
// 0x0004 (0x0004 - 0x0000)
struct RBDamageableComponent_GetMaxDurability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageableComponent_GetMaxDurability) == 0x000004, "Wrong alignment on RBDamageableComponent_GetMaxDurability");
static_assert(sizeof(RBDamageableComponent_GetMaxDurability) == 0x000004, "Wrong size on RBDamageableComponent_GetMaxDurability");
static_assert(offsetof(RBDamageableComponent_GetMaxDurability, ReturnValue) == 0x000000, "Member 'RBDamageableComponent_GetMaxDurability::ReturnValue' has a wrong offset!");

// Function OPP.RBDamageableComponent.GetNumberOfHits
// 0x0004 (0x0004 - 0x0000)
struct RBDamageableComponent_GetNumberOfHits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageableComponent_GetNumberOfHits) == 0x000004, "Wrong alignment on RBDamageableComponent_GetNumberOfHits");
static_assert(sizeof(RBDamageableComponent_GetNumberOfHits) == 0x000004, "Wrong size on RBDamageableComponent_GetNumberOfHits");
static_assert(offsetof(RBDamageableComponent_GetNumberOfHits, ReturnValue) == 0x000000, "Member 'RBDamageableComponent_GetNumberOfHits::ReturnValue' has a wrong offset!");

// Function OPP.RBDamageableComponent.IsDestroyed
// 0x0001 (0x0001 - 0x0000)
struct RBDamageableComponent_IsDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageableComponent_IsDestroyed) == 0x000001, "Wrong alignment on RBDamageableComponent_IsDestroyed");
static_assert(sizeof(RBDamageableComponent_IsDestroyed) == 0x000001, "Wrong size on RBDamageableComponent_IsDestroyed");
static_assert(offsetof(RBDamageableComponent_IsDestroyed, ReturnValue) == 0x000000, "Member 'RBDamageableComponent_IsDestroyed::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDLinearInventory.Event_OnIsInCooldownChanged
// 0x0010 (0x0010 - 0x0000)
struct RBHUDLinearInventory_Event_OnIsInCooldownChanged final
{
public:
	class ARBActiveSkill*                         ActiveSkill;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInCooldown;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FDB[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUDLinearInventory_Event_OnIsInCooldownChanged) == 0x000008, "Wrong alignment on RBHUDLinearInventory_Event_OnIsInCooldownChanged");
static_assert(sizeof(RBHUDLinearInventory_Event_OnIsInCooldownChanged) == 0x000010, "Wrong size on RBHUDLinearInventory_Event_OnIsInCooldownChanged");
static_assert(offsetof(RBHUDLinearInventory_Event_OnIsInCooldownChanged, ActiveSkill) == 0x000000, "Member 'RBHUDLinearInventory_Event_OnIsInCooldownChanged::ActiveSkill' has a wrong offset!");
static_assert(offsetof(RBHUDLinearInventory_Event_OnIsInCooldownChanged, bIsInCooldown) == 0x000008, "Member 'RBHUDLinearInventory_Event_OnIsInCooldownChanged::bIsInCooldown' has a wrong offset!");

// Function OPP.RBHUDLinearInventory.Event_Refresh
// 0x0001 (0x0001 - 0x0000)
struct RBHUDLinearInventory_Event_Refresh final
{
public:
	EInventoryUpdateEventType                     EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDLinearInventory_Event_Refresh) == 0x000001, "Wrong alignment on RBHUDLinearInventory_Event_Refresh");
static_assert(sizeof(RBHUDLinearInventory_Event_Refresh) == 0x000001, "Wrong size on RBHUDLinearInventory_Event_Refresh");
static_assert(offsetof(RBHUDLinearInventory_Event_Refresh, EventType) == 0x000000, "Member 'RBHUDLinearInventory_Event_Refresh::EventType' has a wrong offset!");

// Function OPP.RBHUDLinearInventory.Event_RefreshASRestriction
// 0x0001 (0x0001 - 0x0000)
struct RBHUDLinearInventory_Event_RefreshASRestriction final
{
public:
	bool                                          IsRestricted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDLinearInventory_Event_RefreshASRestriction) == 0x000001, "Wrong alignment on RBHUDLinearInventory_Event_RefreshASRestriction");
static_assert(sizeof(RBHUDLinearInventory_Event_RefreshASRestriction) == 0x000001, "Wrong size on RBHUDLinearInventory_Event_RefreshASRestriction");
static_assert(offsetof(RBHUDLinearInventory_Event_RefreshASRestriction, IsRestricted) == 0x000000, "Member 'RBHUDLinearInventory_Event_RefreshASRestriction::IsRestricted' has a wrong offset!");

// Function OPP.RBHUDLinearInventory.Event_RefreshDarknessIndicator
// 0x0001 (0x0001 - 0x0000)
struct RBHUDLinearInventory_Event_RefreshDarknessIndicator final
{
public:
	bool                                          NewDarknessState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDLinearInventory_Event_RefreshDarknessIndicator) == 0x000001, "Wrong alignment on RBHUDLinearInventory_Event_RefreshDarknessIndicator");
static_assert(sizeof(RBHUDLinearInventory_Event_RefreshDarknessIndicator) == 0x000001, "Wrong size on RBHUDLinearInventory_Event_RefreshDarknessIndicator");
static_assert(offsetof(RBHUDLinearInventory_Event_RefreshDarknessIndicator, NewDarknessState) == 0x000000, "Member 'RBHUDLinearInventory_Event_RefreshDarknessIndicator::NewDarknessState' has a wrong offset!");

// Function OPP.RBHUDLinearInventory.OnActiveSkillRestrictionChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHUDLinearInventory_OnActiveSkillRestrictionChanged final
{
public:
	bool                                          IsRestricted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDLinearInventory_OnActiveSkillRestrictionChanged) == 0x000001, "Wrong alignment on RBHUDLinearInventory_OnActiveSkillRestrictionChanged");
static_assert(sizeof(RBHUDLinearInventory_OnActiveSkillRestrictionChanged) == 0x000001, "Wrong size on RBHUDLinearInventory_OnActiveSkillRestrictionChanged");
static_assert(offsetof(RBHUDLinearInventory_OnActiveSkillRestrictionChanged, IsRestricted) == 0x000000, "Member 'RBHUDLinearInventory_OnActiveSkillRestrictionChanged::IsRestricted' has a wrong offset!");

// Function OPP.RBHUDLinearInventory.OnInventoryUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBHUDLinearInventory_OnInventoryUpdated final
{
public:
	EInventoryUpdateEventType                     EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDLinearInventory_OnInventoryUpdated) == 0x000001, "Wrong alignment on RBHUDLinearInventory_OnInventoryUpdated");
static_assert(sizeof(RBHUDLinearInventory_OnInventoryUpdated) == 0x000001, "Wrong size on RBHUDLinearInventory_OnInventoryUpdated");
static_assert(offsetof(RBHUDLinearInventory_OnInventoryUpdated, EventType) == 0x000000, "Member 'RBHUDLinearInventory_OnInventoryUpdated::EventType' has a wrong offset!");

// Function OPP.RBWWWControlMenu.Event_OnPlaybackSpeedChanged
// 0x0004 (0x0004 - 0x0000)
struct RBWWWControlMenu_Event_OnPlaybackSpeedChanged final
{
public:
	int32                                         SpeedIdx;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_Event_OnPlaybackSpeedChanged) == 0x000004, "Wrong alignment on RBWWWControlMenu_Event_OnPlaybackSpeedChanged");
static_assert(sizeof(RBWWWControlMenu_Event_OnPlaybackSpeedChanged) == 0x000004, "Wrong size on RBWWWControlMenu_Event_OnPlaybackSpeedChanged");
static_assert(offsetof(RBWWWControlMenu_Event_OnPlaybackSpeedChanged, SpeedIdx) == 0x000000, "Member 'RBWWWControlMenu_Event_OnPlaybackSpeedChanged::SpeedIdx' has a wrong offset!");

// Function OPP.RBWWWControlMenu.GetPlaybackInfoText
// 0x0018 (0x0018 - 0x0000)
struct RBWWWControlMenu_GetPlaybackInfoText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_GetPlaybackInfoText) == 0x000008, "Wrong alignment on RBWWWControlMenu_GetPlaybackInfoText");
static_assert(sizeof(RBWWWControlMenu_GetPlaybackInfoText) == 0x000018, "Wrong size on RBWWWControlMenu_GetPlaybackInfoText");
static_assert(offsetof(RBWWWControlMenu_GetPlaybackInfoText, ReturnValue) == 0x000000, "Member 'RBWWWControlMenu_GetPlaybackInfoText::ReturnValue' has a wrong offset!");

// Function OPP.RBWWWControlMenu.GetPlaybackTime
// 0x0004 (0x0004 - 0x0000)
struct RBWWWControlMenu_GetPlaybackTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_GetPlaybackTime) == 0x000004, "Wrong alignment on RBWWWControlMenu_GetPlaybackTime");
static_assert(sizeof(RBWWWControlMenu_GetPlaybackTime) == 0x000004, "Wrong size on RBWWWControlMenu_GetPlaybackTime");
static_assert(offsetof(RBWWWControlMenu_GetPlaybackTime, ReturnValue) == 0x000000, "Member 'RBWWWControlMenu_GetPlaybackTime::ReturnValue' has a wrong offset!");

// Function OPP.RBWWWControlMenu.GetWWWPlaybackSpeed
// 0x0001 (0x0001 - 0x0000)
struct RBWWWControlMenu_GetWWWPlaybackSpeed final
{
public:
	EWWWPlaybackSpeed                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_GetWWWPlaybackSpeed) == 0x000001, "Wrong alignment on RBWWWControlMenu_GetWWWPlaybackSpeed");
static_assert(sizeof(RBWWWControlMenu_GetWWWPlaybackSpeed) == 0x000001, "Wrong size on RBWWWControlMenu_GetWWWPlaybackSpeed");
static_assert(offsetof(RBWWWControlMenu_GetWWWPlaybackSpeed, ReturnValue) == 0x000000, "Member 'RBWWWControlMenu_GetWWWPlaybackSpeed::ReturnValue' has a wrong offset!");

// Function OPP.RBWWWControlMenu.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct RBWWWControlMenu_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_IsPlaying) == 0x000001, "Wrong alignment on RBWWWControlMenu_IsPlaying");
static_assert(sizeof(RBWWWControlMenu_IsPlaying) == 0x000001, "Wrong size on RBWWWControlMenu_IsPlaying");
static_assert(offsetof(RBWWWControlMenu_IsPlaying, ReturnValue) == 0x000000, "Member 'RBWWWControlMenu_IsPlaying::ReturnValue' has a wrong offset!");

// Function OPP.RBWWWControlMenu.OnPlayControlButton
// 0x0002 (0x0002 - 0x0000)
struct RBWWWControlMenu_OnPlayControlButton final
{
public:
	bool                                          bForward;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWWWPlaybackSpeed                             PlaybackSpeed;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_OnPlayControlButton) == 0x000001, "Wrong alignment on RBWWWControlMenu_OnPlayControlButton");
static_assert(sizeof(RBWWWControlMenu_OnPlayControlButton) == 0x000002, "Wrong size on RBWWWControlMenu_OnPlayControlButton");
static_assert(offsetof(RBWWWControlMenu_OnPlayControlButton, bForward) == 0x000000, "Member 'RBWWWControlMenu_OnPlayControlButton::bForward' has a wrong offset!");
static_assert(offsetof(RBWWWControlMenu_OnPlayControlButton, PlaybackSpeed) == 0x000001, "Member 'RBWWWControlMenu_OnPlayControlButton::PlaybackSpeed' has a wrong offset!");

// Function OPP.RBWWWControlMenu.SetPlaybackTime
// 0x0004 (0x0004 - 0x0000)
struct RBWWWControlMenu_SetPlaybackTime final
{
public:
	float                                         PlaybackTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_SetPlaybackTime) == 0x000004, "Wrong alignment on RBWWWControlMenu_SetPlaybackTime");
static_assert(sizeof(RBWWWControlMenu_SetPlaybackTime) == 0x000004, "Wrong size on RBWWWControlMenu_SetPlaybackTime");
static_assert(offsetof(RBWWWControlMenu_SetPlaybackTime, PlaybackTime) == 0x000000, "Member 'RBWWWControlMenu_SetPlaybackTime::PlaybackTime' has a wrong offset!");

// Function OPP.RBWWWControlMenu.SetShowAIDirectorInfo
// 0x0001 (0x0001 - 0x0000)
struct RBWWWControlMenu_SetShowAIDirectorInfo final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_SetShowAIDirectorInfo) == 0x000001, "Wrong alignment on RBWWWControlMenu_SetShowAIDirectorInfo");
static_assert(sizeof(RBWWWControlMenu_SetShowAIDirectorInfo) == 0x000001, "Wrong size on RBWWWControlMenu_SetShowAIDirectorInfo");
static_assert(offsetof(RBWWWControlMenu_SetShowAIDirectorInfo, bShouldShow) == 0x000000, "Member 'RBWWWControlMenu_SetShowAIDirectorInfo::bShouldShow' has a wrong offset!");

// Function OPP.RBWWWControlMenu.SetShowGameEvents
// 0x0001 (0x0001 - 0x0000)
struct RBWWWControlMenu_SetShowGameEvents final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_SetShowGameEvents) == 0x000001, "Wrong alignment on RBWWWControlMenu_SetShowGameEvents");
static_assert(sizeof(RBWWWControlMenu_SetShowGameEvents) == 0x000001, "Wrong size on RBWWWControlMenu_SetShowGameEvents");
static_assert(offsetof(RBWWWControlMenu_SetShowGameEvents, bShouldShow) == 0x000000, "Member 'RBWWWControlMenu_SetShowGameEvents::bShouldShow' has a wrong offset!");

// Function OPP.RBWWWControlMenu.SetTrackDrawOptions
// 0x0002 (0x0002 - 0x0000)
struct RBWWWControlMenu_SetTrackDrawOptions final
{
public:
	EWWWTrackDrawSelection                        DrawSelection;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWWWTrackDrawLength                           DrawLength;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_SetTrackDrawOptions) == 0x000001, "Wrong alignment on RBWWWControlMenu_SetTrackDrawOptions");
static_assert(sizeof(RBWWWControlMenu_SetTrackDrawOptions) == 0x000002, "Wrong size on RBWWWControlMenu_SetTrackDrawOptions");
static_assert(offsetof(RBWWWControlMenu_SetTrackDrawOptions, DrawSelection) == 0x000000, "Member 'RBWWWControlMenu_SetTrackDrawOptions::DrawSelection' has a wrong offset!");
static_assert(offsetof(RBWWWControlMenu_SetTrackDrawOptions, DrawLength) == 0x000001, "Member 'RBWWWControlMenu_SetTrackDrawOptions::DrawLength' has a wrong offset!");

// Function OPP.RBWWWControlMenu.SetWWWPlaybackSpeed
// 0x0001 (0x0001 - 0x0000)
struct RBWWWControlMenu_SetWWWPlaybackSpeed final
{
public:
	EWWWPlaybackSpeed                             PlaybackSpeed;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_SetWWWPlaybackSpeed) == 0x000001, "Wrong alignment on RBWWWControlMenu_SetWWWPlaybackSpeed");
static_assert(sizeof(RBWWWControlMenu_SetWWWPlaybackSpeed) == 0x000001, "Wrong size on RBWWWControlMenu_SetWWWPlaybackSpeed");
static_assert(offsetof(RBWWWControlMenu_SetWWWPlaybackSpeed, PlaybackSpeed) == 0x000000, "Member 'RBWWWControlMenu_SetWWWPlaybackSpeed::PlaybackSpeed' has a wrong offset!");

// Function OPP.RBWWWControlMenu.ShouldShowAIDirectorInfo
// 0x0001 (0x0001 - 0x0000)
struct RBWWWControlMenu_ShouldShowAIDirectorInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_ShouldShowAIDirectorInfo) == 0x000001, "Wrong alignment on RBWWWControlMenu_ShouldShowAIDirectorInfo");
static_assert(sizeof(RBWWWControlMenu_ShouldShowAIDirectorInfo) == 0x000001, "Wrong size on RBWWWControlMenu_ShouldShowAIDirectorInfo");
static_assert(offsetof(RBWWWControlMenu_ShouldShowAIDirectorInfo, ReturnValue) == 0x000000, "Member 'RBWWWControlMenu_ShouldShowAIDirectorInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBWWWControlMenu.ShouldShowGameEvents
// 0x0001 (0x0001 - 0x0000)
struct RBWWWControlMenu_ShouldShowGameEvents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWWWControlMenu_ShouldShowGameEvents) == 0x000001, "Wrong alignment on RBWWWControlMenu_ShouldShowGameEvents");
static_assert(sizeof(RBWWWControlMenu_ShouldShowGameEvents) == 0x000001, "Wrong size on RBWWWControlMenu_ShouldShowGameEvents");
static_assert(offsetof(RBWWWControlMenu_ShouldShowGameEvents, ReturnValue) == 0x000000, "Member 'RBWWWControlMenu_ShouldShowGameEvents::ReturnValue' has a wrong offset!");

// Function OPP.RBDamageBoxComponent.ComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBDamageBoxComponent_ComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FE2[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageBoxComponent_ComponentBeginOverlap) == 0x000008, "Wrong alignment on RBDamageBoxComponent_ComponentBeginOverlap");
static_assert(sizeof(RBDamageBoxComponent_ComponentBeginOverlap) == 0x0000A8, "Wrong size on RBDamageBoxComponent_ComponentBeginOverlap");
static_assert(offsetof(RBDamageBoxComponent_ComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBDamageBoxComponent_ComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBDamageBoxComponent_ComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBDamageBoxComponent_ComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBDamageBoxComponent_ComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBDamageBoxComponent_ComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBDamageBoxComponent_ComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBDamageBoxComponent_ComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBDamageBoxComponent_ComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBDamageBoxComponent_ComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBDamageBoxComponent_ComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBDamageBoxComponent_ComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBDamageBoxComponent.IsDamageEnabledChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBDamageBoxComponent_IsDamageEnabledChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageBoxComponent_IsDamageEnabledChangedCallback) == 0x000001, "Wrong alignment on RBDamageBoxComponent_IsDamageEnabledChangedCallback");
static_assert(sizeof(RBDamageBoxComponent_IsDamageEnabledChangedCallback) == 0x000001, "Wrong size on RBDamageBoxComponent_IsDamageEnabledChangedCallback");
static_assert(offsetof(RBDamageBoxComponent_IsDamageEnabledChangedCallback, ChangedType) == 0x000000, "Member 'RBDamageBoxComponent_IsDamageEnabledChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBDamageBoxComponent.BP_GetHurtingPlayers
// 0x0010 (0x0010 - 0x0000)
struct RBDamageBoxComponent_BP_GetHurtingPlayers final
{
public:
	TArray<class ARBPlayer*>                      OutHurtingPlayers;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageBoxComponent_BP_GetHurtingPlayers) == 0x000008, "Wrong alignment on RBDamageBoxComponent_BP_GetHurtingPlayers");
static_assert(sizeof(RBDamageBoxComponent_BP_GetHurtingPlayers) == 0x000010, "Wrong size on RBDamageBoxComponent_BP_GetHurtingPlayers");
static_assert(offsetof(RBDamageBoxComponent_BP_GetHurtingPlayers, OutHurtingPlayers) == 0x000000, "Member 'RBDamageBoxComponent_BP_GetHurtingPlayers::OutHurtingPlayers' has a wrong offset!");

// Function OPP.RBDamageBoxComponent.IsDamageEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBDamageBoxComponent_IsDamageEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDamageBoxComponent_IsDamageEnabled) == 0x000001, "Wrong alignment on RBDamageBoxComponent_IsDamageEnabled");
static_assert(sizeof(RBDamageBoxComponent_IsDamageEnabled) == 0x000001, "Wrong size on RBDamageBoxComponent_IsDamageEnabled");
static_assert(offsetof(RBDamageBoxComponent_IsDamageEnabled, ReturnValue) == 0x000000, "Member 'RBDamageBoxComponent_IsDamageEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBPhysicsVolume.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBPhysicsVolume_BP_SetEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPhysicsVolume_BP_SetEnabled) == 0x000001, "Wrong alignment on RBPhysicsVolume_BP_SetEnabled");
static_assert(sizeof(RBPhysicsVolume_BP_SetEnabled) == 0x000001, "Wrong size on RBPhysicsVolume_BP_SetEnabled");
static_assert(offsetof(RBPhysicsVolume_BP_SetEnabled, bEnabledValue) == 0x000000, "Member 'RBPhysicsVolume_BP_SetEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBDarknessVolume.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBDarknessVolume_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FEB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDarknessVolume_BeginOverlap) == 0x000008, "Wrong alignment on RBDarknessVolume_BeginOverlap");
static_assert(sizeof(RBDarknessVolume_BeginOverlap) == 0x0000A8, "Wrong size on RBDarknessVolume_BeginOverlap");
static_assert(offsetof(RBDarknessVolume_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBDarknessVolume_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBDarknessVolume_BeginOverlap, OtherActor) == 0x000008, "Member 'RBDarknessVolume_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBDarknessVolume_BeginOverlap, OtherComp) == 0x000010, "Member 'RBDarknessVolume_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBDarknessVolume_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBDarknessVolume_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBDarknessVolume_BeginOverlap, bFromSweep) == 0x00001C, "Member 'RBDarknessVolume_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBDarknessVolume_BeginOverlap, SweepResult) == 0x000020, "Member 'RBDarknessVolume_BeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBDarknessVolume.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBDarknessVolume_BP_SetEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDarknessVolume_BP_SetEnabled) == 0x000001, "Wrong alignment on RBDarknessVolume_BP_SetEnabled");
static_assert(sizeof(RBDarknessVolume_BP_SetEnabled) == 0x000001, "Wrong size on RBDarknessVolume_BP_SetEnabled");
static_assert(offsetof(RBDarknessVolume_BP_SetEnabled, bEnabledValue) == 0x000000, "Member 'RBDarknessVolume_BP_SetEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBDarknessVolume.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBDarknessVolume_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FEC[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBDarknessVolume_EndOverlap) == 0x000008, "Wrong alignment on RBDarknessVolume_EndOverlap");
static_assert(sizeof(RBDarknessVolume_EndOverlap) == 0x000020, "Wrong size on RBDarknessVolume_EndOverlap");
static_assert(offsetof(RBDarknessVolume_EndOverlap, OverlappedComponent) == 0x000000, "Member 'RBDarknessVolume_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBDarknessVolume_EndOverlap, OtherActor) == 0x000008, "Member 'RBDarknessVolume_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBDarknessVolume_EndOverlap, OtherComp) == 0x000010, "Member 'RBDarknessVolume_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBDarknessVolume_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBDarknessVolume_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBDarknessVolume.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBDarknessVolume_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDarknessVolume_IsEnabled) == 0x000001, "Wrong alignment on RBDarknessVolume_IsEnabled");
static_assert(sizeof(RBDarknessVolume_IsEnabled) == 0x000001, "Wrong size on RBDarknessVolume_IsEnabled");
static_assert(offsetof(RBDarknessVolume_IsEnabled, ReturnValue) == 0x000000, "Member 'RBDarknessVolume_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBDeadBodySpawnLocationComponent.BP_GetCurrentDeadBodyAnimSequence
// 0x0008 (0x0008 - 0x0000)
struct RBDeadBodySpawnLocationComponent_BP_GetCurrentDeadBodyAnimSequence final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeadBodySpawnLocationComponent_BP_GetCurrentDeadBodyAnimSequence) == 0x000008, "Wrong alignment on RBDeadBodySpawnLocationComponent_BP_GetCurrentDeadBodyAnimSequence");
static_assert(sizeof(RBDeadBodySpawnLocationComponent_BP_GetCurrentDeadBodyAnimSequence) == 0x000008, "Wrong size on RBDeadBodySpawnLocationComponent_BP_GetCurrentDeadBodyAnimSequence");
static_assert(offsetof(RBDeadBodySpawnLocationComponent_BP_GetCurrentDeadBodyAnimSequence, ReturnValue) == 0x000000, "Member 'RBDeadBodySpawnLocationComponent_BP_GetCurrentDeadBodyAnimSequence::ReturnValue' has a wrong offset!");

// Function OPP.RBDeadBodySpawnLocationComponent.BP_IsPlayingJumpScareAnim
// 0x0001 (0x0001 - 0x0000)
struct RBDeadBodySpawnLocationComponent_BP_IsPlayingJumpScareAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeadBodySpawnLocationComponent_BP_IsPlayingJumpScareAnim) == 0x000001, "Wrong alignment on RBDeadBodySpawnLocationComponent_BP_IsPlayingJumpScareAnim");
static_assert(sizeof(RBDeadBodySpawnLocationComponent_BP_IsPlayingJumpScareAnim) == 0x000001, "Wrong size on RBDeadBodySpawnLocationComponent_BP_IsPlayingJumpScareAnim");
static_assert(offsetof(RBDeadBodySpawnLocationComponent_BP_IsPlayingJumpScareAnim, ReturnValue) == 0x000000, "Member 'RBDeadBodySpawnLocationComponent_BP_IsPlayingJumpScareAnim::ReturnValue' has a wrong offset!");

// Function OPP.RBDeadBodyContainer.Event_OnNotifyPlayRigSequence
// 0x0008 (0x0008 - 0x0000)
struct RBDeadBodyContainer_Event_OnNotifyPlayRigSequence final
{
public:
	class UAnimationAsset*                        AnimToPlay;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeadBodyContainer_Event_OnNotifyPlayRigSequence) == 0x000008, "Wrong alignment on RBDeadBodyContainer_Event_OnNotifyPlayRigSequence");
static_assert(sizeof(RBDeadBodyContainer_Event_OnNotifyPlayRigSequence) == 0x000008, "Wrong size on RBDeadBodyContainer_Event_OnNotifyPlayRigSequence");
static_assert(offsetof(RBDeadBodyContainer_Event_OnNotifyPlayRigSequence, AnimToPlay) == 0x000000, "Member 'RBDeadBodyContainer_Event_OnNotifyPlayRigSequence::AnimToPlay' has a wrong offset!");

// Function OPP.RBDeadBodyContainer.SetSkeletalMeshTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBDeadBodyContainer_SetSkeletalMeshTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeadBodyContainer_SetSkeletalMeshTickEnabled) == 0x000001, "Wrong alignment on RBDeadBodyContainer_SetSkeletalMeshTickEnabled");
static_assert(sizeof(RBDeadBodyContainer_SetSkeletalMeshTickEnabled) == 0x000001, "Wrong size on RBDeadBodyContainer_SetSkeletalMeshTickEnabled");
static_assert(offsetof(RBDeadBodyContainer_SetSkeletalMeshTickEnabled, bEnabled) == 0x000000, "Member 'RBDeadBodyContainer_SetSkeletalMeshTickEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBDeadRepulsionBoxComponent.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBDeadRepulsionBoxComponent_BP_SetEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeadRepulsionBoxComponent_BP_SetEnabled) == 0x000001, "Wrong alignment on RBDeadRepulsionBoxComponent_BP_SetEnabled");
static_assert(sizeof(RBDeadRepulsionBoxComponent_BP_SetEnabled) == 0x000001, "Wrong size on RBDeadRepulsionBoxComponent_BP_SetEnabled");
static_assert(offsetof(RBDeadRepulsionBoxComponent_BP_SetEnabled, bEnabledValue) == 0x000000, "Member 'RBDeadRepulsionBoxComponent_BP_SetEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBDeployableSkillItem.Deploy_Server
// 0x0040 (0x0040 - 0x0000)
struct RBDeployableSkillItem_Deploy_Server final
{
public:
	class ARBPlayer*                              Param_Deployer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FFB[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeployableSkillItem_Deploy_Server) == 0x000010, "Wrong alignment on RBDeployableSkillItem_Deploy_Server");
static_assert(sizeof(RBDeployableSkillItem_Deploy_Server) == 0x000040, "Wrong size on RBDeployableSkillItem_Deploy_Server");
static_assert(offsetof(RBDeployableSkillItem_Deploy_Server, Param_Deployer) == 0x000000, "Member 'RBDeployableSkillItem_Deploy_Server::Param_Deployer' has a wrong offset!");
static_assert(offsetof(RBDeployableSkillItem_Deploy_Server, Transform) == 0x000010, "Member 'RBDeployableSkillItem_Deploy_Server::Transform' has a wrong offset!");

// Function OPP.RBDeployableSkillItem.Multicast_OnDeploy
// 0x0040 (0x0040 - 0x0000)
struct RBDeployableSkillItem_Multicast_OnDeploy final
{
public:
	class ARBPlayer*                              Param_Deployer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FFC[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeployableSkillItem_Multicast_OnDeploy) == 0x000010, "Wrong alignment on RBDeployableSkillItem_Multicast_OnDeploy");
static_assert(sizeof(RBDeployableSkillItem_Multicast_OnDeploy) == 0x000040, "Wrong size on RBDeployableSkillItem_Multicast_OnDeploy");
static_assert(offsetof(RBDeployableSkillItem_Multicast_OnDeploy, Param_Deployer) == 0x000000, "Member 'RBDeployableSkillItem_Multicast_OnDeploy::Param_Deployer' has a wrong offset!");
static_assert(offsetof(RBDeployableSkillItem_Multicast_OnDeploy, Transform) == 0x000010, "Member 'RBDeployableSkillItem_Multicast_OnDeploy::Transform' has a wrong offset!");

// Function OPP.RBDeployableSkillItem.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBDeployableSkillItem_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FFD[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeployableSkillItem_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBDeployableSkillItem_OnComponentBeginOverlap");
static_assert(sizeof(RBDeployableSkillItem_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBDeployableSkillItem_OnComponentBeginOverlap");
static_assert(offsetof(RBDeployableSkillItem_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBDeployableSkillItem_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBDeployableSkillItem_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBDeployableSkillItem_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBDeployableSkillItem_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBDeployableSkillItem_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBDeployableSkillItem_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBDeployableSkillItem_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBDeployableSkillItem_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBDeployableSkillItem_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBDeployableSkillItem_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBDeployableSkillItem_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBDeployableSkillItem.GetImpactRadius
// 0x0004 (0x0004 - 0x0000)
struct RBDeployableSkillItem_GetImpactRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeployableSkillItem_GetImpactRadius) == 0x000004, "Wrong alignment on RBDeployableSkillItem_GetImpactRadius");
static_assert(sizeof(RBDeployableSkillItem_GetImpactRadius) == 0x000004, "Wrong size on RBDeployableSkillItem_GetImpactRadius");
static_assert(offsetof(RBDeployableSkillItem_GetImpactRadius, ReturnValue) == 0x000000, "Member 'RBDeployableSkillItem_GetImpactRadius::ReturnValue' has a wrong offset!");

// Function OPP.RBDeployableSkillItem.GetMinDeployTime
// 0x0004 (0x0004 - 0x0000)
struct RBDeployableSkillItem_GetMinDeployTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeployableSkillItem_GetMinDeployTime) == 0x000004, "Wrong alignment on RBDeployableSkillItem_GetMinDeployTime");
static_assert(sizeof(RBDeployableSkillItem_GetMinDeployTime) == 0x000004, "Wrong size on RBDeployableSkillItem_GetMinDeployTime");
static_assert(offsetof(RBDeployableSkillItem_GetMinDeployTime, ReturnValue) == 0x000000, "Member 'RBDeployableSkillItem_GetMinDeployTime::ReturnValue' has a wrong offset!");

// Function OPP.RBDeployableSkillItem.GetZoneDuration
// 0x0004 (0x0004 - 0x0000)
struct RBDeployableSkillItem_GetZoneDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDeployableSkillItem_GetZoneDuration) == 0x000004, "Wrong alignment on RBDeployableSkillItem_GetZoneDuration");
static_assert(sizeof(RBDeployableSkillItem_GetZoneDuration) == 0x000004, "Wrong size on RBDeployableSkillItem_GetZoneDuration");
static_assert(offsetof(RBDeployableSkillItem_GetZoneDuration, ReturnValue) == 0x000000, "Member 'RBDeployableSkillItem_GetZoneDuration::ReturnValue' has a wrong offset!");

// Function OPP.RBHittableActor.OnBreak
// 0x0008 (0x0008 - 0x0000)
struct RBHittableActor_OnBreak final
{
public:
	class URBDamageableComponent*                 DamageComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHittableActor_OnBreak) == 0x000008, "Wrong alignment on RBHittableActor_OnBreak");
static_assert(sizeof(RBHittableActor_OnBreak) == 0x000008, "Wrong size on RBHittableActor_OnBreak");
static_assert(offsetof(RBHittableActor_OnBreak, DamageComponent) == 0x000000, "Member 'RBHittableActor_OnBreak::DamageComponent' has a wrong offset!");

// Function OPP.RBHittableActor.OnDamaged
// 0x0010 (0x0010 - 0x0000)
struct RBHittableActor_OnDamaged final
{
public:
	class URBDamageableComponent*                 DamageComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDestroyed;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2003[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHittableActor_OnDamaged) == 0x000008, "Wrong alignment on RBHittableActor_OnDamaged");
static_assert(sizeof(RBHittableActor_OnDamaged) == 0x000010, "Wrong size on RBHittableActor_OnDamaged");
static_assert(offsetof(RBHittableActor_OnDamaged, DamageComponent) == 0x000000, "Member 'RBHittableActor_OnDamaged::DamageComponent' has a wrong offset!");
static_assert(offsetof(RBHittableActor_OnDamaged, bIsDestroyed) == 0x000008, "Member 'RBHittableActor_OnDamaged::bIsDestroyed' has a wrong offset!");

// Function OPP.RBDestructibleActor.BP_BreakInSphere
// 0x0024 (0x0024 - 0x0000)
struct RBDestructibleActor_BP_BreakInSphere final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERadialImpulseFalloff                         Falloff;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageSoundMaterial                          DamageSoundMaterial;                               // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayBreakSound;                                   // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_200B[0x1];                                     // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBDestructibleActor_BP_BreakInSphere) == 0x000004, "Wrong alignment on RBDestructibleActor_BP_BreakInSphere");
static_assert(sizeof(RBDestructibleActor_BP_BreakInSphere) == 0x000024, "Wrong size on RBDestructibleActor_BP_BreakInSphere");
static_assert(offsetof(RBDestructibleActor_BP_BreakInSphere, Origin) == 0x000000, "Member 'RBDestructibleActor_BP_BreakInSphere::Origin' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_BreakInSphere, Direction) == 0x00000C, "Member 'RBDestructibleActor_BP_BreakInSphere::Direction' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_BreakInSphere, Radius) == 0x000018, "Member 'RBDestructibleActor_BP_BreakInSphere::Radius' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_BreakInSphere, Strength) == 0x00001C, "Member 'RBDestructibleActor_BP_BreakInSphere::Strength' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_BreakInSphere, Falloff) == 0x000020, "Member 'RBDestructibleActor_BP_BreakInSphere::Falloff' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_BreakInSphere, DamageSoundMaterial) == 0x000021, "Member 'RBDestructibleActor_BP_BreakInSphere::DamageSoundMaterial' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_BreakInSphere, bPlayBreakSound) == 0x000022, "Member 'RBDestructibleActor_BP_BreakInSphere::bPlayBreakSound' has a wrong offset!");

// Function OPP.RBDestructibleActor.BP_DisplaceInSphere
// 0x0024 (0x0024 - 0x0000)
struct RBDestructibleActor_BP_DisplaceInSphere final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERadialImpulseFalloff                         Falloff;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageSoundMaterial                          DamageSoundMaterial;                               // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_200C[0x2];                                     // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBDestructibleActor_BP_DisplaceInSphere) == 0x000004, "Wrong alignment on RBDestructibleActor_BP_DisplaceInSphere");
static_assert(sizeof(RBDestructibleActor_BP_DisplaceInSphere) == 0x000024, "Wrong size on RBDestructibleActor_BP_DisplaceInSphere");
static_assert(offsetof(RBDestructibleActor_BP_DisplaceInSphere, Origin) == 0x000000, "Member 'RBDestructibleActor_BP_DisplaceInSphere::Origin' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_DisplaceInSphere, Direction) == 0x00000C, "Member 'RBDestructibleActor_BP_DisplaceInSphere::Direction' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_DisplaceInSphere, Radius) == 0x000018, "Member 'RBDestructibleActor_BP_DisplaceInSphere::Radius' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_DisplaceInSphere, Strength) == 0x00001C, "Member 'RBDestructibleActor_BP_DisplaceInSphere::Strength' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_DisplaceInSphere, Falloff) == 0x000020, "Member 'RBDestructibleActor_BP_DisplaceInSphere::Falloff' has a wrong offset!");
static_assert(offsetof(RBDestructibleActor_BP_DisplaceInSphere, DamageSoundMaterial) == 0x000021, "Member 'RBDestructibleActor_BP_DisplaceInSphere::DamageSoundMaterial' has a wrong offset!");

// Function OPP.RBDestructibleComponent.BP_BreakBones
// 0x0020 (0x0020 - 0x0000)
struct RBDestructibleComponent_BP_BreakBones final
{
public:
	TArray<class FName>                           BoneNames;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDestructibleComponent_BP_BreakBones) == 0x000008, "Wrong alignment on RBDestructibleComponent_BP_BreakBones");
static_assert(sizeof(RBDestructibleComponent_BP_BreakBones) == 0x000020, "Wrong size on RBDestructibleComponent_BP_BreakBones");
static_assert(offsetof(RBDestructibleComponent_BP_BreakBones, BoneNames) == 0x000000, "Member 'RBDestructibleComponent_BP_BreakBones::BoneNames' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakBones, Direction) == 0x000010, "Member 'RBDestructibleComponent_BP_BreakBones::Direction' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakBones, Strength) == 0x00001C, "Member 'RBDestructibleComponent_BP_BreakBones::Strength' has a wrong offset!");

// Function OPP.RBDestructibleComponent.BP_BreakInSphere
// 0x0024 (0x0024 - 0x0000)
struct RBDestructibleComponent_BP_BreakInSphere final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERadialImpulseFalloff                         Falloff;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2012[0x3];                                     // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBDestructibleComponent_BP_BreakInSphere) == 0x000004, "Wrong alignment on RBDestructibleComponent_BP_BreakInSphere");
static_assert(sizeof(RBDestructibleComponent_BP_BreakInSphere) == 0x000024, "Wrong size on RBDestructibleComponent_BP_BreakInSphere");
static_assert(offsetof(RBDestructibleComponent_BP_BreakInSphere, Origin) == 0x000000, "Member 'RBDestructibleComponent_BP_BreakInSphere::Origin' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakInSphere, Direction) == 0x00000C, "Member 'RBDestructibleComponent_BP_BreakInSphere::Direction' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakInSphere, Radius) == 0x000018, "Member 'RBDestructibleComponent_BP_BreakInSphere::Radius' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakInSphere, Strength) == 0x00001C, "Member 'RBDestructibleComponent_BP_BreakInSphere::Strength' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakInSphere, Falloff) == 0x000020, "Member 'RBDestructibleComponent_BP_BreakInSphere::Falloff' has a wrong offset!");

// Function OPP.RBDestructibleComponent.BP_BreakNearBone
// 0x0020 (0x0020 - 0x0000)
struct RBDestructibleComponent_BP_BreakNearBone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERadialImpulseFalloff                         Falloff;                                           // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2013[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBDestructibleComponent_BP_BreakNearBone) == 0x000004, "Wrong alignment on RBDestructibleComponent_BP_BreakNearBone");
static_assert(sizeof(RBDestructibleComponent_BP_BreakNearBone) == 0x000020, "Wrong size on RBDestructibleComponent_BP_BreakNearBone");
static_assert(offsetof(RBDestructibleComponent_BP_BreakNearBone, BoneName) == 0x000000, "Member 'RBDestructibleComponent_BP_BreakNearBone::BoneName' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakNearBone, Direction) == 0x000008, "Member 'RBDestructibleComponent_BP_BreakNearBone::Direction' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakNearBone, Radius) == 0x000014, "Member 'RBDestructibleComponent_BP_BreakNearBone::Radius' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakNearBone, Strength) == 0x000018, "Member 'RBDestructibleComponent_BP_BreakNearBone::Strength' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_BreakNearBone, Falloff) == 0x00001C, "Member 'RBDestructibleComponent_BP_BreakNearBone::Falloff' has a wrong offset!");

// Function OPP.RBDestructibleComponent.BP_Displacement
// 0x0024 (0x0024 - 0x0000)
struct RBDestructibleComponent_BP_Displacement final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERadialImpulseFalloff                         Falloff;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2014[0x3];                                     // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBDestructibleComponent_BP_Displacement) == 0x000004, "Wrong alignment on RBDestructibleComponent_BP_Displacement");
static_assert(sizeof(RBDestructibleComponent_BP_Displacement) == 0x000024, "Wrong size on RBDestructibleComponent_BP_Displacement");
static_assert(offsetof(RBDestructibleComponent_BP_Displacement, Origin) == 0x000000, "Member 'RBDestructibleComponent_BP_Displacement::Origin' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_Displacement, Direction) == 0x00000C, "Member 'RBDestructibleComponent_BP_Displacement::Direction' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_Displacement, Radius) == 0x000018, "Member 'RBDestructibleComponent_BP_Displacement::Radius' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_Displacement, Strength) == 0x00001C, "Member 'RBDestructibleComponent_BP_Displacement::Strength' has a wrong offset!");
static_assert(offsetof(RBDestructibleComponent_BP_Displacement, Falloff) == 0x000020, "Member 'RBDestructibleComponent_BP_Displacement::Falloff' has a wrong offset!");

// Function OPP.RBDestructibleComponent.OnNumberOfHitsChanged
// 0x0001 (0x0001 - 0x0000)
struct RBDestructibleComponent_OnNumberOfHitsChanged final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDestructibleComponent_OnNumberOfHitsChanged) == 0x000001, "Wrong alignment on RBDestructibleComponent_OnNumberOfHitsChanged");
static_assert(sizeof(RBDestructibleComponent_OnNumberOfHitsChanged) == 0x000001, "Wrong size on RBDestructibleComponent_OnNumberOfHitsChanged");
static_assert(offsetof(RBDestructibleComponent_OnNumberOfHitsChanged, ChangedType) == 0x000000, "Member 'RBDestructibleComponent_OnNumberOfHitsChanged::ChangedType' has a wrong offset!");

// Function OPP.RBDestructibleComponent.WakeComponent
// 0x0001 (0x0001 - 0x0000)
struct RBDestructibleComponent_WakeComponent final
{
public:
	bool                                          bOneFrame;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDestructibleComponent_WakeComponent) == 0x000001, "Wrong alignment on RBDestructibleComponent_WakeComponent");
static_assert(sizeof(RBDestructibleComponent_WakeComponent) == 0x000001, "Wrong size on RBDestructibleComponent_WakeComponent");
static_assert(offsetof(RBDestructibleComponent_WakeComponent, bOneFrame) == 0x000000, "Member 'RBDestructibleComponent_WakeComponent::bOneFrame' has a wrong offset!");

// Function OPP.RBGhostAnimInstance.FinishGhost
// 0x000C (0x000C - 0x0000)
struct RBGhostAnimInstance_FinishGhost final
{
public:
	EGhostFinishReason                            FinishReason;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GhostFinishCustomReason;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201C[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGhostAnimInstance_FinishGhost) == 0x000004, "Wrong alignment on RBGhostAnimInstance_FinishGhost");
static_assert(sizeof(RBGhostAnimInstance_FinishGhost) == 0x00000C, "Wrong size on RBGhostAnimInstance_FinishGhost");
static_assert(offsetof(RBGhostAnimInstance_FinishGhost, FinishReason) == 0x000000, "Member 'RBGhostAnimInstance_FinishGhost::FinishReason' has a wrong offset!");
static_assert(offsetof(RBGhostAnimInstance_FinishGhost, GhostFinishCustomReason) == 0x000004, "Member 'RBGhostAnimInstance_FinishGhost::GhostFinishCustomReason' has a wrong offset!");
static_assert(offsetof(RBGhostAnimInstance_FinishGhost, ReturnValue) == 0x000008, "Member 'RBGhostAnimInstance_FinishGhost::ReturnValue' has a wrong offset!");

// Function OPP.RBGhostAnimInstance.GetInteractableActor
// 0x0008 (0x0008 - 0x0000)
struct RBGhostAnimInstance_GetInteractableActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGhostAnimInstance_GetInteractableActor) == 0x000008, "Wrong alignment on RBGhostAnimInstance_GetInteractableActor");
static_assert(sizeof(RBGhostAnimInstance_GetInteractableActor) == 0x000008, "Wrong size on RBGhostAnimInstance_GetInteractableActor");
static_assert(offsetof(RBGhostAnimInstance_GetInteractableActor, ReturnValue) == 0x000000, "Member 'RBGhostAnimInstance_GetInteractableActor::ReturnValue' has a wrong offset!");

// Function OPP.RBGhostAnimInstance.OnGhostAnimNotify
// 0x000C (0x000C - 0x0000)
struct RBGhostAnimInstance_OnGhostAnimNotify final
{
public:
	EGhostAnimEvent                               AnimEvent;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AnimEventName;                                     // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGhostAnimInstance_OnGhostAnimNotify) == 0x000004, "Wrong alignment on RBGhostAnimInstance_OnGhostAnimNotify");
static_assert(sizeof(RBGhostAnimInstance_OnGhostAnimNotify) == 0x00000C, "Wrong size on RBGhostAnimInstance_OnGhostAnimNotify");
static_assert(offsetof(RBGhostAnimInstance_OnGhostAnimNotify, AnimEvent) == 0x000000, "Member 'RBGhostAnimInstance_OnGhostAnimNotify::AnimEvent' has a wrong offset!");
static_assert(offsetof(RBGhostAnimInstance_OnGhostAnimNotify, AnimEventName) == 0x000004, "Member 'RBGhostAnimInstance_OnGhostAnimNotify::AnimEventName' has a wrong offset!");

// Function OPP.RBDestructibleWall.SetActive
// 0x0001 (0x0001 - 0x0000)
struct RBDestructibleWall_SetActive final
{
public:
	bool                                          bNewActiveValue;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDestructibleWall_SetActive) == 0x000001, "Wrong alignment on RBDestructibleWall_SetActive");
static_assert(sizeof(RBDestructibleWall_SetActive) == 0x000001, "Wrong size on RBDestructibleWall_SetActive");
static_assert(offsetof(RBDestructibleWall_SetActive, bNewActiveValue) == 0x000000, "Member 'RBDestructibleWall_SetActive::bNewActiveValue' has a wrong offset!");

// Function OPP.RBRadialMenuBase.OnAddToSimulatedMouseLocation
// 0x0008 (0x0008 - 0x0000)
struct RBRadialMenuBase_OnAddToSimulatedMouseLocation final
{
public:
	struct FVector2D                              Amount;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRadialMenuBase_OnAddToSimulatedMouseLocation) == 0x000004, "Wrong alignment on RBRadialMenuBase_OnAddToSimulatedMouseLocation");
static_assert(sizeof(RBRadialMenuBase_OnAddToSimulatedMouseLocation) == 0x000008, "Wrong size on RBRadialMenuBase_OnAddToSimulatedMouseLocation");
static_assert(offsetof(RBRadialMenuBase_OnAddToSimulatedMouseLocation, Amount) == 0x000000, "Member 'RBRadialMenuBase_OnAddToSimulatedMouseLocation::Amount' has a wrong offset!");

// Function OPP.RBDisplayMessageZoneComponent.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBDisplayMessageZoneComponent_BP_SetEnabled final
{
public:
	bool                                          bInteractible;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDisplayMessageZoneComponent_BP_SetEnabled) == 0x000001, "Wrong alignment on RBDisplayMessageZoneComponent_BP_SetEnabled");
static_assert(sizeof(RBDisplayMessageZoneComponent_BP_SetEnabled) == 0x000001, "Wrong size on RBDisplayMessageZoneComponent_BP_SetEnabled");
static_assert(offsetof(RBDisplayMessageZoneComponent_BP_SetEnabled, bInteractible) == 0x000000, "Member 'RBDisplayMessageZoneComponent_BP_SetEnabled::bInteractible' has a wrong offset!");

// Function OPP.RBDisplayMessageZoneComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBDisplayMessageZoneComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDisplayMessageZoneComponent_IsEnabled) == 0x000001, "Wrong alignment on RBDisplayMessageZoneComponent_IsEnabled");
static_assert(sizeof(RBDisplayMessageZoneComponent_IsEnabled) == 0x000001, "Wrong size on RBDisplayMessageZoneComponent_IsEnabled");
static_assert(offsetof(RBDisplayMessageZoneComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'RBDisplayMessageZoneComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBDoorReplaceClass.OnReplacedDoor
// 0x0008 (0x0008 - 0x0000)
struct RBDoorReplaceClass_OnReplacedDoor final
{
public:
	class ARBDoor*                                Door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDoorReplaceClass_OnReplacedDoor) == 0x000008, "Wrong alignment on RBDoorReplaceClass_OnReplacedDoor");
static_assert(sizeof(RBDoorReplaceClass_OnReplacedDoor) == 0x000008, "Wrong size on RBDoorReplaceClass_OnReplacedDoor");
static_assert(offsetof(RBDoorReplaceClass_OnReplacedDoor, Door) == 0x000000, "Member 'RBDoorReplaceClass_OnReplacedDoor::Door' has a wrong offset!");

// Function OPP.RBDressablePipe.ApplyMaterial
// 0x0008 (0x0008 - 0x0000)
struct RBDressablePipe_ApplyMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDressablePipe_ApplyMaterial) == 0x000008, "Wrong alignment on RBDressablePipe_ApplyMaterial");
static_assert(sizeof(RBDressablePipe_ApplyMaterial) == 0x000008, "Wrong size on RBDressablePipe_ApplyMaterial");
static_assert(offsetof(RBDressablePipe_ApplyMaterial, Material) == 0x000000, "Member 'RBDressablePipe_ApplyMaterial::Material' has a wrong offset!");

// Function OPP.RBDynamicObstacle.IsActivatedChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBDynamicObstacle_IsActivatedChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBDynamicObstacle_IsActivatedChangedCallback) == 0x000001, "Wrong alignment on RBDynamicObstacle_IsActivatedChangedCallback");
static_assert(sizeof(RBDynamicObstacle_IsActivatedChangedCallback) == 0x000001, "Wrong size on RBDynamicObstacle_IsActivatedChangedCallback");
static_assert(offsetof(RBDynamicObstacle_IsActivatedChangedCallback, ChangedType) == 0x000000, "Member 'RBDynamicObstacle_IsActivatedChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBGlobalUIConfig.GetRandomRewardPoolDisplayDetails
// 0x0038 (0x0038 - 0x0000)
struct RBGlobalUIConfig_GetRandomRewardPoolDisplayDetails final
{
public:
	class FName                                   RandomRewardPoolId;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRandomRewardPoolDisplayDetails        ReturnValue;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGlobalUIConfig_GetRandomRewardPoolDisplayDetails) == 0x000008, "Wrong alignment on RBGlobalUIConfig_GetRandomRewardPoolDisplayDetails");
static_assert(sizeof(RBGlobalUIConfig_GetRandomRewardPoolDisplayDetails) == 0x000038, "Wrong size on RBGlobalUIConfig_GetRandomRewardPoolDisplayDetails");
static_assert(offsetof(RBGlobalUIConfig_GetRandomRewardPoolDisplayDetails, RandomRewardPoolId) == 0x000000, "Member 'RBGlobalUIConfig_GetRandomRewardPoolDisplayDetails::RandomRewardPoolId' has a wrong offset!");
static_assert(offsetof(RBGlobalUIConfig_GetRandomRewardPoolDisplayDetails, ReturnValue) == 0x000008, "Member 'RBGlobalUIConfig_GetRandomRewardPoolDisplayDetails::ReturnValue' has a wrong offset!");

// Function OPP.RBGlobalUIConfig.GetNPCSettings
// 0x0090 (0x0090 - 0x0000)
struct RBGlobalUIConfig_GetNPCSettings final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2035[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMetaNPCSettings                       ReturnValue;                                       // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGlobalUIConfig_GetNPCSettings) == 0x000008, "Wrong alignment on RBGlobalUIConfig_GetNPCSettings");
static_assert(sizeof(RBGlobalUIConfig_GetNPCSettings) == 0x000090, "Wrong size on RBGlobalUIConfig_GetNPCSettings");
static_assert(offsetof(RBGlobalUIConfig_GetNPCSettings, NPCType) == 0x000000, "Member 'RBGlobalUIConfig_GetNPCSettings::NPCType' has a wrong offset!");
static_assert(offsetof(RBGlobalUIConfig_GetNPCSettings, ReturnValue) == 0x000008, "Member 'RBGlobalUIConfig_GetNPCSettings::ReturnValue' has a wrong offset!");

// Function OPP.RBEditorClearanceCollisionBoxComponent.Editor_SetSettingFromCustomLocation
// 0x0010 (0x0010 - 0x0000)
struct RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromCustomLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalCapsuleGroundOffset;                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromCustomLocation) == 0x000004, "Wrong alignment on RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromCustomLocation");
static_assert(sizeof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromCustomLocation) == 0x000010, "Wrong size on RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromCustomLocation");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromCustomLocation, Location) == 0x000000, "Member 'RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromCustomLocation::Location' has a wrong offset!");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromCustomLocation, FinalCapsuleGroundOffset) == 0x00000C, "Member 'RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromCustomLocation::FinalCapsuleGroundOffset' has a wrong offset!");

// Function OPP.RBEditorClearanceCollisionBoxComponent.Editor_SetSettingFromPlayerInteraction
// 0x0010 (0x0010 - 0x0000)
struct RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction final
{
public:
	class UObject*                                Interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2039[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FinalCapsuleGroundOffset;                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction) == 0x000008, "Wrong alignment on RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction");
static_assert(sizeof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction) == 0x000010, "Wrong size on RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction, Interactable) == 0x000000, "Member 'RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction::Interactable' has a wrong offset!");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction, SpecialMove) == 0x000008, "Member 'RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction::SpecialMove' has a wrong offset!");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction, FinalCapsuleGroundOffset) == 0x00000C, "Member 'RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerInteraction::FinalCapsuleGroundOffset' has a wrong offset!");

// Function OPP.RBEditorClearanceCollisionBoxComponent.Editor_SetSettingFromPlayerLocation
// 0x0004 (0x0004 - 0x0000)
struct RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerLocation final
{
public:
	float                                         FinalCapsuleGroundOffset;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerLocation) == 0x000004, "Wrong alignment on RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerLocation");
static_assert(sizeof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerLocation) == 0x000004, "Wrong size on RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerLocation");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerLocation, FinalCapsuleGroundOffset) == 0x000000, "Member 'RBEditorClearanceCollisionBoxComponent_Editor_SetSettingFromPlayerLocation::FinalCapsuleGroundOffset' has a wrong offset!");

// Function OPP.RBEditorClearanceCollisionBoxComponent.GetClearanceBottomLocation
// 0x000C (0x000C - 0x0000)
struct RBEditorClearanceCollisionBoxComponent_GetClearanceBottomLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEditorClearanceCollisionBoxComponent_GetClearanceBottomLocation) == 0x000004, "Wrong alignment on RBEditorClearanceCollisionBoxComponent_GetClearanceBottomLocation");
static_assert(sizeof(RBEditorClearanceCollisionBoxComponent_GetClearanceBottomLocation) == 0x00000C, "Wrong size on RBEditorClearanceCollisionBoxComponent_GetClearanceBottomLocation");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_GetClearanceBottomLocation, ReturnValue) == 0x000000, "Member 'RBEditorClearanceCollisionBoxComponent_GetClearanceBottomLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBEditorClearanceCollisionBoxComponent.GetClearancePlayerLocation
// 0x0018 (0x0018 - 0x0000)
struct RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation final
{
public:
	const class ARBPawn*                          Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203A[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation) == 0x000008, "Wrong alignment on RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation");
static_assert(sizeof(RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation) == 0x000018, "Wrong size on RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation, Pawn) == 0x000000, "Member 'RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation::Pawn' has a wrong offset!");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation, OutLocation) == 0x000008, "Member 'RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation, ReturnValue) == 0x000014, "Member 'RBEditorClearanceCollisionBoxComponent_GetClearancePlayerLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBEditorMapCheckable.BP_MapCheck
// 0x0020 (0x0020 - 0x0000)
struct RBEditorMapCheckable_BP_MapCheck final
{
public:
	EMapCheckType                                 CheckType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutErrorMsg;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203C[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBEditorMapCheckable_BP_MapCheck) == 0x000008, "Wrong alignment on RBEditorMapCheckable_BP_MapCheck");
static_assert(sizeof(RBEditorMapCheckable_BP_MapCheck) == 0x000020, "Wrong size on RBEditorMapCheckable_BP_MapCheck");
static_assert(offsetof(RBEditorMapCheckable_BP_MapCheck, CheckType) == 0x000000, "Member 'RBEditorMapCheckable_BP_MapCheck::CheckType' has a wrong offset!");
static_assert(offsetof(RBEditorMapCheckable_BP_MapCheck, OutErrorMsg) == 0x000008, "Member 'RBEditorMapCheckable_BP_MapCheck::OutErrorMsg' has a wrong offset!");
static_assert(offsetof(RBEditorMapCheckable_BP_MapCheck, ReturnValue) == 0x000018, "Member 'RBEditorMapCheckable_BP_MapCheck::ReturnValue' has a wrong offset!");

// Function OPP.RBLargeInteractObjectiveCoordinator.OnInteractibleAddedToWorld
// 0x0008 (0x0008 - 0x0000)
struct RBLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld final
{
public:
	class ARBInteractible*                        Interactible;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong alignment on RBLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld");
static_assert(sizeof(RBLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong size on RBLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld, Interactible) == 0x000000, "Member 'RBLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld::Interactible' has a wrong offset!");

// Function OPP.RBLargeInteractObjectiveCoordinator.OnLargeObjectInteractionDoAction
// 0x0018 (0x0018 - 0x0000)
struct RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction final
{
public:
	class URBLargeObjectInteractionPanelComponent* LargeObjectPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Interactor;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction) == 0x000008, "Wrong alignment on RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction");
static_assert(sizeof(RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction) == 0x000018, "Wrong size on RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction, LargeObjectPanel) == 0x000000, "Member 'RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction::LargeObjectPanel' has a wrong offset!");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction, LargePickup) == 0x000008, "Member 'RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction::LargePickup' has a wrong offset!");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction, Interactor) == 0x000010, "Member 'RBLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction::Interactor' has a wrong offset!");

// Function OPP.RBLargeInteractObjectiveCoordinator.OnLargePickupUsedOnObject
// 0x0018 (0x0018 - 0x0000)
struct RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBLargeObjectInteractionPanelComponent* Interactible;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject) == 0x000008, "Wrong alignment on RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject");
static_assert(sizeof(RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject) == 0x000018, "Wrong size on RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject, Interactor) == 0x000000, "Member 'RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject::Interactor' has a wrong offset!");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject, LargePickup) == 0x000008, "Member 'RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject::LargePickup' has a wrong offset!");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject, Interactible) == 0x000010, "Member 'RBLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject::Interactible' has a wrong offset!");

// Function OPP.RBLargeInteractObjectiveCoordinator.OnPickupHolderChanged
// 0x0010 (0x0010 - 0x0000)
struct RBLargeInteractObjectiveCoordinator_OnPickupHolderChanged final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeInteractObjectiveCoordinator_OnPickupHolderChanged) == 0x000008, "Wrong alignment on RBLargeInteractObjectiveCoordinator_OnPickupHolderChanged");
static_assert(sizeof(RBLargeInteractObjectiveCoordinator_OnPickupHolderChanged) == 0x000010, "Wrong size on RBLargeInteractObjectiveCoordinator_OnPickupHolderChanged");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_OnPickupHolderChanged, Player) == 0x000000, "Member 'RBLargeInteractObjectiveCoordinator_OnPickupHolderChanged::Player' has a wrong offset!");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_OnPickupHolderChanged, LargePickup) == 0x000008, "Member 'RBLargeInteractObjectiveCoordinator_OnPickupHolderChanged::LargePickup' has a wrong offset!");

// Function OPP.RBLargeInteractObjectiveCoordinator.GetAvailableLargePickups
// 0x0010 (0x0010 - 0x0000)
struct RBLargeInteractObjectiveCoordinator_GetAvailableLargePickups final
{
public:
	TArray<class ARBLargePickup*>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLargeInteractObjectiveCoordinator_GetAvailableLargePickups) == 0x000008, "Wrong alignment on RBLargeInteractObjectiveCoordinator_GetAvailableLargePickups");
static_assert(sizeof(RBLargeInteractObjectiveCoordinator_GetAvailableLargePickups) == 0x000010, "Wrong size on RBLargeInteractObjectiveCoordinator_GetAvailableLargePickups");
static_assert(offsetof(RBLargeInteractObjectiveCoordinator_GetAvailableLargePickups, ReturnValue) == 0x000000, "Member 'RBLargeInteractObjectiveCoordinator_GetAvailableLargePickups::ReturnValue' has a wrong offset!");

// Function OPP.RBGeneratorObjectiveCoordinator.OnGeneratorCompletedStateChanged
// 0x0008 (0x0008 - 0x0000)
struct RBGeneratorObjectiveCoordinator_OnGeneratorCompletedStateChanged final
{
public:
	class ARBGeneratorMultiObjectiveActor*        Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGeneratorObjectiveCoordinator_OnGeneratorCompletedStateChanged) == 0x000008, "Wrong alignment on RBGeneratorObjectiveCoordinator_OnGeneratorCompletedStateChanged");
static_assert(sizeof(RBGeneratorObjectiveCoordinator_OnGeneratorCompletedStateChanged) == 0x000008, "Wrong size on RBGeneratorObjectiveCoordinator_OnGeneratorCompletedStateChanged");
static_assert(offsetof(RBGeneratorObjectiveCoordinator_OnGeneratorCompletedStateChanged, Generator) == 0x000000, "Member 'RBGeneratorObjectiveCoordinator_OnGeneratorCompletedStateChanged::Generator' has a wrong offset!");

// Function OPP.RBGeneratorObjectiveCoordinator.AreAllGeneratorFueled
// 0x0001 (0x0001 - 0x0000)
struct RBGeneratorObjectiveCoordinator_AreAllGeneratorFueled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGeneratorObjectiveCoordinator_AreAllGeneratorFueled) == 0x000001, "Wrong alignment on RBGeneratorObjectiveCoordinator_AreAllGeneratorFueled");
static_assert(sizeof(RBGeneratorObjectiveCoordinator_AreAllGeneratorFueled) == 0x000001, "Wrong size on RBGeneratorObjectiveCoordinator_AreAllGeneratorFueled");
static_assert(offsetof(RBGeneratorObjectiveCoordinator_AreAllGeneratorFueled, ReturnValue) == 0x000000, "Member 'RBGeneratorObjectiveCoordinator_AreAllGeneratorFueled::ReturnValue' has a wrong offset!");

// Function OPP.RBEditorUtilityInterface.FixUp
// 0x0001 (0x0001 - 0x0000)
struct RBEditorUtilityInterface_FixUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEditorUtilityInterface_FixUp) == 0x000001, "Wrong alignment on RBEditorUtilityInterface_FixUp");
static_assert(sizeof(RBEditorUtilityInterface_FixUp) == 0x000001, "Wrong size on RBEditorUtilityInterface_FixUp");
static_assert(offsetof(RBEditorUtilityInterface_FixUp, ReturnValue) == 0x000000, "Member 'RBEditorUtilityInterface_FixUp::ReturnValue' has a wrong offset!");

// Function OPP.RBEditorUtilityInterface.OnPostActorsPasted
// 0x0010 (0x0010 - 0x0000)
struct RBEditorUtilityInterface_OnPostActorsPasted final
{
public:
	TArray<class AActor*>                         PastedActors;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEditorUtilityInterface_OnPostActorsPasted) == 0x000008, "Wrong alignment on RBEditorUtilityInterface_OnPostActorsPasted");
static_assert(sizeof(RBEditorUtilityInterface_OnPostActorsPasted) == 0x000010, "Wrong size on RBEditorUtilityInterface_OnPostActorsPasted");
static_assert(offsetof(RBEditorUtilityInterface_OnPostActorsPasted, PastedActors) == 0x000000, "Member 'RBEditorUtilityInterface_OnPostActorsPasted::PastedActors' has a wrong offset!");

// Function OPP.RBEditorUtilityInterface.PostDuplicated
// 0x0008 (0x0008 - 0x0000)
struct RBEditorUtilityInterface_PostDuplicated final
{
public:
	class AActor*                                 DuplicationParent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEditorUtilityInterface_PostDuplicated) == 0x000008, "Wrong alignment on RBEditorUtilityInterface_PostDuplicated");
static_assert(sizeof(RBEditorUtilityInterface_PostDuplicated) == 0x000008, "Wrong size on RBEditorUtilityInterface_PostDuplicated");
static_assert(offsetof(RBEditorUtilityInterface_PostDuplicated, DuplicationParent) == 0x000000, "Member 'RBEditorUtilityInterface_PostDuplicated::DuplicationParent' has a wrong offset!");

// Function OPP.RBEditorUtilityInterface.PostEditChange
// 0x0008 (0x0008 - 0x0000)
struct RBEditorUtilityInterface_PostEditChange final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEditorUtilityInterface_PostEditChange) == 0x000004, "Wrong alignment on RBEditorUtilityInterface_PostEditChange");
static_assert(sizeof(RBEditorUtilityInterface_PostEditChange) == 0x000008, "Wrong size on RBEditorUtilityInterface_PostEditChange");
static_assert(offsetof(RBEditorUtilityInterface_PostEditChange, PropertyName) == 0x000000, "Member 'RBEditorUtilityInterface_PostEditChange::PropertyName' has a wrong offset!");

// Function OPP.RBEditorUtilityInterface.PostEditMove
// 0x0001 (0x0001 - 0x0000)
struct RBEditorUtilityInterface_PostEditMove final
{
public:
	bool                                          bFinished;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEditorUtilityInterface_PostEditMove) == 0x000001, "Wrong alignment on RBEditorUtilityInterface_PostEditMove");
static_assert(sizeof(RBEditorUtilityInterface_PostEditMove) == 0x000001, "Wrong size on RBEditorUtilityInterface_PostEditMove");
static_assert(offsetof(RBEditorUtilityInterface_PostEditMove, bFinished) == 0x000000, "Member 'RBEditorUtilityInterface_PostEditMove::bFinished' has a wrong offset!");

// Function OPP.RBElectricFloorTrapComponent.ElectricFloorTrapStateChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBElectricFloorTrapComponent_ElectricFloorTrapStateChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectricFloorTrapComponent_ElectricFloorTrapStateChangedCallback) == 0x000001, "Wrong alignment on RBElectricFloorTrapComponent_ElectricFloorTrapStateChangedCallback");
static_assert(sizeof(RBElectricFloorTrapComponent_ElectricFloorTrapStateChangedCallback) == 0x000001, "Wrong size on RBElectricFloorTrapComponent_ElectricFloorTrapStateChangedCallback");
static_assert(offsetof(RBElectricFloorTrapComponent_ElectricFloorTrapStateChangedCallback, ChangedType) == 0x000000, "Member 'RBElectricFloorTrapComponent_ElectricFloorTrapStateChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBElectricFloorTrapComponent.OnNPCBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBElectricFloorTrapComponent_OnNPCBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2044[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectricFloorTrapComponent_OnNPCBeginOverlap) == 0x000008, "Wrong alignment on RBElectricFloorTrapComponent_OnNPCBeginOverlap");
static_assert(sizeof(RBElectricFloorTrapComponent_OnNPCBeginOverlap) == 0x0000A8, "Wrong size on RBElectricFloorTrapComponent_OnNPCBeginOverlap");
static_assert(offsetof(RBElectricFloorTrapComponent_OnNPCBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBElectricFloorTrapComponent_OnNPCBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBElectricFloorTrapComponent_OnNPCBeginOverlap, OtherActor) == 0x000008, "Member 'RBElectricFloorTrapComponent_OnNPCBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBElectricFloorTrapComponent_OnNPCBeginOverlap, OtherComp) == 0x000010, "Member 'RBElectricFloorTrapComponent_OnNPCBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBElectricFloorTrapComponent_OnNPCBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBElectricFloorTrapComponent_OnNPCBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBElectricFloorTrapComponent_OnNPCBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBElectricFloorTrapComponent_OnNPCBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBElectricFloorTrapComponent_OnNPCBeginOverlap, SweepResult) == 0x000020, "Member 'RBElectricFloorTrapComponent_OnNPCBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBElectrocutionDevice.Event_OnActivePanelAdded
// 0x0008 (0x0008 - 0x0000)
struct RBElectrocutionDevice_Event_OnActivePanelAdded final
{
public:
	class URBElectrocutionSwitchPanelComponent*   Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionDevice_Event_OnActivePanelAdded) == 0x000008, "Wrong alignment on RBElectrocutionDevice_Event_OnActivePanelAdded");
static_assert(sizeof(RBElectrocutionDevice_Event_OnActivePanelAdded) == 0x000008, "Wrong size on RBElectrocutionDevice_Event_OnActivePanelAdded");
static_assert(offsetof(RBElectrocutionDevice_Event_OnActivePanelAdded, Panel) == 0x000000, "Member 'RBElectrocutionDevice_Event_OnActivePanelAdded::Panel' has a wrong offset!");

// Function OPP.RBElectrocutionDevice.Event_OnActivePanelRemoved
// 0x0008 (0x0008 - 0x0000)
struct RBElectrocutionDevice_Event_OnActivePanelRemoved final
{
public:
	class URBElectrocutionSwitchPanelComponent*   Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionDevice_Event_OnActivePanelRemoved) == 0x000008, "Wrong alignment on RBElectrocutionDevice_Event_OnActivePanelRemoved");
static_assert(sizeof(RBElectrocutionDevice_Event_OnActivePanelRemoved) == 0x000008, "Wrong size on RBElectrocutionDevice_Event_OnActivePanelRemoved");
static_assert(offsetof(RBElectrocutionDevice_Event_OnActivePanelRemoved, Panel) == 0x000000, "Member 'RBElectrocutionDevice_Event_OnActivePanelRemoved::Panel' has a wrong offset!");

// Function OPP.RBElectrocutionDevice.Event_OnCurrentVoltageChanged
// 0x0004 (0x0004 - 0x0000)
struct RBElectrocutionDevice_Event_OnCurrentVoltageChanged final
{
public:
	float                                         CurrentVoltage;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionDevice_Event_OnCurrentVoltageChanged) == 0x000004, "Wrong alignment on RBElectrocutionDevice_Event_OnCurrentVoltageChanged");
static_assert(sizeof(RBElectrocutionDevice_Event_OnCurrentVoltageChanged) == 0x000004, "Wrong size on RBElectrocutionDevice_Event_OnCurrentVoltageChanged");
static_assert(offsetof(RBElectrocutionDevice_Event_OnCurrentVoltageChanged, CurrentVoltage) == 0x000000, "Member 'RBElectrocutionDevice_Event_OnCurrentVoltageChanged::CurrentVoltage' has a wrong offset!");

// Function OPP.RBElectrocutionDevice.Event_OnPlayerOverloading
// 0x0010 (0x0010 - 0x0000)
struct RBElectrocutionDevice_Event_OnPlayerOverloading final
{
public:
	class URBElectrocutionSwitchPanelComponent*   Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionDevice_Event_OnPlayerOverloading) == 0x000008, "Wrong alignment on RBElectrocutionDevice_Event_OnPlayerOverloading");
static_assert(sizeof(RBElectrocutionDevice_Event_OnPlayerOverloading) == 0x000010, "Wrong size on RBElectrocutionDevice_Event_OnPlayerOverloading");
static_assert(offsetof(RBElectrocutionDevice_Event_OnPlayerOverloading, Panel) == 0x000000, "Member 'RBElectrocutionDevice_Event_OnPlayerOverloading::Panel' has a wrong offset!");
static_assert(offsetof(RBElectrocutionDevice_Event_OnPlayerOverloading, Player) == 0x000008, "Member 'RBElectrocutionDevice_Event_OnPlayerOverloading::Player' has a wrong offset!");

// Function OPP.RBElectrocutionDevice.GetCurrentVoltageRatio
// 0x0004 (0x0004 - 0x0000)
struct RBElectrocutionDevice_GetCurrentVoltageRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionDevice_GetCurrentVoltageRatio) == 0x000004, "Wrong alignment on RBElectrocutionDevice_GetCurrentVoltageRatio");
static_assert(sizeof(RBElectrocutionDevice_GetCurrentVoltageRatio) == 0x000004, "Wrong size on RBElectrocutionDevice_GetCurrentVoltageRatio");
static_assert(offsetof(RBElectrocutionDevice_GetCurrentVoltageRatio, ReturnValue) == 0x000000, "Member 'RBElectrocutionDevice_GetCurrentVoltageRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBElectrocutionDevice.GetLinkedCoordinator
// 0x0008 (0x0008 - 0x0000)
struct RBElectrocutionDevice_GetLinkedCoordinator final
{
public:
	class ARBElectrocutionObjectiveCoordinator*   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionDevice_GetLinkedCoordinator) == 0x000008, "Wrong alignment on RBElectrocutionDevice_GetLinkedCoordinator");
static_assert(sizeof(RBElectrocutionDevice_GetLinkedCoordinator) == 0x000008, "Wrong size on RBElectrocutionDevice_GetLinkedCoordinator");
static_assert(offsetof(RBElectrocutionDevice_GetLinkedCoordinator, ReturnValue) == 0x000000, "Member 'RBElectrocutionDevice_GetLinkedCoordinator::ReturnValue' has a wrong offset!");

// Function OPP.RBElectrocutionDevice.GetNumberOfActivePlayers
// 0x0004 (0x0004 - 0x0000)
struct RBElectrocutionDevice_GetNumberOfActivePlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionDevice_GetNumberOfActivePlayers) == 0x000004, "Wrong alignment on RBElectrocutionDevice_GetNumberOfActivePlayers");
static_assert(sizeof(RBElectrocutionDevice_GetNumberOfActivePlayers) == 0x000004, "Wrong size on RBElectrocutionDevice_GetNumberOfActivePlayers");
static_assert(offsetof(RBElectrocutionDevice_GetNumberOfActivePlayers, ReturnValue) == 0x000000, "Member 'RBElectrocutionDevice_GetNumberOfActivePlayers::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.OnBatteryLevelChanged
// 0x0004 (0x0004 - 0x0000)
struct RBHUDPlayerInfo_OnBatteryLevelChanged final
{
public:
	float                                         NewBatteryLevel;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerInfo_OnBatteryLevelChanged) == 0x000004, "Wrong alignment on RBHUDPlayerInfo_OnBatteryLevelChanged");
static_assert(sizeof(RBHUDPlayerInfo_OnBatteryLevelChanged) == 0x000004, "Wrong size on RBHUDPlayerInfo_OnBatteryLevelChanged");
static_assert(offsetof(RBHUDPlayerInfo_OnBatteryLevelChanged, NewBatteryLevel) == 0x000000, "Member 'RBHUDPlayerInfo_OnBatteryLevelChanged::NewBatteryLevel' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.OnHealthUpdated
// 0x0008 (0x0008 - 0x0000)
struct RBHUDPlayerInfo_OnHealthUpdated final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncreased;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2046[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUDPlayerInfo_OnHealthUpdated) == 0x000004, "Wrong alignment on RBHUDPlayerInfo_OnHealthUpdated");
static_assert(sizeof(RBHUDPlayerInfo_OnHealthUpdated) == 0x000008, "Wrong size on RBHUDPlayerInfo_OnHealthUpdated");
static_assert(offsetof(RBHUDPlayerInfo_OnHealthUpdated, NewHealth) == 0x000000, "Member 'RBHUDPlayerInfo_OnHealthUpdated::NewHealth' has a wrong offset!");
static_assert(offsetof(RBHUDPlayerInfo_OnHealthUpdated, bIncreased) == 0x000004, "Member 'RBHUDPlayerInfo_OnHealthUpdated::bIncreased' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.OnMaxBatteryChanged
// 0x0004 (0x0004 - 0x0000)
struct RBHUDPlayerInfo_OnMaxBatteryChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerInfo_OnMaxBatteryChanged) == 0x000004, "Wrong alignment on RBHUDPlayerInfo_OnMaxBatteryChanged");
static_assert(sizeof(RBHUDPlayerInfo_OnMaxBatteryChanged) == 0x000004, "Wrong size on RBHUDPlayerInfo_OnMaxBatteryChanged");
static_assert(offsetof(RBHUDPlayerInfo_OnMaxBatteryChanged, OldValue) == 0x000000, "Member 'RBHUDPlayerInfo_OnMaxBatteryChanged::OldValue' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.OnMaxHealthChanged
// 0x0004 (0x0004 - 0x0000)
struct RBHUDPlayerInfo_OnMaxHealthChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerInfo_OnMaxHealthChanged) == 0x000004, "Wrong alignment on RBHUDPlayerInfo_OnMaxHealthChanged");
static_assert(sizeof(RBHUDPlayerInfo_OnMaxHealthChanged) == 0x000004, "Wrong size on RBHUDPlayerInfo_OnMaxHealthChanged");
static_assert(offsetof(RBHUDPlayerInfo_OnMaxHealthChanged, OldValue) == 0x000000, "Member 'RBHUDPlayerInfo_OnMaxHealthChanged::OldValue' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.OnMaxStaminaChanged
// 0x0004 (0x0004 - 0x0000)
struct RBHUDPlayerInfo_OnMaxStaminaChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerInfo_OnMaxStaminaChanged) == 0x000004, "Wrong alignment on RBHUDPlayerInfo_OnMaxStaminaChanged");
static_assert(sizeof(RBHUDPlayerInfo_OnMaxStaminaChanged) == 0x000004, "Wrong size on RBHUDPlayerInfo_OnMaxStaminaChanged");
static_assert(offsetof(RBHUDPlayerInfo_OnMaxStaminaChanged, OldValue) == 0x000000, "Member 'RBHUDPlayerInfo_OnMaxStaminaChanged::OldValue' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.OnPlayerStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHUDPlayerInfo_OnPlayerStatusChanged final
{
public:
	EPlayerIndicatorType                          PlayerIndicatorType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerInfo_OnPlayerStatusChanged) == 0x000001, "Wrong alignment on RBHUDPlayerInfo_OnPlayerStatusChanged");
static_assert(sizeof(RBHUDPlayerInfo_OnPlayerStatusChanged) == 0x000001, "Wrong size on RBHUDPlayerInfo_OnPlayerStatusChanged");
static_assert(offsetof(RBHUDPlayerInfo_OnPlayerStatusChanged, PlayerIndicatorType) == 0x000000, "Member 'RBHUDPlayerInfo_OnPlayerStatusChanged::PlayerIndicatorType' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.OnPsychosisChanged
// 0x0008 (0x0008 - 0x0000)
struct RBHUDPlayerInfo_OnPsychosisChanged final
{
public:
	int32                                         NewPsychosis;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldPsychosis;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerInfo_OnPsychosisChanged) == 0x000004, "Wrong alignment on RBHUDPlayerInfo_OnPsychosisChanged");
static_assert(sizeof(RBHUDPlayerInfo_OnPsychosisChanged) == 0x000008, "Wrong size on RBHUDPlayerInfo_OnPsychosisChanged");
static_assert(offsetof(RBHUDPlayerInfo_OnPsychosisChanged, NewPsychosis) == 0x000000, "Member 'RBHUDPlayerInfo_OnPsychosisChanged::NewPsychosis' has a wrong offset!");
static_assert(offsetof(RBHUDPlayerInfo_OnPsychosisChanged, OldPsychosis) == 0x000004, "Member 'RBHUDPlayerInfo_OnPsychosisChanged::OldPsychosis' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.OnStaminaChanged
// 0x0008 (0x0008 - 0x0000)
struct RBHUDPlayerInfo_OnStaminaChanged final
{
public:
	float                                         NewStamina;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExhausted;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2047[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUDPlayerInfo_OnStaminaChanged) == 0x000004, "Wrong alignment on RBHUDPlayerInfo_OnStaminaChanged");
static_assert(sizeof(RBHUDPlayerInfo_OnStaminaChanged) == 0x000008, "Wrong size on RBHUDPlayerInfo_OnStaminaChanged");
static_assert(offsetof(RBHUDPlayerInfo_OnStaminaChanged, NewStamina) == 0x000000, "Member 'RBHUDPlayerInfo_OnStaminaChanged::NewStamina' has a wrong offset!");
static_assert(offsetof(RBHUDPlayerInfo_OnStaminaChanged, bIsExhausted) == 0x000004, "Member 'RBHUDPlayerInfo_OnStaminaChanged::bIsExhausted' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.OnWatchedPlayerChanged
// 0x0008 (0x0008 - 0x0000)
struct RBHUDPlayerInfo_OnWatchedPlayerChanged final
{
public:
	class ARBPlayer*                              OldPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerInfo_OnWatchedPlayerChanged) == 0x000008, "Wrong alignment on RBHUDPlayerInfo_OnWatchedPlayerChanged");
static_assert(sizeof(RBHUDPlayerInfo_OnWatchedPlayerChanged) == 0x000008, "Wrong size on RBHUDPlayerInfo_OnWatchedPlayerChanged");
static_assert(offsetof(RBHUDPlayerInfo_OnWatchedPlayerChanged, OldPlayer) == 0x000000, "Member 'RBHUDPlayerInfo_OnWatchedPlayerChanged::OldPlayer' has a wrong offset!");

// Function OPP.RBHUDPlayerInfo.SetPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBHUDPlayerInfo_SetPlayer final
{
public:
	class ARBPlayer*                              NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerInfo_SetPlayer) == 0x000008, "Wrong alignment on RBHUDPlayerInfo_SetPlayer");
static_assert(sizeof(RBHUDPlayerInfo_SetPlayer) == 0x000008, "Wrong size on RBHUDPlayerInfo_SetPlayer");
static_assert(offsetof(RBHUDPlayerInfo_SetPlayer, NewPlayer) == 0x000000, "Member 'RBHUDPlayerInfo_SetPlayer::NewPlayer' has a wrong offset!");

// Function OPP.RBToggleable.PostToggled
// 0x0001 (0x0001 - 0x0000)
struct RBToggleable_PostToggled final
{
public:
	bool                                          bToggleEnabled;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBToggleable_PostToggled) == 0x000001, "Wrong alignment on RBToggleable_PostToggled");
static_assert(sizeof(RBToggleable_PostToggled) == 0x000001, "Wrong size on RBToggleable_PostToggled");
static_assert(offsetof(RBToggleable_PostToggled, bToggleEnabled) == 0x000000, "Member 'RBToggleable_PostToggled::bToggleEnabled' has a wrong offset!");

// Function OPP.RBElectrocutionObjectiveCoordinator.OnPanelPawnInteractingChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct RBElectrocutionObjectiveCoordinator_OnPanelPawnInteractingChangedEvent final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionObjectiveCoordinator_OnPanelPawnInteractingChangedEvent) == 0x000008, "Wrong alignment on RBElectrocutionObjectiveCoordinator_OnPanelPawnInteractingChangedEvent");
static_assert(sizeof(RBElectrocutionObjectiveCoordinator_OnPanelPawnInteractingChangedEvent) == 0x000010, "Wrong size on RBElectrocutionObjectiveCoordinator_OnPanelPawnInteractingChangedEvent");
static_assert(offsetof(RBElectrocutionObjectiveCoordinator_OnPanelPawnInteractingChangedEvent, Panel) == 0x000000, "Member 'RBElectrocutionObjectiveCoordinator_OnPanelPawnInteractingChangedEvent::Panel' has a wrong offset!");
static_assert(offsetof(RBElectrocutionObjectiveCoordinator_OnPanelPawnInteractingChangedEvent, PawnInteracting) == 0x000008, "Member 'RBElectrocutionObjectiveCoordinator_OnPanelPawnInteractingChangedEvent::PawnInteracting' has a wrong offset!");

// Function OPP.RBElectrocutionObjectiveCoordinator.GetCurrentVoltageRatio
// 0x0004 (0x0004 - 0x0000)
struct RBElectrocutionObjectiveCoordinator_GetCurrentVoltageRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionObjectiveCoordinator_GetCurrentVoltageRatio) == 0x000004, "Wrong alignment on RBElectrocutionObjectiveCoordinator_GetCurrentVoltageRatio");
static_assert(sizeof(RBElectrocutionObjectiveCoordinator_GetCurrentVoltageRatio) == 0x000004, "Wrong size on RBElectrocutionObjectiveCoordinator_GetCurrentVoltageRatio");
static_assert(offsetof(RBElectrocutionObjectiveCoordinator_GetCurrentVoltageRatio, ReturnValue) == 0x000000, "Member 'RBElectrocutionObjectiveCoordinator_GetCurrentVoltageRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBElectrocutionObjectiveCoordinator.GetNumberOfActivePlayers
// 0x0004 (0x0004 - 0x0000)
struct RBElectrocutionObjectiveCoordinator_GetNumberOfActivePlayers final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionObjectiveCoordinator_GetNumberOfActivePlayers) == 0x000004, "Wrong alignment on RBElectrocutionObjectiveCoordinator_GetNumberOfActivePlayers");
static_assert(sizeof(RBElectrocutionObjectiveCoordinator_GetNumberOfActivePlayers) == 0x000004, "Wrong size on RBElectrocutionObjectiveCoordinator_GetNumberOfActivePlayers");
static_assert(offsetof(RBElectrocutionObjectiveCoordinator_GetNumberOfActivePlayers, ReturnValue) == 0x000000, "Member 'RBElectrocutionObjectiveCoordinator_GetNumberOfActivePlayers::ReturnValue' has a wrong offset!");

// Function OPP.RBGameInstance.OnLoadingScreenStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBGameInstance_OnLoadingScreenStateUpdated final
{
public:
	bool                                          bShowing;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameInstance_OnLoadingScreenStateUpdated) == 0x000001, "Wrong alignment on RBGameInstance_OnLoadingScreenStateUpdated");
static_assert(sizeof(RBGameInstance_OnLoadingScreenStateUpdated) == 0x000001, "Wrong size on RBGameInstance_OnLoadingScreenStateUpdated");
static_assert(offsetof(RBGameInstance_OnLoadingScreenStateUpdated, bShowing) == 0x000000, "Member 'RBGameInstance_OnLoadingScreenStateUpdated::bShowing' has a wrong offset!");

// Function OPP.RBElectrocutionSwitchPanelComponent.GetActiveToOverloadedRatio
// 0x0004 (0x0004 - 0x0000)
struct RBElectrocutionSwitchPanelComponent_GetActiveToOverloadedRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionSwitchPanelComponent_GetActiveToOverloadedRatio) == 0x000004, "Wrong alignment on RBElectrocutionSwitchPanelComponent_GetActiveToOverloadedRatio");
static_assert(sizeof(RBElectrocutionSwitchPanelComponent_GetActiveToOverloadedRatio) == 0x000004, "Wrong size on RBElectrocutionSwitchPanelComponent_GetActiveToOverloadedRatio");
static_assert(offsetof(RBElectrocutionSwitchPanelComponent_GetActiveToOverloadedRatio, ReturnValue) == 0x000000, "Member 'RBElectrocutionSwitchPanelComponent_GetActiveToOverloadedRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBElectrocutionSwitchPanelComponent.GetSwitchActiveRatio
// 0x0004 (0x0004 - 0x0000)
struct RBElectrocutionSwitchPanelComponent_GetSwitchActiveRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionSwitchPanelComponent_GetSwitchActiveRatio) == 0x000004, "Wrong alignment on RBElectrocutionSwitchPanelComponent_GetSwitchActiveRatio");
static_assert(sizeof(RBElectrocutionSwitchPanelComponent_GetSwitchActiveRatio) == 0x000004, "Wrong size on RBElectrocutionSwitchPanelComponent_GetSwitchActiveRatio");
static_assert(offsetof(RBElectrocutionSwitchPanelComponent_GetSwitchActiveRatio, ReturnValue) == 0x000000, "Member 'RBElectrocutionSwitchPanelComponent_GetSwitchActiveRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBElectrocutionSwitchPanelComponent.IsInActiveState
// 0x0001 (0x0001 - 0x0000)
struct RBElectrocutionSwitchPanelComponent_IsInActiveState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBElectrocutionSwitchPanelComponent_IsInActiveState) == 0x000001, "Wrong alignment on RBElectrocutionSwitchPanelComponent_IsInActiveState");
static_assert(sizeof(RBElectrocutionSwitchPanelComponent_IsInActiveState) == 0x000001, "Wrong size on RBElectrocutionSwitchPanelComponent_IsInActiveState");
static_assert(offsetof(RBElectrocutionSwitchPanelComponent_IsInActiveState, ReturnValue) == 0x000000, "Member 'RBElectrocutionSwitchPanelComponent_IsInActiveState::ReturnValue' has a wrong offset!");

// Function OPP.RBTextChatWidget.Event_HideMessage
// 0x0004 (0x0004 - 0x0000)
struct RBTextChatWidget_Event_HideMessage final
{
public:
	int32                                         MessageId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTextChatWidget_Event_HideMessage) == 0x000004, "Wrong alignment on RBTextChatWidget_Event_HideMessage");
static_assert(sizeof(RBTextChatWidget_Event_HideMessage) == 0x000004, "Wrong size on RBTextChatWidget_Event_HideMessage");
static_assert(offsetof(RBTextChatWidget_Event_HideMessage, MessageId) == 0x000000, "Member 'RBTextChatWidget_Event_HideMessage::MessageId' has a wrong offset!");

// Function OPP.RBTextChatWidget.Event_ShowMessage
// 0x0040 (0x0040 - 0x0000)
struct RBTextChatWidget_Event_ShowMessage final
{
public:
	struct FRBTextChatMessage                     Message;                                           // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTextChatWidget_Event_ShowMessage) == 0x000008, "Wrong alignment on RBTextChatWidget_Event_ShowMessage");
static_assert(sizeof(RBTextChatWidget_Event_ShowMessage) == 0x000040, "Wrong size on RBTextChatWidget_Event_ShowMessage");
static_assert(offsetof(RBTextChatWidget_Event_ShowMessage, Message) == 0x000000, "Member 'RBTextChatWidget_Event_ShowMessage::Message' has a wrong offset!");

// Function OPP.RBTextChatWidget.OnLoadingScreenStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBTextChatWidget_OnLoadingScreenStateUpdated final
{
public:
	bool                                          bShowing;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTextChatWidget_OnLoadingScreenStateUpdated) == 0x000001, "Wrong alignment on RBTextChatWidget_OnLoadingScreenStateUpdated");
static_assert(sizeof(RBTextChatWidget_OnLoadingScreenStateUpdated) == 0x000001, "Wrong size on RBTextChatWidget_OnLoadingScreenStateUpdated");
static_assert(offsetof(RBTextChatWidget_OnLoadingScreenStateUpdated, bShowing) == 0x000000, "Member 'RBTextChatWidget_OnLoadingScreenStateUpdated::bShowing' has a wrong offset!");

// Function OPP.RBPopUpWidget.BP_AdjustToAnchor
// 0x0010 (0x0010 - 0x0000)
struct RBPopUpWidget_BP_AdjustToAnchor final
{
public:
	class URBPopUpAnchorWidget*                   AnchorWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePopupCenter;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2053[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPopUpWidget_BP_AdjustToAnchor) == 0x000008, "Wrong alignment on RBPopUpWidget_BP_AdjustToAnchor");
static_assert(sizeof(RBPopUpWidget_BP_AdjustToAnchor) == 0x000010, "Wrong size on RBPopUpWidget_BP_AdjustToAnchor");
static_assert(offsetof(RBPopUpWidget_BP_AdjustToAnchor, AnchorWidget) == 0x000000, "Member 'RBPopUpWidget_BP_AdjustToAnchor::AnchorWidget' has a wrong offset!");
static_assert(offsetof(RBPopUpWidget_BP_AdjustToAnchor, bUsePopupCenter) == 0x000008, "Member 'RBPopUpWidget_BP_AdjustToAnchor::bUsePopupCenter' has a wrong offset!");

// Function OPP.RBPopUpConfirmWidget.Event_InitializePopup
// 0x0048 (0x0048 - 0x0000)
struct RBPopUpConfirmWidget_Event_InitializePopup final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   MainText;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ConfirmText;                                       // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPopUpConfirmWidget_Event_InitializePopup) == 0x000008, "Wrong alignment on RBPopUpConfirmWidget_Event_InitializePopup");
static_assert(sizeof(RBPopUpConfirmWidget_Event_InitializePopup) == 0x000048, "Wrong size on RBPopUpConfirmWidget_Event_InitializePopup");
static_assert(offsetof(RBPopUpConfirmWidget_Event_InitializePopup, TitleText) == 0x000000, "Member 'RBPopUpConfirmWidget_Event_InitializePopup::TitleText' has a wrong offset!");
static_assert(offsetof(RBPopUpConfirmWidget_Event_InitializePopup, MainText) == 0x000018, "Member 'RBPopUpConfirmWidget_Event_InitializePopup::MainText' has a wrong offset!");
static_assert(offsetof(RBPopUpConfirmWidget_Event_InitializePopup, ConfirmText) == 0x000030, "Member 'RBPopUpConfirmWidget_Event_InitializePopup::ConfirmText' has a wrong offset!");

// Function OPP.RBGameCondition_Blueprint.Event_EvaluateCondition
// 0x0001 (0x0001 - 0x0000)
struct RBGameCondition_Blueprint_Event_EvaluateCondition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameCondition_Blueprint_Event_EvaluateCondition) == 0x000001, "Wrong alignment on RBGameCondition_Blueprint_Event_EvaluateCondition");
static_assert(sizeof(RBGameCondition_Blueprint_Event_EvaluateCondition) == 0x000001, "Wrong size on RBGameCondition_Blueprint_Event_EvaluateCondition");
static_assert(offsetof(RBGameCondition_Blueprint_Event_EvaluateCondition, ReturnValue) == 0x000000, "Member 'RBGameCondition_Blueprint_Event_EvaluateCondition::ReturnValue' has a wrong offset!");

// Function OPP.RBErrorConfirmPopUpWidget.InitializeErrorPopup
// 0x0040 (0x0040 - 0x0000)
struct RBErrorConfirmPopUpWidget_InitializeErrorPopup final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ErrorCauseMessage;                                 // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ErrorCodeString;                                   // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBErrorConfirmPopUpWidget_InitializeErrorPopup) == 0x000008, "Wrong alignment on RBErrorConfirmPopUpWidget_InitializeErrorPopup");
static_assert(sizeof(RBErrorConfirmPopUpWidget_InitializeErrorPopup) == 0x000040, "Wrong size on RBErrorConfirmPopUpWidget_InitializeErrorPopup");
static_assert(offsetof(RBErrorConfirmPopUpWidget_InitializeErrorPopup, Message) == 0x000000, "Member 'RBErrorConfirmPopUpWidget_InitializeErrorPopup::Message' has a wrong offset!");
static_assert(offsetof(RBErrorConfirmPopUpWidget_InitializeErrorPopup, ErrorCauseMessage) == 0x000018, "Member 'RBErrorConfirmPopUpWidget_InitializeErrorPopup::ErrorCauseMessage' has a wrong offset!");
static_assert(offsetof(RBErrorConfirmPopUpWidget_InitializeErrorPopup, ErrorCodeString) == 0x000030, "Member 'RBErrorConfirmPopUpWidget_InitializeErrorPopup::ErrorCodeString' has a wrong offset!");

// Function OPP.RBHackPanelComponent.BP_TemporaryDisable
// 0x0004 (0x0004 - 0x0000)
struct RBHackPanelComponent_BP_TemporaryDisable final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_BP_TemporaryDisable) == 0x000004, "Wrong alignment on RBHackPanelComponent_BP_TemporaryDisable");
static_assert(sizeof(RBHackPanelComponent_BP_TemporaryDisable) == 0x000004, "Wrong size on RBHackPanelComponent_BP_TemporaryDisable");
static_assert(offsetof(RBHackPanelComponent_BP_TemporaryDisable, Duration) == 0x000000, "Member 'RBHackPanelComponent_BP_TemporaryDisable::Duration' has a wrong offset!");

// Function OPP.RBHackPanelComponent.Multicast_OnPanelSucceeded
// 0x0008 (0x0008 - 0x0000)
struct RBHackPanelComponent_Multicast_OnPanelSucceeded final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_Multicast_OnPanelSucceeded) == 0x000008, "Wrong alignment on RBHackPanelComponent_Multicast_OnPanelSucceeded");
static_assert(sizeof(RBHackPanelComponent_Multicast_OnPanelSucceeded) == 0x000008, "Wrong size on RBHackPanelComponent_Multicast_OnPanelSucceeded");
static_assert(offsetof(RBHackPanelComponent_Multicast_OnPanelSucceeded, Pawn) == 0x000000, "Member 'RBHackPanelComponent_Multicast_OnPanelSucceeded::Pawn' has a wrong offset!");

// Function OPP.RBHackPanelComponent.Multicast_OnStageFailed
// 0x0008 (0x0008 - 0x0000)
struct RBHackPanelComponent_Multicast_OnStageFailed final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_Multicast_OnStageFailed) == 0x000008, "Wrong alignment on RBHackPanelComponent_Multicast_OnStageFailed");
static_assert(sizeof(RBHackPanelComponent_Multicast_OnStageFailed) == 0x000008, "Wrong size on RBHackPanelComponent_Multicast_OnStageFailed");
static_assert(offsetof(RBHackPanelComponent_Multicast_OnStageFailed, Pawn) == 0x000000, "Member 'RBHackPanelComponent_Multicast_OnStageFailed::Pawn' has a wrong offset!");

// Function OPP.RBHackPanelComponent.Multicast_OnStageNeutral
// 0x0008 (0x0008 - 0x0000)
struct RBHackPanelComponent_Multicast_OnStageNeutral final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_Multicast_OnStageNeutral) == 0x000008, "Wrong alignment on RBHackPanelComponent_Multicast_OnStageNeutral");
static_assert(sizeof(RBHackPanelComponent_Multicast_OnStageNeutral) == 0x000008, "Wrong size on RBHackPanelComponent_Multicast_OnStageNeutral");
static_assert(offsetof(RBHackPanelComponent_Multicast_OnStageNeutral, Pawn) == 0x000000, "Member 'RBHackPanelComponent_Multicast_OnStageNeutral::Pawn' has a wrong offset!");

// Function OPP.RBHackPanelComponent.Multicast_OnStageSoftFail
// 0x0008 (0x0008 - 0x0000)
struct RBHackPanelComponent_Multicast_OnStageSoftFail final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_Multicast_OnStageSoftFail) == 0x000008, "Wrong alignment on RBHackPanelComponent_Multicast_OnStageSoftFail");
static_assert(sizeof(RBHackPanelComponent_Multicast_OnStageSoftFail) == 0x000008, "Wrong size on RBHackPanelComponent_Multicast_OnStageSoftFail");
static_assert(offsetof(RBHackPanelComponent_Multicast_OnStageSoftFail, Pawn) == 0x000000, "Member 'RBHackPanelComponent_Multicast_OnStageSoftFail::Pawn' has a wrong offset!");

// Function OPP.RBHackPanelComponent.Multicast_OnStageSucceeded
// 0x0008 (0x0008 - 0x0000)
struct RBHackPanelComponent_Multicast_OnStageSucceeded final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_Multicast_OnStageSucceeded) == 0x000008, "Wrong alignment on RBHackPanelComponent_Multicast_OnStageSucceeded");
static_assert(sizeof(RBHackPanelComponent_Multicast_OnStageSucceeded) == 0x000008, "Wrong size on RBHackPanelComponent_Multicast_OnStageSucceeded");
static_assert(offsetof(RBHackPanelComponent_Multicast_OnStageSucceeded, Pawn) == 0x000000, "Member 'RBHackPanelComponent_Multicast_OnStageSucceeded::Pawn' has a wrong offset!");

// Function OPP.RBHackPanelComponent.Multicast_SetInteractionPawnTimestamp
// 0x0008 (0x0008 - 0x0000)
struct RBHackPanelComponent_Multicast_SetInteractionPawnTimestamp final
{
public:
	float                                         InteractionPawnTimeStamp;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_NeedleRatio;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_Multicast_SetInteractionPawnTimestamp) == 0x000004, "Wrong alignment on RBHackPanelComponent_Multicast_SetInteractionPawnTimestamp");
static_assert(sizeof(RBHackPanelComponent_Multicast_SetInteractionPawnTimestamp) == 0x000008, "Wrong size on RBHackPanelComponent_Multicast_SetInteractionPawnTimestamp");
static_assert(offsetof(RBHackPanelComponent_Multicast_SetInteractionPawnTimestamp, InteractionPawnTimeStamp) == 0x000000, "Member 'RBHackPanelComponent_Multicast_SetInteractionPawnTimestamp::InteractionPawnTimeStamp' has a wrong offset!");
static_assert(offsetof(RBHackPanelComponent_Multicast_SetInteractionPawnTimestamp, Param_NeedleRatio) == 0x000004, "Member 'RBHackPanelComponent_Multicast_SetInteractionPawnTimestamp::Param_NeedleRatio' has a wrong offset!");

// Function OPP.RBHackPanelComponent.OnLastRatioChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBHackPanelComponent_OnLastRatioChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_OnLastRatioChangedCallback) == 0x000001, "Wrong alignment on RBHackPanelComponent_OnLastRatioChangedCallback");
static_assert(sizeof(RBHackPanelComponent_OnLastRatioChangedCallback) == 0x000001, "Wrong size on RBHackPanelComponent_OnLastRatioChangedCallback");
static_assert(offsetof(RBHackPanelComponent_OnLastRatioChangedCallback, ChangedType) == 0x000000, "Member 'RBHackPanelComponent_OnLastRatioChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBHackPanelComponent.OnNumberOfTripLeftChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBHackPanelComponent_OnNumberOfTripLeftChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_OnNumberOfTripLeftChangedCallback) == 0x000001, "Wrong alignment on RBHackPanelComponent_OnNumberOfTripLeftChangedCallback");
static_assert(sizeof(RBHackPanelComponent_OnNumberOfTripLeftChangedCallback) == 0x000001, "Wrong size on RBHackPanelComponent_OnNumberOfTripLeftChangedCallback");
static_assert(offsetof(RBHackPanelComponent_OnNumberOfTripLeftChangedCallback, ChangedType) == 0x000000, "Member 'RBHackPanelComponent_OnNumberOfTripLeftChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBHackPanelComponent.OnStageStartedPawnTimestampChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBHackPanelComponent_OnStageStartedPawnTimestampChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_OnStageStartedPawnTimestampChangedCallback) == 0x000001, "Wrong alignment on RBHackPanelComponent_OnStageStartedPawnTimestampChangedCallback");
static_assert(sizeof(RBHackPanelComponent_OnStageStartedPawnTimestampChangedCallback) == 0x000001, "Wrong size on RBHackPanelComponent_OnStageStartedPawnTimestampChangedCallback");
static_assert(offsetof(RBHackPanelComponent_OnStageStartedPawnTimestampChangedCallback, ChangedType) == 0x000000, "Member 'RBHackPanelComponent_OnStageStartedPawnTimestampChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBHackPanelComponent.BP_GetNumberOfStageLeft
// 0x0004 (0x0004 - 0x0000)
struct RBHackPanelComponent_BP_GetNumberOfStageLeft final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHackPanelComponent_BP_GetNumberOfStageLeft) == 0x000004, "Wrong alignment on RBHackPanelComponent_BP_GetNumberOfStageLeft");
static_assert(sizeof(RBHackPanelComponent_BP_GetNumberOfStageLeft) == 0x000004, "Wrong size on RBHackPanelComponent_BP_GetNumberOfStageLeft");
static_assert(offsetof(RBHackPanelComponent_BP_GetNumberOfStageLeft, ReturnValue) == 0x000000, "Member 'RBHackPanelComponent_BP_GetNumberOfStageLeft::ReturnValue' has a wrong offset!");

// Function OPP.RBEvalCorridor.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBEvalCorridor_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205F[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEvalCorridor_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBEvalCorridor_OnComponentBeginOverlap");
static_assert(sizeof(RBEvalCorridor_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBEvalCorridor_OnComponentBeginOverlap");
static_assert(offsetof(RBEvalCorridor_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBEvalCorridor_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBEvalCorridor_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBEvalCorridor_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBEvalCorridor_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBEvalCorridor_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBEvalCorridor_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBEvalCorridor_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBEvalCorridor_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBEvalCorridor_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBEvalCorridor_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBEvalCorridor_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBEvalCorridor.OnComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBEvalCorridor_OnComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2060[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBEvalCorridor_OnComponentEndOverlap) == 0x000008, "Wrong alignment on RBEvalCorridor_OnComponentEndOverlap");
static_assert(sizeof(RBEvalCorridor_OnComponentEndOverlap) == 0x000020, "Wrong size on RBEvalCorridor_OnComponentEndOverlap");
static_assert(offsetof(RBEvalCorridor_OnComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBEvalCorridor_OnComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBEvalCorridor_OnComponentEndOverlap, OtherActor) == 0x000008, "Member 'RBEvalCorridor_OnComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBEvalCorridor_OnComponentEndOverlap, OtherComp) == 0x000010, "Member 'RBEvalCorridor_OnComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBEvalCorridor_OnComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBEvalCorridor_OnComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBEvalCorridor.OnPlayerInitReplicated
// 0x0008 (0x0008 - 0x0000)
struct RBEvalCorridor_OnPlayerInitReplicated final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEvalCorridor_OnPlayerInitReplicated) == 0x000008, "Wrong alignment on RBEvalCorridor_OnPlayerInitReplicated");
static_assert(sizeof(RBEvalCorridor_OnPlayerInitReplicated) == 0x000008, "Wrong size on RBEvalCorridor_OnPlayerInitReplicated");
static_assert(offsetof(RBEvalCorridor_OnPlayerInitReplicated, Player) == 0x000000, "Member 'RBEvalCorridor_OnPlayerInitReplicated::Player' has a wrong offset!");

// Function OPP.RBEvalCorridorEntrance.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBEvalCorridorEntrance_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2063[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEvalCorridorEntrance_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBEvalCorridorEntrance_OnComponentBeginOverlap");
static_assert(sizeof(RBEvalCorridorEntrance_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBEvalCorridorEntrance_OnComponentBeginOverlap");
static_assert(offsetof(RBEvalCorridorEntrance_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBEvalCorridorEntrance_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorEntrance_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBEvalCorridorEntrance_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorEntrance_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBEvalCorridorEntrance_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorEntrance_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBEvalCorridorEntrance_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorEntrance_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBEvalCorridorEntrance_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorEntrance_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBEvalCorridorEntrance_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBEvalCorridorExit.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBEvalCorridorExit_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2065[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEvalCorridorExit_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBEvalCorridorExit_OnComponentBeginOverlap");
static_assert(sizeof(RBEvalCorridorExit_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBEvalCorridorExit_OnComponentBeginOverlap");
static_assert(offsetof(RBEvalCorridorExit_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBEvalCorridorExit_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorExit_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBEvalCorridorExit_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorExit_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBEvalCorridorExit_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorExit_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBEvalCorridorExit_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorExit_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBEvalCorridorExit_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorExit_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBEvalCorridorExit_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBEvalCorridorExit.OnComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBEvalCorridorExit_OnComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2066[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBEvalCorridorExit_OnComponentEndOverlap) == 0x000008, "Wrong alignment on RBEvalCorridorExit_OnComponentEndOverlap");
static_assert(sizeof(RBEvalCorridorExit_OnComponentEndOverlap) == 0x000020, "Wrong size on RBEvalCorridorExit_OnComponentEndOverlap");
static_assert(offsetof(RBEvalCorridorExit_OnComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBEvalCorridorExit_OnComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorExit_OnComponentEndOverlap, OtherActor) == 0x000008, "Member 'RBEvalCorridorExit_OnComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorExit_OnComponentEndOverlap, OtherComp) == 0x000010, "Member 'RBEvalCorridorExit_OnComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorExit_OnComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBEvalCorridorExit_OnComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBHUDWidget.Event_OnHudModeChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHUDWidget_Event_OnHudModeChanged final
{
public:
	EHudMode                                      NewHudMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDWidget_Event_OnHudModeChanged) == 0x000001, "Wrong alignment on RBHUDWidget_Event_OnHudModeChanged");
static_assert(sizeof(RBHUDWidget_Event_OnHudModeChanged) == 0x000001, "Wrong size on RBHUDWidget_Event_OnHudModeChanged");
static_assert(offsetof(RBHUDWidget_Event_OnHudModeChanged, NewHudMode) == 0x000000, "Member 'RBHUDWidget_Event_OnHudModeChanged::NewHudMode' has a wrong offset!");

// Function OPP.RBHUDWidget.Event_OnPlayAsPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBHUDWidget_Event_OnPlayAsPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDWidget_Event_OnPlayAsPlayer) == 0x000008, "Wrong alignment on RBHUDWidget_Event_OnPlayAsPlayer");
static_assert(sizeof(RBHUDWidget_Event_OnPlayAsPlayer) == 0x000008, "Wrong size on RBHUDWidget_Event_OnPlayAsPlayer");
static_assert(offsetof(RBHUDWidget_Event_OnPlayAsPlayer, Player) == 0x000000, "Member 'RBHUDWidget_Event_OnPlayAsPlayer::Player' has a wrong offset!");

// Function OPP.RBHUDWidget.Event_OnSpectateNewPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBHUDWidget_Event_OnSpectateNewPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDWidget_Event_OnSpectateNewPlayer) == 0x000008, "Wrong alignment on RBHUDWidget_Event_OnSpectateNewPlayer");
static_assert(sizeof(RBHUDWidget_Event_OnSpectateNewPlayer) == 0x000008, "Wrong size on RBHUDWidget_Event_OnSpectateNewPlayer");
static_assert(offsetof(RBHUDWidget_Event_OnSpectateNewPlayer, Player) == 0x000000, "Member 'RBHUDWidget_Event_OnSpectateNewPlayer::Player' has a wrong offset!");

// Function OPP.RBHUDWidget.Event_ShowBadgeProgress
// 0x0008 (0x0008 - 0x0000)
struct RBHUDWidget_Event_ShowBadgeProgress final
{
public:
	struct FRBBadgeHudProgressDisplayDetails      Progress;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDWidget_Event_ShowBadgeProgress) == 0x000004, "Wrong alignment on RBHUDWidget_Event_ShowBadgeProgress");
static_assert(sizeof(RBHUDWidget_Event_ShowBadgeProgress) == 0x000008, "Wrong size on RBHUDWidget_Event_ShowBadgeProgress");
static_assert(offsetof(RBHUDWidget_Event_ShowBadgeProgress, Progress) == 0x000000, "Member 'RBHUDWidget_Event_ShowBadgeProgress::Progress' has a wrong offset!");

// Function OPP.RBHUDWidget.Event_ShowInteractionMessage
// 0x0020 (0x0020 - 0x0000)
struct RBHUDWidget_Event_ShowInteractionMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameMessageCategory                          GameMessageCategory;                               // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_206A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUDWidget_Event_ShowInteractionMessage) == 0x000008, "Wrong alignment on RBHUDWidget_Event_ShowInteractionMessage");
static_assert(sizeof(RBHUDWidget_Event_ShowInteractionMessage) == 0x000020, "Wrong size on RBHUDWidget_Event_ShowInteractionMessage");
static_assert(offsetof(RBHUDWidget_Event_ShowInteractionMessage, Message) == 0x000000, "Member 'RBHUDWidget_Event_ShowInteractionMessage::Message' has a wrong offset!");
static_assert(offsetof(RBHUDWidget_Event_ShowInteractionMessage, GameMessageCategory) == 0x000018, "Member 'RBHUDWidget_Event_ShowInteractionMessage::GameMessageCategory' has a wrong offset!");

// Function OPP.RBHUDWidget.Event_ShowObjectiveIntroMessage
// 0x0018 (0x0018 - 0x0000)
struct RBHUDWidget_Event_ShowObjectiveIntroMessage final
{
public:
	class FText                                   ObjectiveText;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDWidget_Event_ShowObjectiveIntroMessage) == 0x000008, "Wrong alignment on RBHUDWidget_Event_ShowObjectiveIntroMessage");
static_assert(sizeof(RBHUDWidget_Event_ShowObjectiveIntroMessage) == 0x000018, "Wrong size on RBHUDWidget_Event_ShowObjectiveIntroMessage");
static_assert(offsetof(RBHUDWidget_Event_ShowObjectiveIntroMessage, ObjectiveText) == 0x000000, "Member 'RBHUDWidget_Event_ShowObjectiveIntroMessage::ObjectiveText' has a wrong offset!");

// Function OPP.RBHUDWidget.Event_StartTransitionFeedback
// 0x0004 (0x0004 - 0x0000)
struct RBHUDWidget_Event_StartTransitionFeedback final
{
public:
	float                                         blackoutDuration;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDWidget_Event_StartTransitionFeedback) == 0x000004, "Wrong alignment on RBHUDWidget_Event_StartTransitionFeedback");
static_assert(sizeof(RBHUDWidget_Event_StartTransitionFeedback) == 0x000004, "Wrong size on RBHUDWidget_Event_StartTransitionFeedback");
static_assert(offsetof(RBHUDWidget_Event_StartTransitionFeedback, blackoutDuration) == 0x000000, "Member 'RBHUDWidget_Event_StartTransitionFeedback::blackoutDuration' has a wrong offset!");

// Function OPP.RBEvalCorridorHelperComponent.BP_ScheduleCollisionEnabled
// 0x0010 (0x0010 - 0x0000)
struct RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2071[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled) == 0x000008, "Wrong alignment on RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled");
static_assert(sizeof(RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled) == 0x000010, "Wrong size on RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled");
static_assert(offsetof(RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled, Player) == 0x000000, "Member 'RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled::Player' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled, bEnabled) == 0x000008, "Member 'RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled, Delay) == 0x00000C, "Member 'RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabled::Delay' has a wrong offset!");

// Function OPP.RBEvalCorridorHelperComponent.BP_ScheduleCollisionEnabledLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabledLocalPlayer final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2072[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabledLocalPlayer) == 0x000004, "Wrong alignment on RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabledLocalPlayer");
static_assert(sizeof(RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabledLocalPlayer) == 0x000008, "Wrong size on RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabledLocalPlayer");
static_assert(offsetof(RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabledLocalPlayer, bEnabled) == 0x000000, "Member 'RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabledLocalPlayer::bEnabled' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabledLocalPlayer, Delay) == 0x000004, "Member 'RBEvalCorridorHelperComponent_BP_ScheduleCollisionEnabledLocalPlayer::Delay' has a wrong offset!");

// Function OPP.RBEvalCorridorHelperComponent.Multicast_ScheduleCollisionEnabledForPlayer
// 0x0018 (0x0018 - 0x0000)
struct RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2073[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExecutionTime;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipLocalPlayer;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2074[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer) == 0x000008, "Wrong alignment on RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer");
static_assert(sizeof(RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer) == 0x000018, "Wrong size on RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer");
static_assert(offsetof(RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer, Player) == 0x000000, "Member 'RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer::Player' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer, bEnabled) == 0x000008, "Member 'RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer::bEnabled' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer, ExecutionTime) == 0x00000C, "Member 'RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer::ExecutionTime' has a wrong offset!");
static_assert(offsetof(RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer, bSkipLocalPlayer) == 0x000010, "Member 'RBEvalCorridorHelperComponent_Multicast_ScheduleCollisionEnabledForPlayer::bSkipLocalPlayer' has a wrong offset!");

// Function OPP.RBHitNPCObjectiveCoordinator.Event_OnNPCHit
// 0x0010 (0x0010 - 0x0000)
struct RBHitNPCObjectiveCoordinator_Event_OnNPCHit final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHeadshot;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2079[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHitNPCObjectiveCoordinator_Event_OnNPCHit) == 0x000008, "Wrong alignment on RBHitNPCObjectiveCoordinator_Event_OnNPCHit");
static_assert(sizeof(RBHitNPCObjectiveCoordinator_Event_OnNPCHit) == 0x000010, "Wrong size on RBHitNPCObjectiveCoordinator_Event_OnNPCHit");
static_assert(offsetof(RBHitNPCObjectiveCoordinator_Event_OnNPCHit, NPC) == 0x000000, "Member 'RBHitNPCObjectiveCoordinator_Event_OnNPCHit::NPC' has a wrong offset!");
static_assert(offsetof(RBHitNPCObjectiveCoordinator_Event_OnNPCHit, bHeadshot) == 0x000008, "Member 'RBHitNPCObjectiveCoordinator_Event_OnNPCHit::bHeadshot' has a wrong offset!");

// Function OPP.RBHitNPCObjectiveCoordinator.OnNPCHitByProjectile
// 0x0020 (0x0020 - 0x0000)
struct RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile final
{
public:
	class ARBNPC*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Thrower;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Projectile;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHeadshot;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_207A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile) == 0x000008, "Wrong alignment on RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile");
static_assert(sizeof(RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile) == 0x000020, "Wrong size on RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile");
static_assert(offsetof(RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile, Target) == 0x000000, "Member 'RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile::Target' has a wrong offset!");
static_assert(offsetof(RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile, Thrower) == 0x000008, "Member 'RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile::Thrower' has a wrong offset!");
static_assert(offsetof(RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile, Projectile) == 0x000010, "Member 'RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile::Projectile' has a wrong offset!");
static_assert(offsetof(RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile, bIsHeadshot) == 0x000018, "Member 'RBHitNPCObjectiveCoordinator_OnNPCHitByProjectile::bIsHeadshot' has a wrong offset!");

// Function OPP.RBHitNPCObjectiveCoordinator.OnRep_CurrentRoundCompletion
// 0x0004 (0x0004 - 0x0000)
struct RBHitNPCObjectiveCoordinator_OnRep_CurrentRoundCompletion final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHitNPCObjectiveCoordinator_OnRep_CurrentRoundCompletion) == 0x000004, "Wrong alignment on RBHitNPCObjectiveCoordinator_OnRep_CurrentRoundCompletion");
static_assert(sizeof(RBHitNPCObjectiveCoordinator_OnRep_CurrentRoundCompletion) == 0x000004, "Wrong size on RBHitNPCObjectiveCoordinator_OnRep_CurrentRoundCompletion");
static_assert(offsetof(RBHitNPCObjectiveCoordinator_OnRep_CurrentRoundCompletion, OldValue) == 0x000000, "Member 'RBHitNPCObjectiveCoordinator_OnRep_CurrentRoundCompletion::OldValue' has a wrong offset!");

// Function OPP.RBTorturePanelComponent.Multicast_OnPanelSucceeded
// 0x0010 (0x0010 - 0x0000)
struct RBTorturePanelComponent_Multicast_OnPanelSucceeded final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TortureCompleted;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2080[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTorturePanelComponent_Multicast_OnPanelSucceeded) == 0x000008, "Wrong alignment on RBTorturePanelComponent_Multicast_OnPanelSucceeded");
static_assert(sizeof(RBTorturePanelComponent_Multicast_OnPanelSucceeded) == 0x000010, "Wrong size on RBTorturePanelComponent_Multicast_OnPanelSucceeded");
static_assert(offsetof(RBTorturePanelComponent_Multicast_OnPanelSucceeded, Pawn) == 0x000000, "Member 'RBTorturePanelComponent_Multicast_OnPanelSucceeded::Pawn' has a wrong offset!");
static_assert(offsetof(RBTorturePanelComponent_Multicast_OnPanelSucceeded, TortureCompleted) == 0x000008, "Member 'RBTorturePanelComponent_Multicast_OnPanelSucceeded::TortureCompleted' has a wrong offset!");

// Function OPP.RBTorturePanelComponent.IsTortureRoomCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBTorturePanelComponent_IsTortureRoomCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTorturePanelComponent_IsTortureRoomCompleted) == 0x000001, "Wrong alignment on RBTorturePanelComponent_IsTortureRoomCompleted");
static_assert(sizeof(RBTorturePanelComponent_IsTortureRoomCompleted) == 0x000001, "Wrong size on RBTorturePanelComponent_IsTortureRoomCompleted");
static_assert(offsetof(RBTorturePanelComponent_IsTortureRoomCompleted, ReturnValue) == 0x000000, "Member 'RBTorturePanelComponent_IsTortureRoomCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBExitStageObjectiveCoordinator.Event_OnExitStageObjectiveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBExitStageObjectiveCoordinator_Event_OnExitStageObjectiveStateChanged final
{
public:
	EExitStageObjectiveState                      Param_ObjectiveState;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExitStageObjectiveCoordinator_Event_OnExitStageObjectiveStateChanged) == 0x000001, "Wrong alignment on RBExitStageObjectiveCoordinator_Event_OnExitStageObjectiveStateChanged");
static_assert(sizeof(RBExitStageObjectiveCoordinator_Event_OnExitStageObjectiveStateChanged) == 0x000001, "Wrong size on RBExitStageObjectiveCoordinator_Event_OnExitStageObjectiveStateChanged");
static_assert(offsetof(RBExitStageObjectiveCoordinator_Event_OnExitStageObjectiveStateChanged, Param_ObjectiveState) == 0x000000, "Member 'RBExitStageObjectiveCoordinator_Event_OnExitStageObjectiveStateChanged::Param_ObjectiveState' has a wrong offset!");

// Function OPP.RBExitStageObjectiveCoordinator.OnGamePhaseUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBExitStageObjectiveCoordinator_OnGamePhaseUpdated final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExitStageObjectiveCoordinator_OnGamePhaseUpdated) == 0x000001, "Wrong alignment on RBExitStageObjectiveCoordinator_OnGamePhaseUpdated");
static_assert(sizeof(RBExitStageObjectiveCoordinator_OnGamePhaseUpdated) == 0x000001, "Wrong size on RBExitStageObjectiveCoordinator_OnGamePhaseUpdated");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnGamePhaseUpdated, GamePhase) == 0x000000, "Member 'RBExitStageObjectiveCoordinator_OnGamePhaseUpdated::GamePhase' has a wrong offset!");

// Function OPP.RBExitStageObjectiveCoordinator.OnOperatingFinished
// 0x0010 (0x0010 - 0x0000)
struct RBExitStageObjectiveCoordinator_OnOperatingFinished final
{
public:
	class URBOperatableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExitStageObjectiveCoordinator_OnOperatingFinished) == 0x000008, "Wrong alignment on RBExitStageObjectiveCoordinator_OnOperatingFinished");
static_assert(sizeof(RBExitStageObjectiveCoordinator_OnOperatingFinished) == 0x000010, "Wrong size on RBExitStageObjectiveCoordinator_OnOperatingFinished");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnOperatingFinished, Component) == 0x000000, "Member 'RBExitStageObjectiveCoordinator_OnOperatingFinished::Component' has a wrong offset!");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnOperatingFinished, Player) == 0x000008, "Member 'RBExitStageObjectiveCoordinator_OnOperatingFinished::Player' has a wrong offset!");

// Function OPP.RBExitStageObjectiveCoordinator.OnPawnKilled
// 0x0010 (0x0010 - 0x0000)
struct RBExitStageObjectiveCoordinator_OnPawnKilled final
{
public:
	class ARBPawn*                                InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                SubjectActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExitStageObjectiveCoordinator_OnPawnKilled) == 0x000008, "Wrong alignment on RBExitStageObjectiveCoordinator_OnPawnKilled");
static_assert(sizeof(RBExitStageObjectiveCoordinator_OnPawnKilled) == 0x000010, "Wrong size on RBExitStageObjectiveCoordinator_OnPawnKilled");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnPawnKilled, InstigatorActor) == 0x000000, "Member 'RBExitStageObjectiveCoordinator_OnPawnKilled::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnPawnKilled, SubjectActor) == 0x000008, "Member 'RBExitStageObjectiveCoordinator_OnPawnKilled::SubjectActor' has a wrong offset!");

// Function OPP.RBExitStageObjectiveCoordinator.OnPawnRespawned
// 0x0008 (0x0008 - 0x0000)
struct RBExitStageObjectiveCoordinator_OnPawnRespawned final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExitStageObjectiveCoordinator_OnPawnRespawned) == 0x000008, "Wrong alignment on RBExitStageObjectiveCoordinator_OnPawnRespawned");
static_assert(sizeof(RBExitStageObjectiveCoordinator_OnPawnRespawned) == 0x000008, "Wrong size on RBExitStageObjectiveCoordinator_OnPawnRespawned");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnPawnRespawned, Pawn) == 0x000000, "Member 'RBExitStageObjectiveCoordinator_OnPawnRespawned::Pawn' has a wrong offset!");

// Function OPP.RBExitStageObjectiveCoordinator.OnPlayerRevived
// 0x0010 (0x0010 - 0x0000)
struct RBExitStageObjectiveCoordinator_OnPlayerRevived final
{
public:
	class ARBPlayer*                              InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              SubjectActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExitStageObjectiveCoordinator_OnPlayerRevived) == 0x000008, "Wrong alignment on RBExitStageObjectiveCoordinator_OnPlayerRevived");
static_assert(sizeof(RBExitStageObjectiveCoordinator_OnPlayerRevived) == 0x000010, "Wrong size on RBExitStageObjectiveCoordinator_OnPlayerRevived");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnPlayerRevived, InstigatorActor) == 0x000000, "Member 'RBExitStageObjectiveCoordinator_OnPlayerRevived::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnPlayerRevived, SubjectActor) == 0x000008, "Member 'RBExitStageObjectiveCoordinator_OnPlayerRevived::SubjectActor' has a wrong offset!");

// Function OPP.RBExitStageObjectiveCoordinator.OnPlayerSimpleDoAction
// 0x0010 (0x0010 - 0x0000)
struct RBExitStageObjectiveCoordinator_OnPlayerSimpleDoAction final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractibleComponent*               Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExitStageObjectiveCoordinator_OnPlayerSimpleDoAction) == 0x000008, "Wrong alignment on RBExitStageObjectiveCoordinator_OnPlayerSimpleDoAction");
static_assert(sizeof(RBExitStageObjectiveCoordinator_OnPlayerSimpleDoAction) == 0x000010, "Wrong size on RBExitStageObjectiveCoordinator_OnPlayerSimpleDoAction");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnPlayerSimpleDoAction, Player) == 0x000000, "Member 'RBExitStageObjectiveCoordinator_OnPlayerSimpleDoAction::Player' has a wrong offset!");
static_assert(offsetof(RBExitStageObjectiveCoordinator_OnPlayerSimpleDoAction, Component) == 0x000008, "Member 'RBExitStageObjectiveCoordinator_OnPlayerSimpleDoAction::Component' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.OnMatchSettingsUpdated
// 0x0024 (0x0024 - 0x0000)
struct RBExperimentBoardMenu_OnMatchSettingsUpdated final
{
public:
	struct FMatchSettings                         MatchSettings;                                     // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_OnMatchSettingsUpdated) == 0x000004, "Wrong alignment on RBExperimentBoardMenu_OnMatchSettingsUpdated");
static_assert(sizeof(RBExperimentBoardMenu_OnMatchSettingsUpdated) == 0x000024, "Wrong size on RBExperimentBoardMenu_OnMatchSettingsUpdated");
static_assert(offsetof(RBExperimentBoardMenu_OnMatchSettingsUpdated, MatchSettings) == 0x000000, "Member 'RBExperimentBoardMenu_OnMatchSettingsUpdated::MatchSettings' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.OnMatchStateUpdated
// 0x0028 (0x0028 - 0x0000)
struct RBExperimentBoardMenu_OnMatchStateUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchState                            MatchState;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_OnMatchStateUpdated) == 0x000008, "Wrong alignment on RBExperimentBoardMenu_OnMatchStateUpdated");
static_assert(sizeof(RBExperimentBoardMenu_OnMatchStateUpdated) == 0x000028, "Wrong size on RBExperimentBoardMenu_OnMatchStateUpdated");
static_assert(offsetof(RBExperimentBoardMenu_OnMatchStateUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBExperimentBoardMenu_OnMatchStateUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBExperimentBoardMenu_OnMatchStateUpdated, MatchState) == 0x000008, "Member 'RBExperimentBoardMenu_OnMatchStateUpdated::MatchState' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.SetMissionName
// 0x0008 (0x0008 - 0x0000)
struct RBExperimentBoardMenu_SetMissionName final
{
public:
	class FName                                   MissionName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_SetMissionName) == 0x000004, "Wrong alignment on RBExperimentBoardMenu_SetMissionName");
static_assert(sizeof(RBExperimentBoardMenu_SetMissionName) == 0x000008, "Wrong size on RBExperimentBoardMenu_SetMissionName");
static_assert(offsetof(RBExperimentBoardMenu_SetMissionName, MissionName) == 0x000000, "Member 'RBExperimentBoardMenu_SetMissionName::MissionName' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.SetStageName
// 0x0008 (0x0008 - 0x0000)
struct RBExperimentBoardMenu_SetStageName final
{
public:
	class FName                                   StageName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_SetStageName) == 0x000004, "Wrong alignment on RBExperimentBoardMenu_SetStageName");
static_assert(sizeof(RBExperimentBoardMenu_SetStageName) == 0x000008, "Wrong size on RBExperimentBoardMenu_SetStageName");
static_assert(offsetof(RBExperimentBoardMenu_SetStageName, StageName) == 0x000000, "Member 'RBExperimentBoardMenu_SetStageName::StageName' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.SetTrialChainId
// 0x0008 (0x0008 - 0x0000)
struct RBExperimentBoardMenu_SetTrialChainId final
{
public:
	class FName                                   TrialChainId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_SetTrialChainId) == 0x000004, "Wrong alignment on RBExperimentBoardMenu_SetTrialChainId");
static_assert(sizeof(RBExperimentBoardMenu_SetTrialChainId) == 0x000008, "Wrong size on RBExperimentBoardMenu_SetTrialChainId");
static_assert(offsetof(RBExperimentBoardMenu_SetTrialChainId, TrialChainId) == 0x000000, "Member 'RBExperimentBoardMenu_SetTrialChainId::TrialChainId' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.SetTrialId
// 0x0008 (0x0008 - 0x0000)
struct RBExperimentBoardMenu_SetTrialId final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_SetTrialId) == 0x000004, "Wrong alignment on RBExperimentBoardMenu_SetTrialId");
static_assert(sizeof(RBExperimentBoardMenu_SetTrialId) == 0x000008, "Wrong size on RBExperimentBoardMenu_SetTrialId");
static_assert(offsetof(RBExperimentBoardMenu_SetTrialId, TrialId) == 0x000000, "Member 'RBExperimentBoardMenu_SetTrialId::TrialId' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.CanCancelMatch
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentBoardMenu_CanCancelMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_CanCancelMatch) == 0x000001, "Wrong alignment on RBExperimentBoardMenu_CanCancelMatch");
static_assert(sizeof(RBExperimentBoardMenu_CanCancelMatch) == 0x000001, "Wrong size on RBExperimentBoardMenu_CanCancelMatch");
static_assert(offsetof(RBExperimentBoardMenu_CanCancelMatch, ReturnValue) == 0x000000, "Member 'RBExperimentBoardMenu_CanCancelMatch::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.CanStartMatch
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentBoardMenu_CanStartMatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_CanStartMatch) == 0x000001, "Wrong alignment on RBExperimentBoardMenu_CanStartMatch");
static_assert(sizeof(RBExperimentBoardMenu_CanStartMatch) == 0x000001, "Wrong size on RBExperimentBoardMenu_CanStartMatch");
static_assert(offsetof(RBExperimentBoardMenu_CanStartMatch, ReturnValue) == 0x000000, "Member 'RBExperimentBoardMenu_CanStartMatch::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.GetMatchCurrentPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct RBExperimentBoardMenu_GetMatchCurrentPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_GetMatchCurrentPlayerCount) == 0x000004, "Wrong alignment on RBExperimentBoardMenu_GetMatchCurrentPlayerCount");
static_assert(sizeof(RBExperimentBoardMenu_GetMatchCurrentPlayerCount) == 0x000004, "Wrong size on RBExperimentBoardMenu_GetMatchCurrentPlayerCount");
static_assert(offsetof(RBExperimentBoardMenu_GetMatchCurrentPlayerCount, ReturnValue) == 0x000000, "Member 'RBExperimentBoardMenu_GetMatchCurrentPlayerCount::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.GetMatchSettings
// 0x0024 (0x0024 - 0x0000)
struct RBExperimentBoardMenu_GetMatchSettings final
{
public:
	struct FMatchSettings                         ReturnValue;                                       // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_GetMatchSettings) == 0x000004, "Wrong alignment on RBExperimentBoardMenu_GetMatchSettings");
static_assert(sizeof(RBExperimentBoardMenu_GetMatchSettings) == 0x000024, "Wrong size on RBExperimentBoardMenu_GetMatchSettings");
static_assert(offsetof(RBExperimentBoardMenu_GetMatchSettings, ReturnValue) == 0x000000, "Member 'RBExperimentBoardMenu_GetMatchSettings::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentBoardMenu.IsMatchOwner
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentBoardMenu_IsMatchOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentBoardMenu_IsMatchOwner) == 0x000001, "Wrong alignment on RBExperimentBoardMenu_IsMatchOwner");
static_assert(sizeof(RBExperimentBoardMenu_IsMatchOwner) == 0x000001, "Wrong size on RBExperimentBoardMenu_IsMatchOwner");
static_assert(offsetof(RBExperimentBoardMenu_IsMatchOwner, ReturnValue) == 0x000000, "Member 'RBExperimentBoardMenu_IsMatchOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBPhotoFinishEntry.Event_Setup
// 0x00F0 (0x00F0 - 0x0000)
struct RBPhotoFinishEntry_Event_Setup final
{
public:
	struct FEndStagePlayerInfo                    Info;                                              // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPhotoFinishEntry_Event_Setup) == 0x000008, "Wrong alignment on RBPhotoFinishEntry_Event_Setup");
static_assert(sizeof(RBPhotoFinishEntry_Event_Setup) == 0x0000F0, "Wrong size on RBPhotoFinishEntry_Event_Setup");
static_assert(offsetof(RBPhotoFinishEntry_Event_Setup, Info) == 0x000000, "Member 'RBPhotoFinishEntry_Event_Setup::Info' has a wrong offset!");

// Function OPP.RBGarageDoor.GetCoopIconOffset
// 0x000C (0x000C - 0x0000)
struct RBGarageDoor_GetCoopIconOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGarageDoor_GetCoopIconOffset) == 0x000004, "Wrong alignment on RBGarageDoor_GetCoopIconOffset");
static_assert(sizeof(RBGarageDoor_GetCoopIconOffset) == 0x00000C, "Wrong size on RBGarageDoor_GetCoopIconOffset");
static_assert(offsetof(RBGarageDoor_GetCoopIconOffset, ReturnValue) == 0x000000, "Member 'RBGarageDoor_GetCoopIconOffset::ReturnValue' has a wrong offset!");

// Function OPP.RBGarageDoor.HasJack
// 0x0001 (0x0001 - 0x0000)
struct RBGarageDoor_HasJack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGarageDoor_HasJack) == 0x000001, "Wrong alignment on RBGarageDoor_HasJack");
static_assert(sizeof(RBGarageDoor_HasJack) == 0x000001, "Wrong size on RBGarageDoor_HasJack");
static_assert(offsetof(RBGarageDoor_HasJack, ReturnValue) == 0x000000, "Member 'RBGarageDoor_HasJack::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.OnGamePhaseUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_OnGamePhaseUpdated final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_OnGamePhaseUpdated) == 0x000001, "Wrong alignment on RBExperimentResultScreen_OnGamePhaseUpdated");
static_assert(sizeof(RBExperimentResultScreen_OnGamePhaseUpdated) == 0x000001, "Wrong size on RBExperimentResultScreen_OnGamePhaseUpdated");
static_assert(offsetof(RBExperimentResultScreen_OnGamePhaseUpdated, GamePhase) == 0x000000, "Member 'RBExperimentResultScreen_OnGamePhaseUpdated::GamePhase' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.OnLeaving
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_OnLeaving final
{
public:
	EPlayerLeaveTarget                            Target;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_OnLeaving) == 0x000001, "Wrong alignment on RBExperimentResultScreen_OnLeaving");
static_assert(sizeof(RBExperimentResultScreen_OnLeaving) == 0x000001, "Wrong size on RBExperimentResultScreen_OnLeaving");
static_assert(offsetof(RBExperimentResultScreen_OnLeaving, Target) == 0x000000, "Member 'RBExperimentResultScreen_OnLeaving::Target' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.OnPlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct RBExperimentResultScreen_OnPlayerLeftGame final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_OnPlayerLeftGame) == 0x000008, "Wrong alignment on RBExperimentResultScreen_OnPlayerLeftGame");
static_assert(sizeof(RBExperimentResultScreen_OnPlayerLeftGame) == 0x000008, "Wrong size on RBExperimentResultScreen_OnPlayerLeftGame");
static_assert(offsetof(RBExperimentResultScreen_OnPlayerLeftGame, RBPlayerState) == 0x000000, "Member 'RBExperimentResultScreen_OnPlayerLeftGame::RBPlayerState' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.CanLeave
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_CanLeave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_CanLeave) == 0x000001, "Wrong alignment on RBExperimentResultScreen_CanLeave");
static_assert(sizeof(RBExperimentResultScreen_CanLeave) == 0x000001, "Wrong size on RBExperimentResultScreen_CanLeave");
static_assert(offsetof(RBExperimentResultScreen_CanLeave, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_CanLeave::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.GetLoadingPercentage
// 0x0004 (0x0004 - 0x0000)
struct RBExperimentResultScreen_GetLoadingPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_GetLoadingPercentage) == 0x000004, "Wrong alignment on RBExperimentResultScreen_GetLoadingPercentage");
static_assert(sizeof(RBExperimentResultScreen_GetLoadingPercentage) == 0x000004, "Wrong size on RBExperimentResultScreen_GetLoadingPercentage");
static_assert(offsetof(RBExperimentResultScreen_GetLoadingPercentage, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_GetLoadingPercentage::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.GetRetrySecondsRemaining
// 0x0004 (0x0004 - 0x0000)
struct RBExperimentResultScreen_GetRetrySecondsRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_GetRetrySecondsRemaining) == 0x000004, "Wrong alignment on RBExperimentResultScreen_GetRetrySecondsRemaining");
static_assert(sizeof(RBExperimentResultScreen_GetRetrySecondsRemaining) == 0x000004, "Wrong size on RBExperimentResultScreen_GetRetrySecondsRemaining");
static_assert(offsetof(RBExperimentResultScreen_GetRetrySecondsRemaining, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_GetRetrySecondsRemaining::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.GetRetryTrialVotes
// 0x0004 (0x0004 - 0x0000)
struct RBExperimentResultScreen_GetRetryTrialVotes final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_GetRetryTrialVotes) == 0x000004, "Wrong alignment on RBExperimentResultScreen_GetRetryTrialVotes");
static_assert(sizeof(RBExperimentResultScreen_GetRetryTrialVotes) == 0x000004, "Wrong size on RBExperimentResultScreen_GetRetryTrialVotes");
static_assert(offsetof(RBExperimentResultScreen_GetRetryTrialVotes, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_GetRetryTrialVotes::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.GetRetryTrialVotesNecessary
// 0x0004 (0x0004 - 0x0000)
struct RBExperimentResultScreen_GetRetryTrialVotesNecessary final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_GetRetryTrialVotesNecessary) == 0x000004, "Wrong alignment on RBExperimentResultScreen_GetRetryTrialVotesNecessary");
static_assert(sizeof(RBExperimentResultScreen_GetRetryTrialVotesNecessary) == 0x000004, "Wrong size on RBExperimentResultScreen_GetRetryTrialVotesNecessary");
static_assert(offsetof(RBExperimentResultScreen_GetRetryTrialVotesNecessary, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_GetRetryTrialVotesNecessary::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.GetSecondsRemaining
// 0x0004 (0x0004 - 0x0000)
struct RBExperimentResultScreen_GetSecondsRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_GetSecondsRemaining) == 0x000004, "Wrong alignment on RBExperimentResultScreen_GetSecondsRemaining");
static_assert(sizeof(RBExperimentResultScreen_GetSecondsRemaining) == 0x000004, "Wrong size on RBExperimentResultScreen_GetSecondsRemaining");
static_assert(offsetof(RBExperimentResultScreen_GetSecondsRemaining, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_GetSecondsRemaining::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.HasRetryTrialVotePassed
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_HasRetryTrialVotePassed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_HasRetryTrialVotePassed) == 0x000001, "Wrong alignment on RBExperimentResultScreen_HasRetryTrialVotePassed");
static_assert(sizeof(RBExperimentResultScreen_HasRetryTrialVotePassed) == 0x000001, "Wrong size on RBExperimentResultScreen_HasRetryTrialVotePassed");
static_assert(offsetof(RBExperimentResultScreen_HasRetryTrialVotePassed, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_HasRetryTrialVotePassed::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.HasTrialToChain
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_HasTrialToChain final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_HasTrialToChain) == 0x000001, "Wrong alignment on RBExperimentResultScreen_HasTrialToChain");
static_assert(sizeof(RBExperimentResultScreen_HasTrialToChain) == 0x000001, "Wrong size on RBExperimentResultScreen_HasTrialToChain");
static_assert(offsetof(RBExperimentResultScreen_HasTrialToChain, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_HasTrialToChain::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.IsRetryFeatureEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_IsRetryFeatureEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_IsRetryFeatureEnabled) == 0x000001, "Wrong alignment on RBExperimentResultScreen_IsRetryFeatureEnabled");
static_assert(sizeof(RBExperimentResultScreen_IsRetryFeatureEnabled) == 0x000001, "Wrong size on RBExperimentResultScreen_IsRetryFeatureEnabled");
static_assert(offsetof(RBExperimentResultScreen_IsRetryFeatureEnabled, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_IsRetryFeatureEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.IsRetryTrialVoteInProgress
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_IsRetryTrialVoteInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_IsRetryTrialVoteInProgress) == 0x000001, "Wrong alignment on RBExperimentResultScreen_IsRetryTrialVoteInProgress");
static_assert(sizeof(RBExperimentResultScreen_IsRetryTrialVoteInProgress) == 0x000001, "Wrong size on RBExperimentResultScreen_IsRetryTrialVoteInProgress");
static_assert(offsetof(RBExperimentResultScreen_IsRetryTrialVoteInProgress, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_IsRetryTrialVoteInProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.IsReturningToLobbyWithParty
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_IsReturningToLobbyWithParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_IsReturningToLobbyWithParty) == 0x000001, "Wrong alignment on RBExperimentResultScreen_IsReturningToLobbyWithParty");
static_assert(sizeof(RBExperimentResultScreen_IsReturningToLobbyWithParty) == 0x000001, "Wrong size on RBExperimentResultScreen_IsReturningToLobbyWithParty");
static_assert(offsetof(RBExperimentResultScreen_IsReturningToLobbyWithParty, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_IsReturningToLobbyWithParty::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.IsStageSuccess
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_IsStageSuccess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_IsStageSuccess) == 0x000001, "Wrong alignment on RBExperimentResultScreen_IsStageSuccess");
static_assert(sizeof(RBExperimentResultScreen_IsStageSuccess) == 0x000001, "Wrong size on RBExperimentResultScreen_IsStageSuccess");
static_assert(offsetof(RBExperimentResultScreen_IsStageSuccess, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_IsStageSuccess::ReturnValue' has a wrong offset!");

// Function OPP.RBExperimentResultScreen.IsTrialChainingActive
// 0x0001 (0x0001 - 0x0000)
struct RBExperimentResultScreen_IsTrialChainingActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExperimentResultScreen_IsTrialChainingActive) == 0x000001, "Wrong alignment on RBExperimentResultScreen_IsTrialChainingActive");
static_assert(sizeof(RBExperimentResultScreen_IsTrialChainingActive) == 0x000001, "Wrong size on RBExperimentResultScreen_IsTrialChainingActive");
static_assert(offsetof(RBExperimentResultScreen_IsTrialChainingActive, ReturnValue) == 0x000000, "Member 'RBExperimentResultScreen_IsTrialChainingActive::ReturnValue' has a wrong offset!");

// Function OPP.RBHUD.AddStageIntroTime
// 0x0004 (0x0004 - 0x0000)
struct RBHUD_AddStageIntroTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_AddStageIntroTime) == 0x000004, "Wrong alignment on RBHUD_AddStageIntroTime");
static_assert(sizeof(RBHUD_AddStageIntroTime) == 0x000004, "Wrong size on RBHUD_AddStageIntroTime");
static_assert(offsetof(RBHUD_AddStageIntroTime, Time) == 0x000000, "Member 'RBHUD_AddStageIntroTime::Time' has a wrong offset!");

// Function OPP.RBHUD.BP_AddWorldIcon
// 0x0038 (0x0038 - 0x0000)
struct RBHUD_BP_AddWorldIcon final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntroDuration;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDuration;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldIconType                                IconType;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209C[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShowDuration;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209D[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209E[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUD_BP_AddWorldIcon) == 0x000008, "Wrong alignment on RBHUD_BP_AddWorldIcon");
static_assert(sizeof(RBHUD_BP_AddWorldIcon) == 0x000038, "Wrong size on RBHUD_BP_AddWorldIcon");
static_assert(offsetof(RBHUD_BP_AddWorldIcon, ID) == 0x000000, "Member 'RBHUD_BP_AddWorldIcon::ID' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_AddWorldIcon, IntroDuration) == 0x000008, "Member 'RBHUD_BP_AddWorldIcon::IntroDuration' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_AddWorldIcon, FadeInDuration) == 0x00000C, "Member 'RBHUD_BP_AddWorldIcon::FadeInDuration' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_AddWorldIcon, FadeOutDuration) == 0x000010, "Member 'RBHUD_BP_AddWorldIcon::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_AddWorldIcon, IconType) == 0x000014, "Member 'RBHUD_BP_AddWorldIcon::IconType' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_AddWorldIcon, ShowDuration) == 0x000018, "Member 'RBHUD_BP_AddWorldIcon::ShowDuration' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_AddWorldIcon, Actor) == 0x000020, "Member 'RBHUD_BP_AddWorldIcon::Actor' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_AddWorldIcon, Location) == 0x000028, "Member 'RBHUD_BP_AddWorldIcon::Location' has a wrong offset!");

// Function OPP.RBHUD.BP_GetWorldIconNum
// 0x0004 (0x0004 - 0x0000)
struct RBHUD_BP_GetWorldIconNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_BP_GetWorldIconNum) == 0x000004, "Wrong alignment on RBHUD_BP_GetWorldIconNum");
static_assert(sizeof(RBHUD_BP_GetWorldIconNum) == 0x000004, "Wrong size on RBHUD_BP_GetWorldIconNum");
static_assert(offsetof(RBHUD_BP_GetWorldIconNum, ReturnValue) == 0x000000, "Member 'RBHUD_BP_GetWorldIconNum::ReturnValue' has a wrong offset!");

// Function OPP.RBHUD.BP_RemoveWorldIcon
// 0x000C (0x000C - 0x0000)
struct RBHUD_BP_RemoveWorldIcon final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_BP_RemoveWorldIcon) == 0x000004, "Wrong alignment on RBHUD_BP_RemoveWorldIcon");
static_assert(sizeof(RBHUD_BP_RemoveWorldIcon) == 0x00000C, "Wrong size on RBHUD_BP_RemoveWorldIcon");
static_assert(offsetof(RBHUD_BP_RemoveWorldIcon, ID) == 0x000000, "Member 'RBHUD_BP_RemoveWorldIcon::ID' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_RemoveWorldIcon, Duration) == 0x000008, "Member 'RBHUD_BP_RemoveWorldIcon::Duration' has a wrong offset!");

// Function OPP.RBHUD.BP_SetAlwaysDisplayGotoIcons
// 0x0001 (0x0001 - 0x0000)
struct RBHUD_BP_SetAlwaysDisplayGotoIcons final
{
public:
	bool                                          AlwaysDisplayGotoIcons;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_BP_SetAlwaysDisplayGotoIcons) == 0x000001, "Wrong alignment on RBHUD_BP_SetAlwaysDisplayGotoIcons");
static_assert(sizeof(RBHUD_BP_SetAlwaysDisplayGotoIcons) == 0x000001, "Wrong size on RBHUD_BP_SetAlwaysDisplayGotoIcons");
static_assert(offsetof(RBHUD_BP_SetAlwaysDisplayGotoIcons, AlwaysDisplayGotoIcons) == 0x000000, "Member 'RBHUD_BP_SetAlwaysDisplayGotoIcons::AlwaysDisplayGotoIcons' has a wrong offset!");

// Function OPP.RBHUD.BP_SetMinigameProgressHUDOwner
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_BP_SetMinigameProgressHUDOwner final
{
public:
	class AActor*                                 ProgressOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_BP_SetMinigameProgressHUDOwner) == 0x000008, "Wrong alignment on RBHUD_BP_SetMinigameProgressHUDOwner");
static_assert(sizeof(RBHUD_BP_SetMinigameProgressHUDOwner) == 0x000008, "Wrong size on RBHUD_BP_SetMinigameProgressHUDOwner");
static_assert(offsetof(RBHUD_BP_SetMinigameProgressHUDOwner, ProgressOwner) == 0x000000, "Member 'RBHUD_BP_SetMinigameProgressHUDOwner::ProgressOwner' has a wrong offset!");

// Function OPP.RBHUD.BP_ShouldDrawWorldIcon
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_BP_ShouldDrawWorldIcon final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutsideOfRange;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209F[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUD_BP_ShouldDrawWorldIcon) == 0x000004, "Wrong alignment on RBHUD_BP_ShouldDrawWorldIcon");
static_assert(sizeof(RBHUD_BP_ShouldDrawWorldIcon) == 0x000008, "Wrong size on RBHUD_BP_ShouldDrawWorldIcon");
static_assert(offsetof(RBHUD_BP_ShouldDrawWorldIcon, Param_Index) == 0x000000, "Member 'RBHUD_BP_ShouldDrawWorldIcon::Param_Index' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_ShouldDrawWorldIcon, bOutsideOfRange) == 0x000004, "Member 'RBHUD_BP_ShouldDrawWorldIcon::bOutsideOfRange' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_ShouldDrawWorldIcon, ReturnValue) == 0x000005, "Member 'RBHUD_BP_ShouldDrawWorldIcon::ReturnValue' has a wrong offset!");

// Function OPP.RBHUD.BP_TryClearMinigameProgressHUDOwner
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_BP_TryClearMinigameProgressHUDOwner final
{
public:
	class AActor*                                 ProgressOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_BP_TryClearMinigameProgressHUDOwner) == 0x000008, "Wrong alignment on RBHUD_BP_TryClearMinigameProgressHUDOwner");
static_assert(sizeof(RBHUD_BP_TryClearMinigameProgressHUDOwner) == 0x000008, "Wrong size on RBHUD_BP_TryClearMinigameProgressHUDOwner");
static_assert(offsetof(RBHUD_BP_TryClearMinigameProgressHUDOwner, ProgressOwner) == 0x000000, "Member 'RBHUD_BP_TryClearMinigameProgressHUDOwner::ProgressOwner' has a wrong offset!");

// Function OPP.RBHUD.DisableIconTypes
// 0x0001 (0x0001 - 0x0000)
struct RBHUD_DisableIconTypes final
{
public:
	EWorldIconType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_DisableIconTypes) == 0x000001, "Wrong alignment on RBHUD_DisableIconTypes");
static_assert(sizeof(RBHUD_DisableIconTypes) == 0x000001, "Wrong size on RBHUD_DisableIconTypes");
static_assert(offsetof(RBHUD_DisableIconTypes, Type) == 0x000000, "Member 'RBHUD_DisableIconTypes::Type' has a wrong offset!");

// Function OPP.RBHUD.EnableIconTypes
// 0x0001 (0x0001 - 0x0000)
struct RBHUD_EnableIconTypes final
{
public:
	EWorldIconType                                Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_EnableIconTypes) == 0x000001, "Wrong alignment on RBHUD_EnableIconTypes");
static_assert(sizeof(RBHUD_EnableIconTypes) == 0x000001, "Wrong size on RBHUD_EnableIconTypes");
static_assert(offsetof(RBHUD_EnableIconTypes, Type) == 0x000000, "Member 'RBHUD_EnableIconTypes::Type' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnAddToSimulatedMouseLocation__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_OnAddToSimulatedMouseLocation__DelegateSignature final
{
public:
	struct FVector2D                              Amount;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnAddToSimulatedMouseLocation__DelegateSignature) == 0x000004, "Wrong alignment on RBHUD_OnAddToSimulatedMouseLocation__DelegateSignature");
static_assert(sizeof(RBHUD_OnAddToSimulatedMouseLocation__DelegateSignature) == 0x000008, "Wrong size on RBHUD_OnAddToSimulatedMouseLocation__DelegateSignature");
static_assert(offsetof(RBHUD_OnAddToSimulatedMouseLocation__DelegateSignature, Amount) == 0x000000, "Member 'RBHUD_OnAddToSimulatedMouseLocation__DelegateSignature::Amount' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnHudActionProgressChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_OnHudActionProgressChanged__DelegateSignature final
{
public:
	float                                         NewProgress;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionProgressContext                        Context;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A0[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUD_OnHudActionProgressChanged__DelegateSignature) == 0x000004, "Wrong alignment on RBHUD_OnHudActionProgressChanged__DelegateSignature");
static_assert(sizeof(RBHUD_OnHudActionProgressChanged__DelegateSignature) == 0x000008, "Wrong size on RBHUD_OnHudActionProgressChanged__DelegateSignature");
static_assert(offsetof(RBHUD_OnHudActionProgressChanged__DelegateSignature, NewProgress) == 0x000000, "Member 'RBHUD_OnHudActionProgressChanged__DelegateSignature::NewProgress' has a wrong offset!");
static_assert(offsetof(RBHUD_OnHudActionProgressChanged__DelegateSignature, Context) == 0x000004, "Member 'RBHUD_OnHudActionProgressChanged__DelegateSignature::Context' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnInventoryWheelIndexChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RBHUD_OnInventoryWheelIndexChanged__DelegateSignature final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnInventoryWheelIndexChanged__DelegateSignature) == 0x000004, "Wrong alignment on RBHUD_OnInventoryWheelIndexChanged__DelegateSignature");
static_assert(sizeof(RBHUD_OnInventoryWheelIndexChanged__DelegateSignature) == 0x000004, "Wrong size on RBHUD_OnInventoryWheelIndexChanged__DelegateSignature");
static_assert(offsetof(RBHUD_OnInventoryWheelIndexChanged__DelegateSignature, Param_Index) == 0x000000, "Member 'RBHUD_OnInventoryWheelIndexChanged__DelegateSignature::Param_Index' has a wrong offset!");

// Function OPP.RBHUD.OnLocalPlayerInit
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_OnLocalPlayerInit final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnLocalPlayerInit) == 0x000008, "Wrong alignment on RBHUD_OnLocalPlayerInit");
static_assert(sizeof(RBHUD_OnLocalPlayerInit) == 0x000008, "Wrong size on RBHUD_OnLocalPlayerInit");
static_assert(offsetof(RBHUD_OnLocalPlayerInit, Player) == 0x000000, "Member 'RBHUD_OnLocalPlayerInit::Player' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnMinigameProgressHUDOwnerChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_OnMinigameProgressHUDOwnerChanged__DelegateSignature final
{
public:
	class AActor*                                 ProgressOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnMinigameProgressHUDOwnerChanged__DelegateSignature) == 0x000008, "Wrong alignment on RBHUD_OnMinigameProgressHUDOwnerChanged__DelegateSignature");
static_assert(sizeof(RBHUD_OnMinigameProgressHUDOwnerChanged__DelegateSignature) == 0x000008, "Wrong size on RBHUD_OnMinigameProgressHUDOwnerChanged__DelegateSignature");
static_assert(offsetof(RBHUD_OnMinigameProgressHUDOwnerChanged__DelegateSignature, ProgressOwner) == 0x000000, "Member 'RBHUD_OnMinigameProgressHUDOwnerChanged__DelegateSignature::ProgressOwner' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnShowEndOfStageScreen__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct RBHUD_OnShowEndOfStageScreen__DelegateSignature final
{
public:
	struct FEndStageInfo                          ScreenInfo;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnShowEndOfStageScreen__DelegateSignature) == 0x000008, "Wrong alignment on RBHUD_OnShowEndOfStageScreen__DelegateSignature");
static_assert(sizeof(RBHUD_OnShowEndOfStageScreen__DelegateSignature) == 0x000030, "Wrong size on RBHUD_OnShowEndOfStageScreen__DelegateSignature");
static_assert(offsetof(RBHUD_OnShowEndOfStageScreen__DelegateSignature, ScreenInfo) == 0x000000, "Member 'RBHUD_OnShowEndOfStageScreen__DelegateSignature::ScreenInfo' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnShowGameMessage__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct RBHUD_OnShowGameMessage__DelegateSignature final
{
public:
	class FText                                   GameMessage;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameMessageCategory                          MessageCategory;                                   // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A1[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameMessageAudioParams                AudioParams;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnShowGameMessage__DelegateSignature) == 0x000008, "Wrong alignment on RBHUD_OnShowGameMessage__DelegateSignature");
static_assert(sizeof(RBHUD_OnShowGameMessage__DelegateSignature) == 0x000030, "Wrong size on RBHUD_OnShowGameMessage__DelegateSignature");
static_assert(offsetof(RBHUD_OnShowGameMessage__DelegateSignature, GameMessage) == 0x000000, "Member 'RBHUD_OnShowGameMessage__DelegateSignature::GameMessage' has a wrong offset!");
static_assert(offsetof(RBHUD_OnShowGameMessage__DelegateSignature, MessageCategory) == 0x000018, "Member 'RBHUD_OnShowGameMessage__DelegateSignature::MessageCategory' has a wrong offset!");
static_assert(offsetof(RBHUD_OnShowGameMessage__DelegateSignature, AudioParams) == 0x000020, "Member 'RBHUD_OnShowGameMessage__DelegateSignature::AudioParams' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnShowHUDTutorial__DelegateSignature
// 0x0040 (0x0040 - 0x0000)
struct RBHUD_OnShowHUDTutorial__DelegateSignature final
{
public:
	struct FHUDTutorialTextData                   TutorialData;                                      // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnShowHUDTutorial__DelegateSignature) == 0x000008, "Wrong alignment on RBHUD_OnShowHUDTutorial__DelegateSignature");
static_assert(sizeof(RBHUD_OnShowHUDTutorial__DelegateSignature) == 0x000040, "Wrong size on RBHUD_OnShowHUDTutorial__DelegateSignature");
static_assert(offsetof(RBHUD_OnShowHUDTutorial__DelegateSignature, TutorialData) == 0x000000, "Member 'RBHUD_OnShowHUDTutorial__DelegateSignature::TutorialData' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnShowInventoryWheel__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RBHUD_OnShowInventoryWheel__DelegateSignature final
{
public:
	EInventoryWheelMode                           Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnShowInventoryWheel__DelegateSignature) == 0x000001, "Wrong alignment on RBHUD_OnShowInventoryWheel__DelegateSignature");
static_assert(sizeof(RBHUD_OnShowInventoryWheel__DelegateSignature) == 0x000001, "Wrong size on RBHUD_OnShowInventoryWheel__DelegateSignature");
static_assert(offsetof(RBHUD_OnShowInventoryWheel__DelegateSignature, Mode) == 0x000000, "Member 'RBHUD_OnShowInventoryWheel__DelegateSignature::Mode' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnShowTutorialMessage__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct RBHUD_OnShowTutorialMessage__DelegateSignature final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnShowTutorialMessage__DelegateSignature) == 0x000008, "Wrong alignment on RBHUD_OnShowTutorialMessage__DelegateSignature");
static_assert(sizeof(RBHUD_OnShowTutorialMessage__DelegateSignature) == 0x000018, "Wrong size on RBHUD_OnShowTutorialMessage__DelegateSignature");
static_assert(offsetof(RBHUD_OnShowTutorialMessage__DelegateSignature, Message) == 0x000000, "Member 'RBHUD_OnShowTutorialMessage__DelegateSignature::Message' has a wrong offset!");

// Function OPP.RBHUD.OnStageEnded
// 0x0058 (0x0058 - 0x0000)
struct RBHUD_OnStageEnded final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsRestarting;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A2[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUD_OnStageEnded) == 0x000008, "Wrong alignment on RBHUD_OnStageEnded");
static_assert(sizeof(RBHUD_OnStageEnded) == 0x000058, "Wrong size on RBHUD_OnStageEnded");
static_assert(offsetof(RBHUD_OnStageEnded, StageID) == 0x000000, "Member 'RBHUD_OnStageEnded::StageID' has a wrong offset!");
static_assert(offsetof(RBHUD_OnStageEnded, MissionID) == 0x000028, "Member 'RBHUD_OnStageEnded::MissionID' has a wrong offset!");
static_assert(offsetof(RBHUD_OnStageEnded, IsRestarting) == 0x000050, "Member 'RBHUD_OnStageEnded::IsRestarting' has a wrong offset!");

// Function OPP.RBHUD.OnStartSpectatingPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_OnStartSpectatingPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnStartSpectatingPlayer) == 0x000008, "Wrong alignment on RBHUD_OnStartSpectatingPlayer");
static_assert(sizeof(RBHUD_OnStartSpectatingPlayer) == 0x000008, "Wrong size on RBHUD_OnStartSpectatingPlayer");
static_assert(offsetof(RBHUD_OnStartSpectatingPlayer, Player) == 0x000000, "Member 'RBHUD_OnStartSpectatingPlayer::Player' has a wrong offset!");

// DelegateFunction OPP.RBHUD.OnToggledPsychosisDebug__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RBHUD_OnToggledPsychosisDebug__DelegateSignature final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_OnToggledPsychosisDebug__DelegateSignature) == 0x000001, "Wrong alignment on RBHUD_OnToggledPsychosisDebug__DelegateSignature");
static_assert(sizeof(RBHUD_OnToggledPsychosisDebug__DelegateSignature) == 0x000001, "Wrong size on RBHUD_OnToggledPsychosisDebug__DelegateSignature");
static_assert(offsetof(RBHUD_OnToggledPsychosisDebug__DelegateSignature, Enabled) == 0x000000, "Member 'RBHUD_OnToggledPsychosisDebug__DelegateSignature::Enabled' has a wrong offset!");

// DelegateFunction OPP.RBHUD.PlayerActionStatusChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RBHUD_PlayerActionStatusChanged__DelegateSignature final
{
public:
	EPlayerActionStatus                           Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_PlayerActionStatusChanged__DelegateSignature) == 0x000001, "Wrong alignment on RBHUD_PlayerActionStatusChanged__DelegateSignature");
static_assert(sizeof(RBHUD_PlayerActionStatusChanged__DelegateSignature) == 0x000001, "Wrong size on RBHUD_PlayerActionStatusChanged__DelegateSignature");
static_assert(offsetof(RBHUD_PlayerActionStatusChanged__DelegateSignature, Status) == 0x000000, "Member 'RBHUD_PlayerActionStatusChanged__DelegateSignature::Status' has a wrong offset!");

// Function OPP.RBHUD.SetForcedConsideredInSASForHUD
// 0x0001 (0x0001 - 0x0000)
struct RBHUD_SetForcedConsideredInSASForHUD final
{
public:
	bool                                          bIsForcedConsideredInSAS;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_SetForcedConsideredInSASForHUD) == 0x000001, "Wrong alignment on RBHUD_SetForcedConsideredInSASForHUD");
static_assert(sizeof(RBHUD_SetForcedConsideredInSASForHUD) == 0x000001, "Wrong size on RBHUD_SetForcedConsideredInSASForHUD");
static_assert(offsetof(RBHUD_SetForcedConsideredInSASForHUD, bIsForcedConsideredInSAS) == 0x000000, "Member 'RBHUD_SetForcedConsideredInSASForHUD::bIsForcedConsideredInSAS' has a wrong offset!");

// Function OPP.RBHUD.UpdateWorldIconProjection
// 0x0020 (0x0020 - 0x0000)
struct RBHUD_UpdateWorldIconProjection final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutsideOfRange;                                   // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A3[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutsideRangeDirectionAngle;                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_UpdateWorldIconProjection) == 0x000004, "Wrong alignment on RBHUD_UpdateWorldIconProjection");
static_assert(sizeof(RBHUD_UpdateWorldIconProjection) == 0x000020, "Wrong size on RBHUD_UpdateWorldIconProjection");
static_assert(offsetof(RBHUD_UpdateWorldIconProjection, Param_Index) == 0x000000, "Member 'RBHUD_UpdateWorldIconProjection::Param_Index' has a wrong offset!");
static_assert(offsetof(RBHUD_UpdateWorldIconProjection, SizeX) == 0x000004, "Member 'RBHUD_UpdateWorldIconProjection::SizeX' has a wrong offset!");
static_assert(offsetof(RBHUD_UpdateWorldIconProjection, SizeY) == 0x000008, "Member 'RBHUD_UpdateWorldIconProjection::SizeY' has a wrong offset!");
static_assert(offsetof(RBHUD_UpdateWorldIconProjection, bOutsideOfRange) == 0x00000C, "Member 'RBHUD_UpdateWorldIconProjection::bOutsideOfRange' has a wrong offset!");
static_assert(offsetof(RBHUD_UpdateWorldIconProjection, OutsideRangeDirectionAngle) == 0x000010, "Member 'RBHUD_UpdateWorldIconProjection::OutsideRangeDirectionAngle' has a wrong offset!");
static_assert(offsetof(RBHUD_UpdateWorldIconProjection, ReturnValue) == 0x000014, "Member 'RBHUD_UpdateWorldIconProjection::ReturnValue' has a wrong offset!");

// Function OPP.RBHUD.BP_GetMaxTextCharacterWidth
// 0x0018 (0x0018 - 0x0000)
struct RBHUD_BP_GetMaxTextCharacterWidth final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A4[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUD_BP_GetMaxTextCharacterWidth) == 0x000008, "Wrong alignment on RBHUD_BP_GetMaxTextCharacterWidth");
static_assert(sizeof(RBHUD_BP_GetMaxTextCharacterWidth) == 0x000018, "Wrong size on RBHUD_BP_GetMaxTextCharacterWidth");
static_assert(offsetof(RBHUD_BP_GetMaxTextCharacterWidth, String) == 0x000000, "Member 'RBHUD_BP_GetMaxTextCharacterWidth::String' has a wrong offset!");
static_assert(offsetof(RBHUD_BP_GetMaxTextCharacterWidth, ReturnValue) == 0x000010, "Member 'RBHUD_BP_GetMaxTextCharacterWidth::ReturnValue' has a wrong offset!");

// Function OPP.RBHUD.BP_GetPsychosisDebugHudEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBHUD_BP_GetPsychosisDebugHudEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_BP_GetPsychosisDebugHudEnabled) == 0x000001, "Wrong alignment on RBHUD_BP_GetPsychosisDebugHudEnabled");
static_assert(sizeof(RBHUD_BP_GetPsychosisDebugHudEnabled) == 0x000001, "Wrong size on RBHUD_BP_GetPsychosisDebugHudEnabled");
static_assert(offsetof(RBHUD_BP_GetPsychosisDebugHudEnabled, ReturnValue) == 0x000000, "Member 'RBHUD_BP_GetPsychosisDebugHudEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBHUD.GetActionProgress
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_GetActionProgress final
{
public:
	EActionProgressContext                        Context;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20A5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_GetActionProgress) == 0x000004, "Wrong alignment on RBHUD_GetActionProgress");
static_assert(sizeof(RBHUD_GetActionProgress) == 0x000008, "Wrong size on RBHUD_GetActionProgress");
static_assert(offsetof(RBHUD_GetActionProgress, Context) == 0x000000, "Member 'RBHUD_GetActionProgress::Context' has a wrong offset!");
static_assert(offsetof(RBHUD_GetActionProgress, ReturnValue) == 0x000004, "Member 'RBHUD_GetActionProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBHUD.GetMinigameProgressHUDOwner
// 0x0008 (0x0008 - 0x0000)
struct RBHUD_GetMinigameProgressHUDOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_GetMinigameProgressHUDOwner) == 0x000008, "Wrong alignment on RBHUD_GetMinigameProgressHUDOwner");
static_assert(sizeof(RBHUD_GetMinigameProgressHUDOwner) == 0x000008, "Wrong size on RBHUD_GetMinigameProgressHUDOwner");
static_assert(offsetof(RBHUD_GetMinigameProgressHUDOwner, ReturnValue) == 0x000000, "Member 'RBHUD_GetMinigameProgressHUDOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBHUD.GetStageIntroRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct RBHUD_GetStageIntroRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_GetStageIntroRemainingTime) == 0x000004, "Wrong alignment on RBHUD_GetStageIntroRemainingTime");
static_assert(sizeof(RBHUD_GetStageIntroRemainingTime) == 0x000004, "Wrong size on RBHUD_GetStageIntroRemainingTime");
static_assert(offsetof(RBHUD_GetStageIntroRemainingTime, ReturnValue) == 0x000000, "Member 'RBHUD_GetStageIntroRemainingTime::ReturnValue' has a wrong offset!");

// Function OPP.RBHUD.ShouldDisplayExtraInfo
// 0x0001 (0x0001 - 0x0000)
struct RBHUD_ShouldDisplayExtraInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUD_ShouldDisplayExtraInfo) == 0x000001, "Wrong alignment on RBHUD_ShouldDisplayExtraInfo");
static_assert(sizeof(RBHUD_ShouldDisplayExtraInfo) == 0x000001, "Wrong size on RBHUD_ShouldDisplayExtraInfo");
static_assert(offsetof(RBHUD_ShouldDisplayExtraInfo, ReturnValue) == 0x000000, "Member 'RBHUD_ShouldDisplayExtraInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBTrapTriggerable.BP_LinkTriggerTrap
// 0x0008 (0x0008 - 0x0000)
struct RBTrapTriggerable_BP_LinkTriggerTrap final
{
public:
	class ARBWireTriggerTrap*                     TriggerTrap;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrapTriggerable_BP_LinkTriggerTrap) == 0x000008, "Wrong alignment on RBTrapTriggerable_BP_LinkTriggerTrap");
static_assert(sizeof(RBTrapTriggerable_BP_LinkTriggerTrap) == 0x000008, "Wrong size on RBTrapTriggerable_BP_LinkTriggerTrap");
static_assert(offsetof(RBTrapTriggerable_BP_LinkTriggerTrap, TriggerTrap) == 0x000000, "Member 'RBTrapTriggerable_BP_LinkTriggerTrap::TriggerTrap' has a wrong offset!");

// Function OPP.RBTrapTriggerable.IsCurrentlyTriggering
// 0x0001 (0x0001 - 0x0000)
struct RBTrapTriggerable_IsCurrentlyTriggering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrapTriggerable_IsCurrentlyTriggering) == 0x000001, "Wrong alignment on RBTrapTriggerable_IsCurrentlyTriggering");
static_assert(sizeof(RBTrapTriggerable_IsCurrentlyTriggering) == 0x000001, "Wrong size on RBTrapTriggerable_IsCurrentlyTriggering");
static_assert(offsetof(RBTrapTriggerable_IsCurrentlyTriggering, ReturnValue) == 0x000000, "Member 'RBTrapTriggerable_IsCurrentlyTriggering::ReturnValue' has a wrong offset!");

// Function OPP.RBExplosiveTrap.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBExplosiveTrap_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20AB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBExplosiveTrap_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBExplosiveTrap_OnComponentBeginOverlap");
static_assert(sizeof(RBExplosiveTrap_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBExplosiveTrap_OnComponentBeginOverlap");
static_assert(offsetof(RBExplosiveTrap_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBExplosiveTrap_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBExplosiveTrap_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBExplosiveTrap_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBExplosiveTrap_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBExplosiveTrap_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBExplosiveTrap_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBExplosiveTrap_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBExplosiveTrap_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBExplosiveTrap_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBExplosiveTrap_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBExplosiveTrap_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBExplosiveTrap.OnComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBExplosiveTrap_OnComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20AC[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBExplosiveTrap_OnComponentEndOverlap) == 0x000008, "Wrong alignment on RBExplosiveTrap_OnComponentEndOverlap");
static_assert(sizeof(RBExplosiveTrap_OnComponentEndOverlap) == 0x000020, "Wrong size on RBExplosiveTrap_OnComponentEndOverlap");
static_assert(offsetof(RBExplosiveTrap_OnComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBExplosiveTrap_OnComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBExplosiveTrap_OnComponentEndOverlap, OtherActor) == 0x000008, "Member 'RBExplosiveTrap_OnComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBExplosiveTrap_OnComponentEndOverlap, OtherComp) == 0x000010, "Member 'RBExplosiveTrap_OnComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBExplosiveTrap_OnComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBExplosiveTrap_OnComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBGamepadControlSchemeLayerEntry.Event_UpdateDescription
// 0x0018 (0x0018 - 0x0000)
struct RBGamepadControlSchemeLayerEntry_Event_UpdateDescription final
{
public:
	class FText                                   NewDescription;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGamepadControlSchemeLayerEntry_Event_UpdateDescription) == 0x000008, "Wrong alignment on RBGamepadControlSchemeLayerEntry_Event_UpdateDescription");
static_assert(sizeof(RBGamepadControlSchemeLayerEntry_Event_UpdateDescription) == 0x000018, "Wrong size on RBGamepadControlSchemeLayerEntry_Event_UpdateDescription");
static_assert(offsetof(RBGamepadControlSchemeLayerEntry_Event_UpdateDescription, NewDescription) == 0x000000, "Member 'RBGamepadControlSchemeLayerEntry_Event_UpdateDescription::NewDescription' has a wrong offset!");

// Function OPP.RBGamepadControlSchemeLayerEntry.UpdateIcon
// 0x0008 (0x0008 - 0x0000)
struct RBGamepadControlSchemeLayerEntry_UpdateIcon final
{
public:
	class UTexture2D*                             NewIcon;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGamepadControlSchemeLayerEntry_UpdateIcon) == 0x000008, "Wrong alignment on RBGamepadControlSchemeLayerEntry_UpdateIcon");
static_assert(sizeof(RBGamepadControlSchemeLayerEntry_UpdateIcon) == 0x000008, "Wrong size on RBGamepadControlSchemeLayerEntry_UpdateIcon");
static_assert(offsetof(RBGamepadControlSchemeLayerEntry_UpdateIcon, NewIcon) == 0x000000, "Member 'RBGamepadControlSchemeLayerEntry_UpdateIcon::NewIcon' has a wrong offset!");

// Function OPP.RBFaceAnimTalkerInterface.TryPlayFacialAnim
// 0x0018 (0x0018 - 0x0000)
struct RBFaceAnimTalkerInterface_TryPlayFacialAnim final
{
public:
	class FString                                 LineId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B4[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBFaceAnimTalkerInterface_TryPlayFacialAnim) == 0x000008, "Wrong alignment on RBFaceAnimTalkerInterface_TryPlayFacialAnim");
static_assert(sizeof(RBFaceAnimTalkerInterface_TryPlayFacialAnim) == 0x000018, "Wrong size on RBFaceAnimTalkerInterface_TryPlayFacialAnim");
static_assert(offsetof(RBFaceAnimTalkerInterface_TryPlayFacialAnim, LineId) == 0x000000, "Member 'RBFaceAnimTalkerInterface_TryPlayFacialAnim::LineId' has a wrong offset!");
static_assert(offsetof(RBFaceAnimTalkerInterface_TryPlayFacialAnim, ReturnValue) == 0x000010, "Member 'RBFaceAnimTalkerInterface_TryPlayFacialAnim::ReturnValue' has a wrong offset!");

// Function OPP.RBFaceAnimTalkerInterface.FindFaceAnimSequence
// 0x0018 (0x0018 - 0x0000)
struct RBFaceAnimTalkerInterface_FindFaceAnimSequence final
{
public:
	class FString                                 LineId;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFaceAnimTalkerInterface_FindFaceAnimSequence) == 0x000008, "Wrong alignment on RBFaceAnimTalkerInterface_FindFaceAnimSequence");
static_assert(sizeof(RBFaceAnimTalkerInterface_FindFaceAnimSequence) == 0x000018, "Wrong size on RBFaceAnimTalkerInterface_FindFaceAnimSequence");
static_assert(offsetof(RBFaceAnimTalkerInterface_FindFaceAnimSequence, LineId) == 0x000000, "Member 'RBFaceAnimTalkerInterface_FindFaceAnimSequence::LineId' has a wrong offset!");
static_assert(offsetof(RBFaceAnimTalkerInterface_FindFaceAnimSequence, ReturnValue) == 0x000010, "Member 'RBFaceAnimTalkerInterface_FindFaceAnimSequence::ReturnValue' has a wrong offset!");

// Function OPP.RBFaceAnimTalkerInterface.GetFaceFXSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct RBFaceAnimTalkerInterface_GetFaceFXSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFaceAnimTalkerInterface_GetFaceFXSkeletalMeshComponent) == 0x000008, "Wrong alignment on RBFaceAnimTalkerInterface_GetFaceFXSkeletalMeshComponent");
static_assert(sizeof(RBFaceAnimTalkerInterface_GetFaceFXSkeletalMeshComponent) == 0x000008, "Wrong size on RBFaceAnimTalkerInterface_GetFaceFXSkeletalMeshComponent");
static_assert(offsetof(RBFaceAnimTalkerInterface_GetFaceFXSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'RBFaceAnimTalkerInterface_GetFaceFXSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBFaceAnimTalkerInterface.GetVoiceComponent
// 0x0008 (0x0008 - 0x0000)
struct RBFaceAnimTalkerInterface_GetVoiceComponent final
{
public:
	class URBSoundComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFaceAnimTalkerInterface_GetVoiceComponent) == 0x000008, "Wrong alignment on RBFaceAnimTalkerInterface_GetVoiceComponent");
static_assert(sizeof(RBFaceAnimTalkerInterface_GetVoiceComponent) == 0x000008, "Wrong size on RBFaceAnimTalkerInterface_GetVoiceComponent");
static_assert(offsetof(RBFaceAnimTalkerInterface_GetVoiceComponent, ReturnValue) == 0x000000, "Member 'RBFaceAnimTalkerInterface_GetVoiceComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBFirePumpObjectiveCoordinator.Multicast_OnPumpInputAction
// 0x0001 (0x0001 - 0x0000)
struct RBFirePumpObjectiveCoordinator_Multicast_OnPumpInputAction final
{
public:
	ETimingInputResultType                        Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFirePumpObjectiveCoordinator_Multicast_OnPumpInputAction) == 0x000001, "Wrong alignment on RBFirePumpObjectiveCoordinator_Multicast_OnPumpInputAction");
static_assert(sizeof(RBFirePumpObjectiveCoordinator_Multicast_OnPumpInputAction) == 0x000001, "Wrong size on RBFirePumpObjectiveCoordinator_Multicast_OnPumpInputAction");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_Multicast_OnPumpInputAction, Result) == 0x000000, "Member 'RBFirePumpObjectiveCoordinator_Multicast_OnPumpInputAction::Result' has a wrong offset!");

// Function OPP.RBFirePumpObjectiveCoordinator.OnPanelActiveChangedEvent_Server
// 0x0010 (0x0010 - 0x0000)
struct RBFirePumpObjectiveCoordinator_OnPanelActiveChangedEvent_Server final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFirePumpObjectiveCoordinator_OnPanelActiveChangedEvent_Server) == 0x000008, "Wrong alignment on RBFirePumpObjectiveCoordinator_OnPanelActiveChangedEvent_Server");
static_assert(sizeof(RBFirePumpObjectiveCoordinator_OnPanelActiveChangedEvent_Server) == 0x000010, "Wrong size on RBFirePumpObjectiveCoordinator_OnPanelActiveChangedEvent_Server");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnPanelActiveChangedEvent_Server, Panel) == 0x000000, "Member 'RBFirePumpObjectiveCoordinator_OnPanelActiveChangedEvent_Server::Panel' has a wrong offset!");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnPanelActiveChangedEvent_Server, PawnInteracting) == 0x000008, "Member 'RBFirePumpObjectiveCoordinator_OnPanelActiveChangedEvent_Server::PawnInteracting' has a wrong offset!");

// Function OPP.RBFirePumpObjectiveCoordinator.OnPumpInput_Server
// 0x0020 (0x0020 - 0x0000)
struct RBFirePumpObjectiveCoordinator_OnPumpInput_Server final
{
public:
	class URBZoneTimingPanelComponent*            Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimingInputResultType                        Result;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20BB[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBFirePumpObjectiveCoordinator_OnPumpInput_Server) == 0x000008, "Wrong alignment on RBFirePumpObjectiveCoordinator_OnPumpInput_Server");
static_assert(sizeof(RBFirePumpObjectiveCoordinator_OnPumpInput_Server) == 0x000020, "Wrong size on RBFirePumpObjectiveCoordinator_OnPumpInput_Server");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnPumpInput_Server, Panel) == 0x000000, "Member 'RBFirePumpObjectiveCoordinator_OnPumpInput_Server::Panel' has a wrong offset!");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnPumpInput_Server, Player) == 0x000008, "Member 'RBFirePumpObjectiveCoordinator_OnPumpInput_Server::Player' has a wrong offset!");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnPumpInput_Server, TargetIndex) == 0x000010, "Member 'RBFirePumpObjectiveCoordinator_OnPumpInput_Server::TargetIndex' has a wrong offset!");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnPumpInput_Server, Timestamp) == 0x000014, "Member 'RBFirePumpObjectiveCoordinator_OnPumpInput_Server::Timestamp' has a wrong offset!");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnPumpInput_Server, Result) == 0x000018, "Member 'RBFirePumpObjectiveCoordinator_OnPumpInput_Server::Result' has a wrong offset!");

// Function OPP.RBFirePumpObjectiveCoordinator.OnPumpInteractionEvent_Server
// 0x0010 (0x0010 - 0x0000)
struct RBFirePumpObjectiveCoordinator_OnPumpInteractionEvent_Server final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractibleComponent*               Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFirePumpObjectiveCoordinator_OnPumpInteractionEvent_Server) == 0x000008, "Wrong alignment on RBFirePumpObjectiveCoordinator_OnPumpInteractionEvent_Server");
static_assert(sizeof(RBFirePumpObjectiveCoordinator_OnPumpInteractionEvent_Server) == 0x000010, "Wrong size on RBFirePumpObjectiveCoordinator_OnPumpInteractionEvent_Server");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnPumpInteractionEvent_Server, Interactor) == 0x000000, "Member 'RBFirePumpObjectiveCoordinator_OnPumpInteractionEvent_Server::Interactor' has a wrong offset!");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnPumpInteractionEvent_Server, Component) == 0x000008, "Member 'RBFirePumpObjectiveCoordinator_OnPumpInteractionEvent_Server::Component' has a wrong offset!");

// Function OPP.RBFirePumpObjectiveCoordinator.OnValveInitialInteraction_Server
// 0x0010 (0x0010 - 0x0000)
struct RBFirePumpObjectiveCoordinator_OnValveInitialInteraction_Server final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFirePumpObjectiveCoordinator_OnValveInitialInteraction_Server) == 0x000008, "Wrong alignment on RBFirePumpObjectiveCoordinator_OnValveInitialInteraction_Server");
static_assert(sizeof(RBFirePumpObjectiveCoordinator_OnValveInitialInteraction_Server) == 0x000010, "Wrong size on RBFirePumpObjectiveCoordinator_OnValveInitialInteraction_Server");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnValveInitialInteraction_Server, Panel) == 0x000000, "Member 'RBFirePumpObjectiveCoordinator_OnValveInitialInteraction_Server::Panel' has a wrong offset!");
static_assert(offsetof(RBFirePumpObjectiveCoordinator_OnValveInitialInteraction_Server, PawnInteracting) == 0x000008, "Member 'RBFirePumpObjectiveCoordinator_OnValveInitialInteraction_Server::PawnInteracting' has a wrong offset!");

// Function OPP.RBHUDObjectiveInWorld.GetStalkerCompletingTargets
// 0x0010 (0x0010 - 0x0000)
struct RBHUDObjectiveInWorld_GetStalkerCompletingTargets final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDObjectiveInWorld_GetStalkerCompletingTargets) == 0x000008, "Wrong alignment on RBHUDObjectiveInWorld_GetStalkerCompletingTargets");
static_assert(sizeof(RBHUDObjectiveInWorld_GetStalkerCompletingTargets) == 0x000010, "Wrong size on RBHUDObjectiveInWorld_GetStalkerCompletingTargets");
static_assert(offsetof(RBHUDObjectiveInWorld_GetStalkerCompletingTargets, ReturnValue) == 0x000000, "Member 'RBHUDObjectiveInWorld_GetStalkerCompletingTargets::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDObjectiveInWorld.IsOwningActorPinged
// 0x0001 (0x0001 - 0x0000)
struct RBHUDObjectiveInWorld_IsOwningActorPinged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDObjectiveInWorld_IsOwningActorPinged) == 0x000001, "Wrong alignment on RBHUDObjectiveInWorld_IsOwningActorPinged");
static_assert(sizeof(RBHUDObjectiveInWorld_IsOwningActorPinged) == 0x000001, "Wrong size on RBHUDObjectiveInWorld_IsOwningActorPinged");
static_assert(offsetof(RBHUDObjectiveInWorld_IsOwningActorPinged, ReturnValue) == 0x000000, "Member 'RBHUDObjectiveInWorld_IsOwningActorPinged::ReturnValue' has a wrong offset!");

// Function OPP.RBFloorMaterialBoxComponent.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBFloorMaterialBoxComponent_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C2[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFloorMaterialBoxComponent_BeginOverlap) == 0x000008, "Wrong alignment on RBFloorMaterialBoxComponent_BeginOverlap");
static_assert(sizeof(RBFloorMaterialBoxComponent_BeginOverlap) == 0x0000A8, "Wrong size on RBFloorMaterialBoxComponent_BeginOverlap");
static_assert(offsetof(RBFloorMaterialBoxComponent_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBFloorMaterialBoxComponent_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialBoxComponent_BeginOverlap, OtherActor) == 0x000008, "Member 'RBFloorMaterialBoxComponent_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialBoxComponent_BeginOverlap, OtherComp) == 0x000010, "Member 'RBFloorMaterialBoxComponent_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialBoxComponent_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBFloorMaterialBoxComponent_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialBoxComponent_BeginOverlap, bFromSweep) == 0x00001C, "Member 'RBFloorMaterialBoxComponent_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialBoxComponent_BeginOverlap, SweepResult) == 0x000020, "Member 'RBFloorMaterialBoxComponent_BeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBFloorMaterialBoxComponent.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBFloorMaterialBoxComponent_BP_SetEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFloorMaterialBoxComponent_BP_SetEnabled) == 0x000001, "Wrong alignment on RBFloorMaterialBoxComponent_BP_SetEnabled");
static_assert(sizeof(RBFloorMaterialBoxComponent_BP_SetEnabled) == 0x000001, "Wrong size on RBFloorMaterialBoxComponent_BP_SetEnabled");
static_assert(offsetof(RBFloorMaterialBoxComponent_BP_SetEnabled, bEnabledValue) == 0x000000, "Member 'RBFloorMaterialBoxComponent_BP_SetEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBFloorMaterialBoxComponent.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBFloorMaterialBoxComponent_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C3[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBFloorMaterialBoxComponent_EndOverlap) == 0x000008, "Wrong alignment on RBFloorMaterialBoxComponent_EndOverlap");
static_assert(sizeof(RBFloorMaterialBoxComponent_EndOverlap) == 0x000020, "Wrong size on RBFloorMaterialBoxComponent_EndOverlap");
static_assert(offsetof(RBFloorMaterialBoxComponent_EndOverlap, OverlappedComponent) == 0x000000, "Member 'RBFloorMaterialBoxComponent_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialBoxComponent_EndOverlap, OtherActor) == 0x000008, "Member 'RBFloorMaterialBoxComponent_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialBoxComponent_EndOverlap, OtherComp) == 0x000010, "Member 'RBFloorMaterialBoxComponent_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialBoxComponent_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBFloorMaterialBoxComponent_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBFloorMaterialVolume.BeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBFloorMaterialVolume_BeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C9[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFloorMaterialVolume_BeginOverlap) == 0x000008, "Wrong alignment on RBFloorMaterialVolume_BeginOverlap");
static_assert(sizeof(RBFloorMaterialVolume_BeginOverlap) == 0x0000A8, "Wrong size on RBFloorMaterialVolume_BeginOverlap");
static_assert(offsetof(RBFloorMaterialVolume_BeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBFloorMaterialVolume_BeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialVolume_BeginOverlap, OtherActor) == 0x000008, "Member 'RBFloorMaterialVolume_BeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialVolume_BeginOverlap, OtherComp) == 0x000010, "Member 'RBFloorMaterialVolume_BeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialVolume_BeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBFloorMaterialVolume_BeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialVolume_BeginOverlap, bFromSweep) == 0x00001C, "Member 'RBFloorMaterialVolume_BeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialVolume_BeginOverlap, SweepResult) == 0x000020, "Member 'RBFloorMaterialVolume_BeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBFloorMaterialVolume.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBFloorMaterialVolume_BP_SetEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFloorMaterialVolume_BP_SetEnabled) == 0x000001, "Wrong alignment on RBFloorMaterialVolume_BP_SetEnabled");
static_assert(sizeof(RBFloorMaterialVolume_BP_SetEnabled) == 0x000001, "Wrong size on RBFloorMaterialVolume_BP_SetEnabled");
static_assert(offsetof(RBFloorMaterialVolume_BP_SetEnabled, bEnabledValue) == 0x000000, "Member 'RBFloorMaterialVolume_BP_SetEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBFloorMaterialVolume.EndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBFloorMaterialVolume_EndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20CA[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBFloorMaterialVolume_EndOverlap) == 0x000008, "Wrong alignment on RBFloorMaterialVolume_EndOverlap");
static_assert(sizeof(RBFloorMaterialVolume_EndOverlap) == 0x000020, "Wrong size on RBFloorMaterialVolume_EndOverlap");
static_assert(offsetof(RBFloorMaterialVolume_EndOverlap, OverlappedComponent) == 0x000000, "Member 'RBFloorMaterialVolume_EndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialVolume_EndOverlap, OtherActor) == 0x000008, "Member 'RBFloorMaterialVolume_EndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialVolume_EndOverlap, OtherComp) == 0x000010, "Member 'RBFloorMaterialVolume_EndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBFloorMaterialVolume_EndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBFloorMaterialVolume_EndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBMinigameProgressHUDOwner.GetHUDMinigameProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct RBMinigameProgressHUDOwner_GetHUDMinigameProgressRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMinigameProgressHUDOwner_GetHUDMinigameProgressRatio) == 0x000004, "Wrong alignment on RBMinigameProgressHUDOwner_GetHUDMinigameProgressRatio");
static_assert(sizeof(RBMinigameProgressHUDOwner_GetHUDMinigameProgressRatio) == 0x000004, "Wrong size on RBMinigameProgressHUDOwner_GetHUDMinigameProgressRatio");
static_assert(offsetof(RBMinigameProgressHUDOwner_GetHUDMinigameProgressRatio, ReturnValue) == 0x000000, "Member 'RBMinigameProgressHUDOwner_GetHUDMinigameProgressRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBFrequencyMatchKnobComponent.Multicast_InitializeKnobPosition
// 0x0004 (0x0004 - 0x0000)
struct RBFrequencyMatchKnobComponent_Multicast_InitializeKnobPosition final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFrequencyMatchKnobComponent_Multicast_InitializeKnobPosition) == 0x000004, "Wrong alignment on RBFrequencyMatchKnobComponent_Multicast_InitializeKnobPosition");
static_assert(sizeof(RBFrequencyMatchKnobComponent_Multicast_InitializeKnobPosition) == 0x000004, "Wrong size on RBFrequencyMatchKnobComponent_Multicast_InitializeKnobPosition");
static_assert(offsetof(RBFrequencyMatchKnobComponent_Multicast_InitializeKnobPosition, Ratio) == 0x000000, "Member 'RBFrequencyMatchKnobComponent_Multicast_InitializeKnobPosition::Ratio' has a wrong offset!");

// Function OPP.RBFrequencyMatchKnobComponent.OnPlayerOnKnobChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBFrequencyMatchKnobComponent_OnPlayerOnKnobChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFrequencyMatchKnobComponent_OnPlayerOnKnobChangedCallback) == 0x000001, "Wrong alignment on RBFrequencyMatchKnobComponent_OnPlayerOnKnobChangedCallback");
static_assert(sizeof(RBFrequencyMatchKnobComponent_OnPlayerOnKnobChangedCallback) == 0x000001, "Wrong size on RBFrequencyMatchKnobComponent_OnPlayerOnKnobChangedCallback");
static_assert(offsetof(RBFrequencyMatchKnobComponent_OnPlayerOnKnobChangedCallback, ChangedType) == 0x000000, "Member 'RBFrequencyMatchKnobComponent_OnPlayerOnKnobChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBFrequencyMatchKnobComponent.GetCurrentRatioForDisplay
// 0x0004 (0x0004 - 0x0000)
struct RBFrequencyMatchKnobComponent_GetCurrentRatioForDisplay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFrequencyMatchKnobComponent_GetCurrentRatioForDisplay) == 0x000004, "Wrong alignment on RBFrequencyMatchKnobComponent_GetCurrentRatioForDisplay");
static_assert(sizeof(RBFrequencyMatchKnobComponent_GetCurrentRatioForDisplay) == 0x000004, "Wrong size on RBFrequencyMatchKnobComponent_GetCurrentRatioForDisplay");
static_assert(offsetof(RBFrequencyMatchKnobComponent_GetCurrentRatioForDisplay, ReturnValue) == 0x000000, "Member 'RBFrequencyMatchKnobComponent_GetCurrentRatioForDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBFrequencyMatchKnobComponent.GetIsCompletedForDisplay
// 0x0001 (0x0001 - 0x0000)
struct RBFrequencyMatchKnobComponent_GetIsCompletedForDisplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFrequencyMatchKnobComponent_GetIsCompletedForDisplay) == 0x000001, "Wrong alignment on RBFrequencyMatchKnobComponent_GetIsCompletedForDisplay");
static_assert(sizeof(RBFrequencyMatchKnobComponent_GetIsCompletedForDisplay) == 0x000001, "Wrong size on RBFrequencyMatchKnobComponent_GetIsCompletedForDisplay");
static_assert(offsetof(RBFrequencyMatchKnobComponent_GetIsCompletedForDisplay, ReturnValue) == 0x000000, "Member 'RBFrequencyMatchKnobComponent_GetIsCompletedForDisplay::ReturnValue' has a wrong offset!");

// Function OPP.RBFrequencyMatchKnobComponent.IsLocallyFocused
// 0x0001 (0x0001 - 0x0000)
struct RBFrequencyMatchKnobComponent_IsLocallyFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFrequencyMatchKnobComponent_IsLocallyFocused) == 0x000001, "Wrong alignment on RBFrequencyMatchKnobComponent_IsLocallyFocused");
static_assert(sizeof(RBFrequencyMatchKnobComponent_IsLocallyFocused) == 0x000001, "Wrong size on RBFrequencyMatchKnobComponent_IsLocallyFocused");
static_assert(offsetof(RBFrequencyMatchKnobComponent_IsLocallyFocused, ReturnValue) == 0x000000, "Member 'RBFrequencyMatchKnobComponent_IsLocallyFocused::ReturnValue' has a wrong offset!");

// Function OPP.RBFXManager.BP_StartAdditiveFOVAnim
// 0x0008 (0x0008 - 0x0000)
struct RBFXManager_BP_StartAdditiveFOVAnim final
{
public:
	const class UCurveFloat*                      FOVCurve;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFXManager_BP_StartAdditiveFOVAnim) == 0x000008, "Wrong alignment on RBFXManager_BP_StartAdditiveFOVAnim");
static_assert(sizeof(RBFXManager_BP_StartAdditiveFOVAnim) == 0x000008, "Wrong size on RBFXManager_BP_StartAdditiveFOVAnim");
static_assert(offsetof(RBFXManager_BP_StartAdditiveFOVAnim, FOVCurve) == 0x000000, "Member 'RBFXManager_BP_StartAdditiveFOVAnim::FOVCurve' has a wrong offset!");

// Function OPP.RBFXManager.DisableGameplayEffectsFor
// 0x0008 (0x0008 - 0x0000)
struct RBFXManager_DisableGameplayEffectsFor final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFXManager_DisableGameplayEffectsFor) == 0x000004, "Wrong alignment on RBFXManager_DisableGameplayEffectsFor");
static_assert(sizeof(RBFXManager_DisableGameplayEffectsFor) == 0x000008, "Wrong size on RBFXManager_DisableGameplayEffectsFor");
static_assert(offsetof(RBFXManager_DisableGameplayEffectsFor, ControlName) == 0x000000, "Member 'RBFXManager_DisableGameplayEffectsFor::ControlName' has a wrong offset!");

// Function OPP.RBFXManager.EnableGameplayEffectsFor
// 0x0008 (0x0008 - 0x0000)
struct RBFXManager_EnableGameplayEffectsFor final
{
public:
	class FName                                   ControlName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFXManager_EnableGameplayEffectsFor) == 0x000004, "Wrong alignment on RBFXManager_EnableGameplayEffectsFor");
static_assert(sizeof(RBFXManager_EnableGameplayEffectsFor) == 0x000008, "Wrong size on RBFXManager_EnableGameplayEffectsFor");
static_assert(offsetof(RBFXManager_EnableGameplayEffectsFor, ControlName) == 0x000000, "Member 'RBFXManager_EnableGameplayEffectsFor::ControlName' has a wrong offset!");

// Function OPP.RBFXManager.SetBrightnessCalibrationMode
// 0x0002 (0x0002 - 0x0000)
struct RBFXManager_SetBrightnessCalibrationMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHDR;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFXManager_SetBrightnessCalibrationMode) == 0x000001, "Wrong alignment on RBFXManager_SetBrightnessCalibrationMode");
static_assert(sizeof(RBFXManager_SetBrightnessCalibrationMode) == 0x000002, "Wrong size on RBFXManager_SetBrightnessCalibrationMode");
static_assert(offsetof(RBFXManager_SetBrightnessCalibrationMode, bEnable) == 0x000000, "Member 'RBFXManager_SetBrightnessCalibrationMode::bEnable' has a wrong offset!");
static_assert(offsetof(RBFXManager_SetBrightnessCalibrationMode, bHDR) == 0x000001, "Member 'RBFXManager_SetBrightnessCalibrationMode::bHDR' has a wrong offset!");

// Function OPP.RBFXManager.BP_AreGameplayEffectsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBFXManager_BP_AreGameplayEffectsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBFXManager_BP_AreGameplayEffectsEnabled) == 0x000001, "Wrong alignment on RBFXManager_BP_AreGameplayEffectsEnabled");
static_assert(sizeof(RBFXManager_BP_AreGameplayEffectsEnabled) == 0x000001, "Wrong size on RBFXManager_BP_AreGameplayEffectsEnabled");
static_assert(offsetof(RBFXManager_BP_AreGameplayEffectsEnabled, ReturnValue) == 0x000000, "Member 'RBFXManager_BP_AreGameplayEffectsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameMode.BP_GetCurrentStageID
// 0x0028 (0x0028 - 0x0000)
struct RBGameMode_BP_GetCurrentStageID final
{
public:
	struct FRBStageID                             ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameMode_BP_GetCurrentStageID) == 0x000008, "Wrong alignment on RBGameMode_BP_GetCurrentStageID");
static_assert(sizeof(RBGameMode_BP_GetCurrentStageID) == 0x000028, "Wrong size on RBGameMode_BP_GetCurrentStageID");
static_assert(offsetof(RBGameMode_BP_GetCurrentStageID, ReturnValue) == 0x000000, "Member 'RBGameMode_BP_GetCurrentStageID::ReturnValue' has a wrong offset!");

// Function OPP.RBGameMode.Cheat_ForceGamePhase
// 0x0001 (0x0001 - 0x0000)
struct RBGameMode_Cheat_ForceGamePhase final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameMode_Cheat_ForceGamePhase) == 0x000001, "Wrong alignment on RBGameMode_Cheat_ForceGamePhase");
static_assert(sizeof(RBGameMode_Cheat_ForceGamePhase) == 0x000001, "Wrong size on RBGameMode_Cheat_ForceGamePhase");
static_assert(offsetof(RBGameMode_Cheat_ForceGamePhase, GamePhase) == 0x000000, "Member 'RBGameMode_Cheat_ForceGamePhase::GamePhase' has a wrong offset!");

// Function OPP.RBGameMode.Cheat_ForceMissionID
// 0x0030 (0x0030 - 0x0000)
struct RBGameMode_Cheat_ForceMissionID final
{
public:
	struct FRBMissionID                           MissionID;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   TrialId;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameMode_Cheat_ForceMissionID) == 0x000008, "Wrong alignment on RBGameMode_Cheat_ForceMissionID");
static_assert(sizeof(RBGameMode_Cheat_ForceMissionID) == 0x000030, "Wrong size on RBGameMode_Cheat_ForceMissionID");
static_assert(offsetof(RBGameMode_Cheat_ForceMissionID, MissionID) == 0x000000, "Member 'RBGameMode_Cheat_ForceMissionID::MissionID' has a wrong offset!");
static_assert(offsetof(RBGameMode_Cheat_ForceMissionID, TrialId) == 0x000028, "Member 'RBGameMode_Cheat_ForceMissionID::TrialId' has a wrong offset!");

// Function OPP.RBGameMode.OnObjectiveCoordinatorStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBGameMode_OnObjectiveCoordinatorStateChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveCoordinatorState                    State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameMode_OnObjectiveCoordinatorStateChanged) == 0x000008, "Wrong alignment on RBGameMode_OnObjectiveCoordinatorStateChanged");
static_assert(sizeof(RBGameMode_OnObjectiveCoordinatorStateChanged) == 0x000010, "Wrong size on RBGameMode_OnObjectiveCoordinatorStateChanged");
static_assert(offsetof(RBGameMode_OnObjectiveCoordinatorStateChanged, Coordinator) == 0x000000, "Member 'RBGameMode_OnObjectiveCoordinatorStateChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(RBGameMode_OnObjectiveCoordinatorStateChanged, State) == 0x000008, "Member 'RBGameMode_OnObjectiveCoordinatorStateChanged::State' has a wrong offset!");

// Function OPP.RBGameMode.OnPawnKilled
// 0x0010 (0x0010 - 0x0000)
struct RBGameMode_OnPawnKilled final
{
public:
	class ARBPawn*                                InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                SubjectActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameMode_OnPawnKilled) == 0x000008, "Wrong alignment on RBGameMode_OnPawnKilled");
static_assert(sizeof(RBGameMode_OnPawnKilled) == 0x000010, "Wrong size on RBGameMode_OnPawnKilled");
static_assert(offsetof(RBGameMode_OnPawnKilled, InstigatorActor) == 0x000000, "Member 'RBGameMode_OnPawnKilled::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBGameMode_OnPawnKilled, SubjectActor) == 0x000008, "Member 'RBGameMode_OnPawnKilled::SubjectActor' has a wrong offset!");

// Function OPP.RBGameMode.SetBackupPlayerRespawnPoint
// 0x0008 (0x0008 - 0x0000)
struct RBGameMode_SetBackupPlayerRespawnPoint final
{
public:
	class AActor*                                 RespawnPoint;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameMode_SetBackupPlayerRespawnPoint) == 0x000008, "Wrong alignment on RBGameMode_SetBackupPlayerRespawnPoint");
static_assert(sizeof(RBGameMode_SetBackupPlayerRespawnPoint) == 0x000008, "Wrong size on RBGameMode_SetBackupPlayerRespawnPoint");
static_assert(offsetof(RBGameMode_SetBackupPlayerRespawnPoint, RespawnPoint) == 0x000000, "Member 'RBGameMode_SetBackupPlayerRespawnPoint::RespawnPoint' has a wrong offset!");

// Function OPP.RBGameMode.GetPlayersReadyToRespawn
// 0x0010 (0x0010 - 0x0000)
struct RBGameMode_GetPlayersReadyToRespawn final
{
public:
	TArray<class ARBController*>                  OutPlayers;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameMode_GetPlayersReadyToRespawn) == 0x000008, "Wrong alignment on RBGameMode_GetPlayersReadyToRespawn");
static_assert(sizeof(RBGameMode_GetPlayersReadyToRespawn) == 0x000010, "Wrong size on RBGameMode_GetPlayersReadyToRespawn");
static_assert(offsetof(RBGameMode_GetPlayersReadyToRespawn, OutPlayers) == 0x000000, "Member 'RBGameMode_GetPlayersReadyToRespawn::OutPlayers' has a wrong offset!");

// Function OPP.RBGameMode.HasAnyPlayerExitedStartingSAS
// 0x0001 (0x0001 - 0x0000)
struct RBGameMode_HasAnyPlayerExitedStartingSAS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameMode_HasAnyPlayerExitedStartingSAS) == 0x000001, "Wrong alignment on RBGameMode_HasAnyPlayerExitedStartingSAS");
static_assert(sizeof(RBGameMode_HasAnyPlayerExitedStartingSAS) == 0x000001, "Wrong size on RBGameMode_HasAnyPlayerExitedStartingSAS");
static_assert(offsetof(RBGameMode_HasAnyPlayerExitedStartingSAS, ReturnValue) == 0x000000, "Member 'RBGameMode_HasAnyPlayerExitedStartingSAS::ReturnValue' has a wrong offset!");

// Function OPP.RBGameMode.IsStageReady
// 0x0001 (0x0001 - 0x0000)
struct RBGameMode_IsStageReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameMode_IsStageReady) == 0x000001, "Wrong alignment on RBGameMode_IsStageReady");
static_assert(sizeof(RBGameMode_IsStageReady) == 0x000001, "Wrong size on RBGameMode_IsStageReady");
static_assert(offsetof(RBGameMode_IsStageReady, ReturnValue) == 0x000000, "Member 'RBGameMode_IsStageReady::ReturnValue' has a wrong offset!");

// Function OPP.RBGameMode.IsStageStarted
// 0x0001 (0x0001 - 0x0000)
struct RBGameMode_IsStageStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameMode_IsStageStarted) == 0x000001, "Wrong alignment on RBGameMode_IsStageStarted");
static_assert(sizeof(RBGameMode_IsStageStarted) == 0x000001, "Wrong size on RBGameMode_IsStageStarted");
static_assert(offsetof(RBGameMode_IsStageStarted, ReturnValue) == 0x000000, "Member 'RBGameMode_IsStageStarted::ReturnValue' has a wrong offset!");

// Function OPP.RBGameModeMainMenu.GetMainMenuProgressionDetails
// 0x0060 (0x0060 - 0x0000)
struct RBGameModeMainMenu_GetMainMenuProgressionDetails final
{
public:
	struct FMainMenuProgressionDetails            ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeMainMenu_GetMainMenuProgressionDetails) == 0x000008, "Wrong alignment on RBGameModeMainMenu_GetMainMenuProgressionDetails");
static_assert(sizeof(RBGameModeMainMenu_GetMainMenuProgressionDetails) == 0x000060, "Wrong size on RBGameModeMainMenu_GetMainMenuProgressionDetails");
static_assert(offsetof(RBGameModeMainMenu_GetMainMenuProgressionDetails, ReturnValue) == 0x000000, "Member 'RBGameModeMainMenu_GetMainMenuProgressionDetails::ReturnValue' has a wrong offset!");

// Function OPP.RBGameModeMainMenu.OnInputKey
// 0x0020 (0x0020 - 0x0000)
struct RBGameModeMainMenu_OnInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20E8[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameModeMainMenu_OnInputKey) == 0x000008, "Wrong alignment on RBGameModeMainMenu_OnInputKey");
static_assert(sizeof(RBGameModeMainMenu_OnInputKey) == 0x000020, "Wrong size on RBGameModeMainMenu_OnInputKey");
static_assert(offsetof(RBGameModeMainMenu_OnInputKey, Key) == 0x000000, "Member 'RBGameModeMainMenu_OnInputKey::Key' has a wrong offset!");
static_assert(offsetof(RBGameModeMainMenu_OnInputKey, EventType) == 0x000018, "Member 'RBGameModeMainMenu_OnInputKey::EventType' has a wrong offset!");
static_assert(offsetof(RBGameModeMainMenu_OnInputKey, bGamepad) == 0x000019, "Member 'RBGameModeMainMenu_OnInputKey::bGamepad' has a wrong offset!");

// Function OPP.RBGameModeMainMenu.OnMenuButtonClicked
// 0x0001 (0x0001 - 0x0000)
struct RBGameModeMainMenu_OnMenuButtonClicked final
{
public:
	EMainMenuButton                               Button;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeMainMenu_OnMenuButtonClicked) == 0x000001, "Wrong alignment on RBGameModeMainMenu_OnMenuButtonClicked");
static_assert(sizeof(RBGameModeMainMenu_OnMenuButtonClicked) == 0x000001, "Wrong size on RBGameModeMainMenu_OnMenuButtonClicked");
static_assert(offsetof(RBGameModeMainMenu_OnMenuButtonClicked, Button) == 0x000000, "Member 'RBGameModeMainMenu_OnMenuButtonClicked::Button' has a wrong offset!");

// Function OPP.RBGameModeMainMenu.OnOperationStatusChanged
// 0x0002 (0x0002 - 0x0000)
struct RBGameModeMainMenu_OnOperationStatusChanged final
{
public:
	bool                                          bPending;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeMainMenu_OnOperationStatusChanged) == 0x000001, "Wrong alignment on RBGameModeMainMenu_OnOperationStatusChanged");
static_assert(sizeof(RBGameModeMainMenu_OnOperationStatusChanged) == 0x000002, "Wrong size on RBGameModeMainMenu_OnOperationStatusChanged");
static_assert(offsetof(RBGameModeMainMenu_OnOperationStatusChanged, bPending) == 0x000000, "Member 'RBGameModeMainMenu_OnOperationStatusChanged::bPending' has a wrong offset!");
static_assert(offsetof(RBGameModeMainMenu_OnOperationStatusChanged, bSucceeded) == 0x000001, "Member 'RBGameModeMainMenu_OnOperationStatusChanged::bSucceeded' has a wrong offset!");

// Function OPP.RBGameModeMainMenu.CanPlay
// 0x0001 (0x0001 - 0x0000)
struct RBGameModeMainMenu_CanPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeMainMenu_CanPlay) == 0x000001, "Wrong alignment on RBGameModeMainMenu_CanPlay");
static_assert(sizeof(RBGameModeMainMenu_CanPlay) == 0x000001, "Wrong size on RBGameModeMainMenu_CanPlay");
static_assert(offsetof(RBGameModeMainMenu_CanPlay, ReturnValue) == 0x000000, "Member 'RBGameModeMainMenu_CanPlay::ReturnValue' has a wrong offset!");

// Function OPP.RBGameModeMainMenu.CanRejoinParty
// 0x0001 (0x0001 - 0x0000)
struct RBGameModeMainMenu_CanRejoinParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeMainMenu_CanRejoinParty) == 0x000001, "Wrong alignment on RBGameModeMainMenu_CanRejoinParty");
static_assert(sizeof(RBGameModeMainMenu_CanRejoinParty) == 0x000001, "Wrong size on RBGameModeMainMenu_CanRejoinParty");
static_assert(offsetof(RBGameModeMainMenu_CanRejoinParty, ReturnValue) == 0x000000, "Member 'RBGameModeMainMenu_CanRejoinParty::ReturnValue' has a wrong offset!");

// Function OPP.RBGameModeMainMenu.CanRejoinSoloGameSession
// 0x0001 (0x0001 - 0x0000)
struct RBGameModeMainMenu_CanRejoinSoloGameSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeMainMenu_CanRejoinSoloGameSession) == 0x000001, "Wrong alignment on RBGameModeMainMenu_CanRejoinSoloGameSession");
static_assert(sizeof(RBGameModeMainMenu_CanRejoinSoloGameSession) == 0x000001, "Wrong size on RBGameModeMainMenu_CanRejoinSoloGameSession");
static_assert(offsetof(RBGameModeMainMenu_CanRejoinSoloGameSession, ReturnValue) == 0x000000, "Member 'RBGameModeMainMenu_CanRejoinSoloGameSession::ReturnValue' has a wrong offset!");

// Function OPP.RBGameModeMainMenu.IsPlayEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameModeMainMenu_IsPlayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameModeMainMenu_IsPlayEnabled) == 0x000001, "Wrong alignment on RBGameModeMainMenu_IsPlayEnabled");
static_assert(sizeof(RBGameModeMainMenu_IsPlayEnabled) == 0x000001, "Wrong size on RBGameModeMainMenu_IsPlayEnabled");
static_assert(offsetof(RBGameModeMainMenu_IsPlayEnabled, ReturnValue) == 0x000000, "Member 'RBGameModeMainMenu_IsPlayEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameplayTriggerComponent.GetOverlappingActors
// 0x0010 (0x0010 - 0x0000)
struct RBGameplayTriggerComponent_GetOverlappingActors final
{
public:
	TArray<class AActor*>                         Out_Actors;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameplayTriggerComponent_GetOverlappingActors) == 0x000008, "Wrong alignment on RBGameplayTriggerComponent_GetOverlappingActors");
static_assert(sizeof(RBGameplayTriggerComponent_GetOverlappingActors) == 0x000010, "Wrong size on RBGameplayTriggerComponent_GetOverlappingActors");
static_assert(offsetof(RBGameplayTriggerComponent_GetOverlappingActors, Out_Actors) == 0x000000, "Member 'RBGameplayTriggerComponent_GetOverlappingActors::Out_Actors' has a wrong offset!");

// Function OPP.RBGameplayTriggerComponent.OnActorOverlapped
// 0x0010 (0x0010 - 0x0000)
struct RBGameplayTriggerComponent_OnActorOverlapped final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameplayTriggerComponent_OnActorOverlapped) == 0x000008, "Wrong alignment on RBGameplayTriggerComponent_OnActorOverlapped");
static_assert(sizeof(RBGameplayTriggerComponent_OnActorOverlapped) == 0x000010, "Wrong size on RBGameplayTriggerComponent_OnActorOverlapped");
static_assert(offsetof(RBGameplayTriggerComponent_OnActorOverlapped, OverlappedActor) == 0x000000, "Member 'RBGameplayTriggerComponent_OnActorOverlapped::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBGameplayTriggerComponent_OnActorOverlapped, OtherActor) == 0x000008, "Member 'RBGameplayTriggerComponent_OnActorOverlapped::OtherActor' has a wrong offset!");

// Function OPP.RBGameplayTriggerComponent.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBGameplayTriggerComponent_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20EF[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameplayTriggerComponent_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBGameplayTriggerComponent_OnComponentBeginOverlap");
static_assert(sizeof(RBGameplayTriggerComponent_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBGameplayTriggerComponent_OnComponentBeginOverlap");
static_assert(offsetof(RBGameplayTriggerComponent_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBGameplayTriggerComponent_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBGameplayTriggerComponent_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBGameplayTriggerComponent_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBGameplayTriggerComponent_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBGameplayTriggerComponent_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBGameplayTriggerComponent_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBGameplayTriggerComponent_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBGameplayTriggerComponent_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBGameplayTriggerComponent_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBGameplayTriggerComponent_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBGameplayTriggerComponent_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBGameplayTriggerComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameplayTriggerComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameplayTriggerComponent_IsEnabled) == 0x000001, "Wrong alignment on RBGameplayTriggerComponent_IsEnabled");
static_assert(sizeof(RBGameplayTriggerComponent_IsEnabled) == 0x000001, "Wrong size on RBGameplayTriggerComponent_IsEnabled");
static_assert(offsetof(RBGameplayTriggerComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'RBGameplayTriggerComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStateLobby.Multicast_PlayLobbyAnnouncement
// 0x0008 (0x0008 - 0x0000)
struct RBGameStateLobby_Multicast_PlayLobbyAnnouncement final
{
public:
	int32                                         AnnouncementIndex;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnnouncementLineSeed;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateLobby_Multicast_PlayLobbyAnnouncement) == 0x000004, "Wrong alignment on RBGameStateLobby_Multicast_PlayLobbyAnnouncement");
static_assert(sizeof(RBGameStateLobby_Multicast_PlayLobbyAnnouncement) == 0x000008, "Wrong size on RBGameStateLobby_Multicast_PlayLobbyAnnouncement");
static_assert(offsetof(RBGameStateLobby_Multicast_PlayLobbyAnnouncement, AnnouncementIndex) == 0x000000, "Member 'RBGameStateLobby_Multicast_PlayLobbyAnnouncement::AnnouncementIndex' has a wrong offset!");
static_assert(offsetof(RBGameStateLobby_Multicast_PlayLobbyAnnouncement, AnnouncementLineSeed) == 0x000004, "Member 'RBGameStateLobby_Multicast_PlayLobbyAnnouncement::AnnouncementLineSeed' has a wrong offset!");

// DelegateFunction OPP.RBGameStateLobby.OnCharacterReleaseCountUpdated__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct RBGameStateLobby_OnCharacterReleaseCountUpdated__DelegateSignature final
{
public:
	int32                                         Param_CharacterReleaseCount;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateLobby_OnCharacterReleaseCountUpdated__DelegateSignature) == 0x000004, "Wrong alignment on RBGameStateLobby_OnCharacterReleaseCountUpdated__DelegateSignature");
static_assert(sizeof(RBGameStateLobby_OnCharacterReleaseCountUpdated__DelegateSignature) == 0x000004, "Wrong size on RBGameStateLobby_OnCharacterReleaseCountUpdated__DelegateSignature");
static_assert(offsetof(RBGameStateLobby_OnCharacterReleaseCountUpdated__DelegateSignature, Param_CharacterReleaseCount) == 0x000000, "Member 'RBGameStateLobby_OnCharacterReleaseCountUpdated__DelegateSignature::Param_CharacterReleaseCount' has a wrong offset!");

// DelegateFunction OPP.RBGameStateLobby.OnPlayerReleaseStateUpdated__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct RBGameStateLobby_OnPlayerReleaseStateUpdated__DelegateSignature final
{
public:
	struct FPlayerReleaseState                    Param_PlayerReleaseState;                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateLobby_OnPlayerReleaseStateUpdated__DelegateSignature) == 0x000008, "Wrong alignment on RBGameStateLobby_OnPlayerReleaseStateUpdated__DelegateSignature");
static_assert(sizeof(RBGameStateLobby_OnPlayerReleaseStateUpdated__DelegateSignature) == 0x000018, "Wrong size on RBGameStateLobby_OnPlayerReleaseStateUpdated__DelegateSignature");
static_assert(offsetof(RBGameStateLobby_OnPlayerReleaseStateUpdated__DelegateSignature, Param_PlayerReleaseState) == 0x000000, "Member 'RBGameStateLobby_OnPlayerReleaseStateUpdated__DelegateSignature::Param_PlayerReleaseState' has a wrong offset!");

// Function OPP.RBGameStateLobby.GetCharacterReleaseCount
// 0x0004 (0x0004 - 0x0000)
struct RBGameStateLobby_GetCharacterReleaseCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateLobby_GetCharacterReleaseCount) == 0x000004, "Wrong alignment on RBGameStateLobby_GetCharacterReleaseCount");
static_assert(sizeof(RBGameStateLobby_GetCharacterReleaseCount) == 0x000004, "Wrong size on RBGameStateLobby_GetCharacterReleaseCount");
static_assert(offsetof(RBGameStateLobby_GetCharacterReleaseCount, ReturnValue) == 0x000000, "Member 'RBGameStateLobby_GetCharacterReleaseCount::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStateLobby.GetPlayerReleaseExpirationServerTime
// 0x0004 (0x0004 - 0x0000)
struct RBGameStateLobby_GetPlayerReleaseExpirationServerTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateLobby_GetPlayerReleaseExpirationServerTime) == 0x000004, "Wrong alignment on RBGameStateLobby_GetPlayerReleaseExpirationServerTime");
static_assert(sizeof(RBGameStateLobby_GetPlayerReleaseExpirationServerTime) == 0x000004, "Wrong size on RBGameStateLobby_GetPlayerReleaseExpirationServerTime");
static_assert(offsetof(RBGameStateLobby_GetPlayerReleaseExpirationServerTime, ReturnValue) == 0x000000, "Member 'RBGameStateLobby_GetPlayerReleaseExpirationServerTime::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStateLobby.GetPlayerReleasePlayerState
// 0x0008 (0x0008 - 0x0000)
struct RBGameStateLobby_GetPlayerReleasePlayerState final
{
public:
	class ARBLobbyPlayerState*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateLobby_GetPlayerReleasePlayerState) == 0x000008, "Wrong alignment on RBGameStateLobby_GetPlayerReleasePlayerState");
static_assert(sizeof(RBGameStateLobby_GetPlayerReleasePlayerState) == 0x000008, "Wrong size on RBGameStateLobby_GetPlayerReleasePlayerState");
static_assert(offsetof(RBGameStateLobby_GetPlayerReleasePlayerState, ReturnValue) == 0x000000, "Member 'RBGameStateLobby_GetPlayerReleasePlayerState::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStateLobby.GetPlayerReleaseState
// 0x0018 (0x0018 - 0x0000)
struct RBGameStateLobby_GetPlayerReleaseState final
{
public:
	struct FPlayerReleaseState                    ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateLobby_GetPlayerReleaseState) == 0x000008, "Wrong alignment on RBGameStateLobby_GetPlayerReleaseState");
static_assert(sizeof(RBGameStateLobby_GetPlayerReleaseState) == 0x000018, "Wrong size on RBGameStateLobby_GetPlayerReleaseState");
static_assert(offsetof(RBGameStateLobby_GetPlayerReleaseState, ReturnValue) == 0x000000, "Member 'RBGameStateLobby_GetPlayerReleaseState::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStateLobby.IsPlayerReleasePending
// 0x0001 (0x0001 - 0x0000)
struct RBGameStateLobby_IsPlayerReleasePending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateLobby_IsPlayerReleasePending) == 0x000001, "Wrong alignment on RBGameStateLobby_IsPlayerReleasePending");
static_assert(sizeof(RBGameStateLobby_IsPlayerReleasePending) == 0x000001, "Wrong size on RBGameStateLobby_IsPlayerReleasePending");
static_assert(offsetof(RBGameStateLobby_IsPlayerReleasePending, ReturnValue) == 0x000000, "Member 'RBGameStateLobby_IsPlayerReleasePending::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStateLobby.IsPlayerReleasing
// 0x0001 (0x0001 - 0x0000)
struct RBGameStateLobby_IsPlayerReleasing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStateLobby_IsPlayerReleasing) == 0x000001, "Wrong alignment on RBGameStateLobby_IsPlayerReleasing");
static_assert(sizeof(RBGameStateLobby_IsPlayerReleasing) == 0x000001, "Wrong size on RBGameStateLobby_IsPlayerReleasing");
static_assert(offsetof(RBGameStateLobby_IsPlayerReleasing, ReturnValue) == 0x000000, "Member 'RBGameStateLobby_IsPlayerReleasing::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.FindBestTrialInfoFromDetails
// 0x01A8 (0x01A8 - 0x0000)
struct RBGameStructureConfig_FindBestTrialInfoFromDetails final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBTrialInfoRow                        ReturnValue;                                       // 0x0050(0x0158)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_FindBestTrialInfoFromDetails) == 0x000008, "Wrong alignment on RBGameStructureConfig_FindBestTrialInfoFromDetails");
static_assert(sizeof(RBGameStructureConfig_FindBestTrialInfoFromDetails) == 0x0001A8, "Wrong size on RBGameStructureConfig_FindBestTrialInfoFromDetails");
static_assert(offsetof(RBGameStructureConfig_FindBestTrialInfoFromDetails, StageID) == 0x000000, "Member 'RBGameStructureConfig_FindBestTrialInfoFromDetails::StageID' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_FindBestTrialInfoFromDetails, MissionID) == 0x000028, "Member 'RBGameStructureConfig_FindBestTrialInfoFromDetails::MissionID' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_FindBestTrialInfoFromDetails, ReturnValue) == 0x000050, "Member 'RBGameStructureConfig_FindBestTrialInfoFromDetails::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetMissionID
// 0x0038 (0x0038 - 0x0000)
struct RBGameStructureConfig_GetMissionID final
{
public:
	class FName                                   StageName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MissionName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBMissionID                           ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetMissionID) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetMissionID");
static_assert(sizeof(RBGameStructureConfig_GetMissionID) == 0x000038, "Wrong size on RBGameStructureConfig_GetMissionID");
static_assert(offsetof(RBGameStructureConfig_GetMissionID, StageName) == 0x000000, "Member 'RBGameStructureConfig_GetMissionID::StageName' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_GetMissionID, MissionName) == 0x000008, "Member 'RBGameStructureConfig_GetMissionID::MissionName' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_GetMissionID, ReturnValue) == 0x000010, "Member 'RBGameStructureConfig_GetMissionID::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetProgramInfo
// 0x0150 (0x0150 - 0x0000)
struct RBGameStructureConfig_GetProgramInfo final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBProgramInfoRow                      ReturnValue;                                       // 0x0008(0x0148)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetProgramInfo) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetProgramInfo");
static_assert(sizeof(RBGameStructureConfig_GetProgramInfo) == 0x000150, "Wrong size on RBGameStructureConfig_GetProgramInfo");
static_assert(offsetof(RBGameStructureConfig_GetProgramInfo, ProgramId) == 0x000000, "Member 'RBGameStructureConfig_GetProgramInfo::ProgramId' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_GetProgramInfo, ReturnValue) == 0x000008, "Member 'RBGameStructureConfig_GetProgramInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetPrograms
// 0x0010 (0x0010 - 0x0000)
struct RBGameStructureConfig_GetPrograms final
{
public:
	TArray<struct FRBProgramInfoRow>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetPrograms) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetPrograms");
static_assert(sizeof(RBGameStructureConfig_GetPrograms) == 0x000010, "Wrong size on RBGameStructureConfig_GetPrograms");
static_assert(offsetof(RBGameStructureConfig_GetPrograms, ReturnValue) == 0x000000, "Member 'RBGameStructureConfig_GetPrograms::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetProgramTrials
// 0x0018 (0x0018 - 0x0000)
struct RBGameStructureConfig_GetProgramTrials final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRBTrialInfoRow>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetProgramTrials) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetProgramTrials");
static_assert(sizeof(RBGameStructureConfig_GetProgramTrials) == 0x000018, "Wrong size on RBGameStructureConfig_GetProgramTrials");
static_assert(offsetof(RBGameStructureConfig_GetProgramTrials, ProgramId) == 0x000000, "Member 'RBGameStructureConfig_GetProgramTrials::ProgramId' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_GetProgramTrials, ReturnValue) == 0x000008, "Member 'RBGameStructureConfig_GetProgramTrials::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetStageInfo
// 0x0010 (0x0010 - 0x0000)
struct RBGameStructureConfig_GetStageInfo final
{
public:
	class FName                                   StageID;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBStageInfo*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetStageInfo) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetStageInfo");
static_assert(sizeof(RBGameStructureConfig_GetStageInfo) == 0x000010, "Wrong size on RBGameStructureConfig_GetStageInfo");
static_assert(offsetof(RBGameStructureConfig_GetStageInfo, StageID) == 0x000000, "Member 'RBGameStructureConfig_GetStageInfo::StageID' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_GetStageInfo, ReturnValue) == 0x000008, "Member 'RBGameStructureConfig_GetStageInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetTrialChainInfo
// 0x0020 (0x0020 - 0x0000)
struct RBGameStructureConfig_GetTrialChainInfo final
{
public:
	class FName                                   TrialChainId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBTrialChainRuntimeInfo               ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetTrialChainInfo) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetTrialChainInfo");
static_assert(sizeof(RBGameStructureConfig_GetTrialChainInfo) == 0x000020, "Wrong size on RBGameStructureConfig_GetTrialChainInfo");
static_assert(offsetof(RBGameStructureConfig_GetTrialChainInfo, TrialChainId) == 0x000000, "Member 'RBGameStructureConfig_GetTrialChainInfo::TrialChainId' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_GetTrialChainInfo, ReturnValue) == 0x000008, "Member 'RBGameStructureConfig_GetTrialChainInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetTrialChains
// 0x0010 (0x0010 - 0x0000)
struct RBGameStructureConfig_GetTrialChains final
{
public:
	TArray<struct FRBTrialChainRuntimeInfo>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetTrialChains) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetTrialChains");
static_assert(sizeof(RBGameStructureConfig_GetTrialChains) == 0x000010, "Wrong size on RBGameStructureConfig_GetTrialChains");
static_assert(offsetof(RBGameStructureConfig_GetTrialChains, ReturnValue) == 0x000000, "Member 'RBGameStructureConfig_GetTrialChains::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetTrialInfo
// 0x0160 (0x0160 - 0x0000)
struct RBGameStructureConfig_GetTrialInfo final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBTrialInfoRow                        ReturnValue;                                       // 0x0008(0x0158)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetTrialInfo) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetTrialInfo");
static_assert(sizeof(RBGameStructureConfig_GetTrialInfo) == 0x000160, "Wrong size on RBGameStructureConfig_GetTrialInfo");
static_assert(offsetof(RBGameStructureConfig_GetTrialInfo, TrialId) == 0x000000, "Member 'RBGameStructureConfig_GetTrialInfo::TrialId' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_GetTrialInfo, ReturnValue) == 0x000008, "Member 'RBGameStructureConfig_GetTrialInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetTrials
// 0x0010 (0x0010 - 0x0000)
struct RBGameStructureConfig_GetTrials final
{
public:
	TArray<struct FRBTrialInfoRow>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetTrials) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetTrials");
static_assert(sizeof(RBGameStructureConfig_GetTrials) == 0x000010, "Wrong size on RBGameStructureConfig_GetTrials");
static_assert(offsetof(RBGameStructureConfig_GetTrials, ReturnValue) == 0x000000, "Member 'RBGameStructureConfig_GetTrials::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetVariatorInfo
// 0x0010 (0x0010 - 0x0000)
struct RBGameStructureConfig_GetVariatorInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBVariatorInfo*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetVariatorInfo) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetVariatorInfo");
static_assert(sizeof(RBGameStructureConfig_GetVariatorInfo) == 0x000010, "Wrong size on RBGameStructureConfig_GetVariatorInfo");
static_assert(offsetof(RBGameStructureConfig_GetVariatorInfo, ID) == 0x000000, "Member 'RBGameStructureConfig_GetVariatorInfo::ID' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_GetVariatorInfo, ReturnValue) == 0x000008, "Member 'RBGameStructureConfig_GetVariatorInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.GetVariatorInfos
// 0x0020 (0x0020 - 0x0000)
struct RBGameStructureConfig_GetVariatorInfos final
{
public:
	TArray<class FName>                           IdList;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class URBVariatorInfo*>                ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameStructureConfig_GetVariatorInfos) == 0x000008, "Wrong alignment on RBGameStructureConfig_GetVariatorInfos");
static_assert(sizeof(RBGameStructureConfig_GetVariatorInfos) == 0x000020, "Wrong size on RBGameStructureConfig_GetVariatorInfos");
static_assert(offsetof(RBGameStructureConfig_GetVariatorInfos, IdList) == 0x000000, "Member 'RBGameStructureConfig_GetVariatorInfos::IdList' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_GetVariatorInfos, ReturnValue) == 0x000010, "Member 'RBGameStructureConfig_GetVariatorInfos::ReturnValue' has a wrong offset!");

// Function OPP.RBGameStructureConfig.IsReleaseTrial
// 0x000C (0x000C - 0x0000)
struct RBGameStructureConfig_IsReleaseTrial final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F5[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGameStructureConfig_IsReleaseTrial) == 0x000004, "Wrong alignment on RBGameStructureConfig_IsReleaseTrial");
static_assert(sizeof(RBGameStructureConfig_IsReleaseTrial) == 0x00000C, "Wrong size on RBGameStructureConfig_IsReleaseTrial");
static_assert(offsetof(RBGameStructureConfig_IsReleaseTrial, TrialId) == 0x000000, "Member 'RBGameStructureConfig_IsReleaseTrial::TrialId' has a wrong offset!");
static_assert(offsetof(RBGameStructureConfig_IsReleaseTrial, ReturnValue) == 0x000008, "Member 'RBGameStructureConfig_IsReleaseTrial::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetSetDirect3DVersion
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserSettings_GetSetDirect3DVersion final
{
public:
	EGraphicsRHI                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetSetDirect3DVersion) == 0x000001, "Wrong alignment on RBGameUserSettings_GetSetDirect3DVersion");
static_assert(sizeof(RBGameUserSettings_GetSetDirect3DVersion) == 0x000001, "Wrong size on RBGameUserSettings_GetSetDirect3DVersion");
static_assert(offsetof(RBGameUserSettings_GetSetDirect3DVersion, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetSetDirect3DVersion::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.SetDirect3DVersion
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserSettings_SetDirect3DVersion final
{
public:
	EGraphicsRHI                                  D3DVersion;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_SetDirect3DVersion) == 0x000001, "Wrong alignment on RBGameUserSettings_SetDirect3DVersion");
static_assert(sizeof(RBGameUserSettings_SetDirect3DVersion) == 0x000001, "Wrong size on RBGameUserSettings_SetDirect3DVersion");
static_assert(offsetof(RBGameUserSettings_SetDirect3DVersion, D3DVersion) == 0x000000, "Member 'RBGameUserSettings_SetDirect3DVersion::D3DVersion' has a wrong offset!");

// Function OPP.RBGameUserSettings.SetQualityPreset
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_SetQualityPreset final
{
public:
	int32                                         PresetValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_SetQualityPreset) == 0x000004, "Wrong alignment on RBGameUserSettings_SetQualityPreset");
static_assert(sizeof(RBGameUserSettings_SetQualityPreset) == 0x000004, "Wrong size on RBGameUserSettings_SetQualityPreset");
static_assert(offsetof(RBGameUserSettings_SetQualityPreset, PresetValue) == 0x000000, "Member 'RBGameUserSettings_SetQualityPreset::PresetValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.UpdateQualityFromPreset
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_UpdateQualityFromPreset final
{
public:
	int32                                         PresetValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_UpdateQualityFromPreset) == 0x000004, "Wrong alignment on RBGameUserSettings_UpdateQualityFromPreset");
static_assert(sizeof(RBGameUserSettings_UpdateQualityFromPreset) == 0x000004, "Wrong size on RBGameUserSettings_UpdateQualityFromPreset");
static_assert(offsetof(RBGameUserSettings_UpdateQualityFromPreset, PresetValue) == 0x000000, "Member 'RBGameUserSettings_UpdateQualityFromPreset::PresetValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.ComputeQualityPreset
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_ComputeQualityPreset final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_ComputeQualityPreset) == 0x000004, "Wrong alignment on RBGameUserSettings_ComputeQualityPreset");
static_assert(sizeof(RBGameUserSettings_ComputeQualityPreset) == 0x000004, "Wrong size on RBGameUserSettings_ComputeQualityPreset");
static_assert(offsetof(RBGameUserSettings_ComputeQualityPreset, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_ComputeQualityPreset::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetAntiAliasingQuality
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_GetAntiAliasingQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetAntiAliasingQuality) == 0x000004, "Wrong alignment on RBGameUserSettings_GetAntiAliasingQuality");
static_assert(sizeof(RBGameUserSettings_GetAntiAliasingQuality) == 0x000004, "Wrong size on RBGameUserSettings_GetAntiAliasingQuality");
static_assert(offsetof(RBGameUserSettings_GetAntiAliasingQuality, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetAntiAliasingQuality::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetBrightness
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_GetBrightness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetBrightness) == 0x000004, "Wrong alignment on RBGameUserSettings_GetBrightness");
static_assert(sizeof(RBGameUserSettings_GetBrightness) == 0x000004, "Wrong size on RBGameUserSettings_GetBrightness");
static_assert(offsetof(RBGameUserSettings_GetBrightness, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetBrightness::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetCurrentDirect3DVersion
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserSettings_GetCurrentDirect3DVersion final
{
public:
	EGraphicsRHI                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetCurrentDirect3DVersion) == 0x000001, "Wrong alignment on RBGameUserSettings_GetCurrentDirect3DVersion");
static_assert(sizeof(RBGameUserSettings_GetCurrentDirect3DVersion) == 0x000001, "Wrong size on RBGameUserSettings_GetCurrentDirect3DVersion");
static_assert(offsetof(RBGameUserSettings_GetCurrentDirect3DVersion, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetCurrentDirect3DVersion::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetDLSSQuality
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_GetDLSSQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetDLSSQuality) == 0x000004, "Wrong alignment on RBGameUserSettings_GetDLSSQuality");
static_assert(sizeof(RBGameUserSettings_GetDLSSQuality) == 0x000004, "Wrong size on RBGameUserSettings_GetDLSSQuality");
static_assert(offsetof(RBGameUserSettings_GetDLSSQuality, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetDLSSQuality::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetFSR2Quality
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_GetFSR2Quality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetFSR2Quality) == 0x000004, "Wrong alignment on RBGameUserSettings_GetFSR2Quality");
static_assert(sizeof(RBGameUserSettings_GetFSR2Quality) == 0x000004, "Wrong size on RBGameUserSettings_GetFSR2Quality");
static_assert(offsetof(RBGameUserSettings_GetFSR2Quality, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetFSR2Quality::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetQualityPreset
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_GetQualityPreset final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetQualityPreset) == 0x000004, "Wrong alignment on RBGameUserSettings_GetQualityPreset");
static_assert(sizeof(RBGameUserSettings_GetQualityPreset) == 0x000004, "Wrong size on RBGameUserSettings_GetQualityPreset");
static_assert(offsetof(RBGameUserSettings_GetQualityPreset, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetQualityPreset::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetRTEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserSettings_GetRTEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetRTEnabled) == 0x000001, "Wrong alignment on RBGameUserSettings_GetRTEnabled");
static_assert(sizeof(RBGameUserSettings_GetRTEnabled) == 0x000001, "Wrong size on RBGameUserSettings_GetRTEnabled");
static_assert(offsetof(RBGameUserSettings_GetRTEnabled, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetRTEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetRTReflectionsQuality
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_GetRTReflectionsQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetRTReflectionsQuality) == 0x000004, "Wrong alignment on RBGameUserSettings_GetRTReflectionsQuality");
static_assert(sizeof(RBGameUserSettings_GetRTReflectionsQuality) == 0x000004, "Wrong size on RBGameUserSettings_GetRTReflectionsQuality");
static_assert(offsetof(RBGameUserSettings_GetRTReflectionsQuality, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetRTReflectionsQuality::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetRTShadowsQuality
// 0x0004 (0x0004 - 0x0000)
struct RBGameUserSettings_GetRTShadowsQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetRTShadowsQuality) == 0x000004, "Wrong alignment on RBGameUserSettings_GetRTShadowsQuality");
static_assert(sizeof(RBGameUserSettings_GetRTShadowsQuality) == 0x000004, "Wrong size on RBGameUserSettings_GetRTShadowsQuality");
static_assert(offsetof(RBGameUserSettings_GetRTShadowsQuality, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetRTShadowsQuality::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.GetWantedDirect3DVersion
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserSettings_GetWantedDirect3DVersion final
{
public:
	EGraphicsRHI                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_GetWantedDirect3DVersion) == 0x000001, "Wrong alignment on RBGameUserSettings_GetWantedDirect3DVersion");
static_assert(sizeof(RBGameUserSettings_GetWantedDirect3DVersion) == 0x000001, "Wrong size on RBGameUserSettings_GetWantedDirect3DVersion");
static_assert(offsetof(RBGameUserSettings_GetWantedDirect3DVersion, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_GetWantedDirect3DVersion::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.HasResolutionChanged
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserSettings_HasResolutionChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_HasResolutionChanged) == 0x000001, "Wrong alignment on RBGameUserSettings_HasResolutionChanged");
static_assert(sizeof(RBGameUserSettings_HasResolutionChanged) == 0x000001, "Wrong size on RBGameUserSettings_HasResolutionChanged");
static_assert(offsetof(RBGameUserSettings_HasResolutionChanged, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_HasResolutionChanged::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.HasRTHardware
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserSettings_HasRTHardware final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_HasRTHardware) == 0x000001, "Wrong alignment on RBGameUserSettings_HasRTHardware");
static_assert(sizeof(RBGameUserSettings_HasRTHardware) == 0x000001, "Wrong size on RBGameUserSettings_HasRTHardware");
static_assert(offsetof(RBGameUserSettings_HasRTHardware, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_HasRTHardware::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.IsMotionBlurDirty
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserSettings_IsMotionBlurDirty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_IsMotionBlurDirty) == 0x000001, "Wrong alignment on RBGameUserSettings_IsMotionBlurDirty");
static_assert(sizeof(RBGameUserSettings_IsMotionBlurDirty) == 0x000001, "Wrong size on RBGameUserSettings_IsMotionBlurDirty");
static_assert(offsetof(RBGameUserSettings_IsMotionBlurDirty, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_IsMotionBlurDirty::ReturnValue' has a wrong offset!");

// Function OPP.RBGameUserSettings.IsMotionBlurEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBGameUserSettings_IsMotionBlurEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGameUserSettings_IsMotionBlurEnabled) == 0x000001, "Wrong alignment on RBGameUserSettings_IsMotionBlurEnabled");
static_assert(sizeof(RBGameUserSettings_IsMotionBlurEnabled) == 0x000001, "Wrong size on RBGameUserSettings_IsMotionBlurEnabled");
static_assert(offsetof(RBGameUserSettings_IsMotionBlurEnabled, ReturnValue) == 0x000000, "Member 'RBGameUserSettings_IsMotionBlurEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBGasTrapComponent.EnabledChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBGasTrapComponent_EnabledChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGasTrapComponent_EnabledChangedCallback) == 0x000001, "Wrong alignment on RBGasTrapComponent_EnabledChangedCallback");
static_assert(sizeof(RBGasTrapComponent_EnabledChangedCallback) == 0x000001, "Wrong size on RBGasTrapComponent_EnabledChangedCallback");
static_assert(offsetof(RBGasTrapComponent_EnabledChangedCallback, ChangedType) == 0x000000, "Member 'RBGasTrapComponent_EnabledChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBGasTrapComponent.OnTrapBeginOverlap_Server
// 0x00A8 (0x00A8 - 0x0000)
struct RBGasTrapComponent_OnTrapBeginOverlap_Server final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2106[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGasTrapComponent_OnTrapBeginOverlap_Server) == 0x000008, "Wrong alignment on RBGasTrapComponent_OnTrapBeginOverlap_Server");
static_assert(sizeof(RBGasTrapComponent_OnTrapBeginOverlap_Server) == 0x0000A8, "Wrong size on RBGasTrapComponent_OnTrapBeginOverlap_Server");
static_assert(offsetof(RBGasTrapComponent_OnTrapBeginOverlap_Server, OverlappedComponent) == 0x000000, "Member 'RBGasTrapComponent_OnTrapBeginOverlap_Server::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBGasTrapComponent_OnTrapBeginOverlap_Server, OtherActor) == 0x000008, "Member 'RBGasTrapComponent_OnTrapBeginOverlap_Server::OtherActor' has a wrong offset!");
static_assert(offsetof(RBGasTrapComponent_OnTrapBeginOverlap_Server, OtherComp) == 0x000010, "Member 'RBGasTrapComponent_OnTrapBeginOverlap_Server::OtherComp' has a wrong offset!");
static_assert(offsetof(RBGasTrapComponent_OnTrapBeginOverlap_Server, OtherBodyIndex) == 0x000018, "Member 'RBGasTrapComponent_OnTrapBeginOverlap_Server::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBGasTrapComponent_OnTrapBeginOverlap_Server, bFromSweep) == 0x00001C, "Member 'RBGasTrapComponent_OnTrapBeginOverlap_Server::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBGasTrapComponent_OnTrapBeginOverlap_Server, SweepResult) == 0x000020, "Member 'RBGasTrapComponent_OnTrapBeginOverlap_Server::SweepResult' has a wrong offset!");

// Function OPP.RBGasTrapComponent.OnTrapEndOverlap_Server
// 0x0020 (0x0020 - 0x0000)
struct RBGasTrapComponent_OnTrapEndOverlap_Server final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2107[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBGasTrapComponent_OnTrapEndOverlap_Server) == 0x000008, "Wrong alignment on RBGasTrapComponent_OnTrapEndOverlap_Server");
static_assert(sizeof(RBGasTrapComponent_OnTrapEndOverlap_Server) == 0x000020, "Wrong size on RBGasTrapComponent_OnTrapEndOverlap_Server");
static_assert(offsetof(RBGasTrapComponent_OnTrapEndOverlap_Server, OverlappedComponent) == 0x000000, "Member 'RBGasTrapComponent_OnTrapEndOverlap_Server::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBGasTrapComponent_OnTrapEndOverlap_Server, OtherActor) == 0x000008, "Member 'RBGasTrapComponent_OnTrapEndOverlap_Server::OtherActor' has a wrong offset!");
static_assert(offsetof(RBGasTrapComponent_OnTrapEndOverlap_Server, OtherComp) == 0x000010, "Member 'RBGasTrapComponent_OnTrapEndOverlap_Server::OtherComp' has a wrong offset!");
static_assert(offsetof(RBGasTrapComponent_OnTrapEndOverlap_Server, OtherBodyIndex) == 0x000018, "Member 'RBGasTrapComponent_OnTrapEndOverlap_Server::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBGenericRadialMenu.Event_HighlightWheel
// 0x0004 (0x0004 - 0x0000)
struct RBGenericRadialMenu_Event_HighlightWheel final
{
public:
	int32                                         WheelIndexValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGenericRadialMenu_Event_HighlightWheel) == 0x000004, "Wrong alignment on RBGenericRadialMenu_Event_HighlightWheel");
static_assert(sizeof(RBGenericRadialMenu_Event_HighlightWheel) == 0x000004, "Wrong size on RBGenericRadialMenu_Event_HighlightWheel");
static_assert(offsetof(RBGenericRadialMenu_Event_HighlightWheel, WheelIndexValue) == 0x000000, "Member 'RBGenericRadialMenu_Event_HighlightWheel::WheelIndexValue' has a wrong offset!");

// Function OPP.RBGroupStatusWidget.GetEntries
// 0x0010 (0x0010 - 0x0000)
struct RBGroupStatusWidget_GetEntries final
{
public:
	TArray<class URBGroupStatusEntryWidget*>      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBGroupStatusWidget_GetEntries) == 0x000008, "Wrong alignment on RBGroupStatusWidget_GetEntries");
static_assert(sizeof(RBGroupStatusWidget_GetEntries) == 0x000010, "Wrong size on RBGroupStatusWidget_GetEntries");
static_assert(offsetof(RBGroupStatusWidget_GetEntries, ReturnValue) == 0x000000, "Member 'RBGroupStatusWidget_GetEntries::ReturnValue' has a wrong offset!");

// Function OPP.RBHallucinationManager.BP_ReplaceSpectreConfig
// 0x0008 (0x0008 - 0x0000)
struct RBHallucinationManager_BP_ReplaceSpectreConfig final
{
public:
	class URBSpectreCfg*                          Config;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHallucinationManager_BP_ReplaceSpectreConfig) == 0x000008, "Wrong alignment on RBHallucinationManager_BP_ReplaceSpectreConfig");
static_assert(sizeof(RBHallucinationManager_BP_ReplaceSpectreConfig) == 0x000008, "Wrong size on RBHallucinationManager_BP_ReplaceSpectreConfig");
static_assert(offsetof(RBHallucinationManager_BP_ReplaceSpectreConfig, Config) == 0x000000, "Member 'RBHallucinationManager_BP_ReplaceSpectreConfig::Config' has a wrong offset!");

// Function OPP.RBHallucinationManager.BP_SetBracketsConfigOverride
// 0x0008 (0x0008 - 0x0000)
struct RBHallucinationManager_BP_SetBracketsConfigOverride final
{
public:
	class URBPsychosisBraketsCfg*                 Config;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHallucinationManager_BP_SetBracketsConfigOverride) == 0x000008, "Wrong alignment on RBHallucinationManager_BP_SetBracketsConfigOverride");
static_assert(sizeof(RBHallucinationManager_BP_SetBracketsConfigOverride) == 0x000008, "Wrong size on RBHallucinationManager_BP_SetBracketsConfigOverride");
static_assert(offsetof(RBHallucinationManager_BP_SetBracketsConfigOverride, Config) == 0x000000, "Member 'RBHallucinationManager_BP_SetBracketsConfigOverride::Config' has a wrong offset!");

// Function OPP.RBHallucinationManager.Event_HallucinationStarted
// 0x0050 (0x0050 - 0x0000)
struct RBHallucinationManager_Event_HallucinationStarted final
{
public:
	struct FHallucinationData                     HalluData;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHallucinationManager_Event_HallucinationStarted) == 0x000008, "Wrong alignment on RBHallucinationManager_Event_HallucinationStarted");
static_assert(sizeof(RBHallucinationManager_Event_HallucinationStarted) == 0x000050, "Wrong size on RBHallucinationManager_Event_HallucinationStarted");
static_assert(offsetof(RBHallucinationManager_Event_HallucinationStarted, HalluData) == 0x000000, "Member 'RBHallucinationManager_Event_HallucinationStarted::HalluData' has a wrong offset!");

// Function OPP.RBHallucinationManager.Event_HallucinationStopped
// 0x0050 (0x0050 - 0x0000)
struct RBHallucinationManager_Event_HallucinationStopped final
{
public:
	struct FHallucinationData                     HalluData;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHallucinationManager_Event_HallucinationStopped) == 0x000008, "Wrong alignment on RBHallucinationManager_Event_HallucinationStopped");
static_assert(sizeof(RBHallucinationManager_Event_HallucinationStopped) == 0x000050, "Wrong size on RBHallucinationManager_Event_HallucinationStopped");
static_assert(offsetof(RBHallucinationManager_Event_HallucinationStopped, HalluData) == 0x000000, "Member 'RBHallucinationManager_Event_HallucinationStopped::HalluData' has a wrong offset!");

// Function OPP.RBHallucinationManager.Multicast_ReplaceSpectreConfig
// 0x0008 (0x0008 - 0x0000)
struct RBHallucinationManager_Multicast_ReplaceSpectreConfig final
{
public:
	class URBSpectreCfg*                          Config;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHallucinationManager_Multicast_ReplaceSpectreConfig) == 0x000008, "Wrong alignment on RBHallucinationManager_Multicast_ReplaceSpectreConfig");
static_assert(sizeof(RBHallucinationManager_Multicast_ReplaceSpectreConfig) == 0x000008, "Wrong size on RBHallucinationManager_Multicast_ReplaceSpectreConfig");
static_assert(offsetof(RBHallucinationManager_Multicast_ReplaceSpectreConfig, Config) == 0x000000, "Member 'RBHallucinationManager_Multicast_ReplaceSpectreConfig::Config' has a wrong offset!");

// Function OPP.RBHallucinationManager.Multicast_SetBracketsConfigOverride
// 0x0008 (0x0008 - 0x0000)
struct RBHallucinationManager_Multicast_SetBracketsConfigOverride final
{
public:
	class URBPsychosisBraketsCfg*                 Config;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHallucinationManager_Multicast_SetBracketsConfigOverride) == 0x000008, "Wrong alignment on RBHallucinationManager_Multicast_SetBracketsConfigOverride");
static_assert(sizeof(RBHallucinationManager_Multicast_SetBracketsConfigOverride) == 0x000008, "Wrong size on RBHallucinationManager_Multicast_SetBracketsConfigOverride");
static_assert(offsetof(RBHallucinationManager_Multicast_SetBracketsConfigOverride, Config) == 0x000000, "Member 'RBHallucinationManager_Multicast_SetBracketsConfigOverride::Config' has a wrong offset!");

// Function OPP.RBHallucinationManager.OnGamePhaseUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBHallucinationManager_OnGamePhaseUpdated final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHallucinationManager_OnGamePhaseUpdated) == 0x000001, "Wrong alignment on RBHallucinationManager_OnGamePhaseUpdated");
static_assert(sizeof(RBHallucinationManager_OnGamePhaseUpdated) == 0x000001, "Wrong size on RBHallucinationManager_OnGamePhaseUpdated");
static_assert(offsetof(RBHallucinationManager_OnGamePhaseUpdated, GamePhase) == 0x000000, "Member 'RBHallucinationManager_OnGamePhaseUpdated::GamePhase' has a wrong offset!");

// Function OPP.RBHallucinationManager.GetMaxBracketAmount
// 0x0004 (0x0004 - 0x0000)
struct RBHallucinationManager_GetMaxBracketAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHallucinationManager_GetMaxBracketAmount) == 0x000004, "Wrong alignment on RBHallucinationManager_GetMaxBracketAmount");
static_assert(sizeof(RBHallucinationManager_GetMaxBracketAmount) == 0x000004, "Wrong size on RBHallucinationManager_GetMaxBracketAmount");
static_assert(offsetof(RBHallucinationManager_GetMaxBracketAmount, ReturnValue) == 0x000000, "Member 'RBHallucinationManager_GetMaxBracketAmount::ReturnValue' has a wrong offset!");

// Function OPP.RBHingedSceneComponent.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBHingedSceneComponent_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2117[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHingedSceneComponent_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBHingedSceneComponent_OnComponentBeginOverlap");
static_assert(sizeof(RBHingedSceneComponent_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBHingedSceneComponent_OnComponentBeginOverlap");
static_assert(offsetof(RBHingedSceneComponent_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBHingedSceneComponent_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBHingedSceneComponent_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBHingedSceneComponent_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBHingedSceneComponent_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBHingedSceneComponent_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBHingedSceneComponent_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBHingedSceneComponent_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBHingedSceneComponent_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBHingedSceneComponent_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBHingedSceneComponent_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBHingedSceneComponent_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBHingedSceneComponent.OnComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBHingedSceneComponent_OnComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2118[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHingedSceneComponent_OnComponentEndOverlap) == 0x000008, "Wrong alignment on RBHingedSceneComponent_OnComponentEndOverlap");
static_assert(sizeof(RBHingedSceneComponent_OnComponentEndOverlap) == 0x000020, "Wrong size on RBHingedSceneComponent_OnComponentEndOverlap");
static_assert(offsetof(RBHingedSceneComponent_OnComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBHingedSceneComponent_OnComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBHingedSceneComponent_OnComponentEndOverlap, OtherActor) == 0x000008, "Member 'RBHingedSceneComponent_OnComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBHingedSceneComponent_OnComponentEndOverlap, OtherComp) == 0x000010, "Member 'RBHingedSceneComponent_OnComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBHingedSceneComponent_OnComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBHingedSceneComponent_OnComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBHotPotatoSpawner.OnHotPotatoStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBHotPotatoSpawner_OnHotPotatoStateChanged final
{
public:
	class ARBHotPotato*                           HotPotato;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHotPotatoState                               NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHotPotatoSpawner_OnHotPotatoStateChanged) == 0x000008, "Wrong alignment on RBHotPotatoSpawner_OnHotPotatoStateChanged");
static_assert(sizeof(RBHotPotatoSpawner_OnHotPotatoStateChanged) == 0x000010, "Wrong size on RBHotPotatoSpawner_OnHotPotatoStateChanged");
static_assert(offsetof(RBHotPotatoSpawner_OnHotPotatoStateChanged, HotPotato) == 0x000000, "Member 'RBHotPotatoSpawner_OnHotPotatoStateChanged::HotPotato' has a wrong offset!");
static_assert(offsetof(RBHotPotatoSpawner_OnHotPotatoStateChanged, NewState) == 0x000008, "Member 'RBHotPotatoSpawner_OnHotPotatoStateChanged::NewState' has a wrong offset!");

// Function OPP.RBHotPotatoSpawner.OnPickupHolderChanged
// 0x0010 (0x0010 - 0x0000)
struct RBHotPotatoSpawner_OnPickupHolderChanged final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHotPotatoSpawner_OnPickupHolderChanged) == 0x000008, "Wrong alignment on RBHotPotatoSpawner_OnPickupHolderChanged");
static_assert(sizeof(RBHotPotatoSpawner_OnPickupHolderChanged) == 0x000010, "Wrong size on RBHotPotatoSpawner_OnPickupHolderChanged");
static_assert(offsetof(RBHotPotatoSpawner_OnPickupHolderChanged, Pawn) == 0x000000, "Member 'RBHotPotatoSpawner_OnPickupHolderChanged::Pawn' has a wrong offset!");
static_assert(offsetof(RBHotPotatoSpawner_OnPickupHolderChanged, LargePickup) == 0x000008, "Member 'RBHotPotatoSpawner_OnPickupHolderChanged::LargePickup' has a wrong offset!");

// Function OPP.RBHUDGenericInWorldIcon.Event_UpdateIconTexture
// 0x0008 (0x0008 - 0x0000)
struct RBHUDGenericInWorldIcon_Event_UpdateIconTexture final
{
public:
	class UTexture2D*                             NewTexture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDGenericInWorldIcon_Event_UpdateIconTexture) == 0x000008, "Wrong alignment on RBHUDGenericInWorldIcon_Event_UpdateIconTexture");
static_assert(sizeof(RBHUDGenericInWorldIcon_Event_UpdateIconTexture) == 0x000008, "Wrong size on RBHUDGenericInWorldIcon_Event_UpdateIconTexture");
static_assert(offsetof(RBHUDGenericInWorldIcon_Event_UpdateIconTexture, NewTexture) == 0x000000, "Member 'RBHUDGenericInWorldIcon_Event_UpdateIconTexture::NewTexture' has a wrong offset!");

// Function OPP.RBHUDInventoryItemEntry.DisplaySwap
// 0x0001 (0x0001 - 0x0000)
struct RBHUDInventoryItemEntry_DisplaySwap final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDInventoryItemEntry_DisplaySwap) == 0x000001, "Wrong alignment on RBHUDInventoryItemEntry_DisplaySwap");
static_assert(sizeof(RBHUDInventoryItemEntry_DisplaySwap) == 0x000001, "Wrong size on RBHUDInventoryItemEntry_DisplaySwap");
static_assert(offsetof(RBHUDInventoryItemEntry_DisplaySwap, bShouldShow) == 0x000000, "Member 'RBHUDInventoryItemEntry_DisplaySwap::bShouldShow' has a wrong offset!");

// Function OPP.RBHUDInventoryItemEntry.SetEquippedItem
// 0x0001 (0x0001 - 0x0000)
struct RBHUDInventoryItemEntry_SetEquippedItem final
{
public:
	bool                                          bEquipped;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDInventoryItemEntry_SetEquippedItem) == 0x000001, "Wrong alignment on RBHUDInventoryItemEntry_SetEquippedItem");
static_assert(sizeof(RBHUDInventoryItemEntry_SetEquippedItem) == 0x000001, "Wrong size on RBHUDInventoryItemEntry_SetEquippedItem");
static_assert(offsetof(RBHUDInventoryItemEntry_SetEquippedItem, bEquipped) == 0x000000, "Member 'RBHUDInventoryItemEntry_SetEquippedItem::bEquipped' has a wrong offset!");

// Function OPP.RBHUDLivesCounter.OnIsDeadChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHUDLivesCounter_OnIsDeadChanged final
{
public:
	bool                                          bIsDead;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDLivesCounter_OnIsDeadChanged) == 0x000001, "Wrong alignment on RBHUDLivesCounter_OnIsDeadChanged");
static_assert(sizeof(RBHUDLivesCounter_OnIsDeadChanged) == 0x000001, "Wrong size on RBHUDLivesCounter_OnIsDeadChanged");
static_assert(offsetof(RBHUDLivesCounter_OnIsDeadChanged, bIsDead) == 0x000000, "Member 'RBHUDLivesCounter_OnIsDeadChanged::bIsDead' has a wrong offset!");

// Function OPP.RBHUDLivesCounter.SetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct RBHUDLivesCounter_SetPlayerState final
{
public:
	class ARBPlayerState*                         NewPlayerState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDLivesCounter_SetPlayerState) == 0x000008, "Wrong alignment on RBHUDLivesCounter_SetPlayerState");
static_assert(sizeof(RBHUDLivesCounter_SetPlayerState) == 0x000008, "Wrong size on RBHUDLivesCounter_SetPlayerState");
static_assert(offsetof(RBHUDLivesCounter_SetPlayerState, NewPlayerState) == 0x000000, "Member 'RBHUDLivesCounter_SetPlayerState::NewPlayerState' has a wrong offset!");

// Function OPP.RBHUDLivesCounter.GetMaxNumberOfLives
// 0x0004 (0x0004 - 0x0000)
struct RBHUDLivesCounter_GetMaxNumberOfLives final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDLivesCounter_GetMaxNumberOfLives) == 0x000004, "Wrong alignment on RBHUDLivesCounter_GetMaxNumberOfLives");
static_assert(sizeof(RBHUDLivesCounter_GetMaxNumberOfLives) == 0x000004, "Wrong size on RBHUDLivesCounter_GetMaxNumberOfLives");
static_assert(offsetof(RBHUDLivesCounter_GetMaxNumberOfLives, ReturnValue) == 0x000000, "Member 'RBHUDLivesCounter_GetMaxNumberOfLives::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDLivesCounter.GetRemainingNumberOfLives
// 0x0004 (0x0004 - 0x0000)
struct RBHUDLivesCounter_GetRemainingNumberOfLives final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDLivesCounter_GetRemainingNumberOfLives) == 0x000004, "Wrong alignment on RBHUDLivesCounter_GetRemainingNumberOfLives");
static_assert(sizeof(RBHUDLivesCounter_GetRemainingNumberOfLives) == 0x000004, "Wrong size on RBHUDLivesCounter_GetRemainingNumberOfLives");
static_assert(offsetof(RBHUDLivesCounter_GetRemainingNumberOfLives, ReturnValue) == 0x000000, "Member 'RBHUDLivesCounter_GetRemainingNumberOfLives::ReturnValue' has a wrong offset!");

// Function OPP.RBHUDOverheadInfo.Event_InventoryUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBHUDOverheadInfo_Event_InventoryUpdated final
{
public:
	EInventoryUpdateEventType                     InventoryEventType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDOverheadInfo_Event_InventoryUpdated) == 0x000001, "Wrong alignment on RBHUDOverheadInfo_Event_InventoryUpdated");
static_assert(sizeof(RBHUDOverheadInfo_Event_InventoryUpdated) == 0x000001, "Wrong size on RBHUDOverheadInfo_Event_InventoryUpdated");
static_assert(offsetof(RBHUDOverheadInfo_Event_InventoryUpdated, InventoryEventType) == 0x000000, "Member 'RBHUDOverheadInfo_Event_InventoryUpdated::InventoryEventType' has a wrong offset!");

// Function OPP.RBHUDOverheadInfo.Event_PlayerHealthChanged
// 0x0008 (0x0008 - 0x0000)
struct RBHUDOverheadInfo_Event_PlayerHealthChanged final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipAnims;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_211F[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUDOverheadInfo_Event_PlayerHealthChanged) == 0x000004, "Wrong alignment on RBHUDOverheadInfo_Event_PlayerHealthChanged");
static_assert(sizeof(RBHUDOverheadInfo_Event_PlayerHealthChanged) == 0x000008, "Wrong size on RBHUDOverheadInfo_Event_PlayerHealthChanged");
static_assert(offsetof(RBHUDOverheadInfo_Event_PlayerHealthChanged, NewHealth) == 0x000000, "Member 'RBHUDOverheadInfo_Event_PlayerHealthChanged::NewHealth' has a wrong offset!");
static_assert(offsetof(RBHUDOverheadInfo_Event_PlayerHealthChanged, bSkipAnims) == 0x000004, "Member 'RBHUDOverheadInfo_Event_PlayerHealthChanged::bSkipAnims' has a wrong offset!");

// Function OPP.RBHUDOverheadInfo.Event_PlayerIndicatorTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHUDOverheadInfo_Event_PlayerIndicatorTypeChanged final
{
public:
	EPlayerIndicatorType                          PlayerIndicatorType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDOverheadInfo_Event_PlayerIndicatorTypeChanged) == 0x000001, "Wrong alignment on RBHUDOverheadInfo_Event_PlayerIndicatorTypeChanged");
static_assert(sizeof(RBHUDOverheadInfo_Event_PlayerIndicatorTypeChanged) == 0x000001, "Wrong size on RBHUDOverheadInfo_Event_PlayerIndicatorTypeChanged");
static_assert(offsetof(RBHUDOverheadInfo_Event_PlayerIndicatorTypeChanged, PlayerIndicatorType) == 0x000000, "Member 'RBHUDOverheadInfo_Event_PlayerIndicatorTypeChanged::PlayerIndicatorType' has a wrong offset!");

// Function OPP.RBHUDOverheadInfo.Event_PlayerMaxHealthChanged
// 0x0004 (0x0004 - 0x0000)
struct RBHUDOverheadInfo_Event_PlayerMaxHealthChanged final
{
public:
	float                                         NewMaxHealth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDOverheadInfo_Event_PlayerMaxHealthChanged) == 0x000004, "Wrong alignment on RBHUDOverheadInfo_Event_PlayerMaxHealthChanged");
static_assert(sizeof(RBHUDOverheadInfo_Event_PlayerMaxHealthChanged) == 0x000004, "Wrong size on RBHUDOverheadInfo_Event_PlayerMaxHealthChanged");
static_assert(offsetof(RBHUDOverheadInfo_Event_PlayerMaxHealthChanged, NewMaxHealth) == 0x000000, "Member 'RBHUDOverheadInfo_Event_PlayerMaxHealthChanged::NewMaxHealth' has a wrong offset!");

// Function OPP.RBHUDOverheadInfo.OnLastPossessedPlayerUpdated
// 0x0008 (0x0008 - 0x0000)
struct RBHUDOverheadInfo_OnLastPossessedPlayerUpdated final
{
public:
	class ARBPlayer*                              LastPossessedPlayer;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDOverheadInfo_OnLastPossessedPlayerUpdated) == 0x000008, "Wrong alignment on RBHUDOverheadInfo_OnLastPossessedPlayerUpdated");
static_assert(sizeof(RBHUDOverheadInfo_OnLastPossessedPlayerUpdated) == 0x000008, "Wrong size on RBHUDOverheadInfo_OnLastPossessedPlayerUpdated");
static_assert(offsetof(RBHUDOverheadInfo_OnLastPossessedPlayerUpdated, LastPossessedPlayer) == 0x000000, "Member 'RBHUDOverheadInfo_OnLastPossessedPlayerUpdated::LastPossessedPlayer' has a wrong offset!");

// Function OPP.RBHUDOverheadInfo.OnPlayerHealthChanged
// 0x0004 (0x0004 - 0x0000)
struct RBHUDOverheadInfo_OnPlayerHealthChanged final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDOverheadInfo_OnPlayerHealthChanged) == 0x000004, "Wrong alignment on RBHUDOverheadInfo_OnPlayerHealthChanged");
static_assert(sizeof(RBHUDOverheadInfo_OnPlayerHealthChanged) == 0x000004, "Wrong size on RBHUDOverheadInfo_OnPlayerHealthChanged");
static_assert(offsetof(RBHUDOverheadInfo_OnPlayerHealthChanged, NewHealth) == 0x000000, "Member 'RBHUDOverheadInfo_OnPlayerHealthChanged::NewHealth' has a wrong offset!");

// Function OPP.RBHUDOverheadInfo.OnPlayerPartyStateUpdated
// 0x0008 (0x0008 - 0x0000)
struct RBHUDOverheadInfo_OnPlayerPartyStateUpdated final
{
public:
	class ARBPlayerState*                         Unused;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDOverheadInfo_OnPlayerPartyStateUpdated) == 0x000008, "Wrong alignment on RBHUDOverheadInfo_OnPlayerPartyStateUpdated");
static_assert(sizeof(RBHUDOverheadInfo_OnPlayerPartyStateUpdated) == 0x000008, "Wrong size on RBHUDOverheadInfo_OnPlayerPartyStateUpdated");
static_assert(offsetof(RBHUDOverheadInfo_OnPlayerPartyStateUpdated, Unused) == 0x000000, "Member 'RBHUDOverheadInfo_OnPlayerPartyStateUpdated::Unused' has a wrong offset!");

// Function OPP.RBHUDPlayerInfoBar.SetPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBHUDPlayerInfoBar_SetPlayer final
{
public:
	class ARBPlayer*                              NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerInfoBar_SetPlayer) == 0x000008, "Wrong alignment on RBHUDPlayerInfoBar_SetPlayer");
static_assert(sizeof(RBHUDPlayerInfoBar_SetPlayer) == 0x000008, "Wrong size on RBHUDPlayerInfoBar_SetPlayer");
static_assert(offsetof(RBHUDPlayerInfoBar_SetPlayer, NewPlayer) == 0x000000, "Member 'RBHUDPlayerInfoBar_SetPlayer::NewPlayer' has a wrong offset!");

// Function OPP.RBHUDPlayerStatus.OnCompletingObjectiveChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHUDPlayerStatus_OnCompletingObjectiveChanged final
{
public:
	bool                                          IsCompletingObjective;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerStatus_OnCompletingObjectiveChanged) == 0x000001, "Wrong alignment on RBHUDPlayerStatus_OnCompletingObjectiveChanged");
static_assert(sizeof(RBHUDPlayerStatus_OnCompletingObjectiveChanged) == 0x000001, "Wrong size on RBHUDPlayerStatus_OnCompletingObjectiveChanged");
static_assert(offsetof(RBHUDPlayerStatus_OnCompletingObjectiveChanged, IsCompletingObjective) == 0x000000, "Member 'RBHUDPlayerStatus_OnCompletingObjectiveChanged::IsCompletingObjective' has a wrong offset!");

// Function OPP.RBHUDPlayerStatus.OnPlayerStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct RBHUDPlayerStatus_OnPlayerStatusChanged final
{
public:
	EPlayerIndicatorType                          NewPlayerStatus;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHUDPlayerStatus_OnPlayerStatusChanged) == 0x000001, "Wrong alignment on RBHUDPlayerStatus_OnPlayerStatusChanged");
static_assert(sizeof(RBHUDPlayerStatus_OnPlayerStatusChanged) == 0x000001, "Wrong size on RBHUDPlayerStatus_OnPlayerStatusChanged");
static_assert(offsetof(RBHUDPlayerStatus_OnPlayerStatusChanged, NewPlayerStatus) == 0x000000, "Member 'RBHUDPlayerStatus_OnPlayerStatusChanged::NewPlayerStatus' has a wrong offset!");

// Function OPP.RBHUDPlayerStatus.SetPlayer
// 0x0010 (0x0010 - 0x0000)
struct RBHUDPlayerStatus_SetPlayer final
{
public:
	class ARBPlayer*                              NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldBindStatusChanges;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2122[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBHUDPlayerStatus_SetPlayer) == 0x000008, "Wrong alignment on RBHUDPlayerStatus_SetPlayer");
static_assert(sizeof(RBHUDPlayerStatus_SetPlayer) == 0x000010, "Wrong size on RBHUDPlayerStatus_SetPlayer");
static_assert(offsetof(RBHUDPlayerStatus_SetPlayer, NewPlayer) == 0x000000, "Member 'RBHUDPlayerStatus_SetPlayer::NewPlayer' has a wrong offset!");
static_assert(offsetof(RBHUDPlayerStatus_SetPlayer, bShouldBindStatusChanges) == 0x000008, "Member 'RBHUDPlayerStatus_SetPlayer::bShouldBindStatusChanges' has a wrong offset!");

// Function OPP.RBHurtVolume.OnPawnOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBHurtVolume_OnPawnOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2128[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHurtVolume_OnPawnOverlap) == 0x000008, "Wrong alignment on RBHurtVolume_OnPawnOverlap");
static_assert(sizeof(RBHurtVolume_OnPawnOverlap) == 0x0000A8, "Wrong size on RBHurtVolume_OnPawnOverlap");
static_assert(offsetof(RBHurtVolume_OnPawnOverlap, OverlappedComponent) == 0x000000, "Member 'RBHurtVolume_OnPawnOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBHurtVolume_OnPawnOverlap, OtherActor) == 0x000008, "Member 'RBHurtVolume_OnPawnOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBHurtVolume_OnPawnOverlap, OtherComp) == 0x000010, "Member 'RBHurtVolume_OnPawnOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBHurtVolume_OnPawnOverlap, OtherBodyIndex) == 0x000018, "Member 'RBHurtVolume_OnPawnOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBHurtVolume_OnPawnOverlap, bFromSweep) == 0x00001C, "Member 'RBHurtVolume_OnPawnOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBHurtVolume_OnPawnOverlap, SweepResult) == 0x000020, "Member 'RBHurtVolume_OnPawnOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBHurtVolume.Toggle
// 0x0001 (0x0001 - 0x0000)
struct RBHurtVolume_Toggle final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHurtVolume_Toggle) == 0x000001, "Wrong alignment on RBHurtVolume_Toggle");
static_assert(sizeof(RBHurtVolume_Toggle) == 0x000001, "Wrong size on RBHurtVolume_Toggle");
static_assert(offsetof(RBHurtVolume_Toggle, bEnabledValue) == 0x000000, "Member 'RBHurtVolume_Toggle::bEnabledValue' has a wrong offset!");

// Function OPP.RBHurtVolume.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBHurtVolume_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBHurtVolume_IsEnabled) == 0x000001, "Wrong alignment on RBHurtVolume_IsEnabled");
static_assert(sizeof(RBHurtVolume_IsEnabled) == 0x000001, "Wrong size on RBHurtVolume_IsEnabled");
static_assert(offsetof(RBHurtVolume_IsEnabled, ReturnValue) == 0x000000, "Member 'RBHurtVolume_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBImposter.Event_SetCustomization
// 0x0038 (0x0038 - 0x0000)
struct RBImposter_Event_SetCustomization final
{
public:
	struct FRBPlayerCustomizationInfo             NewCustomization;                                  // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBImposter_Event_SetCustomization) == 0x000008, "Wrong alignment on RBImposter_Event_SetCustomization");
static_assert(sizeof(RBImposter_Event_SetCustomization) == 0x000038, "Wrong size on RBImposter_Event_SetCustomization");
static_assert(offsetof(RBImposter_Event_SetCustomization, NewCustomization) == 0x000000, "Member 'RBImposter_Event_SetCustomization::NewCustomization' has a wrong offset!");

// Function OPP.RBImposter.BP_GetCustomizationInfo
// 0x0038 (0x0038 - 0x0000)
struct RBImposter_BP_GetCustomizationInfo final
{
public:
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBImposter_BP_GetCustomizationInfo) == 0x000008, "Wrong alignment on RBImposter_BP_GetCustomizationInfo");
static_assert(sizeof(RBImposter_BP_GetCustomizationInfo) == 0x000038, "Wrong size on RBImposter_BP_GetCustomizationInfo");
static_assert(offsetof(RBImposter_BP_GetCustomizationInfo, ReturnValue) == 0x000000, "Member 'RBImposter_BP_GetCustomizationInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBInteractivePanelObjectiveCoordinator.OnPanelActiveChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct RBInteractivePanelObjectiveCoordinator_OnPanelActiveChangedEvent final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractivePanelObjectiveCoordinator_OnPanelActiveChangedEvent) == 0x000008, "Wrong alignment on RBInteractivePanelObjectiveCoordinator_OnPanelActiveChangedEvent");
static_assert(sizeof(RBInteractivePanelObjectiveCoordinator_OnPanelActiveChangedEvent) == 0x000010, "Wrong size on RBInteractivePanelObjectiveCoordinator_OnPanelActiveChangedEvent");
static_assert(offsetof(RBInteractivePanelObjectiveCoordinator_OnPanelActiveChangedEvent, Panel) == 0x000000, "Member 'RBInteractivePanelObjectiveCoordinator_OnPanelActiveChangedEvent::Panel' has a wrong offset!");
static_assert(offsetof(RBInteractivePanelObjectiveCoordinator_OnPanelActiveChangedEvent, PawnInteracting) == 0x000008, "Member 'RBInteractivePanelObjectiveCoordinator_OnPanelActiveChangedEvent::PawnInteracting' has a wrong offset!");

// Function OPP.RBInteractivePanelObjectiveCoordinator.OnPanelPawnInteractingChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct RBInteractivePanelObjectiveCoordinator_OnPanelPawnInteractingChangedEvent final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBInteractivePanelObjectiveCoordinator_OnPanelPawnInteractingChangedEvent) == 0x000008, "Wrong alignment on RBInteractivePanelObjectiveCoordinator_OnPanelPawnInteractingChangedEvent");
static_assert(sizeof(RBInteractivePanelObjectiveCoordinator_OnPanelPawnInteractingChangedEvent) == 0x000010, "Wrong size on RBInteractivePanelObjectiveCoordinator_OnPanelPawnInteractingChangedEvent");
static_assert(offsetof(RBInteractivePanelObjectiveCoordinator_OnPanelPawnInteractingChangedEvent, Panel) == 0x000000, "Member 'RBInteractivePanelObjectiveCoordinator_OnPanelPawnInteractingChangedEvent::Panel' has a wrong offset!");
static_assert(offsetof(RBInteractivePanelObjectiveCoordinator_OnPanelPawnInteractingChangedEvent, PawnInteracting) == 0x000008, "Member 'RBInteractivePanelObjectiveCoordinator_OnPanelPawnInteractingChangedEvent::PawnInteracting' has a wrong offset!");

// Function OPP.RBItemActiveSkill.OnItemDeployed
// 0x0008 (0x0008 - 0x0000)
struct RBItemActiveSkill_OnItemDeployed final
{
public:
	class ARBDeployableSkillItem*                 ThrownItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBItemActiveSkill_OnItemDeployed) == 0x000008, "Wrong alignment on RBItemActiveSkill_OnItemDeployed");
static_assert(sizeof(RBItemActiveSkill_OnItemDeployed) == 0x000008, "Wrong size on RBItemActiveSkill_OnItemDeployed");
static_assert(offsetof(RBItemActiveSkill_OnItemDeployed, ThrownItem) == 0x000000, "Member 'RBItemActiveSkill_OnItemDeployed::ThrownItem' has a wrong offset!");

// Function OPP.RBItemActiveSkill.OnItemThrown
// 0x0008 (0x0008 - 0x0000)
struct RBItemActiveSkill_OnItemThrown final
{
public:
	class ARBThrowableWeapon*                     ThrownItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBItemActiveSkill_OnItemThrown) == 0x000008, "Wrong alignment on RBItemActiveSkill_OnItemThrown");
static_assert(sizeof(RBItemActiveSkill_OnItemThrown) == 0x000008, "Wrong size on RBItemActiveSkill_OnItemThrown");
static_assert(offsetof(RBItemActiveSkill_OnItemThrown, ThrownItem) == 0x000000, "Member 'RBItemActiveSkill_OnItemThrown::ThrownItem' has a wrong offset!");

// Function OPP.RBItemSpawningManager.RequestCollectableSpawning
// 0x0020 (0x0020 - 0x0000)
struct RBItemSpawningManager_RequestCollectableSpawning final
{
public:
	class AActor*                                 Requester;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ARBPickup>                  CollectableClass;                                  // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberToSpawn;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceBetweenItems;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollectablePriority                          Priority;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnAsMuchAsPossible;                            // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2138[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBItemSpawningManager_RequestCollectableSpawning) == 0x000008, "Wrong alignment on RBItemSpawningManager_RequestCollectableSpawning");
static_assert(sizeof(RBItemSpawningManager_RequestCollectableSpawning) == 0x000020, "Wrong size on RBItemSpawningManager_RequestCollectableSpawning");
static_assert(offsetof(RBItemSpawningManager_RequestCollectableSpawning, Requester) == 0x000000, "Member 'RBItemSpawningManager_RequestCollectableSpawning::Requester' has a wrong offset!");
static_assert(offsetof(RBItemSpawningManager_RequestCollectableSpawning, CollectableClass) == 0x000008, "Member 'RBItemSpawningManager_RequestCollectableSpawning::CollectableClass' has a wrong offset!");
static_assert(offsetof(RBItemSpawningManager_RequestCollectableSpawning, NumberToSpawn) == 0x000010, "Member 'RBItemSpawningManager_RequestCollectableSpawning::NumberToSpawn' has a wrong offset!");
static_assert(offsetof(RBItemSpawningManager_RequestCollectableSpawning, DistanceBetweenItems) == 0x000014, "Member 'RBItemSpawningManager_RequestCollectableSpawning::DistanceBetweenItems' has a wrong offset!");
static_assert(offsetof(RBItemSpawningManager_RequestCollectableSpawning, Priority) == 0x000018, "Member 'RBItemSpawningManager_RequestCollectableSpawning::Priority' has a wrong offset!");
static_assert(offsetof(RBItemSpawningManager_RequestCollectableSpawning, bSpawnAsMuchAsPossible) == 0x000019, "Member 'RBItemSpawningManager_RequestCollectableSpawning::bSpawnAsMuchAsPossible' has a wrong offset!");

// Function OPP.RBItemSpawningManager.GetItemClass
// 0x0010 (0x0010 - 0x0000)
struct RBItemSpawningManager_GetItemClass final
{
public:
	EItemType                                     ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2139[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ARBPickup>                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBItemSpawningManager_GetItemClass) == 0x000008, "Wrong alignment on RBItemSpawningManager_GetItemClass");
static_assert(sizeof(RBItemSpawningManager_GetItemClass) == 0x000010, "Wrong size on RBItemSpawningManager_GetItemClass");
static_assert(offsetof(RBItemSpawningManager_GetItemClass, ItemType) == 0x000000, "Member 'RBItemSpawningManager_GetItemClass::ItemType' has a wrong offset!");
static_assert(offsetof(RBItemSpawningManager_GetItemClass, ReturnValue) == 0x000008, "Member 'RBItemSpawningManager_GetItemClass::ReturnValue' has a wrong offset!");

// Function OPP.RBKeyLockedRoomDevice.GetLinkedRollingGate
// 0x0008 (0x0008 - 0x0000)
struct RBKeyLockedRoomDevice_GetLinkedRollingGate final
{
public:
	class ARBTriggerableGate*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBKeyLockedRoomDevice_GetLinkedRollingGate) == 0x000008, "Wrong alignment on RBKeyLockedRoomDevice_GetLinkedRollingGate");
static_assert(sizeof(RBKeyLockedRoomDevice_GetLinkedRollingGate) == 0x000008, "Wrong size on RBKeyLockedRoomDevice_GetLinkedRollingGate");
static_assert(offsetof(RBKeyLockedRoomDevice_GetLinkedRollingGate, ReturnValue) == 0x000000, "Member 'RBKeyLockedRoomDevice_GetLinkedRollingGate::ReturnValue' has a wrong offset!");

// Function OPP.RBKeyLockedRoomDevice.SetLinkedRollingGate
// 0x0008 (0x0008 - 0x0000)
struct RBKeyLockedRoomDevice_SetLinkedRollingGate final
{
public:
	class ARBTriggerableGate*                     RollingGate;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBKeyLockedRoomDevice_SetLinkedRollingGate) == 0x000008, "Wrong alignment on RBKeyLockedRoomDevice_SetLinkedRollingGate");
static_assert(sizeof(RBKeyLockedRoomDevice_SetLinkedRollingGate) == 0x000008, "Wrong size on RBKeyLockedRoomDevice_SetLinkedRollingGate");
static_assert(offsetof(RBKeyLockedRoomDevice_SetLinkedRollingGate, RollingGate) == 0x000000, "Member 'RBKeyLockedRoomDevice_SetLinkedRollingGate::RollingGate' has a wrong offset!");

// Function OPP.RBSplineActor.SetLink
// 0x0008 (0x0008 - 0x0000)
struct RBSplineActor_SetLink final
{
public:
	class ARBSplineActor*                         NextMarker;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineActor_SetLink) == 0x000008, "Wrong alignment on RBSplineActor_SetLink");
static_assert(sizeof(RBSplineActor_SetLink) == 0x000008, "Wrong size on RBSplineActor_SetLink");
static_assert(offsetof(RBSplineActor_SetLink, NextMarker) == 0x000000, "Member 'RBSplineActor_SetLink::NextMarker' has a wrong offset!");

// Function OPP.RBLedgeMarker.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBLedgeMarker_BP_SetEnabled final
{
public:
	bool                                          bEnabledValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLedgeMarker_BP_SetEnabled) == 0x000001, "Wrong alignment on RBLedgeMarker_BP_SetEnabled");
static_assert(sizeof(RBLedgeMarker_BP_SetEnabled) == 0x000001, "Wrong size on RBLedgeMarker_BP_SetEnabled");
static_assert(offsetof(RBLedgeMarker_BP_SetEnabled, bEnabledValue) == 0x000000, "Member 'RBLedgeMarker_BP_SetEnabled::bEnabledValue' has a wrong offset!");

// Function OPP.RBLedgeMarker.SetCanBeUsedByAI
// 0x0001 (0x0001 - 0x0000)
struct RBLedgeMarker_SetCanBeUsedByAI final
{
public:
	bool                                          CanBeUsedByAI;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLedgeMarker_SetCanBeUsedByAI) == 0x000001, "Wrong alignment on RBLedgeMarker_SetCanBeUsedByAI");
static_assert(sizeof(RBLedgeMarker_SetCanBeUsedByAI) == 0x000001, "Wrong size on RBLedgeMarker_SetCanBeUsedByAI");
static_assert(offsetof(RBLedgeMarker_SetCanBeUsedByAI, CanBeUsedByAI) == 0x000000, "Member 'RBLedgeMarker_SetCanBeUsedByAI::CanBeUsedByAI' has a wrong offset!");

// Function OPP.RBLedgeMarker.Validate
// 0x0001 (0x0001 - 0x0000)
struct RBLedgeMarker_Validate final
{
public:
	bool                                          bDebug;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLedgeMarker_Validate) == 0x000001, "Wrong alignment on RBLedgeMarker_Validate");
static_assert(sizeof(RBLedgeMarker_Validate) == 0x000001, "Wrong size on RBLedgeMarker_Validate");
static_assert(offsetof(RBLedgeMarker_Validate, bDebug) == 0x000000, "Member 'RBLedgeMarker_Validate::bDebug' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnAIDirectorSpawnedBot
// 0x0010 (0x0010 - 0x0000)
struct RBLevelScriptActor_OnAIDirectorSpawnedBot final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBNPC*                                 Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLevelScriptActor_OnAIDirectorSpawnedBot) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnAIDirectorSpawnedBot");
static_assert(sizeof(RBLevelScriptActor_OnAIDirectorSpawnedBot) == 0x000010, "Wrong size on RBLevelScriptActor_OnAIDirectorSpawnedBot");
static_assert(offsetof(RBLevelScriptActor_OnAIDirectorSpawnedBot, bot) == 0x000000, "Member 'RBLevelScriptActor_OnAIDirectorSpawnedBot::bot' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnAIDirectorSpawnedBot, Pawn) == 0x000008, "Member 'RBLevelScriptActor_OnAIDirectorSpawnedBot::Pawn' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnAIDirectorSpawnedBotCallback
// 0x0010 (0x0010 - 0x0000)
struct RBLevelScriptActor_OnAIDirectorSpawnedBotCallback final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBNPC*                                 Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLevelScriptActor_OnAIDirectorSpawnedBotCallback) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnAIDirectorSpawnedBotCallback");
static_assert(sizeof(RBLevelScriptActor_OnAIDirectorSpawnedBotCallback) == 0x000010, "Wrong size on RBLevelScriptActor_OnAIDirectorSpawnedBotCallback");
static_assert(offsetof(RBLevelScriptActor_OnAIDirectorSpawnedBotCallback, bot) == 0x000000, "Member 'RBLevelScriptActor_OnAIDirectorSpawnedBotCallback::bot' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnAIDirectorSpawnedBotCallback, Pawn) == 0x000008, "Member 'RBLevelScriptActor_OnAIDirectorSpawnedBotCallback::Pawn' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnCoordinatorCompleted
// 0x0010 (0x0010 - 0x0000)
struct RBLevelScriptActor_OnCoordinatorCompleted final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsApplyingCheats;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2148[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLevelScriptActor_OnCoordinatorCompleted) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnCoordinatorCompleted");
static_assert(sizeof(RBLevelScriptActor_OnCoordinatorCompleted) == 0x000010, "Wrong size on RBLevelScriptActor_OnCoordinatorCompleted");
static_assert(offsetof(RBLevelScriptActor_OnCoordinatorCompleted, Coordinator) == 0x000000, "Member 'RBLevelScriptActor_OnCoordinatorCompleted::Coordinator' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnCoordinatorCompleted, bIsApplyingCheats) == 0x000008, "Member 'RBLevelScriptActor_OnCoordinatorCompleted::bIsApplyingCheats' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnCoordinatorStarted
// 0x0010 (0x0010 - 0x0000)
struct RBLevelScriptActor_OnCoordinatorStarted final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsApplyingCheats;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2149[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLevelScriptActor_OnCoordinatorStarted) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnCoordinatorStarted");
static_assert(sizeof(RBLevelScriptActor_OnCoordinatorStarted) == 0x000010, "Wrong size on RBLevelScriptActor_OnCoordinatorStarted");
static_assert(offsetof(RBLevelScriptActor_OnCoordinatorStarted, Coordinator) == 0x000000, "Member 'RBLevelScriptActor_OnCoordinatorStarted::Coordinator' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnCoordinatorStarted, bIsApplyingCheats) == 0x000008, "Member 'RBLevelScriptActor_OnCoordinatorStarted::bIsApplyingCheats' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnObjectiveCoordinatorStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBLevelScriptActor_OnObjectiveCoordinatorStateChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveCoordinatorState                    State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLevelScriptActor_OnObjectiveCoordinatorStateChanged) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnObjectiveCoordinatorStateChanged");
static_assert(sizeof(RBLevelScriptActor_OnObjectiveCoordinatorStateChanged) == 0x000010, "Wrong size on RBLevelScriptActor_OnObjectiveCoordinatorStateChanged");
static_assert(offsetof(RBLevelScriptActor_OnObjectiveCoordinatorStateChanged, Coordinator) == 0x000000, "Member 'RBLevelScriptActor_OnObjectiveCoordinatorStateChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnObjectiveCoordinatorStateChanged, State) == 0x000008, "Member 'RBLevelScriptActor_OnObjectiveCoordinatorStateChanged::State' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnStageEnded
// 0x0058 (0x0058 - 0x0000)
struct RBLevelScriptActor_OnStageEnded final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(Parm, NativeAccessSpecifierPublic)
	bool                                          bIsFail;                                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214B[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLevelScriptActor_OnStageEnded) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnStageEnded");
static_assert(sizeof(RBLevelScriptActor_OnStageEnded) == 0x000058, "Wrong size on RBLevelScriptActor_OnStageEnded");
static_assert(offsetof(RBLevelScriptActor_OnStageEnded, StageID) == 0x000000, "Member 'RBLevelScriptActor_OnStageEnded::StageID' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnStageEnded, MissionID) == 0x000028, "Member 'RBLevelScriptActor_OnStageEnded::MissionID' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnStageEnded, bIsFail) == 0x000050, "Member 'RBLevelScriptActor_OnStageEnded::bIsFail' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnStageEndedCallback
// 0x0058 (0x0058 - 0x0000)
struct RBLevelScriptActor_OnStageEndedCallback final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsFail;                                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214C[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLevelScriptActor_OnStageEndedCallback) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnStageEndedCallback");
static_assert(sizeof(RBLevelScriptActor_OnStageEndedCallback) == 0x000058, "Wrong size on RBLevelScriptActor_OnStageEndedCallback");
static_assert(offsetof(RBLevelScriptActor_OnStageEndedCallback, StageID) == 0x000000, "Member 'RBLevelScriptActor_OnStageEndedCallback::StageID' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnStageEndedCallback, MissionID) == 0x000028, "Member 'RBLevelScriptActor_OnStageEndedCallback::MissionID' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnStageEndedCallback, bIsFail) == 0x000050, "Member 'RBLevelScriptActor_OnStageEndedCallback::bIsFail' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnStageReady
// 0x0050 (0x0050 - 0x0000)
struct RBLevelScriptActor_OnStageReady final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLevelScriptActor_OnStageReady) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnStageReady");
static_assert(sizeof(RBLevelScriptActor_OnStageReady) == 0x000050, "Wrong size on RBLevelScriptActor_OnStageReady");
static_assert(offsetof(RBLevelScriptActor_OnStageReady, StageID) == 0x000000, "Member 'RBLevelScriptActor_OnStageReady::StageID' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnStageReady, MissionID) == 0x000028, "Member 'RBLevelScriptActor_OnStageReady::MissionID' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnStageReadyCallback
// 0x0050 (0x0050 - 0x0000)
struct RBLevelScriptActor_OnStageReadyCallback final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLevelScriptActor_OnStageReadyCallback) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnStageReadyCallback");
static_assert(sizeof(RBLevelScriptActor_OnStageReadyCallback) == 0x000050, "Wrong size on RBLevelScriptActor_OnStageReadyCallback");
static_assert(offsetof(RBLevelScriptActor_OnStageReadyCallback, StageID) == 0x000000, "Member 'RBLevelScriptActor_OnStageReadyCallback::StageID' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnStageReadyCallback, MissionID) == 0x000028, "Member 'RBLevelScriptActor_OnStageReadyCallback::MissionID' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnStageStarted
// 0x0050 (0x0050 - 0x0000)
struct RBLevelScriptActor_OnStageStarted final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLevelScriptActor_OnStageStarted) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnStageStarted");
static_assert(sizeof(RBLevelScriptActor_OnStageStarted) == 0x000050, "Wrong size on RBLevelScriptActor_OnStageStarted");
static_assert(offsetof(RBLevelScriptActor_OnStageStarted, StageID) == 0x000000, "Member 'RBLevelScriptActor_OnStageStarted::StageID' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnStageStarted, MissionID) == 0x000028, "Member 'RBLevelScriptActor_OnStageStarted::MissionID' has a wrong offset!");

// Function OPP.RBLevelScriptActor.OnStageStartedCallback
// 0x0050 (0x0050 - 0x0000)
struct RBLevelScriptActor_OnStageStartedCallback final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLevelScriptActor_OnStageStartedCallback) == 0x000008, "Wrong alignment on RBLevelScriptActor_OnStageStartedCallback");
static_assert(sizeof(RBLevelScriptActor_OnStageStartedCallback) == 0x000050, "Wrong size on RBLevelScriptActor_OnStageStartedCallback");
static_assert(offsetof(RBLevelScriptActor_OnStageStartedCallback, StageID) == 0x000000, "Member 'RBLevelScriptActor_OnStageStartedCallback::StageID' has a wrong offset!");
static_assert(offsetof(RBLevelScriptActor_OnStageStartedCallback, MissionID) == 0x000028, "Member 'RBLevelScriptActor_OnStageStartedCallback::MissionID' has a wrong offset!");

// Function OPP.RBLobbyGame.GetLocalPanel
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyGame_GetLocalPanel final
{
public:
	class URBLobbyGamePanelComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyGame_GetLocalPanel) == 0x000008, "Wrong alignment on RBLobbyGame_GetLocalPanel");
static_assert(sizeof(RBLobbyGame_GetLocalPanel) == 0x000008, "Wrong size on RBLobbyGame_GetLocalPanel");
static_assert(offsetof(RBLobbyGame_GetLocalPanel, ReturnValue) == 0x000000, "Member 'RBLobbyGame_GetLocalPanel::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyGame.GetOpponentPanel
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyGame_GetOpponentPanel final
{
public:
	class URBLobbyGamePanelComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyGame_GetOpponentPanel) == 0x000008, "Wrong alignment on RBLobbyGame_GetOpponentPanel");
static_assert(sizeof(RBLobbyGame_GetOpponentPanel) == 0x000008, "Wrong size on RBLobbyGame_GetOpponentPanel");
static_assert(offsetof(RBLobbyGame_GetOpponentPanel, ReturnValue) == 0x000000, "Member 'RBLobbyGame_GetOpponentPanel::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyGame.IsGameInProgress
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyGame_IsGameInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyGame_IsGameInProgress) == 0x000001, "Wrong alignment on RBLobbyGame_IsGameInProgress");
static_assert(sizeof(RBLobbyGame_IsGameInProgress) == 0x000001, "Wrong size on RBLobbyGame_IsGameInProgress");
static_assert(offsetof(RBLobbyGame_IsGameInProgress, ReturnValue) == 0x000000, "Member 'RBLobbyGame_IsGameInProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Client_FindPartyCanceled
// 0x000C (0x000C - 0x0000)
struct RBLobbyPlayerController_Client_FindPartyCanceled final
{
public:
	EMatchCancelationReason                       Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2155[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ErrorFacility;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Client_FindPartyCanceled) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Client_FindPartyCanceled");
static_assert(sizeof(RBLobbyPlayerController_Client_FindPartyCanceled) == 0x00000C, "Wrong size on RBLobbyPlayerController_Client_FindPartyCanceled");
static_assert(offsetof(RBLobbyPlayerController_Client_FindPartyCanceled, Reason) == 0x000000, "Member 'RBLobbyPlayerController_Client_FindPartyCanceled::Reason' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Client_FindPartyCanceled, ErrorFacility) == 0x000004, "Member 'RBLobbyPlayerController_Client_FindPartyCanceled::ErrorFacility' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Client_FindPartyCanceled, ErrorCode) == 0x000008, "Member 'RBLobbyPlayerController_Client_FindPartyCanceled::ErrorCode' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Client_MatchCanceled
// 0x000C (0x000C - 0x0000)
struct RBLobbyPlayerController_Client_MatchCanceled final
{
public:
	EMatchCancelationReason                       Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2156[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ErrorFacility;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Client_MatchCanceled) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Client_MatchCanceled");
static_assert(sizeof(RBLobbyPlayerController_Client_MatchCanceled) == 0x00000C, "Wrong size on RBLobbyPlayerController_Client_MatchCanceled");
static_assert(offsetof(RBLobbyPlayerController_Client_MatchCanceled, Reason) == 0x000000, "Member 'RBLobbyPlayerController_Client_MatchCanceled::Reason' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Client_MatchCanceled, ErrorFacility) == 0x000004, "Member 'RBLobbyPlayerController_Client_MatchCanceled::ErrorFacility' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Client_MatchCanceled, ErrorCode) == 0x000008, "Member 'RBLobbyPlayerController_Client_MatchCanceled::ErrorCode' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Client_ResetProgram
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyPlayerController_Client_ResetProgram final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Client_ResetProgram) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Client_ResetProgram");
static_assert(sizeof(RBLobbyPlayerController_Client_ResetProgram) == 0x000008, "Wrong size on RBLobbyPlayerController_Client_ResetProgram");
static_assert(offsetof(RBLobbyPlayerController_Client_ResetProgram, ProgramId) == 0x000000, "Member 'RBLobbyPlayerController_Client_ResetProgram::ProgramId' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Client_TravelToPendingMatch
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerController_Client_TravelToPendingMatch final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Client_TravelToPendingMatch) == 0x000001, "Wrong alignment on RBLobbyPlayerController_Client_TravelToPendingMatch");
static_assert(sizeof(RBLobbyPlayerController_Client_TravelToPendingMatch) == 0x000001, "Wrong size on RBLobbyPlayerController_Client_TravelToPendingMatch");
static_assert(offsetof(RBLobbyPlayerController_Client_TravelToPendingMatch, bForced) == 0x000000, "Member 'RBLobbyPlayerController_Client_TravelToPendingMatch::bForced' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Client_WaitForMatchPlacement
// 0x0010 (0x0010 - 0x0000)
struct RBLobbyPlayerController_Client_WaitForMatchPlacement final
{
public:
	class FString                                 PlacementId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Client_WaitForMatchPlacement) == 0x000008, "Wrong alignment on RBLobbyPlayerController_Client_WaitForMatchPlacement");
static_assert(sizeof(RBLobbyPlayerController_Client_WaitForMatchPlacement) == 0x000010, "Wrong size on RBLobbyPlayerController_Client_WaitForMatchPlacement");
static_assert(offsetof(RBLobbyPlayerController_Client_WaitForMatchPlacement, PlacementId) == 0x000000, "Member 'RBLobbyPlayerController_Client_WaitForMatchPlacement::PlacementId' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Client_WaitForParty
// 0x0040 (0x0040 - 0x0000)
struct RBLobbyPlayerController_Client_WaitForParty final
{
public:
	class FString                                 TicketId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchmakingConfigurationName;                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProfileId>                     GroupMembers;                                      // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ProgramId;                                         // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrialId;                                           // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Client_WaitForParty) == 0x000008, "Wrong alignment on RBLobbyPlayerController_Client_WaitForParty");
static_assert(sizeof(RBLobbyPlayerController_Client_WaitForParty) == 0x000040, "Wrong size on RBLobbyPlayerController_Client_WaitForParty");
static_assert(offsetof(RBLobbyPlayerController_Client_WaitForParty, TicketId) == 0x000000, "Member 'RBLobbyPlayerController_Client_WaitForParty::TicketId' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Client_WaitForParty, MatchmakingConfigurationName) == 0x000010, "Member 'RBLobbyPlayerController_Client_WaitForParty::MatchmakingConfigurationName' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Client_WaitForParty, GroupMembers) == 0x000020, "Member 'RBLobbyPlayerController_Client_WaitForParty::GroupMembers' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Client_WaitForParty, ProgramId) == 0x000030, "Member 'RBLobbyPlayerController_Client_WaitForParty::ProgramId' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Client_WaitForParty, TrialId) == 0x000038, "Member 'RBLobbyPlayerController_Client_WaitForParty::TrialId' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Event_OnFindPartyStateUpdated
// 0x0030 (0x0030 - 0x0000)
struct RBLobbyPlayerController_Event_OnFindPartyStateUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFindPartyState                        FindPartyState;                                    // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Event_OnFindPartyStateUpdated) == 0x000008, "Wrong alignment on RBLobbyPlayerController_Event_OnFindPartyStateUpdated");
static_assert(sizeof(RBLobbyPlayerController_Event_OnFindPartyStateUpdated) == 0x000030, "Wrong size on RBLobbyPlayerController_Event_OnFindPartyStateUpdated");
static_assert(offsetof(RBLobbyPlayerController_Event_OnFindPartyStateUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBLobbyPlayerController_Event_OnFindPartyStateUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Event_OnFindPartyStateUpdated, FindPartyState) == 0x000008, "Member 'RBLobbyPlayerController_Event_OnFindPartyStateUpdated::FindPartyState' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Event_OnMatchSettingsUpdated
// 0x0024 (0x0024 - 0x0000)
struct RBLobbyPlayerController_Event_OnMatchSettingsUpdated final
{
public:
	struct FMatchSettings                         MatchSettings;                                     // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Event_OnMatchSettingsUpdated) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Event_OnMatchSettingsUpdated");
static_assert(sizeof(RBLobbyPlayerController_Event_OnMatchSettingsUpdated) == 0x000024, "Wrong size on RBLobbyPlayerController_Event_OnMatchSettingsUpdated");
static_assert(offsetof(RBLobbyPlayerController_Event_OnMatchSettingsUpdated, MatchSettings) == 0x000000, "Member 'RBLobbyPlayerController_Event_OnMatchSettingsUpdated::MatchSettings' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Event_OnMatchStateUpdated
// 0x0028 (0x0028 - 0x0000)
struct RBLobbyPlayerController_Event_OnMatchStateUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchState                            MatchState;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Event_OnMatchStateUpdated) == 0x000008, "Wrong alignment on RBLobbyPlayerController_Event_OnMatchStateUpdated");
static_assert(sizeof(RBLobbyPlayerController_Event_OnMatchStateUpdated) == 0x000028, "Wrong size on RBLobbyPlayerController_Event_OnMatchStateUpdated");
static_assert(offsetof(RBLobbyPlayerController_Event_OnMatchStateUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBLobbyPlayerController_Event_OnMatchStateUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Event_OnMatchStateUpdated, MatchState) == 0x000008, "Member 'RBLobbyPlayerController_Event_OnMatchStateUpdated::MatchState' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.OnEvalCorridorUpdated
// 0x0010 (0x0010 - 0x0000)
struct RBLobbyPlayerController_OnEvalCorridorUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBEvalCorridor*                        EvalCorridor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_OnEvalCorridorUpdated) == 0x000008, "Wrong alignment on RBLobbyPlayerController_OnEvalCorridorUpdated");
static_assert(sizeof(RBLobbyPlayerController_OnEvalCorridorUpdated) == 0x000010, "Wrong size on RBLobbyPlayerController_OnEvalCorridorUpdated");
static_assert(offsetof(RBLobbyPlayerController_OnEvalCorridorUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBLobbyPlayerController_OnEvalCorridorUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_OnEvalCorridorUpdated, EvalCorridor) == 0x000008, "Member 'RBLobbyPlayerController_OnEvalCorridorUpdated::EvalCorridor' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.OnPartyOwnerMatchSettingsUpdated
// 0x0030 (0x0030 - 0x0000)
struct RBLobbyPlayerController_OnPartyOwnerMatchSettingsUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchSettings                         MatchSettings;                                     // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2157[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLobbyPlayerController_OnPartyOwnerMatchSettingsUpdated) == 0x000008, "Wrong alignment on RBLobbyPlayerController_OnPartyOwnerMatchSettingsUpdated");
static_assert(sizeof(RBLobbyPlayerController_OnPartyOwnerMatchSettingsUpdated) == 0x000030, "Wrong size on RBLobbyPlayerController_OnPartyOwnerMatchSettingsUpdated");
static_assert(offsetof(RBLobbyPlayerController_OnPartyOwnerMatchSettingsUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBLobbyPlayerController_OnPartyOwnerMatchSettingsUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_OnPartyOwnerMatchSettingsUpdated, MatchSettings) == 0x000008, "Member 'RBLobbyPlayerController_OnPartyOwnerMatchSettingsUpdated::MatchSettings' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.OnPlayerCellUpdated
// 0x0010 (0x0010 - 0x0000)
struct RBLobbyPlayerController_OnPlayerCellUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayerCell*                          PlayerCell;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_OnPlayerCellUpdated) == 0x000008, "Wrong alignment on RBLobbyPlayerController_OnPlayerCellUpdated");
static_assert(sizeof(RBLobbyPlayerController_OnPlayerCellUpdated) == 0x000010, "Wrong size on RBLobbyPlayerController_OnPlayerCellUpdated");
static_assert(offsetof(RBLobbyPlayerController_OnPlayerCellUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBLobbyPlayerController_OnPlayerCellUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_OnPlayerCellUpdated, PlayerCell) == 0x000008, "Member 'RBLobbyPlayerController_OnPlayerCellUpdated::PlayerCell' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.OnPlayerReleaseAvailableServerTimeUpdated
// 0x0010 (0x0010 - 0x0000)
struct RBLobbyPlayerController_OnPlayerReleaseAvailableServerTimeUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerReleaseAvailableServerTime;                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2158[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLobbyPlayerController_OnPlayerReleaseAvailableServerTimeUpdated) == 0x000008, "Wrong alignment on RBLobbyPlayerController_OnPlayerReleaseAvailableServerTimeUpdated");
static_assert(sizeof(RBLobbyPlayerController_OnPlayerReleaseAvailableServerTimeUpdated) == 0x000010, "Wrong size on RBLobbyPlayerController_OnPlayerReleaseAvailableServerTimeUpdated");
static_assert(offsetof(RBLobbyPlayerController_OnPlayerReleaseAvailableServerTimeUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBLobbyPlayerController_OnPlayerReleaseAvailableServerTimeUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_OnPlayerReleaseAvailableServerTimeUpdated, PlayerReleaseAvailableServerTime) == 0x000008, "Member 'RBLobbyPlayerController_OnPlayerReleaseAvailableServerTimeUpdated::PlayerReleaseAvailableServerTime' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.OnPlayerReleaseStateUpdated
// 0x0018 (0x0018 - 0x0000)
struct RBLobbyPlayerController_OnPlayerReleaseStateUpdated final
{
public:
	struct FPlayerReleaseState                    PlayerReleaseState;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_OnPlayerReleaseStateUpdated) == 0x000008, "Wrong alignment on RBLobbyPlayerController_OnPlayerReleaseStateUpdated");
static_assert(sizeof(RBLobbyPlayerController_OnPlayerReleaseStateUpdated) == 0x000018, "Wrong size on RBLobbyPlayerController_OnPlayerReleaseStateUpdated");
static_assert(offsetof(RBLobbyPlayerController_OnPlayerReleaseStateUpdated, PlayerReleaseState) == 0x000000, "Member 'RBLobbyPlayerController_OnPlayerReleaseStateUpdated::PlayerReleaseState' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.OnPlayerStateFindPartyStateUpdated
// 0x0030 (0x0030 - 0x0000)
struct RBLobbyPlayerController_OnPlayerStateFindPartyStateUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFindPartyState                        FindPartyState;                                    // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_OnPlayerStateFindPartyStateUpdated) == 0x000008, "Wrong alignment on RBLobbyPlayerController_OnPlayerStateFindPartyStateUpdated");
static_assert(sizeof(RBLobbyPlayerController_OnPlayerStateFindPartyStateUpdated) == 0x000030, "Wrong size on RBLobbyPlayerController_OnPlayerStateFindPartyStateUpdated");
static_assert(offsetof(RBLobbyPlayerController_OnPlayerStateFindPartyStateUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBLobbyPlayerController_OnPlayerStateFindPartyStateUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_OnPlayerStateFindPartyStateUpdated, FindPartyState) == 0x000008, "Member 'RBLobbyPlayerController_OnPlayerStateFindPartyStateUpdated::FindPartyState' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.OnPlayerStateMatchStateUpdated
// 0x0028 (0x0028 - 0x0000)
struct RBLobbyPlayerController_OnPlayerStateMatchStateUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchState                            MatchState;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_OnPlayerStateMatchStateUpdated) == 0x000008, "Wrong alignment on RBLobbyPlayerController_OnPlayerStateMatchStateUpdated");
static_assert(sizeof(RBLobbyPlayerController_OnPlayerStateMatchStateUpdated) == 0x000028, "Wrong size on RBLobbyPlayerController_OnPlayerStateMatchStateUpdated");
static_assert(offsetof(RBLobbyPlayerController_OnPlayerStateMatchStateUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBLobbyPlayerController_OnPlayerStateMatchStateUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_OnPlayerStateMatchStateUpdated, MatchState) == 0x000008, "Member 'RBLobbyPlayerController_OnPlayerStateMatchStateUpdated::MatchState' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_CancelFindParty
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerController_Server_CancelFindParty final
{
public:
	EMatchCancelationReason                       Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_CancelFindParty) == 0x000001, "Wrong alignment on RBLobbyPlayerController_Server_CancelFindParty");
static_assert(sizeof(RBLobbyPlayerController_Server_CancelFindParty) == 0x000001, "Wrong size on RBLobbyPlayerController_Server_CancelFindParty");
static_assert(offsetof(RBLobbyPlayerController_Server_CancelFindParty, Reason) == 0x000000, "Member 'RBLobbyPlayerController_Server_CancelFindParty::Reason' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_CancelMatchCountdown
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerController_Server_CancelMatchCountdown final
{
public:
	EMatchCancelationReason                       Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_CancelMatchCountdown) == 0x000001, "Wrong alignment on RBLobbyPlayerController_Server_CancelMatchCountdown");
static_assert(sizeof(RBLobbyPlayerController_Server_CancelMatchCountdown) == 0x000001, "Wrong size on RBLobbyPlayerController_Server_CancelMatchCountdown");
static_assert(offsetof(RBLobbyPlayerController_Server_CancelMatchCountdown, Reason) == 0x000000, "Member 'RBLobbyPlayerController_Server_CancelMatchCountdown::Reason' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_Cheat_ForceAssignCell
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerController_Server_Cheat_ForceAssignCell final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_Cheat_ForceAssignCell) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Server_Cheat_ForceAssignCell");
static_assert(sizeof(RBLobbyPlayerController_Server_Cheat_ForceAssignCell) == 0x000004, "Wrong size on RBLobbyPlayerController_Server_Cheat_ForceAssignCell");
static_assert(offsetof(RBLobbyPlayerController_Server_Cheat_ForceAssignCell, Param_Index) == 0x000000, "Member 'RBLobbyPlayerController_Server_Cheat_ForceAssignCell::Param_Index' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_Debug_SetMatchFixedPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerController_Server_Debug_SetMatchFixedPlayerCount final
{
public:
	int32                                         FixedPlayerCount;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_Debug_SetMatchFixedPlayerCount) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Server_Debug_SetMatchFixedPlayerCount");
static_assert(sizeof(RBLobbyPlayerController_Server_Debug_SetMatchFixedPlayerCount) == 0x000004, "Wrong size on RBLobbyPlayerController_Server_Debug_SetMatchFixedPlayerCount");
static_assert(offsetof(RBLobbyPlayerController_Server_Debug_SetMatchFixedPlayerCount, FixedPlayerCount) == 0x000000, "Member 'RBLobbyPlayerController_Server_Debug_SetMatchFixedPlayerCount::FixedPlayerCount' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_Debug_SetMatchFixedSeed
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerController_Server_Debug_SetMatchFixedSeed final
{
public:
	int32                                         FixedSeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_Debug_SetMatchFixedSeed) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Server_Debug_SetMatchFixedSeed");
static_assert(sizeof(RBLobbyPlayerController_Server_Debug_SetMatchFixedSeed) == 0x000004, "Wrong size on RBLobbyPlayerController_Server_Debug_SetMatchFixedSeed");
static_assert(offsetof(RBLobbyPlayerController_Server_Debug_SetMatchFixedSeed, FixedSeed) == 0x000000, "Member 'RBLobbyPlayerController_Server_Debug_SetMatchFixedSeed::FixedSeed' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_FindPartyForGroup
// 0x0030 (0x0030 - 0x0000)
struct RBLobbyPlayerController_Server_FindPartyForGroup final
{
public:
	TArray<class ARBLobbyPlayerState*>            Members;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ProgramId;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrialId;                                           // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProfileId>                     LastPartyFindProfileIds;                           // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_FindPartyForGroup) == 0x000008, "Wrong alignment on RBLobbyPlayerController_Server_FindPartyForGroup");
static_assert(sizeof(RBLobbyPlayerController_Server_FindPartyForGroup) == 0x000030, "Wrong size on RBLobbyPlayerController_Server_FindPartyForGroup");
static_assert(offsetof(RBLobbyPlayerController_Server_FindPartyForGroup, Members) == 0x000000, "Member 'RBLobbyPlayerController_Server_FindPartyForGroup::Members' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Server_FindPartyForGroup, ProgramId) == 0x000010, "Member 'RBLobbyPlayerController_Server_FindPartyForGroup::ProgramId' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Server_FindPartyForGroup, TrialId) == 0x000018, "Member 'RBLobbyPlayerController_Server_FindPartyForGroup::TrialId' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Server_FindPartyForGroup, LastPartyFindProfileIds) == 0x000020, "Member 'RBLobbyPlayerController_Server_FindPartyForGroup::LastPartyFindProfileIds' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_ReportPartyFound
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerController_Server_ReportPartyFound final
{
public:
	int32                                         PartySize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_ReportPartyFound) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Server_ReportPartyFound");
static_assert(sizeof(RBLobbyPlayerController_Server_ReportPartyFound) == 0x000004, "Wrong size on RBLobbyPlayerController_Server_ReportPartyFound");
static_assert(offsetof(RBLobbyPlayerController_Server_ReportPartyFound, PartySize) == 0x000000, "Member 'RBLobbyPlayerController_Server_ReportPartyFound::PartySize' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_ReportWaitForPartyFailed
// 0x0008 (0x0008 - 0x0000)
struct RBLobbyPlayerController_Server_ReportWaitForPartyFailed final
{
public:
	int32                                         ErrorFacility;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorCode;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_ReportWaitForPartyFailed) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Server_ReportWaitForPartyFailed");
static_assert(sizeof(RBLobbyPlayerController_Server_ReportWaitForPartyFailed) == 0x000008, "Wrong size on RBLobbyPlayerController_Server_ReportWaitForPartyFailed");
static_assert(offsetof(RBLobbyPlayerController_Server_ReportWaitForPartyFailed, ErrorFacility) == 0x000000, "Member 'RBLobbyPlayerController_Server_ReportWaitForPartyFailed::ErrorFacility' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Server_ReportWaitForPartyFailed, ErrorCode) == 0x000004, "Member 'RBLobbyPlayerController_Server_ReportWaitForPartyFailed::ErrorCode' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_SetHasStorylinesToPlay
// 0x0010 (0x0010 - 0x0000)
struct RBLobbyPlayerController_Server_SetHasStorylinesToPlay final
{
public:
	TArray<bool>                                  HasStorylinesToPlay;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_SetHasStorylinesToPlay) == 0x000008, "Wrong alignment on RBLobbyPlayerController_Server_SetHasStorylinesToPlay");
static_assert(sizeof(RBLobbyPlayerController_Server_SetHasStorylinesToPlay) == 0x000010, "Wrong size on RBLobbyPlayerController_Server_SetHasStorylinesToPlay");
static_assert(offsetof(RBLobbyPlayerController_Server_SetHasStorylinesToPlay, HasStorylinesToPlay) == 0x000000, "Member 'RBLobbyPlayerController_Server_SetHasStorylinesToPlay::HasStorylinesToPlay' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_SetIsPlayingLobbyTutorial
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerController_Server_SetIsPlayingLobbyTutorial final
{
public:
	bool                                          bPlayingLobbyTutorial;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_SetIsPlayingLobbyTutorial) == 0x000001, "Wrong alignment on RBLobbyPlayerController_Server_SetIsPlayingLobbyTutorial");
static_assert(sizeof(RBLobbyPlayerController_Server_SetIsPlayingLobbyTutorial) == 0x000001, "Wrong size on RBLobbyPlayerController_Server_SetIsPlayingLobbyTutorial");
static_assert(offsetof(RBLobbyPlayerController_Server_SetIsPlayingLobbyTutorial, bPlayingLobbyTutorial) == 0x000000, "Member 'RBLobbyPlayerController_Server_SetIsPlayingLobbyTutorial::bPlayingLobbyTutorial' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_SetNarratorSpeaking
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerController_Server_SetNarratorSpeaking final
{
public:
	bool                                          bSpeaking;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_SetNarratorSpeaking) == 0x000001, "Wrong alignment on RBLobbyPlayerController_Server_SetNarratorSpeaking");
static_assert(sizeof(RBLobbyPlayerController_Server_SetNarratorSpeaking) == 0x000001, "Wrong size on RBLobbyPlayerController_Server_SetNarratorSpeaking");
static_assert(offsetof(RBLobbyPlayerController_Server_SetNarratorSpeaking, bSpeaking) == 0x000000, "Member 'RBLobbyPlayerController_Server_SetNarratorSpeaking::bSpeaking' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_StartMatchCountdown
// 0x0038 (0x0038 - 0x0000)
struct RBLobbyPlayerController_Server_StartMatchCountdown final
{
public:
	TArray<class ARBLobbyPlayerState*>            Members;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMatchSettings                         MatchSettings;                                     // 0x0010(0x0024)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseLongCancelGracePeriod;                         // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2159[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLobbyPlayerController_Server_StartMatchCountdown) == 0x000008, "Wrong alignment on RBLobbyPlayerController_Server_StartMatchCountdown");
static_assert(sizeof(RBLobbyPlayerController_Server_StartMatchCountdown) == 0x000038, "Wrong size on RBLobbyPlayerController_Server_StartMatchCountdown");
static_assert(offsetof(RBLobbyPlayerController_Server_StartMatchCountdown, Members) == 0x000000, "Member 'RBLobbyPlayerController_Server_StartMatchCountdown::Members' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Server_StartMatchCountdown, MatchSettings) == 0x000010, "Member 'RBLobbyPlayerController_Server_StartMatchCountdown::MatchSettings' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_Server_StartMatchCountdown, bUseLongCancelGracePeriod) == 0x000034, "Member 'RBLobbyPlayerController_Server_StartMatchCountdown::bUseLongCancelGracePeriod' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_UpdateMatchSettings
// 0x0024 (0x0024 - 0x0000)
struct RBLobbyPlayerController_Server_UpdateMatchSettings final
{
public:
	struct FMatchSettings                         MatchSettings;                                     // 0x0000(0x0024)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_UpdateMatchSettings) == 0x000004, "Wrong alignment on RBLobbyPlayerController_Server_UpdateMatchSettings");
static_assert(sizeof(RBLobbyPlayerController_Server_UpdateMatchSettings) == 0x000024, "Wrong size on RBLobbyPlayerController_Server_UpdateMatchSettings");
static_assert(offsetof(RBLobbyPlayerController_Server_UpdateMatchSettings, MatchSettings) == 0x000000, "Member 'RBLobbyPlayerController_Server_UpdateMatchSettings::MatchSettings' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.Server_UpdatePlayerCellCustomization
// 0x0010 (0x0010 - 0x0000)
struct RBLobbyPlayerController_Server_UpdatePlayerCellCustomization final
{
public:
	TArray<struct FRBPlayerCellCustomizationEntry> PlayerCellCustomization;                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_Server_UpdatePlayerCellCustomization) == 0x000008, "Wrong alignment on RBLobbyPlayerController_Server_UpdatePlayerCellCustomization");
static_assert(sizeof(RBLobbyPlayerController_Server_UpdatePlayerCellCustomization) == 0x000010, "Wrong size on RBLobbyPlayerController_Server_UpdatePlayerCellCustomization");
static_assert(offsetof(RBLobbyPlayerController_Server_UpdatePlayerCellCustomization, PlayerCellCustomization) == 0x000000, "Member 'RBLobbyPlayerController_Server_UpdatePlayerCellCustomization::PlayerCellCustomization' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.SetIsPlayingLobbyTutorial_Client
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerController_SetIsPlayingLobbyTutorial_Client final
{
public:
	bool                                          bPlayingLobbyTutorial;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_SetIsPlayingLobbyTutorial_Client) == 0x000001, "Wrong alignment on RBLobbyPlayerController_SetIsPlayingLobbyTutorial_Client");
static_assert(sizeof(RBLobbyPlayerController_SetIsPlayingLobbyTutorial_Client) == 0x000001, "Wrong size on RBLobbyPlayerController_SetIsPlayingLobbyTutorial_Client");
static_assert(offsetof(RBLobbyPlayerController_SetIsPlayingLobbyTutorial_Client, bPlayingLobbyTutorial) == 0x000000, "Member 'RBLobbyPlayerController_SetIsPlayingLobbyTutorial_Client::bPlayingLobbyTutorial' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.SetMatchFixedPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerController_SetMatchFixedPlayerCount final
{
public:
	int32                                         FixedPlayerCount;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_SetMatchFixedPlayerCount) == 0x000004, "Wrong alignment on RBLobbyPlayerController_SetMatchFixedPlayerCount");
static_assert(sizeof(RBLobbyPlayerController_SetMatchFixedPlayerCount) == 0x000004, "Wrong size on RBLobbyPlayerController_SetMatchFixedPlayerCount");
static_assert(offsetof(RBLobbyPlayerController_SetMatchFixedPlayerCount, FixedPlayerCount) == 0x000000, "Member 'RBLobbyPlayerController_SetMatchFixedPlayerCount::FixedPlayerCount' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.SetMatchFixedSeed
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerController_SetMatchFixedSeed final
{
public:
	int32                                         FixedSeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_SetMatchFixedSeed) == 0x000004, "Wrong alignment on RBLobbyPlayerController_SetMatchFixedSeed");
static_assert(sizeof(RBLobbyPlayerController_SetMatchFixedSeed) == 0x000004, "Wrong size on RBLobbyPlayerController_SetMatchFixedSeed");
static_assert(offsetof(RBLobbyPlayerController_SetMatchFixedSeed, FixedSeed) == 0x000000, "Member 'RBLobbyPlayerController_SetMatchFixedSeed::FixedSeed' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.TryShowCharacterSheet
// 0x0002 (0x0002 - 0x0000)
struct RBLobbyPlayerController_TryShowCharacterSheet final
{
public:
	bool                                          bAllowPlayerInteracting;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_TryShowCharacterSheet) == 0x000001, "Wrong alignment on RBLobbyPlayerController_TryShowCharacterSheet");
static_assert(sizeof(RBLobbyPlayerController_TryShowCharacterSheet) == 0x000002, "Wrong size on RBLobbyPlayerController_TryShowCharacterSheet");
static_assert(offsetof(RBLobbyPlayerController_TryShowCharacterSheet, bAllowPlayerInteracting) == 0x000000, "Member 'RBLobbyPlayerController_TryShowCharacterSheet::bAllowPlayerInteracting' has a wrong offset!");
static_assert(offsetof(RBLobbyPlayerController_TryShowCharacterSheet, ReturnValue) == 0x000001, "Member 'RBLobbyPlayerController_TryShowCharacterSheet::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.CanReleaseCharacter
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerController_CanReleaseCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_CanReleaseCharacter) == 0x000001, "Wrong alignment on RBLobbyPlayerController_CanReleaseCharacter");
static_assert(sizeof(RBLobbyPlayerController_CanReleaseCharacter) == 0x000001, "Wrong size on RBLobbyPlayerController_CanReleaseCharacter");
static_assert(offsetof(RBLobbyPlayerController_CanReleaseCharacter, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerController_CanReleaseCharacter::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.GetClientTravelSource
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerController_GetClientTravelSource final
{
public:
	EClientTravelSource                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_GetClientTravelSource) == 0x000001, "Wrong alignment on RBLobbyPlayerController_GetClientTravelSource");
static_assert(sizeof(RBLobbyPlayerController_GetClientTravelSource) == 0x000001, "Wrong size on RBLobbyPlayerController_GetClientTravelSource");
static_assert(offsetof(RBLobbyPlayerController_GetClientTravelSource, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerController_GetClientTravelSource::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.GetMatchFixedPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerController_GetMatchFixedPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_GetMatchFixedPlayerCount) == 0x000004, "Wrong alignment on RBLobbyPlayerController_GetMatchFixedPlayerCount");
static_assert(sizeof(RBLobbyPlayerController_GetMatchFixedPlayerCount) == 0x000004, "Wrong size on RBLobbyPlayerController_GetMatchFixedPlayerCount");
static_assert(offsetof(RBLobbyPlayerController_GetMatchFixedPlayerCount, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerController_GetMatchFixedPlayerCount::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.GetMatchFixedSeed
// 0x0004 (0x0004 - 0x0000)
struct RBLobbyPlayerController_GetMatchFixedSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_GetMatchFixedSeed) == 0x000004, "Wrong alignment on RBLobbyPlayerController_GetMatchFixedSeed");
static_assert(sizeof(RBLobbyPlayerController_GetMatchFixedSeed) == 0x000004, "Wrong size on RBLobbyPlayerController_GetMatchFixedSeed");
static_assert(offsetof(RBLobbyPlayerController_GetMatchFixedSeed, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerController_GetMatchFixedSeed::ReturnValue' has a wrong offset!");

// Function OPP.RBLobbyPlayerController.IsPlayerInOwnCell
// 0x0001 (0x0001 - 0x0000)
struct RBLobbyPlayerController_IsPlayerInOwnCell final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLobbyPlayerController_IsPlayerInOwnCell) == 0x000001, "Wrong alignment on RBLobbyPlayerController_IsPlayerInOwnCell");
static_assert(sizeof(RBLobbyPlayerController_IsPlayerInOwnCell) == 0x000001, "Wrong size on RBLobbyPlayerController_IsPlayerInOwnCell");
static_assert(offsetof(RBLobbyPlayerController_IsPlayerInOwnCell, ReturnValue) == 0x000000, "Member 'RBLobbyPlayerController_IsPlayerInOwnCell::ReturnValue' has a wrong offset!");

// Function OPP.RBLocalProfile.SetHasBeenInProximityToReleaseBooth
// 0x0001 (0x0001 - 0x0000)
struct RBLocalProfile_SetHasBeenInProximityToReleaseBooth final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_SetHasBeenInProximityToReleaseBooth) == 0x000001, "Wrong alignment on RBLocalProfile_SetHasBeenInProximityToReleaseBooth");
static_assert(sizeof(RBLocalProfile_SetHasBeenInProximityToReleaseBooth) == 0x000001, "Wrong size on RBLocalProfile_SetHasBeenInProximityToReleaseBooth");
static_assert(offsetof(RBLocalProfile_SetHasBeenInProximityToReleaseBooth, NewValue) == 0x000000, "Member 'RBLocalProfile_SetHasBeenInProximityToReleaseBooth::NewValue' has a wrong offset!");

// Function OPP.RBLocalProfile.SetHasItemBeenDisplayedInMenu
// 0x0008 (0x0008 - 0x0000)
struct RBLocalProfile_SetHasItemBeenDisplayedInMenu final
{
public:
	class FName                                   OnlineID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_SetHasItemBeenDisplayedInMenu) == 0x000004, "Wrong alignment on RBLocalProfile_SetHasItemBeenDisplayedInMenu");
static_assert(sizeof(RBLocalProfile_SetHasItemBeenDisplayedInMenu) == 0x000008, "Wrong size on RBLocalProfile_SetHasItemBeenDisplayedInMenu");
static_assert(offsetof(RBLocalProfile_SetHasItemBeenDisplayedInMenu, OnlineID) == 0x000000, "Member 'RBLocalProfile_SetHasItemBeenDisplayedInMenu::OnlineID' has a wrong offset!");

// Function OPP.RBLocalProfile.SetHasSeenDisclaimer
// 0x0001 (0x0001 - 0x0000)
struct RBLocalProfile_SetHasSeenDisclaimer final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_SetHasSeenDisclaimer) == 0x000001, "Wrong alignment on RBLocalProfile_SetHasSeenDisclaimer");
static_assert(sizeof(RBLocalProfile_SetHasSeenDisclaimer) == 0x000001, "Wrong size on RBLocalProfile_SetHasSeenDisclaimer");
static_assert(offsetof(RBLocalProfile_SetHasSeenDisclaimer, NewValue) == 0x000000, "Member 'RBLocalProfile_SetHasSeenDisclaimer::NewValue' has a wrong offset!");

// Function OPP.RBLocalProfile.SetHasVisitedNPC
// 0x0001 (0x0001 - 0x0000)
struct RBLocalProfile_SetHasVisitedNPC final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_SetHasVisitedNPC) == 0x000001, "Wrong alignment on RBLocalProfile_SetHasVisitedNPC");
static_assert(sizeof(RBLocalProfile_SetHasVisitedNPC) == 0x000001, "Wrong size on RBLocalProfile_SetHasVisitedNPC");
static_assert(offsetof(RBLocalProfile_SetHasVisitedNPC, NPCType) == 0x000000, "Member 'RBLocalProfile_SetHasVisitedNPC::NPCType' has a wrong offset!");

// Function OPP.RBLocalProfile.SetHasVisitedReleaseBooth
// 0x0001 (0x0001 - 0x0000)
struct RBLocalProfile_SetHasVisitedReleaseBooth final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_SetHasVisitedReleaseBooth) == 0x000001, "Wrong alignment on RBLocalProfile_SetHasVisitedReleaseBooth");
static_assert(sizeof(RBLocalProfile_SetHasVisitedReleaseBooth) == 0x000001, "Wrong size on RBLocalProfile_SetHasVisitedReleaseBooth");
static_assert(offsetof(RBLocalProfile_SetHasVisitedReleaseBooth, NewValue) == 0x000000, "Member 'RBLocalProfile_SetHasVisitedReleaseBooth::NewValue' has a wrong offset!");

// Function OPP.RBLocalProfile.SetLastPlayedStoryline
// 0x0018 (0x0018 - 0x0000)
struct RBLocalProfile_SetLastPlayedStoryline final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StorylineLevelPlayed;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FeatureSwitchPlayed;                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_SetLastPlayedStoryline) == 0x000008, "Wrong alignment on RBLocalProfile_SetLastPlayedStoryline");
static_assert(sizeof(RBLocalProfile_SetLastPlayedStoryline) == 0x000018, "Wrong size on RBLocalProfile_SetLastPlayedStoryline");
static_assert(offsetof(RBLocalProfile_SetLastPlayedStoryline, NPCType) == 0x000000, "Member 'RBLocalProfile_SetLastPlayedStoryline::NPCType' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_SetLastPlayedStoryline, StorylineLevelPlayed) == 0x000004, "Member 'RBLocalProfile_SetLastPlayedStoryline::StorylineLevelPlayed' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_SetLastPlayedStoryline, FeatureSwitchPlayed) == 0x000008, "Member 'RBLocalProfile_SetLastPlayedStoryline::FeatureSwitchPlayed' has a wrong offset!");

// Function OPP.RBLocalProfile.SetLastTrialEvaluationInfo
// 0x001C (0x001C - 0x0000)
struct RBLocalProfile_SetLastTrialEvaluationInfo final
{
public:
	struct FTrialEvaluationInfo                   EvaluationInfo;                                    // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_SetLastTrialEvaluationInfo) == 0x000004, "Wrong alignment on RBLocalProfile_SetLastTrialEvaluationInfo");
static_assert(sizeof(RBLocalProfile_SetLastTrialEvaluationInfo) == 0x00001C, "Wrong size on RBLocalProfile_SetLastTrialEvaluationInfo");
static_assert(offsetof(RBLocalProfile_SetLastTrialEvaluationInfo, EvaluationInfo) == 0x000000, "Member 'RBLocalProfile_SetLastTrialEvaluationInfo::EvaluationInfo' has a wrong offset!");

// Function OPP.RBLocalProfile.SetProgramSeenInMenu
// 0x0008 (0x0008 - 0x0000)
struct RBLocalProfile_SetProgramSeenInMenu final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_SetProgramSeenInMenu) == 0x000004, "Wrong alignment on RBLocalProfile_SetProgramSeenInMenu");
static_assert(sizeof(RBLocalProfile_SetProgramSeenInMenu) == 0x000008, "Wrong size on RBLocalProfile_SetProgramSeenInMenu");
static_assert(offsetof(RBLocalProfile_SetProgramSeenInMenu, ProgramId) == 0x000000, "Member 'RBLocalProfile_SetProgramSeenInMenu::ProgramId' has a wrong offset!");

// Function OPP.RBLocalProfile.SetTrialsCompletedCount
// 0x0004 (0x0004 - 0x0000)
struct RBLocalProfile_SetTrialsCompletedCount final
{
public:
	int32                                         TrialsCompletedCount;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_SetTrialsCompletedCount) == 0x000004, "Wrong alignment on RBLocalProfile_SetTrialsCompletedCount");
static_assert(sizeof(RBLocalProfile_SetTrialsCompletedCount) == 0x000004, "Wrong size on RBLocalProfile_SetTrialsCompletedCount");
static_assert(offsetof(RBLocalProfile_SetTrialsCompletedCount, TrialsCompletedCount) == 0x000000, "Member 'RBLocalProfile_SetTrialsCompletedCount::TrialsCompletedCount' has a wrong offset!");

// Function OPP.RBLocalProfile.GetLastTrialEvaluationInfo
// 0x001C (0x001C - 0x0000)
struct RBLocalProfile_GetLastTrialEvaluationInfo final
{
public:
	struct FTrialEvaluationInfo                   ReturnValue;                                       // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_GetLastTrialEvaluationInfo) == 0x000004, "Wrong alignment on RBLocalProfile_GetLastTrialEvaluationInfo");
static_assert(sizeof(RBLocalProfile_GetLastTrialEvaluationInfo) == 0x00001C, "Wrong size on RBLocalProfile_GetLastTrialEvaluationInfo");
static_assert(offsetof(RBLocalProfile_GetLastTrialEvaluationInfo, ReturnValue) == 0x000000, "Member 'RBLocalProfile_GetLastTrialEvaluationInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBLocalProfile.GetNextStorylineVO
// 0x0030 (0x0030 - 0x0000)
struct RBLocalProfile_GetNextStorylineVO final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215D[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class URBLobbyData*                     LobbyData;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StorylineLevelPlayed;                              // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFallbackVO;                                     // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215E[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FeatureSwitchPlayed;                               // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_GetNextStorylineVO) == 0x000008, "Wrong alignment on RBLocalProfile_GetNextStorylineVO");
static_assert(sizeof(RBLocalProfile_GetNextStorylineVO) == 0x000030, "Wrong size on RBLocalProfile_GetNextStorylineVO");
static_assert(offsetof(RBLocalProfile_GetNextStorylineVO, NPCType) == 0x000000, "Member 'RBLocalProfile_GetNextStorylineVO::NPCType' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_GetNextStorylineVO, LobbyData) == 0x000008, "Member 'RBLocalProfile_GetNextStorylineVO::LobbyData' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_GetNextStorylineVO, StorylineLevelPlayed) == 0x000010, "Member 'RBLocalProfile_GetNextStorylineVO::StorylineLevelPlayed' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_GetNextStorylineVO, bIsFallbackVO) == 0x000014, "Member 'RBLocalProfile_GetNextStorylineVO::bIsFallbackVO' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_GetNextStorylineVO, FeatureSwitchPlayed) == 0x000018, "Member 'RBLocalProfile_GetNextStorylineVO::FeatureSwitchPlayed' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_GetNextStorylineVO, ReturnValue) == 0x000028, "Member 'RBLocalProfile_GetNextStorylineVO::ReturnValue' has a wrong offset!");

// Function OPP.RBLocalProfile.HasBeenInProximityToReleaseBooth
// 0x0001 (0x0001 - 0x0000)
struct RBLocalProfile_HasBeenInProximityToReleaseBooth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_HasBeenInProximityToReleaseBooth) == 0x000001, "Wrong alignment on RBLocalProfile_HasBeenInProximityToReleaseBooth");
static_assert(sizeof(RBLocalProfile_HasBeenInProximityToReleaseBooth) == 0x000001, "Wrong size on RBLocalProfile_HasBeenInProximityToReleaseBooth");
static_assert(offsetof(RBLocalProfile_HasBeenInProximityToReleaseBooth, ReturnValue) == 0x000000, "Member 'RBLocalProfile_HasBeenInProximityToReleaseBooth::ReturnValue' has a wrong offset!");

// Function OPP.RBLocalProfile.HasItemBeenDisplayedInMenu
// 0x000C (0x000C - 0x0000)
struct RBLocalProfile_HasItemBeenDisplayedInMenu final
{
public:
	class FName                                   OnlineID;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_215F[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLocalProfile_HasItemBeenDisplayedInMenu) == 0x000004, "Wrong alignment on RBLocalProfile_HasItemBeenDisplayedInMenu");
static_assert(sizeof(RBLocalProfile_HasItemBeenDisplayedInMenu) == 0x00000C, "Wrong size on RBLocalProfile_HasItemBeenDisplayedInMenu");
static_assert(offsetof(RBLocalProfile_HasItemBeenDisplayedInMenu, OnlineID) == 0x000000, "Member 'RBLocalProfile_HasItemBeenDisplayedInMenu::OnlineID' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_HasItemBeenDisplayedInMenu, ReturnValue) == 0x000008, "Member 'RBLocalProfile_HasItemBeenDisplayedInMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBLocalProfile.HasProgramBeenSeenInMenu
// 0x000C (0x000C - 0x0000)
struct RBLocalProfile_HasProgramBeenSeenInMenu final
{
public:
	class FName                                   ProgramId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2160[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBLocalProfile_HasProgramBeenSeenInMenu) == 0x000004, "Wrong alignment on RBLocalProfile_HasProgramBeenSeenInMenu");
static_assert(sizeof(RBLocalProfile_HasProgramBeenSeenInMenu) == 0x00000C, "Wrong size on RBLocalProfile_HasProgramBeenSeenInMenu");
static_assert(offsetof(RBLocalProfile_HasProgramBeenSeenInMenu, ProgramId) == 0x000000, "Member 'RBLocalProfile_HasProgramBeenSeenInMenu::ProgramId' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_HasProgramBeenSeenInMenu, ReturnValue) == 0x000008, "Member 'RBLocalProfile_HasProgramBeenSeenInMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBLocalProfile.HasVisitedNPC
// 0x0002 (0x0002 - 0x0000)
struct RBLocalProfile_HasVisitedNPC final
{
public:
	EMetaNPCType                                  NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_HasVisitedNPC) == 0x000001, "Wrong alignment on RBLocalProfile_HasVisitedNPC");
static_assert(sizeof(RBLocalProfile_HasVisitedNPC) == 0x000002, "Wrong size on RBLocalProfile_HasVisitedNPC");
static_assert(offsetof(RBLocalProfile_HasVisitedNPC, NPCType) == 0x000000, "Member 'RBLocalProfile_HasVisitedNPC::NPCType' has a wrong offset!");
static_assert(offsetof(RBLocalProfile_HasVisitedNPC, ReturnValue) == 0x000001, "Member 'RBLocalProfile_HasVisitedNPC::ReturnValue' has a wrong offset!");

// Function OPP.RBLocalProfile.HasVisitedReleaseBooth
// 0x0001 (0x0001 - 0x0000)
struct RBLocalProfile_HasVisitedReleaseBooth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLocalProfile_HasVisitedReleaseBooth) == 0x000001, "Wrong alignment on RBLocalProfile_HasVisitedReleaseBooth");
static_assert(sizeof(RBLocalProfile_HasVisitedReleaseBooth) == 0x000001, "Wrong size on RBLocalProfile_HasVisitedReleaseBooth");
static_assert(offsetof(RBLocalProfile_HasVisitedReleaseBooth, ReturnValue) == 0x000000, "Member 'RBLocalProfile_HasVisitedReleaseBooth::ReturnValue' has a wrong offset!");

// Function OPP.RBLockable.Unlock
// 0x0008 (0x0008 - 0x0000)
struct RBLockable_Unlock final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLockable_Unlock) == 0x000008, "Wrong alignment on RBLockable_Unlock");
static_assert(sizeof(RBLockable_Unlock) == 0x000008, "Wrong size on RBLockable_Unlock");
static_assert(offsetof(RBLockable_Unlock, Pawn) == 0x000000, "Member 'RBLockable_Unlock::Pawn' has a wrong offset!");

// Function OPP.RBLockable.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct RBLockable_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLockable_IsLocked) == 0x000001, "Wrong alignment on RBLockable_IsLocked");
static_assert(sizeof(RBLockable_IsLocked) == 0x000001, "Wrong size on RBLockable_IsLocked");
static_assert(offsetof(RBLockable_IsLocked, ReturnValue) == 0x000000, "Member 'RBLockable_IsLocked::ReturnValue' has a wrong offset!");

// Function OPP.RBLookAtInterface.GetLookAtLocation
// 0x000C (0x000C - 0x0000)
struct RBLookAtInterface_GetLookAtLocation final
{
public:
	struct FVector                                OutLookAtLocation;                                 // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBLookAtInterface_GetLookAtLocation) == 0x000004, "Wrong alignment on RBLookAtInterface_GetLookAtLocation");
static_assert(sizeof(RBLookAtInterface_GetLookAtLocation) == 0x00000C, "Wrong size on RBLookAtInterface_GetLookAtLocation");
static_assert(offsetof(RBLookAtInterface_GetLookAtLocation, OutLookAtLocation) == 0x000000, "Member 'RBLookAtInterface_GetLookAtLocation::OutLookAtLocation' has a wrong offset!");

// Function OPP.RBMainMenuPlayerController.IsCrossplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBMainMenuPlayerController_IsCrossplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMainMenuPlayerController_IsCrossplayEnabled) == 0x000001, "Wrong alignment on RBMainMenuPlayerController_IsCrossplayEnabled");
static_assert(sizeof(RBMainMenuPlayerController_IsCrossplayEnabled) == 0x000001, "Wrong size on RBMainMenuPlayerController_IsCrossplayEnabled");
static_assert(offsetof(RBMainMenuPlayerController_IsCrossplayEnabled, ReturnValue) == 0x000000, "Member 'RBMainMenuPlayerController_IsCrossplayEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuBrightnessCalibration.OnEntryHovered
// 0x0008 (0x0008 - 0x0000)
struct RBMenuBrightnessCalibration_OnEntryHovered final
{
public:
	class URBMenuOptionsEntry*                    Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuBrightnessCalibration_OnEntryHovered) == 0x000008, "Wrong alignment on RBMenuBrightnessCalibration_OnEntryHovered");
static_assert(sizeof(RBMenuBrightnessCalibration_OnEntryHovered) == 0x000008, "Wrong size on RBMenuBrightnessCalibration_OnEntryHovered");
static_assert(offsetof(RBMenuBrightnessCalibration_OnEntryHovered, Entry) == 0x000000, "Member 'RBMenuBrightnessCalibration_OnEntryHovered::Entry' has a wrong offset!");

// Function OPP.RBMenuCharacter.GetActiveSkillType
// 0x0001 (0x0001 - 0x0000)
struct RBMenuCharacter_GetActiveSkillType final
{
public:
	EActiveSkillType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuCharacter_GetActiveSkillType) == 0x000001, "Wrong alignment on RBMenuCharacter_GetActiveSkillType");
static_assert(sizeof(RBMenuCharacter_GetActiveSkillType) == 0x000001, "Wrong size on RBMenuCharacter_GetActiveSkillType");
static_assert(offsetof(RBMenuCharacter_GetActiveSkillType, ReturnValue) == 0x000000, "Member 'RBMenuCharacter_GetActiveSkillType::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuCharacter.IsWaitingForRessources
// 0x0001 (0x0001 - 0x0000)
struct RBMenuCharacter_IsWaitingForRessources final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuCharacter_IsWaitingForRessources) == 0x000001, "Wrong alignment on RBMenuCharacter_IsWaitingForRessources");
static_assert(sizeof(RBMenuCharacter_IsWaitingForRessources) == 0x000001, "Wrong size on RBMenuCharacter_IsWaitingForRessources");
static_assert(offsetof(RBMenuCharacter_IsWaitingForRessources, ReturnValue) == 0x000000, "Member 'RBMenuCharacter_IsWaitingForRessources::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuCharacter.Setup
// 0x0058 (0x0058 - 0x0000)
struct RBMenuCharacter_Setup final
{
public:
	bool                                          Param_bVisible;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_bUnknown;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2167[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBPlayerCustomizationInfo             Param_CustomizationInfo;                           // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EActiveSkillType                              Param_ActiveSkillType;                             // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESocialMenuSceneActorSlot                     Param_Slot;                                        // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2168[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPlayerState*                         Param_RBPlayerState;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsFailureScene;                                 // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2169[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMenuCharacter_Setup) == 0x000008, "Wrong alignment on RBMenuCharacter_Setup");
static_assert(sizeof(RBMenuCharacter_Setup) == 0x000058, "Wrong size on RBMenuCharacter_Setup");
static_assert(offsetof(RBMenuCharacter_Setup, Param_bVisible) == 0x000000, "Member 'RBMenuCharacter_Setup::Param_bVisible' has a wrong offset!");
static_assert(offsetof(RBMenuCharacter_Setup, Param_bUnknown) == 0x000001, "Member 'RBMenuCharacter_Setup::Param_bUnknown' has a wrong offset!");
static_assert(offsetof(RBMenuCharacter_Setup, Param_CustomizationInfo) == 0x000008, "Member 'RBMenuCharacter_Setup::Param_CustomizationInfo' has a wrong offset!");
static_assert(offsetof(RBMenuCharacter_Setup, Param_ActiveSkillType) == 0x000040, "Member 'RBMenuCharacter_Setup::Param_ActiveSkillType' has a wrong offset!");
static_assert(offsetof(RBMenuCharacter_Setup, Param_Slot) == 0x000041, "Member 'RBMenuCharacter_Setup::Param_Slot' has a wrong offset!");
static_assert(offsetof(RBMenuCharacter_Setup, Param_RBPlayerState) == 0x000048, "Member 'RBMenuCharacter_Setup::Param_RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBMenuCharacter_Setup, bInIsFailureScene) == 0x000050, "Member 'RBMenuCharacter_Setup::bInIsFailureScene' has a wrong offset!");

// Function OPP.RBMenuCharacter.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct RBMenuCharacter_SetVisible final
{
public:
	bool                                          Param_bVisible;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuCharacter_SetVisible) == 0x000001, "Wrong alignment on RBMenuCharacter_SetVisible");
static_assert(sizeof(RBMenuCharacter_SetVisible) == 0x000001, "Wrong size on RBMenuCharacter_SetVisible");
static_assert(offsetof(RBMenuCharacter_SetVisible, Param_bVisible) == 0x000000, "Member 'RBMenuCharacter_SetVisible::Param_bVisible' has a wrong offset!");

// Function OPP.RBMenuCharacter.GetAssociatedPlayerState
// 0x0008 (0x0008 - 0x0000)
struct RBMenuCharacter_GetAssociatedPlayerState final
{
public:
	class ARBPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuCharacter_GetAssociatedPlayerState) == 0x000008, "Wrong alignment on RBMenuCharacter_GetAssociatedPlayerState");
static_assert(sizeof(RBMenuCharacter_GetAssociatedPlayerState) == 0x000008, "Wrong size on RBMenuCharacter_GetAssociatedPlayerState");
static_assert(offsetof(RBMenuCharacter_GetAssociatedPlayerState, ReturnValue) == 0x000000, "Member 'RBMenuCharacter_GetAssociatedPlayerState::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuCharacter.GetCustomizationInfo
// 0x0038 (0x0038 - 0x0000)
struct RBMenuCharacter_GetCustomizationInfo final
{
public:
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuCharacter_GetCustomizationInfo) == 0x000008, "Wrong alignment on RBMenuCharacter_GetCustomizationInfo");
static_assert(sizeof(RBMenuCharacter_GetCustomizationInfo) == 0x000038, "Wrong size on RBMenuCharacter_GetCustomizationInfo");
static_assert(offsetof(RBMenuCharacter_GetCustomizationInfo, ReturnValue) == 0x000000, "Member 'RBMenuCharacter_GetCustomizationInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuCharacter.GetSlot
// 0x0001 (0x0001 - 0x0000)
struct RBMenuCharacter_GetSlot final
{
public:
	ESocialMenuSceneActorSlot                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuCharacter_GetSlot) == 0x000001, "Wrong alignment on RBMenuCharacter_GetSlot");
static_assert(sizeof(RBMenuCharacter_GetSlot) == 0x000001, "Wrong size on RBMenuCharacter_GetSlot");
static_assert(offsetof(RBMenuCharacter_GetSlot, ReturnValue) == 0x000000, "Member 'RBMenuCharacter_GetSlot::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuCharacter.IsFailureScene
// 0x0001 (0x0001 - 0x0000)
struct RBMenuCharacter_IsFailureScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuCharacter_IsFailureScene) == 0x000001, "Wrong alignment on RBMenuCharacter_IsFailureScene");
static_assert(sizeof(RBMenuCharacter_IsFailureScene) == 0x000001, "Wrong size on RBMenuCharacter_IsFailureScene");
static_assert(offsetof(RBMenuCharacter_IsFailureScene, ReturnValue) == 0x000000, "Member 'RBMenuCharacter_IsFailureScene::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuCharacter.IsUnknown
// 0x0001 (0x0001 - 0x0000)
struct RBMenuCharacter_IsUnknown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuCharacter_IsUnknown) == 0x000001, "Wrong alignment on RBMenuCharacter_IsUnknown");
static_assert(sizeof(RBMenuCharacter_IsUnknown) == 0x000001, "Wrong size on RBMenuCharacter_IsUnknown");
static_assert(offsetof(RBMenuCharacter_IsUnknown, ReturnValue) == 0x000000, "Member 'RBMenuCharacter_IsUnknown::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuCharacter.IsVisible
// 0x0001 (0x0001 - 0x0000)
struct RBMenuCharacter_IsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuCharacter_IsVisible) == 0x000001, "Wrong alignment on RBMenuCharacter_IsVisible");
static_assert(sizeof(RBMenuCharacter_IsVisible) == 0x000001, "Wrong size on RBMenuCharacter_IsVisible");
static_assert(offsetof(RBMenuCharacter_IsVisible, ReturnValue) == 0x000000, "Member 'RBMenuCharacter_IsVisible::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuControlBinding.CaptureNewBinding
// 0x0008 (0x0008 - 0x0000)
struct RBMenuControlBinding_CaptureNewBinding final
{
public:
	class URBMenuControlBindingEntry*             Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuControlBinding_CaptureNewBinding) == 0x000008, "Wrong alignment on RBMenuControlBinding_CaptureNewBinding");
static_assert(sizeof(RBMenuControlBinding_CaptureNewBinding) == 0x000008, "Wrong size on RBMenuControlBinding_CaptureNewBinding");
static_assert(offsetof(RBMenuControlBinding_CaptureNewBinding, Entry) == 0x000000, "Member 'RBMenuControlBinding_CaptureNewBinding::Entry' has a wrong offset!");

// Function OPP.RBMenuControlBinding.Event_DuplicateBindingFound
// 0x0008 (0x0008 - 0x0000)
struct RBMenuControlBinding_Event_DuplicateBindingFound final
{
public:
	class URBMenuControlBindingEntry*             DuplicateEntry;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuControlBinding_Event_DuplicateBindingFound) == 0x000008, "Wrong alignment on RBMenuControlBinding_Event_DuplicateBindingFound");
static_assert(sizeof(RBMenuControlBinding_Event_DuplicateBindingFound) == 0x000008, "Wrong size on RBMenuControlBinding_Event_DuplicateBindingFound");
static_assert(offsetof(RBMenuControlBinding_Event_DuplicateBindingFound, DuplicateEntry) == 0x000000, "Member 'RBMenuControlBinding_Event_DuplicateBindingFound::DuplicateEntry' has a wrong offset!");

// Function OPP.RBMenuControlBinding.Event_UpdateRebindStatus
// 0x0001 (0x0001 - 0x0000)
struct RBMenuControlBinding_Event_UpdateRebindStatus final
{
public:
	bool                                          IsRebindInProgress;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuControlBinding_Event_UpdateRebindStatus) == 0x000001, "Wrong alignment on RBMenuControlBinding_Event_UpdateRebindStatus");
static_assert(sizeof(RBMenuControlBinding_Event_UpdateRebindStatus) == 0x000001, "Wrong size on RBMenuControlBinding_Event_UpdateRebindStatus");
static_assert(offsetof(RBMenuControlBinding_Event_UpdateRebindStatus, IsRebindInProgress) == 0x000000, "Member 'RBMenuControlBinding_Event_UpdateRebindStatus::IsRebindInProgress' has a wrong offset!");

// Function OPP.RBMenuControlBinding.HasAnyUnsavedChanges
// 0x0001 (0x0001 - 0x0000)
struct RBMenuControlBinding_HasAnyUnsavedChanges final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuControlBinding_HasAnyUnsavedChanges) == 0x000001, "Wrong alignment on RBMenuControlBinding_HasAnyUnsavedChanges");
static_assert(sizeof(RBMenuControlBinding_HasAnyUnsavedChanges) == 0x000001, "Wrong size on RBMenuControlBinding_HasAnyUnsavedChanges");
static_assert(offsetof(RBMenuControlBinding_HasAnyUnsavedChanges, ReturnValue) == 0x000000, "Member 'RBMenuControlBinding_HasAnyUnsavedChanges::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuControlBinding.OnInputKey
// 0x0020 (0x0020 - 0x0000)
struct RBMenuControlBinding_OnInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGamepad;                                          // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_216B[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMenuControlBinding_OnInputKey) == 0x000008, "Wrong alignment on RBMenuControlBinding_OnInputKey");
static_assert(sizeof(RBMenuControlBinding_OnInputKey) == 0x000020, "Wrong size on RBMenuControlBinding_OnInputKey");
static_assert(offsetof(RBMenuControlBinding_OnInputKey, Key) == 0x000000, "Member 'RBMenuControlBinding_OnInputKey::Key' has a wrong offset!");
static_assert(offsetof(RBMenuControlBinding_OnInputKey, EventType) == 0x000018, "Member 'RBMenuControlBinding_OnInputKey::EventType' has a wrong offset!");
static_assert(offsetof(RBMenuControlBinding_OnInputKey, bGamepad) == 0x000019, "Member 'RBMenuControlBinding_OnInputKey::bGamepad' has a wrong offset!");

// Function OPP.RBMenuGamepadControlScheme.OnOptionValueChanged
// 0x0008 (0x0008 - 0x0000)
struct RBMenuGamepadControlScheme_OnOptionValueChanged final
{
public:
	class URBMenuOptionsEntry*                    Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuGamepadControlScheme_OnOptionValueChanged) == 0x000008, "Wrong alignment on RBMenuGamepadControlScheme_OnOptionValueChanged");
static_assert(sizeof(RBMenuGamepadControlScheme_OnOptionValueChanged) == 0x000008, "Wrong size on RBMenuGamepadControlScheme_OnOptionValueChanged");
static_assert(offsetof(RBMenuGamepadControlScheme_OnOptionValueChanged, Entry) == 0x000000, "Member 'RBMenuGamepadControlScheme_OnOptionValueChanged::Entry' has a wrong offset!");

// Function OPP.RBMenuGamepadControlScheme.UpdateApplyBtnVisibility
// 0x0001 (0x0001 - 0x0000)
struct RBMenuGamepadControlScheme_UpdateApplyBtnVisibility final
{
public:
	bool                                          HasValueChanged;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuGamepadControlScheme_UpdateApplyBtnVisibility) == 0x000001, "Wrong alignment on RBMenuGamepadControlScheme_UpdateApplyBtnVisibility");
static_assert(sizeof(RBMenuGamepadControlScheme_UpdateApplyBtnVisibility) == 0x000001, "Wrong size on RBMenuGamepadControlScheme_UpdateApplyBtnVisibility");
static_assert(offsetof(RBMenuGamepadControlScheme_UpdateApplyBtnVisibility, HasValueChanged) == 0x000000, "Member 'RBMenuGamepadControlScheme_UpdateApplyBtnVisibility::HasValueChanged' has a wrong offset!");

// Function OPP.RBMenuManager.BP_PopMenuPage
// 0x0008 (0x0008 - 0x0000)
struct RBMenuManager_BP_PopMenuPage final
{
public:
	class URBMenuWidget*                          Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuManager_BP_PopMenuPage) == 0x000008, "Wrong alignment on RBMenuManager_BP_PopMenuPage");
static_assert(sizeof(RBMenuManager_BP_PopMenuPage) == 0x000008, "Wrong size on RBMenuManager_BP_PopMenuPage");
static_assert(offsetof(RBMenuManager_BP_PopMenuPage, Widget) == 0x000000, "Member 'RBMenuManager_BP_PopMenuPage::Widget' has a wrong offset!");

// Function OPP.RBMenuManager.BP_PushMenuPage
// 0x0008 (0x0008 - 0x0000)
struct RBMenuManager_BP_PushMenuPage final
{
public:
	class URBMenuWidget*                          Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuManager_BP_PushMenuPage) == 0x000008, "Wrong alignment on RBMenuManager_BP_PushMenuPage");
static_assert(sizeof(RBMenuManager_BP_PushMenuPage) == 0x000008, "Wrong size on RBMenuManager_BP_PushMenuPage");
static_assert(offsetof(RBMenuManager_BP_PushMenuPage, Widget) == 0x000000, "Member 'RBMenuManager_BP_PushMenuPage::Widget' has a wrong offset!");

// Function OPP.RBMenuManager.BP_ShowError
// 0x0040 (0x0040 - 0x0000)
struct RBMenuManager_BP_ShowError final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   SecondaryMessage;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ErrorCode;                                         // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuManager_BP_ShowError) == 0x000008, "Wrong alignment on RBMenuManager_BP_ShowError");
static_assert(sizeof(RBMenuManager_BP_ShowError) == 0x000040, "Wrong size on RBMenuManager_BP_ShowError");
static_assert(offsetof(RBMenuManager_BP_ShowError, Message) == 0x000000, "Member 'RBMenuManager_BP_ShowError::Message' has a wrong offset!");
static_assert(offsetof(RBMenuManager_BP_ShowError, SecondaryMessage) == 0x000018, "Member 'RBMenuManager_BP_ShowError::SecondaryMessage' has a wrong offset!");
static_assert(offsetof(RBMenuManager_BP_ShowError, ErrorCode) == 0x000030, "Member 'RBMenuManager_BP_ShowError::ErrorCode' has a wrong offset!");

// Function OPP.RBMenuManager.BP_GetCurrentPage
// 0x0008 (0x0008 - 0x0000)
struct RBMenuManager_BP_GetCurrentPage final
{
public:
	class URBMenuWidget*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuManager_BP_GetCurrentPage) == 0x000008, "Wrong alignment on RBMenuManager_BP_GetCurrentPage");
static_assert(sizeof(RBMenuManager_BP_GetCurrentPage) == 0x000008, "Wrong size on RBMenuManager_BP_GetCurrentPage");
static_assert(offsetof(RBMenuManager_BP_GetCurrentPage, ReturnValue) == 0x000000, "Member 'RBMenuManager_BP_GetCurrentPage::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuManager.BP_GetMenuPage
// 0x0010 (0x0010 - 0x0000)
struct RBMenuManager_BP_GetMenuPage final
{
public:
	TSubclassOf<class URBMenuWidget>              MenuClass;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBMenuWidget*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuManager_BP_GetMenuPage) == 0x000008, "Wrong alignment on RBMenuManager_BP_GetMenuPage");
static_assert(sizeof(RBMenuManager_BP_GetMenuPage) == 0x000010, "Wrong size on RBMenuManager_BP_GetMenuPage");
static_assert(offsetof(RBMenuManager_BP_GetMenuPage, MenuClass) == 0x000000, "Member 'RBMenuManager_BP_GetMenuPage::MenuClass' has a wrong offset!");
static_assert(offsetof(RBMenuManager_BP_GetMenuPage, ReturnValue) == 0x000008, "Member 'RBMenuManager_BP_GetMenuPage::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuManager.BP_IsInMenu
// 0x0001 (0x0001 - 0x0000)
struct RBMenuManager_BP_IsInMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuManager_BP_IsInMenu) == 0x000001, "Wrong alignment on RBMenuManager_BP_IsInMenu");
static_assert(sizeof(RBMenuManager_BP_IsInMenu) == 0x000001, "Wrong size on RBMenuManager_BP_IsInMenu");
static_assert(offsetof(RBMenuManager_BP_IsInMenu, ReturnValue) == 0x000000, "Member 'RBMenuManager_BP_IsInMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuManager.BP_IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct RBMenuManager_BP_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuManager_BP_IsUsingGamepad) == 0x000001, "Wrong alignment on RBMenuManager_BP_IsUsingGamepad");
static_assert(sizeof(RBMenuManager_BP_IsUsingGamepad) == 0x000001, "Wrong size on RBMenuManager_BP_IsUsingGamepad");
static_assert(offsetof(RBMenuManager_BP_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'RBMenuManager_BP_IsUsingGamepad::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuManager.IsShowingLoadingCutsceneVideo
// 0x0001 (0x0001 - 0x0000)
struct RBMenuManager_IsShowingLoadingCutsceneVideo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuManager_IsShowingLoadingCutsceneVideo) == 0x000001, "Wrong alignment on RBMenuManager_IsShowingLoadingCutsceneVideo");
static_assert(sizeof(RBMenuManager_IsShowingLoadingCutsceneVideo) == 0x000001, "Wrong size on RBMenuManager_IsShowingLoadingCutsceneVideo");
static_assert(offsetof(RBMenuManager_IsShowingLoadingCutsceneVideo, ReturnValue) == 0x000000, "Member 'RBMenuManager_IsShowingLoadingCutsceneVideo::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuManager.IsShowingLoadingScreen
// 0x0001 (0x0001 - 0x0000)
struct RBMenuManager_IsShowingLoadingScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuManager_IsShowingLoadingScreen) == 0x000001, "Wrong alignment on RBMenuManager_IsShowingLoadingScreen");
static_assert(sizeof(RBMenuManager_IsShowingLoadingScreen) == 0x000001, "Wrong size on RBMenuManager_IsShowingLoadingScreen");
static_assert(offsetof(RBMenuManager_IsShowingLoadingScreen, ReturnValue) == 0x000000, "Member 'RBMenuManager_IsShowingLoadingScreen::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.CanBeDisplayed
// 0x0001 (0x0001 - 0x0000)
struct RBMenuOptionsEntry_CanBeDisplayed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_CanBeDisplayed) == 0x000001, "Wrong alignment on RBMenuOptionsEntry_CanBeDisplayed");
static_assert(sizeof(RBMenuOptionsEntry_CanBeDisplayed) == 0x000001, "Wrong size on RBMenuOptionsEntry_CanBeDisplayed");
static_assert(offsetof(RBMenuOptionsEntry_CanBeDisplayed, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_CanBeDisplayed::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.CanBeEdited
// 0x0001 (0x0001 - 0x0000)
struct RBMenuOptionsEntry_CanBeEdited final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_CanBeEdited) == 0x000001, "Wrong alignment on RBMenuOptionsEntry_CanBeEdited");
static_assert(sizeof(RBMenuOptionsEntry_CanBeEdited) == 0x000001, "Wrong size on RBMenuOptionsEntry_CanBeEdited");
static_assert(offsetof(RBMenuOptionsEntry_CanBeEdited, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_CanBeEdited::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.ChangeOptionValue
// 0x0008 (0x0008 - 0x0000)
struct RBMenuOptionsEntry_ChangeOptionValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeftClicked;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217A[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMenuOptionsEntry_ChangeOptionValue) == 0x000004, "Wrong alignment on RBMenuOptionsEntry_ChangeOptionValue");
static_assert(sizeof(RBMenuOptionsEntry_ChangeOptionValue) == 0x000008, "Wrong size on RBMenuOptionsEntry_ChangeOptionValue");
static_assert(offsetof(RBMenuOptionsEntry_ChangeOptionValue, Value) == 0x000000, "Member 'RBMenuOptionsEntry_ChangeOptionValue::Value' has a wrong offset!");
static_assert(offsetof(RBMenuOptionsEntry_ChangeOptionValue, LeftClicked) == 0x000004, "Member 'RBMenuOptionsEntry_ChangeOptionValue::LeftClicked' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.Event_UpdateSliderValue
// 0x0020 (0x0020 - 0x0000)
struct RBMenuOptionsEntry_Event_UpdateSliderValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextOverride;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_Event_UpdateSliderValue) == 0x000008, "Wrong alignment on RBMenuOptionsEntry_Event_UpdateSliderValue");
static_assert(sizeof(RBMenuOptionsEntry_Event_UpdateSliderValue) == 0x000020, "Wrong size on RBMenuOptionsEntry_Event_UpdateSliderValue");
static_assert(offsetof(RBMenuOptionsEntry_Event_UpdateSliderValue, Value) == 0x000000, "Member 'RBMenuOptionsEntry_Event_UpdateSliderValue::Value' has a wrong offset!");
static_assert(offsetof(RBMenuOptionsEntry_Event_UpdateSliderValue, TextOverride) == 0x000008, "Member 'RBMenuOptionsEntry_Event_UpdateSliderValue::TextOverride' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.Event_UpdateSubButtonText
// 0x0018 (0x0018 - 0x0000)
struct RBMenuOptionsEntry_Event_UpdateSubButtonText final
{
public:
	class FText                                   NewValue;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_Event_UpdateSubButtonText) == 0x000008, "Wrong alignment on RBMenuOptionsEntry_Event_UpdateSubButtonText");
static_assert(sizeof(RBMenuOptionsEntry_Event_UpdateSubButtonText) == 0x000018, "Wrong size on RBMenuOptionsEntry_Event_UpdateSubButtonText");
static_assert(offsetof(RBMenuOptionsEntry_Event_UpdateSubButtonText, NewValue) == 0x000000, "Member 'RBMenuOptionsEntry_Event_UpdateSubButtonText::NewValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.Event_UpdateTextValue
// 0x0018 (0x0018 - 0x0000)
struct RBMenuOptionsEntry_Event_UpdateTextValue final
{
public:
	class FText                                   NewValue;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_Event_UpdateTextValue) == 0x000008, "Wrong alignment on RBMenuOptionsEntry_Event_UpdateTextValue");
static_assert(sizeof(RBMenuOptionsEntry_Event_UpdateTextValue) == 0x000018, "Wrong size on RBMenuOptionsEntry_Event_UpdateTextValue");
static_assert(offsetof(RBMenuOptionsEntry_Event_UpdateTextValue, NewValue) == 0x000000, "Member 'RBMenuOptionsEntry_Event_UpdateTextValue::NewValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.Event_UpdateTitle
// 0x0018 (0x0018 - 0x0000)
struct RBMenuOptionsEntry_Event_UpdateTitle final
{
public:
	class FText                                   NewTitle;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_Event_UpdateTitle) == 0x000008, "Wrong alignment on RBMenuOptionsEntry_Event_UpdateTitle");
static_assert(sizeof(RBMenuOptionsEntry_Event_UpdateTitle) == 0x000018, "Wrong size on RBMenuOptionsEntry_Event_UpdateTitle");
static_assert(offsetof(RBMenuOptionsEntry_Event_UpdateTitle, NewTitle) == 0x000000, "Member 'RBMenuOptionsEntry_Event_UpdateTitle::NewTitle' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.GetCurrentIndexOfOption
// 0x0004 (0x0004 - 0x0000)
struct RBMenuOptionsEntry_GetCurrentIndexOfOption final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_GetCurrentIndexOfOption) == 0x000004, "Wrong alignment on RBMenuOptionsEntry_GetCurrentIndexOfOption");
static_assert(sizeof(RBMenuOptionsEntry_GetCurrentIndexOfOption) == 0x000004, "Wrong size on RBMenuOptionsEntry_GetCurrentIndexOfOption");
static_assert(offsetof(RBMenuOptionsEntry_GetCurrentIndexOfOption, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_GetCurrentIndexOfOption::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.GetMaxCountForOption
// 0x0004 (0x0004 - 0x0000)
struct RBMenuOptionsEntry_GetMaxCountForOption final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_GetMaxCountForOption) == 0x000004, "Wrong alignment on RBMenuOptionsEntry_GetMaxCountForOption");
static_assert(sizeof(RBMenuOptionsEntry_GetMaxCountForOption) == 0x000004, "Wrong size on RBMenuOptionsEntry_GetMaxCountForOption");
static_assert(offsetof(RBMenuOptionsEntry_GetMaxCountForOption, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_GetMaxCountForOption::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.GetSliderMax
// 0x0004 (0x0004 - 0x0000)
struct RBMenuOptionsEntry_GetSliderMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_GetSliderMax) == 0x000004, "Wrong alignment on RBMenuOptionsEntry_GetSliderMax");
static_assert(sizeof(RBMenuOptionsEntry_GetSliderMax) == 0x000004, "Wrong size on RBMenuOptionsEntry_GetSliderMax");
static_assert(offsetof(RBMenuOptionsEntry_GetSliderMax, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_GetSliderMax::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.GetSliderMin
// 0x0004 (0x0004 - 0x0000)
struct RBMenuOptionsEntry_GetSliderMin final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_GetSliderMin) == 0x000004, "Wrong alignment on RBMenuOptionsEntry_GetSliderMin");
static_assert(sizeof(RBMenuOptionsEntry_GetSliderMin) == 0x000004, "Wrong size on RBMenuOptionsEntry_GetSliderMin");
static_assert(offsetof(RBMenuOptionsEntry_GetSliderMin, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_GetSliderMin::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.GetStepSize
// 0x0004 (0x0004 - 0x0000)
struct RBMenuOptionsEntry_GetStepSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_GetStepSize) == 0x000004, "Wrong alignment on RBMenuOptionsEntry_GetStepSize");
static_assert(sizeof(RBMenuOptionsEntry_GetStepSize) == 0x000004, "Wrong size on RBMenuOptionsEntry_GetStepSize");
static_assert(offsetof(RBMenuOptionsEntry_GetStepSize, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_GetStepSize::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.IsSlider
// 0x0001 (0x0001 - 0x0000)
struct RBMenuOptionsEntry_IsSlider final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_IsSlider) == 0x000001, "Wrong alignment on RBMenuOptionsEntry_IsSlider");
static_assert(sizeof(RBMenuOptionsEntry_IsSlider) == 0x000001, "Wrong size on RBMenuOptionsEntry_IsSlider");
static_assert(offsetof(RBMenuOptionsEntry_IsSlider, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_IsSlider::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.IsSliderNormalised
// 0x0001 (0x0001 - 0x0000)
struct RBMenuOptionsEntry_IsSliderNormalised final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_IsSliderNormalised) == 0x000001, "Wrong alignment on RBMenuOptionsEntry_IsSliderNormalised");
static_assert(sizeof(RBMenuOptionsEntry_IsSliderNormalised) == 0x000001, "Wrong size on RBMenuOptionsEntry_IsSliderNormalised");
static_assert(offsetof(RBMenuOptionsEntry_IsSliderNormalised, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_IsSliderNormalised::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.IsSubButton
// 0x0001 (0x0001 - 0x0000)
struct RBMenuOptionsEntry_IsSubButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_IsSubButton) == 0x000001, "Wrong alignment on RBMenuOptionsEntry_IsSubButton");
static_assert(sizeof(RBMenuOptionsEntry_IsSubButton) == 0x000001, "Wrong size on RBMenuOptionsEntry_IsSubButton");
static_assert(offsetof(RBMenuOptionsEntry_IsSubButton, ReturnValue) == 0x000000, "Member 'RBMenuOptionsEntry_IsSubButton::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.OnResolutionOrWindowModeChanged
// 0x0008 (0x0008 - 0x0000)
struct RBMenuOptionsEntry_OnResolutionOrWindowModeChanged final
{
public:
	class URBMenuOptionsEntry*                    Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_OnResolutionOrWindowModeChanged) == 0x000008, "Wrong alignment on RBMenuOptionsEntry_OnResolutionOrWindowModeChanged");
static_assert(sizeof(RBMenuOptionsEntry_OnResolutionOrWindowModeChanged) == 0x000008, "Wrong size on RBMenuOptionsEntry_OnResolutionOrWindowModeChanged");
static_assert(offsetof(RBMenuOptionsEntry_OnResolutionOrWindowModeChanged, Entry) == 0x000000, "Member 'RBMenuOptionsEntry_OnResolutionOrWindowModeChanged::Entry' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.RefreshValue
// 0x0001 (0x0001 - 0x0000)
struct RBMenuOptionsEntry_RefreshValue final
{
public:
	bool                                          ForceUpdateSlider;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_RefreshValue) == 0x000001, "Wrong alignment on RBMenuOptionsEntry_RefreshValue");
static_assert(sizeof(RBMenuOptionsEntry_RefreshValue) == 0x000001, "Wrong size on RBMenuOptionsEntry_RefreshValue");
static_assert(offsetof(RBMenuOptionsEntry_RefreshValue, ForceUpdateSlider) == 0x000000, "Member 'RBMenuOptionsEntry_RefreshValue::ForceUpdateSlider' has a wrong offset!");

// Function OPP.RBMenuOptionsEntry.SetEntryToDefaults
// 0x0001 (0x0001 - 0x0000)
struct RBMenuOptionsEntry_SetEntryToDefaults final
{
public:
	bool                                          bIsTabReset;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsEntry_SetEntryToDefaults) == 0x000001, "Wrong alignment on RBMenuOptionsEntry_SetEntryToDefaults");
static_assert(sizeof(RBMenuOptionsEntry_SetEntryToDefaults) == 0x000001, "Wrong size on RBMenuOptionsEntry_SetEntryToDefaults");
static_assert(offsetof(RBMenuOptionsEntry_SetEntryToDefaults, bIsTabReset) == 0x000000, "Member 'RBMenuOptionsEntry_SetEntryToDefaults::bIsTabReset' has a wrong offset!");

// Function OPP.RBMenuOptionsTab.Event_AddRegionEntry
// 0x0008 (0x0008 - 0x0000)
struct RBMenuOptionsTab_Event_AddRegionEntry final
{
public:
	class URBMenuOptionsEntry*                    Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsTab_Event_AddRegionEntry) == 0x000008, "Wrong alignment on RBMenuOptionsTab_Event_AddRegionEntry");
static_assert(sizeof(RBMenuOptionsTab_Event_AddRegionEntry) == 0x000008, "Wrong size on RBMenuOptionsTab_Event_AddRegionEntry");
static_assert(offsetof(RBMenuOptionsTab_Event_AddRegionEntry, Entry) == 0x000000, "Member 'RBMenuOptionsTab_Event_AddRegionEntry::Entry' has a wrong offset!");

// Function OPP.RBMenuOptionsTab.GetChangedOptions
// 0x0010 (0x0010 - 0x0000)
struct RBMenuOptionsTab_GetChangedOptions final
{
public:
	TArray<class FString>                         OptionsNames;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsTab_GetChangedOptions) == 0x000008, "Wrong alignment on RBMenuOptionsTab_GetChangedOptions");
static_assert(sizeof(RBMenuOptionsTab_GetChangedOptions) == 0x000010, "Wrong size on RBMenuOptionsTab_GetChangedOptions");
static_assert(offsetof(RBMenuOptionsTab_GetChangedOptions, OptionsNames) == 0x000000, "Member 'RBMenuOptionsTab_GetChangedOptions::OptionsNames' has a wrong offset!");

// Function OPP.RBMenuOptionsTab.HasUnsavedChanges
// 0x0001 (0x0001 - 0x0000)
struct RBMenuOptionsTab_HasUnsavedChanges final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsTab_HasUnsavedChanges) == 0x000001, "Wrong alignment on RBMenuOptionsTab_HasUnsavedChanges");
static_assert(sizeof(RBMenuOptionsTab_HasUnsavedChanges) == 0x000001, "Wrong size on RBMenuOptionsTab_HasUnsavedChanges");
static_assert(offsetof(RBMenuOptionsTab_HasUnsavedChanges, ReturnValue) == 0x000000, "Member 'RBMenuOptionsTab_HasUnsavedChanges::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsTab.OnEntryHovered
// 0x0008 (0x0008 - 0x0000)
struct RBMenuOptionsTab_OnEntryHovered final
{
public:
	class URBMenuOptionsEntry*                    Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsTab_OnEntryHovered) == 0x000008, "Wrong alignment on RBMenuOptionsTab_OnEntryHovered");
static_assert(sizeof(RBMenuOptionsTab_OnEntryHovered) == 0x000008, "Wrong size on RBMenuOptionsTab_OnEntryHovered");
static_assert(offsetof(RBMenuOptionsTab_OnEntryHovered, Entry) == 0x000000, "Member 'RBMenuOptionsTab_OnEntryHovered::Entry' has a wrong offset!");

// Function OPP.RBMenuOptionsTab.OnHUDPresetChanged
// 0x0008 (0x0008 - 0x0000)
struct RBMenuOptionsTab_OnHUDPresetChanged final
{
public:
	bool                                          bIsPreset;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsTab_OnHUDPresetChanged) == 0x000004, "Wrong alignment on RBMenuOptionsTab_OnHUDPresetChanged");
static_assert(sizeof(RBMenuOptionsTab_OnHUDPresetChanged) == 0x000008, "Wrong size on RBMenuOptionsTab_OnHUDPresetChanged");
static_assert(offsetof(RBMenuOptionsTab_OnHUDPresetChanged, bIsPreset) == 0x000000, "Member 'RBMenuOptionsTab_OnHUDPresetChanged::bIsPreset' has a wrong offset!");
static_assert(offsetof(RBMenuOptionsTab_OnHUDPresetChanged, NewValue) == 0x000004, "Member 'RBMenuOptionsTab_OnHUDPresetChanged::NewValue' has a wrong offset!");

// Function OPP.RBMenuOptionsTab.OnlineCreateRegionsEntries
// 0x0008 (0x0008 - 0x0000)
struct RBMenuOptionsTab_OnlineCreateRegionsEntries final
{
public:
	class URBMenuOptionsEntry*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsTab_OnlineCreateRegionsEntries) == 0x000008, "Wrong alignment on RBMenuOptionsTab_OnlineCreateRegionsEntries");
static_assert(sizeof(RBMenuOptionsTab_OnlineCreateRegionsEntries) == 0x000008, "Wrong size on RBMenuOptionsTab_OnlineCreateRegionsEntries");
static_assert(offsetof(RBMenuOptionsTab_OnlineCreateRegionsEntries, ReturnValue) == 0x000000, "Member 'RBMenuOptionsTab_OnlineCreateRegionsEntries::ReturnValue' has a wrong offset!");

// Function OPP.RBMenuOptionsTab.OnOptionValueChanged
// 0x0008 (0x0008 - 0x0000)
struct RBMenuOptionsTab_OnOptionValueChanged final
{
public:
	class URBMenuOptionsEntry*                    Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsTab_OnOptionValueChanged) == 0x000008, "Wrong alignment on RBMenuOptionsTab_OnOptionValueChanged");
static_assert(sizeof(RBMenuOptionsTab_OnOptionValueChanged) == 0x000008, "Wrong size on RBMenuOptionsTab_OnOptionValueChanged");
static_assert(offsetof(RBMenuOptionsTab_OnOptionValueChanged, Entry) == 0x000000, "Member 'RBMenuOptionsTab_OnOptionValueChanged::Entry' has a wrong offset!");

// Function OPP.RBMenuOptionsTab.OnQualityValueUpdated
// 0x0008 (0x0008 - 0x0000)
struct RBMenuOptionsTab_OnQualityValueUpdated final
{
public:
	bool                                          bIsPreset;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_217E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsTab_OnQualityValueUpdated) == 0x000004, "Wrong alignment on RBMenuOptionsTab_OnQualityValueUpdated");
static_assert(sizeof(RBMenuOptionsTab_OnQualityValueUpdated) == 0x000008, "Wrong size on RBMenuOptionsTab_OnQualityValueUpdated");
static_assert(offsetof(RBMenuOptionsTab_OnQualityValueUpdated, bIsPreset) == 0x000000, "Member 'RBMenuOptionsTab_OnQualityValueUpdated::bIsPreset' has a wrong offset!");
static_assert(offsetof(RBMenuOptionsTab_OnQualityValueUpdated, NewValue) == 0x000004, "Member 'RBMenuOptionsTab_OnQualityValueUpdated::NewValue' has a wrong offset!");

// Function OPP.RBMenuOptionsTab.OnSubButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct RBMenuOptionsTab_OnSubButtonClicked final
{
public:
	class URBMenuOptionsEntry*                    Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMenuOptionsTab_OnSubButtonClicked) == 0x000008, "Wrong alignment on RBMenuOptionsTab_OnSubButtonClicked");
static_assert(sizeof(RBMenuOptionsTab_OnSubButtonClicked) == 0x000008, "Wrong size on RBMenuOptionsTab_OnSubButtonClicked");
static_assert(offsetof(RBMenuOptionsTab_OnSubButtonClicked, Entry) == 0x000000, "Member 'RBMenuOptionsTab_OnSubButtonClicked::Entry' has a wrong offset!");

// Function OPP.RBMicTestOptionsEntryWidget.GetMicrophoneTestState
// 0x0001 (0x0001 - 0x0000)
struct RBMicTestOptionsEntryWidget_GetMicrophoneTestState final
{
public:
	ERBMicrophoneTestState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMicTestOptionsEntryWidget_GetMicrophoneTestState) == 0x000001, "Wrong alignment on RBMicTestOptionsEntryWidget_GetMicrophoneTestState");
static_assert(sizeof(RBMicTestOptionsEntryWidget_GetMicrophoneTestState) == 0x000001, "Wrong size on RBMicTestOptionsEntryWidget_GetMicrophoneTestState");
static_assert(offsetof(RBMicTestOptionsEntryWidget_GetMicrophoneTestState, ReturnValue) == 0x000000, "Member 'RBMicTestOptionsEntryWidget_GetMicrophoneTestState::ReturnValue' has a wrong offset!");

// Function OPP.RBMicTestOptionsEntryWidget.GetMicrophoneVolume
// 0x0004 (0x0004 - 0x0000)
struct RBMicTestOptionsEntryWidget_GetMicrophoneVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMicTestOptionsEntryWidget_GetMicrophoneVolume) == 0x000004, "Wrong alignment on RBMicTestOptionsEntryWidget_GetMicrophoneVolume");
static_assert(sizeof(RBMicTestOptionsEntryWidget_GetMicrophoneVolume) == 0x000004, "Wrong size on RBMicTestOptionsEntryWidget_GetMicrophoneVolume");
static_assert(offsetof(RBMicTestOptionsEntryWidget_GetMicrophoneVolume, ReturnValue) == 0x000000, "Member 'RBMicTestOptionsEntryWidget_GetMicrophoneVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBMinigameRoomComponent.OnDoorFullyUnlocked_Server
// 0x0008 (0x0008 - 0x0000)
struct RBMinigameRoomComponent_OnDoorFullyUnlocked_Server final
{
public:
	class ARBDoor*                                Door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMinigameRoomComponent_OnDoorFullyUnlocked_Server) == 0x000008, "Wrong alignment on RBMinigameRoomComponent_OnDoorFullyUnlocked_Server");
static_assert(sizeof(RBMinigameRoomComponent_OnDoorFullyUnlocked_Server) == 0x000008, "Wrong size on RBMinigameRoomComponent_OnDoorFullyUnlocked_Server");
static_assert(offsetof(RBMinigameRoomComponent_OnDoorFullyUnlocked_Server, Door) == 0x000000, "Member 'RBMinigameRoomComponent_OnDoorFullyUnlocked_Server::Door' has a wrong offset!");

// Function OPP.RBMinigameRoomComponent.OnOperatableCompleted_Server
// 0x0010 (0x0010 - 0x0000)
struct RBMinigameRoomComponent_OnOperatableCompleted_Server final
{
public:
	bool                                          bIsOn;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2186[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBOperatable*                          Operatable;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMinigameRoomComponent_OnOperatableCompleted_Server) == 0x000008, "Wrong alignment on RBMinigameRoomComponent_OnOperatableCompleted_Server");
static_assert(sizeof(RBMinigameRoomComponent_OnOperatableCompleted_Server) == 0x000010, "Wrong size on RBMinigameRoomComponent_OnOperatableCompleted_Server");
static_assert(offsetof(RBMinigameRoomComponent_OnOperatableCompleted_Server, bIsOn) == 0x000000, "Member 'RBMinigameRoomComponent_OnOperatableCompleted_Server::bIsOn' has a wrong offset!");
static_assert(offsetof(RBMinigameRoomComponent_OnOperatableCompleted_Server, Operatable) == 0x000008, "Member 'RBMinigameRoomComponent_OnOperatableCompleted_Server::Operatable' has a wrong offset!");

// Function OPP.RBMolotovProjectile.OnRep_FireStartedTimestamp
// 0x0004 (0x0004 - 0x0000)
struct RBMolotovProjectile_OnRep_FireStartedTimestamp final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMolotovProjectile_OnRep_FireStartedTimestamp) == 0x000004, "Wrong alignment on RBMolotovProjectile_OnRep_FireStartedTimestamp");
static_assert(sizeof(RBMolotovProjectile_OnRep_FireStartedTimestamp) == 0x000004, "Wrong size on RBMolotovProjectile_OnRep_FireStartedTimestamp");
static_assert(offsetof(RBMolotovProjectile_OnRep_FireStartedTimestamp, OldValue) == 0x000000, "Member 'RBMolotovProjectile_OnRep_FireStartedTimestamp::OldValue' has a wrong offset!");

// Function OPP.RBMonsterCloset.BP_SetCurrentlyEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBMonsterCloset_BP_SetCurrentlyEnabled final
{
public:
	bool                                          bIsEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_BP_SetCurrentlyEnabled) == 0x000001, "Wrong alignment on RBMonsterCloset_BP_SetCurrentlyEnabled");
static_assert(sizeof(RBMonsterCloset_BP_SetCurrentlyEnabled) == 0x000001, "Wrong size on RBMonsterCloset_BP_SetCurrentlyEnabled");
static_assert(offsetof(RBMonsterCloset_BP_SetCurrentlyEnabled, bIsEnabled) == 0x000000, "Member 'RBMonsterCloset_BP_SetCurrentlyEnabled::bIsEnabled' has a wrong offset!");

// Function OPP.RBMonsterCloset.BP_Tick
// 0x0008 (0x0008 - 0x0000)
struct RBMonsterCloset_BP_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2193[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMonsterCloset_BP_Tick) == 0x000004, "Wrong alignment on RBMonsterCloset_BP_Tick");
static_assert(sizeof(RBMonsterCloset_BP_Tick) == 0x000008, "Wrong size on RBMonsterCloset_BP_Tick");
static_assert(offsetof(RBMonsterCloset_BP_Tick, DeltaTime) == 0x000000, "Member 'RBMonsterCloset_BP_Tick::DeltaTime' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_BP_Tick, ReturnValue) == 0x000004, "Member 'RBMonsterCloset_BP_Tick::ReturnValue' has a wrong offset!");

// Function OPP.RBMonsterCloset.Event_ApplyOpenState
// 0x0001 (0x0001 - 0x0000)
struct RBMonsterCloset_Event_ApplyOpenState final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_Event_ApplyOpenState) == 0x000001, "Wrong alignment on RBMonsterCloset_Event_ApplyOpenState");
static_assert(sizeof(RBMonsterCloset_Event_ApplyOpenState) == 0x000001, "Wrong size on RBMonsterCloset_Event_ApplyOpenState");
static_assert(offsetof(RBMonsterCloset_Event_ApplyOpenState, bOpen) == 0x000000, "Member 'RBMonsterCloset_Event_ApplyOpenState::bOpen' has a wrong offset!");

// Function OPP.RBMonsterCloset.Event_OnNPCEnter
// 0x0008 (0x0008 - 0x0000)
struct RBMonsterCloset_Event_OnNPCEnter final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_Event_OnNPCEnter) == 0x000008, "Wrong alignment on RBMonsterCloset_Event_OnNPCEnter");
static_assert(sizeof(RBMonsterCloset_Event_OnNPCEnter) == 0x000008, "Wrong size on RBMonsterCloset_Event_OnNPCEnter");
static_assert(offsetof(RBMonsterCloset_Event_OnNPCEnter, NPC) == 0x000000, "Member 'RBMonsterCloset_Event_OnNPCEnter::NPC' has a wrong offset!");

// Function OPP.RBMonsterCloset.Event_OnNPCExit
// 0x0008 (0x0008 - 0x0000)
struct RBMonsterCloset_Event_OnNPCExit final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_Event_OnNPCExit) == 0x000008, "Wrong alignment on RBMonsterCloset_Event_OnNPCExit");
static_assert(sizeof(RBMonsterCloset_Event_OnNPCExit) == 0x000008, "Wrong size on RBMonsterCloset_Event_OnNPCExit");
static_assert(offsetof(RBMonsterCloset_Event_OnNPCExit, NPC) == 0x000000, "Member 'RBMonsterCloset_Event_OnNPCExit::NPC' has a wrong offset!");

// Function OPP.RBMonsterCloset.Event_OnPlayerInClosetChanged
// 0x0008 (0x0008 - 0x0000)
struct RBMonsterCloset_Event_OnPlayerInClosetChanged final
{
public:
	class ARBPlayer*                              OldPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_Event_OnPlayerInClosetChanged) == 0x000008, "Wrong alignment on RBMonsterCloset_Event_OnPlayerInClosetChanged");
static_assert(sizeof(RBMonsterCloset_Event_OnPlayerInClosetChanged) == 0x000008, "Wrong size on RBMonsterCloset_Event_OnPlayerInClosetChanged");
static_assert(offsetof(RBMonsterCloset_Event_OnPlayerInClosetChanged, OldPlayer) == 0x000000, "Member 'RBMonsterCloset_Event_OnPlayerInClosetChanged::OldPlayer' has a wrong offset!");

// Function OPP.RBMonsterCloset.Event_SetNPCSpawnWarningActive
// 0x0001 (0x0001 - 0x0000)
struct RBMonsterCloset_Event_SetNPCSpawnWarningActive final
{
public:
	bool                                          bWarningActive;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_Event_SetNPCSpawnWarningActive) == 0x000001, "Wrong alignment on RBMonsterCloset_Event_SetNPCSpawnWarningActive");
static_assert(sizeof(RBMonsterCloset_Event_SetNPCSpawnWarningActive) == 0x000001, "Wrong size on RBMonsterCloset_Event_SetNPCSpawnWarningActive");
static_assert(offsetof(RBMonsterCloset_Event_SetNPCSpawnWarningActive, bWarningActive) == 0x000000, "Member 'RBMonsterCloset_Event_SetNPCSpawnWarningActive::bWarningActive' has a wrong offset!");

// Function OPP.RBMonsterCloset.Event_TriggerNPCSpawnAnnouncement
// 0x0001 (0x0001 - 0x0000)
struct RBMonsterCloset_Event_TriggerNPCSpawnAnnouncement final
{
public:
	ENPCType                                      NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_Event_TriggerNPCSpawnAnnouncement) == 0x000001, "Wrong alignment on RBMonsterCloset_Event_TriggerNPCSpawnAnnouncement");
static_assert(sizeof(RBMonsterCloset_Event_TriggerNPCSpawnAnnouncement) == 0x000001, "Wrong size on RBMonsterCloset_Event_TriggerNPCSpawnAnnouncement");
static_assert(offsetof(RBMonsterCloset_Event_TriggerNPCSpawnAnnouncement, NPCType) == 0x000000, "Member 'RBMonsterCloset_Event_TriggerNPCSpawnAnnouncement::NPCType' has a wrong offset!");

// Function OPP.RBMonsterCloset.Multicast_TriggerNPCSpawnAnnouncement
// 0x0001 (0x0001 - 0x0000)
struct RBMonsterCloset_Multicast_TriggerNPCSpawnAnnouncement final
{
public:
	ENPCType                                      NPCType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_Multicast_TriggerNPCSpawnAnnouncement) == 0x000001, "Wrong alignment on RBMonsterCloset_Multicast_TriggerNPCSpawnAnnouncement");
static_assert(sizeof(RBMonsterCloset_Multicast_TriggerNPCSpawnAnnouncement) == 0x000001, "Wrong size on RBMonsterCloset_Multicast_TriggerNPCSpawnAnnouncement");
static_assert(offsetof(RBMonsterCloset_Multicast_TriggerNPCSpawnAnnouncement, NPCType) == 0x000000, "Member 'RBMonsterCloset_Multicast_TriggerNPCSpawnAnnouncement::NPCType' has a wrong offset!");

// Function OPP.RBMonsterCloset.OnRep_PlayerInCloset
// 0x0008 (0x0008 - 0x0000)
struct RBMonsterCloset_OnRep_PlayerInCloset final
{
public:
	class ARBPlayer*                              OldValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_OnRep_PlayerInCloset) == 0x000008, "Wrong alignment on RBMonsterCloset_OnRep_PlayerInCloset");
static_assert(sizeof(RBMonsterCloset_OnRep_PlayerInCloset) == 0x000008, "Wrong size on RBMonsterCloset_OnRep_PlayerInCloset");
static_assert(offsetof(RBMonsterCloset_OnRep_PlayerInCloset, OldValue) == 0x000000, "Member 'RBMonsterCloset_OnRep_PlayerInCloset::OldValue' has a wrong offset!");

// Function OPP.RBMonsterCloset.OnSpawningZoneBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBMonsterCloset_OnSpawningZoneBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2194[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBMonsterCloset_OnSpawningZoneBeginOverlap) == 0x000008, "Wrong alignment on RBMonsterCloset_OnSpawningZoneBeginOverlap");
static_assert(sizeof(RBMonsterCloset_OnSpawningZoneBeginOverlap) == 0x0000A8, "Wrong size on RBMonsterCloset_OnSpawningZoneBeginOverlap");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBMonsterCloset_OnSpawningZoneBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneBeginOverlap, OtherActor) == 0x000008, "Member 'RBMonsterCloset_OnSpawningZoneBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneBeginOverlap, OtherComp) == 0x000010, "Member 'RBMonsterCloset_OnSpawningZoneBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBMonsterCloset_OnSpawningZoneBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBMonsterCloset_OnSpawningZoneBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneBeginOverlap, SweepResult) == 0x000020, "Member 'RBMonsterCloset_OnSpawningZoneBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBMonsterCloset.OnSpawningZoneEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBMonsterCloset_OnSpawningZoneEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2195[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMonsterCloset_OnSpawningZoneEndOverlap) == 0x000008, "Wrong alignment on RBMonsterCloset_OnSpawningZoneEndOverlap");
static_assert(sizeof(RBMonsterCloset_OnSpawningZoneEndOverlap) == 0x000020, "Wrong size on RBMonsterCloset_OnSpawningZoneEndOverlap");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBMonsterCloset_OnSpawningZoneEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneEndOverlap, OtherActor) == 0x000008, "Member 'RBMonsterCloset_OnSpawningZoneEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneEndOverlap, OtherComp) == 0x000010, "Member 'RBMonsterCloset_OnSpawningZoneEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_OnSpawningZoneEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBMonsterCloset_OnSpawningZoneEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBMonsterCloset.SetDoorCollisionsForPawn
// 0x0010 (0x0010 - 0x0000)
struct RBMonsterCloset_SetDoorCollisionsForPawn final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2196[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBMonsterCloset_SetDoorCollisionsForPawn) == 0x000008, "Wrong alignment on RBMonsterCloset_SetDoorCollisionsForPawn");
static_assert(sizeof(RBMonsterCloset_SetDoorCollisionsForPawn) == 0x000010, "Wrong size on RBMonsterCloset_SetDoorCollisionsForPawn");
static_assert(offsetof(RBMonsterCloset_SetDoorCollisionsForPawn, Pawn) == 0x000000, "Member 'RBMonsterCloset_SetDoorCollisionsForPawn::Pawn' has a wrong offset!");
static_assert(offsetof(RBMonsterCloset_SetDoorCollisionsForPawn, bEnabled) == 0x000008, "Member 'RBMonsterCloset_SetDoorCollisionsForPawn::bEnabled' has a wrong offset!");

// Function OPP.RBNarrativeScreen.BP_SetTVChannel
// 0x0008 (0x0008 - 0x0000)
struct RBNarrativeScreen_BP_SetTVChannel final
{
public:
	class ARBNarrativeScreenChannel*              Channel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreen_BP_SetTVChannel) == 0x000008, "Wrong alignment on RBNarrativeScreen_BP_SetTVChannel");
static_assert(sizeof(RBNarrativeScreen_BP_SetTVChannel) == 0x000008, "Wrong size on RBNarrativeScreen_BP_SetTVChannel");
static_assert(offsetof(RBNarrativeScreen_BP_SetTVChannel, Channel) == 0x000000, "Member 'RBNarrativeScreen_BP_SetTVChannel::Channel' has a wrong offset!");

// Function OPP.RBNarrativeScreen.BP_SetTVOn
// 0x0002 (0x0002 - 0x0000)
struct RBNarrativeScreen_BP_SetTVOn final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateOnAllLinkedChannelTVs;                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreen_BP_SetTVOn) == 0x000001, "Wrong alignment on RBNarrativeScreen_BP_SetTVOn");
static_assert(sizeof(RBNarrativeScreen_BP_SetTVOn) == 0x000002, "Wrong size on RBNarrativeScreen_BP_SetTVOn");
static_assert(offsetof(RBNarrativeScreen_BP_SetTVOn, bValue) == 0x000000, "Member 'RBNarrativeScreen_BP_SetTVOn::bValue' has a wrong offset!");
static_assert(offsetof(RBNarrativeScreen_BP_SetTVOn, bPropagateOnAllLinkedChannelTVs) == 0x000001, "Member 'RBNarrativeScreen_BP_SetTVOn::bPropagateOnAllLinkedChannelTVs' has a wrong offset!");

// Function OPP.RBNarrativeScreen.Event_OnDamageCountChanged
// 0x0004 (0x0004 - 0x0000)
struct RBNarrativeScreen_Event_OnDamageCountChanged final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreen_Event_OnDamageCountChanged) == 0x000004, "Wrong alignment on RBNarrativeScreen_Event_OnDamageCountChanged");
static_assert(sizeof(RBNarrativeScreen_Event_OnDamageCountChanged) == 0x000004, "Wrong size on RBNarrativeScreen_Event_OnDamageCountChanged");
static_assert(offsetof(RBNarrativeScreen_Event_OnDamageCountChanged, Count) == 0x000000, "Member 'RBNarrativeScreen_Event_OnDamageCountChanged::Count' has a wrong offset!");

// Function OPP.RBNarrativeScreen.OnNumberOfHitChanged
// 0x0008 (0x0008 - 0x0000)
struct RBNarrativeScreen_OnNumberOfHitChanged final
{
public:
	class URBDamageableComponent*                 DamagedComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreen_OnNumberOfHitChanged) == 0x000008, "Wrong alignment on RBNarrativeScreen_OnNumberOfHitChanged");
static_assert(sizeof(RBNarrativeScreen_OnNumberOfHitChanged) == 0x000008, "Wrong size on RBNarrativeScreen_OnNumberOfHitChanged");
static_assert(offsetof(RBNarrativeScreen_OnNumberOfHitChanged, DamagedComponent) == 0x000000, "Member 'RBNarrativeScreen_OnNumberOfHitChanged::DamagedComponent' has a wrong offset!");

// Function OPP.RBNarrativeScreen.OnRep_LinkedChannel
// 0x0008 (0x0008 - 0x0000)
struct RBNarrativeScreen_OnRep_LinkedChannel final
{
public:
	class ARBNarrativeScreenChannel*              OldValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreen_OnRep_LinkedChannel) == 0x000008, "Wrong alignment on RBNarrativeScreen_OnRep_LinkedChannel");
static_assert(sizeof(RBNarrativeScreen_OnRep_LinkedChannel) == 0x000008, "Wrong size on RBNarrativeScreen_OnRep_LinkedChannel");
static_assert(offsetof(RBNarrativeScreen_OnRep_LinkedChannel, OldValue) == 0x000000, "Member 'RBNarrativeScreen_OnRep_LinkedChannel::OldValue' has a wrong offset!");

// Function OPP.RBNarrativeScreen.IsCurrentlyPlaying
// 0x0001 (0x0001 - 0x0000)
struct RBNarrativeScreen_IsCurrentlyPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreen_IsCurrentlyPlaying) == 0x000001, "Wrong alignment on RBNarrativeScreen_IsCurrentlyPlaying");
static_assert(sizeof(RBNarrativeScreen_IsCurrentlyPlaying) == 0x000001, "Wrong size on RBNarrativeScreen_IsCurrentlyPlaying");
static_assert(offsetof(RBNarrativeScreen_IsCurrentlyPlaying, ReturnValue) == 0x000000, "Member 'RBNarrativeScreen_IsCurrentlyPlaying::ReturnValue' has a wrong offset!");

// Function OPP.RBNarrativeScreenChannel.BP_PlayAnimation
// 0x0020 (0x0020 - 0x0000)
struct RBNarrativeScreenChannel_BP_PlayAnimation final
{
public:
	struct FNarrativeScreenAnimationData          PlayingData;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bQueueIfPlaying;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAllLinkedTVsOn;                              // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21A1[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNarrativeScreenChannel_BP_PlayAnimation) == 0x000008, "Wrong alignment on RBNarrativeScreenChannel_BP_PlayAnimation");
static_assert(sizeof(RBNarrativeScreenChannel_BP_PlayAnimation) == 0x000020, "Wrong size on RBNarrativeScreenChannel_BP_PlayAnimation");
static_assert(offsetof(RBNarrativeScreenChannel_BP_PlayAnimation, PlayingData) == 0x000000, "Member 'RBNarrativeScreenChannel_BP_PlayAnimation::PlayingData' has a wrong offset!");
static_assert(offsetof(RBNarrativeScreenChannel_BP_PlayAnimation, bQueueIfPlaying) == 0x000018, "Member 'RBNarrativeScreenChannel_BP_PlayAnimation::bQueueIfPlaying' has a wrong offset!");
static_assert(offsetof(RBNarrativeScreenChannel_BP_PlayAnimation, bForceAllLinkedTVsOn) == 0x000019, "Member 'RBNarrativeScreenChannel_BP_PlayAnimation::bForceAllLinkedTVsOn' has a wrong offset!");

// Function OPP.RBNarrativeScreenChannel.BP_SetAllLinkedTVsOn
// 0x0001 (0x0001 - 0x0000)
struct RBNarrativeScreenChannel_BP_SetAllLinkedTVsOn final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreenChannel_BP_SetAllLinkedTVsOn) == 0x000001, "Wrong alignment on RBNarrativeScreenChannel_BP_SetAllLinkedTVsOn");
static_assert(sizeof(RBNarrativeScreenChannel_BP_SetAllLinkedTVsOn) == 0x000001, "Wrong size on RBNarrativeScreenChannel_BP_SetAllLinkedTVsOn");
static_assert(offsetof(RBNarrativeScreenChannel_BP_SetAllLinkedTVsOn, bValue) == 0x000000, "Member 'RBNarrativeScreenChannel_BP_SetAllLinkedTVsOn::bValue' has a wrong offset!");

// Function OPP.RBNarrativeScreenChannel.BP_StopAnimation
// 0x0001 (0x0001 - 0x0000)
struct RBNarrativeScreenChannel_BP_StopAnimation final
{
public:
	bool                                          bClearQueue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreenChannel_BP_StopAnimation) == 0x000001, "Wrong alignment on RBNarrativeScreenChannel_BP_StopAnimation");
static_assert(sizeof(RBNarrativeScreenChannel_BP_StopAnimation) == 0x000001, "Wrong size on RBNarrativeScreenChannel_BP_StopAnimation");
static_assert(offsetof(RBNarrativeScreenChannel_BP_StopAnimation, bClearQueue) == 0x000000, "Member 'RBNarrativeScreenChannel_BP_StopAnimation::bClearQueue' has a wrong offset!");

// Function OPP.RBNarrativeScreenChannel.Event_OnLinkedScreenAdded
// 0x0008 (0x0008 - 0x0000)
struct RBNarrativeScreenChannel_Event_OnLinkedScreenAdded final
{
public:
	class ARBNarrativeScreen*                     LinkedScreen;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreenChannel_Event_OnLinkedScreenAdded) == 0x000008, "Wrong alignment on RBNarrativeScreenChannel_Event_OnLinkedScreenAdded");
static_assert(sizeof(RBNarrativeScreenChannel_Event_OnLinkedScreenAdded) == 0x000008, "Wrong size on RBNarrativeScreenChannel_Event_OnLinkedScreenAdded");
static_assert(offsetof(RBNarrativeScreenChannel_Event_OnLinkedScreenAdded, LinkedScreen) == 0x000000, "Member 'RBNarrativeScreenChannel_Event_OnLinkedScreenAdded::LinkedScreen' has a wrong offset!");

// Function OPP.RBNarrativeScreenChannel.Event_OnLinkedScreenRemoved
// 0x0008 (0x0008 - 0x0000)
struct RBNarrativeScreenChannel_Event_OnLinkedScreenRemoved final
{
public:
	class ARBNarrativeScreen*                     LinkedScreen;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreenChannel_Event_OnLinkedScreenRemoved) == 0x000008, "Wrong alignment on RBNarrativeScreenChannel_Event_OnLinkedScreenRemoved");
static_assert(sizeof(RBNarrativeScreenChannel_Event_OnLinkedScreenRemoved) == 0x000008, "Wrong size on RBNarrativeScreenChannel_Event_OnLinkedScreenRemoved");
static_assert(offsetof(RBNarrativeScreenChannel_Event_OnLinkedScreenRemoved, LinkedScreen) == 0x000000, "Member 'RBNarrativeScreenChannel_Event_OnLinkedScreenRemoved::LinkedScreen' has a wrong offset!");

// Function OPP.RBNarrativeScreenChannel.BP_GetLinkedScreens
// 0x0010 (0x0010 - 0x0000)
struct RBNarrativeScreenChannel_BP_GetLinkedScreens final
{
public:
	TArray<class ARBNarrativeScreen*>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreenChannel_BP_GetLinkedScreens) == 0x000008, "Wrong alignment on RBNarrativeScreenChannel_BP_GetLinkedScreens");
static_assert(sizeof(RBNarrativeScreenChannel_BP_GetLinkedScreens) == 0x000010, "Wrong size on RBNarrativeScreenChannel_BP_GetLinkedScreens");
static_assert(offsetof(RBNarrativeScreenChannel_BP_GetLinkedScreens, ReturnValue) == 0x000000, "Member 'RBNarrativeScreenChannel_BP_GetLinkedScreens::ReturnValue' has a wrong offset!");

// Function OPP.RBNarrativeScreenChannel.IsCurrentlyPlaying
// 0x0001 (0x0001 - 0x0000)
struct RBNarrativeScreenChannel_IsCurrentlyPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNarrativeScreenChannel_IsCurrentlyPlaying) == 0x000001, "Wrong alignment on RBNarrativeScreenChannel_IsCurrentlyPlaying");
static_assert(sizeof(RBNarrativeScreenChannel_IsCurrentlyPlaying) == 0x000001, "Wrong size on RBNarrativeScreenChannel_IsCurrentlyPlaying");
static_assert(offsetof(RBNarrativeScreenChannel_IsCurrentlyPlaying, ReturnValue) == 0x000000, "Member 'RBNarrativeScreenChannel_IsCurrentlyPlaying::ReturnValue' has a wrong offset!");

// Function OPP.RBNetworkSoundActor.OnRep_RTPCData
// 0x0010 (0x0010 - 0x0000)
struct RBNetworkSoundActor_OnRep_RTPCData final
{
public:
	TArray<struct FNetworkSoundActorRTPCData>     OldRTPCData;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSoundActor_OnRep_RTPCData) == 0x000008, "Wrong alignment on RBNetworkSoundActor_OnRep_RTPCData");
static_assert(sizeof(RBNetworkSoundActor_OnRep_RTPCData) == 0x000010, "Wrong size on RBNetworkSoundActor_OnRep_RTPCData");
static_assert(offsetof(RBNetworkSoundActor_OnRep_RTPCData, OldRTPCData) == 0x000000, "Member 'RBNetworkSoundActor_OnRep_RTPCData::OldRTPCData' has a wrong offset!");

// Function OPP.RBNetworkSoundActor.OnRep_SwitchStateData
// 0x0010 (0x0010 - 0x0000)
struct RBNetworkSoundActor_OnRep_SwitchStateData final
{
public:
	TArray<struct FNetworkSoundActorSwitchStateData> OldSwitchStateData;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSoundActor_OnRep_SwitchStateData) == 0x000008, "Wrong alignment on RBNetworkSoundActor_OnRep_SwitchStateData");
static_assert(sizeof(RBNetworkSoundActor_OnRep_SwitchStateData) == 0x000010, "Wrong size on RBNetworkSoundActor_OnRep_SwitchStateData");
static_assert(offsetof(RBNetworkSoundActor_OnRep_SwitchStateData, OldSwitchStateData) == 0x000000, "Member 'RBNetworkSoundActor_OnRep_SwitchStateData::OldSwitchStateData' has a wrong offset!");

// Function OPP.RBNetworkSoundActor.SetRTPC
// 0x000C (0x000C - 0x0000)
struct RBNetworkSoundActor_SetRTPC final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSoundActor_SetRTPC) == 0x000004, "Wrong alignment on RBNetworkSoundActor_SetRTPC");
static_assert(sizeof(RBNetworkSoundActor_SetRTPC) == 0x00000C, "Wrong size on RBNetworkSoundActor_SetRTPC");
static_assert(offsetof(RBNetworkSoundActor_SetRTPC, Param_Name) == 0x000000, "Member 'RBNetworkSoundActor_SetRTPC::Param_Name' has a wrong offset!");
static_assert(offsetof(RBNetworkSoundActor_SetRTPC, Value) == 0x000008, "Member 'RBNetworkSoundActor_SetRTPC::Value' has a wrong offset!");

// Function OPP.RBNetworkSoundActor.SetSwitchState
// 0x0010 (0x0010 - 0x0000)
struct RBNetworkSoundActor_SetSwitchState final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   State;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSoundActor_SetSwitchState) == 0x000004, "Wrong alignment on RBNetworkSoundActor_SetSwitchState");
static_assert(sizeof(RBNetworkSoundActor_SetSwitchState) == 0x000010, "Wrong size on RBNetworkSoundActor_SetSwitchState");
static_assert(offsetof(RBNetworkSoundActor_SetSwitchState, Param_Name) == 0x000000, "Member 'RBNetworkSoundActor_SetSwitchState::Param_Name' has a wrong offset!");
static_assert(offsetof(RBNetworkSoundActor_SetSwitchState, State) == 0x000008, "Member 'RBNetworkSoundActor_SetSwitchState::State' has a wrong offset!");

// Function OPP.RBNetworkSyncComponent.BP_GetSyncLocationFromSequence
// 0x0020 (0x0020 - 0x0000)
struct RBNetworkSyncComponent_BP_GetSyncLocationFromSequence final
{
public:
	TArray<struct FVector>                        Sequence;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AB[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNetworkSyncComponent_BP_GetSyncLocationFromSequence) == 0x000008, "Wrong alignment on RBNetworkSyncComponent_BP_GetSyncLocationFromSequence");
static_assert(sizeof(RBNetworkSyncComponent_BP_GetSyncLocationFromSequence) == 0x000020, "Wrong size on RBNetworkSyncComponent_BP_GetSyncLocationFromSequence");
static_assert(offsetof(RBNetworkSyncComponent_BP_GetSyncLocationFromSequence, Sequence) == 0x000000, "Member 'RBNetworkSyncComponent_BP_GetSyncLocationFromSequence::Sequence' has a wrong offset!");
static_assert(offsetof(RBNetworkSyncComponent_BP_GetSyncLocationFromSequence, OutLocation) == 0x000010, "Member 'RBNetworkSyncComponent_BP_GetSyncLocationFromSequence::OutLocation' has a wrong offset!");

// Function OPP.RBNetworkSyncComponent.BP_GetSyncRotationFromSequence
// 0x0020 (0x0020 - 0x0000)
struct RBNetworkSyncComponent_BP_GetSyncRotationFromSequence final
{
public:
	TArray<struct FRotator>                       Sequence;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_21AC[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBNetworkSyncComponent_BP_GetSyncRotationFromSequence) == 0x000008, "Wrong alignment on RBNetworkSyncComponent_BP_GetSyncRotationFromSequence");
static_assert(sizeof(RBNetworkSyncComponent_BP_GetSyncRotationFromSequence) == 0x000020, "Wrong size on RBNetworkSyncComponent_BP_GetSyncRotationFromSequence");
static_assert(offsetof(RBNetworkSyncComponent_BP_GetSyncRotationFromSequence, Sequence) == 0x000000, "Member 'RBNetworkSyncComponent_BP_GetSyncRotationFromSequence::Sequence' has a wrong offset!");
static_assert(offsetof(RBNetworkSyncComponent_BP_GetSyncRotationFromSequence, OutRotation) == 0x000010, "Member 'RBNetworkSyncComponent_BP_GetSyncRotationFromSequence::OutRotation' has a wrong offset!");

// Function OPP.RBNetworkSyncComponent.BP_SlowToStop
// 0x0004 (0x0004 - 0x0000)
struct RBNetworkSyncComponent_BP_SlowToStop final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSyncComponent_BP_SlowToStop) == 0x000004, "Wrong alignment on RBNetworkSyncComponent_BP_SlowToStop");
static_assert(sizeof(RBNetworkSyncComponent_BP_SlowToStop) == 0x000004, "Wrong size on RBNetworkSyncComponent_BP_SlowToStop");
static_assert(offsetof(RBNetworkSyncComponent_BP_SlowToStop, Duration) == 0x000000, "Member 'RBNetworkSyncComponent_BP_SlowToStop::Duration' has a wrong offset!");

// Function OPP.RBNetworkSyncComponent.BP_GetSyncValue
// 0x0004 (0x0004 - 0x0000)
struct RBNetworkSyncComponent_BP_GetSyncValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSyncComponent_BP_GetSyncValue) == 0x000004, "Wrong alignment on RBNetworkSyncComponent_BP_GetSyncValue");
static_assert(sizeof(RBNetworkSyncComponent_BP_GetSyncValue) == 0x000004, "Wrong size on RBNetworkSyncComponent_BP_GetSyncValue");
static_assert(offsetof(RBNetworkSyncComponent_BP_GetSyncValue, ReturnValue) == 0x000000, "Member 'RBNetworkSyncComponent_BP_GetSyncValue::ReturnValue' has a wrong offset!");

// Function OPP.RBNetworkSyncComponent.BP_IsFinished
// 0x0001 (0x0001 - 0x0000)
struct RBNetworkSyncComponent_BP_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSyncComponent_BP_IsFinished) == 0x000001, "Wrong alignment on RBNetworkSyncComponent_BP_IsFinished");
static_assert(sizeof(RBNetworkSyncComponent_BP_IsFinished) == 0x000001, "Wrong size on RBNetworkSyncComponent_BP_IsFinished");
static_assert(offsetof(RBNetworkSyncComponent_BP_IsFinished, ReturnValue) == 0x000000, "Member 'RBNetworkSyncComponent_BP_IsFinished::ReturnValue' has a wrong offset!");

// Function OPP.RBNetworkSyncComponent.BP_IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct RBNetworkSyncComponent_BP_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSyncComponent_BP_IsPlaying) == 0x000001, "Wrong alignment on RBNetworkSyncComponent_BP_IsPlaying");
static_assert(sizeof(RBNetworkSyncComponent_BP_IsPlaying) == 0x000001, "Wrong size on RBNetworkSyncComponent_BP_IsPlaying");
static_assert(offsetof(RBNetworkSyncComponent_BP_IsPlaying, ReturnValue) == 0x000000, "Member 'RBNetworkSyncComponent_BP_IsPlaying::ReturnValue' has a wrong offset!");

// Function OPP.RBNetworkSyncComponent.BP_IsStopped
// 0x0001 (0x0001 - 0x0000)
struct RBNetworkSyncComponent_BP_IsStopped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNetworkSyncComponent_BP_IsStopped) == 0x000001, "Wrong alignment on RBNetworkSyncComponent_BP_IsStopped");
static_assert(sizeof(RBNetworkSyncComponent_BP_IsStopped) == 0x000001, "Wrong size on RBNetworkSyncComponent_BP_IsStopped");
static_assert(offsetof(RBNetworkSyncComponent_BP_IsStopped, ReturnValue) == 0x000000, "Member 'RBNetworkSyncComponent_BP_IsStopped::ReturnValue' has a wrong offset!");

// Function OPP.RBNewsWidget.SetActiveItem
// 0x0004 (0x0004 - 0x0000)
struct RBNewsWidget_SetActiveItem final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_SetActiveItem) == 0x000004, "Wrong alignment on RBNewsWidget_SetActiveItem");
static_assert(sizeof(RBNewsWidget_SetActiveItem) == 0x000004, "Wrong size on RBNewsWidget_SetActiveItem");
static_assert(offsetof(RBNewsWidget_SetActiveItem, Param_Index) == 0x000000, "Member 'RBNewsWidget_SetActiveItem::Param_Index' has a wrong offset!");

// Function OPP.RBNewsWidget.GetBorderColor
// 0x0010 (0x0010 - 0x0000)
struct RBNewsWidget_GetBorderColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_GetBorderColor) == 0x000004, "Wrong alignment on RBNewsWidget_GetBorderColor");
static_assert(sizeof(RBNewsWidget_GetBorderColor) == 0x000010, "Wrong size on RBNewsWidget_GetBorderColor");
static_assert(offsetof(RBNewsWidget_GetBorderColor, ReturnValue) == 0x000000, "Member 'RBNewsWidget_GetBorderColor::ReturnValue' has a wrong offset!");

// Function OPP.RBNewsWidget.GetCurrentItemIndex
// 0x0004 (0x0004 - 0x0000)
struct RBNewsWidget_GetCurrentItemIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_GetCurrentItemIndex) == 0x000004, "Wrong alignment on RBNewsWidget_GetCurrentItemIndex");
static_assert(sizeof(RBNewsWidget_GetCurrentItemIndex) == 0x000004, "Wrong size on RBNewsWidget_GetCurrentItemIndex");
static_assert(offsetof(RBNewsWidget_GetCurrentItemIndex, ReturnValue) == 0x000000, "Member 'RBNewsWidget_GetCurrentItemIndex::ReturnValue' has a wrong offset!");

// Function OPP.RBNewsWidget.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct RBNewsWidget_GetDescription final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_GetDescription) == 0x000008, "Wrong alignment on RBNewsWidget_GetDescription");
static_assert(sizeof(RBNewsWidget_GetDescription) == 0x000010, "Wrong size on RBNewsWidget_GetDescription");
static_assert(offsetof(RBNewsWidget_GetDescription, ReturnValue) == 0x000000, "Member 'RBNewsWidget_GetDescription::ReturnValue' has a wrong offset!");

// Function OPP.RBNewsWidget.GetHeaderBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct RBNewsWidget_GetHeaderBackgroundColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_GetHeaderBackgroundColor) == 0x000004, "Wrong alignment on RBNewsWidget_GetHeaderBackgroundColor");
static_assert(sizeof(RBNewsWidget_GetHeaderBackgroundColor) == 0x000010, "Wrong size on RBNewsWidget_GetHeaderBackgroundColor");
static_assert(offsetof(RBNewsWidget_GetHeaderBackgroundColor, ReturnValue) == 0x000000, "Member 'RBNewsWidget_GetHeaderBackgroundColor::ReturnValue' has a wrong offset!");

// Function OPP.RBNewsWidget.GetHeaderTextColor
// 0x0010 (0x0010 - 0x0000)
struct RBNewsWidget_GetHeaderTextColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_GetHeaderTextColor) == 0x000004, "Wrong alignment on RBNewsWidget_GetHeaderTextColor");
static_assert(sizeof(RBNewsWidget_GetHeaderTextColor) == 0x000010, "Wrong size on RBNewsWidget_GetHeaderTextColor");
static_assert(offsetof(RBNewsWidget_GetHeaderTextColor, ReturnValue) == 0x000000, "Member 'RBNewsWidget_GetHeaderTextColor::ReturnValue' has a wrong offset!");

// Function OPP.RBNewsWidget.GetImage
// 0x0008 (0x0008 - 0x0000)
struct RBNewsWidget_GetImage final
{
public:
	class UTexture2DDynamic*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_GetImage) == 0x000008, "Wrong alignment on RBNewsWidget_GetImage");
static_assert(sizeof(RBNewsWidget_GetImage) == 0x000008, "Wrong size on RBNewsWidget_GetImage");
static_assert(offsetof(RBNewsWidget_GetImage, ReturnValue) == 0x000000, "Member 'RBNewsWidget_GetImage::ReturnValue' has a wrong offset!");

// Function OPP.RBNewsWidget.GetNumItems
// 0x0004 (0x0004 - 0x0000)
struct RBNewsWidget_GetNumItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_GetNumItems) == 0x000004, "Wrong alignment on RBNewsWidget_GetNumItems");
static_assert(sizeof(RBNewsWidget_GetNumItems) == 0x000004, "Wrong size on RBNewsWidget_GetNumItems");
static_assert(offsetof(RBNewsWidget_GetNumItems, ReturnValue) == 0x000000, "Member 'RBNewsWidget_GetNumItems::ReturnValue' has a wrong offset!");

// Function OPP.RBNewsWidget.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct RBNewsWidget_GetTitle final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_GetTitle) == 0x000008, "Wrong alignment on RBNewsWidget_GetTitle");
static_assert(sizeof(RBNewsWidget_GetTitle) == 0x000010, "Wrong size on RBNewsWidget_GetTitle");
static_assert(offsetof(RBNewsWidget_GetTitle, ReturnValue) == 0x000000, "Member 'RBNewsWidget_GetTitle::ReturnValue' has a wrong offset!");

// Function OPP.RBNewsWidget.HasCTA
// 0x0001 (0x0001 - 0x0000)
struct RBNewsWidget_HasCTA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNewsWidget_HasCTA) == 0x000001, "Wrong alignment on RBNewsWidget_HasCTA");
static_assert(sizeof(RBNewsWidget_HasCTA) == 0x000001, "Wrong size on RBNewsWidget_HasCTA");
static_assert(offsetof(RBNewsWidget_HasCTA, ReturnValue) == 0x000000, "Member 'RBNewsWidget_HasCTA::ReturnValue' has a wrong offset!");

// Function OPP.RBNPCDebugIconWidget.GetAwarenessStateType
// 0x0001 (0x0001 - 0x0000)
struct RBNPCDebugIconWidget_GetAwarenessStateType final
{
public:
	EAIAwarenessStateType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCDebugIconWidget_GetAwarenessStateType) == 0x000001, "Wrong alignment on RBNPCDebugIconWidget_GetAwarenessStateType");
static_assert(sizeof(RBNPCDebugIconWidget_GetAwarenessStateType) == 0x000001, "Wrong size on RBNPCDebugIconWidget_GetAwarenessStateType");
static_assert(offsetof(RBNPCDebugIconWidget_GetAwarenessStateType, ReturnValue) == 0x000000, "Member 'RBNPCDebugIconWidget_GetAwarenessStateType::ReturnValue' has a wrong offset!");

// Function OPP.RBNPCDebugIconWidget.GetMeterValue
// 0x0004 (0x0004 - 0x0000)
struct RBNPCDebugIconWidget_GetMeterValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCDebugIconWidget_GetMeterValue) == 0x000004, "Wrong alignment on RBNPCDebugIconWidget_GetMeterValue");
static_assert(sizeof(RBNPCDebugIconWidget_GetMeterValue) == 0x000004, "Wrong size on RBNPCDebugIconWidget_GetMeterValue");
static_assert(offsetof(RBNPCDebugIconWidget_GetMeterValue, ReturnValue) == 0x000000, "Member 'RBNPCDebugIconWidget_GetMeterValue::ReturnValue' has a wrong offset!");

// Function OPP.RBNPCSeparatorDoor.BP_ForceTubeDirection_Internal
// 0x0001 (0x0001 - 0x0000)
struct RBNPCSeparatorDoor_BP_ForceTubeDirection_Internal final
{
public:
	bool                                          bInsideToOutisde;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorDoor_BP_ForceTubeDirection_Internal) == 0x000001, "Wrong alignment on RBNPCSeparatorDoor_BP_ForceTubeDirection_Internal");
static_assert(sizeof(RBNPCSeparatorDoor_BP_ForceTubeDirection_Internal) == 0x000001, "Wrong size on RBNPCSeparatorDoor_BP_ForceTubeDirection_Internal");
static_assert(offsetof(RBNPCSeparatorDoor_BP_ForceTubeDirection_Internal, bInsideToOutisde) == 0x000000, "Member 'RBNPCSeparatorDoor_BP_ForceTubeDirection_Internal::bInsideToOutisde' has a wrong offset!");

// Function OPP.RBNPCSeparatorDoor.BP_SetDoorsCurrentDirection
// 0x0001 (0x0001 - 0x0000)
struct RBNPCSeparatorDoor_BP_SetDoorsCurrentDirection final
{
public:
	bool                                          bInsideToOutisde;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorDoor_BP_SetDoorsCurrentDirection) == 0x000001, "Wrong alignment on RBNPCSeparatorDoor_BP_SetDoorsCurrentDirection");
static_assert(sizeof(RBNPCSeparatorDoor_BP_SetDoorsCurrentDirection) == 0x000001, "Wrong size on RBNPCSeparatorDoor_BP_SetDoorsCurrentDirection");
static_assert(offsetof(RBNPCSeparatorDoor_BP_SetDoorsCurrentDirection, bInsideToOutisde) == 0x000000, "Member 'RBNPCSeparatorDoor_BP_SetDoorsCurrentDirection::bInsideToOutisde' has a wrong offset!");

// Function OPP.RBNPCSeparatorDoor.BP_SetDoorsRetracted_Internal
// 0x0001 (0x0001 - 0x0000)
struct RBNPCSeparatorDoor_BP_SetDoorsRetracted_Internal final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorDoor_BP_SetDoorsRetracted_Internal) == 0x000001, "Wrong alignment on RBNPCSeparatorDoor_BP_SetDoorsRetracted_Internal");
static_assert(sizeof(RBNPCSeparatorDoor_BP_SetDoorsRetracted_Internal) == 0x000001, "Wrong size on RBNPCSeparatorDoor_BP_SetDoorsRetracted_Internal");
static_assert(offsetof(RBNPCSeparatorDoor_BP_SetDoorsRetracted_Internal, bValue) == 0x000000, "Member 'RBNPCSeparatorDoor_BP_SetDoorsRetracted_Internal::bValue' has a wrong offset!");

// Function OPP.RBNPCSeparatorDoor.BP_SetLocked
// 0x0001 (0x0001 - 0x0000)
struct RBNPCSeparatorDoor_BP_SetLocked final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorDoor_BP_SetLocked) == 0x000001, "Wrong alignment on RBNPCSeparatorDoor_BP_SetLocked");
static_assert(sizeof(RBNPCSeparatorDoor_BP_SetLocked) == 0x000001, "Wrong size on RBNPCSeparatorDoor_BP_SetLocked");
static_assert(offsetof(RBNPCSeparatorDoor_BP_SetLocked, bValue) == 0x000000, "Member 'RBNPCSeparatorDoor_BP_SetLocked::bValue' has a wrong offset!");

// Function OPP.RBNPCSeparatorDoor.BP_SetMaxNumberOfPassages_Internal
// 0x0004 (0x0004 - 0x0000)
struct RBNPCSeparatorDoor_BP_SetMaxNumberOfPassages_Internal final
{
public:
	int32                                         Number;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorDoor_BP_SetMaxNumberOfPassages_Internal) == 0x000004, "Wrong alignment on RBNPCSeparatorDoor_BP_SetMaxNumberOfPassages_Internal");
static_assert(sizeof(RBNPCSeparatorDoor_BP_SetMaxNumberOfPassages_Internal) == 0x000004, "Wrong size on RBNPCSeparatorDoor_BP_SetMaxNumberOfPassages_Internal");
static_assert(offsetof(RBNPCSeparatorDoor_BP_SetMaxNumberOfPassages_Internal, Number) == 0x000000, "Member 'RBNPCSeparatorDoor_BP_SetMaxNumberOfPassages_Internal::Number' has a wrong offset!");

// Function OPP.RBNPCSeparatorDoor.OnInsideSafetyComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B3[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap) == 0x000008, "Wrong alignment on RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap");
static_assert(sizeof(RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap) == 0x0000A8, "Wrong size on RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap");
static_assert(offsetof(RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBNPCSeparatorDoor_OnInsideSafetyComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBNPCSeparatorDoor.OnOutsideSafetyComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B4[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap) == 0x000008, "Wrong alignment on RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap");
static_assert(sizeof(RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap) == 0x0000A8, "Wrong size on RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap");
static_assert(offsetof(RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBNPCSeparatorDoor_OnOutsideSafetyComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBNPCSeparatorDoor.OnPlayerExitedTube
// 0x0010 (0x0010 - 0x0000)
struct RBNPCSeparatorDoor_OnPlayerExitedTube final
{
public:
	class ARBNPCSeparatorTube*                    Tube;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCSeparatorDoor_OnPlayerExitedTube) == 0x000008, "Wrong alignment on RBNPCSeparatorDoor_OnPlayerExitedTube");
static_assert(sizeof(RBNPCSeparatorDoor_OnPlayerExitedTube) == 0x000010, "Wrong size on RBNPCSeparatorDoor_OnPlayerExitedTube");
static_assert(offsetof(RBNPCSeparatorDoor_OnPlayerExitedTube, Tube) == 0x000000, "Member 'RBNPCSeparatorDoor_OnPlayerExitedTube::Tube' has a wrong offset!");
static_assert(offsetof(RBNPCSeparatorDoor_OnPlayerExitedTube, Player) == 0x000008, "Member 'RBNPCSeparatorDoor_OnPlayerExitedTube::Player' has a wrong offset!");

// Function OPP.RBNPCShopUserWidget.SetMetaNpcType
// 0x0001 (0x0001 - 0x0000)
struct RBNPCShopUserWidget_SetMetaNpcType final
{
public:
	EMetaNPCType                                  MetaNPCType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCShopUserWidget_SetMetaNpcType) == 0x000001, "Wrong alignment on RBNPCShopUserWidget_SetMetaNpcType");
static_assert(sizeof(RBNPCShopUserWidget_SetMetaNpcType) == 0x000001, "Wrong size on RBNPCShopUserWidget_SetMetaNpcType");
static_assert(offsetof(RBNPCShopUserWidget_SetMetaNpcType, MetaNPCType) == 0x000000, "Member 'RBNPCShopUserWidget_SetMetaNpcType::MetaNPCType' has a wrong offset!");

// Function OPP.RBNPCShopUserWidget.GetMetaNPCType
// 0x0001 (0x0001 - 0x0000)
struct RBNPCShopUserWidget_GetMetaNPCType final
{
public:
	EMetaNPCType                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCShopUserWidget_GetMetaNPCType) == 0x000001, "Wrong alignment on RBNPCShopUserWidget_GetMetaNPCType");
static_assert(sizeof(RBNPCShopUserWidget_GetMetaNPCType) == 0x000001, "Wrong size on RBNPCShopUserWidget_GetMetaNPCType");
static_assert(offsetof(RBNPCShopUserWidget_GetMetaNPCType, ReturnValue) == 0x000000, "Member 'RBNPCShopUserWidget_GetMetaNPCType::ReturnValue' has a wrong offset!");

// Function OPP.RBNPCWeapon.EquippedBy
// 0x0008 (0x0008 - 0x0000)
struct RBNPCWeapon_EquippedBy final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNPCWeapon_EquippedBy) == 0x000008, "Wrong alignment on RBNPCWeapon_EquippedBy");
static_assert(sizeof(RBNPCWeapon_EquippedBy) == 0x000008, "Wrong size on RBNPCWeapon_EquippedBy");
static_assert(offsetof(RBNPCWeapon_EquippedBy, NPC) == 0x000000, "Member 'RBNPCWeapon_EquippedBy::NPC' has a wrong offset!");

// Function OPP.RBNVComponent.OnNVStateChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBNVComponent_OnNVStateChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNVComponent_OnNVStateChangedCallback) == 0x000001, "Wrong alignment on RBNVComponent_OnNVStateChangedCallback");
static_assert(sizeof(RBNVComponent_OnNVStateChangedCallback) == 0x000001, "Wrong size on RBNVComponent_OnNVStateChangedCallback");
static_assert(offsetof(RBNVComponent_OnNVStateChangedCallback, ChangedType) == 0x000000, "Member 'RBNVComponent_OnNVStateChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBNVComponent.TurnOn
// 0x0001 (0x0001 - 0x0000)
struct RBNVComponent_TurnOn final
{
public:
	bool                                          bPowered;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNVComponent_TurnOn) == 0x000001, "Wrong alignment on RBNVComponent_TurnOn");
static_assert(sizeof(RBNVComponent_TurnOn) == 0x000001, "Wrong size on RBNVComponent_TurnOn");
static_assert(offsetof(RBNVComponent_TurnOn, bPowered) == 0x000000, "Member 'RBNVComponent_TurnOn::bPowered' has a wrong offset!");

// Function OPP.RBNVComponent.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct RBNVComponent_GetCurrentState final
{
public:
	ENVState                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNVComponent_GetCurrentState) == 0x000001, "Wrong alignment on RBNVComponent_GetCurrentState");
static_assert(sizeof(RBNVComponent_GetCurrentState) == 0x000001, "Wrong size on RBNVComponent_GetCurrentState");
static_assert(offsetof(RBNVComponent_GetCurrentState, ReturnValue) == 0x000000, "Member 'RBNVComponent_GetCurrentState::ReturnValue' has a wrong offset!");

// Function OPP.RBNVComponent.IsBatteryLow
// 0x0001 (0x0001 - 0x0000)
struct RBNVComponent_IsBatteryLow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNVComponent_IsBatteryLow) == 0x000001, "Wrong alignment on RBNVComponent_IsBatteryLow");
static_assert(sizeof(RBNVComponent_IsBatteryLow) == 0x000001, "Wrong size on RBNVComponent_IsBatteryLow");
static_assert(offsetof(RBNVComponent_IsBatteryLow, ReturnValue) == 0x000000, "Member 'RBNVComponent_IsBatteryLow::ReturnValue' has a wrong offset!");

// Function OPP.RBNVComponent.IsNVOn
// 0x0001 (0x0001 - 0x0000)
struct RBNVComponent_IsNVOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBNVComponent_IsNVOn) == 0x000001, "Wrong alignment on RBNVComponent_IsNVOn");
static_assert(sizeof(RBNVComponent_IsNVOn) == 0x000001, "Wrong size on RBNVComponent_IsNVOn");
static_assert(offsetof(RBNVComponent_IsNVOn, ReturnValue) == 0x000000, "Member 'RBNVComponent_IsNVOn::ReturnValue' has a wrong offset!");

// Function OPP.RBObjectiveActorComponent.BP_ShouldIconBeForcedHidden
// 0x0001 (0x0001 - 0x0000)
struct RBObjectiveActorComponent_BP_ShouldIconBeForcedHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveActorComponent_BP_ShouldIconBeForcedHidden) == 0x000001, "Wrong alignment on RBObjectiveActorComponent_BP_ShouldIconBeForcedHidden");
static_assert(sizeof(RBObjectiveActorComponent_BP_ShouldIconBeForcedHidden) == 0x000001, "Wrong size on RBObjectiveActorComponent_BP_ShouldIconBeForcedHidden");
static_assert(offsetof(RBObjectiveActorComponent_BP_ShouldIconBeForcedHidden, ReturnValue) == 0x000000, "Member 'RBObjectiveActorComponent_BP_ShouldIconBeForcedHidden::ReturnValue' has a wrong offset!");

// Function OPP.RBObjectiveCoordinatorGroup.OnConcurrentCoordinatorStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBObjectiveCoordinatorGroup_OnConcurrentCoordinatorStateChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveCoordinatorState                    State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBObjectiveCoordinatorGroup_OnConcurrentCoordinatorStateChanged) == 0x000008, "Wrong alignment on RBObjectiveCoordinatorGroup_OnConcurrentCoordinatorStateChanged");
static_assert(sizeof(RBObjectiveCoordinatorGroup_OnConcurrentCoordinatorStateChanged) == 0x000010, "Wrong size on RBObjectiveCoordinatorGroup_OnConcurrentCoordinatorStateChanged");
static_assert(offsetof(RBObjectiveCoordinatorGroup_OnConcurrentCoordinatorStateChanged, Coordinator) == 0x000000, "Member 'RBObjectiveCoordinatorGroup_OnConcurrentCoordinatorStateChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(RBObjectiveCoordinatorGroup_OnConcurrentCoordinatorStateChanged, State) == 0x000008, "Member 'RBObjectiveCoordinatorGroup_OnConcurrentCoordinatorStateChanged::State' has a wrong offset!");

// Function OPP.RBObjectiveManager.BP_CompleteSingleObjective
// 0x0010 (0x0010 - 0x0000)
struct RBObjectiveManager_BP_CompleteSingleObjective final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Objective;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveManager_BP_CompleteSingleObjective) == 0x000008, "Wrong alignment on RBObjectiveManager_BP_CompleteSingleObjective");
static_assert(sizeof(RBObjectiveManager_BP_CompleteSingleObjective) == 0x000010, "Wrong size on RBObjectiveManager_BP_CompleteSingleObjective");
static_assert(offsetof(RBObjectiveManager_BP_CompleteSingleObjective, Player) == 0x000000, "Member 'RBObjectiveManager_BP_CompleteSingleObjective::Player' has a wrong offset!");
static_assert(offsetof(RBObjectiveManager_BP_CompleteSingleObjective, Objective) == 0x000008, "Member 'RBObjectiveManager_BP_CompleteSingleObjective::Objective' has a wrong offset!");

// Function OPP.RBObjectiveManager.BP_GetIntroObjectiveIcon
// 0x0008 (0x0008 - 0x0000)
struct RBObjectiveManager_BP_GetIntroObjectiveIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveManager_BP_GetIntroObjectiveIcon) == 0x000008, "Wrong alignment on RBObjectiveManager_BP_GetIntroObjectiveIcon");
static_assert(sizeof(RBObjectiveManager_BP_GetIntroObjectiveIcon) == 0x000008, "Wrong size on RBObjectiveManager_BP_GetIntroObjectiveIcon");
static_assert(offsetof(RBObjectiveManager_BP_GetIntroObjectiveIcon, ReturnValue) == 0x000000, "Member 'RBObjectiveManager_BP_GetIntroObjectiveIcon::ReturnValue' has a wrong offset!");

// Function OPP.RBObjectiveManager.BP_PlayObjectiveScreenAnim
// 0x0020 (0x0020 - 0x0000)
struct RBObjectiveManager_BP_PlayObjectiveScreenAnim final
{
public:
	struct FNarrativeScreenAnimationData          AnimData;                                          // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPlayIntro;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBObjectiveManager_BP_PlayObjectiveScreenAnim) == 0x000008, "Wrong alignment on RBObjectiveManager_BP_PlayObjectiveScreenAnim");
static_assert(sizeof(RBObjectiveManager_BP_PlayObjectiveScreenAnim) == 0x000020, "Wrong size on RBObjectiveManager_BP_PlayObjectiveScreenAnim");
static_assert(offsetof(RBObjectiveManager_BP_PlayObjectiveScreenAnim, AnimData) == 0x000000, "Member 'RBObjectiveManager_BP_PlayObjectiveScreenAnim::AnimData' has a wrong offset!");
static_assert(offsetof(RBObjectiveManager_BP_PlayObjectiveScreenAnim, bPlayIntro) == 0x000018, "Member 'RBObjectiveManager_BP_PlayObjectiveScreenAnim::bPlayIntro' has a wrong offset!");

// Function OPP.RBObjectiveManager.OnObjectiveCoordinatorStateChanged_Callback
// 0x0010 (0x0010 - 0x0000)
struct RBObjectiveManager_OnObjectiveCoordinatorStateChanged_Callback final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveCoordinatorState                    NewState;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBObjectiveManager_OnObjectiveCoordinatorStateChanged_Callback) == 0x000008, "Wrong alignment on RBObjectiveManager_OnObjectiveCoordinatorStateChanged_Callback");
static_assert(sizeof(RBObjectiveManager_OnObjectiveCoordinatorStateChanged_Callback) == 0x000010, "Wrong size on RBObjectiveManager_OnObjectiveCoordinatorStateChanged_Callback");
static_assert(offsetof(RBObjectiveManager_OnObjectiveCoordinatorStateChanged_Callback, Coordinator) == 0x000000, "Member 'RBObjectiveManager_OnObjectiveCoordinatorStateChanged_Callback::Coordinator' has a wrong offset!");
static_assert(offsetof(RBObjectiveManager_OnObjectiveCoordinatorStateChanged_Callback, NewState) == 0x000008, "Member 'RBObjectiveManager_OnObjectiveCoordinatorStateChanged_Callback::NewState' has a wrong offset!");

// Function OPP.RBObjectiveManager.OnStageReady
// 0x0050 (0x0050 - 0x0000)
struct RBObjectiveManager_OnStageReady final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveManager_OnStageReady) == 0x000008, "Wrong alignment on RBObjectiveManager_OnStageReady");
static_assert(sizeof(RBObjectiveManager_OnStageReady) == 0x000050, "Wrong size on RBObjectiveManager_OnStageReady");
static_assert(offsetof(RBObjectiveManager_OnStageReady, StageID) == 0x000000, "Member 'RBObjectiveManager_OnStageReady::StageID' has a wrong offset!");
static_assert(offsetof(RBObjectiveManager_OnStageReady, MissionID) == 0x000028, "Member 'RBObjectiveManager_OnStageReady::MissionID' has a wrong offset!");

// Function OPP.RBObjectiveManager.OnStageStarted
// 0x0050 (0x0050 - 0x0000)
struct RBObjectiveManager_OnStageStarted final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveManager_OnStageStarted) == 0x000008, "Wrong alignment on RBObjectiveManager_OnStageStarted");
static_assert(sizeof(RBObjectiveManager_OnStageStarted) == 0x000050, "Wrong size on RBObjectiveManager_OnStageStarted");
static_assert(offsetof(RBObjectiveManager_OnStageStarted, StageID) == 0x000000, "Member 'RBObjectiveManager_OnStageStarted::StageID' has a wrong offset!");
static_assert(offsetof(RBObjectiveManager_OnStageStarted, MissionID) == 0x000028, "Member 'RBObjectiveManager_OnStageStarted::MissionID' has a wrong offset!");

// Function OPP.RBObjectiveManager.BP_GetAllObjectiveCoordinators
// 0x0010 (0x0010 - 0x0000)
struct RBObjectiveManager_BP_GetAllObjectiveCoordinators final
{
public:
	TArray<class ARBBaseObjectiveCoordinator*>    OutCoordinators;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveManager_BP_GetAllObjectiveCoordinators) == 0x000008, "Wrong alignment on RBObjectiveManager_BP_GetAllObjectiveCoordinators");
static_assert(sizeof(RBObjectiveManager_BP_GetAllObjectiveCoordinators) == 0x000010, "Wrong size on RBObjectiveManager_BP_GetAllObjectiveCoordinators");
static_assert(offsetof(RBObjectiveManager_BP_GetAllObjectiveCoordinators, OutCoordinators) == 0x000000, "Member 'RBObjectiveManager_BP_GetAllObjectiveCoordinators::OutCoordinators' has a wrong offset!");

// Function OPP.RBObjectiveManager.BP_GetFormattedCurrentObjectiveString
// 0x0018 (0x0018 - 0x0000)
struct RBObjectiveManager_BP_GetFormattedCurrentObjectiveString final
{
public:
	int32                                         MaxCharPerLine;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveManager_BP_GetFormattedCurrentObjectiveString) == 0x000008, "Wrong alignment on RBObjectiveManager_BP_GetFormattedCurrentObjectiveString");
static_assert(sizeof(RBObjectiveManager_BP_GetFormattedCurrentObjectiveString) == 0x000018, "Wrong size on RBObjectiveManager_BP_GetFormattedCurrentObjectiveString");
static_assert(offsetof(RBObjectiveManager_BP_GetFormattedCurrentObjectiveString, MaxCharPerLine) == 0x000000, "Member 'RBObjectiveManager_BP_GetFormattedCurrentObjectiveString::MaxCharPerLine' has a wrong offset!");
static_assert(offsetof(RBObjectiveManager_BP_GetFormattedCurrentObjectiveString, ReturnValue) == 0x000008, "Member 'RBObjectiveManager_BP_GetFormattedCurrentObjectiveString::ReturnValue' has a wrong offset!");

// Function OPP.RBObjectiveManager.BP_GetStartedObjectiveCoordinators
// 0x0010 (0x0010 - 0x0000)
struct RBObjectiveManager_BP_GetStartedObjectiveCoordinators final
{
public:
	TArray<class ARBBaseObjectiveCoordinator*>    OutCoordinators;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveManager_BP_GetStartedObjectiveCoordinators) == 0x000008, "Wrong alignment on RBObjectiveManager_BP_GetStartedObjectiveCoordinators");
static_assert(sizeof(RBObjectiveManager_BP_GetStartedObjectiveCoordinators) == 0x000010, "Wrong size on RBObjectiveManager_BP_GetStartedObjectiveCoordinators");
static_assert(offsetof(RBObjectiveManager_BP_GetStartedObjectiveCoordinators, OutCoordinators) == 0x000000, "Member 'RBObjectiveManager_BP_GetStartedObjectiveCoordinators::OutCoordinators' has a wrong offset!");

// Function OPP.RBObjectiveManager.BP_HasStartedMainObjective
// 0x0001 (0x0001 - 0x0000)
struct RBObjectiveManager_BP_HasStartedMainObjective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveManager_BP_HasStartedMainObjective) == 0x000001, "Wrong alignment on RBObjectiveManager_BP_HasStartedMainObjective");
static_assert(sizeof(RBObjectiveManager_BP_HasStartedMainObjective) == 0x000001, "Wrong size on RBObjectiveManager_BP_HasStartedMainObjective");
static_assert(offsetof(RBObjectiveManager_BP_HasStartedMainObjective, ReturnValue) == 0x000000, "Member 'RBObjectiveManager_BP_HasStartedMainObjective::ReturnValue' has a wrong offset!");

// Function OPP.RBObjectiveManager.GetCurrentQuestItemLimit
// 0x0004 (0x0004 - 0x0000)
struct RBObjectiveManager_GetCurrentQuestItemLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveManager_GetCurrentQuestItemLimit) == 0x000004, "Wrong alignment on RBObjectiveManager_GetCurrentQuestItemLimit");
static_assert(sizeof(RBObjectiveManager_GetCurrentQuestItemLimit) == 0x000004, "Wrong size on RBObjectiveManager_GetCurrentQuestItemLimit");
static_assert(offsetof(RBObjectiveManager_GetCurrentQuestItemLimit, ReturnValue) == 0x000000, "Member 'RBObjectiveManager_GetCurrentQuestItemLimit::ReturnValue' has a wrong offset!");

// Function OPP.RBObjectiveRandomizable.GetObjectiveTypeIndex
// 0x0004 (0x0004 - 0x0000)
struct RBObjectiveRandomizable_GetObjectiveTypeIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveRandomizable_GetObjectiveTypeIndex) == 0x000004, "Wrong alignment on RBObjectiveRandomizable_GetObjectiveTypeIndex");
static_assert(sizeof(RBObjectiveRandomizable_GetObjectiveTypeIndex) == 0x000004, "Wrong size on RBObjectiveRandomizable_GetObjectiveTypeIndex");
static_assert(offsetof(RBObjectiveRandomizable_GetObjectiveTypeIndex, ReturnValue) == 0x000000, "Member 'RBObjectiveRandomizable_GetObjectiveTypeIndex::ReturnValue' has a wrong offset!");

// Function OPP.RBObjectiveRandomizable.ShouldDiscardOtherObjectiveActorForRandomization
// 0x0010 (0x0010 - 0x0000)
struct RBObjectiveRandomizable_ShouldDiscardOtherObjectiveActorForRandomization final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C7[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBObjectiveRandomizable_ShouldDiscardOtherObjectiveActorForRandomization) == 0x000008, "Wrong alignment on RBObjectiveRandomizable_ShouldDiscardOtherObjectiveActorForRandomization");
static_assert(sizeof(RBObjectiveRandomizable_ShouldDiscardOtherObjectiveActorForRandomization) == 0x000010, "Wrong size on RBObjectiveRandomizable_ShouldDiscardOtherObjectiveActorForRandomization");
static_assert(offsetof(RBObjectiveRandomizable_ShouldDiscardOtherObjectiveActorForRandomization, Actor) == 0x000000, "Member 'RBObjectiveRandomizable_ShouldDiscardOtherObjectiveActorForRandomization::Actor' has a wrong offset!");
static_assert(offsetof(RBObjectiveRandomizable_ShouldDiscardOtherObjectiveActorForRandomization, ReturnValue) == 0x000008, "Member 'RBObjectiveRandomizable_ShouldDiscardOtherObjectiveActorForRandomization::ReturnValue' has a wrong offset!");

// Function OPP.RBObjectiveWidgetBase.Event_IsMakingPositiveProgress
// 0x0001 (0x0001 - 0x0000)
struct RBObjectiveWidgetBase_Event_IsMakingPositiveProgress final
{
public:
	bool                                          IsMakingPositiveProgress;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveWidgetBase_Event_IsMakingPositiveProgress) == 0x000001, "Wrong alignment on RBObjectiveWidgetBase_Event_IsMakingPositiveProgress");
static_assert(sizeof(RBObjectiveWidgetBase_Event_IsMakingPositiveProgress) == 0x000001, "Wrong size on RBObjectiveWidgetBase_Event_IsMakingPositiveProgress");
static_assert(offsetof(RBObjectiveWidgetBase_Event_IsMakingPositiveProgress, IsMakingPositiveProgress) == 0x000000, "Member 'RBObjectiveWidgetBase_Event_IsMakingPositiveProgress::IsMakingPositiveProgress' has a wrong offset!");

// Function OPP.RBObjectiveWidgetBase.Event_ProgressChanged
// 0x0028 (0x0028 - 0x0000)
struct RBObjectiveWidgetBase_Event_ProgressChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPositiveProgress;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CA[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ObjectiveText;                                     // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveWidgetBase_Event_ProgressChanged) == 0x000008, "Wrong alignment on RBObjectiveWidgetBase_Event_ProgressChanged");
static_assert(sizeof(RBObjectiveWidgetBase_Event_ProgressChanged) == 0x000028, "Wrong size on RBObjectiveWidgetBase_Event_ProgressChanged");
static_assert(offsetof(RBObjectiveWidgetBase_Event_ProgressChanged, Coordinator) == 0x000000, "Member 'RBObjectiveWidgetBase_Event_ProgressChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(RBObjectiveWidgetBase_Event_ProgressChanged, Progress) == 0x000008, "Member 'RBObjectiveWidgetBase_Event_ProgressChanged::Progress' has a wrong offset!");
static_assert(offsetof(RBObjectiveWidgetBase_Event_ProgressChanged, IsPositiveProgress) == 0x00000C, "Member 'RBObjectiveWidgetBase_Event_ProgressChanged::IsPositiveProgress' has a wrong offset!");
static_assert(offsetof(RBObjectiveWidgetBase_Event_ProgressChanged, ObjectiveText) == 0x000010, "Member 'RBObjectiveWidgetBase_Event_ProgressChanged::ObjectiveText' has a wrong offset!");

// Function OPP.RBObjectiveWidgetBase.OnCompletionInProgressChanged
// 0x0010 (0x0010 - 0x0000)
struct RBObjectiveWidgetBase_OnCompletionInProgressChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsProgressionInProgress;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCompletedByLocalPlayer;                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CB[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBObjectiveWidgetBase_OnCompletionInProgressChanged) == 0x000008, "Wrong alignment on RBObjectiveWidgetBase_OnCompletionInProgressChanged");
static_assert(sizeof(RBObjectiveWidgetBase_OnCompletionInProgressChanged) == 0x000010, "Wrong size on RBObjectiveWidgetBase_OnCompletionInProgressChanged");
static_assert(offsetof(RBObjectiveWidgetBase_OnCompletionInProgressChanged, Coordinator) == 0x000000, "Member 'RBObjectiveWidgetBase_OnCompletionInProgressChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(RBObjectiveWidgetBase_OnCompletionInProgressChanged, IsProgressionInProgress) == 0x000008, "Member 'RBObjectiveWidgetBase_OnCompletionInProgressChanged::IsProgressionInProgress' has a wrong offset!");
static_assert(offsetof(RBObjectiveWidgetBase_OnCompletionInProgressChanged, IsCompletedByLocalPlayer) == 0x000009, "Member 'RBObjectiveWidgetBase_OnCompletionInProgressChanged::IsCompletedByLocalPlayer' has a wrong offset!");

// Function OPP.RBObjectiveWidgetBase.OnObjectiveCoordinatorStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBObjectiveWidgetBase_OnObjectiveCoordinatorStateChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveCoordinatorState                    State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21CC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBObjectiveWidgetBase_OnObjectiveCoordinatorStateChanged) == 0x000008, "Wrong alignment on RBObjectiveWidgetBase_OnObjectiveCoordinatorStateChanged");
static_assert(sizeof(RBObjectiveWidgetBase_OnObjectiveCoordinatorStateChanged) == 0x000010, "Wrong size on RBObjectiveWidgetBase_OnObjectiveCoordinatorStateChanged");
static_assert(offsetof(RBObjectiveWidgetBase_OnObjectiveCoordinatorStateChanged, Coordinator) == 0x000000, "Member 'RBObjectiveWidgetBase_OnObjectiveCoordinatorStateChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(RBObjectiveWidgetBase_OnObjectiveCoordinatorStateChanged, State) == 0x000008, "Member 'RBObjectiveWidgetBase_OnObjectiveCoordinatorStateChanged::State' has a wrong offset!");

// Function OPP.RBObjectiveWidgetBase.OnSingleObjectiveCompleted
// 0x0018 (0x0018 - 0x0000)
struct RBObjectiveWidgetBase_OnSingleObjectiveCompleted final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Objective;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveWidgetBase_OnSingleObjectiveCompleted) == 0x000008, "Wrong alignment on RBObjectiveWidgetBase_OnSingleObjectiveCompleted");
static_assert(sizeof(RBObjectiveWidgetBase_OnSingleObjectiveCompleted) == 0x000018, "Wrong size on RBObjectiveWidgetBase_OnSingleObjectiveCompleted");
static_assert(offsetof(RBObjectiveWidgetBase_OnSingleObjectiveCompleted, Coordinator) == 0x000000, "Member 'RBObjectiveWidgetBase_OnSingleObjectiveCompleted::Coordinator' has a wrong offset!");
static_assert(offsetof(RBObjectiveWidgetBase_OnSingleObjectiveCompleted, Player) == 0x000008, "Member 'RBObjectiveWidgetBase_OnSingleObjectiveCompleted::Player' has a wrong offset!");
static_assert(offsetof(RBObjectiveWidgetBase_OnSingleObjectiveCompleted, Objective) == 0x000010, "Member 'RBObjectiveWidgetBase_OnSingleObjectiveCompleted::Objective' has a wrong offset!");

// Function OPP.RBObjectiveWidgetBase.SetObjectiveCoordinator
// 0x0008 (0x0008 - 0x0000)
struct RBObjectiveWidgetBase_SetObjectiveCoordinator final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBObjectiveWidgetBase_SetObjectiveCoordinator) == 0x000008, "Wrong alignment on RBObjectiveWidgetBase_SetObjectiveCoordinator");
static_assert(sizeof(RBObjectiveWidgetBase_SetObjectiveCoordinator) == 0x000008, "Wrong size on RBObjectiveWidgetBase_SetObjectiveCoordinator");
static_assert(offsetof(RBObjectiveWidgetBase_SetObjectiveCoordinator, Coordinator) == 0x000000, "Member 'RBObjectiveWidgetBase_SetObjectiveCoordinator::Coordinator' has a wrong offset!");

// Function OPP.RBOperatableForObjectiveTrigger.GetLinkedTriggerable
// 0x0008 (0x0008 - 0x0000)
struct RBOperatableForObjectiveTrigger_GetLinkedTriggerable final
{
public:
	class ARBTriggerable*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableForObjectiveTrigger_GetLinkedTriggerable) == 0x000008, "Wrong alignment on RBOperatableForObjectiveTrigger_GetLinkedTriggerable");
static_assert(sizeof(RBOperatableForObjectiveTrigger_GetLinkedTriggerable) == 0x000008, "Wrong size on RBOperatableForObjectiveTrigger_GetLinkedTriggerable");
static_assert(offsetof(RBOperatableForObjectiveTrigger_GetLinkedTriggerable, ReturnValue) == 0x000000, "Member 'RBOperatableForObjectiveTrigger_GetLinkedTriggerable::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatableTriggerObjectiveCoordinator.OnPlayerCompletedOperatable
// 0x0010 (0x0010 - 0x0000)
struct RBOperatableTriggerObjectiveCoordinator_OnPlayerCompletedOperatable final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBOperatable*                          Operatable;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableTriggerObjectiveCoordinator_OnPlayerCompletedOperatable) == 0x000008, "Wrong alignment on RBOperatableTriggerObjectiveCoordinator_OnPlayerCompletedOperatable");
static_assert(sizeof(RBOperatableTriggerObjectiveCoordinator_OnPlayerCompletedOperatable) == 0x000010, "Wrong size on RBOperatableTriggerObjectiveCoordinator_OnPlayerCompletedOperatable");
static_assert(offsetof(RBOperatableTriggerObjectiveCoordinator_OnPlayerCompletedOperatable, IsOn) == 0x000000, "Member 'RBOperatableTriggerObjectiveCoordinator_OnPlayerCompletedOperatable::IsOn' has a wrong offset!");
static_assert(offsetof(RBOperatableTriggerObjectiveCoordinator_OnPlayerCompletedOperatable, Operatable) == 0x000008, "Member 'RBOperatableTriggerObjectiveCoordinator_OnPlayerCompletedOperatable::Operatable' has a wrong offset!");

// Function OPP.RBOperatableTriggerObjectiveCoordinator.GetLinkedTriggerable
// 0x0010 (0x0010 - 0x0000)
struct RBOperatableTriggerObjectiveCoordinator_GetLinkedTriggerable final
{
public:
	class AActor*                                 Operatable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBTriggerable*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableTriggerObjectiveCoordinator_GetLinkedTriggerable) == 0x000008, "Wrong alignment on RBOperatableTriggerObjectiveCoordinator_GetLinkedTriggerable");
static_assert(sizeof(RBOperatableTriggerObjectiveCoordinator_GetLinkedTriggerable) == 0x000010, "Wrong size on RBOperatableTriggerObjectiveCoordinator_GetLinkedTriggerable");
static_assert(offsetof(RBOperatableTriggerObjectiveCoordinator_GetLinkedTriggerable, Operatable) == 0x000000, "Member 'RBOperatableTriggerObjectiveCoordinator_GetLinkedTriggerable::Operatable' has a wrong offset!");
static_assert(offsetof(RBOperatableTriggerObjectiveCoordinator_GetLinkedTriggerable, ReturnValue) == 0x000008, "Member 'RBOperatableTriggerObjectiveCoordinator_GetLinkedTriggerable::ReturnValue' has a wrong offset!");

// Function OPP.RBOperatableTriggerObjectiveCoordinator.GetRemainingOperatablesForTriggerable
// 0x0018 (0x0018 - 0x0000)
struct RBOperatableTriggerObjectiveCoordinator_GetRemainingOperatablesForTriggerable final
{
public:
	class ARBTriggerable*                         Triggerable;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutOperatables;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOperatableTriggerObjectiveCoordinator_GetRemainingOperatablesForTriggerable) == 0x000008, "Wrong alignment on RBOperatableTriggerObjectiveCoordinator_GetRemainingOperatablesForTriggerable");
static_assert(sizeof(RBOperatableTriggerObjectiveCoordinator_GetRemainingOperatablesForTriggerable) == 0x000018, "Wrong size on RBOperatableTriggerObjectiveCoordinator_GetRemainingOperatablesForTriggerable");
static_assert(offsetof(RBOperatableTriggerObjectiveCoordinator_GetRemainingOperatablesForTriggerable, Triggerable) == 0x000000, "Member 'RBOperatableTriggerObjectiveCoordinator_GetRemainingOperatablesForTriggerable::Triggerable' has a wrong offset!");
static_assert(offsetof(RBOperatableTriggerObjectiveCoordinator_GetRemainingOperatablesForTriggerable, OutOperatables) == 0x000008, "Member 'RBOperatableTriggerObjectiveCoordinator_GetRemainingOperatablesForTriggerable::OutOperatables' has a wrong offset!");

// Function OPP.RBOptionsMenu.CanEditCrossplaySetting
// 0x0001 (0x0001 - 0x0000)
struct RBOptionsMenu_CanEditCrossplaySetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOptionsMenu_CanEditCrossplaySetting) == 0x000001, "Wrong alignment on RBOptionsMenu_CanEditCrossplaySetting");
static_assert(sizeof(RBOptionsMenu_CanEditCrossplaySetting) == 0x000001, "Wrong size on RBOptionsMenu_CanEditCrossplaySetting");
static_assert(offsetof(RBOptionsMenu_CanEditCrossplaySetting, ReturnValue) == 0x000000, "Member 'RBOptionsMenu_CanEditCrossplaySetting::ReturnValue' has a wrong offset!");

// Function OPP.RBOptionsMenu.CanViewCrossplaySetting
// 0x0001 (0x0001 - 0x0000)
struct RBOptionsMenu_CanViewCrossplaySetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOptionsMenu_CanViewCrossplaySetting) == 0x000001, "Wrong alignment on RBOptionsMenu_CanViewCrossplaySetting");
static_assert(sizeof(RBOptionsMenu_CanViewCrossplaySetting) == 0x000001, "Wrong size on RBOptionsMenu_CanViewCrossplaySetting");
static_assert(offsetof(RBOptionsMenu_CanViewCrossplaySetting, ReturnValue) == 0x000000, "Member 'RBOptionsMenu_CanViewCrossplaySetting::ReturnValue' has a wrong offset!");

// Function OPP.RBOverheadVoiceChatWidget.Init
// 0x0010 (0x0010 - 0x0000)
struct RBOverheadVoiceChatWidget_Init final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOverheadVoiceChatWidget_Init) == 0x000004, "Wrong alignment on RBOverheadVoiceChatWidget_Init");
static_assert(sizeof(RBOverheadVoiceChatWidget_Init) == 0x000010, "Wrong size on RBOverheadVoiceChatWidget_Init");
static_assert(offsetof(RBOverheadVoiceChatWidget_Init, ProfileId) == 0x000000, "Member 'RBOverheadVoiceChatWidget_Init::ProfileId' has a wrong offset!");

// Function OPP.RBOverheadVoiceChatWidget.OnMicrophoneVolumeChanged
// 0x0004 (0x0004 - 0x0000)
struct RBOverheadVoiceChatWidget_OnMicrophoneVolumeChanged final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOverheadVoiceChatWidget_OnMicrophoneVolumeChanged) == 0x000004, "Wrong alignment on RBOverheadVoiceChatWidget_OnMicrophoneVolumeChanged");
static_assert(sizeof(RBOverheadVoiceChatWidget_OnMicrophoneVolumeChanged) == 0x000004, "Wrong size on RBOverheadVoiceChatWidget_OnMicrophoneVolumeChanged");
static_assert(offsetof(RBOverheadVoiceChatWidget_OnMicrophoneVolumeChanged, Volume) == 0x000000, "Member 'RBOverheadVoiceChatWidget_OnMicrophoneVolumeChanged::Volume' has a wrong offset!");

// Function OPP.RBOverheadVoiceChatWidget.OnPlayerVoiceChatVolumeChanged
// 0x0014 (0x0014 - 0x0000)
struct RBOverheadVoiceChatWidget_OnPlayerVoiceChatVolumeChanged final
{
public:
	struct FProfileId                             ProfileId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOverheadVoiceChatWidget_OnPlayerVoiceChatVolumeChanged) == 0x000004, "Wrong alignment on RBOverheadVoiceChatWidget_OnPlayerVoiceChatVolumeChanged");
static_assert(sizeof(RBOverheadVoiceChatWidget_OnPlayerVoiceChatVolumeChanged) == 0x000014, "Wrong size on RBOverheadVoiceChatWidget_OnPlayerVoiceChatVolumeChanged");
static_assert(offsetof(RBOverheadVoiceChatWidget_OnPlayerVoiceChatVolumeChanged, ProfileId) == 0x000000, "Member 'RBOverheadVoiceChatWidget_OnPlayerVoiceChatVolumeChanged::ProfileId' has a wrong offset!");
static_assert(offsetof(RBOverheadVoiceChatWidget_OnPlayerVoiceChatVolumeChanged, Volume) == 0x000010, "Member 'RBOverheadVoiceChatWidget_OnPlayerVoiceChatVolumeChanged::Volume' has a wrong offset!");

// Function OPP.RBOverheadVoiceChatWidget.HasVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBOverheadVoiceChatWidget_HasVoiceChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOverheadVoiceChatWidget_HasVoiceChatEnabled) == 0x000001, "Wrong alignment on RBOverheadVoiceChatWidget_HasVoiceChatEnabled");
static_assert(sizeof(RBOverheadVoiceChatWidget_HasVoiceChatEnabled) == 0x000001, "Wrong size on RBOverheadVoiceChatWidget_HasVoiceChatEnabled");
static_assert(offsetof(RBOverheadVoiceChatWidget_HasVoiceChatEnabled, ReturnValue) == 0x000000, "Member 'RBOverheadVoiceChatWidget_HasVoiceChatEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBOverheadVoiceChatWidget.HasVoiceChatPrivilege
// 0x0001 (0x0001 - 0x0000)
struct RBOverheadVoiceChatWidget_HasVoiceChatPrivilege final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOverheadVoiceChatWidget_HasVoiceChatPrivilege) == 0x000001, "Wrong alignment on RBOverheadVoiceChatWidget_HasVoiceChatPrivilege");
static_assert(sizeof(RBOverheadVoiceChatWidget_HasVoiceChatPrivilege) == 0x000001, "Wrong size on RBOverheadVoiceChatWidget_HasVoiceChatPrivilege");
static_assert(offsetof(RBOverheadVoiceChatWidget_HasVoiceChatPrivilege, ReturnValue) == 0x000000, "Member 'RBOverheadVoiceChatWidget_HasVoiceChatPrivilege::ReturnValue' has a wrong offset!");

// Function OPP.RBOverheadVoiceChatWidget.IsBlocked
// 0x0001 (0x0001 - 0x0000)
struct RBOverheadVoiceChatWidget_IsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOverheadVoiceChatWidget_IsBlocked) == 0x000001, "Wrong alignment on RBOverheadVoiceChatWidget_IsBlocked");
static_assert(sizeof(RBOverheadVoiceChatWidget_IsBlocked) == 0x000001, "Wrong size on RBOverheadVoiceChatWidget_IsBlocked");
static_assert(offsetof(RBOverheadVoiceChatWidget_IsBlocked, ReturnValue) == 0x000000, "Member 'RBOverheadVoiceChatWidget_IsBlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBOverheadVoiceChatWidget.IsMuted
// 0x0001 (0x0001 - 0x0000)
struct RBOverheadVoiceChatWidget_IsMuted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOverheadVoiceChatWidget_IsMuted) == 0x000001, "Wrong alignment on RBOverheadVoiceChatWidget_IsMuted");
static_assert(sizeof(RBOverheadVoiceChatWidget_IsMuted) == 0x000001, "Wrong size on RBOverheadVoiceChatWidget_IsMuted");
static_assert(offsetof(RBOverheadVoiceChatWidget_IsMuted, ReturnValue) == 0x000000, "Member 'RBOverheadVoiceChatWidget_IsMuted::ReturnValue' has a wrong offset!");

// Function OPP.RBOverheadVoiceChatWidget.IsSpeaking
// 0x0001 (0x0001 - 0x0000)
struct RBOverheadVoiceChatWidget_IsSpeaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOverheadVoiceChatWidget_IsSpeaking) == 0x000001, "Wrong alignment on RBOverheadVoiceChatWidget_IsSpeaking");
static_assert(sizeof(RBOverheadVoiceChatWidget_IsSpeaking) == 0x000001, "Wrong size on RBOverheadVoiceChatWidget_IsSpeaking");
static_assert(offsetof(RBOverheadVoiceChatWidget_IsSpeaking, ReturnValue) == 0x000000, "Member 'RBOverheadVoiceChatWidget_IsSpeaking::ReturnValue' has a wrong offset!");

// Function OPP.RBOverheadVoiceChatWidget.IsVoiceChatConnected
// 0x0001 (0x0001 - 0x0000)
struct RBOverheadVoiceChatWidget_IsVoiceChatConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBOverheadVoiceChatWidget_IsVoiceChatConnected) == 0x000001, "Wrong alignment on RBOverheadVoiceChatWidget_IsVoiceChatConnected");
static_assert(sizeof(RBOverheadVoiceChatWidget_IsVoiceChatConnected) == 0x000001, "Wrong size on RBOverheadVoiceChatWidget_IsVoiceChatConnected");
static_assert(offsetof(RBOverheadVoiceChatWidget_IsVoiceChatConnected, ReturnValue) == 0x000000, "Member 'RBOverheadVoiceChatWidget_IsVoiceChatConnected::ReturnValue' has a wrong offset!");

// Function OPP.RBPasscodeButtonComponent.BP_IsPressed
// 0x0001 (0x0001 - 0x0000)
struct RBPasscodeButtonComponent_BP_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPasscodeButtonComponent_BP_IsPressed) == 0x000001, "Wrong alignment on RBPasscodeButtonComponent_BP_IsPressed");
static_assert(sizeof(RBPasscodeButtonComponent_BP_IsPressed) == 0x000001, "Wrong size on RBPasscodeButtonComponent_BP_IsPressed");
static_assert(offsetof(RBPasscodeButtonComponent_BP_IsPressed, ReturnValue) == 0x000000, "Member 'RBPasscodeButtonComponent_BP_IsPressed::ReturnValue' has a wrong offset!");

// Function OPP.RBPasscodeNumberDecalActor.Event_OnActiveChanged
// 0x0001 (0x0001 - 0x0000)
struct RBPasscodeNumberDecalActor_Event_OnActiveChanged final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPasscodeNumberDecalActor_Event_OnActiveChanged) == 0x000001, "Wrong alignment on RBPasscodeNumberDecalActor_Event_OnActiveChanged");
static_assert(sizeof(RBPasscodeNumberDecalActor_Event_OnActiveChanged) == 0x000001, "Wrong size on RBPasscodeNumberDecalActor_Event_OnActiveChanged");
static_assert(offsetof(RBPasscodeNumberDecalActor_Event_OnActiveChanged, bActive) == 0x000000, "Member 'RBPasscodeNumberDecalActor_Event_OnActiveChanged::bActive' has a wrong offset!");

// Function OPP.RBPasscodeNumberDecalActor.Event_OnSelected
// 0x0001 (0x0001 - 0x0000)
struct RBPasscodeNumberDecalActor_Event_OnSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPasscodeNumberDecalActor_Event_OnSelected) == 0x000001, "Wrong alignment on RBPasscodeNumberDecalActor_Event_OnSelected");
static_assert(sizeof(RBPasscodeNumberDecalActor_Event_OnSelected) == 0x000001, "Wrong size on RBPasscodeNumberDecalActor_Event_OnSelected");
static_assert(offsetof(RBPasscodeNumberDecalActor_Event_OnSelected, bSelected) == 0x000000, "Member 'RBPasscodeNumberDecalActor_Event_OnSelected::bSelected' has a wrong offset!");

// Function OPP.RBPasscodeNumberDecalActor.GetLinkedPuzzleRoom
// 0x0008 (0x0008 - 0x0000)
struct RBPasscodeNumberDecalActor_GetLinkedPuzzleRoom final
{
public:
	class URBPuzzleRoomComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPasscodeNumberDecalActor_GetLinkedPuzzleRoom) == 0x000008, "Wrong alignment on RBPasscodeNumberDecalActor_GetLinkedPuzzleRoom");
static_assert(sizeof(RBPasscodeNumberDecalActor_GetLinkedPuzzleRoom) == 0x000008, "Wrong size on RBPasscodeNumberDecalActor_GetLinkedPuzzleRoom");
static_assert(offsetof(RBPasscodeNumberDecalActor_GetLinkedPuzzleRoom, ReturnValue) == 0x000000, "Member 'RBPasscodeNumberDecalActor_GetLinkedPuzzleRoom::ReturnValue' has a wrong offset!");

// Function OPP.RBPasscodeNumberDecalActor.IsPasscodeDebugging
// 0x0001 (0x0001 - 0x0000)
struct RBPasscodeNumberDecalActor_IsPasscodeDebugging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPasscodeNumberDecalActor_IsPasscodeDebugging) == 0x000001, "Wrong alignment on RBPasscodeNumberDecalActor_IsPasscodeDebugging");
static_assert(sizeof(RBPasscodeNumberDecalActor_IsPasscodeDebugging) == 0x000001, "Wrong size on RBPasscodeNumberDecalActor_IsPasscodeDebugging");
static_assert(offsetof(RBPasscodeNumberDecalActor_IsPasscodeDebugging, ReturnValue) == 0x000000, "Member 'RBPasscodeNumberDecalActor_IsPasscodeDebugging::ReturnValue' has a wrong offset!");

// Function OPP.RBPasscodePadComponent.BP_SetOnStateOnAllButtons
// 0x0001 (0x0001 - 0x0000)
struct RBPasscodePadComponent_BP_SetOnStateOnAllButtons final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPasscodePadComponent_BP_SetOnStateOnAllButtons) == 0x000001, "Wrong alignment on RBPasscodePadComponent_BP_SetOnStateOnAllButtons");
static_assert(sizeof(RBPasscodePadComponent_BP_SetOnStateOnAllButtons) == 0x000001, "Wrong size on RBPasscodePadComponent_BP_SetOnStateOnAllButtons");
static_assert(offsetof(RBPasscodePadComponent_BP_SetOnStateOnAllButtons, bOn) == 0x000000, "Member 'RBPasscodePadComponent_BP_SetOnStateOnAllButtons::bOn' has a wrong offset!");

// Function OPP.RBPasscodePadComponent.Multicast_OnPasscodePadValidation
// 0x0001 (0x0001 - 0x0000)
struct RBPasscodePadComponent_Multicast_OnPasscodePadValidation final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPasscodePadComponent_Multicast_OnPasscodePadValidation) == 0x000001, "Wrong alignment on RBPasscodePadComponent_Multicast_OnPasscodePadValidation");
static_assert(sizeof(RBPasscodePadComponent_Multicast_OnPasscodePadValidation) == 0x000001, "Wrong size on RBPasscodePadComponent_Multicast_OnPasscodePadValidation");
static_assert(offsetof(RBPasscodePadComponent_Multicast_OnPasscodePadValidation, bValid) == 0x000000, "Member 'RBPasscodePadComponent_Multicast_OnPasscodePadValidation::bValid' has a wrong offset!");

// Function OPP.RBPasscodePadComponent.BP_GetPuzzleRoomTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct RBPasscodePadComponent_BP_GetPuzzleRoomTimeLeft final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPasscodePadComponent_BP_GetPuzzleRoomTimeLeft) == 0x000004, "Wrong alignment on RBPasscodePadComponent_BP_GetPuzzleRoomTimeLeft");
static_assert(sizeof(RBPasscodePadComponent_BP_GetPuzzleRoomTimeLeft) == 0x000004, "Wrong size on RBPasscodePadComponent_BP_GetPuzzleRoomTimeLeft");
static_assert(offsetof(RBPasscodePadComponent_BP_GetPuzzleRoomTimeLeft, ReturnValue) == 0x000000, "Member 'RBPasscodePadComponent_BP_GetPuzzleRoomTimeLeft::ReturnValue' has a wrong offset!");

// Function OPP.RBPasscodePadComponent.IsSolved_Server
// 0x0001 (0x0001 - 0x0000)
struct RBPasscodePadComponent_IsSolved_Server final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPasscodePadComponent_IsSolved_Server) == 0x000001, "Wrong alignment on RBPasscodePadComponent_IsSolved_Server");
static_assert(sizeof(RBPasscodePadComponent_IsSolved_Server) == 0x000001, "Wrong size on RBPasscodePadComponent_IsSolved_Server");
static_assert(offsetof(RBPasscodePadComponent_IsSolved_Server, ReturnValue) == 0x000000, "Member 'RBPasscodePadComponent_IsSolved_Server::ReturnValue' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.BP_ForceArmedState
// 0x0001 (0x0001 - 0x0000)
struct RBWireTriggerTrap_BP_ForceArmedState final
{
public:
	bool                                          bArmed;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWireTriggerTrap_BP_ForceArmedState) == 0x000001, "Wrong alignment on RBWireTriggerTrap_BP_ForceArmedState");
static_assert(sizeof(RBWireTriggerTrap_BP_ForceArmedState) == 0x000001, "Wrong size on RBWireTriggerTrap_BP_ForceArmedState");
static_assert(offsetof(RBWireTriggerTrap_BP_ForceArmedState, bArmed) == 0x000000, "Member 'RBWireTriggerTrap_BP_ForceArmedState::bArmed' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.BP_LinkTrap
// 0x0008 (0x0008 - 0x0000)
struct RBWireTriggerTrap_BP_LinkTrap final
{
public:
	class ARBTrapTriggerable*                     Trap;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWireTriggerTrap_BP_LinkTrap) == 0x000008, "Wrong alignment on RBWireTriggerTrap_BP_LinkTrap");
static_assert(sizeof(RBWireTriggerTrap_BP_LinkTrap) == 0x000008, "Wrong size on RBWireTriggerTrap_BP_LinkTrap");
static_assert(offsetof(RBWireTriggerTrap_BP_LinkTrap, Trap) == 0x000000, "Member 'RBWireTriggerTrap_BP_LinkTrap::Trap' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.OnLinkDoorInteraction
// 0x0010 (0x0010 - 0x0000)
struct RBWireTriggerTrap_OnLinkDoorInteraction final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpening;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBWireTriggerTrap_OnLinkDoorInteraction) == 0x000008, "Wrong alignment on RBWireTriggerTrap_OnLinkDoorInteraction");
static_assert(sizeof(RBWireTriggerTrap_OnLinkDoorInteraction) == 0x000010, "Wrong size on RBWireTriggerTrap_OnLinkDoorInteraction");
static_assert(offsetof(RBWireTriggerTrap_OnLinkDoorInteraction, Pawn) == 0x000000, "Member 'RBWireTriggerTrap_OnLinkDoorInteraction::Pawn' has a wrong offset!");
static_assert(offsetof(RBWireTriggerTrap_OnLinkDoorInteraction, bOpening) == 0x000008, "Member 'RBWireTriggerTrap_OnLinkDoorInteraction::bOpening' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.OnLinkedDoorAction
// 0x0010 (0x0010 - 0x0000)
struct RBWireTriggerTrap_OnLinkedDoorAction final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDoorActionType                               ActionType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBWireTriggerTrap_OnLinkedDoorAction) == 0x000008, "Wrong alignment on RBWireTriggerTrap_OnLinkedDoorAction");
static_assert(sizeof(RBWireTriggerTrap_OnLinkedDoorAction) == 0x000010, "Wrong size on RBWireTriggerTrap_OnLinkedDoorAction");
static_assert(offsetof(RBWireTriggerTrap_OnLinkedDoorAction, Pawn) == 0x000000, "Member 'RBWireTriggerTrap_OnLinkedDoorAction::Pawn' has a wrong offset!");
static_assert(offsetof(RBWireTriggerTrap_OnLinkedDoorAction, ActionType) == 0x000008, "Member 'RBWireTriggerTrap_OnLinkedDoorAction::ActionType' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.SetIsTriggered
// 0x0001 (0x0001 - 0x0000)
struct RBWireTriggerTrap_SetIsTriggered final
{
public:
	bool                                          bInIsTriggered;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWireTriggerTrap_SetIsTriggered) == 0x000001, "Wrong alignment on RBWireTriggerTrap_SetIsTriggered");
static_assert(sizeof(RBWireTriggerTrap_SetIsTriggered) == 0x000001, "Wrong size on RBWireTriggerTrap_SetIsTriggered");
static_assert(offsetof(RBWireTriggerTrap_SetIsTriggered, bInIsTriggered) == 0x000000, "Member 'RBWireTriggerTrap_SetIsTriggered::bInIsTriggered' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.BP_IsTriggererOnWrongSide
// 0x0010 (0x0010 - 0x0000)
struct RBWireTriggerTrap_BP_IsTriggererOnWrongSide final
{
public:
	class ARBPawn*                                OutTriggerer;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutIsOnWrongSide;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBWireTriggerTrap_BP_IsTriggererOnWrongSide) == 0x000008, "Wrong alignment on RBWireTriggerTrap_BP_IsTriggererOnWrongSide");
static_assert(sizeof(RBWireTriggerTrap_BP_IsTriggererOnWrongSide) == 0x000010, "Wrong size on RBWireTriggerTrap_BP_IsTriggererOnWrongSide");
static_assert(offsetof(RBWireTriggerTrap_BP_IsTriggererOnWrongSide, OutTriggerer) == 0x000000, "Member 'RBWireTriggerTrap_BP_IsTriggererOnWrongSide::OutTriggerer' has a wrong offset!");
static_assert(offsetof(RBWireTriggerTrap_BP_IsTriggererOnWrongSide, OutIsOnWrongSide) == 0x000008, "Member 'RBWireTriggerTrap_BP_IsTriggererOnWrongSide::OutIsOnWrongSide' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.GetIsArmed
// 0x0001 (0x0001 - 0x0000)
struct RBWireTriggerTrap_GetIsArmed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWireTriggerTrap_GetIsArmed) == 0x000001, "Wrong alignment on RBWireTriggerTrap_GetIsArmed");
static_assert(sizeof(RBWireTriggerTrap_GetIsArmed) == 0x000001, "Wrong size on RBWireTriggerTrap_GetIsArmed");
static_assert(offsetof(RBWireTriggerTrap_GetIsArmed, ReturnValue) == 0x000000, "Member 'RBWireTriggerTrap_GetIsArmed::ReturnValue' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.GetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBWireTriggerTrap_GetIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWireTriggerTrap_GetIsEnabled) == 0x000001, "Wrong alignment on RBWireTriggerTrap_GetIsEnabled");
static_assert(sizeof(RBWireTriggerTrap_GetIsEnabled) == 0x000001, "Wrong size on RBWireTriggerTrap_GetIsEnabled");
static_assert(offsetof(RBWireTriggerTrap_GetIsEnabled, ReturnValue) == 0x000000, "Member 'RBWireTriggerTrap_GetIsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.GetIsTriggered
// 0x0001 (0x0001 - 0x0000)
struct RBWireTriggerTrap_GetIsTriggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWireTriggerTrap_GetIsTriggered) == 0x000001, "Wrong alignment on RBWireTriggerTrap_GetIsTriggered");
static_assert(sizeof(RBWireTriggerTrap_GetIsTriggered) == 0x000001, "Wrong size on RBWireTriggerTrap_GetIsTriggered");
static_assert(offsetof(RBWireTriggerTrap_GetIsTriggered, ReturnValue) == 0x000000, "Member 'RBWireTriggerTrap_GetIsTriggered::ReturnValue' has a wrong offset!");

// Function OPP.RBWireTriggerTrap.GetTrapBatteryState
// 0x0001 (0x0001 - 0x0000)
struct RBWireTriggerTrap_GetTrapBatteryState final
{
public:
	ETrapBatteryState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWireTriggerTrap_GetTrapBatteryState) == 0x000001, "Wrong alignment on RBWireTriggerTrap_GetTrapBatteryState");
static_assert(sizeof(RBWireTriggerTrap_GetTrapBatteryState) == 0x000001, "Wrong size on RBWireTriggerTrap_GetTrapBatteryState");
static_assert(offsetof(RBWireTriggerTrap_GetTrapBatteryState, ReturnValue) == 0x000000, "Member 'RBWireTriggerTrap_GetTrapBatteryState::ReturnValue' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.AddExtraCustomizationMeshesForSlot
// 0x0030 (0x0030 - 0x0000)
struct RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot final
{
public:
	class USkeletalMeshComponent*                 baseSlotSkeletalCompoment;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  ExtraMeshes;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPlayerCustomizationSlot                      Slot;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21E9[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         OutNewComponents;                                  // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot");
static_assert(sizeof(RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot) == 0x000030, "Wrong size on RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot");
static_assert(offsetof(RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot, baseSlotSkeletalCompoment) == 0x000000, "Member 'RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot::baseSlotSkeletalCompoment' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot, ExtraMeshes) == 0x000008, "Member 'RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot::ExtraMeshes' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot, Slot) == 0x000018, "Member 'RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot::Slot' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot, OutNewComponents) == 0x000020, "Member 'RBPawnCustomizationManager_AddExtraCustomizationMeshesForSlot::OutNewComponents' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.ApplyPlayerCustomization
// 0x0008 (0x0008 - 0x0000)
struct RBPawnCustomizationManager_ApplyPlayerCustomization final
{
public:
	class AActor*                                 CustomizationOwner;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawnCustomizationManager_ApplyPlayerCustomization) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_ApplyPlayerCustomization");
static_assert(sizeof(RBPawnCustomizationManager_ApplyPlayerCustomization) == 0x000008, "Wrong size on RBPawnCustomizationManager_ApplyPlayerCustomization");
static_assert(offsetof(RBPawnCustomizationManager_ApplyPlayerCustomization, CustomizationOwner) == 0x000000, "Member 'RBPawnCustomizationManager_ApplyPlayerCustomization::CustomizationOwner' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.ApplyPlayerCustomizationWithOutfitOverride
// 0x0010 (0x0010 - 0x0000)
struct RBPawnCustomizationManager_ApplyPlayerCustomizationWithOutfitOverride final
{
public:
	class AActor*                                 CustomizationOwner;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBCustomizationOutfit*                 Outfit;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawnCustomizationManager_ApplyPlayerCustomizationWithOutfitOverride) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_ApplyPlayerCustomizationWithOutfitOverride");
static_assert(sizeof(RBPawnCustomizationManager_ApplyPlayerCustomizationWithOutfitOverride) == 0x000010, "Wrong size on RBPawnCustomizationManager_ApplyPlayerCustomizationWithOutfitOverride");
static_assert(offsetof(RBPawnCustomizationManager_ApplyPlayerCustomizationWithOutfitOverride, CustomizationOwner) == 0x000000, "Member 'RBPawnCustomizationManager_ApplyPlayerCustomizationWithOutfitOverride::CustomizationOwner' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_ApplyPlayerCustomizationWithOutfitOverride, Outfit) == 0x000008, "Member 'RBPawnCustomizationManager_ApplyPlayerCustomizationWithOutfitOverride::Outfit' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.ApplySpecificPlayerCustomization
// 0x0040 (0x0040 - 0x0000)
struct RBPawnCustomizationManager_ApplySpecificPlayerCustomization final
{
public:
	class AActor*                                 CustomizationOwner;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBPlayerCustomizationInfo             RBPlayerCustomizationInfo;                         // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawnCustomizationManager_ApplySpecificPlayerCustomization) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_ApplySpecificPlayerCustomization");
static_assert(sizeof(RBPawnCustomizationManager_ApplySpecificPlayerCustomization) == 0x000040, "Wrong size on RBPawnCustomizationManager_ApplySpecificPlayerCustomization");
static_assert(offsetof(RBPawnCustomizationManager_ApplySpecificPlayerCustomization, CustomizationOwner) == 0x000000, "Member 'RBPawnCustomizationManager_ApplySpecificPlayerCustomization::CustomizationOwner' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_ApplySpecificPlayerCustomization, RBPlayerCustomizationInfo) == 0x000008, "Member 'RBPawnCustomizationManager_ApplySpecificPlayerCustomization::RBPlayerCustomizationInfo' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.UpdateSkeletalMeshComponent
// 0x0068 (0x0068 - 0x0000)
struct RBPawnCustomizationManager_UpdateSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 Cmp;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UMaterialInstanceConstant*> MaterialOverrideMap;                               // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSetMasterPoseComponent;                           // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EA[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawnCustomizationManager_UpdateSkeletalMeshComponent) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_UpdateSkeletalMeshComponent");
static_assert(sizeof(RBPawnCustomizationManager_UpdateSkeletalMeshComponent) == 0x000068, "Wrong size on RBPawnCustomizationManager_UpdateSkeletalMeshComponent");
static_assert(offsetof(RBPawnCustomizationManager_UpdateSkeletalMeshComponent, Cmp) == 0x000000, "Member 'RBPawnCustomizationManager_UpdateSkeletalMeshComponent::Cmp' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_UpdateSkeletalMeshComponent, Mesh) == 0x000008, "Member 'RBPawnCustomizationManager_UpdateSkeletalMeshComponent::Mesh' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_UpdateSkeletalMeshComponent, MaterialOverrideMap) == 0x000010, "Member 'RBPawnCustomizationManager_UpdateSkeletalMeshComponent::MaterialOverrideMap' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_UpdateSkeletalMeshComponent, bSetMasterPoseComponent) == 0x000060, "Member 'RBPawnCustomizationManager_UpdateSkeletalMeshComponent::bSetMasterPoseComponent' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.UpdateSkeletalMeshComponentFromCustomizationOption
// 0x0018 (0x0018 - 0x0000)
struct RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption final
{
public:
	class USkeletalMeshComponent*                 Cmp;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBPlayerCustomizationOption*           Option;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFemale;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption");
static_assert(sizeof(RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption) == 0x000018, "Wrong size on RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption");
static_assert(offsetof(RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption, Cmp) == 0x000000, "Member 'RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption::Cmp' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption, Option) == 0x000008, "Member 'RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption::Option' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption, bIsFemale) == 0x000010, "Member 'RBPawnCustomizationManager_UpdateSkeletalMeshComponentFromCustomizationOption::bIsFemale' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.UpdateStaticMeshComponent
// 0x0060 (0x0060 - 0x0000)
struct RBPawnCustomizationManager_UpdateStaticMeshComponent final
{
public:
	class UStaticMeshComponent*                   Cmp;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UMaterialInstanceConstant*> MaterialOverrideMap;                               // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawnCustomizationManager_UpdateStaticMeshComponent) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_UpdateStaticMeshComponent");
static_assert(sizeof(RBPawnCustomizationManager_UpdateStaticMeshComponent) == 0x000060, "Wrong size on RBPawnCustomizationManager_UpdateStaticMeshComponent");
static_assert(offsetof(RBPawnCustomizationManager_UpdateStaticMeshComponent, Cmp) == 0x000000, "Member 'RBPawnCustomizationManager_UpdateStaticMeshComponent::Cmp' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_UpdateStaticMeshComponent, Mesh) == 0x000008, "Member 'RBPawnCustomizationManager_UpdateStaticMeshComponent::Mesh' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_UpdateStaticMeshComponent, MaterialOverrideMap) == 0x000010, "Member 'RBPawnCustomizationManager_UpdateStaticMeshComponent::MaterialOverrideMap' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.CancelAllLoadCustomizationResources
// 0x0008 (0x0008 - 0x0000)
struct RBPawnCustomizationManager_CancelAllLoadCustomizationResources final
{
public:
	class AActor*                                 CustomizationOwner;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawnCustomizationManager_CancelAllLoadCustomizationResources) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_CancelAllLoadCustomizationResources");
static_assert(sizeof(RBPawnCustomizationManager_CancelAllLoadCustomizationResources) == 0x000008, "Wrong size on RBPawnCustomizationManager_CancelAllLoadCustomizationResources");
static_assert(offsetof(RBPawnCustomizationManager_CancelAllLoadCustomizationResources, CustomizationOwner) == 0x000000, "Member 'RBPawnCustomizationManager_CancelAllLoadCustomizationResources::CustomizationOwner' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.CancelAllLoadCustomizationResourcesOfType
// 0x0010 (0x0010 - 0x0000)
struct RBPawnCustomizationManager_CancelAllLoadCustomizationResourcesOfType final
{
public:
	class AActor*                                 CustomizationOwner;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPawnCustomizationRequestType                 RequestType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawnCustomizationManager_CancelAllLoadCustomizationResourcesOfType) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_CancelAllLoadCustomizationResourcesOfType");
static_assert(sizeof(RBPawnCustomizationManager_CancelAllLoadCustomizationResourcesOfType) == 0x000010, "Wrong size on RBPawnCustomizationManager_CancelAllLoadCustomizationResourcesOfType");
static_assert(offsetof(RBPawnCustomizationManager_CancelAllLoadCustomizationResourcesOfType, CustomizationOwner) == 0x000000, "Member 'RBPawnCustomizationManager_CancelAllLoadCustomizationResourcesOfType::CustomizationOwner' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_CancelAllLoadCustomizationResourcesOfType, RequestType) == 0x000008, "Member 'RBPawnCustomizationManager_CancelAllLoadCustomizationResourcesOfType::RequestType' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.CancelLoadCustomizationResources
// 0x0004 (0x0004 - 0x0000)
struct RBPawnCustomizationManager_CancelLoadCustomizationResources final
{
public:
	int32                                         RequestID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawnCustomizationManager_CancelLoadCustomizationResources) == 0x000004, "Wrong alignment on RBPawnCustomizationManager_CancelLoadCustomizationResources");
static_assert(sizeof(RBPawnCustomizationManager_CancelLoadCustomizationResources) == 0x000004, "Wrong size on RBPawnCustomizationManager_CancelLoadCustomizationResources");
static_assert(offsetof(RBPawnCustomizationManager_CancelLoadCustomizationResources, RequestID) == 0x000000, "Member 'RBPawnCustomizationManager_CancelLoadCustomizationResources::RequestID' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.LoadCustomResources
// 0x0020 (0x0020 - 0x0000)
struct RBPawnCustomizationManager_LoadCustomResources final
{
public:
	class AActor*                                 RequestOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ResourcesToLoad;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21ED[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawnCustomizationManager_LoadCustomResources) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_LoadCustomResources");
static_assert(sizeof(RBPawnCustomizationManager_LoadCustomResources) == 0x000020, "Wrong size on RBPawnCustomizationManager_LoadCustomResources");
static_assert(offsetof(RBPawnCustomizationManager_LoadCustomResources, RequestOwner) == 0x000000, "Member 'RBPawnCustomizationManager_LoadCustomResources::RequestOwner' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadCustomResources, ResourcesToLoad) == 0x000008, "Member 'RBPawnCustomizationManager_LoadCustomResources::ResourcesToLoad' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadCustomResources, ReturnValue) == 0x000018, "Member 'RBPawnCustomizationManager_LoadCustomResources::ReturnValue' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.LoadNPCGruntResources
// 0x01A0 (0x01A0 - 0x0000)
struct RBPawnCustomizationManager_LoadNPCGruntResources final
{
public:
	class AActor*                                 GruntOwner;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGruntCustomizationMeshesConfig        CustomizationMeshesConfig;                         // 0x0008(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSelectedGruntCustomizationMeshesInfo  CustomizationMeshesInfo;                           // 0x0188(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x019C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawnCustomizationManager_LoadNPCGruntResources) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_LoadNPCGruntResources");
static_assert(sizeof(RBPawnCustomizationManager_LoadNPCGruntResources) == 0x0001A0, "Wrong size on RBPawnCustomizationManager_LoadNPCGruntResources");
static_assert(offsetof(RBPawnCustomizationManager_LoadNPCGruntResources, GruntOwner) == 0x000000, "Member 'RBPawnCustomizationManager_LoadNPCGruntResources::GruntOwner' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadNPCGruntResources, CustomizationMeshesConfig) == 0x000008, "Member 'RBPawnCustomizationManager_LoadNPCGruntResources::CustomizationMeshesConfig' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadNPCGruntResources, CustomizationMeshesInfo) == 0x000188, "Member 'RBPawnCustomizationManager_LoadNPCGruntResources::CustomizationMeshesInfo' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadNPCGruntResources, ReturnValue) == 0x00019C, "Member 'RBPawnCustomizationManager_LoadNPCGruntResources::ReturnValue' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.LoadPawnCustomizationResources
// 0x0020 (0x0020 - 0x0000)
struct RBPawnCustomizationManager_LoadPawnCustomizationResources final
{
public:
	class AActor*                                 PlayerCustomizationOwner;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ResourcesToLoad;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EPawnCustomizationRequestType                 RequestType;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EE[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPawnCustomizationManager_LoadPawnCustomizationResources) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_LoadPawnCustomizationResources");
static_assert(sizeof(RBPawnCustomizationManager_LoadPawnCustomizationResources) == 0x000020, "Wrong size on RBPawnCustomizationManager_LoadPawnCustomizationResources");
static_assert(offsetof(RBPawnCustomizationManager_LoadPawnCustomizationResources, PlayerCustomizationOwner) == 0x000000, "Member 'RBPawnCustomizationManager_LoadPawnCustomizationResources::PlayerCustomizationOwner' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadPawnCustomizationResources, ResourcesToLoad) == 0x000008, "Member 'RBPawnCustomizationManager_LoadPawnCustomizationResources::ResourcesToLoad' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadPawnCustomizationResources, RequestType) == 0x000018, "Member 'RBPawnCustomizationManager_LoadPawnCustomizationResources::RequestType' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadPawnCustomizationResources, ReturnValue) == 0x00001C, "Member 'RBPawnCustomizationManager_LoadPawnCustomizationResources::ReturnValue' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.LoadPlayerCustomizationResources
// 0x0010 (0x0010 - 0x0000)
struct RBPawnCustomizationManager_LoadPlayerCustomizationResources final
{
public:
	class AActor*                                 PlayerCustomizationOwner;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21EF[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawnCustomizationManager_LoadPlayerCustomizationResources) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_LoadPlayerCustomizationResources");
static_assert(sizeof(RBPawnCustomizationManager_LoadPlayerCustomizationResources) == 0x000010, "Wrong size on RBPawnCustomizationManager_LoadPlayerCustomizationResources");
static_assert(offsetof(RBPawnCustomizationManager_LoadPlayerCustomizationResources, PlayerCustomizationOwner) == 0x000000, "Member 'RBPawnCustomizationManager_LoadPlayerCustomizationResources::PlayerCustomizationOwner' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadPlayerCustomizationResources, ReturnValue) == 0x000008, "Member 'RBPawnCustomizationManager_LoadPlayerCustomizationResources::ReturnValue' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.LoadPlayerCustomizationResourcesWithOutfitOverride
// 0x0018 (0x0018 - 0x0000)
struct RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride final
{
public:
	class AActor*                                 PlayerCustomizationOwner;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBCustomizationOutfit*                 Outfit;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F0[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride");
static_assert(sizeof(RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride) == 0x000018, "Wrong size on RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride");
static_assert(offsetof(RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride, PlayerCustomizationOwner) == 0x000000, "Member 'RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride::PlayerCustomizationOwner' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride, Outfit) == 0x000008, "Member 'RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride::Outfit' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride, ReturnValue) == 0x000010, "Member 'RBPawnCustomizationManager_LoadPlayerCustomizationResourcesWithOutfitOverride::ReturnValue' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.IsRequestActive
// 0x0010 (0x0010 - 0x0000)
struct RBPawnCustomizationManager_IsRequestActive final
{
public:
	class AActor*                                 CustomizationOwner;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPawnCustomizationRequestType                 RequestType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F1[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawnCustomizationManager_IsRequestActive) == 0x000008, "Wrong alignment on RBPawnCustomizationManager_IsRequestActive");
static_assert(sizeof(RBPawnCustomizationManager_IsRequestActive) == 0x000010, "Wrong size on RBPawnCustomizationManager_IsRequestActive");
static_assert(offsetof(RBPawnCustomizationManager_IsRequestActive, CustomizationOwner) == 0x000000, "Member 'RBPawnCustomizationManager_IsRequestActive::CustomizationOwner' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_IsRequestActive, RequestType) == 0x000008, "Member 'RBPawnCustomizationManager_IsRequestActive::RequestType' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_IsRequestActive, ReturnValue) == 0x000009, "Member 'RBPawnCustomizationManager_IsRequestActive::ReturnValue' has a wrong offset!");

// Function OPP.RBPawnCustomizationManager.IsRequestIDActive
// 0x0008 (0x0008 - 0x0000)
struct RBPawnCustomizationManager_IsRequestIDActive final
{
public:
	int32                                         RequestID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F2[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPawnCustomizationManager_IsRequestIDActive) == 0x000004, "Wrong alignment on RBPawnCustomizationManager_IsRequestIDActive");
static_assert(sizeof(RBPawnCustomizationManager_IsRequestIDActive) == 0x000008, "Wrong size on RBPawnCustomizationManager_IsRequestIDActive");
static_assert(offsetof(RBPawnCustomizationManager_IsRequestIDActive, RequestID) == 0x000000, "Member 'RBPawnCustomizationManager_IsRequestIDActive::RequestID' has a wrong offset!");
static_assert(offsetof(RBPawnCustomizationManager_IsRequestIDActive, ReturnValue) == 0x000004, "Member 'RBPawnCustomizationManager_IsRequestIDActive::ReturnValue' has a wrong offset!");

// Function OPP.RBPharmaSkill.Event_OnActiveOnPawn
// 0x0010 (0x0010 - 0x0000)
struct RBPharmaSkill_Event_OnActiveOnPawn final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F4[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPharmaSkill_Event_OnActiveOnPawn) == 0x000008, "Wrong alignment on RBPharmaSkill_Event_OnActiveOnPawn");
static_assert(sizeof(RBPharmaSkill_Event_OnActiveOnPawn) == 0x000010, "Wrong size on RBPharmaSkill_Event_OnActiveOnPawn");
static_assert(offsetof(RBPharmaSkill_Event_OnActiveOnPawn, Pawn) == 0x000000, "Member 'RBPharmaSkill_Event_OnActiveOnPawn::Pawn' has a wrong offset!");
static_assert(offsetof(RBPharmaSkill_Event_OnActiveOnPawn, bActive) == 0x000008, "Member 'RBPharmaSkill_Event_OnActiveOnPawn::bActive' has a wrong offset!");

// Function OPP.RBPharmaSkill.BP_GetSkillRadius
// 0x0004 (0x0004 - 0x0000)
struct RBPharmaSkill_BP_GetSkillRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPharmaSkill_BP_GetSkillRadius) == 0x000004, "Wrong alignment on RBPharmaSkill_BP_GetSkillRadius");
static_assert(sizeof(RBPharmaSkill_BP_GetSkillRadius) == 0x000004, "Wrong size on RBPharmaSkill_BP_GetSkillRadius");
static_assert(offsetof(RBPharmaSkill_BP_GetSkillRadius, ReturnValue) == 0x000000, "Member 'RBPharmaSkill_BP_GetSkillRadius::ReturnValue' has a wrong offset!");

// Function OPP.RBPickupSearchObjectiveCoordinator.OnPawnKilled_Server
// 0x0010 (0x0010 - 0x0000)
struct RBPickupSearchObjectiveCoordinator_OnPawnKilled_Server final
{
public:
	class ARBPawn*                                InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Subject;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickupSearchObjectiveCoordinator_OnPawnKilled_Server) == 0x000008, "Wrong alignment on RBPickupSearchObjectiveCoordinator_OnPawnKilled_Server");
static_assert(sizeof(RBPickupSearchObjectiveCoordinator_OnPawnKilled_Server) == 0x000010, "Wrong size on RBPickupSearchObjectiveCoordinator_OnPawnKilled_Server");
static_assert(offsetof(RBPickupSearchObjectiveCoordinator_OnPawnKilled_Server, InstigatorActor) == 0x000000, "Member 'RBPickupSearchObjectiveCoordinator_OnPawnKilled_Server::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBPickupSearchObjectiveCoordinator_OnPawnKilled_Server, Subject) == 0x000008, "Member 'RBPickupSearchObjectiveCoordinator_OnPawnKilled_Server::Subject' has a wrong offset!");

// Function OPP.RBPickupSearchObjectiveCoordinator.OnPawnRespawned_Server
// 0x0008 (0x0008 - 0x0000)
struct RBPickupSearchObjectiveCoordinator_OnPawnRespawned_Server final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickupSearchObjectiveCoordinator_OnPawnRespawned_Server) == 0x000008, "Wrong alignment on RBPickupSearchObjectiveCoordinator_OnPawnRespawned_Server");
static_assert(sizeof(RBPickupSearchObjectiveCoordinator_OnPawnRespawned_Server) == 0x000008, "Wrong size on RBPickupSearchObjectiveCoordinator_OnPawnRespawned_Server");
static_assert(offsetof(RBPickupSearchObjectiveCoordinator_OnPawnRespawned_Server, Pawn) == 0x000000, "Member 'RBPickupSearchObjectiveCoordinator_OnPawnRespawned_Server::Pawn' has a wrong offset!");

// Function OPP.RBPickupSearchObjectiveCoordinator.OnPlayerDisconnect_Server
// 0x0008 (0x0008 - 0x0000)
struct RBPickupSearchObjectiveCoordinator_OnPlayerDisconnect_Server final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickupSearchObjectiveCoordinator_OnPlayerDisconnect_Server) == 0x000008, "Wrong alignment on RBPickupSearchObjectiveCoordinator_OnPlayerDisconnect_Server");
static_assert(sizeof(RBPickupSearchObjectiveCoordinator_OnPlayerDisconnect_Server) == 0x000008, "Wrong size on RBPickupSearchObjectiveCoordinator_OnPlayerDisconnect_Server");
static_assert(offsetof(RBPickupSearchObjectiveCoordinator_OnPlayerDisconnect_Server, Player) == 0x000000, "Member 'RBPickupSearchObjectiveCoordinator_OnPlayerDisconnect_Server::Player' has a wrong offset!");

// Function OPP.RBPickupSearchObjectiveCoordinator.OnPlayerPickedUpItem_Server
// 0x0010 (0x0010 - 0x0000)
struct RBPickupSearchObjectiveCoordinator_OnPlayerPickedUpItem_Server final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickupSearchObjectiveCoordinator_OnPlayerPickedUpItem_Server) == 0x000008, "Wrong alignment on RBPickupSearchObjectiveCoordinator_OnPlayerPickedUpItem_Server");
static_assert(sizeof(RBPickupSearchObjectiveCoordinator_OnPlayerPickedUpItem_Server) == 0x000010, "Wrong size on RBPickupSearchObjectiveCoordinator_OnPlayerPickedUpItem_Server");
static_assert(offsetof(RBPickupSearchObjectiveCoordinator_OnPlayerPickedUpItem_Server, Player) == 0x000000, "Member 'RBPickupSearchObjectiveCoordinator_OnPlayerPickedUpItem_Server::Player' has a wrong offset!");
static_assert(offsetof(RBPickupSearchObjectiveCoordinator_OnPlayerPickedUpItem_Server, Item) == 0x000008, "Member 'RBPickupSearchObjectiveCoordinator_OnPlayerPickedUpItem_Server::Item' has a wrong offset!");

// Function OPP.RBPickupSearchObjectiveCoordinator.OnPlayerRevived_Server
// 0x0010 (0x0010 - 0x0000)
struct RBPickupSearchObjectiveCoordinator_OnPlayerRevived_Server final
{
public:
	class ARBPlayer*                              InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              SubjectActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPickupSearchObjectiveCoordinator_OnPlayerRevived_Server) == 0x000008, "Wrong alignment on RBPickupSearchObjectiveCoordinator_OnPlayerRevived_Server");
static_assert(sizeof(RBPickupSearchObjectiveCoordinator_OnPlayerRevived_Server) == 0x000010, "Wrong size on RBPickupSearchObjectiveCoordinator_OnPlayerRevived_Server");
static_assert(offsetof(RBPickupSearchObjectiveCoordinator_OnPlayerRevived_Server, InstigatorActor) == 0x000000, "Member 'RBPickupSearchObjectiveCoordinator_OnPlayerRevived_Server::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBPickupSearchObjectiveCoordinator_OnPlayerRevived_Server, SubjectActor) == 0x000008, "Member 'RBPickupSearchObjectiveCoordinator_OnPlayerRevived_Server::SubjectActor' has a wrong offset!");

// Function OPP.RBPingableObject.GetPingEnabled
// 0x0098 (0x0098 - 0x0000)
struct RBPingableObject_GetPingEnabled final
{
public:
	class ARBPlayer*                              PingOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          OutIsEnabled;                                      // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0091(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F6[0x6];                                     // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPingableObject_GetPingEnabled) == 0x000008, "Wrong alignment on RBPingableObject_GetPingEnabled");
static_assert(sizeof(RBPingableObject_GetPingEnabled) == 0x000098, "Wrong size on RBPingableObject_GetPingEnabled");
static_assert(offsetof(RBPingableObject_GetPingEnabled, PingOwner) == 0x000000, "Member 'RBPingableObject_GetPingEnabled::PingOwner' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPingEnabled, HitResult) == 0x000008, "Member 'RBPingableObject_GetPingEnabled::HitResult' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPingEnabled, OutIsEnabled) == 0x000090, "Member 'RBPingableObject_GetPingEnabled::OutIsEnabled' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPingEnabled, ReturnValue) == 0x000091, "Member 'RBPingableObject_GetPingEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBPingableObject.GetPingItemName
// 0x0020 (0x0020 - 0x0000)
struct RBPingableObject_GetPingItemName final
{
public:
	class FText                                   OutName;                                           // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F7[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPingableObject_GetPingItemName) == 0x000008, "Wrong alignment on RBPingableObject_GetPingItemName");
static_assert(sizeof(RBPingableObject_GetPingItemName) == 0x000020, "Wrong size on RBPingableObject_GetPingItemName");
static_assert(offsetof(RBPingableObject_GetPingItemName, OutName) == 0x000000, "Member 'RBPingableObject_GetPingItemName::OutName' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPingItemName, ReturnValue) == 0x000018, "Member 'RBPingableObject_GetPingItemName::ReturnValue' has a wrong offset!");

// Function OPP.RBPingableObject.GetPlayerPingData
// 0x00C0 (0x00C0 - 0x0000)
struct RBPingableObject_GetPlayerPingData final
{
public:
	class ARBPlayer*                              PingOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FPlayerPingData                        OutData;                                           // 0x0090(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F8[0x7];                                     // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPingableObject_GetPlayerPingData) == 0x000008, "Wrong alignment on RBPingableObject_GetPlayerPingData");
static_assert(sizeof(RBPingableObject_GetPlayerPingData) == 0x0000C0, "Wrong size on RBPingableObject_GetPlayerPingData");
static_assert(offsetof(RBPingableObject_GetPlayerPingData, PingOwner) == 0x000000, "Member 'RBPingableObject_GetPlayerPingData::PingOwner' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPlayerPingData, HitResult) == 0x000008, "Member 'RBPingableObject_GetPlayerPingData::HitResult' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPlayerPingData, OutData) == 0x000090, "Member 'RBPingableObject_GetPlayerPingData::OutData' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPlayerPingData, ReturnValue) == 0x0000B8, "Member 'RBPingableObject_GetPlayerPingData::ReturnValue' has a wrong offset!");

// Function OPP.RBPingableObject.GetPlayerPingWorldLocation
// 0x00A0 (0x00A0 - 0x0000)
struct RBPingableObject_GetPlayerPingWorldLocation final
{
public:
	class ARBPlayer*                              PingOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0090(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x009C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21F9[0x3];                                     // 0x009D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPingableObject_GetPlayerPingWorldLocation) == 0x000008, "Wrong alignment on RBPingableObject_GetPlayerPingWorldLocation");
static_assert(sizeof(RBPingableObject_GetPlayerPingWorldLocation) == 0x0000A0, "Wrong size on RBPingableObject_GetPlayerPingWorldLocation");
static_assert(offsetof(RBPingableObject_GetPlayerPingWorldLocation, PingOwner) == 0x000000, "Member 'RBPingableObject_GetPlayerPingWorldLocation::PingOwner' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPlayerPingWorldLocation, HitResult) == 0x000008, "Member 'RBPingableObject_GetPlayerPingWorldLocation::HitResult' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPlayerPingWorldLocation, OutLocation) == 0x000090, "Member 'RBPingableObject_GetPlayerPingWorldLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(RBPingableObject_GetPlayerPingWorldLocation, ReturnValue) == 0x00009C, "Member 'RBPingableObject_GetPlayerPingWorldLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBPingComponent.GetPingItemName
// 0x0018 (0x0018 - 0x0000)
struct RBPingComponent_GetPingItemName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPingComponent_GetPingItemName) == 0x000008, "Wrong alignment on RBPingComponent_GetPingItemName");
static_assert(sizeof(RBPingComponent_GetPingItemName) == 0x000018, "Wrong size on RBPingComponent_GetPingItemName");
static_assert(offsetof(RBPingComponent_GetPingItemName, ReturnValue) == 0x000000, "Member 'RBPingComponent_GetPingItemName::ReturnValue' has a wrong offset!");

// Function OPP.RBPingComponent.GetPingWorldLocation
// 0x0094 (0x0094 - 0x0000)
struct RBPingComponent_GetPingWorldLocation final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPingComponent_GetPingWorldLocation) == 0x000004, "Wrong alignment on RBPingComponent_GetPingWorldLocation");
static_assert(sizeof(RBPingComponent_GetPingWorldLocation) == 0x000094, "Wrong size on RBPingComponent_GetPingWorldLocation");
static_assert(offsetof(RBPingComponent_GetPingWorldLocation, HitResult) == 0x000000, "Member 'RBPingComponent_GetPingWorldLocation::HitResult' has a wrong offset!");
static_assert(offsetof(RBPingComponent_GetPingWorldLocation, ReturnValue) == 0x000088, "Member 'RBPingComponent_GetPingWorldLocation::ReturnValue' has a wrong offset!");

// Function OPP.RBPingComponent.GetPlayerPingData
// 0x0028 (0x0028 - 0x0000)
struct RBPingComponent_GetPlayerPingData final
{
public:
	struct FPlayerPingData                        ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPingComponent_GetPlayerPingData) == 0x000008, "Wrong alignment on RBPingComponent_GetPlayerPingData");
static_assert(sizeof(RBPingComponent_GetPlayerPingData) == 0x000028, "Wrong size on RBPingComponent_GetPlayerPingData");
static_assert(offsetof(RBPingComponent_GetPlayerPingData, ReturnValue) == 0x000000, "Member 'RBPingComponent_GetPlayerPingData::ReturnValue' has a wrong offset!");

// Function OPP.RBPingComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBPingComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPingComponent_IsEnabled) == 0x000001, "Wrong alignment on RBPingComponent_IsEnabled");
static_assert(sizeof(RBPingComponent_IsEnabled) == 0x000001, "Wrong size on RBPingComponent_IsEnabled");
static_assert(offsetof(RBPingComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'RBPingComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBPipeModule.AddSplineMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct RBPipeModule_AddSplineMeshComponent final
{
public:
	class USplineMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPipeModule_AddSplineMeshComponent) == 0x000008, "Wrong alignment on RBPipeModule_AddSplineMeshComponent");
static_assert(sizeof(RBPipeModule_AddSplineMeshComponent) == 0x000008, "Wrong size on RBPipeModule_AddSplineMeshComponent");
static_assert(offsetof(RBPipeModule_AddSplineMeshComponent, ReturnValue) == 0x000000, "Member 'RBPipeModule_AddSplineMeshComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBPipeModule.AddStaticMesh
// 0x0040 (0x0040 - 0x0000)
struct RBPipeModule_AddStaticMesh final
{
public:
	struct FTransform                             Transforms;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            StaticMesh;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0038(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPipeModule_AddStaticMesh) == 0x000010, "Wrong alignment on RBPipeModule_AddStaticMesh");
static_assert(sizeof(RBPipeModule_AddStaticMesh) == 0x000040, "Wrong size on RBPipeModule_AddStaticMesh");
static_assert(offsetof(RBPipeModule_AddStaticMesh, Transforms) == 0x000000, "Member 'RBPipeModule_AddStaticMesh::Transforms' has a wrong offset!");
static_assert(offsetof(RBPipeModule_AddStaticMesh, StaticMesh) == 0x000030, "Member 'RBPipeModule_AddStaticMesh::StaticMesh' has a wrong offset!");
static_assert(offsetof(RBPipeModule_AddStaticMesh, ReturnValue) == 0x000038, "Member 'RBPipeModule_AddStaticMesh::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.AddPlayerSpecificUpgrade_Server
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_AddPlayerSpecificUpgrade_Server final
{
public:
	struct FRBGameplayAttributeModifierInfo       ModifierInfo;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_AddPlayerSpecificUpgrade_Server) == 0x000004, "Wrong alignment on RBPlayer_AddPlayerSpecificUpgrade_Server");
static_assert(sizeof(RBPlayer_AddPlayerSpecificUpgrade_Server) == 0x000018, "Wrong size on RBPlayer_AddPlayerSpecificUpgrade_Server");
static_assert(offsetof(RBPlayer_AddPlayerSpecificUpgrade_Server, ModifierInfo) == 0x000000, "Member 'RBPlayer_AddPlayerSpecificUpgrade_Server::ModifierInfo' has a wrong offset!");

// Function OPP.RBPlayer.BP_ActivateCameraShake
// 0x00A8 (0x00A8 - 0x0000)
struct RBPlayer_BP_ActivateCameraShake final
{
public:
	struct FCameraShakeData                       ShakeData;                                         // 0x0000(0x0090)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SourceLocation;                                    // 0x0090(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224A[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ShakeOwner;                                        // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_ActivateCameraShake) == 0x000008, "Wrong alignment on RBPlayer_BP_ActivateCameraShake");
static_assert(sizeof(RBPlayer_BP_ActivateCameraShake) == 0x0000A8, "Wrong size on RBPlayer_BP_ActivateCameraShake");
static_assert(offsetof(RBPlayer_BP_ActivateCameraShake, ShakeData) == 0x000000, "Member 'RBPlayer_BP_ActivateCameraShake::ShakeData' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_ActivateCameraShake, SourceLocation) == 0x000090, "Member 'RBPlayer_BP_ActivateCameraShake::SourceLocation' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_ActivateCameraShake, ShakeOwner) == 0x0000A0, "Member 'RBPlayer_BP_ActivateCameraShake::ShakeOwner' has a wrong offset!");

// Function OPP.RBPlayer.BP_AddProgressivePsychosis
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_BP_AddProgressivePsychosis final
{
public:
	float                                         PsychosisAmount;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGas;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBypassPlayerReductions;                           // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224B[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_BP_AddProgressivePsychosis) == 0x000004, "Wrong alignment on RBPlayer_BP_AddProgressivePsychosis");
static_assert(sizeof(RBPlayer_BP_AddProgressivePsychosis) == 0x000008, "Wrong size on RBPlayer_BP_AddProgressivePsychosis");
static_assert(offsetof(RBPlayer_BP_AddProgressivePsychosis, PsychosisAmount) == 0x000000, "Member 'RBPlayer_BP_AddProgressivePsychosis::PsychosisAmount' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_AddProgressivePsychosis, bGas) == 0x000004, "Member 'RBPlayer_BP_AddProgressivePsychosis::bGas' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_AddProgressivePsychosis, bBypassPlayerReductions) == 0x000005, "Member 'RBPlayer_BP_AddProgressivePsychosis::bBypassPlayerReductions' has a wrong offset!");

// Function OPP.RBPlayer.BP_AddScoringPoints
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_BP_AddScoringPoints final
{
public:
	int32                                         NbPoints;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_AddScoringPoints) == 0x000004, "Wrong alignment on RBPlayer_BP_AddScoringPoints");
static_assert(sizeof(RBPlayer_BP_AddScoringPoints) == 0x000004, "Wrong size on RBPlayer_BP_AddScoringPoints");
static_assert(offsetof(RBPlayer_BP_AddScoringPoints, NbPoints) == 0x000000, "Member 'RBPlayer_BP_AddScoringPoints::NbPoints' has a wrong offset!");

// Function OPP.RBPlayer.BP_DamagePlayer
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_BP_DamagePlayer final
{
public:
	EDamageType                                   DmgType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SrcActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DmgAmount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanKill;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanKnockdown;                                     // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224D[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_BP_DamagePlayer) == 0x000008, "Wrong alignment on RBPlayer_BP_DamagePlayer");
static_assert(sizeof(RBPlayer_BP_DamagePlayer) == 0x000018, "Wrong size on RBPlayer_BP_DamagePlayer");
static_assert(offsetof(RBPlayer_BP_DamagePlayer, DmgType) == 0x000000, "Member 'RBPlayer_BP_DamagePlayer::DmgType' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_DamagePlayer, SrcActor) == 0x000008, "Member 'RBPlayer_BP_DamagePlayer::SrcActor' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_DamagePlayer, DmgAmount) == 0x000010, "Member 'RBPlayer_BP_DamagePlayer::DmgAmount' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_DamagePlayer, bCanKill) == 0x000014, "Member 'RBPlayer_BP_DamagePlayer::bCanKill' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_DamagePlayer, bCanKnockdown) == 0x000015, "Member 'RBPlayer_BP_DamagePlayer::bCanKnockdown' has a wrong offset!");

// Function OPP.RBPlayer.BP_Debug_AdjustPlayerPosition
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_BP_Debug_AdjustPlayerPosition final
{
public:
	class AActor*                                 RefActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetFwd;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetSide;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetHeight;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224E[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_BP_Debug_AdjustPlayerPosition) == 0x000008, "Wrong alignment on RBPlayer_BP_Debug_AdjustPlayerPosition");
static_assert(sizeof(RBPlayer_BP_Debug_AdjustPlayerPosition) == 0x000018, "Wrong size on RBPlayer_BP_Debug_AdjustPlayerPosition");
static_assert(offsetof(RBPlayer_BP_Debug_AdjustPlayerPosition, RefActor) == 0x000000, "Member 'RBPlayer_BP_Debug_AdjustPlayerPosition::RefActor' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_Debug_AdjustPlayerPosition, OffsetFwd) == 0x000008, "Member 'RBPlayer_BP_Debug_AdjustPlayerPosition::OffsetFwd' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_Debug_AdjustPlayerPosition, OffsetSide) == 0x00000C, "Member 'RBPlayer_BP_Debug_AdjustPlayerPosition::OffsetSide' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_Debug_AdjustPlayerPosition, OffsetHeight) == 0x000010, "Member 'RBPlayer_BP_Debug_AdjustPlayerPosition::OffsetHeight' has a wrong offset!");

// Function OPP.RBPlayer.BP_ForceHitReaction
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_BP_ForceHitReaction final
{
public:
	bool                                          bCancelInteraction;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerHitReactionType                        HitReactionType;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224F[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitDirection;                                      // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_ForceHitReaction) == 0x000004, "Wrong alignment on RBPlayer_BP_ForceHitReaction");
static_assert(sizeof(RBPlayer_BP_ForceHitReaction) == 0x000010, "Wrong size on RBPlayer_BP_ForceHitReaction");
static_assert(offsetof(RBPlayer_BP_ForceHitReaction, bCancelInteraction) == 0x000000, "Member 'RBPlayer_BP_ForceHitReaction::bCancelInteraction' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_ForceHitReaction, HitReactionType) == 0x000001, "Member 'RBPlayer_BP_ForceHitReaction::HitReactionType' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_ForceHitReaction, HitDirection) == 0x000004, "Member 'RBPlayer_BP_ForceHitReaction::HitDirection' has a wrong offset!");

// Function OPP.RBPlayer.BP_ForceInteractionOnFakePlayer
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_BP_ForceInteractionOnFakePlayer final
{
public:
	float                                         Interval;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_ForceInteractionOnFakePlayer) == 0x000004, "Wrong alignment on RBPlayer_BP_ForceInteractionOnFakePlayer");
static_assert(sizeof(RBPlayer_BP_ForceInteractionOnFakePlayer) == 0x000004, "Wrong size on RBPlayer_BP_ForceInteractionOnFakePlayer");
static_assert(offsetof(RBPlayer_BP_ForceInteractionOnFakePlayer, Interval) == 0x000000, "Member 'RBPlayer_BP_ForceInteractionOnFakePlayer::Interval' has a wrong offset!");

// Function OPP.RBPlayer.BP_ForcePickupItem
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_BP_ForcePickupItem final
{
public:
	class ARBPickup*                              Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_ForcePickupItem) == 0x000008, "Wrong alignment on RBPlayer_BP_ForcePickupItem");
static_assert(sizeof(RBPlayer_BP_ForcePickupItem) == 0x000008, "Wrong size on RBPlayer_BP_ForcePickupItem");
static_assert(offsetof(RBPlayer_BP_ForcePickupItem, Pickup) == 0x000000, "Member 'RBPlayer_BP_ForcePickupItem::Pickup' has a wrong offset!");

// Function OPP.RBPlayer.BP_ForceSpecialAnimation
// 0x0020 (0x0020 - 0x0000)
struct RBPlayer_BP_ForceSpecialAnimation final
{
public:
	bool                                          bCancelInteraction;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2250[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetLocation;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Animation;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollisionEnabled;                                 // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2251[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         blendInTime;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_ForceSpecialAnimation) == 0x000008, "Wrong alignment on RBPlayer_BP_ForceSpecialAnimation");
static_assert(sizeof(RBPlayer_BP_ForceSpecialAnimation) == 0x000020, "Wrong size on RBPlayer_BP_ForceSpecialAnimation");
static_assert(offsetof(RBPlayer_BP_ForceSpecialAnimation, bCancelInteraction) == 0x000000, "Member 'RBPlayer_BP_ForceSpecialAnimation::bCancelInteraction' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_ForceSpecialAnimation, TargetLocation) == 0x000008, "Member 'RBPlayer_BP_ForceSpecialAnimation::TargetLocation' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_ForceSpecialAnimation, Animation) == 0x000010, "Member 'RBPlayer_BP_ForceSpecialAnimation::Animation' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_ForceSpecialAnimation, bCollisionEnabled) == 0x000018, "Member 'RBPlayer_BP_ForceSpecialAnimation::bCollisionEnabled' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_ForceSpecialAnimation, blendInTime) == 0x00001C, "Member 'RBPlayer_BP_ForceSpecialAnimation::blendInTime' has a wrong offset!");

// Function OPP.RBPlayer.BP_ForceWakeUpSequence
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_BP_ForceWakeUpSequence final
{
public:
	class ARBPlayerStart*                         PlayerStart;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_ForceWakeUpSequence) == 0x000008, "Wrong alignment on RBPlayer_BP_ForceWakeUpSequence");
static_assert(sizeof(RBPlayer_BP_ForceWakeUpSequence) == 0x000008, "Wrong size on RBPlayer_BP_ForceWakeUpSequence");
static_assert(offsetof(RBPlayer_BP_ForceWakeUpSequence, PlayerStart) == 0x000000, "Member 'RBPlayer_BP_ForceWakeUpSequence::PlayerStart' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetNoStaminaConsumptionDuration
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_BP_GetNoStaminaConsumptionDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_GetNoStaminaConsumptionDuration) == 0x000004, "Wrong alignment on RBPlayer_BP_GetNoStaminaConsumptionDuration");
static_assert(sizeof(RBPlayer_BP_GetNoStaminaConsumptionDuration) == 0x000004, "Wrong size on RBPlayer_BP_GetNoStaminaConsumptionDuration");
static_assert(offsetof(RBPlayer_BP_GetNoStaminaConsumptionDuration, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_GetNoStaminaConsumptionDuration::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetPickupInFocus
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_BP_GetPickupInFocus final
{
public:
	bool                                          OutIsSwap;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2252[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPickup*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_GetPickupInFocus) == 0x000008, "Wrong alignment on RBPlayer_BP_GetPickupInFocus");
static_assert(sizeof(RBPlayer_BP_GetPickupInFocus) == 0x000010, "Wrong size on RBPlayer_BP_GetPickupInFocus");
static_assert(offsetof(RBPlayer_BP_GetPickupInFocus, OutIsSwap) == 0x000000, "Member 'RBPlayer_BP_GetPickupInFocus::OutIsSwap' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_GetPickupInFocus, ReturnValue) == 0x000008, "Member 'RBPlayer_BP_GetPickupInFocus::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_HasInventoryItem
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_BP_HasInventoryItem final
{
public:
	TSubclassOf<class ARBPickup>                  ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2253[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_BP_HasInventoryItem) == 0x000008, "Wrong alignment on RBPlayer_BP_HasInventoryItem");
static_assert(sizeof(RBPlayer_BP_HasInventoryItem) == 0x000010, "Wrong size on RBPlayer_BP_HasInventoryItem");
static_assert(offsetof(RBPlayer_BP_HasInventoryItem, ItemClass) == 0x000000, "Member 'RBPlayer_BP_HasInventoryItem::ItemClass' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_HasInventoryItem, ReturnValue) == 0x000008, "Member 'RBPlayer_BP_HasInventoryItem::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_SetGodMode
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_SetGodMode final
{
public:
	bool                                          bGod;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_SetGodMode) == 0x000001, "Wrong alignment on RBPlayer_BP_SetGodMode");
static_assert(sizeof(RBPlayer_BP_SetGodMode) == 0x000001, "Wrong size on RBPlayer_BP_SetGodMode");
static_assert(offsetof(RBPlayer_BP_SetGodMode, bGod) == 0x000000, "Member 'RBPlayer_BP_SetGodMode::bGod' has a wrong offset!");

// Function OPP.RBPlayer.BP_SetSpecialMoveCameraLimits
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_BP_SetSpecialMoveCameraLimits final
{
public:
	float                                         MinYaw;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYaw;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitch;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitch;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_SetSpecialMoveCameraLimits) == 0x000004, "Wrong alignment on RBPlayer_BP_SetSpecialMoveCameraLimits");
static_assert(sizeof(RBPlayer_BP_SetSpecialMoveCameraLimits) == 0x000010, "Wrong size on RBPlayer_BP_SetSpecialMoveCameraLimits");
static_assert(offsetof(RBPlayer_BP_SetSpecialMoveCameraLimits, MinYaw) == 0x000000, "Member 'RBPlayer_BP_SetSpecialMoveCameraLimits::MinYaw' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_SetSpecialMoveCameraLimits, MaxYaw) == 0x000004, "Member 'RBPlayer_BP_SetSpecialMoveCameraLimits::MaxYaw' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_SetSpecialMoveCameraLimits, MinPitch) == 0x000008, "Member 'RBPlayer_BP_SetSpecialMoveCameraLimits::MinPitch' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_SetSpecialMoveCameraLimits, MaxPitch) == 0x00000C, "Member 'RBPlayer_BP_SetSpecialMoveCameraLimits::MaxPitch' has a wrong offset!");

// Function OPP.RBPlayer.BP_StartDizziness
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_BP_StartDizziness final
{
public:
	const class URBDizzinessConfig*               ConfigAsset;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_StartDizziness) == 0x000008, "Wrong alignment on RBPlayer_BP_StartDizziness");
static_assert(sizeof(RBPlayer_BP_StartDizziness) == 0x000008, "Wrong size on RBPlayer_BP_StartDizziness");
static_assert(offsetof(RBPlayer_BP_StartDizziness, ConfigAsset) == 0x000000, "Member 'RBPlayer_BP_StartDizziness::ConfigAsset' has a wrong offset!");

// Function OPP.RBPlayer.BP_StartHallucination
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_BP_StartHallucination final
{
public:
	EHallucinationType                            HalluType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2254[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class URBHallucinationConfig*           Config;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_StartHallucination) == 0x000008, "Wrong alignment on RBPlayer_BP_StartHallucination");
static_assert(sizeof(RBPlayer_BP_StartHallucination) == 0x000010, "Wrong size on RBPlayer_BP_StartHallucination");
static_assert(offsetof(RBPlayer_BP_StartHallucination, HalluType) == 0x000000, "Member 'RBPlayer_BP_StartHallucination::HalluType' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_StartHallucination, Config) == 0x000008, "Member 'RBPlayer_BP_StartHallucination::Config' has a wrong offset!");

// Function OPP.RBPlayer.BP_StopCameraShake
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_BP_StopCameraShake final
{
public:
	bool                                          bInstantly;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2255[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ShakeOwner;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreOwnerCondition;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2256[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_BP_StopCameraShake) == 0x000008, "Wrong alignment on RBPlayer_BP_StopCameraShake");
static_assert(sizeof(RBPlayer_BP_StopCameraShake) == 0x000018, "Wrong size on RBPlayer_BP_StopCameraShake");
static_assert(offsetof(RBPlayer_BP_StopCameraShake, bInstantly) == 0x000000, "Member 'RBPlayer_BP_StopCameraShake::bInstantly' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_StopCameraShake, ShakeOwner) == 0x000008, "Member 'RBPlayer_BP_StopCameraShake::ShakeOwner' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_StopCameraShake, bIgnoreOwnerCondition) == 0x000010, "Member 'RBPlayer_BP_StopCameraShake::bIgnoreOwnerCondition' has a wrong offset!");

// Function OPP.RBPlayer.BP_StopDizziness
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_StopDizziness final
{
public:
	bool                                          bFadeOut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_StopDizziness) == 0x000001, "Wrong alignment on RBPlayer_BP_StopDizziness");
static_assert(sizeof(RBPlayer_BP_StopDizziness) == 0x000001, "Wrong size on RBPlayer_BP_StopDizziness");
static_assert(offsetof(RBPlayer_BP_StopDizziness, bFadeOut) == 0x000000, "Member 'RBPlayer_BP_StopDizziness::bFadeOut' has a wrong offset!");

// Function OPP.RBPlayer.BP_StopHallucination
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_StopHallucination final
{
public:
	bool                                          bFadeOut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_StopHallucination) == 0x000001, "Wrong alignment on RBPlayer_BP_StopHallucination");
static_assert(sizeof(RBPlayer_BP_StopHallucination) == 0x000001, "Wrong size on RBPlayer_BP_StopHallucination");
static_assert(offsetof(RBPlayer_BP_StopHallucination, bFadeOut) == 0x000000, "Member 'RBPlayer_BP_StopHallucination::bFadeOut' has a wrong offset!");

// Function OPP.RBPlayer.BP_TestHitReaction
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_BP_TestHitReaction final
{
public:
	EPlayerHitReactionType                        HitReactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2257[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitDirection;                                      // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_TestHitReaction) == 0x000004, "Wrong alignment on RBPlayer_BP_TestHitReaction");
static_assert(sizeof(RBPlayer_BP_TestHitReaction) == 0x000010, "Wrong size on RBPlayer_BP_TestHitReaction");
static_assert(offsetof(RBPlayer_BP_TestHitReaction, HitReactionType) == 0x000000, "Member 'RBPlayer_BP_TestHitReaction::HitReactionType' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_TestHitReaction, HitDirection) == 0x000004, "Member 'RBPlayer_BP_TestHitReaction::HitDirection' has a wrong offset!");

// Function OPP.RBPlayer.ClearInventory_Server
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_ClearInventory_Server final
{
public:
	bool                                          bIncludeActiveSkill;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_ClearInventory_Server) == 0x000001, "Wrong alignment on RBPlayer_ClearInventory_Server");
static_assert(sizeof(RBPlayer_ClearInventory_Server) == 0x000001, "Wrong size on RBPlayer_ClearInventory_Server");
static_assert(offsetof(RBPlayer_ClearInventory_Server, bIncludeActiveSkill) == 0x000000, "Member 'RBPlayer_ClearInventory_Server::bIncludeActiveSkill' has a wrong offset!");

// Function OPP.RBPlayer.Client_ForceNightVision
// 0x0002 (0x0002 - 0x0000)
struct RBPlayer_Client_ForceNightVision final
{
public:
	bool                                          bNVState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInput;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Client_ForceNightVision) == 0x000001, "Wrong alignment on RBPlayer_Client_ForceNightVision");
static_assert(sizeof(RBPlayer_Client_ForceNightVision) == 0x000002, "Wrong size on RBPlayer_Client_ForceNightVision");
static_assert(offsetof(RBPlayer_Client_ForceNightVision, bNVState) == 0x000000, "Member 'RBPlayer_Client_ForceNightVision::bNVState' has a wrong offset!");
static_assert(offsetof(RBPlayer_Client_ForceNightVision, bDisableInput) == 0x000001, "Member 'RBPlayer_Client_ForceNightVision::bDisableInput' has a wrong offset!");

// Function OPP.RBPlayer.Client_OnRepossessed
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_Client_OnRepossessed final
{
public:
	float                                         PawnTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Client_OnRepossessed) == 0x000004, "Wrong alignment on RBPlayer_Client_OnRepossessed");
static_assert(sizeof(RBPlayer_Client_OnRepossessed) == 0x000004, "Wrong size on RBPlayer_Client_OnRepossessed");
static_assert(offsetof(RBPlayer_Client_OnRepossessed, PawnTime) == 0x000000, "Member 'RBPlayer_Client_OnRepossessed::PawnTime' has a wrong offset!");

// Function OPP.RBPlayer.Client_RemoveObjectiveIcon
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Client_RemoveObjectiveIcon final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Client_RemoveObjectiveIcon) == 0x000008, "Wrong alignment on RBPlayer_Client_RemoveObjectiveIcon");
static_assert(sizeof(RBPlayer_Client_RemoveObjectiveIcon) == 0x000008, "Wrong size on RBPlayer_Client_RemoveObjectiveIcon");
static_assert(offsetof(RBPlayer_Client_RemoveObjectiveIcon, InActor) == 0x000000, "Member 'RBPlayer_Client_RemoveObjectiveIcon::InActor' has a wrong offset!");

// Function OPP.RBPlayer.Client_ShowCustomInteractionMessage
// 0x0020 (0x0020 - 0x0000)
struct RBPlayer_Client_ShowCustomInteractionMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	EMessagePriority                              Priority;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2258[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Client_ShowCustomInteractionMessage) == 0x000008, "Wrong alignment on RBPlayer_Client_ShowCustomInteractionMessage");
static_assert(sizeof(RBPlayer_Client_ShowCustomInteractionMessage) == 0x000020, "Wrong size on RBPlayer_Client_ShowCustomInteractionMessage");
static_assert(offsetof(RBPlayer_Client_ShowCustomInteractionMessage, Message) == 0x000000, "Member 'RBPlayer_Client_ShowCustomInteractionMessage::Message' has a wrong offset!");
static_assert(offsetof(RBPlayer_Client_ShowCustomInteractionMessage, Priority) == 0x000018, "Member 'RBPlayer_Client_ShowCustomInteractionMessage::Priority' has a wrong offset!");
static_assert(offsetof(RBPlayer_Client_ShowCustomInteractionMessage, Duration) == 0x00001C, "Member 'RBPlayer_Client_ShowCustomInteractionMessage::Duration' has a wrong offset!");

// Function OPP.RBPlayer.Client_ShowPeriodicHazardTutorial
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Client_ShowPeriodicHazardTutorial final
{
public:
	bool                                          bKnockedDown;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Client_ShowPeriodicHazardTutorial) == 0x000001, "Wrong alignment on RBPlayer_Client_ShowPeriodicHazardTutorial");
static_assert(sizeof(RBPlayer_Client_ShowPeriodicHazardTutorial) == 0x000001, "Wrong size on RBPlayer_Client_ShowPeriodicHazardTutorial");
static_assert(offsetof(RBPlayer_Client_ShowPeriodicHazardTutorial, bKnockedDown) == 0x000000, "Member 'RBPlayer_Client_ShowPeriodicHazardTutorial::bKnockedDown' has a wrong offset!");

// Function OPP.RBPlayer.Event_OnActiveEffectAdded
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Event_OnActiveEffectAdded final
{
public:
	struct FActiveEffectTrackingData              ActiveEffectTrackingDataEntry;                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Event_OnActiveEffectAdded) == 0x000004, "Wrong alignment on RBPlayer_Event_OnActiveEffectAdded");
static_assert(sizeof(RBPlayer_Event_OnActiveEffectAdded) == 0x000010, "Wrong size on RBPlayer_Event_OnActiveEffectAdded");
static_assert(offsetof(RBPlayer_Event_OnActiveEffectAdded, ActiveEffectTrackingDataEntry) == 0x000000, "Member 'RBPlayer_Event_OnActiveEffectAdded::ActiveEffectTrackingDataEntry' has a wrong offset!");

// Function OPP.RBPlayer.Event_OnActiveEffectRemoved
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Event_OnActiveEffectRemoved final
{
public:
	class FName                                   EffectId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Event_OnActiveEffectRemoved) == 0x000004, "Wrong alignment on RBPlayer_Event_OnActiveEffectRemoved");
static_assert(sizeof(RBPlayer_Event_OnActiveEffectRemoved) == 0x000008, "Wrong size on RBPlayer_Event_OnActiveEffectRemoved");
static_assert(offsetof(RBPlayer_Event_OnActiveEffectRemoved, EffectId) == 0x000000, "Member 'RBPlayer_Event_OnActiveEffectRemoved::EffectId' has a wrong offset!");

// Function OPP.RBPlayer.Event_OnActiveEffectUpdated
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Event_OnActiveEffectUpdated final
{
public:
	struct FActiveEffectTrackingData              ActiveEffectTrackingDataEntry;                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Event_OnActiveEffectUpdated) == 0x000004, "Wrong alignment on RBPlayer_Event_OnActiveEffectUpdated");
static_assert(sizeof(RBPlayer_Event_OnActiveEffectUpdated) == 0x000010, "Wrong size on RBPlayer_Event_OnActiveEffectUpdated");
static_assert(offsetof(RBPlayer_Event_OnActiveEffectUpdated, ActiveEffectTrackingDataEntry) == 0x000000, "Member 'RBPlayer_Event_OnActiveEffectUpdated::ActiveEffectTrackingDataEntry' has a wrong offset!");

// Function OPP.RBPlayer.Event_OnActiveSkillActorChanged
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Event_OnActiveSkillActorChanged final
{
public:
	class AActor*                                 Param_ActiveSkillActor;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Event_OnActiveSkillActorChanged) == 0x000008, "Wrong alignment on RBPlayer_Event_OnActiveSkillActorChanged");
static_assert(sizeof(RBPlayer_Event_OnActiveSkillActorChanged) == 0x000008, "Wrong size on RBPlayer_Event_OnActiveSkillActorChanged");
static_assert(offsetof(RBPlayer_Event_OnActiveSkillActorChanged, Param_ActiveSkillActor) == 0x000000, "Member 'RBPlayer_Event_OnActiveSkillActorChanged::Param_ActiveSkillActor' has a wrong offset!");

// Function OPP.RBPlayer.Event_OnLastConsumedBatteryTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Event_OnLastConsumedBatteryTypeChanged final
{
public:
	EItemType                                     batteryType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Event_OnLastConsumedBatteryTypeChanged) == 0x000001, "Wrong alignment on RBPlayer_Event_OnLastConsumedBatteryTypeChanged");
static_assert(sizeof(RBPlayer_Event_OnLastConsumedBatteryTypeChanged) == 0x000001, "Wrong size on RBPlayer_Event_OnLastConsumedBatteryTypeChanged");
static_assert(offsetof(RBPlayer_Event_OnLastConsumedBatteryTypeChanged, batteryType) == 0x000000, "Member 'RBPlayer_Event_OnLastConsumedBatteryTypeChanged::batteryType' has a wrong offset!");

// Function OPP.RBPlayer.Event_OnNVAnimationNotify
// 0x0002 (0x0002 - 0x0000)
struct RBPlayer_Event_OnNVAnimationNotify final
{
public:
	bool                                          bWantsNvOn;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENightVisionAnimNotifyType                    Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Event_OnNVAnimationNotify) == 0x000001, "Wrong alignment on RBPlayer_Event_OnNVAnimationNotify");
static_assert(sizeof(RBPlayer_Event_OnNVAnimationNotify) == 0x000002, "Wrong size on RBPlayer_Event_OnNVAnimationNotify");
static_assert(offsetof(RBPlayer_Event_OnNVAnimationNotify, bWantsNvOn) == 0x000000, "Member 'RBPlayer_Event_OnNVAnimationNotify::bWantsNvOn' has a wrong offset!");
static_assert(offsetof(RBPlayer_Event_OnNVAnimationNotify, Type) == 0x000001, "Member 'RBPlayer_Event_OnNVAnimationNotify::Type' has a wrong offset!");

// Function OPP.RBPlayer.Event_PlayHitReactionEffects
// 0x0058 (0x0058 - 0x0000)
struct RBPlayer_Event_PlayHitReactionEffects final
{
public:
	struct FPlayerHitReactionParams               HitReaction;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AttackLoc;                                         // 0x0048(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitRelativeAngle;                                  // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Event_PlayHitReactionEffects) == 0x000008, "Wrong alignment on RBPlayer_Event_PlayHitReactionEffects");
static_assert(sizeof(RBPlayer_Event_PlayHitReactionEffects) == 0x000058, "Wrong size on RBPlayer_Event_PlayHitReactionEffects");
static_assert(offsetof(RBPlayer_Event_PlayHitReactionEffects, HitReaction) == 0x000000, "Member 'RBPlayer_Event_PlayHitReactionEffects::HitReaction' has a wrong offset!");
static_assert(offsetof(RBPlayer_Event_PlayHitReactionEffects, AttackLoc) == 0x000048, "Member 'RBPlayer_Event_PlayHitReactionEffects::AttackLoc' has a wrong offset!");
static_assert(offsetof(RBPlayer_Event_PlayHitReactionEffects, HitRelativeAngle) == 0x000054, "Member 'RBPlayer_Event_PlayHitReactionEffects::HitRelativeAngle' has a wrong offset!");

// Function OPP.RBPlayer.ForceNightVision
// 0x0002 (0x0002 - 0x0000)
struct RBPlayer_ForceNightVision final
{
public:
	bool                                          bNVState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInput;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_ForceNightVision) == 0x000001, "Wrong alignment on RBPlayer_ForceNightVision");
static_assert(sizeof(RBPlayer_ForceNightVision) == 0x000002, "Wrong size on RBPlayer_ForceNightVision");
static_assert(offsetof(RBPlayer_ForceNightVision, bNVState) == 0x000000, "Member 'RBPlayer_ForceNightVision::bNVState' has a wrong offset!");
static_assert(offsetof(RBPlayer_ForceNightVision, bDisableInput) == 0x000001, "Member 'RBPlayer_ForceNightVision::bDisableInput' has a wrong offset!");

// Function OPP.RBPlayer.LogPlayerEvent_Server
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_LogPlayerEvent_Server final
{
public:
	EPlayerEvent                                  EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2259[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExplicitValue;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_LogPlayerEvent_Server) == 0x000004, "Wrong alignment on RBPlayer_LogPlayerEvent_Server");
static_assert(sizeof(RBPlayer_LogPlayerEvent_Server) == 0x000008, "Wrong size on RBPlayer_LogPlayerEvent_Server");
static_assert(offsetof(RBPlayer_LogPlayerEvent_Server, EventType) == 0x000000, "Member 'RBPlayer_LogPlayerEvent_Server::EventType' has a wrong offset!");
static_assert(offsetof(RBPlayer_LogPlayerEvent_Server, ExplicitValue) == 0x000004, "Member 'RBPlayer_LogPlayerEvent_Server::ExplicitValue' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_ActivateCameraShake
// 0x00A8 (0x00A8 - 0x0000)
struct RBPlayer_Multicast_ActivateCameraShake final
{
public:
	struct FCameraShakeData                       ShakeData;                                         // 0x0000(0x0090)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SourceLocation;                                    // 0x0090(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225A[0x4];                                     // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ShakeOwner;                                        // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_ActivateCameraShake) == 0x000008, "Wrong alignment on RBPlayer_Multicast_ActivateCameraShake");
static_assert(sizeof(RBPlayer_Multicast_ActivateCameraShake) == 0x0000A8, "Wrong size on RBPlayer_Multicast_ActivateCameraShake");
static_assert(offsetof(RBPlayer_Multicast_ActivateCameraShake, ShakeData) == 0x000000, "Member 'RBPlayer_Multicast_ActivateCameraShake::ShakeData' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_ActivateCameraShake, SourceLocation) == 0x000090, "Member 'RBPlayer_Multicast_ActivateCameraShake::SourceLocation' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_ActivateCameraShake, ShakeOwner) == 0x0000A0, "Member 'RBPlayer_Multicast_ActivateCameraShake::ShakeOwner' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_AddPingForDroppedItem
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_Multicast_AddPingForDroppedItem final
{
public:
	class ARBPickup*                              DroppedItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PingLocation;                                      // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225B[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_AddPingForDroppedItem) == 0x000008, "Wrong alignment on RBPlayer_Multicast_AddPingForDroppedItem");
static_assert(sizeof(RBPlayer_Multicast_AddPingForDroppedItem) == 0x000018, "Wrong size on RBPlayer_Multicast_AddPingForDroppedItem");
static_assert(offsetof(RBPlayer_Multicast_AddPingForDroppedItem, DroppedItem) == 0x000000, "Member 'RBPlayer_Multicast_AddPingForDroppedItem::DroppedItem' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_AddPingForDroppedItem, PingLocation) == 0x000008, "Member 'RBPlayer_Multicast_AddPingForDroppedItem::PingLocation' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_ChallengeArmWrestlingPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Multicast_ChallengeArmWrestlingPlayer final
{
public:
	class ARBPlayer*                              ChallengedPlayer;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_ChallengeArmWrestlingPlayer) == 0x000008, "Wrong alignment on RBPlayer_Multicast_ChallengeArmWrestlingPlayer");
static_assert(sizeof(RBPlayer_Multicast_ChallengeArmWrestlingPlayer) == 0x000008, "Wrong size on RBPlayer_Multicast_ChallengeArmWrestlingPlayer");
static_assert(offsetof(RBPlayer_Multicast_ChallengeArmWrestlingPlayer, ChallengedPlayer) == 0x000000, "Member 'RBPlayer_Multicast_ChallengeArmWrestlingPlayer::ChallengedPlayer' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_Cheat_ToggleInvisibleToBots
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Multicast_Cheat_ToggleInvisibleToBots final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_Cheat_ToggleInvisibleToBots) == 0x000001, "Wrong alignment on RBPlayer_Multicast_Cheat_ToggleInvisibleToBots");
static_assert(sizeof(RBPlayer_Multicast_Cheat_ToggleInvisibleToBots) == 0x000001, "Wrong size on RBPlayer_Multicast_Cheat_ToggleInvisibleToBots");
static_assert(offsetof(RBPlayer_Multicast_Cheat_ToggleInvisibleToBots, bEnabled) == 0x000000, "Member 'RBPlayer_Multicast_Cheat_ToggleInvisibleToBots::bEnabled' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_Cheat_ToggleSilentForBots
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Multicast_Cheat_ToggleSilentForBots final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_Cheat_ToggleSilentForBots) == 0x000001, "Wrong alignment on RBPlayer_Multicast_Cheat_ToggleSilentForBots");
static_assert(sizeof(RBPlayer_Multicast_Cheat_ToggleSilentForBots) == 0x000001, "Wrong size on RBPlayer_Multicast_Cheat_ToggleSilentForBots");
static_assert(offsetof(RBPlayer_Multicast_Cheat_ToggleSilentForBots, bEnabled) == 0x000000, "Member 'RBPlayer_Multicast_Cheat_ToggleSilentForBots::bEnabled' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_Command
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Multicast_Command final
{
public:
	class FString                                 MulticastCommand;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_Command) == 0x000008, "Wrong alignment on RBPlayer_Multicast_Command");
static_assert(sizeof(RBPlayer_Multicast_Command) == 0x000010, "Wrong size on RBPlayer_Multicast_Command");
static_assert(offsetof(RBPlayer_Multicast_Command, MulticastCommand) == 0x000000, "Member 'RBPlayer_Multicast_Command::MulticastCommand' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_ConsumeInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Multicast_ConsumeInventoryItem final
{
public:
	class ARBPickup*                              PickupItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_ConsumeInventoryItem) == 0x000008, "Wrong alignment on RBPlayer_Multicast_ConsumeInventoryItem");
static_assert(sizeof(RBPlayer_Multicast_ConsumeInventoryItem) == 0x000008, "Wrong size on RBPlayer_Multicast_ConsumeInventoryItem");
static_assert(offsetof(RBPlayer_Multicast_ConsumeInventoryItem, PickupItem) == 0x000000, "Member 'RBPlayer_Multicast_ConsumeInventoryItem::PickupItem' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_ConsumeStaminaItem
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Multicast_ConsumeStaminaItem final
{
public:
	float                                         StartPawnTimestamp;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoStaminaConsumptionDuration;                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaminaRestoreAmount;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementSpeedMultiplier;                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_ConsumeStaminaItem) == 0x000004, "Wrong alignment on RBPlayer_Multicast_ConsumeStaminaItem");
static_assert(sizeof(RBPlayer_Multicast_ConsumeStaminaItem) == 0x000010, "Wrong size on RBPlayer_Multicast_ConsumeStaminaItem");
static_assert(offsetof(RBPlayer_Multicast_ConsumeStaminaItem, StartPawnTimestamp) == 0x000000, "Member 'RBPlayer_Multicast_ConsumeStaminaItem::StartPawnTimestamp' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_ConsumeStaminaItem, NoStaminaConsumptionDuration) == 0x000004, "Member 'RBPlayer_Multicast_ConsumeStaminaItem::NoStaminaConsumptionDuration' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_ConsumeStaminaItem, StaminaRestoreAmount) == 0x000008, "Member 'RBPlayer_Multicast_ConsumeStaminaItem::StaminaRestoreAmount' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_ConsumeStaminaItem, MovementSpeedMultiplier) == 0x00000C, "Member 'RBPlayer_Multicast_ConsumeStaminaItem::MovementSpeedMultiplier' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_DebugInventory
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Multicast_DebugInventory final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_DebugInventory) == 0x000001, "Wrong alignment on RBPlayer_Multicast_DebugInventory");
static_assert(sizeof(RBPlayer_Multicast_DebugInventory) == 0x000001, "Wrong size on RBPlayer_Multicast_DebugInventory");
static_assert(offsetof(RBPlayer_Multicast_DebugInventory, bEnabled) == 0x000000, "Member 'RBPlayer_Multicast_DebugInventory::bEnabled' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_DisplayDeadbodyIcon
// 0x000C (0x000C - 0x0000)
struct RBPlayer_Multicast_DisplayDeadbodyIcon final
{
public:
	struct FVector                                DeadbodyLocation;                                  // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_DisplayDeadbodyIcon) == 0x000004, "Wrong alignment on RBPlayer_Multicast_DisplayDeadbodyIcon");
static_assert(sizeof(RBPlayer_Multicast_DisplayDeadbodyIcon) == 0x00000C, "Wrong size on RBPlayer_Multicast_DisplayDeadbodyIcon");
static_assert(offsetof(RBPlayer_Multicast_DisplayDeadbodyIcon, DeadbodyLocation) == 0x000000, "Member 'RBPlayer_Multicast_DisplayDeadbodyIcon::DeadbodyLocation' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_DoItemPickup
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Multicast_DoItemPickup final
{
public:
	class ARBPickup*                              PickupItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_DoItemPickup) == 0x000008, "Wrong alignment on RBPlayer_Multicast_DoItemPickup");
static_assert(sizeof(RBPlayer_Multicast_DoItemPickup) == 0x000008, "Wrong size on RBPlayer_Multicast_DoItemPickup");
static_assert(offsetof(RBPlayer_Multicast_DoItemPickup, PickupItem) == 0x000000, "Member 'RBPlayer_Multicast_DoItemPickup::PickupItem' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_DoShove
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Multicast_DoShove final
{
public:
	struct FPlayerShoveData                       Param_PlayerShove;                                 // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_DoShove) == 0x000008, "Wrong alignment on RBPlayer_Multicast_DoShove");
static_assert(sizeof(RBPlayer_Multicast_DoShove) == 0x000010, "Wrong size on RBPlayer_Multicast_DoShove");
static_assert(offsetof(RBPlayer_Multicast_DoShove, Param_PlayerShove) == 0x000000, "Member 'RBPlayer_Multicast_DoShove::Param_PlayerShove' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_DrawDebugBox
// 0x0040 (0x0040 - 0x0000)
struct RBPlayer_Multicast_DrawDebugBox final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225C[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0010)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225D[0x8];                                     // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_DrawDebugBox) == 0x000010, "Wrong alignment on RBPlayer_Multicast_DrawDebugBox");
static_assert(sizeof(RBPlayer_Multicast_DrawDebugBox) == 0x000040, "Wrong size on RBPlayer_Multicast_DrawDebugBox");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugBox, Location) == 0x000000, "Member 'RBPlayer_Multicast_DrawDebugBox::Location' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugBox, Extent) == 0x00000C, "Member 'RBPlayer_Multicast_DrawDebugBox::Extent' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugBox, Rotation) == 0x000020, "Member 'RBPlayer_Multicast_DrawDebugBox::Rotation' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugBox, Color) == 0x000030, "Member 'RBPlayer_Multicast_DrawDebugBox::Color' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugBox, Duration) == 0x000034, "Member 'RBPlayer_Multicast_DrawDebugBox::Duration' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_DrawDebugLine
// 0x0020 (0x0020 - 0x0000)
struct RBPlayer_Multicast_DrawDebugLine final
{
public:
	struct FVector                                LocationA;                                         // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationB;                                         // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_DrawDebugLine) == 0x000004, "Wrong alignment on RBPlayer_Multicast_DrawDebugLine");
static_assert(sizeof(RBPlayer_Multicast_DrawDebugLine) == 0x000020, "Wrong size on RBPlayer_Multicast_DrawDebugLine");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugLine, LocationA) == 0x000000, "Member 'RBPlayer_Multicast_DrawDebugLine::LocationA' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugLine, LocationB) == 0x00000C, "Member 'RBPlayer_Multicast_DrawDebugLine::LocationB' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugLine, Color) == 0x000018, "Member 'RBPlayer_Multicast_DrawDebugLine::Color' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugLine, Duration) == 0x00001C, "Member 'RBPlayer_Multicast_DrawDebugLine::Duration' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_DrawDebugSphere
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_Multicast_DrawDebugSphere final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_DrawDebugSphere) == 0x000004, "Wrong alignment on RBPlayer_Multicast_DrawDebugSphere");
static_assert(sizeof(RBPlayer_Multicast_DrawDebugSphere) == 0x000018, "Wrong size on RBPlayer_Multicast_DrawDebugSphere");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugSphere, Location) == 0x000000, "Member 'RBPlayer_Multicast_DrawDebugSphere::Location' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugSphere, Radius) == 0x00000C, "Member 'RBPlayer_Multicast_DrawDebugSphere::Radius' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugSphere, Color) == 0x000010, "Member 'RBPlayer_Multicast_DrawDebugSphere::Color' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawDebugSphere, Duration) == 0x000014, "Member 'RBPlayer_Multicast_DrawDebugSphere::Duration' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_DrawStimulusDebug
// 0x0028 (0x0028 - 0x0000)
struct RBPlayer_Multicast_DrawStimulusDebug final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SourceActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStimulusType                                 StimulusType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_225F[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Range;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPerceived;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2260[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_DrawStimulusDebug) == 0x000008, "Wrong alignment on RBPlayer_Multicast_DrawStimulusDebug");
static_assert(sizeof(RBPlayer_Multicast_DrawStimulusDebug) == 0x000028, "Wrong size on RBPlayer_Multicast_DrawStimulusDebug");
static_assert(offsetof(RBPlayer_Multicast_DrawStimulusDebug, Location) == 0x000000, "Member 'RBPlayer_Multicast_DrawStimulusDebug::Location' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawStimulusDebug, SourceActor) == 0x000010, "Member 'RBPlayer_Multicast_DrawStimulusDebug::SourceActor' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawStimulusDebug, StimulusType) == 0x000018, "Member 'RBPlayer_Multicast_DrawStimulusDebug::StimulusType' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawStimulusDebug, Range) == 0x00001C, "Member 'RBPlayer_Multicast_DrawStimulusDebug::Range' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_DrawStimulusDebug, bIsPerceived) == 0x000020, "Member 'RBPlayer_Multicast_DrawStimulusDebug::bIsPerceived' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_EnterGroundAndPoundVictim
// 0x0028 (0x0028 - 0x0000)
struct RBPlayer_Multicast_EnterGroundAndPoundVictim final
{
public:
	class ARBPawn*                                Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AmbushDir;                                         // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        PlayerAnimBS;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_EnterGroundAndPoundVictim) == 0x000008, "Wrong alignment on RBPlayer_Multicast_EnterGroundAndPoundVictim");
static_assert(sizeof(RBPlayer_Multicast_EnterGroundAndPoundVictim) == 0x000028, "Wrong size on RBPlayer_Multicast_EnterGroundAndPoundVictim");
static_assert(offsetof(RBPlayer_Multicast_EnterGroundAndPoundVictim, Attacker) == 0x000000, "Member 'RBPlayer_Multicast_EnterGroundAndPoundVictim::Attacker' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_EnterGroundAndPoundVictim, TargetPos) == 0x000008, "Member 'RBPlayer_Multicast_EnterGroundAndPoundVictim::TargetPos' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_EnterGroundAndPoundVictim, AmbushDir) == 0x000014, "Member 'RBPlayer_Multicast_EnterGroundAndPoundVictim::AmbushDir' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_EnterGroundAndPoundVictim, PlayerAnimBS) == 0x000020, "Member 'RBPlayer_Multicast_EnterGroundAndPoundVictim::PlayerAnimBS' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_ExitGroundAndPound
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Multicast_ExitGroundAndPound final
{
public:
	ESpecialMove                                  PlayerSM;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageResultType                             DamageResult;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2261[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          PlayerExitAnimSeq;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_ExitGroundAndPound) == 0x000008, "Wrong alignment on RBPlayer_Multicast_ExitGroundAndPound");
static_assert(sizeof(RBPlayer_Multicast_ExitGroundAndPound) == 0x000010, "Wrong size on RBPlayer_Multicast_ExitGroundAndPound");
static_assert(offsetof(RBPlayer_Multicast_ExitGroundAndPound, PlayerSM) == 0x000000, "Member 'RBPlayer_Multicast_ExitGroundAndPound::PlayerSM' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_ExitGroundAndPound, DamageResult) == 0x000001, "Member 'RBPlayer_Multicast_ExitGroundAndPound::DamageResult' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_ExitGroundAndPound, PlayerExitAnimSeq) == 0x000008, "Member 'RBPlayer_Multicast_ExitGroundAndPound::PlayerExitAnimSeq' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_GainCurrency
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Multicast_GainCurrency final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2262[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_GainCurrency) == 0x000004, "Wrong alignment on RBPlayer_Multicast_GainCurrency");
static_assert(sizeof(RBPlayer_Multicast_GainCurrency) == 0x000008, "Wrong size on RBPlayer_Multicast_GainCurrency");
static_assert(offsetof(RBPlayer_Multicast_GainCurrency, CurrencyType) == 0x000000, "Member 'RBPlayer_Multicast_GainCurrency::CurrencyType' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_GainCurrency, Amount) == 0x000004, "Member 'RBPlayer_Multicast_GainCurrency::Amount' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_GhostPawn
// 0x001C (0x001C - 0x0000)
struct RBPlayer_Multicast_GhostPawn final
{
public:
	bool                                          bGhost;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2263[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CamLoc;                                            // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CamRot;                                            // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_GhostPawn) == 0x000004, "Wrong alignment on RBPlayer_Multicast_GhostPawn");
static_assert(sizeof(RBPlayer_Multicast_GhostPawn) == 0x00001C, "Wrong size on RBPlayer_Multicast_GhostPawn");
static_assert(offsetof(RBPlayer_Multicast_GhostPawn, bGhost) == 0x000000, "Member 'RBPlayer_Multicast_GhostPawn::bGhost' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_GhostPawn, CamLoc) == 0x000004, "Member 'RBPlayer_Multicast_GhostPawn::CamLoc' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_GhostPawn, CamRot) == 0x000010, "Member 'RBPlayer_Multicast_GhostPawn::CamRot' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_HitReaction
// 0x0050 (0x0050 - 0x0000)
struct RBPlayer_Multicast_HitReaction final
{
public:
	struct FPlayerHitReactionParams               HitReaction;                                       // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSchedule;                                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2264[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_HitReaction) == 0x000008, "Wrong alignment on RBPlayer_Multicast_HitReaction");
static_assert(sizeof(RBPlayer_Multicast_HitReaction) == 0x000050, "Wrong size on RBPlayer_Multicast_HitReaction");
static_assert(offsetof(RBPlayer_Multicast_HitReaction, HitReaction) == 0x000000, "Member 'RBPlayer_Multicast_HitReaction::HitReaction' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_HitReaction, bSchedule) == 0x000048, "Member 'RBPlayer_Multicast_HitReaction::bSchedule' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_InteractDynamicObstacle
// 0x0020 (0x0020 - 0x0000)
struct RBPlayer_Multicast_InteractDynamicObstacle final
{
public:
	class ARBDynamicObstacle*                     Obstacle;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CharLocationRef;                                   // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MovementAcceleration;                              // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_InteractDynamicObstacle) == 0x000008, "Wrong alignment on RBPlayer_Multicast_InteractDynamicObstacle");
static_assert(sizeof(RBPlayer_Multicast_InteractDynamicObstacle) == 0x000020, "Wrong size on RBPlayer_Multicast_InteractDynamicObstacle");
static_assert(offsetof(RBPlayer_Multicast_InteractDynamicObstacle, Obstacle) == 0x000000, "Member 'RBPlayer_Multicast_InteractDynamicObstacle::Obstacle' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_InteractDynamicObstacle, CharLocationRef) == 0x000008, "Member 'RBPlayer_Multicast_InteractDynamicObstacle::CharLocationRef' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_InteractDynamicObstacle, MovementAcceleration) == 0x000014, "Member 'RBPlayer_Multicast_InteractDynamicObstacle::MovementAcceleration' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_OnExhaustedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Multicast_OnExhaustedStateChanged final
{
public:
	bool                                          bNewExhaustedState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_OnExhaustedStateChanged) == 0x000001, "Wrong alignment on RBPlayer_Multicast_OnExhaustedStateChanged");
static_assert(sizeof(RBPlayer_Multicast_OnExhaustedStateChanged) == 0x000001, "Wrong size on RBPlayer_Multicast_OnExhaustedStateChanged");
static_assert(offsetof(RBPlayer_Multicast_OnExhaustedStateChanged, bNewExhaustedState) == 0x000000, "Member 'RBPlayer_Multicast_OnExhaustedStateChanged::bNewExhaustedState' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_OnKnockedDown
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Multicast_OnKnockedDown final
{
public:
	class AActor*                                 KnockDownInstigator;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_OnKnockedDown) == 0x000008, "Wrong alignment on RBPlayer_Multicast_OnKnockedDown");
static_assert(sizeof(RBPlayer_Multicast_OnKnockedDown) == 0x000008, "Wrong size on RBPlayer_Multicast_OnKnockedDown");
static_assert(offsetof(RBPlayer_Multicast_OnKnockedDown, KnockDownInstigator) == 0x000000, "Member 'RBPlayer_Multicast_OnKnockedDown::KnockDownInstigator' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_PerformStandardFatality
// 0x0040 (0x0040 - 0x0000)
struct RBPlayer_Multicast_PerformStandardFatality final
{
public:
	struct FStandardFatalityData                  FatalityData;                                      // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_PerformStandardFatality) == 0x000008, "Wrong alignment on RBPlayer_Multicast_PerformStandardFatality");
static_assert(sizeof(RBPlayer_Multicast_PerformStandardFatality) == 0x000040, "Wrong size on RBPlayer_Multicast_PerformStandardFatality");
static_assert(offsetof(RBPlayer_Multicast_PerformStandardFatality, FatalityData) == 0x000000, "Member 'RBPlayer_Multicast_PerformStandardFatality::FatalityData' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_PickupLargeObject
// 0x0028 (0x0028 - 0x0000)
struct RBPlayer_Multicast_PickupLargeObject final
{
public:
	class ARBLargePickup*                         LargePickup;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELargeObjectPickupSubtype                     Subtype;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2265[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_PickupLargeObject) == 0x000008, "Wrong alignment on RBPlayer_Multicast_PickupLargeObject");
static_assert(sizeof(RBPlayer_Multicast_PickupLargeObject) == 0x000028, "Wrong size on RBPlayer_Multicast_PickupLargeObject");
static_assert(offsetof(RBPlayer_Multicast_PickupLargeObject, LargePickup) == 0x000000, "Member 'RBPlayer_Multicast_PickupLargeObject::LargePickup' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PickupLargeObject, Location) == 0x000008, "Member 'RBPlayer_Multicast_PickupLargeObject::Location' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PickupLargeObject, Forward) == 0x000014, "Member 'RBPlayer_Multicast_PickupLargeObject::Forward' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PickupLargeObject, Subtype) == 0x000020, "Member 'RBPlayer_Multicast_PickupLargeObject::Subtype' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_PlayGrabbed
// 0x0058 (0x0058 - 0x0000)
struct RBPlayer_Multicast_PlayGrabbed final
{
public:
	struct FPairedTwoPhaseAnimData                AnimData;                                          // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ARBNPC*                                 Attacker;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0040(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x004C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_PlayGrabbed) == 0x000008, "Wrong alignment on RBPlayer_Multicast_PlayGrabbed");
static_assert(sizeof(RBPlayer_Multicast_PlayGrabbed) == 0x000058, "Wrong size on RBPlayer_Multicast_PlayGrabbed");
static_assert(offsetof(RBPlayer_Multicast_PlayGrabbed, AnimData) == 0x000000, "Member 'RBPlayer_Multicast_PlayGrabbed::AnimData' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayGrabbed, Attacker) == 0x000038, "Member 'RBPlayer_Multicast_PlayGrabbed::Attacker' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayGrabbed, TargetPos) == 0x000040, "Member 'RBPlayer_Multicast_PlayGrabbed::TargetPos' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayGrabbed, TargetDir) == 0x00004C, "Member 'RBPlayer_Multicast_PlayGrabbed::TargetDir' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_PlayPulledFromHidespot
// 0x0060 (0x0060 - 0x0000)
struct RBPlayer_Multicast_PlayPulledFromHidespot final
{
public:
	struct FPairedTwoPhaseAnimData                AnimData;                                          // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ARBNPC*                                 Attacker;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBHidespotComponent*                   Hidespot;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPos;                                         // 0x0048(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetDir;                                         // 0x0054(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_PlayPulledFromHidespot) == 0x000008, "Wrong alignment on RBPlayer_Multicast_PlayPulledFromHidespot");
static_assert(sizeof(RBPlayer_Multicast_PlayPulledFromHidespot) == 0x000060, "Wrong size on RBPlayer_Multicast_PlayPulledFromHidespot");
static_assert(offsetof(RBPlayer_Multicast_PlayPulledFromHidespot, AnimData) == 0x000000, "Member 'RBPlayer_Multicast_PlayPulledFromHidespot::AnimData' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayPulledFromHidespot, Attacker) == 0x000038, "Member 'RBPlayer_Multicast_PlayPulledFromHidespot::Attacker' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayPulledFromHidespot, Hidespot) == 0x000040, "Member 'RBPlayer_Multicast_PlayPulledFromHidespot::Hidespot' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayPulledFromHidespot, TargetPos) == 0x000048, "Member 'RBPlayer_Multicast_PlayPulledFromHidespot::TargetPos' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayPulledFromHidespot, TargetDir) == 0x000054, "Member 'RBPlayer_Multicast_PlayPulledFromHidespot::TargetDir' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_PlayUpperBodyAnimation
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Multicast_PlayUpperBodyAnimation final
{
public:
	EUpperBodyAnimationType                       AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCameraRelative;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftArm;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRightArm;                                         // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngle;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_PlayUpperBodyAnimation) == 0x000004, "Wrong alignment on RBPlayer_Multicast_PlayUpperBodyAnimation");
static_assert(sizeof(RBPlayer_Multicast_PlayUpperBodyAnimation) == 0x000008, "Wrong size on RBPlayer_Multicast_PlayUpperBodyAnimation");
static_assert(offsetof(RBPlayer_Multicast_PlayUpperBodyAnimation, AnimType) == 0x000000, "Member 'RBPlayer_Multicast_PlayUpperBodyAnimation::AnimType' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayUpperBodyAnimation, bIsCameraRelative) == 0x000001, "Member 'RBPlayer_Multicast_PlayUpperBodyAnimation::bIsCameraRelative' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayUpperBodyAnimation, bLeftArm) == 0x000002, "Member 'RBPlayer_Multicast_PlayUpperBodyAnimation::bLeftArm' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayUpperBodyAnimation, bRightArm) == 0x000003, "Member 'RBPlayer_Multicast_PlayUpperBodyAnimation::bRightArm' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PlayUpperBodyAnimation, PitchAngle) == 0x000004, "Member 'RBPlayer_Multicast_PlayUpperBodyAnimation::PitchAngle' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_PutDownLargeObject
// 0x0040 (0x0040 - 0x0000)
struct RBPlayer_Multicast_PutDownLargeObject final
{
public:
	class ARBLargePickup*                         LargePickup;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2266[0xC];                                     // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0010)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bPredicted;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2267[0xF];                                     // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_PutDownLargeObject) == 0x000010, "Wrong alignment on RBPlayer_Multicast_PutDownLargeObject");
static_assert(sizeof(RBPlayer_Multicast_PutDownLargeObject) == 0x000040, "Wrong size on RBPlayer_Multicast_PutDownLargeObject");
static_assert(offsetof(RBPlayer_Multicast_PutDownLargeObject, LargePickup) == 0x000000, "Member 'RBPlayer_Multicast_PutDownLargeObject::LargePickup' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PutDownLargeObject, Location) == 0x000008, "Member 'RBPlayer_Multicast_PutDownLargeObject::Location' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PutDownLargeObject, Rotation) == 0x000020, "Member 'RBPlayer_Multicast_PutDownLargeObject::Rotation' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_PutDownLargeObject, bPredicted) == 0x000030, "Member 'RBPlayer_Multicast_PutDownLargeObject::bPredicted' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_QuickTest
// 0x000C (0x000C - 0x0000)
struct RBPlayer_Multicast_QuickTest final
{
public:
	struct FVector                                TestLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_QuickTest) == 0x000004, "Wrong alignment on RBPlayer_Multicast_QuickTest");
static_assert(sizeof(RBPlayer_Multicast_QuickTest) == 0x00000C, "Wrong size on RBPlayer_Multicast_QuickTest");
static_assert(offsetof(RBPlayer_Multicast_QuickTest, TestLocation) == 0x000000, "Member 'RBPlayer_Multicast_QuickTest::TestLocation' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_RemovePing
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Multicast_RemovePing final
{
public:
	EPlayerPingType                               PingType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_RemovePing) == 0x000001, "Wrong alignment on RBPlayer_Multicast_RemovePing");
static_assert(sizeof(RBPlayer_Multicast_RemovePing) == 0x000001, "Wrong size on RBPlayer_Multicast_RemovePing");
static_assert(offsetof(RBPlayer_Multicast_RemovePing, PingType) == 0x000000, "Member 'RBPlayer_Multicast_RemovePing::PingType' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_ScheduleCoopMove
// 0x0110 (0x0110 - 0x0000)
struct RBPlayer_Multicast_ScheduleCoopMove final
{
public:
	struct FCoopMoveData                          CoopMoveData;                                      // 0x0000(0x00A0)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FScheduledSpecialMoveData              ScheduledSpecialMoveData;                          // 0x00A0(0x0070)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_ScheduleCoopMove) == 0x000008, "Wrong alignment on RBPlayer_Multicast_ScheduleCoopMove");
static_assert(sizeof(RBPlayer_Multicast_ScheduleCoopMove) == 0x000110, "Wrong size on RBPlayer_Multicast_ScheduleCoopMove");
static_assert(offsetof(RBPlayer_Multicast_ScheduleCoopMove, CoopMoveData) == 0x000000, "Member 'RBPlayer_Multicast_ScheduleCoopMove::CoopMoveData' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_ScheduleCoopMove, ScheduledSpecialMoveData) == 0x0000A0, "Member 'RBPlayer_Multicast_ScheduleCoopMove::ScheduledSpecialMoveData' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_ScheduleStartCoopBash
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_Multicast_ScheduleStartCoopBash final
{
public:
	float                                         PawnTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_ScheduleStartCoopBash) == 0x000004, "Wrong alignment on RBPlayer_Multicast_ScheduleStartCoopBash");
static_assert(sizeof(RBPlayer_Multicast_ScheduleStartCoopBash) == 0x000004, "Wrong size on RBPlayer_Multicast_ScheduleStartCoopBash");
static_assert(offsetof(RBPlayer_Multicast_ScheduleStartCoopBash, PawnTime) == 0x000000, "Member 'RBPlayer_Multicast_ScheduleStartCoopBash::PawnTime' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_SetCoopMoveOfferingState
// 0x0020 (0x0020 - 0x0000)
struct RBPlayer_Multicast_SetCoopMoveOfferingState final
{
public:
	ECoopMoveOfferState                           CoopMoveOfferingState;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2268[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBLedgeMarker*                         LedgeMarker;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              SpecificPlayer;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECoopMoveType                                 CoopMoveOfferingType;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBasicDirection                               BasicDirection;                                    // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2269[0x6];                                     // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_SetCoopMoveOfferingState) == 0x000008, "Wrong alignment on RBPlayer_Multicast_SetCoopMoveOfferingState");
static_assert(sizeof(RBPlayer_Multicast_SetCoopMoveOfferingState) == 0x000020, "Wrong size on RBPlayer_Multicast_SetCoopMoveOfferingState");
static_assert(offsetof(RBPlayer_Multicast_SetCoopMoveOfferingState, CoopMoveOfferingState) == 0x000000, "Member 'RBPlayer_Multicast_SetCoopMoveOfferingState::CoopMoveOfferingState' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_SetCoopMoveOfferingState, LedgeMarker) == 0x000008, "Member 'RBPlayer_Multicast_SetCoopMoveOfferingState::LedgeMarker' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_SetCoopMoveOfferingState, SpecificPlayer) == 0x000010, "Member 'RBPlayer_Multicast_SetCoopMoveOfferingState::SpecificPlayer' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_SetCoopMoveOfferingState, CoopMoveOfferingType) == 0x000018, "Member 'RBPlayer_Multicast_SetCoopMoveOfferingState::CoopMoveOfferingType' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_SetCoopMoveOfferingState, BasicDirection) == 0x000019, "Member 'RBPlayer_Multicast_SetCoopMoveOfferingState::BasicDirection' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_SetGodMode
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Multicast_SetGodMode final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_SetGodMode) == 0x000001, "Wrong alignment on RBPlayer_Multicast_SetGodMode");
static_assert(sizeof(RBPlayer_Multicast_SetGodMode) == 0x000001, "Wrong size on RBPlayer_Multicast_SetGodMode");
static_assert(offsetof(RBPlayer_Multicast_SetGodMode, bEnabled) == 0x000000, "Member 'RBPlayer_Multicast_SetGodMode::bEnabled' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_SetPainKillerEffectsDuration
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_Multicast_SetPainKillerEffectsDuration final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_SetPainKillerEffectsDuration) == 0x000004, "Wrong alignment on RBPlayer_Multicast_SetPainKillerEffectsDuration");
static_assert(sizeof(RBPlayer_Multicast_SetPainKillerEffectsDuration) == 0x000004, "Wrong size on RBPlayer_Multicast_SetPainKillerEffectsDuration");
static_assert(offsetof(RBPlayer_Multicast_SetPainKillerEffectsDuration, Value) == 0x000000, "Member 'RBPlayer_Multicast_SetPainKillerEffectsDuration::Value' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_SetSpecialMoveCameraLimits
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Multicast_SetSpecialMoveCameraLimits final
{
public:
	float                                         MinYaw;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYaw;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitch;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitch;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_SetSpecialMoveCameraLimits) == 0x000004, "Wrong alignment on RBPlayer_Multicast_SetSpecialMoveCameraLimits");
static_assert(sizeof(RBPlayer_Multicast_SetSpecialMoveCameraLimits) == 0x000010, "Wrong size on RBPlayer_Multicast_SetSpecialMoveCameraLimits");
static_assert(offsetof(RBPlayer_Multicast_SetSpecialMoveCameraLimits, MinYaw) == 0x000000, "Member 'RBPlayer_Multicast_SetSpecialMoveCameraLimits::MinYaw' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_SetSpecialMoveCameraLimits, MaxYaw) == 0x000004, "Member 'RBPlayer_Multicast_SetSpecialMoveCameraLimits::MaxYaw' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_SetSpecialMoveCameraLimits, MinPitch) == 0x000008, "Member 'RBPlayer_Multicast_SetSpecialMoveCameraLimits::MinPitch' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_SetSpecialMoveCameraLimits, MaxPitch) == 0x00000C, "Member 'RBPlayer_Multicast_SetSpecialMoveCameraLimits::MaxPitch' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_SetTraversalData
// 0x0070 (0x0070 - 0x0000)
struct RBPlayer_Multicast_SetTraversalData final
{
public:
	struct FTraversalMoveData                     MoveData;                                          // 0x0000(0x0070)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_SetTraversalData) == 0x000008, "Wrong alignment on RBPlayer_Multicast_SetTraversalData");
static_assert(sizeof(RBPlayer_Multicast_SetTraversalData) == 0x000070, "Wrong size on RBPlayer_Multicast_SetTraversalData");
static_assert(offsetof(RBPlayer_Multicast_SetTraversalData, MoveData) == 0x000000, "Member 'RBPlayer_Multicast_SetTraversalData::MoveData' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_ShakeOffPushable
// 0x000C (0x000C - 0x0000)
struct RBPlayer_Multicast_ShakeOffPushable final
{
public:
	struct FVector                                PushedDir;                                         // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_ShakeOffPushable) == 0x000004, "Wrong alignment on RBPlayer_Multicast_ShakeOffPushable");
static_assert(sizeof(RBPlayer_Multicast_ShakeOffPushable) == 0x00000C, "Wrong size on RBPlayer_Multicast_ShakeOffPushable");
static_assert(offsetof(RBPlayer_Multicast_ShakeOffPushable, PushedDir) == 0x000000, "Member 'RBPlayer_Multicast_ShakeOffPushable::PushedDir' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_SpecialAnimation
// 0x0050 (0x0050 - 0x0000)
struct RBPlayer_Multicast_SpecialAnimation final
{
public:
	struct FScheduledSpecialAnimData              SpecialAnimData;                                   // 0x0000(0x0048)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EScriptedAnimationType                        ScriptedAnimType;                                  // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226A[0x7];                                     // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_SpecialAnimation) == 0x000008, "Wrong alignment on RBPlayer_Multicast_SpecialAnimation");
static_assert(sizeof(RBPlayer_Multicast_SpecialAnimation) == 0x000050, "Wrong size on RBPlayer_Multicast_SpecialAnimation");
static_assert(offsetof(RBPlayer_Multicast_SpecialAnimation, SpecialAnimData) == 0x000000, "Member 'RBPlayer_Multicast_SpecialAnimation::SpecialAnimData' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_SpecialAnimation, ScriptedAnimType) == 0x000048, "Member 'RBPlayer_Multicast_SpecialAnimation::ScriptedAnimType' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_StartDoorOperation
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Multicast_StartDoorOperation final
{
public:
	class ARBDoor*                                Door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_StartDoorOperation) == 0x000008, "Wrong alignment on RBPlayer_Multicast_StartDoorOperation");
static_assert(sizeof(RBPlayer_Multicast_StartDoorOperation) == 0x000008, "Wrong size on RBPlayer_Multicast_StartDoorOperation");
static_assert(offsetof(RBPlayer_Multicast_StartDoorOperation, Door) == 0x000000, "Member 'RBPlayer_Multicast_StartDoorOperation::Door' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_StartHallucination
// 0x0050 (0x0050 - 0x0000)
struct RBPlayer_Multicast_StartHallucination final
{
public:
	struct FHallucinationData                     HalluData;                                         // 0x0000(0x0050)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_StartHallucination) == 0x000008, "Wrong alignment on RBPlayer_Multicast_StartHallucination");
static_assert(sizeof(RBPlayer_Multicast_StartHallucination) == 0x000050, "Wrong size on RBPlayer_Multicast_StartHallucination");
static_assert(offsetof(RBPlayer_Multicast_StartHallucination, HalluData) == 0x000000, "Member 'RBPlayer_Multicast_StartHallucination::HalluData' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_StartVolumetricFogLightmapFade
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Multicast_StartVolumetricFogLightmapFade final
{
public:
	bool                                          bFadeIn;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_StartVolumetricFogLightmapFade) == 0x000001, "Wrong alignment on RBPlayer_Multicast_StartVolumetricFogLightmapFade");
static_assert(sizeof(RBPlayer_Multicast_StartVolumetricFogLightmapFade) == 0x000001, "Wrong size on RBPlayer_Multicast_StartVolumetricFogLightmapFade");
static_assert(offsetof(RBPlayer_Multicast_StartVolumetricFogLightmapFade, bFadeIn) == 0x000000, "Member 'RBPlayer_Multicast_StartVolumetricFogLightmapFade::bFadeIn' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_StopAdrenaline
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_Multicast_StopAdrenaline final
{
public:
	float                                         StopPawnTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_StopAdrenaline) == 0x000004, "Wrong alignment on RBPlayer_Multicast_StopAdrenaline");
static_assert(sizeof(RBPlayer_Multicast_StopAdrenaline) == 0x000004, "Wrong size on RBPlayer_Multicast_StopAdrenaline");
static_assert(offsetof(RBPlayer_Multicast_StopAdrenaline, StopPawnTime) == 0x000000, "Member 'RBPlayer_Multicast_StopAdrenaline::StopPawnTime' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_StopCameraShake
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_Multicast_StopCameraShake final
{
public:
	bool                                          bInstantly;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ShakeOwner;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreOwnerCondition;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_StopCameraShake) == 0x000008, "Wrong alignment on RBPlayer_Multicast_StopCameraShake");
static_assert(sizeof(RBPlayer_Multicast_StopCameraShake) == 0x000018, "Wrong size on RBPlayer_Multicast_StopCameraShake");
static_assert(offsetof(RBPlayer_Multicast_StopCameraShake, bInstantly) == 0x000000, "Member 'RBPlayer_Multicast_StopCameraShake::bInstantly' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_StopCameraShake, ShakeOwner) == 0x000008, "Member 'RBPlayer_Multicast_StopCameraShake::ShakeOwner' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_StopCameraShake, bIgnoreOwnerCondition) == 0x000010, "Member 'RBPlayer_Multicast_StopCameraShake::bIgnoreOwnerCondition' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_StopHallucination
// 0x0002 (0x0002 - 0x0000)
struct RBPlayer_Multicast_StopHallucination final
{
public:
	EHallucinationType                            HalluType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHallucinationFadeOutType                     FadeOutType;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_StopHallucination) == 0x000001, "Wrong alignment on RBPlayer_Multicast_StopHallucination");
static_assert(sizeof(RBPlayer_Multicast_StopHallucination) == 0x000002, "Wrong size on RBPlayer_Multicast_StopHallucination");
static_assert(offsetof(RBPlayer_Multicast_StopHallucination, HalluType) == 0x000000, "Member 'RBPlayer_Multicast_StopHallucination::HalluType' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_StopHallucination, FadeOutType) == 0x000001, "Member 'RBPlayer_Multicast_StopHallucination::FadeOutType' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_TalkWheel
// 0x001C (0x001C - 0x0000)
struct RBPlayer_Multicast_TalkWheel final
{
public:
	ETalkWheelAction                              Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentEyeLocation;                                // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentEyeForward;                                 // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Multicast_TalkWheel) == 0x000004, "Wrong alignment on RBPlayer_Multicast_TalkWheel");
static_assert(sizeof(RBPlayer_Multicast_TalkWheel) == 0x00001C, "Wrong size on RBPlayer_Multicast_TalkWheel");
static_assert(offsetof(RBPlayer_Multicast_TalkWheel, Action) == 0x000000, "Member 'RBPlayer_Multicast_TalkWheel::Action' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_TalkWheel, CurrentEyeLocation) == 0x000004, "Member 'RBPlayer_Multicast_TalkWheel::CurrentEyeLocation' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_TalkWheel, CurrentEyeForward) == 0x000010, "Member 'RBPlayer_Multicast_TalkWheel::CurrentEyeForward' has a wrong offset!");

// Function OPP.RBPlayer.Multicast_TeleportPlayer
// 0x0024 (0x0024 - 0x0000)
struct RBPlayer_Multicast_TeleportPlayer final
{
public:
	float                                         TeleportPawnTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportServerTime;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NewLoc;                                            // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewRot;                                            // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsInstant;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustLocForFeets;                                // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterruptAction;                                  // 0x0022(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226E[0x1];                                     // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Multicast_TeleportPlayer) == 0x000004, "Wrong alignment on RBPlayer_Multicast_TeleportPlayer");
static_assert(sizeof(RBPlayer_Multicast_TeleportPlayer) == 0x000024, "Wrong size on RBPlayer_Multicast_TeleportPlayer");
static_assert(offsetof(RBPlayer_Multicast_TeleportPlayer, TeleportPawnTime) == 0x000000, "Member 'RBPlayer_Multicast_TeleportPlayer::TeleportPawnTime' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_TeleportPlayer, TeleportServerTime) == 0x000004, "Member 'RBPlayer_Multicast_TeleportPlayer::TeleportServerTime' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_TeleportPlayer, NewLoc) == 0x000008, "Member 'RBPlayer_Multicast_TeleportPlayer::NewLoc' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_TeleportPlayer, NewRot) == 0x000014, "Member 'RBPlayer_Multicast_TeleportPlayer::NewRot' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_TeleportPlayer, bIsInstant) == 0x000020, "Member 'RBPlayer_Multicast_TeleportPlayer::bIsInstant' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_TeleportPlayer, bAdjustLocForFeets) == 0x000021, "Member 'RBPlayer_Multicast_TeleportPlayer::bAdjustLocForFeets' has a wrong offset!");
static_assert(offsetof(RBPlayer_Multicast_TeleportPlayer, bInterruptAction) == 0x000022, "Member 'RBPlayer_Multicast_TeleportPlayer::bInterruptAction' has a wrong offset!");

// Function OPP.RBPlayer.OnConsumeItemPreviousInteractableChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnConsumeItemPreviousInteractableChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnConsumeItemPreviousInteractableChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnConsumeItemPreviousInteractableChangedCallback");
static_assert(sizeof(RBPlayer_OnConsumeItemPreviousInteractableChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnConsumeItemPreviousInteractableChangedCallback");
static_assert(offsetof(RBPlayer_OnConsumeItemPreviousInteractableChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnConsumeItemPreviousInteractableChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.OnCurrentEquippedItemChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnCurrentEquippedItemChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnCurrentEquippedItemChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnCurrentEquippedItemChangedCallback");
static_assert(sizeof(RBPlayer_OnCurrentEquippedItemChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnCurrentEquippedItemChangedCallback");
static_assert(offsetof(RBPlayer_OnCurrentEquippedItemChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnCurrentEquippedItemChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.OnCurrentLargePickupChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnCurrentLargePickupChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnCurrentLargePickupChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnCurrentLargePickupChangedCallback");
static_assert(sizeof(RBPlayer_OnCurrentLargePickupChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnCurrentLargePickupChangedCallback");
static_assert(offsetof(RBPlayer_OnCurrentLargePickupChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnCurrentLargePickupChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.OnHoldConsumeActionItemChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnHoldConsumeActionItemChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnHoldConsumeActionItemChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnHoldConsumeActionItemChangedCallback");
static_assert(sizeof(RBPlayer_OnHoldConsumeActionItemChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnHoldConsumeActionItemChangedCallback");
static_assert(offsetof(RBPlayer_OnHoldConsumeActionItemChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnHoldConsumeActionItemChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.OnInventorySlotCountChanged
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnInventorySlotCountChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnInventorySlotCountChanged) == 0x000004, "Wrong alignment on RBPlayer_OnInventorySlotCountChanged");
static_assert(sizeof(RBPlayer_OnInventorySlotCountChanged) == 0x000004, "Wrong size on RBPlayer_OnInventorySlotCountChanged");
static_assert(offsetof(RBPlayer_OnInventorySlotCountChanged, OldValue) == 0x000000, "Member 'RBPlayer_OnInventorySlotCountChanged::OldValue' has a wrong offset!");

// Function OPP.RBPlayer.OnIsAimingThrowableChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnIsAimingThrowableChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnIsAimingThrowableChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnIsAimingThrowableChangedCallback");
static_assert(sizeof(RBPlayer_OnIsAimingThrowableChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnIsAimingThrowableChangedCallback");
static_assert(offsetof(RBPlayer_OnIsAimingThrowableChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnIsAimingThrowableChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.OnIsNVActiveChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnIsNVActiveChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnIsNVActiveChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnIsNVActiveChangedCallback");
static_assert(sizeof(RBPlayer_OnIsNVActiveChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnIsNVActiveChangedCallback");
static_assert(offsetof(RBPlayer_OnIsNVActiveChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnIsNVActiveChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.OnItemHeldChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnItemHeldChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnItemHeldChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnItemHeldChangedCallback");
static_assert(sizeof(RBPlayer_OnItemHeldChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnItemHeldChangedCallback");
static_assert(offsetof(RBPlayer_OnItemHeldChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnItemHeldChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.OnMaxHealthChanged
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnMaxHealthChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnMaxHealthChanged) == 0x000004, "Wrong alignment on RBPlayer_OnMaxHealthChanged");
static_assert(sizeof(RBPlayer_OnMaxHealthChanged) == 0x000004, "Wrong size on RBPlayer_OnMaxHealthChanged");
static_assert(offsetof(RBPlayer_OnMaxHealthChanged, OldValue) == 0x000000, "Member 'RBPlayer_OnMaxHealthChanged::OldValue' has a wrong offset!");

// Function OPP.RBPlayer.OnMaxNVBatteryChanged
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnMaxNVBatteryChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnMaxNVBatteryChanged) == 0x000004, "Wrong alignment on RBPlayer_OnMaxNVBatteryChanged");
static_assert(sizeof(RBPlayer_OnMaxNVBatteryChanged) == 0x000004, "Wrong size on RBPlayer_OnMaxNVBatteryChanged");
static_assert(offsetof(RBPlayer_OnMaxNVBatteryChanged, OldValue) == 0x000000, "Member 'RBPlayer_OnMaxNVBatteryChanged::OldValue' has a wrong offset!");

// Function OPP.RBPlayer.OnMaxStaminaChanged
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnMaxStaminaChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnMaxStaminaChanged) == 0x000004, "Wrong alignment on RBPlayer_OnMaxStaminaChanged");
static_assert(sizeof(RBPlayer_OnMaxStaminaChanged) == 0x000004, "Wrong size on RBPlayer_OnMaxStaminaChanged");
static_assert(offsetof(RBPlayer_OnMaxStaminaChanged, OldValue) == 0x000000, "Member 'RBPlayer_OnMaxStaminaChanged::OldValue' has a wrong offset!");

// DelegateFunction OPP.RBPlayer.OnPlayerCustomizationChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_OnPlayerCustomizationChanged__DelegateSignature final
{
public:
	class ARBPlayer*                              RBPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnPlayerCustomizationChanged__DelegateSignature) == 0x000008, "Wrong alignment on RBPlayer_OnPlayerCustomizationChanged__DelegateSignature");
static_assert(sizeof(RBPlayer_OnPlayerCustomizationChanged__DelegateSignature) == 0x000008, "Wrong size on RBPlayer_OnPlayerCustomizationChanged__DelegateSignature");
static_assert(offsetof(RBPlayer_OnPlayerCustomizationChanged__DelegateSignature, RBPlayer) == 0x000000, "Member 'RBPlayer_OnPlayerCustomizationChanged__DelegateSignature::RBPlayer' has a wrong offset!");

// Function OPP.RBPlayer.OnRep_CoopTrapDart
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_OnRep_CoopTrapDart final
{
public:
	class ARBTrapDart*                            LastTrapDart;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnRep_CoopTrapDart) == 0x000008, "Wrong alignment on RBPlayer_OnRep_CoopTrapDart");
static_assert(sizeof(RBPlayer_OnRep_CoopTrapDart) == 0x000008, "Wrong size on RBPlayer_OnRep_CoopTrapDart");
static_assert(offsetof(RBPlayer_OnRep_CoopTrapDart, LastTrapDart) == 0x000000, "Member 'RBPlayer_OnRep_CoopTrapDart::LastTrapDart' has a wrong offset!");

// Function OPP.RBPlayer.OnRep_CurrentPsychosisBracket
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnRep_CurrentPsychosisBracket final
{
public:
	int32                                         OldPsychosisBracket;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnRep_CurrentPsychosisBracket) == 0x000004, "Wrong alignment on RBPlayer_OnRep_CurrentPsychosisBracket");
static_assert(sizeof(RBPlayer_OnRep_CurrentPsychosisBracket) == 0x000004, "Wrong size on RBPlayer_OnRep_CurrentPsychosisBracket");
static_assert(offsetof(RBPlayer_OnRep_CurrentPsychosisBracket, OldPsychosisBracket) == 0x000000, "Member 'RBPlayer_OnRep_CurrentPsychosisBracket::OldPsychosisBracket' has a wrong offset!");

// Function OPP.RBPlayer.OnRep_DamageBoostPawnTimestamps
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_OnRep_DamageBoostPawnTimestamps final
{
public:
	TArray<float>                                 OldDamageBoostPawnTimestamps;                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnRep_DamageBoostPawnTimestamps) == 0x000008, "Wrong alignment on RBPlayer_OnRep_DamageBoostPawnTimestamps");
static_assert(sizeof(RBPlayer_OnRep_DamageBoostPawnTimestamps) == 0x000010, "Wrong size on RBPlayer_OnRep_DamageBoostPawnTimestamps");
static_assert(offsetof(RBPlayer_OnRep_DamageBoostPawnTimestamps, OldDamageBoostPawnTimestamps) == 0x000000, "Member 'RBPlayer_OnRep_DamageBoostPawnTimestamps::OldDamageBoostPawnTimestamps' has a wrong offset!");

// Function OPP.RBPlayer.OnRep_EffectivePsychosisMeter
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnRep_EffectivePsychosisMeter final
{
public:
	int32                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnRep_EffectivePsychosisMeter) == 0x000004, "Wrong alignment on RBPlayer_OnRep_EffectivePsychosisMeter");
static_assert(sizeof(RBPlayer_OnRep_EffectivePsychosisMeter) == 0x000004, "Wrong size on RBPlayer_OnRep_EffectivePsychosisMeter");
static_assert(offsetof(RBPlayer_OnRep_EffectivePsychosisMeter, OldValue) == 0x000000, "Member 'RBPlayer_OnRep_EffectivePsychosisMeter::OldValue' has a wrong offset!");

// Function OPP.RBPlayer.OnRep_SlideDownVolume
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_OnRep_SlideDownVolume final
{
public:
	class ARBSlideDownVolume*                     Param_SlideDownVolume;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnRep_SlideDownVolume) == 0x000008, "Wrong alignment on RBPlayer_OnRep_SlideDownVolume");
static_assert(sizeof(RBPlayer_OnRep_SlideDownVolume) == 0x000008, "Wrong size on RBPlayer_OnRep_SlideDownVolume");
static_assert(offsetof(RBPlayer_OnRep_SlideDownVolume, Param_SlideDownVolume) == 0x000000, "Member 'RBPlayer_OnRep_SlideDownVolume::Param_SlideDownVolume' has a wrong offset!");

// Function OPP.RBPlayer.OnRep_Stamina
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnRep_Stamina final
{
public:
	float                                         OldStamina;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnRep_Stamina) == 0x000004, "Wrong alignment on RBPlayer_OnRep_Stamina");
static_assert(sizeof(RBPlayer_OnRep_Stamina) == 0x000004, "Wrong size on RBPlayer_OnRep_Stamina");
static_assert(offsetof(RBPlayer_OnRep_Stamina, OldStamina) == 0x000000, "Member 'RBPlayer_OnRep_Stamina::OldStamina' has a wrong offset!");

// Function OPP.RBPlayer.OnRep_StruggleAction_Helper_Timestamp
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnRep_StruggleAction_Helper_Timestamp final
{
public:
	float                                         LastTimestamp;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnRep_StruggleAction_Helper_Timestamp) == 0x000004, "Wrong alignment on RBPlayer_OnRep_StruggleAction_Helper_Timestamp");
static_assert(sizeof(RBPlayer_OnRep_StruggleAction_Helper_Timestamp) == 0x000004, "Wrong size on RBPlayer_OnRep_StruggleAction_Helper_Timestamp");
static_assert(offsetof(RBPlayer_OnRep_StruggleAction_Helper_Timestamp, LastTimestamp) == 0x000000, "Member 'RBPlayer_OnRep_StruggleAction_Helper_Timestamp::LastTimestamp' has a wrong offset!");

// Function OPP.RBPlayer.OnRep_StruggleAction_Victim_Timestamp
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnRep_StruggleAction_Victim_Timestamp final
{
public:
	float                                         LastTimestamp;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnRep_StruggleAction_Victim_Timestamp) == 0x000004, "Wrong alignment on RBPlayer_OnRep_StruggleAction_Victim_Timestamp");
static_assert(sizeof(RBPlayer_OnRep_StruggleAction_Victim_Timestamp) == 0x000004, "Wrong size on RBPlayer_OnRep_StruggleAction_Victim_Timestamp");
static_assert(offsetof(RBPlayer_OnRep_StruggleAction_Victim_Timestamp, LastTimestamp) == 0x000000, "Member 'RBPlayer_OnRep_StruggleAction_Victim_Timestamp::LastTimestamp' has a wrong offset!");

// Function OPP.RBPlayer.OnRep_StruggleRatio_Helper
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_OnRep_StruggleRatio_Helper final
{
public:
	float                                         LastStruggleRatio_Helper;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnRep_StruggleRatio_Helper) == 0x000004, "Wrong alignment on RBPlayer_OnRep_StruggleRatio_Helper");
static_assert(sizeof(RBPlayer_OnRep_StruggleRatio_Helper) == 0x000004, "Wrong size on RBPlayer_OnRep_StruggleRatio_Helper");
static_assert(offsetof(RBPlayer_OnRep_StruggleRatio_Helper, LastStruggleRatio_Helper) == 0x000000, "Member 'RBPlayer_OnRep_StruggleRatio_Helper::LastStruggleRatio_Helper' has a wrong offset!");

// Function OPP.RBPlayer.OnSavedEquippedItemChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnSavedEquippedItemChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnSavedEquippedItemChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnSavedEquippedItemChangedCallback");
static_assert(sizeof(RBPlayer_OnSavedEquippedItemChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnSavedEquippedItemChangedCallback");
static_assert(offsetof(RBPlayer_OnSavedEquippedItemChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnSavedEquippedItemChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.OnTradeItemChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnTradeItemChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnTradeItemChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnTradeItemChangedCallback");
static_assert(sizeof(RBPlayer_OnTradeItemChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnTradeItemChangedCallback");
static_assert(offsetof(RBPlayer_OnTradeItemChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnTradeItemChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.OnWantsNVActiveChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_OnWantsNVActiveChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_OnWantsNVActiveChangedCallback) == 0x000001, "Wrong alignment on RBPlayer_OnWantsNVActiveChangedCallback");
static_assert(sizeof(RBPlayer_OnWantsNVActiveChangedCallback) == 0x000001, "Wrong size on RBPlayer_OnWantsNVActiveChangedCallback");
static_assert(offsetof(RBPlayer_OnWantsNVActiveChangedCallback, ChangedType) == 0x000000, "Member 'RBPlayer_OnWantsNVActiveChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPlayer.RemovePlayerSpecificUpgrade_Server
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_RemovePlayerSpecificUpgrade_Server final
{
public:
	class FName                                   ModifierId;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_RemovePlayerSpecificUpgrade_Server) == 0x000004, "Wrong alignment on RBPlayer_RemovePlayerSpecificUpgrade_Server");
static_assert(sizeof(RBPlayer_RemovePlayerSpecificUpgrade_Server) == 0x000008, "Wrong size on RBPlayer_RemovePlayerSpecificUpgrade_Server");
static_assert(offsetof(RBPlayer_RemovePlayerSpecificUpgrade_Server, ModifierId) == 0x000000, "Member 'RBPlayer_RemovePlayerSpecificUpgrade_Server::ModifierId' has a wrong offset!");

// Function OPP.RBPlayer.Server_ChallengeArmWrestlingPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_ChallengeArmWrestlingPlayer final
{
public:
	class ARBPlayer*                              ChallengedPlayer;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_ChallengeArmWrestlingPlayer) == 0x000008, "Wrong alignment on RBPlayer_Server_ChallengeArmWrestlingPlayer");
static_assert(sizeof(RBPlayer_Server_ChallengeArmWrestlingPlayer) == 0x000008, "Wrong size on RBPlayer_Server_ChallengeArmWrestlingPlayer");
static_assert(offsetof(RBPlayer_Server_ChallengeArmWrestlingPlayer, ChallengedPlayer) == 0x000000, "Member 'RBPlayer_Server_ChallengeArmWrestlingPlayer::ChallengedPlayer' has a wrong offset!");

// Function OPP.RBPlayer.Server_Cheat_DebugCoopMove
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Server_Cheat_DebugCoopMove final
{
public:
	bool                                          bExceptLocal;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_Cheat_DebugCoopMove) == 0x000001, "Wrong alignment on RBPlayer_Server_Cheat_DebugCoopMove");
static_assert(sizeof(RBPlayer_Server_Cheat_DebugCoopMove) == 0x000001, "Wrong size on RBPlayer_Server_Cheat_DebugCoopMove");
static_assert(offsetof(RBPlayer_Server_Cheat_DebugCoopMove, bExceptLocal) == 0x000000, "Member 'RBPlayer_Server_Cheat_DebugCoopMove::bExceptLocal' has a wrong offset!");

// Function OPP.RBPlayer.Server_Cheat_DebugPuzzleRoom
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Server_Cheat_DebugPuzzleRoom final
{
public:
	class URBPuzzleRoomComponent*                 PuzzleRoom;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Server_Cheat_DebugPuzzleRoom) == 0x000008, "Wrong alignment on RBPlayer_Server_Cheat_DebugPuzzleRoom");
static_assert(sizeof(RBPlayer_Server_Cheat_DebugPuzzleRoom) == 0x000010, "Wrong size on RBPlayer_Server_Cheat_DebugPuzzleRoom");
static_assert(offsetof(RBPlayer_Server_Cheat_DebugPuzzleRoom, PuzzleRoom) == 0x000000, "Member 'RBPlayer_Server_Cheat_DebugPuzzleRoom::PuzzleRoom' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_Cheat_DebugPuzzleRoom, bDebug) == 0x000008, "Member 'RBPlayer_Server_Cheat_DebugPuzzleRoom::bDebug' has a wrong offset!");

// Function OPP.RBPlayer.Server_Cheat_DumpDebugInfo
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_Cheat_DumpDebugInfo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_Cheat_DumpDebugInfo) == 0x000008, "Wrong alignment on RBPlayer_Server_Cheat_DumpDebugInfo");
static_assert(sizeof(RBPlayer_Server_Cheat_DumpDebugInfo) == 0x000008, "Wrong size on RBPlayer_Server_Cheat_DumpDebugInfo");
static_assert(offsetof(RBPlayer_Server_Cheat_DumpDebugInfo, Actor) == 0x000000, "Member 'RBPlayer_Server_Cheat_DumpDebugInfo::Actor' has a wrong offset!");

// Function OPP.RBPlayer.Server_Cheat_ToggleAnimationLog
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Server_Cheat_ToggleAnimationLog final
{
public:
	class FString                                 Filter;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_Cheat_ToggleAnimationLog) == 0x000008, "Wrong alignment on RBPlayer_Server_Cheat_ToggleAnimationLog");
static_assert(sizeof(RBPlayer_Server_Cheat_ToggleAnimationLog) == 0x000010, "Wrong size on RBPlayer_Server_Cheat_ToggleAnimationLog");
static_assert(offsetof(RBPlayer_Server_Cheat_ToggleAnimationLog, Filter) == 0x000000, "Member 'RBPlayer_Server_Cheat_ToggleAnimationLog::Filter' has a wrong offset!");

// Function OPP.RBPlayer.Server_Cheat_ToggleConditionalDebugActor
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_Cheat_ToggleConditionalDebugActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_Cheat_ToggleConditionalDebugActor) == 0x000008, "Wrong alignment on RBPlayer_Server_Cheat_ToggleConditionalDebugActor");
static_assert(sizeof(RBPlayer_Server_Cheat_ToggleConditionalDebugActor) == 0x000008, "Wrong size on RBPlayer_Server_Cheat_ToggleConditionalDebugActor");
static_assert(offsetof(RBPlayer_Server_Cheat_ToggleConditionalDebugActor, Actor) == 0x000000, "Member 'RBPlayer_Server_Cheat_ToggleConditionalDebugActor::Actor' has a wrong offset!");

// Function OPP.RBPlayer.Server_CheatHurtSelf
// 0x000C (0x000C - 0x0000)
struct RBPlayer_Server_CheatHurtSelf final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHitReaction;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2270[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HurtType;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_CheatHurtSelf) == 0x000004, "Wrong alignment on RBPlayer_Server_CheatHurtSelf");
static_assert(sizeof(RBPlayer_Server_CheatHurtSelf) == 0x00000C, "Wrong size on RBPlayer_Server_CheatHurtSelf");
static_assert(offsetof(RBPlayer_Server_CheatHurtSelf, DamageAmount) == 0x000000, "Member 'RBPlayer_Server_CheatHurtSelf::DamageAmount' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_CheatHurtSelf, bHitReaction) == 0x000004, "Member 'RBPlayer_Server_CheatHurtSelf::bHitReaction' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_CheatHurtSelf, HurtType) == 0x000008, "Member 'RBPlayer_Server_CheatHurtSelf::HurtType' has a wrong offset!");

// Function OPP.RBPlayer.Server_DebugHitReaction
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_DebugHitReaction final
{
public:
	EPlayerHitReactionType                        HitReactionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2271[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelativeAngle;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_DebugHitReaction) == 0x000004, "Wrong alignment on RBPlayer_Server_DebugHitReaction");
static_assert(sizeof(RBPlayer_Server_DebugHitReaction) == 0x000008, "Wrong size on RBPlayer_Server_DebugHitReaction");
static_assert(offsetof(RBPlayer_Server_DebugHitReaction, HitReactionType) == 0x000000, "Member 'RBPlayer_Server_DebugHitReaction::HitReactionType' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_DebugHitReaction, RelativeAngle) == 0x000004, "Member 'RBPlayer_Server_DebugHitReaction::RelativeAngle' has a wrong offset!");

// Function OPP.RBPlayer.Server_ExitCustomInteractable
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_ExitCustomInteractable final
{
public:
	class ARBCustomSpecialMoveInteractableActor*  CustomInteractable;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_ExitCustomInteractable) == 0x000008, "Wrong alignment on RBPlayer_Server_ExitCustomInteractable");
static_assert(sizeof(RBPlayer_Server_ExitCustomInteractable) == 0x000008, "Wrong size on RBPlayer_Server_ExitCustomInteractable");
static_assert(offsetof(RBPlayer_Server_ExitCustomInteractable, CustomInteractable) == 0x000000, "Member 'RBPlayer_Server_ExitCustomInteractable::CustomInteractable' has a wrong offset!");

// Function OPP.RBPlayer.Server_NotifyPanelUserReady
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_NotifyPanelUserReady final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_NotifyPanelUserReady) == 0x000008, "Wrong alignment on RBPlayer_Server_NotifyPanelUserReady");
static_assert(sizeof(RBPlayer_Server_NotifyPanelUserReady) == 0x000008, "Wrong size on RBPlayer_Server_NotifyPanelUserReady");
static_assert(offsetof(RBPlayer_Server_NotifyPanelUserReady, Panel) == 0x000000, "Member 'RBPlayer_Server_NotifyPanelUserReady::Panel' has a wrong offset!");

// Function OPP.RBPlayer.Server_OnTortureInputPressed
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Server_OnTortureInputPressed final
{
public:
	class URBTorturePanelComponent*               PanelCmp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputPressed;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_OnTortureInputPressed) == 0x000008, "Wrong alignment on RBPlayer_Server_OnTortureInputPressed");
static_assert(sizeof(RBPlayer_Server_OnTortureInputPressed) == 0x000010, "Wrong size on RBPlayer_Server_OnTortureInputPressed");
static_assert(offsetof(RBPlayer_Server_OnTortureInputPressed, PanelCmp) == 0x000000, "Member 'RBPlayer_Server_OnTortureInputPressed::PanelCmp' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_OnTortureInputPressed, Timestamp) == 0x000008, "Member 'RBPlayer_Server_OnTortureInputPressed::Timestamp' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_OnTortureInputPressed, InputPressed) == 0x00000C, "Member 'RBPlayer_Server_OnTortureInputPressed::InputPressed' has a wrong offset!");

// Function OPP.RBPlayer.Server_RemovePing
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Server_RemovePing final
{
public:
	EPlayerPingType                               PingType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_RemovePing) == 0x000001, "Wrong alignment on RBPlayer_Server_RemovePing");
static_assert(sizeof(RBPlayer_Server_RemovePing) == 0x000001, "Wrong size on RBPlayer_Server_RemovePing");
static_assert(offsetof(RBPlayer_Server_RemovePing, PingType) == 0x000000, "Member 'RBPlayer_Server_RemovePing::PingType' has a wrong offset!");

// Function OPP.RBPlayer.Server_ScheduleHelperCollisionEnabled
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Server_ScheduleHelperCollisionEnabled final
{
public:
	class URBEvalCorridorHelperComponent*         CorridorHelper;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2272[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExecutionServerTime;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_ScheduleHelperCollisionEnabled) == 0x000008, "Wrong alignment on RBPlayer_Server_ScheduleHelperCollisionEnabled");
static_assert(sizeof(RBPlayer_Server_ScheduleHelperCollisionEnabled) == 0x000010, "Wrong size on RBPlayer_Server_ScheduleHelperCollisionEnabled");
static_assert(offsetof(RBPlayer_Server_ScheduleHelperCollisionEnabled, CorridorHelper) == 0x000000, "Member 'RBPlayer_Server_ScheduleHelperCollisionEnabled::CorridorHelper' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_ScheduleHelperCollisionEnabled, bEnable) == 0x000008, "Member 'RBPlayer_Server_ScheduleHelperCollisionEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_ScheduleHelperCollisionEnabled, ExecutionServerTime) == 0x00000C, "Member 'RBPlayer_Server_ScheduleHelperCollisionEnabled::ExecutionServerTime' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetEquippedInventoryItem
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_SetEquippedInventoryItem final
{
public:
	class ARBPickup*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_SetEquippedInventoryItem) == 0x000008, "Wrong alignment on RBPlayer_Server_SetEquippedInventoryItem");
static_assert(sizeof(RBPlayer_Server_SetEquippedInventoryItem) == 0x000008, "Wrong size on RBPlayer_Server_SetEquippedInventoryItem");
static_assert(offsetof(RBPlayer_Server_SetEquippedInventoryItem, Item) == 0x000000, "Member 'RBPlayer_Server_SetEquippedInventoryItem::Item' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetGodMode
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Server_SetGodMode final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_SetGodMode) == 0x000001, "Wrong alignment on RBPlayer_Server_SetGodMode");
static_assert(sizeof(RBPlayer_Server_SetGodMode) == 0x000001, "Wrong size on RBPlayer_Server_SetGodMode");
static_assert(offsetof(RBPlayer_Server_SetGodMode, bEnabled) == 0x000000, "Member 'RBPlayer_Server_SetGodMode::bEnabled' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetInteractiblePanelChildValue
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Server_SetInteractiblePanelChildValue final
{
public:
	class URBInteractibleComponent*               PanelChild;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2273[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Server_SetInteractiblePanelChildValue) == 0x000008, "Wrong alignment on RBPlayer_Server_SetInteractiblePanelChildValue");
static_assert(sizeof(RBPlayer_Server_SetInteractiblePanelChildValue) == 0x000010, "Wrong size on RBPlayer_Server_SetInteractiblePanelChildValue");
static_assert(offsetof(RBPlayer_Server_SetInteractiblePanelChildValue, PanelChild) == 0x000000, "Member 'RBPlayer_Server_SetInteractiblePanelChildValue::PanelChild' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_SetInteractiblePanelChildValue, Value) == 0x000008, "Member 'RBPlayer_Server_SetInteractiblePanelChildValue::Value' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetLobbyGameInputAtLoc
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Server_SetLobbyGameInputAtLoc final
{
public:
	bool                                          InputDown;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2274[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_SetLobbyGameInputAtLoc) == 0x000004, "Wrong alignment on RBPlayer_Server_SetLobbyGameInputAtLoc");
static_assert(sizeof(RBPlayer_Server_SetLobbyGameInputAtLoc) == 0x000010, "Wrong size on RBPlayer_Server_SetLobbyGameInputAtLoc");
static_assert(offsetof(RBPlayer_Server_SetLobbyGameInputAtLoc, InputDown) == 0x000000, "Member 'RBPlayer_Server_SetLobbyGameInputAtLoc::InputDown' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_SetLobbyGameInputAtLoc, Location) == 0x000004, "Member 'RBPlayer_Server_SetLobbyGameInputAtLoc::Location' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetObjectiveActorSeen
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_SetObjectiveActorSeen final
{
public:
	class URBObjectiveActorComponent*             ObjectiveActorComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_SetObjectiveActorSeen) == 0x000008, "Wrong alignment on RBPlayer_Server_SetObjectiveActorSeen");
static_assert(sizeof(RBPlayer_Server_SetObjectiveActorSeen) == 0x000008, "Wrong size on RBPlayer_Server_SetObjectiveActorSeen");
static_assert(offsetof(RBPlayer_Server_SetObjectiveActorSeen, ObjectiveActorComponent) == 0x000000, "Member 'RBPlayer_Server_SetObjectiveActorSeen::ObjectiveActorComponent' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetPlayerInputAtCoord
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_Server_SetPlayerInputAtCoord final
{
public:
	bool                                          InputDown;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2275[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              Coord;                                             // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2276[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URBChessPieceComponent*                 Piece;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_SetPlayerInputAtCoord) == 0x000008, "Wrong alignment on RBPlayer_Server_SetPlayerInputAtCoord");
static_assert(sizeof(RBPlayer_Server_SetPlayerInputAtCoord) == 0x000018, "Wrong size on RBPlayer_Server_SetPlayerInputAtCoord");
static_assert(offsetof(RBPlayer_Server_SetPlayerInputAtCoord, InputDown) == 0x000000, "Member 'RBPlayer_Server_SetPlayerInputAtCoord::InputDown' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_SetPlayerInputAtCoord, Coord) == 0x000004, "Member 'RBPlayer_Server_SetPlayerInputAtCoord::Coord' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_SetPlayerInputAtCoord, Piece) == 0x000010, "Member 'RBPlayer_Server_SetPlayerInputAtCoord::Piece' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetSaveEquippedItem
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_SetSaveEquippedItem final
{
public:
	class ARBPickup*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_SetSaveEquippedItem) == 0x000008, "Wrong alignment on RBPlayer_Server_SetSaveEquippedItem");
static_assert(sizeof(RBPlayer_Server_SetSaveEquippedItem) == 0x000008, "Wrong size on RBPlayer_Server_SetSaveEquippedItem");
static_assert(offsetof(RBPlayer_Server_SetSaveEquippedItem, Item) == 0x000000, "Member 'RBPlayer_Server_SetSaveEquippedItem::Item' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetSwitchPanelPartDesiredStatusValue
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_Server_SetSwitchPanelPartDesiredStatusValue final
{
public:
	class ARBSwitchPanelPart*                     PanelPart;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2277[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Server_SetSwitchPanelPartDesiredStatusValue) == 0x000008, "Wrong alignment on RBPlayer_Server_SetSwitchPanelPartDesiredStatusValue");
static_assert(sizeof(RBPlayer_Server_SetSwitchPanelPartDesiredStatusValue) == 0x000010, "Wrong size on RBPlayer_Server_SetSwitchPanelPartDesiredStatusValue");
static_assert(offsetof(RBPlayer_Server_SetSwitchPanelPartDesiredStatusValue, PanelPart) == 0x000000, "Member 'RBPlayer_Server_SetSwitchPanelPartDesiredStatusValue::PanelPart' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_SetSwitchPanelPartDesiredStatusValue, Value) == 0x000008, "Member 'RBPlayer_Server_SetSwitchPanelPartDesiredStatusValue::Value' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetToggleInteractionSetting
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Server_SetToggleInteractionSetting final
{
public:
	bool                                          bToggle;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_SetToggleInteractionSetting) == 0x000001, "Wrong alignment on RBPlayer_Server_SetToggleInteractionSetting");
static_assert(sizeof(RBPlayer_Server_SetToggleInteractionSetting) == 0x000001, "Wrong size on RBPlayer_Server_SetToggleInteractionSetting");
static_assert(offsetof(RBPlayer_Server_SetToggleInteractionSetting, bToggle) == 0x000000, "Member 'RBPlayer_Server_SetToggleInteractionSetting::bToggle' has a wrong offset!");

// Function OPP.RBPlayer.Server_SetWantsNVActive
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_Server_SetWantsNVActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_SetWantsNVActive) == 0x000001, "Wrong alignment on RBPlayer_Server_SetWantsNVActive");
static_assert(sizeof(RBPlayer_Server_SetWantsNVActive) == 0x000001, "Wrong size on RBPlayer_Server_SetWantsNVActive");
static_assert(offsetof(RBPlayer_Server_SetWantsNVActive, bActive) == 0x000000, "Member 'RBPlayer_Server_SetWantsNVActive::bActive' has a wrong offset!");

// Function OPP.RBPlayer.Server_TalkWheel
// 0x001C (0x001C - 0x0000)
struct RBPlayer_Server_TalkWheel final
{
public:
	ETalkWheelAction                              Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2278[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentEyeLocation;                                // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentEyeForward;                                 // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_TalkWheel) == 0x000004, "Wrong alignment on RBPlayer_Server_TalkWheel");
static_assert(sizeof(RBPlayer_Server_TalkWheel) == 0x00001C, "Wrong size on RBPlayer_Server_TalkWheel");
static_assert(offsetof(RBPlayer_Server_TalkWheel, Action) == 0x000000, "Member 'RBPlayer_Server_TalkWheel::Action' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_TalkWheel, CurrentEyeLocation) == 0x000004, "Member 'RBPlayer_Server_TalkWheel::CurrentEyeLocation' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_TalkWheel, CurrentEyeForward) == 0x000010, "Member 'RBPlayer_Server_TalkWheel::CurrentEyeForward' has a wrong offset!");

// Function OPP.RBPlayer.Server_TryDropItem
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_TryDropItem final
{
public:
	class ARBPickup*                              Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_TryDropItem) == 0x000008, "Wrong alignment on RBPlayer_Server_TryDropItem");
static_assert(sizeof(RBPlayer_Server_TryDropItem) == 0x000008, "Wrong size on RBPlayer_Server_TryDropItem");
static_assert(offsetof(RBPlayer_Server_TryDropItem, Item) == 0x000000, "Member 'RBPlayer_Server_TryDropItem::Item' has a wrong offset!");

// Function OPP.RBPlayer.Server_TrySwitchToItemTutorial
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_TrySwitchToItemTutorial final
{
public:
	int32                                         SpecialMoveIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpecialMove                                  SpecialMove;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2279[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_Server_TrySwitchToItemTutorial) == 0x000004, "Wrong alignment on RBPlayer_Server_TrySwitchToItemTutorial");
static_assert(sizeof(RBPlayer_Server_TrySwitchToItemTutorial) == 0x000008, "Wrong size on RBPlayer_Server_TrySwitchToItemTutorial");
static_assert(offsetof(RBPlayer_Server_TrySwitchToItemTutorial, SpecialMoveIndex) == 0x000000, "Member 'RBPlayer_Server_TrySwitchToItemTutorial::SpecialMoveIndex' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_TrySwitchToItemTutorial, SpecialMove) == 0x000004, "Member 'RBPlayer_Server_TrySwitchToItemTutorial::SpecialMove' has a wrong offset!");

// Function OPP.RBPlayer.Server_UpdateChessPanelMouseCursorPosition
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Server_UpdateChessPanelMouseCursorPosition final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_UpdateChessPanelMouseCursorPosition) == 0x000004, "Wrong alignment on RBPlayer_Server_UpdateChessPanelMouseCursorPosition");
static_assert(sizeof(RBPlayer_Server_UpdateChessPanelMouseCursorPosition) == 0x000008, "Wrong size on RBPlayer_Server_UpdateChessPanelMouseCursorPosition");
static_assert(offsetof(RBPlayer_Server_UpdateChessPanelMouseCursorPosition, NewPosition) == 0x000000, "Member 'RBPlayer_Server_UpdateChessPanelMouseCursorPosition::NewPosition' has a wrong offset!");

// Function OPP.RBPlayer.Server_UpdateLobbyGameMouseCursorPosition
// 0x000C (0x000C - 0x0000)
struct RBPlayer_Server_UpdateLobbyGameMouseCursorPosition final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_UpdateLobbyGameMouseCursorPosition) == 0x000004, "Wrong alignment on RBPlayer_Server_UpdateLobbyGameMouseCursorPosition");
static_assert(sizeof(RBPlayer_Server_UpdateLobbyGameMouseCursorPosition) == 0x00000C, "Wrong size on RBPlayer_Server_UpdateLobbyGameMouseCursorPosition");
static_assert(offsetof(RBPlayer_Server_UpdateLobbyGameMouseCursorPosition, Location) == 0x000000, "Member 'RBPlayer_Server_UpdateLobbyGameMouseCursorPosition::Location' has a wrong offset!");

// Function OPP.RBPlayer.Server_UpdateMeshOffsets
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_Server_UpdateMeshOffsets final
{
public:
	struct FVector                                TranslationOffset;                                 // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Server_UpdateMeshOffsets) == 0x000004, "Wrong alignment on RBPlayer_Server_UpdateMeshOffsets");
static_assert(sizeof(RBPlayer_Server_UpdateMeshOffsets) == 0x000018, "Wrong size on RBPlayer_Server_UpdateMeshOffsets");
static_assert(offsetof(RBPlayer_Server_UpdateMeshOffsets, TranslationOffset) == 0x000000, "Member 'RBPlayer_Server_UpdateMeshOffsets::TranslationOffset' has a wrong offset!");
static_assert(offsetof(RBPlayer_Server_UpdateMeshOffsets, RotationOffset) == 0x00000C, "Member 'RBPlayer_Server_UpdateMeshOffsets::RotationOffset' has a wrong offset!");

// Function OPP.RBPlayer.SetLastConsumedBatteryType
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_SetLastConsumedBatteryType final
{
public:
	EItemType                                     batteryType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_SetLastConsumedBatteryType) == 0x000001, "Wrong alignment on RBPlayer_SetLastConsumedBatteryType");
static_assert(sizeof(RBPlayer_SetLastConsumedBatteryType) == 0x000001, "Wrong size on RBPlayer_SetLastConsumedBatteryType");
static_assert(offsetof(RBPlayer_SetLastConsumedBatteryType, batteryType) == 0x000000, "Member 'RBPlayer_SetLastConsumedBatteryType::batteryType' has a wrong offset!");

// Function OPP.RBPlayer.ShowItemHeld
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_ShowItemHeld final
{
public:
	class ARBPickup*                              Pickup;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_ShowItemHeld) == 0x000008, "Wrong alignment on RBPlayer_ShowItemHeld");
static_assert(sizeof(RBPlayer_ShowItemHeld) == 0x000008, "Wrong size on RBPlayer_ShowItemHeld");
static_assert(offsetof(RBPlayer_ShowItemHeld, Pickup) == 0x000000, "Member 'RBPlayer_ShowItemHeld::Pickup' has a wrong offset!");

// Function OPP.RBPlayer.UnderwaterStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_UnderwaterStateChanged final
{
public:
	bool                                          bIsUnderwater;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_UnderwaterStateChanged) == 0x000001, "Wrong alignment on RBPlayer_UnderwaterStateChanged");
static_assert(sizeof(RBPlayer_UnderwaterStateChanged) == 0x000001, "Wrong size on RBPlayer_UnderwaterStateChanged");
static_assert(offsetof(RBPlayer_UnderwaterStateChanged, bIsUnderwater) == 0x000000, "Member 'RBPlayer_UnderwaterStateChanged::bIsUnderwater' has a wrong offset!");

// Function OPP.RBPlayer.BP_FindFirstInventoryItemIndex
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_BP_FindFirstInventoryItemIndex final
{
public:
	EItemCategory                                 Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_FindFirstInventoryItemIndex) == 0x000004, "Wrong alignment on RBPlayer_BP_FindFirstInventoryItemIndex");
static_assert(sizeof(RBPlayer_BP_FindFirstInventoryItemIndex) == 0x000008, "Wrong size on RBPlayer_BP_FindFirstInventoryItemIndex");
static_assert(offsetof(RBPlayer_BP_FindFirstInventoryItemIndex, Category) == 0x000000, "Member 'RBPlayer_BP_FindFirstInventoryItemIndex::Category' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_FindFirstInventoryItemIndex, ReturnValue) == 0x000004, "Member 'RBPlayer_BP_FindFirstInventoryItemIndex::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_FindFirstInventoryItemIndexFromClass
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_BP_FindFirstInventoryItemIndexFromClass final
{
public:
	TSubclassOf<class ARBPickup>                  ItemClass;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowChildClasses;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227B[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_FindFirstInventoryItemIndexFromClass) == 0x000008, "Wrong alignment on RBPlayer_BP_FindFirstInventoryItemIndexFromClass");
static_assert(sizeof(RBPlayer_BP_FindFirstInventoryItemIndexFromClass) == 0x000010, "Wrong size on RBPlayer_BP_FindFirstInventoryItemIndexFromClass");
static_assert(offsetof(RBPlayer_BP_FindFirstInventoryItemIndexFromClass, ItemClass) == 0x000000, "Member 'RBPlayer_BP_FindFirstInventoryItemIndexFromClass::ItemClass' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_FindFirstInventoryItemIndexFromClass, bAllowChildClasses) == 0x000008, "Member 'RBPlayer_BP_FindFirstInventoryItemIndexFromClass::bAllowChildClasses' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_FindFirstInventoryItemIndexFromClass, ReturnValue) == 0x00000C, "Member 'RBPlayer_BP_FindFirstInventoryItemIndexFromClass::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetCurrentStamina
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_BP_GetCurrentStamina final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_GetCurrentStamina) == 0x000004, "Wrong alignment on RBPlayer_BP_GetCurrentStamina");
static_assert(sizeof(RBPlayer_BP_GetCurrentStamina) == 0x000004, "Wrong size on RBPlayer_BP_GetCurrentStamina");
static_assert(offsetof(RBPlayer_BP_GetCurrentStamina, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_GetCurrentStamina::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetHealthF
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_BP_GetHealthF final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_GetHealthF) == 0x000004, "Wrong alignment on RBPlayer_BP_GetHealthF");
static_assert(sizeof(RBPlayer_BP_GetHealthF) == 0x000004, "Wrong size on RBPlayer_BP_GetHealthF");
static_assert(offsetof(RBPlayer_BP_GetHealthF, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_GetHealthF::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetInventoryIndexFromItem
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_BP_GetInventoryIndexFromItem final
{
public:
	const class ARBPickup*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227C[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_BP_GetInventoryIndexFromItem) == 0x000008, "Wrong alignment on RBPlayer_BP_GetInventoryIndexFromItem");
static_assert(sizeof(RBPlayer_BP_GetInventoryIndexFromItem) == 0x000010, "Wrong size on RBPlayer_BP_GetInventoryIndexFromItem");
static_assert(offsetof(RBPlayer_BP_GetInventoryIndexFromItem, Item) == 0x000000, "Member 'RBPlayer_BP_GetInventoryIndexFromItem::Item' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_GetInventoryIndexFromItem, ReturnValue) == 0x000008, "Member 'RBPlayer_BP_GetInventoryIndexFromItem::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetItemFromIndex
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_BP_GetItemFromIndex final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBPickup*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_GetItemFromIndex) == 0x000008, "Wrong alignment on RBPlayer_BP_GetItemFromIndex");
static_assert(sizeof(RBPlayer_BP_GetItemFromIndex) == 0x000010, "Wrong size on RBPlayer_BP_GetItemFromIndex");
static_assert(offsetof(RBPlayer_BP_GetItemFromIndex, ItemIndex) == 0x000000, "Member 'RBPlayer_BP_GetItemFromIndex::ItemIndex' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_GetItemFromIndex, ReturnValue) == 0x000008, "Member 'RBPlayer_BP_GetItemFromIndex::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetItemIndexForSwap
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_BP_GetItemIndexForSwap final
{
public:
	EItemCategory                                 Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ARBPickup*                        Item;                                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_227F[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_BP_GetItemIndexForSwap) == 0x000008, "Wrong alignment on RBPlayer_BP_GetItemIndexForSwap");
static_assert(sizeof(RBPlayer_BP_GetItemIndexForSwap) == 0x000018, "Wrong size on RBPlayer_BP_GetItemIndexForSwap");
static_assert(offsetof(RBPlayer_BP_GetItemIndexForSwap, Category) == 0x000000, "Member 'RBPlayer_BP_GetItemIndexForSwap::Category' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_GetItemIndexForSwap, Item) == 0x000008, "Member 'RBPlayer_BP_GetItemIndexForSwap::Item' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_GetItemIndexForSwap, ReturnValue) == 0x000010, "Member 'RBPlayer_BP_GetItemIndexForSwap::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetItemsForCategory
// 0x0018 (0x0018 - 0x0000)
struct RBPlayer_BP_GetItemsForCategory final
{
public:
	EItemCategory                                 Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2280[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ARBPickup*>                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_GetItemsForCategory) == 0x000008, "Wrong alignment on RBPlayer_BP_GetItemsForCategory");
static_assert(sizeof(RBPlayer_BP_GetItemsForCategory) == 0x000018, "Wrong size on RBPlayer_BP_GetItemsForCategory");
static_assert(offsetof(RBPlayer_BP_GetItemsForCategory, Category) == 0x000000, "Member 'RBPlayer_BP_GetItemsForCategory::Category' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_GetItemsForCategory, ReturnValue) == 0x000008, "Member 'RBPlayer_BP_GetItemsForCategory::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetLastConsumedBatteryType
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_GetLastConsumedBatteryType final
{
public:
	EItemType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_GetLastConsumedBatteryType) == 0x000001, "Wrong alignment on RBPlayer_BP_GetLastConsumedBatteryType");
static_assert(sizeof(RBPlayer_BP_GetLastConsumedBatteryType) == 0x000001, "Wrong size on RBPlayer_BP_GetLastConsumedBatteryType");
static_assert(offsetof(RBPlayer_BP_GetLastConsumedBatteryType, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_GetLastConsumedBatteryType::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetMaxNumberOfItemForCategory
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_BP_GetMaxNumberOfItemForCategory final
{
public:
	EItemCategory                                 Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2281[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_GetMaxNumberOfItemForCategory) == 0x000004, "Wrong alignment on RBPlayer_BP_GetMaxNumberOfItemForCategory");
static_assert(sizeof(RBPlayer_BP_GetMaxNumberOfItemForCategory) == 0x000008, "Wrong size on RBPlayer_BP_GetMaxNumberOfItemForCategory");
static_assert(offsetof(RBPlayer_BP_GetMaxNumberOfItemForCategory, Category) == 0x000000, "Member 'RBPlayer_BP_GetMaxNumberOfItemForCategory::Category' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_GetMaxNumberOfItemForCategory, ReturnValue) == 0x000004, "Member 'RBPlayer_BP_GetMaxNumberOfItemForCategory::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_GetNumberOfItemForCategory
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_BP_GetNumberOfItemForCategory final
{
public:
	EItemCategory                                 Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2282[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_GetNumberOfItemForCategory) == 0x000004, "Wrong alignment on RBPlayer_BP_GetNumberOfItemForCategory");
static_assert(sizeof(RBPlayer_BP_GetNumberOfItemForCategory) == 0x000008, "Wrong size on RBPlayer_BP_GetNumberOfItemForCategory");
static_assert(offsetof(RBPlayer_BP_GetNumberOfItemForCategory, Category) == 0x000000, "Member 'RBPlayer_BP_GetNumberOfItemForCategory::Category' has a wrong offset!");
static_assert(offsetof(RBPlayer_BP_GetNumberOfItemForCategory, ReturnValue) == 0x000004, "Member 'RBPlayer_BP_GetNumberOfItemForCategory::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_IsExhausted
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_IsExhausted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_IsExhausted) == 0x000001, "Wrong alignment on RBPlayer_BP_IsExhausted");
static_assert(sizeof(RBPlayer_BP_IsExhausted) == 0x000001, "Wrong size on RBPlayer_BP_IsExhausted");
static_assert(offsetof(RBPlayer_BP_IsExhausted, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_IsExhausted::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_IsFlaggedAsFakePlayer
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_IsFlaggedAsFakePlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_IsFlaggedAsFakePlayer) == 0x000001, "Wrong alignment on RBPlayer_BP_IsFlaggedAsFakePlayer");
static_assert(sizeof(RBPlayer_BP_IsFlaggedAsFakePlayer) == 0x000001, "Wrong size on RBPlayer_BP_IsFlaggedAsFakePlayer");
static_assert(offsetof(RBPlayer_BP_IsFlaggedAsFakePlayer, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_IsFlaggedAsFakePlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_IsNVBatteryRecharging
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_IsNVBatteryRecharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_IsNVBatteryRecharging) == 0x000001, "Wrong alignment on RBPlayer_BP_IsNVBatteryRecharging");
static_assert(sizeof(RBPlayer_BP_IsNVBatteryRecharging) == 0x000001, "Wrong size on RBPlayer_BP_IsNVBatteryRecharging");
static_assert(offsetof(RBPlayer_BP_IsNVBatteryRecharging, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_IsNVBatteryRecharging::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_IsNVOn
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_IsNVOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_IsNVOn) == 0x000001, "Wrong alignment on RBPlayer_BP_IsNVOn");
static_assert(sizeof(RBPlayer_BP_IsNVOn) == 0x000001, "Wrong size on RBPlayer_BP_IsNVOn");
static_assert(offsetof(RBPlayer_BP_IsNVOn, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_IsNVOn::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_IsUsingGamepad
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_IsUsingGamepad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_IsUsingGamepad) == 0x000001, "Wrong alignment on RBPlayer_BP_IsUsingGamepad");
static_assert(sizeof(RBPlayer_BP_IsUsingGamepad) == 0x000001, "Wrong size on RBPlayer_BP_IsUsingGamepad");
static_assert(offsetof(RBPlayer_BP_IsUsingGamepad, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_IsUsingGamepad::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.BP_ShouldShowStamina
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_BP_ShouldShowStamina final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_BP_ShouldShowStamina) == 0x000001, "Wrong alignment on RBPlayer_BP_ShouldShowStamina");
static_assert(sizeof(RBPlayer_BP_ShouldShowStamina) == 0x000001, "Wrong size on RBPlayer_BP_ShouldShowStamina");
static_assert(offsetof(RBPlayer_BP_ShouldShowStamina, ReturnValue) == 0x000000, "Member 'RBPlayer_BP_ShouldShowStamina::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.Get3PAnimInstanceClass
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_Get3PAnimInstanceClass final
{
public:
	TSubclassOf<class URBAnimInstance>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_Get3PAnimInstanceClass) == 0x000008, "Wrong alignment on RBPlayer_Get3PAnimInstanceClass");
static_assert(sizeof(RBPlayer_Get3PAnimInstanceClass) == 0x000008, "Wrong size on RBPlayer_Get3PAnimInstanceClass");
static_assert(offsetof(RBPlayer_Get3PAnimInstanceClass, ReturnValue) == 0x000000, "Member 'RBPlayer_Get3PAnimInstanceClass::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetAllShadowMeshes
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_GetAllShadowMeshes final
{
public:
	TArray<class UPrimitiveComponent*>            ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetAllShadowMeshes) == 0x000008, "Wrong alignment on RBPlayer_GetAllShadowMeshes");
static_assert(sizeof(RBPlayer_GetAllShadowMeshes) == 0x000010, "Wrong size on RBPlayer_GetAllShadowMeshes");
static_assert(offsetof(RBPlayer_GetAllShadowMeshes, ReturnValue) == 0x000000, "Member 'RBPlayer_GetAllShadowMeshes::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetBatteryBoostItemModifier
// 0x000C (0x000C - 0x0000)
struct RBPlayer_GetBatteryBoostItemModifier final
{
public:
	struct FRBGameplayAttributeModifier           ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetBatteryBoostItemModifier) == 0x000004, "Wrong alignment on RBPlayer_GetBatteryBoostItemModifier");
static_assert(sizeof(RBPlayer_GetBatteryBoostItemModifier) == 0x00000C, "Wrong size on RBPlayer_GetBatteryBoostItemModifier");
static_assert(offsetof(RBPlayer_GetBatteryBoostItemModifier, ReturnValue) == 0x000000, "Member 'RBPlayer_GetBatteryBoostItemModifier::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetCoopMoveProgress
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_GetCoopMoveProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetCoopMoveProgress) == 0x000004, "Wrong alignment on RBPlayer_GetCoopMoveProgress");
static_assert(sizeof(RBPlayer_GetCoopMoveProgress) == 0x000004, "Wrong size on RBPlayer_GetCoopMoveProgress");
static_assert(offsetof(RBPlayer_GetCoopMoveProgress, ReturnValue) == 0x000000, "Member 'RBPlayer_GetCoopMoveProgress::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetCurrentActiveSkillType
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_GetCurrentActiveSkillType final
{
public:
	EActiveSkillType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetCurrentActiveSkillType) == 0x000001, "Wrong alignment on RBPlayer_GetCurrentActiveSkillType");
static_assert(sizeof(RBPlayer_GetCurrentActiveSkillType) == 0x000001, "Wrong size on RBPlayer_GetCurrentActiveSkillType");
static_assert(offsetof(RBPlayer_GetCurrentActiveSkillType, ReturnValue) == 0x000000, "Member 'RBPlayer_GetCurrentActiveSkillType::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetCurrentEquippedItem
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_GetCurrentEquippedItem final
{
public:
	class ARBPickup*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetCurrentEquippedItem) == 0x000008, "Wrong alignment on RBPlayer_GetCurrentEquippedItem");
static_assert(sizeof(RBPlayer_GetCurrentEquippedItem) == 0x000008, "Wrong size on RBPlayer_GetCurrentEquippedItem");
static_assert(offsetof(RBPlayer_GetCurrentEquippedItem, ReturnValue) == 0x000000, "Member 'RBPlayer_GetCurrentEquippedItem::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetCurrentEquippedItemDefinition
// 0x0048 (0x0048 - 0x0000)
struct RBPlayer_GetCurrentEquippedItemDefinition final
{
public:
	struct FItemDefinition                        ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetCurrentEquippedItemDefinition) == 0x000008, "Wrong alignment on RBPlayer_GetCurrentEquippedItemDefinition");
static_assert(sizeof(RBPlayer_GetCurrentEquippedItemDefinition) == 0x000048, "Wrong size on RBPlayer_GetCurrentEquippedItemDefinition");
static_assert(offsetof(RBPlayer_GetCurrentEquippedItemDefinition, ReturnValue) == 0x000000, "Member 'RBPlayer_GetCurrentEquippedItemDefinition::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetCurrentEquippedItemInventoryIndex
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_GetCurrentEquippedItemInventoryIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetCurrentEquippedItemInventoryIndex) == 0x000004, "Wrong alignment on RBPlayer_GetCurrentEquippedItemInventoryIndex");
static_assert(sizeof(RBPlayer_GetCurrentEquippedItemInventoryIndex) == 0x000004, "Wrong size on RBPlayer_GetCurrentEquippedItemInventoryIndex");
static_assert(offsetof(RBPlayer_GetCurrentEquippedItemInventoryIndex, ReturnValue) == 0x000000, "Member 'RBPlayer_GetCurrentEquippedItemInventoryIndex::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetCurrentEquippedItemType
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_GetCurrentEquippedItemType final
{
public:
	EItemType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetCurrentEquippedItemType) == 0x000001, "Wrong alignment on RBPlayer_GetCurrentEquippedItemType");
static_assert(sizeof(RBPlayer_GetCurrentEquippedItemType) == 0x000001, "Wrong size on RBPlayer_GetCurrentEquippedItemType");
static_assert(offsetof(RBPlayer_GetCurrentEquippedItemType, ReturnValue) == 0x000000, "Member 'RBPlayer_GetCurrentEquippedItemType::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetCurrentEquippedOrHolsteredItemInventoryIndex
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_GetCurrentEquippedOrHolsteredItemInventoryIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetCurrentEquippedOrHolsteredItemInventoryIndex) == 0x000004, "Wrong alignment on RBPlayer_GetCurrentEquippedOrHolsteredItemInventoryIndex");
static_assert(sizeof(RBPlayer_GetCurrentEquippedOrHolsteredItemInventoryIndex) == 0x000004, "Wrong size on RBPlayer_GetCurrentEquippedOrHolsteredItemInventoryIndex");
static_assert(offsetof(RBPlayer_GetCurrentEquippedOrHolsteredItemInventoryIndex, ReturnValue) == 0x000000, "Member 'RBPlayer_GetCurrentEquippedOrHolsteredItemInventoryIndex::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetGamePlayerName
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_GetGamePlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetGamePlayerName) == 0x000008, "Wrong alignment on RBPlayer_GetGamePlayerName");
static_assert(sizeof(RBPlayer_GetGamePlayerName) == 0x000010, "Wrong size on RBPlayer_GetGamePlayerName");
static_assert(offsetof(RBPlayer_GetGamePlayerName, ReturnValue) == 0x000000, "Member 'RBPlayer_GetGamePlayerName::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetHoldConsumeActionItem
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_GetHoldConsumeActionItem final
{
public:
	class ARBPickup*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetHoldConsumeActionItem) == 0x000008, "Wrong alignment on RBPlayer_GetHoldConsumeActionItem");
static_assert(sizeof(RBPlayer_GetHoldConsumeActionItem) == 0x000008, "Wrong size on RBPlayer_GetHoldConsumeActionItem");
static_assert(offsetof(RBPlayer_GetHoldConsumeActionItem, ReturnValue) == 0x000000, "Member 'RBPlayer_GetHoldConsumeActionItem::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetIsAimingThrowable
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_GetIsAimingThrowable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetIsAimingThrowable) == 0x000001, "Wrong alignment on RBPlayer_GetIsAimingThrowable");
static_assert(sizeof(RBPlayer_GetIsAimingThrowable) == 0x000001, "Wrong size on RBPlayer_GetIsAimingThrowable");
static_assert(offsetof(RBPlayer_GetIsAimingThrowable, ReturnValue) == 0x000000, "Member 'RBPlayer_GetIsAimingThrowable::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetItemHeld
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_GetItemHeld final
{
public:
	class ARBPickup*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetItemHeld) == 0x000008, "Wrong alignment on RBPlayer_GetItemHeld");
static_assert(sizeof(RBPlayer_GetItemHeld) == 0x000008, "Wrong size on RBPlayer_GetItemHeld");
static_assert(offsetof(RBPlayer_GetItemHeld, ReturnValue) == 0x000000, "Member 'RBPlayer_GetItemHeld::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetKnockoutBleedoutTime
// 0x0004 (0x0004 - 0x0000)
struct RBPlayer_GetKnockoutBleedoutTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetKnockoutBleedoutTime) == 0x000004, "Wrong alignment on RBPlayer_GetKnockoutBleedoutTime");
static_assert(sizeof(RBPlayer_GetKnockoutBleedoutTime) == 0x000004, "Wrong size on RBPlayer_GetKnockoutBleedoutTime");
static_assert(offsetof(RBPlayer_GetKnockoutBleedoutTime, ReturnValue) == 0x000000, "Member 'RBPlayer_GetKnockoutBleedoutTime::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetMainShadowMesh
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_GetMainShadowMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetMainShadowMesh) == 0x000008, "Wrong alignment on RBPlayer_GetMainShadowMesh");
static_assert(sizeof(RBPlayer_GetMainShadowMesh) == 0x000008, "Wrong size on RBPlayer_GetMainShadowMesh");
static_assert(offsetof(RBPlayer_GetMainShadowMesh, ReturnValue) == 0x000000, "Member 'RBPlayer_GetMainShadowMesh::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetStaminaBoostItemModifier
// 0x000C (0x000C - 0x0000)
struct RBPlayer_GetStaminaBoostItemModifier final
{
public:
	struct FRBGameplayAttributeModifier           ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetStaminaBoostItemModifier) == 0x000004, "Wrong alignment on RBPlayer_GetStaminaBoostItemModifier");
static_assert(sizeof(RBPlayer_GetStaminaBoostItemModifier) == 0x00000C, "Wrong size on RBPlayer_GetStaminaBoostItemModifier");
static_assert(offsetof(RBPlayer_GetStaminaBoostItemModifier, ReturnValue) == 0x000000, "Member 'RBPlayer_GetStaminaBoostItemModifier::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.GetUniqueId
// 0x0028 (0x0028 - 0x0000)
struct RBPlayer_GetUniqueId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_GetUniqueId) == 0x000008, "Wrong alignment on RBPlayer_GetUniqueId");
static_assert(sizeof(RBPlayer_GetUniqueId) == 0x000028, "Wrong size on RBPlayer_GetUniqueId");
static_assert(offsetof(RBPlayer_GetUniqueId, ReturnValue) == 0x000000, "Member 'RBPlayer_GetUniqueId::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.HasHotPotato
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_HasHotPotato final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_HasHotPotato) == 0x000001, "Wrong alignment on RBPlayer_HasHotPotato");
static_assert(sizeof(RBPlayer_HasHotPotato) == 0x000001, "Wrong size on RBPlayer_HasHotPotato");
static_assert(offsetof(RBPlayer_HasHotPotato, ReturnValue) == 0x000000, "Member 'RBPlayer_HasHotPotato::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsAssociatedPlayerConnected
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsAssociatedPlayerConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsAssociatedPlayerConnected) == 0x000001, "Wrong alignment on RBPlayer_IsAssociatedPlayerConnected");
static_assert(sizeof(RBPlayer_IsAssociatedPlayerConnected) == 0x000001, "Wrong size on RBPlayer_IsAssociatedPlayerConnected");
static_assert(offsetof(RBPlayer_IsAssociatedPlayerConnected, ReturnValue) == 0x000000, "Member 'RBPlayer_IsAssociatedPlayerConnected::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsConsideredKnockedDown
// 0x0002 (0x0002 - 0x0000)
struct RBPlayer_IsConsideredKnockedDown final
{
public:
	bool                                          bConsiderDelay;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsConsideredKnockedDown) == 0x000001, "Wrong alignment on RBPlayer_IsConsideredKnockedDown");
static_assert(sizeof(RBPlayer_IsConsideredKnockedDown) == 0x000002, "Wrong size on RBPlayer_IsConsideredKnockedDown");
static_assert(offsetof(RBPlayer_IsConsideredKnockedDown, bConsiderDelay) == 0x000000, "Member 'RBPlayer_IsConsideredKnockedDown::bConsiderDelay' has a wrong offset!");
static_assert(offsetof(RBPlayer_IsConsideredKnockedDown, ReturnValue) == 0x000001, "Member 'RBPlayer_IsConsideredKnockedDown::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsConsideredMakingKnockedDownBloodTrail
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsConsideredMakingKnockedDownBloodTrail final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsConsideredMakingKnockedDownBloodTrail) == 0x000001, "Wrong alignment on RBPlayer_IsConsideredMakingKnockedDownBloodTrail");
static_assert(sizeof(RBPlayer_IsConsideredMakingKnockedDownBloodTrail) == 0x000001, "Wrong size on RBPlayer_IsConsideredMakingKnockedDownBloodTrail");
static_assert(offsetof(RBPlayer_IsConsideredMakingKnockedDownBloodTrail, ReturnValue) == 0x000000, "Member 'RBPlayer_IsConsideredMakingKnockedDownBloodTrail::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsConsideredPeeking
// 0x0002 (0x0002 - 0x0000)
struct RBPlayer_IsConsideredPeeking final
{
public:
	bool                                          bIgnoreNetworkFlag;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsConsideredPeeking) == 0x000001, "Wrong alignment on RBPlayer_IsConsideredPeeking");
static_assert(sizeof(RBPlayer_IsConsideredPeeking) == 0x000002, "Wrong size on RBPlayer_IsConsideredPeeking");
static_assert(offsetof(RBPlayer_IsConsideredPeeking, bIgnoreNetworkFlag) == 0x000000, "Member 'RBPlayer_IsConsideredPeeking::bIgnoreNetworkFlag' has a wrong offset!");
static_assert(offsetof(RBPlayer_IsConsideredPeeking, ReturnValue) == 0x000001, "Member 'RBPlayer_IsConsideredPeeking::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsConsideredUsingSpectraActiveSkill
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsConsideredUsingSpectraActiveSkill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsConsideredUsingSpectraActiveSkill) == 0x000001, "Wrong alignment on RBPlayer_IsConsideredUsingSpectraActiveSkill");
static_assert(sizeof(RBPlayer_IsConsideredUsingSpectraActiveSkill) == 0x000001, "Wrong size on RBPlayer_IsConsideredUsingSpectraActiveSkill");
static_assert(offsetof(RBPlayer_IsConsideredUsingSpectraActiveSkill, ReturnValue) == 0x000000, "Member 'RBPlayer_IsConsideredUsingSpectraActiveSkill::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsControllerInMenu
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsControllerInMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsControllerInMenu) == 0x000001, "Wrong alignment on RBPlayer_IsControllerInMenu");
static_assert(sizeof(RBPlayer_IsControllerInMenu) == 0x000001, "Wrong size on RBPlayer_IsControllerInMenu");
static_assert(offsetof(RBPlayer_IsControllerInMenu, ReturnValue) == 0x000000, "Member 'RBPlayer_IsControllerInMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsEyeLocationUnderwater
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsEyeLocationUnderwater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsEyeLocationUnderwater) == 0x000001, "Wrong alignment on RBPlayer_IsEyeLocationUnderwater");
static_assert(sizeof(RBPlayer_IsEyeLocationUnderwater) == 0x000001, "Wrong size on RBPlayer_IsEyeLocationUnderwater");
static_assert(offsetof(RBPlayer_IsEyeLocationUnderwater, ReturnValue) == 0x000000, "Member 'RBPlayer_IsEyeLocationUnderwater::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsFocusOnSwappingItem
// 0x0010 (0x0010 - 0x0000)
struct RBPlayer_IsFocusOnSwappingItem final
{
public:
	const class ARBPickup*                        Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2283[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayer_IsFocusOnSwappingItem) == 0x000008, "Wrong alignment on RBPlayer_IsFocusOnSwappingItem");
static_assert(sizeof(RBPlayer_IsFocusOnSwappingItem) == 0x000010, "Wrong size on RBPlayer_IsFocusOnSwappingItem");
static_assert(offsetof(RBPlayer_IsFocusOnSwappingItem, Item) == 0x000000, "Member 'RBPlayer_IsFocusOnSwappingItem::Item' has a wrong offset!");
static_assert(offsetof(RBPlayer_IsFocusOnSwappingItem, ReturnValue) == 0x000008, "Member 'RBPlayer_IsFocusOnSwappingItem::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsFollower
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsFollower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsFollower) == 0x000001, "Wrong alignment on RBPlayer_IsFollower");
static_assert(sizeof(RBPlayer_IsFollower) == 0x000001, "Wrong size on RBPlayer_IsFollower");
static_assert(offsetof(RBPlayer_IsFollower, ReturnValue) == 0x000000, "Member 'RBPlayer_IsFollower::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsInPsychosis
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsInPsychosis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsInPsychosis) == 0x000001, "Wrong alignment on RBPlayer_IsInPsychosis");
static_assert(sizeof(RBPlayer_IsInPsychosis) == 0x000001, "Wrong size on RBPlayer_IsInPsychosis");
static_assert(offsetof(RBPlayer_IsInPsychosis, ReturnValue) == 0x000000, "Member 'RBPlayer_IsInPsychosis::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsInSAS
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsInSAS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsInSAS) == 0x000001, "Wrong alignment on RBPlayer_IsInSAS");
static_assert(sizeof(RBPlayer_IsInSAS) == 0x000001, "Wrong size on RBPlayer_IsInSAS");
static_assert(offsetof(RBPlayer_IsInSAS, ReturnValue) == 0x000000, "Member 'RBPlayer_IsInSAS::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsLocallyControlledOrSpectated
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsLocallyControlledOrSpectated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsLocallyControlledOrSpectated) == 0x000001, "Wrong alignment on RBPlayer_IsLocallyControlledOrSpectated");
static_assert(sizeof(RBPlayer_IsLocallyControlledOrSpectated) == 0x000001, "Wrong size on RBPlayer_IsLocallyControlledOrSpectated");
static_assert(offsetof(RBPlayer_IsLocallyControlledOrSpectated, ReturnValue) == 0x000000, "Member 'RBPlayer_IsLocallyControlledOrSpectated::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsLocallySpectated
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsLocallySpectated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsLocallySpectated) == 0x000001, "Wrong alignment on RBPlayer_IsLocallySpectated");
static_assert(sizeof(RBPlayer_IsLocallySpectated) == 0x000001, "Wrong size on RBPlayer_IsLocallySpectated");
static_assert(offsetof(RBPlayer_IsLocallySpectated, ReturnValue) == 0x000000, "Member 'RBPlayer_IsLocallySpectated::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.IsReadyToWatch
// 0x0001 (0x0001 - 0x0000)
struct RBPlayer_IsReadyToWatch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_IsReadyToWatch) == 0x000001, "Wrong alignment on RBPlayer_IsReadyToWatch");
static_assert(sizeof(RBPlayer_IsReadyToWatch) == 0x000001, "Wrong size on RBPlayer_IsReadyToWatch");
static_assert(offsetof(RBPlayer_IsReadyToWatch, ReturnValue) == 0x000000, "Member 'RBPlayer_IsReadyToWatch::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayer.RBPlayerState
// 0x0008 (0x0008 - 0x0000)
struct RBPlayer_RBPlayerState final
{
public:
	class ARBPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayer_RBPlayerState) == 0x000008, "Wrong alignment on RBPlayer_RBPlayerState");
static_assert(sizeof(RBPlayer_RBPlayerState) == 0x000008, "Wrong size on RBPlayer_RBPlayerState");
static_assert(offsetof(RBPlayer_RBPlayerState, ReturnValue) == 0x000000, "Member 'RBPlayer_RBPlayerState::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerTriggerVolume.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerTriggerVolume_BP_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerVolume_BP_SetEnabled) == 0x000001, "Wrong alignment on RBPlayerTriggerVolume_BP_SetEnabled");
static_assert(sizeof(RBPlayerTriggerVolume_BP_SetEnabled) == 0x000001, "Wrong size on RBPlayerTriggerVolume_BP_SetEnabled");
static_assert(offsetof(RBPlayerTriggerVolume_BP_SetEnabled, Enabled) == 0x000000, "Member 'RBPlayerTriggerVolume_BP_SetEnabled::Enabled' has a wrong offset!");

// Function OPP.RBPlayerTriggerVolume.OnPlayerEnteredEventBypass
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerTriggerVolume_OnPlayerEnteredEventBypass final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerVolume_OnPlayerEnteredEventBypass) == 0x000008, "Wrong alignment on RBPlayerTriggerVolume_OnPlayerEnteredEventBypass");
static_assert(sizeof(RBPlayerTriggerVolume_OnPlayerEnteredEventBypass) == 0x000008, "Wrong size on RBPlayerTriggerVolume_OnPlayerEnteredEventBypass");
static_assert(offsetof(RBPlayerTriggerVolume_OnPlayerEnteredEventBypass, Player) == 0x000000, "Member 'RBPlayerTriggerVolume_OnPlayerEnteredEventBypass::Player' has a wrong offset!");

// Function OPP.RBPlayerTriggerVolume.OnPlayerExitedEventBypass
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerTriggerVolume_OnPlayerExitedEventBypass final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerVolume_OnPlayerExitedEventBypass) == 0x000008, "Wrong alignment on RBPlayerTriggerVolume_OnPlayerExitedEventBypass");
static_assert(sizeof(RBPlayerTriggerVolume_OnPlayerExitedEventBypass) == 0x000008, "Wrong size on RBPlayerTriggerVolume_OnPlayerExitedEventBypass");
static_assert(offsetof(RBPlayerTriggerVolume_OnPlayerExitedEventBypass, Player) == 0x000000, "Member 'RBPlayerTriggerVolume_OnPlayerExitedEventBypass::Player' has a wrong offset!");

// Function OPP.RBPlayerTriggerVolume.OnTriggeredEventBypass
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerTriggerVolume_OnTriggeredEventBypass final
{
public:
	class URBPlayerTriggerComponent*              Trigger;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerVolume_OnTriggeredEventBypass) == 0x000008, "Wrong alignment on RBPlayerTriggerVolume_OnTriggeredEventBypass");
static_assert(sizeof(RBPlayerTriggerVolume_OnTriggeredEventBypass) == 0x000008, "Wrong size on RBPlayerTriggerVolume_OnTriggeredEventBypass");
static_assert(offsetof(RBPlayerTriggerVolume_OnTriggeredEventBypass, Trigger) == 0x000000, "Member 'RBPlayerTriggerVolume_OnTriggeredEventBypass::Trigger' has a wrong offset!");

// Function OPP.RBPlayerTriggerVolume.OnUntriggeredEventBypass
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerTriggerVolume_OnUntriggeredEventBypass final
{
public:
	class URBPlayerTriggerComponent*              Trigger;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerVolume_OnUntriggeredEventBypass) == 0x000008, "Wrong alignment on RBPlayerTriggerVolume_OnUntriggeredEventBypass");
static_assert(sizeof(RBPlayerTriggerVolume_OnUntriggeredEventBypass) == 0x000008, "Wrong size on RBPlayerTriggerVolume_OnUntriggeredEventBypass");
static_assert(offsetof(RBPlayerTriggerVolume_OnUntriggeredEventBypass, Trigger) == 0x000000, "Member 'RBPlayerTriggerVolume_OnUntriggeredEventBypass::Trigger' has a wrong offset!");

// Function OPP.RBPlayerTriggerVolume.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerTriggerVolume_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerVolume_IsEnabled) == 0x000001, "Wrong alignment on RBPlayerTriggerVolume_IsEnabled");
static_assert(sizeof(RBPlayerTriggerVolume_IsEnabled) == 0x000001, "Wrong size on RBPlayerTriggerVolume_IsEnabled");
static_assert(offsetof(RBPlayerTriggerVolume_IsEnabled, ReturnValue) == 0x000000, "Member 'RBPlayerTriggerVolume_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.GetAssignedPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerCell_GetAssignedPlayer final
{
public:
	class ARBLobbyPlayerController*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetAssignedPlayer) == 0x000008, "Wrong alignment on RBPlayerCell_GetAssignedPlayer");
static_assert(sizeof(RBPlayerCell_GetAssignedPlayer) == 0x000008, "Wrong size on RBPlayerCell_GetAssignedPlayer");
static_assert(offsetof(RBPlayerCell_GetAssignedPlayer, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetAssignedPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.GetLinkedPlayerStarts
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCell_GetLinkedPlayerStarts final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetLinkedPlayerStarts) == 0x000008, "Wrong alignment on RBPlayerCell_GetLinkedPlayerStarts");
static_assert(sizeof(RBPlayerCell_GetLinkedPlayerStarts) == 0x000010, "Wrong size on RBPlayerCell_GetLinkedPlayerStarts");
static_assert(offsetof(RBPlayerCell_GetLinkedPlayerStarts, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetLinkedPlayerStarts::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.OnPlayerCellCustomizationUpdated
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerCell_OnPlayerCellCustomizationUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRBPlayerCellCustomizationEntry> PlayerCellCustomization;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_OnPlayerCellCustomizationUpdated) == 0x000008, "Wrong alignment on RBPlayerCell_OnPlayerCellCustomizationUpdated");
static_assert(sizeof(RBPlayerCell_OnPlayerCellCustomizationUpdated) == 0x000018, "Wrong size on RBPlayerCell_OnPlayerCellCustomizationUpdated");
static_assert(offsetof(RBPlayerCell_OnPlayerCellCustomizationUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBPlayerCell_OnPlayerCellCustomizationUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerCell_OnPlayerCellCustomizationUpdated, PlayerCellCustomization) == 0x000008, "Member 'RBPlayerCell_OnPlayerCellCustomizationUpdated::PlayerCellCustomization' has a wrong offset!");

// Function OPP.RBPlayerCell.OnPlayerEnteredReflectionCaptureTrigger
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerCell_OnPlayerEnteredReflectionCaptureTrigger final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_OnPlayerEnteredReflectionCaptureTrigger) == 0x000008, "Wrong alignment on RBPlayerCell_OnPlayerEnteredReflectionCaptureTrigger");
static_assert(sizeof(RBPlayerCell_OnPlayerEnteredReflectionCaptureTrigger) == 0x000008, "Wrong size on RBPlayerCell_OnPlayerEnteredReflectionCaptureTrigger");
static_assert(offsetof(RBPlayerCell_OnPlayerEnteredReflectionCaptureTrigger, Player) == 0x000000, "Member 'RBPlayerCell_OnPlayerEnteredReflectionCaptureTrigger::Player' has a wrong offset!");

// Function OPP.RBPlayerCell.PreviewCustomization
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCell_PreviewCustomization final
{
public:
	ECustomizationMenuCategory                    Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBPlayerCellItemDefinition*            ItemDefinition;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_PreviewCustomization) == 0x000008, "Wrong alignment on RBPlayerCell_PreviewCustomization");
static_assert(sizeof(RBPlayerCell_PreviewCustomization) == 0x000010, "Wrong size on RBPlayerCell_PreviewCustomization");
static_assert(offsetof(RBPlayerCell_PreviewCustomization, Slot) == 0x000000, "Member 'RBPlayerCell_PreviewCustomization::Slot' has a wrong offset!");
static_assert(offsetof(RBPlayerCell_PreviewCustomization, ItemDefinition) == 0x000008, "Member 'RBPlayerCell_PreviewCustomization::ItemDefinition' has a wrong offset!");

// Function OPP.RBPlayerCell.RefreshCustomization
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCell_RefreshCustomization final
{
public:
	TArray<struct FRBPlayerCellCustomizationEntry> PlayerCellCustomization;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_RefreshCustomization) == 0x000008, "Wrong alignment on RBPlayerCell_RefreshCustomization");
static_assert(sizeof(RBPlayerCell_RefreshCustomization) == 0x000010, "Wrong size on RBPlayerCell_RefreshCustomization");
static_assert(offsetof(RBPlayerCell_RefreshCustomization, PlayerCellCustomization) == 0x000000, "Member 'RBPlayerCell_RefreshCustomization::PlayerCellCustomization' has a wrong offset!");

// Function OPP.RBPlayerCell.GetCellCustomizationCamera
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerCell_GetCellCustomizationCamera final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetCellCustomizationCamera) == 0x000008, "Wrong alignment on RBPlayerCell_GetCellCustomizationCamera");
static_assert(sizeof(RBPlayerCell_GetCellCustomizationCamera) == 0x000008, "Wrong size on RBPlayerCell_GetCellCustomizationCamera");
static_assert(offsetof(RBPlayerCell_GetCellCustomizationCamera, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetCellCustomizationCamera::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.GetCellMenuCharacter
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerCell_GetCellMenuCharacter final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetCellMenuCharacter) == 0x000008, "Wrong alignment on RBPlayerCell_GetCellMenuCharacter");
static_assert(sizeof(RBPlayerCell_GetCellMenuCharacter) == 0x000008, "Wrong size on RBPlayerCell_GetCellMenuCharacter");
static_assert(offsetof(RBPlayerCell_GetCellMenuCharacter, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetCellMenuCharacter::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.GetLinkedBlockingVolumes
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCell_GetLinkedBlockingVolumes final
{
public:
	TArray<class ARBBlockingVolume*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetLinkedBlockingVolumes) == 0x000008, "Wrong alignment on RBPlayerCell_GetLinkedBlockingVolumes");
static_assert(sizeof(RBPlayerCell_GetLinkedBlockingVolumes) == 0x000010, "Wrong size on RBPlayerCell_GetLinkedBlockingVolumes");
static_assert(offsetof(RBPlayerCell_GetLinkedBlockingVolumes, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetLinkedBlockingVolumes::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.GetLinkedCellItems
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCell_GetLinkedCellItems final
{
public:
	TArray<class ARBPlayerCellItem*>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetLinkedCellItems) == 0x000008, "Wrong alignment on RBPlayerCell_GetLinkedCellItems");
static_assert(sizeof(RBPlayerCell_GetLinkedCellItems) == 0x000010, "Wrong size on RBPlayerCell_GetLinkedCellItems");
static_assert(offsetof(RBPlayerCell_GetLinkedCellItems, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetLinkedCellItems::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.GetLinkedCollectibleDisplays
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCell_GetLinkedCollectibleDisplays final
{
public:
	TArray<class ARBCollectibleDisplay*>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetLinkedCollectibleDisplays) == 0x000008, "Wrong alignment on RBPlayerCell_GetLinkedCollectibleDisplays");
static_assert(sizeof(RBPlayerCell_GetLinkedCollectibleDisplays) == 0x000010, "Wrong size on RBPlayerCell_GetLinkedCollectibleDisplays");
static_assert(offsetof(RBPlayerCell_GetLinkedCollectibleDisplays, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetLinkedCollectibleDisplays::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.GetLinkedCustomizationInterfaces
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCell_GetLinkedCustomizationInterfaces final
{
public:
	TArray<class ARBCustomizationInterface*>      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetLinkedCustomizationInterfaces) == 0x000008, "Wrong alignment on RBPlayerCell_GetLinkedCustomizationInterfaces");
static_assert(sizeof(RBPlayerCell_GetLinkedCustomizationInterfaces) == 0x000010, "Wrong size on RBPlayerCell_GetLinkedCustomizationInterfaces");
static_assert(offsetof(RBPlayerCell_GetLinkedCustomizationInterfaces, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetLinkedCustomizationInterfaces::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.GetLinkedDoors
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCell_GetLinkedDoors final
{
public:
	TArray<class ARBDoor*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetLinkedDoors) == 0x000008, "Wrong alignment on RBPlayerCell_GetLinkedDoors");
static_assert(sizeof(RBPlayerCell_GetLinkedDoors) == 0x000010, "Wrong size on RBPlayerCell_GetLinkedDoors");
static_assert(offsetof(RBPlayerCell_GetLinkedDoors, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetLinkedDoors::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCell.GetLinkedInteractibles
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCell_GetLinkedInteractibles final
{
public:
	TArray<class ARBInteractible*>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCell_GetLinkedInteractibles) == 0x000008, "Wrong alignment on RBPlayerCell_GetLinkedInteractibles");
static_assert(sizeof(RBPlayerCell_GetLinkedInteractibles) == 0x000010, "Wrong size on RBPlayerCell_GetLinkedInteractibles");
static_assert(offsetof(RBPlayerCell_GetLinkedInteractibles, ReturnValue) == 0x000000, "Member 'RBPlayerCell_GetLinkedInteractibles::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCellCustomizationConfig.GetDefaultPlayerCellItemForSlot
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCellCustomizationConfig_GetDefaultPlayerCellItemForSlot final
{
public:
	ECustomizationMenuCategory                    Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBPlayerCellItemDefinition*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCellCustomizationConfig_GetDefaultPlayerCellItemForSlot) == 0x000008, "Wrong alignment on RBPlayerCellCustomizationConfig_GetDefaultPlayerCellItemForSlot");
static_assert(sizeof(RBPlayerCellCustomizationConfig_GetDefaultPlayerCellItemForSlot) == 0x000010, "Wrong size on RBPlayerCellCustomizationConfig_GetDefaultPlayerCellItemForSlot");
static_assert(offsetof(RBPlayerCellCustomizationConfig_GetDefaultPlayerCellItemForSlot, Slot) == 0x000000, "Member 'RBPlayerCellCustomizationConfig_GetDefaultPlayerCellItemForSlot::Slot' has a wrong offset!");
static_assert(offsetof(RBPlayerCellCustomizationConfig_GetDefaultPlayerCellItemForSlot, ReturnValue) == 0x000008, "Member 'RBPlayerCellCustomizationConfig_GetDefaultPlayerCellItemForSlot::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCellCustomizationConfig.GetPlayerCellItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCellCustomizationConfig_GetPlayerCellItemDefinition final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBPlayerCellItemDefinition*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCellCustomizationConfig_GetPlayerCellItemDefinition) == 0x000008, "Wrong alignment on RBPlayerCellCustomizationConfig_GetPlayerCellItemDefinition");
static_assert(sizeof(RBPlayerCellCustomizationConfig_GetPlayerCellItemDefinition) == 0x000010, "Wrong size on RBPlayerCellCustomizationConfig_GetPlayerCellItemDefinition");
static_assert(offsetof(RBPlayerCellCustomizationConfig_GetPlayerCellItemDefinition, ID) == 0x000000, "Member 'RBPlayerCellCustomizationConfig_GetPlayerCellItemDefinition::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerCellCustomizationConfig_GetPlayerCellItemDefinition, ReturnValue) == 0x000008, "Member 'RBPlayerCellCustomizationConfig_GetPlayerCellItemDefinition::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCellItem.Event_AssignItem
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerCellItem_Event_AssignItem final
{
public:
	class URBPlayerCellItemDefinition*            ItemDefinition;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCellItem_Event_AssignItem) == 0x000008, "Wrong alignment on RBPlayerCellItem_Event_AssignItem");
static_assert(sizeof(RBPlayerCellItem_Event_AssignItem) == 0x000008, "Wrong size on RBPlayerCellItem_Event_AssignItem");
static_assert(offsetof(RBPlayerCellItem_Event_AssignItem, ItemDefinition) == 0x000000, "Member 'RBPlayerCellItem_Event_AssignItem::ItemDefinition' has a wrong offset!");

// Function OPP.RBPlayerCellItem.Event_AssignToPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerCellItem_Event_AssignToPlayer final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCellItem_Event_AssignToPlayer) == 0x000008, "Wrong alignment on RBPlayerCellItem_Event_AssignToPlayer");
static_assert(sizeof(RBPlayerCellItem_Event_AssignToPlayer) == 0x000008, "Wrong size on RBPlayerCellItem_Event_AssignToPlayer");
static_assert(offsetof(RBPlayerCellItem_Event_AssignToPlayer, RBLobbyPlayerState) == 0x000000, "Member 'RBPlayerCellItem_Event_AssignToPlayer::RBLobbyPlayerState' has a wrong offset!");

// Function OPP.RBPlayerCondition_Blueprint.Event_EvaluateCondition
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCondition_Blueprint_Event_EvaluateCondition final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerCondition_Blueprint_Event_EvaluateCondition) == 0x000008, "Wrong alignment on RBPlayerCondition_Blueprint_Event_EvaluateCondition");
static_assert(sizeof(RBPlayerCondition_Blueprint_Event_EvaluateCondition) == 0x000010, "Wrong size on RBPlayerCondition_Blueprint_Event_EvaluateCondition");
static_assert(offsetof(RBPlayerCondition_Blueprint_Event_EvaluateCondition, Player) == 0x000000, "Member 'RBPlayerCondition_Blueprint_Event_EvaluateCondition::Player' has a wrong offset!");
static_assert(offsetof(RBPlayerCondition_Blueprint_Event_EvaluateCondition, ReturnValue) == 0x000008, "Member 'RBPlayerCondition_Blueprint_Event_EvaluateCondition::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOutfit.GetUnlockLevel
// 0x0004 (0x0004 - 0x0000)
struct RBCustomizationOutfit_GetUnlockLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomizationOutfit_GetUnlockLevel) == 0x000004, "Wrong alignment on RBCustomizationOutfit_GetUnlockLevel");
static_assert(sizeof(RBCustomizationOutfit_GetUnlockLevel) == 0x000004, "Wrong size on RBCustomizationOutfit_GetUnlockLevel");
static_assert(offsetof(RBCustomizationOutfit_GetUnlockLevel, ReturnValue) == 0x000000, "Member 'RBCustomizationOutfit_GetUnlockLevel::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOutfit.BP_GetAllResourcesToLoad
// 0x0018 (0x0018 - 0x0000)
struct RBCustomizationOutfit_BP_GetAllResourcesToLoad final
{
public:
	bool                                          IsFemale;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2290[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomizationOutfit_BP_GetAllResourcesToLoad) == 0x000008, "Wrong alignment on RBCustomizationOutfit_BP_GetAllResourcesToLoad");
static_assert(sizeof(RBCustomizationOutfit_BP_GetAllResourcesToLoad) == 0x000018, "Wrong size on RBCustomizationOutfit_BP_GetAllResourcesToLoad");
static_assert(offsetof(RBCustomizationOutfit_BP_GetAllResourcesToLoad, IsFemale) == 0x000000, "Member 'RBCustomizationOutfit_BP_GetAllResourcesToLoad::IsFemale' has a wrong offset!");
static_assert(offsetof(RBCustomizationOutfit_BP_GetAllResourcesToLoad, ReturnValue) == 0x000008, "Member 'RBCustomizationOutfit_BP_GetAllResourcesToLoad::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOutfit.CanEquipSinglePieces
// 0x0001 (0x0001 - 0x0000)
struct RBCustomizationOutfit_CanEquipSinglePieces final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomizationOutfit_CanEquipSinglePieces) == 0x000001, "Wrong alignment on RBCustomizationOutfit_CanEquipSinglePieces");
static_assert(sizeof(RBCustomizationOutfit_CanEquipSinglePieces) == 0x000001, "Wrong size on RBCustomizationOutfit_CanEquipSinglePieces");
static_assert(offsetof(RBCustomizationOutfit_CanEquipSinglePieces, ReturnValue) == 0x000000, "Member 'RBCustomizationOutfit_CanEquipSinglePieces::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOutfit.GetNonAcquiredOptions
// 0x0018 (0x0018 - 0x0000)
struct RBCustomizationOutfit_GetNonAcquiredOptions final
{
public:
	const class ARBPlayerState*                   RBPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class URBPlayerCustomizationOption*>   OutOptions;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomizationOutfit_GetNonAcquiredOptions) == 0x000008, "Wrong alignment on RBCustomizationOutfit_GetNonAcquiredOptions");
static_assert(sizeof(RBCustomizationOutfit_GetNonAcquiredOptions) == 0x000018, "Wrong size on RBCustomizationOutfit_GetNonAcquiredOptions");
static_assert(offsetof(RBCustomizationOutfit_GetNonAcquiredOptions, RBPlayerState) == 0x000000, "Member 'RBCustomizationOutfit_GetNonAcquiredOptions::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBCustomizationOutfit_GetNonAcquiredOptions, OutOptions) == 0x000008, "Member 'RBCustomizationOutfit_GetNonAcquiredOptions::OutOptions' has a wrong offset!");

// Function OPP.RBCustomizationOutfit.GetOutfitCustomizationOption
// 0x0010 (0x0010 - 0x0000)
struct RBCustomizationOutfit_GetOutfitCustomizationOption final
{
public:
	EPlayerCustomizationSlot                      Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2291[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URBPlayerCustomizationOption*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomizationOutfit_GetOutfitCustomizationOption) == 0x000008, "Wrong alignment on RBCustomizationOutfit_GetOutfitCustomizationOption");
static_assert(sizeof(RBCustomizationOutfit_GetOutfitCustomizationOption) == 0x000010, "Wrong size on RBCustomizationOutfit_GetOutfitCustomizationOption");
static_assert(offsetof(RBCustomizationOutfit_GetOutfitCustomizationOption, Slot) == 0x000000, "Member 'RBCustomizationOutfit_GetOutfitCustomizationOption::Slot' has a wrong offset!");
static_assert(offsetof(RBCustomizationOutfit_GetOutfitCustomizationOption, ReturnValue) == 0x000008, "Member 'RBCustomizationOutfit_GetOutfitCustomizationOption::ReturnValue' has a wrong offset!");

// Function OPP.RBCustomizationOutfit.IsSlotPartOfOutfit
// 0x0002 (0x0002 - 0x0000)
struct RBCustomizationOutfit_IsSlotPartOfOutfit final
{
public:
	EPlayerCustomizationSlot                      Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBCustomizationOutfit_IsSlotPartOfOutfit) == 0x000001, "Wrong alignment on RBCustomizationOutfit_IsSlotPartOfOutfit");
static_assert(sizeof(RBCustomizationOutfit_IsSlotPartOfOutfit) == 0x000002, "Wrong size on RBCustomizationOutfit_IsSlotPartOfOutfit");
static_assert(offsetof(RBCustomizationOutfit_IsSlotPartOfOutfit, Slot) == 0x000000, "Member 'RBCustomizationOutfit_IsSlotPartOfOutfit::Slot' has a wrong offset!");
static_assert(offsetof(RBCustomizationOutfit_IsSlotPartOfOutfit, ReturnValue) == 0x000001, "Member 'RBCustomizationOutfit_IsSlotPartOfOutfit::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOwner.OnExtraCustomizationMeshesAddedForSlot
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerCustomizationOwner_OnExtraCustomizationMeshesAddedForSlot final
{
public:
	TArray<class USkeletalMeshComponent*>         AddedExtraMeshes;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPlayerCustomizationSlot                      Slot;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2292[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerCustomizationOwner_OnExtraCustomizationMeshesAddedForSlot) == 0x000008, "Wrong alignment on RBPlayerCustomizationOwner_OnExtraCustomizationMeshesAddedForSlot");
static_assert(sizeof(RBPlayerCustomizationOwner_OnExtraCustomizationMeshesAddedForSlot) == 0x000018, "Wrong size on RBPlayerCustomizationOwner_OnExtraCustomizationMeshesAddedForSlot");
static_assert(offsetof(RBPlayerCustomizationOwner_OnExtraCustomizationMeshesAddedForSlot, AddedExtraMeshes) == 0x000000, "Member 'RBPlayerCustomizationOwner_OnExtraCustomizationMeshesAddedForSlot::AddedExtraMeshes' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationOwner_OnExtraCustomizationMeshesAddedForSlot, Slot) == 0x000010, "Member 'RBPlayerCustomizationOwner_OnExtraCustomizationMeshesAddedForSlot::Slot' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOwner.GetMainParentSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerCustomizationOwner_GetMainParentSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOwner_GetMainParentSkeletalMesh) == 0x000008, "Wrong alignment on RBPlayerCustomizationOwner_GetMainParentSkeletalMesh");
static_assert(sizeof(RBPlayerCustomizationOwner_GetMainParentSkeletalMesh) == 0x000008, "Wrong size on RBPlayerCustomizationOwner_GetMainParentSkeletalMesh");
static_assert(offsetof(RBPlayerCustomizationOwner_GetMainParentSkeletalMesh, ReturnValue) == 0x000000, "Member 'RBPlayerCustomizationOwner_GetMainParentSkeletalMesh::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOwner.GetPlayerCustomizationInfo
// 0x0038 (0x0038 - 0x0000)
struct RBPlayerCustomizationOwner_GetPlayerCustomizationInfo final
{
public:
	struct FRBPlayerCustomizationInfo             ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOwner_GetPlayerCustomizationInfo) == 0x000008, "Wrong alignment on RBPlayerCustomizationOwner_GetPlayerCustomizationInfo");
static_assert(sizeof(RBPlayerCustomizationOwner_GetPlayerCustomizationInfo) == 0x000038, "Wrong size on RBPlayerCustomizationOwner_GetPlayerCustomizationInfo");
static_assert(offsetof(RBPlayerCustomizationOwner_GetPlayerCustomizationInfo, ReturnValue) == 0x000000, "Member 'RBPlayerCustomizationOwner_GetPlayerCustomizationInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOwner.GetSkeletalMeshComponentForSlot
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerCustomizationOwner_GetSkeletalMeshComponentForSlot final
{
public:
	EPlayerCustomizationSlot                      Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2293[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOwner_GetSkeletalMeshComponentForSlot) == 0x000008, "Wrong alignment on RBPlayerCustomizationOwner_GetSkeletalMeshComponentForSlot");
static_assert(sizeof(RBPlayerCustomizationOwner_GetSkeletalMeshComponentForSlot) == 0x000010, "Wrong size on RBPlayerCustomizationOwner_GetSkeletalMeshComponentForSlot");
static_assert(offsetof(RBPlayerCustomizationOwner_GetSkeletalMeshComponentForSlot, Slot) == 0x000000, "Member 'RBPlayerCustomizationOwner_GetSkeletalMeshComponentForSlot::Slot' has a wrong offset!");
static_assert(offsetof(RBPlayerCustomizationOwner_GetSkeletalMeshComponentForSlot, ReturnValue) == 0x000008, "Member 'RBPlayerCustomizationOwner_GetSkeletalMeshComponentForSlot::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerCustomizationOwner.GetWatchComponent
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerCustomizationOwner_GetWatchComponent final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerCustomizationOwner_GetWatchComponent) == 0x000008, "Wrong alignment on RBPlayerCustomizationOwner_GetWatchComponent");
static_assert(sizeof(RBPlayerCustomizationOwner_GetWatchComponent) == 0x000008, "Wrong size on RBPlayerCustomizationOwner_GetWatchComponent");
static_assert(offsetof(RBPlayerCustomizationOwner_GetWatchComponent, ReturnValue) == 0x000000, "Member 'RBPlayerCustomizationOwner_GetWatchComponent::ReturnValue' has a wrong offset!");

// Function OPP.RBUpgradeMenuTab.OnItemMouseDown
// 0x0128 (0x0128 - 0x0000)
struct RBUpgradeMenuTab_OnItemMouseDown final
{
public:
	struct FMenuUpgradeItemInfo                   ItemInfo;                                          // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUpgradeMenuTab_OnItemMouseDown) == 0x000008, "Wrong alignment on RBUpgradeMenuTab_OnItemMouseDown");
static_assert(sizeof(RBUpgradeMenuTab_OnItemMouseDown) == 0x000128, "Wrong size on RBUpgradeMenuTab_OnItemMouseDown");
static_assert(offsetof(RBUpgradeMenuTab_OnItemMouseDown, ItemInfo) == 0x000000, "Member 'RBUpgradeMenuTab_OnItemMouseDown::ItemInfo' has a wrong offset!");

// Function OPP.RBUpgradeMenuTab.OnItemMouseUp
// 0x0128 (0x0128 - 0x0000)
struct RBUpgradeMenuTab_OnItemMouseUp final
{
public:
	struct FMenuUpgradeItemInfo                   ItemInfo;                                          // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUpgradeMenuTab_OnItemMouseUp) == 0x000008, "Wrong alignment on RBUpgradeMenuTab_OnItemMouseUp");
static_assert(sizeof(RBUpgradeMenuTab_OnItemMouseUp) == 0x000128, "Wrong size on RBUpgradeMenuTab_OnItemMouseUp");
static_assert(offsetof(RBUpgradeMenuTab_OnItemMouseUp, ItemInfo) == 0x000000, "Member 'RBUpgradeMenuTab_OnItemMouseUp::ItemInfo' has a wrong offset!");

// Function OPP.RBUpgradeMenuTab.TryAcquireUpgrade
// 0x0008 (0x0008 - 0x0000)
struct RBUpgradeMenuTab_TryAcquireUpgrade final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBUpgradeMenuTab_TryAcquireUpgrade) == 0x000004, "Wrong alignment on RBUpgradeMenuTab_TryAcquireUpgrade");
static_assert(sizeof(RBUpgradeMenuTab_TryAcquireUpgrade) == 0x000008, "Wrong size on RBUpgradeMenuTab_TryAcquireUpgrade");
static_assert(offsetof(RBUpgradeMenuTab_TryAcquireUpgrade, ID) == 0x000000, "Member 'RBUpgradeMenuTab_TryAcquireUpgrade::ID' has a wrong offset!");

// Function OPP.RBPlayerDetectionComponent.BP_SetCurrentState_Server
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerDetectionComponent_BP_SetCurrentState_Server final
{
public:
	EPlayerComponentDetectionState                NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerDetectionComponent_BP_SetCurrentState_Server) == 0x000001, "Wrong alignment on RBPlayerDetectionComponent_BP_SetCurrentState_Server");
static_assert(sizeof(RBPlayerDetectionComponent_BP_SetCurrentState_Server) == 0x000001, "Wrong size on RBPlayerDetectionComponent_BP_SetCurrentState_Server");
static_assert(offsetof(RBPlayerDetectionComponent_BP_SetCurrentState_Server, NewState) == 0x000000, "Member 'RBPlayerDetectionComponent_BP_SetCurrentState_Server::NewState' has a wrong offset!");

// Function OPP.RBPlayerDetectionComponent.Event_OnDetectionStateChanged
// 0x0002 (0x0002 - 0x0000)
struct RBPlayerDetectionComponent_Event_OnDetectionStateChanged final
{
public:
	EPlayerComponentDetectionState                OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerComponentDetectionState                NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerDetectionComponent_Event_OnDetectionStateChanged) == 0x000001, "Wrong alignment on RBPlayerDetectionComponent_Event_OnDetectionStateChanged");
static_assert(sizeof(RBPlayerDetectionComponent_Event_OnDetectionStateChanged) == 0x000002, "Wrong size on RBPlayerDetectionComponent_Event_OnDetectionStateChanged");
static_assert(offsetof(RBPlayerDetectionComponent_Event_OnDetectionStateChanged, OldState) == 0x000000, "Member 'RBPlayerDetectionComponent_Event_OnDetectionStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(RBPlayerDetectionComponent_Event_OnDetectionStateChanged, NewState) == 0x000001, "Member 'RBPlayerDetectionComponent_Event_OnDetectionStateChanged::NewState' has a wrong offset!");

// Function OPP.RBPlayerDetectionComponent.OnRep_CurrentState
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerDetectionComponent_OnRep_CurrentState final
{
public:
	EPlayerComponentDetectionState                OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerDetectionComponent_OnRep_CurrentState) == 0x000001, "Wrong alignment on RBPlayerDetectionComponent_OnRep_CurrentState");
static_assert(sizeof(RBPlayerDetectionComponent_OnRep_CurrentState) == 0x000001, "Wrong size on RBPlayerDetectionComponent_OnRep_CurrentState");
static_assert(offsetof(RBPlayerDetectionComponent_OnRep_CurrentState, OldState) == 0x000000, "Member 'RBPlayerDetectionComponent_OnRep_CurrentState::OldState' has a wrong offset!");

// Function OPP.RBPlayerDetectionComponent.GetCurrentDetectionAngle
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerDetectionComponent_GetCurrentDetectionAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerDetectionComponent_GetCurrentDetectionAngle) == 0x000004, "Wrong alignment on RBPlayerDetectionComponent_GetCurrentDetectionAngle");
static_assert(sizeof(RBPlayerDetectionComponent_GetCurrentDetectionAngle) == 0x000004, "Wrong size on RBPlayerDetectionComponent_GetCurrentDetectionAngle");
static_assert(offsetof(RBPlayerDetectionComponent_GetCurrentDetectionAngle, ReturnValue) == 0x000000, "Member 'RBPlayerDetectionComponent_GetCurrentDetectionAngle::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerDetectionComponent.GetCurrentDetectionDistance
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerDetectionComponent_GetCurrentDetectionDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerDetectionComponent_GetCurrentDetectionDistance) == 0x000004, "Wrong alignment on RBPlayerDetectionComponent_GetCurrentDetectionDistance");
static_assert(sizeof(RBPlayerDetectionComponent_GetCurrentDetectionDistance) == 0x000004, "Wrong size on RBPlayerDetectionComponent_GetCurrentDetectionDistance");
static_assert(offsetof(RBPlayerDetectionComponent_GetCurrentDetectionDistance, ReturnValue) == 0x000000, "Member 'RBPlayerDetectionComponent_GetCurrentDetectionDistance::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerGameSessionManager.OnPartyMemberPlayerSlotsReservationProcessed
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerGameSessionManager_OnPartyMemberPlayerSlotsReservationProcessed final
{
public:
	TArray<struct FProfileId>                     Members;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bAccepted;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerGameSessionManager_OnPartyMemberPlayerSlotsReservationProcessed) == 0x000008, "Wrong alignment on RBPlayerGameSessionManager_OnPartyMemberPlayerSlotsReservationProcessed");
static_assert(sizeof(RBPlayerGameSessionManager_OnPartyMemberPlayerSlotsReservationProcessed) == 0x000018, "Wrong size on RBPlayerGameSessionManager_OnPartyMemberPlayerSlotsReservationProcessed");
static_assert(offsetof(RBPlayerGameSessionManager_OnPartyMemberPlayerSlotsReservationProcessed, Members) == 0x000000, "Member 'RBPlayerGameSessionManager_OnPartyMemberPlayerSlotsReservationProcessed::Members' has a wrong offset!");
static_assert(offsetof(RBPlayerGameSessionManager_OnPartyMemberPlayerSlotsReservationProcessed, bAccepted) == 0x000010, "Member 'RBPlayerGameSessionManager_OnPartyMemberPlayerSlotsReservationProcessed::bAccepted' has a wrong offset!");

// Function OPP.RBPlayerGameSessionManager.GetTransitionType
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerGameSessionManager_GetTransitionType final
{
public:
	EPlayerGameSessionTransitionType              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerGameSessionManager_GetTransitionType) == 0x000001, "Wrong alignment on RBPlayerGameSessionManager_GetTransitionType");
static_assert(sizeof(RBPlayerGameSessionManager_GetTransitionType) == 0x000001, "Wrong size on RBPlayerGameSessionManager_GetTransitionType");
static_assert(offsetof(RBPlayerGameSessionManager_GetTransitionType, ReturnValue) == 0x000000, "Member 'RBPlayerGameSessionManager_GetTransitionType::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerGameSessionManager.IsBusy
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerGameSessionManager_IsBusy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerGameSessionManager_IsBusy) == 0x000001, "Wrong alignment on RBPlayerGameSessionManager_IsBusy");
static_assert(sizeof(RBPlayerGameSessionManager_IsBusy) == 0x000001, "Wrong size on RBPlayerGameSessionManager_IsBusy");
static_assert(offsetof(RBPlayerGameSessionManager_IsBusy, ReturnValue) == 0x000000, "Member 'RBPlayerGameSessionManager_IsBusy::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerInvestigationZoneComponent.BP_AddSlave_Server
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerInvestigationZoneComponent_BP_AddSlave_Server final
{
public:
	class URBPlayerInvestigationZoneComponent*    NewSlave;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerInvestigationZoneComponent_BP_AddSlave_Server) == 0x000008, "Wrong alignment on RBPlayerInvestigationZoneComponent_BP_AddSlave_Server");
static_assert(sizeof(RBPlayerInvestigationZoneComponent_BP_AddSlave_Server) == 0x000008, "Wrong size on RBPlayerInvestigationZoneComponent_BP_AddSlave_Server");
static_assert(offsetof(RBPlayerInvestigationZoneComponent_BP_AddSlave_Server, NewSlave) == 0x000000, "Member 'RBPlayerInvestigationZoneComponent_BP_AddSlave_Server::NewSlave' has a wrong offset!");

// Function OPP.RBPlayerInvestigationZoneComponent.Multicast_OnInvestigationDone
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerInvestigationZoneComponent_Multicast_OnInvestigationDone final
{
public:
	class ARBPlayer*                              Investigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerInvestigationZoneComponent_Multicast_OnInvestigationDone) == 0x000008, "Wrong alignment on RBPlayerInvestigationZoneComponent_Multicast_OnInvestigationDone");
static_assert(sizeof(RBPlayerInvestigationZoneComponent_Multicast_OnInvestigationDone) == 0x000008, "Wrong size on RBPlayerInvestigationZoneComponent_Multicast_OnInvestigationDone");
static_assert(offsetof(RBPlayerInvestigationZoneComponent_Multicast_OnInvestigationDone, Investigator) == 0x000000, "Member 'RBPlayerInvestigationZoneComponent_Multicast_OnInvestigationDone::Investigator' has a wrong offset!");

// Function OPP.RBPlayerLoadoutConfig.GetActiveSkillCommonParams
// 0x0080 (0x0080 - 0x0000)
struct RBPlayerLoadoutConfig_GetActiveSkillCommonParams final
{
public:
	EActiveSkillType                              Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveSkillCommonParams               ReturnValue;                                       // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutConfig_GetActiveSkillCommonParams) == 0x000008, "Wrong alignment on RBPlayerLoadoutConfig_GetActiveSkillCommonParams");
static_assert(sizeof(RBPlayerLoadoutConfig_GetActiveSkillCommonParams) == 0x000080, "Wrong size on RBPlayerLoadoutConfig_GetActiveSkillCommonParams");
static_assert(offsetof(RBPlayerLoadoutConfig_GetActiveSkillCommonParams, Type) == 0x000000, "Member 'RBPlayerLoadoutConfig_GetActiveSkillCommonParams::Type' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutConfig_GetActiveSkillCommonParams, ReturnValue) == 0x000008, "Member 'RBPlayerLoadoutConfig_GetActiveSkillCommonParams::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutConfig.GetActiveSkillCommonParamsById
// 0x0080 (0x0080 - 0x0000)
struct RBPlayerLoadoutConfig_GetActiveSkillCommonParamsById final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveSkillCommonParams               ReturnValue;                                       // 0x0008(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutConfig_GetActiveSkillCommonParamsById) == 0x000008, "Wrong alignment on RBPlayerLoadoutConfig_GetActiveSkillCommonParamsById");
static_assert(sizeof(RBPlayerLoadoutConfig_GetActiveSkillCommonParamsById) == 0x000080, "Wrong size on RBPlayerLoadoutConfig_GetActiveSkillCommonParamsById");
static_assert(offsetof(RBPlayerLoadoutConfig_GetActiveSkillCommonParamsById, ID) == 0x000000, "Member 'RBPlayerLoadoutConfig_GetActiveSkillCommonParamsById::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutConfig_GetActiveSkillCommonParamsById, ReturnValue) == 0x000008, "Member 'RBPlayerLoadoutConfig_GetActiveSkillCommonParamsById::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutManager.OnPlayerProgressionReceived
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerLoadoutManager_OnPlayerProgressionReceived final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutManager_OnPlayerProgressionReceived) == 0x000008, "Wrong alignment on RBPlayerLoadoutManager_OnPlayerProgressionReceived");
static_assert(sizeof(RBPlayerLoadoutManager_OnPlayerProgressionReceived) == 0x000008, "Wrong size on RBPlayerLoadoutManager_OnPlayerProgressionReceived");
static_assert(offsetof(RBPlayerLoadoutManager_OnPlayerProgressionReceived, RBPlayerState) == 0x000000, "Member 'RBPlayerLoadoutManager_OnPlayerProgressionReceived::RBPlayerState' has a wrong offset!");

// Function OPP.RBPlayerLoadoutManager.UpdatePlayerLoadout
// 0x0020 (0x0020 - 0x0000)
struct RBPlayerLoadoutManager_UpdatePlayerLoadout final
{
public:
	class ARBController*                          RBController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBPlayerLoadout                       Loadout;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutManager_UpdatePlayerLoadout) == 0x000008, "Wrong alignment on RBPlayerLoadoutManager_UpdatePlayerLoadout");
static_assert(sizeof(RBPlayerLoadoutManager_UpdatePlayerLoadout) == 0x000020, "Wrong size on RBPlayerLoadoutManager_UpdatePlayerLoadout");
static_assert(offsetof(RBPlayerLoadoutManager_UpdatePlayerLoadout, RBController) == 0x000000, "Member 'RBPlayerLoadoutManager_UpdatePlayerLoadout::RBController' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutManager_UpdatePlayerLoadout, Loadout) == 0x000008, "Member 'RBPlayerLoadoutManager_UpdatePlayerLoadout::Loadout' has a wrong offset!");

// Function OPP.RBPlayerLoadoutManager.IsValidLoadout
// 0x0028 (0x0028 - 0x0000)
struct RBPlayerLoadoutManager_IsValidLoadout final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBPlayerLoadout                       Loadout;                                           // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A2[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerLoadoutManager_IsValidLoadout) == 0x000008, "Wrong alignment on RBPlayerLoadoutManager_IsValidLoadout");
static_assert(sizeof(RBPlayerLoadoutManager_IsValidLoadout) == 0x000028, "Wrong size on RBPlayerLoadoutManager_IsValidLoadout");
static_assert(offsetof(RBPlayerLoadoutManager_IsValidLoadout, RBPlayerState) == 0x000000, "Member 'RBPlayerLoadoutManager_IsValidLoadout::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutManager_IsValidLoadout, Loadout) == 0x000008, "Member 'RBPlayerLoadoutManager_IsValidLoadout::Loadout' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutManager_IsValidLoadout, ReturnValue) == 0x000020, "Member 'RBPlayerLoadoutManager_IsValidLoadout::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutUIBlueprintLibrary.CanEquipPerkInMenuLoadout
// 0x000C (0x000C - 0x0000)
struct RBPlayerLoadoutUIBlueprintLibrary_CanEquipPerkInMenuLoadout final
{
public:
	class FName                                   ItemIdToEquip;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A3[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerLoadoutUIBlueprintLibrary_CanEquipPerkInMenuLoadout) == 0x000004, "Wrong alignment on RBPlayerLoadoutUIBlueprintLibrary_CanEquipPerkInMenuLoadout");
static_assert(sizeof(RBPlayerLoadoutUIBlueprintLibrary_CanEquipPerkInMenuLoadout) == 0x00000C, "Wrong size on RBPlayerLoadoutUIBlueprintLibrary_CanEquipPerkInMenuLoadout");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_CanEquipPerkInMenuLoadout, ItemIdToEquip) == 0x000000, "Member 'RBPlayerLoadoutUIBlueprintLibrary_CanEquipPerkInMenuLoadout::ItemIdToEquip' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_CanEquipPerkInMenuLoadout, ReturnValue) == 0x000008, "Member 'RBPlayerLoadoutUIBlueprintLibrary_CanEquipPerkInMenuLoadout::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutUIBlueprintLibrary.GetActiveSkillUpgradeItemInfo
// 0x0130 (0x0130 - 0x0000)
struct RBPlayerLoadoutUIBlueprintLibrary_GetActiveSkillUpgradeItemInfo final
{
public:
	EActiveSkillType                              ActiveSkillType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMenuUpgradeItemInfo                   ReturnValue;                                       // 0x0008(0x0128)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutUIBlueprintLibrary_GetActiveSkillUpgradeItemInfo) == 0x000008, "Wrong alignment on RBPlayerLoadoutUIBlueprintLibrary_GetActiveSkillUpgradeItemInfo");
static_assert(sizeof(RBPlayerLoadoutUIBlueprintLibrary_GetActiveSkillUpgradeItemInfo) == 0x000130, "Wrong size on RBPlayerLoadoutUIBlueprintLibrary_GetActiveSkillUpgradeItemInfo");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_GetActiveSkillUpgradeItemInfo, ActiveSkillType) == 0x000000, "Member 'RBPlayerLoadoutUIBlueprintLibrary_GetActiveSkillUpgradeItemInfo::ActiveSkillType' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_GetActiveSkillUpgradeItemInfo, ReturnValue) == 0x000008, "Member 'RBPlayerLoadoutUIBlueprintLibrary_GetActiveSkillUpgradeItemInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutUIBlueprintLibrary.GetMenuLoadout
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerLoadoutUIBlueprintLibrary_GetMenuLoadout final
{
public:
	struct FRBPlayerLoadout                       ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutUIBlueprintLibrary_GetMenuLoadout) == 0x000008, "Wrong alignment on RBPlayerLoadoutUIBlueprintLibrary_GetMenuLoadout");
static_assert(sizeof(RBPlayerLoadoutUIBlueprintLibrary_GetMenuLoadout) == 0x000018, "Wrong size on RBPlayerLoadoutUIBlueprintLibrary_GetMenuLoadout");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_GetMenuLoadout, ReturnValue) == 0x000000, "Member 'RBPlayerLoadoutUIBlueprintLibrary_GetMenuLoadout::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutUIBlueprintLibrary.GetUpgradeItemInfo
// 0x0130 (0x0130 - 0x0000)
struct RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfo final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMenuUpgradeItemInfo                   ReturnValue;                                       // 0x0008(0x0128)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfo) == 0x000008, "Wrong alignment on RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfo");
static_assert(sizeof(RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfo) == 0x000130, "Wrong size on RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfo");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfo, ItemId) == 0x000000, "Member 'RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfo::ItemId' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfo, ReturnValue) == 0x000008, "Member 'RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutUIBlueprintLibrary.GetUpgradeItemInfoForPlayer
// 0x0138 (0x0138 - 0x0000)
struct RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ARBPlayerState*                   RBPlayerState;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMenuUpgradeItemInfo                   ReturnValue;                                       // 0x0010(0x0128)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer) == 0x000008, "Wrong alignment on RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer");
static_assert(sizeof(RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer) == 0x000138, "Wrong size on RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer, ItemId) == 0x000000, "Member 'RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer::ItemId' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer, RBPlayerState) == 0x000008, "Member 'RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer, ReturnValue) == 0x000010, "Member 'RBPlayerLoadoutUIBlueprintLibrary_GetUpgradeItemInfoForPlayer::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutUIBlueprintLibrary.HasAcquiredRig
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerLoadoutUIBlueprintLibrary_HasAcquiredRig final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutUIBlueprintLibrary_HasAcquiredRig) == 0x000001, "Wrong alignment on RBPlayerLoadoutUIBlueprintLibrary_HasAcquiredRig");
static_assert(sizeof(RBPlayerLoadoutUIBlueprintLibrary_HasAcquiredRig) == 0x000001, "Wrong size on RBPlayerLoadoutUIBlueprintLibrary_HasAcquiredRig");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_HasAcquiredRig, ReturnValue) == 0x000000, "Member 'RBPlayerLoadoutUIBlueprintLibrary_HasAcquiredRig::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutUIBlueprintLibrary.ToggleActiveSkillInMenuloadout
// 0x0002 (0x0002 - 0x0000)
struct RBPlayerLoadoutUIBlueprintLibrary_ToggleActiveSkillInMenuloadout final
{
public:
	EActiveSkillType                              ActiveSkillType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerLoadoutUIBlueprintLibrary_ToggleActiveSkillInMenuloadout) == 0x000001, "Wrong alignment on RBPlayerLoadoutUIBlueprintLibrary_ToggleActiveSkillInMenuloadout");
static_assert(sizeof(RBPlayerLoadoutUIBlueprintLibrary_ToggleActiveSkillInMenuloadout) == 0x000002, "Wrong size on RBPlayerLoadoutUIBlueprintLibrary_ToggleActiveSkillInMenuloadout");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_ToggleActiveSkillInMenuloadout, ActiveSkillType) == 0x000000, "Member 'RBPlayerLoadoutUIBlueprintLibrary_ToggleActiveSkillInMenuloadout::ActiveSkillType' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_ToggleActiveSkillInMenuloadout, ReturnValue) == 0x000001, "Member 'RBPlayerLoadoutUIBlueprintLibrary_ToggleActiveSkillInMenuloadout::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerLoadoutUIBlueprintLibrary.TogglePerkInMenuLoadout
// 0x000C (0x000C - 0x0000)
struct RBPlayerLoadoutUIBlueprintLibrary_TogglePerkInMenuLoadout final
{
public:
	class FName                                   ItemIdToEquip;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22A5[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerLoadoutUIBlueprintLibrary_TogglePerkInMenuLoadout) == 0x000004, "Wrong alignment on RBPlayerLoadoutUIBlueprintLibrary_TogglePerkInMenuLoadout");
static_assert(sizeof(RBPlayerLoadoutUIBlueprintLibrary_TogglePerkInMenuLoadout) == 0x00000C, "Wrong size on RBPlayerLoadoutUIBlueprintLibrary_TogglePerkInMenuLoadout");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_TogglePerkInMenuLoadout, ItemIdToEquip) == 0x000000, "Member 'RBPlayerLoadoutUIBlueprintLibrary_TogglePerkInMenuLoadout::ItemIdToEquip' has a wrong offset!");
static_assert(offsetof(RBPlayerLoadoutUIBlueprintLibrary_TogglePerkInMenuLoadout, ReturnValue) == 0x000008, "Member 'RBPlayerLoadoutUIBlueprintLibrary_TogglePerkInMenuLoadout::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetRewardUIDataFromGeneratedRewards
// 0x0060 (0x0060 - 0x0000)
struct RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards final
{
public:
	const class ARBPlayerState*                   RBPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBGeneratedRewardData                 RewardData;                                        // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRewardUIData>                  ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards");
static_assert(sizeof(RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards) == 0x000060, "Wrong size on RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards");
static_assert(offsetof(RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards, RBPlayerState) == 0x000000, "Member 'RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards, RewardData) == 0x000008, "Member 'RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards::RewardData' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards, ReturnValue) == 0x000050, "Member 'RBPlayerProgressionData_GetRewardUIDataFromGeneratedRewards::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetRewardUIDataFromLevelData
// 0x0078 (0x0078 - 0x0000)
struct RBPlayerProgressionData_GetRewardUIDataFromLevelData final
{
public:
	const class ARBPlayerState*                   RBPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPlayerProgressionLevelData            LevelData;                                         // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRewardUIData>                  ReturnValue;                                       // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetRewardUIDataFromLevelData) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetRewardUIDataFromLevelData");
static_assert(sizeof(RBPlayerProgressionData_GetRewardUIDataFromLevelData) == 0x000078, "Wrong size on RBPlayerProgressionData_GetRewardUIDataFromLevelData");
static_assert(offsetof(RBPlayerProgressionData_GetRewardUIDataFromLevelData, RBPlayerState) == 0x000000, "Member 'RBPlayerProgressionData_GetRewardUIDataFromLevelData::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetRewardUIDataFromLevelData, LevelData) == 0x000008, "Member 'RBPlayerProgressionData_GetRewardUIDataFromLevelData::LevelData' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetRewardUIDataFromLevelData, ReturnValue) == 0x000068, "Member 'RBPlayerProgressionData_GetRewardUIDataFromLevelData::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetRewardUIDataFromRewards
// 0x00A0 (0x00A0 - 0x0000)
struct RBPlayerProgressionData_GetRewardUIDataFromRewards final
{
public:
	const class ARBPlayerState*                   RBPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBRewardData                          RewardData;                                        // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRewardUIData>                  ReturnValue;                                       // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetRewardUIDataFromRewards) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetRewardUIDataFromRewards");
static_assert(sizeof(RBPlayerProgressionData_GetRewardUIDataFromRewards) == 0x0000A0, "Wrong size on RBPlayerProgressionData_GetRewardUIDataFromRewards");
static_assert(offsetof(RBPlayerProgressionData_GetRewardUIDataFromRewards, RBPlayerState) == 0x000000, "Member 'RBPlayerProgressionData_GetRewardUIDataFromRewards::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetRewardUIDataFromRewards, RewardData) == 0x000008, "Member 'RBPlayerProgressionData_GetRewardUIDataFromRewards::RewardData' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetRewardUIDataFromRewards, ReturnValue) == 0x000090, "Member 'RBPlayerProgressionData_GetRewardUIDataFromRewards::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.FilterItemProgressionData
// 0x0020 (0x0020 - 0x0000)
struct RBPlayerProgressionData_FilterItemProgressionData final
{
public:
	EItemProgressionCategory                      Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActiveSkillType                              AssociatedActiveSkillType;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProfileUpgradeCategory                       ProfileUpgradeCategory;                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPerkCategory                                 PerkCategory;                                      // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilterAvailable;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AA[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRBItemProgressionData>         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_FilterItemProgressionData) == 0x000008, "Wrong alignment on RBPlayerProgressionData_FilterItemProgressionData");
static_assert(sizeof(RBPlayerProgressionData_FilterItemProgressionData) == 0x000020, "Wrong size on RBPlayerProgressionData_FilterItemProgressionData");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionData, Category) == 0x000000, "Member 'RBPlayerProgressionData_FilterItemProgressionData::Category' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionData, AssociatedActiveSkillType) == 0x000001, "Member 'RBPlayerProgressionData_FilterItemProgressionData::AssociatedActiveSkillType' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionData, ProfileUpgradeCategory) == 0x000002, "Member 'RBPlayerProgressionData_FilterItemProgressionData::ProfileUpgradeCategory' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionData, PerkCategory) == 0x000003, "Member 'RBPlayerProgressionData_FilterItemProgressionData::PerkCategory' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionData, Rank) == 0x000004, "Member 'RBPlayerProgressionData_FilterItemProgressionData::Rank' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionData, bFilterAvailable) == 0x000008, "Member 'RBPlayerProgressionData_FilterItemProgressionData::bFilterAvailable' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionData, ReturnValue) == 0x000010, "Member 'RBPlayerProgressionData_FilterItemProgressionData::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.FilterItemProgressionDataIds
// 0x0020 (0x0020 - 0x0000)
struct RBPlayerProgressionData_FilterItemProgressionDataIds final
{
public:
	EItemProgressionCategory                      Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActiveSkillType                              AssociatedActiveSkillType;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProfileUpgradeCategory                       ProfileUpgradeCategory;                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPerkCategory                                 PerkCategory;                                      // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFilterAvailable;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AB[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_FilterItemProgressionDataIds) == 0x000008, "Wrong alignment on RBPlayerProgressionData_FilterItemProgressionDataIds");
static_assert(sizeof(RBPlayerProgressionData_FilterItemProgressionDataIds) == 0x000020, "Wrong size on RBPlayerProgressionData_FilterItemProgressionDataIds");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionDataIds, Category) == 0x000000, "Member 'RBPlayerProgressionData_FilterItemProgressionDataIds::Category' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionDataIds, AssociatedActiveSkillType) == 0x000001, "Member 'RBPlayerProgressionData_FilterItemProgressionDataIds::AssociatedActiveSkillType' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionDataIds, ProfileUpgradeCategory) == 0x000002, "Member 'RBPlayerProgressionData_FilterItemProgressionDataIds::ProfileUpgradeCategory' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionDataIds, PerkCategory) == 0x000003, "Member 'RBPlayerProgressionData_FilterItemProgressionDataIds::PerkCategory' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionDataIds, Rank) == 0x000004, "Member 'RBPlayerProgressionData_FilterItemProgressionDataIds::Rank' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionDataIds, bFilterAvailable) == 0x000008, "Member 'RBPlayerProgressionData_FilterItemProgressionDataIds::bFilterAvailable' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_FilterItemProgressionDataIds, ReturnValue) == 0x000010, "Member 'RBPlayerProgressionData_FilterItemProgressionDataIds::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetActiveSkillSettings
// 0x0030 (0x0030 - 0x0000)
struct RBPlayerProgressionData_GetActiveSkillSettings final
{
public:
	EActiveSkillType                              ActiveSkillType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AC[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBActiveSkillSettings                 ReturnValue;                                       // 0x0004(0x002C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetActiveSkillSettings) == 0x000004, "Wrong alignment on RBPlayerProgressionData_GetActiveSkillSettings");
static_assert(sizeof(RBPlayerProgressionData_GetActiveSkillSettings) == 0x000030, "Wrong size on RBPlayerProgressionData_GetActiveSkillSettings");
static_assert(offsetof(RBPlayerProgressionData_GetActiveSkillSettings, ActiveSkillType) == 0x000000, "Member 'RBPlayerProgressionData_GetActiveSkillSettings::ActiveSkillType' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetActiveSkillSettings, ReturnValue) == 0x000004, "Member 'RBPlayerProgressionData_GetActiveSkillSettings::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetBadge
// 0x00B0 (0x00B0 - 0x0000)
struct RBPlayerProgressionData_GetBadge final
{
public:
	class FName                                   BadgeId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBPlayerBadgeRow                      ReturnValue;                                       // 0x0008(0x00A8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetBadge) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetBadge");
static_assert(sizeof(RBPlayerProgressionData_GetBadge) == 0x0000B0, "Wrong size on RBPlayerProgressionData_GetBadge");
static_assert(offsetof(RBPlayerProgressionData_GetBadge, BadgeId) == 0x000000, "Member 'RBPlayerProgressionData_GetBadge::BadgeId' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetBadge, ReturnValue) == 0x000008, "Member 'RBPlayerProgressionData_GetBadge::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetBadges
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerProgressionData_GetBadges final
{
public:
	TArray<struct FRBPlayerBadgeRow>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetBadges) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetBadges");
static_assert(sizeof(RBPlayerProgressionData_GetBadges) == 0x000010, "Wrong size on RBPlayerProgressionData_GetBadges");
static_assert(offsetof(RBPlayerProgressionData_GetBadges, ReturnValue) == 0x000000, "Member 'RBPlayerProgressionData_GetBadges::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetItemProgressionData
// 0x00F8 (0x00F8 - 0x0000)
struct RBPlayerProgressionData_GetItemProgressionData final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidateFeatureSwitch;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBItemProgressionData                 ReturnValue;                                       // 0x0010(0x00E8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetItemProgressionData) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetItemProgressionData");
static_assert(sizeof(RBPlayerProgressionData_GetItemProgressionData) == 0x0000F8, "Wrong size on RBPlayerProgressionData_GetItemProgressionData");
static_assert(offsetof(RBPlayerProgressionData_GetItemProgressionData, ItemId) == 0x000000, "Member 'RBPlayerProgressionData_GetItemProgressionData::ItemId' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetItemProgressionData, bValidateFeatureSwitch) == 0x000008, "Member 'RBPlayerProgressionData_GetItemProgressionData::bValidateFeatureSwitch' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetItemProgressionData, ReturnValue) == 0x000010, "Member 'RBPlayerProgressionData_GetItemProgressionData::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetLevelingData
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerProgressionData_GetLevelingData final
{
public:
	struct FPlayerProgressionLevelingData         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetLevelingData) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetLevelingData");
static_assert(sizeof(RBPlayerProgressionData_GetLevelingData) == 0x000010, "Wrong size on RBPlayerProgressionData_GetLevelingData");
static_assert(offsetof(RBPlayerProgressionData_GetLevelingData, ReturnValue) == 0x000000, "Member 'RBPlayerProgressionData_GetLevelingData::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetMaxPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct RBPlayerProgressionData_GetMaxPlayerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetMaxPlayerLevel) == 0x000004, "Wrong alignment on RBPlayerProgressionData_GetMaxPlayerLevel");
static_assert(sizeof(RBPlayerProgressionData_GetMaxPlayerLevel) == 0x000004, "Wrong size on RBPlayerProgressionData_GetMaxPlayerLevel");
static_assert(offsetof(RBPlayerProgressionData_GetMaxPlayerLevel, ReturnValue) == 0x000000, "Member 'RBPlayerProgressionData_GetMaxPlayerLevel::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetPerkSlotRequiredLevel
// 0x000C (0x000C - 0x0000)
struct RBPlayerProgressionData_GetPerkSlotRequiredLevel final
{
public:
	int32                                         PerkSlotIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPerkCategory                                 PerkCategory;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AE[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetPerkSlotRequiredLevel) == 0x000004, "Wrong alignment on RBPlayerProgressionData_GetPerkSlotRequiredLevel");
static_assert(sizeof(RBPlayerProgressionData_GetPerkSlotRequiredLevel) == 0x00000C, "Wrong size on RBPlayerProgressionData_GetPerkSlotRequiredLevel");
static_assert(offsetof(RBPlayerProgressionData_GetPerkSlotRequiredLevel, PerkSlotIndex) == 0x000000, "Member 'RBPlayerProgressionData_GetPerkSlotRequiredLevel::PerkSlotIndex' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetPerkSlotRequiredLevel, PerkCategory) == 0x000004, "Member 'RBPlayerProgressionData_GetPerkSlotRequiredLevel::PerkCategory' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetPerkSlotRequiredLevel, ReturnValue) == 0x000008, "Member 'RBPlayerProgressionData_GetPerkSlotRequiredLevel::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetPlayerLevelRequiredXP
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerProgressionData_GetPlayerLevelRequiredXP final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetPlayerLevelRequiredXP) == 0x000004, "Wrong alignment on RBPlayerProgressionData_GetPlayerLevelRequiredXP");
static_assert(sizeof(RBPlayerProgressionData_GetPlayerLevelRequiredXP) == 0x000008, "Wrong size on RBPlayerProgressionData_GetPlayerLevelRequiredXP");
static_assert(offsetof(RBPlayerProgressionData_GetPlayerLevelRequiredXP, Level) == 0x000000, "Member 'RBPlayerProgressionData_GetPlayerLevelRequiredXP::Level' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetPlayerLevelRequiredXP, ReturnValue) == 0x000004, "Member 'RBPlayerProgressionData_GetPlayerLevelRequiredXP::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetPlayerUpgradeEffectData
// 0x00A0 (0x00A0 - 0x0000)
struct RBPlayerProgressionData_GetPlayerUpgradeEffectData final
{
public:
	class FName                                   EffectId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBPlayerUpgradeEffectData             ReturnValue;                                       // 0x0008(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetPlayerUpgradeEffectData) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetPlayerUpgradeEffectData");
static_assert(sizeof(RBPlayerProgressionData_GetPlayerUpgradeEffectData) == 0x0000A0, "Wrong size on RBPlayerProgressionData_GetPlayerUpgradeEffectData");
static_assert(offsetof(RBPlayerProgressionData_GetPlayerUpgradeEffectData, EffectId) == 0x000000, "Member 'RBPlayerProgressionData_GetPlayerUpgradeEffectData::EffectId' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetPlayerUpgradeEffectData, ReturnValue) == 0x000008, "Member 'RBPlayerProgressionData_GetPlayerUpgradeEffectData::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetPlayerUpgradeEffectSetting
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerProgressionData_GetPlayerUpgradeEffectSetting final
{
public:
	class FName                                   EffectId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SettingId;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetPlayerUpgradeEffectSetting) == 0x000004, "Wrong alignment on RBPlayerProgressionData_GetPlayerUpgradeEffectSetting");
static_assert(sizeof(RBPlayerProgressionData_GetPlayerUpgradeEffectSetting) == 0x000018, "Wrong size on RBPlayerProgressionData_GetPlayerUpgradeEffectSetting");
static_assert(offsetof(RBPlayerProgressionData_GetPlayerUpgradeEffectSetting, EffectId) == 0x000000, "Member 'RBPlayerProgressionData_GetPlayerUpgradeEffectSetting::EffectId' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetPlayerUpgradeEffectSetting, SettingId) == 0x000008, "Member 'RBPlayerProgressionData_GetPlayerUpgradeEffectSetting::SettingId' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetPlayerUpgradeEffectSetting, DefaultValue) == 0x000010, "Member 'RBPlayerProgressionData_GetPlayerUpgradeEffectSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetPlayerUpgradeEffectSetting, ReturnValue) == 0x000014, "Member 'RBPlayerProgressionData_GetPlayerUpgradeEffectSetting::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetRewardData
// 0x0090 (0x0090 - 0x0000)
struct RBPlayerProgressionData_GetRewardData final
{
public:
	class FName                                   RewardDataId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBRewardData                          ReturnValue;                                       // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetRewardData) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetRewardData");
static_assert(sizeof(RBPlayerProgressionData_GetRewardData) == 0x000090, "Wrong size on RBPlayerProgressionData_GetRewardData");
static_assert(offsetof(RBPlayerProgressionData_GetRewardData, RewardDataId) == 0x000000, "Member 'RBPlayerProgressionData_GetRewardData::RewardDataId' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetRewardData, ReturnValue) == 0x000008, "Member 'RBPlayerProgressionData_GetRewardData::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetRewardPool
// 0x0020 (0x0020 - 0x0000)
struct RBPlayerProgressionData_GetRewardPool final
{
public:
	class FName                                   RewardPoolId;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBRandomRewardPool                    ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetRewardPool) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetRewardPool");
static_assert(sizeof(RBPlayerProgressionData_GetRewardPool) == 0x000020, "Wrong size on RBPlayerProgressionData_GetRewardPool");
static_assert(offsetof(RBPlayerProgressionData_GetRewardPool, RewardPoolId) == 0x000000, "Member 'RBPlayerProgressionData_GetRewardPool::RewardPoolId' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetRewardPool, ReturnValue) == 0x000008, "Member 'RBPlayerProgressionData_GetRewardPool::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetRewardsForPlayerLevel
// 0x0090 (0x0090 - 0x0000)
struct RBPlayerProgressionData_GetRewardsForPlayerLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22AF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBRewardData                          ReturnValue;                                       // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetRewardsForPlayerLevel) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetRewardsForPlayerLevel");
static_assert(sizeof(RBPlayerProgressionData_GetRewardsForPlayerLevel) == 0x000090, "Wrong size on RBPlayerProgressionData_GetRewardsForPlayerLevel");
static_assert(offsetof(RBPlayerProgressionData_GetRewardsForPlayerLevel, Level) == 0x000000, "Member 'RBPlayerProgressionData_GetRewardsForPlayerLevel::Level' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetRewardsForPlayerLevel, ReturnValue) == 0x000008, "Member 'RBPlayerProgressionData_GetRewardsForPlayerLevel::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionData.GetUnlockInfo
// 0x0030 (0x0030 - 0x0000)
struct RBPlayerProgressionData_GetUnlockInfo final
{
public:
	const class ARBPlayerState*                   RBPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemUnlockInfo                        ReturnValue;                                       // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerProgressionData_GetUnlockInfo) == 0x000008, "Wrong alignment on RBPlayerProgressionData_GetUnlockInfo");
static_assert(sizeof(RBPlayerProgressionData_GetUnlockInfo) == 0x000030, "Wrong size on RBPlayerProgressionData_GetUnlockInfo");
static_assert(offsetof(RBPlayerProgressionData_GetUnlockInfo, RBPlayerState) == 0x000000, "Member 'RBPlayerProgressionData_GetUnlockInfo::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetUnlockInfo, ItemId) == 0x000008, "Member 'RBPlayerProgressionData_GetUnlockInfo::ItemId' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionData_GetUnlockInfo, ReturnValue) == 0x000010, "Member 'RBPlayerProgressionData_GetUnlockInfo::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerProgressionManager.CanReleaseCharacter
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerProgressionManager_CanReleaseCharacter final
{
public:
	const class ARBController*                    RBController;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerProgressionManager_CanReleaseCharacter) == 0x000008, "Wrong alignment on RBPlayerProgressionManager_CanReleaseCharacter");
static_assert(sizeof(RBPlayerProgressionManager_CanReleaseCharacter) == 0x000010, "Wrong size on RBPlayerProgressionManager_CanReleaseCharacter");
static_assert(offsetof(RBPlayerProgressionManager_CanReleaseCharacter, RBController) == 0x000000, "Member 'RBPlayerProgressionManager_CanReleaseCharacter::RBController' has a wrong offset!");
static_assert(offsetof(RBPlayerProgressionManager_CanReleaseCharacter, ReturnValue) == 0x000008, "Member 'RBPlayerProgressionManager_CanReleaseCharacter::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerRespawner.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerRespawner_BP_SetEnabled final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerRespawner_BP_SetEnabled) == 0x000001, "Wrong alignment on RBPlayerRespawner_BP_SetEnabled");
static_assert(sizeof(RBPlayerRespawner_BP_SetEnabled) == 0x000001, "Wrong size on RBPlayerRespawner_BP_SetEnabled");
static_assert(offsetof(RBPlayerRespawner_BP_SetEnabled, bValue) == 0x000000, "Member 'RBPlayerRespawner_BP_SetEnabled::bValue' has a wrong offset!");

// Function OPP.RBPlayerRespawner.Event_OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerRespawner_Event_OnStateChanged final
{
public:
	ERespawnerState                               NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerRespawner_Event_OnStateChanged) == 0x000001, "Wrong alignment on RBPlayerRespawner_Event_OnStateChanged");
static_assert(sizeof(RBPlayerRespawner_Event_OnStateChanged) == 0x000001, "Wrong size on RBPlayerRespawner_Event_OnStateChanged");
static_assert(offsetof(RBPlayerRespawner_Event_OnStateChanged, NewState) == 0x000000, "Member 'RBPlayerRespawner_Event_OnStateChanged::NewState' has a wrong offset!");

// Function OPP.RBPlayerRespawner.IsInUse
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerRespawner_IsInUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerRespawner_IsInUse) == 0x000001, "Wrong alignment on RBPlayerRespawner_IsInUse");
static_assert(sizeof(RBPlayerRespawner_IsInUse) == 0x000001, "Wrong size on RBPlayerRespawner_IsInUse");
static_assert(offsetof(RBPlayerRespawner_IsInUse, ReturnValue) == 0x000000, "Member 'RBPlayerRespawner_IsInUse::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerSoundDetectionComponent.OnRep_CurrentState
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerSoundDetectionComponent_OnRep_CurrentState final
{
public:
	EPlayerSoundDetectionState                    OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerSoundDetectionComponent_OnRep_CurrentState) == 0x000001, "Wrong alignment on RBPlayerSoundDetectionComponent_OnRep_CurrentState");
static_assert(sizeof(RBPlayerSoundDetectionComponent_OnRep_CurrentState) == 0x000001, "Wrong size on RBPlayerSoundDetectionComponent_OnRep_CurrentState");
static_assert(offsetof(RBPlayerSoundDetectionComponent_OnRep_CurrentState, OldState) == 0x000000, "Member 'RBPlayerSoundDetectionComponent_OnRep_CurrentState::OldState' has a wrong offset!");

// Function OPP.RBPlayerSoundDetectionComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerSoundDetectionComponent_SetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerSoundDetectionComponent_SetEnabled) == 0x000001, "Wrong alignment on RBPlayerSoundDetectionComponent_SetEnabled");
static_assert(sizeof(RBPlayerSoundDetectionComponent_SetEnabled) == 0x000001, "Wrong size on RBPlayerSoundDetectionComponent_SetEnabled");
static_assert(offsetof(RBPlayerSoundDetectionComponent_SetEnabled, bEnabled) == 0x000000, "Member 'RBPlayerSoundDetectionComponent_SetEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBPlayerSpawnPoint.GetSpawnPointTransform
// 0x0018 (0x0018 - 0x0000)
struct RBPlayerSpawnPoint_GetSpawnPointTransform final
{
public:
	struct FVector                                OutPosition;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerSpawnPoint_GetSpawnPointTransform) == 0x000004, "Wrong alignment on RBPlayerSpawnPoint_GetSpawnPointTransform");
static_assert(sizeof(RBPlayerSpawnPoint_GetSpawnPointTransform) == 0x000018, "Wrong size on RBPlayerSpawnPoint_GetSpawnPointTransform");
static_assert(offsetof(RBPlayerSpawnPoint_GetSpawnPointTransform, OutPosition) == 0x000000, "Member 'RBPlayerSpawnPoint_GetSpawnPointTransform::OutPosition' has a wrong offset!");
static_assert(offsetof(RBPlayerSpawnPoint_GetSpawnPointTransform, OutRotation) == 0x00000C, "Member 'RBPlayerSpawnPoint_GetSpawnPointTransform::OutRotation' has a wrong offset!");

// Function OPP.RBPlayerSpawnPoint.ShouldActivateNV
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerSpawnPoint_ShouldActivateNV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerSpawnPoint_ShouldActivateNV) == 0x000001, "Wrong alignment on RBPlayerSpawnPoint_ShouldActivateNV");
static_assert(sizeof(RBPlayerSpawnPoint_ShouldActivateNV) == 0x000001, "Wrong size on RBPlayerSpawnPoint_ShouldActivateNV");
static_assert(offsetof(RBPlayerSpawnPoint_ShouldActivateNV, ReturnValue) == 0x000000, "Member 'RBPlayerSpawnPoint_ShouldActivateNV::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerStatsConfig.GetPlayerStatConfig
// 0x0068 (0x0068 - 0x0000)
struct RBPlayerStatsConfig_GetPlayerStatConfig final
{
public:
	EPlayerStat                                   PlayerStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22BE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRBPlayerStatConfig                    ReturnValue;                                       // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerStatsConfig_GetPlayerStatConfig) == 0x000008, "Wrong alignment on RBPlayerStatsConfig_GetPlayerStatConfig");
static_assert(sizeof(RBPlayerStatsConfig_GetPlayerStatConfig) == 0x000068, "Wrong size on RBPlayerStatsConfig_GetPlayerStatConfig");
static_assert(offsetof(RBPlayerStatsConfig_GetPlayerStatConfig, PlayerStat) == 0x000000, "Member 'RBPlayerStatsConfig_GetPlayerStatConfig::PlayerStat' has a wrong offset!");
static_assert(offsetof(RBPlayerStatsConfig_GetPlayerStatConfig, ReturnValue) == 0x000008, "Member 'RBPlayerStatsConfig_GetPlayerStatConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerStatsConfig.GetPlayerStatConfigById
// 0x0068 (0x0068 - 0x0000)
struct RBPlayerStatsConfig_GetPlayerStatConfigById final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBPlayerStatConfig                    ReturnValue;                                       // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerStatsConfig_GetPlayerStatConfigById) == 0x000008, "Wrong alignment on RBPlayerStatsConfig_GetPlayerStatConfigById");
static_assert(sizeof(RBPlayerStatsConfig_GetPlayerStatConfigById) == 0x000068, "Wrong size on RBPlayerStatsConfig_GetPlayerStatConfigById");
static_assert(offsetof(RBPlayerStatsConfig_GetPlayerStatConfigById, ID) == 0x000000, "Member 'RBPlayerStatsConfig_GetPlayerStatConfigById::ID' has a wrong offset!");
static_assert(offsetof(RBPlayerStatsConfig_GetPlayerStatConfigById, ReturnValue) == 0x000008, "Member 'RBPlayerStatsConfig_GetPlayerStatConfigById::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerStatsTabWidget.OnPlayerStatsDataAvailable
// 0x0020 (0x0020 - 0x0000)
struct RBPlayerStatsTabWidget_OnPlayerStatsDataAvailable final
{
public:
	TArray<struct FRBStatContext>                 Stats;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRBUIReleasedCharacterDetails>  ReleasedCharacterDetailsList;                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerStatsTabWidget_OnPlayerStatsDataAvailable) == 0x000008, "Wrong alignment on RBPlayerStatsTabWidget_OnPlayerStatsDataAvailable");
static_assert(sizeof(RBPlayerStatsTabWidget_OnPlayerStatsDataAvailable) == 0x000020, "Wrong size on RBPlayerStatsTabWidget_OnPlayerStatsDataAvailable");
static_assert(offsetof(RBPlayerStatsTabWidget_OnPlayerStatsDataAvailable, Stats) == 0x000000, "Member 'RBPlayerStatsTabWidget_OnPlayerStatsDataAvailable::Stats' has a wrong offset!");
static_assert(offsetof(RBPlayerStatsTabWidget_OnPlayerStatsDataAvailable, ReleasedCharacterDetailsList) == 0x000010, "Member 'RBPlayerStatsTabWidget_OnPlayerStatsDataAvailable::ReleasedCharacterDetailsList' has a wrong offset!");

// Function OPP.RBPlayerStatsTabWidget.GetGlobalStatValue
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerStatsTabWidget_GetGlobalStatValue final
{
public:
	EPlayerStat                                   PlayerStat;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C0[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerStatsTabWidget_GetGlobalStatValue) == 0x000004, "Wrong alignment on RBPlayerStatsTabWidget_GetGlobalStatValue");
static_assert(sizeof(RBPlayerStatsTabWidget_GetGlobalStatValue) == 0x000008, "Wrong size on RBPlayerStatsTabWidget_GetGlobalStatValue");
static_assert(offsetof(RBPlayerStatsTabWidget_GetGlobalStatValue, PlayerStat) == 0x000000, "Member 'RBPlayerStatsTabWidget_GetGlobalStatValue::PlayerStat' has a wrong offset!");
static_assert(offsetof(RBPlayerStatsTabWidget_GetGlobalStatValue, ReturnValue) == 0x000004, "Member 'RBPlayerStatsTabWidget_GetGlobalStatValue::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerStatsTabWidget.GetReleasedCharacterDetailsList
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerStatsTabWidget_GetReleasedCharacterDetailsList final
{
public:
	TArray<struct FRBUIReleasedCharacterDetails>  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerStatsTabWidget_GetReleasedCharacterDetailsList) == 0x000008, "Wrong alignment on RBPlayerStatsTabWidget_GetReleasedCharacterDetailsList");
static_assert(sizeof(RBPlayerStatsTabWidget_GetReleasedCharacterDetailsList) == 0x000010, "Wrong size on RBPlayerStatsTabWidget_GetReleasedCharacterDetailsList");
static_assert(offsetof(RBPlayerStatsTabWidget_GetReleasedCharacterDetailsList, ReturnValue) == 0x000000, "Member 'RBPlayerStatsTabWidget_GetReleasedCharacterDetailsList::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerStatsTabWidget.GetStats
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerStatsTabWidget_GetStats final
{
public:
	TArray<struct FRBStatContext>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerStatsTabWidget_GetStats) == 0x000008, "Wrong alignment on RBPlayerStatsTabWidget_GetStats");
static_assert(sizeof(RBPlayerStatsTabWidget_GetStats) == 0x000010, "Wrong size on RBPlayerStatsTabWidget_GetStats");
static_assert(offsetof(RBPlayerStatsTabWidget_GetStats, ReturnValue) == 0x000000, "Member 'RBPlayerStatsTabWidget_GetStats::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerStatsTabWidget.IsDataPending
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerStatsTabWidget_IsDataPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerStatsTabWidget_IsDataPending) == 0x000001, "Wrong alignment on RBPlayerStatsTabWidget_IsDataPending");
static_assert(sizeof(RBPlayerStatsTabWidget_IsDataPending) == 0x000001, "Wrong size on RBPlayerStatsTabWidget_IsDataPending");
static_assert(offsetof(RBPlayerStatsTabWidget_IsDataPending, ReturnValue) == 0x000000, "Member 'RBPlayerStatsTabWidget_IsDataPending::ReturnValue' has a wrong offset!");

// Function OPP.RBPlayerTriggerComponent.OnActorLeft
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerTriggerComponent_OnActorLeft final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerComponent_OnActorLeft) == 0x000008, "Wrong alignment on RBPlayerTriggerComponent_OnActorLeft");
static_assert(sizeof(RBPlayerTriggerComponent_OnActorLeft) == 0x000010, "Wrong size on RBPlayerTriggerComponent_OnActorLeft");
static_assert(offsetof(RBPlayerTriggerComponent_OnActorLeft, OverlappedActor) == 0x000000, "Member 'RBPlayerTriggerComponent_OnActorLeft::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnActorLeft, OtherActor) == 0x000008, "Member 'RBPlayerTriggerComponent_OnActorLeft::OtherActor' has a wrong offset!");

// Function OPP.RBPlayerTriggerComponent.OnActorOverlapped
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerTriggerComponent_OnActorOverlapped final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerComponent_OnActorOverlapped) == 0x000008, "Wrong alignment on RBPlayerTriggerComponent_OnActorOverlapped");
static_assert(sizeof(RBPlayerTriggerComponent_OnActorOverlapped) == 0x000010, "Wrong size on RBPlayerTriggerComponent_OnActorOverlapped");
static_assert(offsetof(RBPlayerTriggerComponent_OnActorOverlapped, OverlappedActor) == 0x000000, "Member 'RBPlayerTriggerComponent_OnActorOverlapped::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnActorOverlapped, OtherActor) == 0x000008, "Member 'RBPlayerTriggerComponent_OnActorOverlapped::OtherActor' has a wrong offset!");

// Function OPP.RBPlayerTriggerComponent.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBPlayerTriggerComponent_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C8[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerComponent_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBPlayerTriggerComponent_OnComponentBeginOverlap");
static_assert(sizeof(RBPlayerTriggerComponent_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBPlayerTriggerComponent_OnComponentBeginOverlap");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBPlayerTriggerComponent_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBPlayerTriggerComponent_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBPlayerTriggerComponent_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBPlayerTriggerComponent_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBPlayerTriggerComponent_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBPlayerTriggerComponent_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBPlayerTriggerComponent.OnComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBPlayerTriggerComponent_OnComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C9[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBPlayerTriggerComponent_OnComponentEndOverlap) == 0x000008, "Wrong alignment on RBPlayerTriggerComponent_OnComponentEndOverlap");
static_assert(sizeof(RBPlayerTriggerComponent_OnComponentEndOverlap) == 0x000020, "Wrong size on RBPlayerTriggerComponent_OnComponentEndOverlap");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBPlayerTriggerComponent_OnComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentEndOverlap, OtherActor) == 0x000008, "Member 'RBPlayerTriggerComponent_OnComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentEndOverlap, OtherComp) == 0x000010, "Member 'RBPlayerTriggerComponent_OnComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBPlayerTriggerComponent_OnComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBPlayerTriggerComponent.OnPawnKilled
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerTriggerComponent_OnPawnKilled final
{
public:
	class ARBPawn*                                InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                SubjectActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerComponent_OnPawnKilled) == 0x000008, "Wrong alignment on RBPlayerTriggerComponent_OnPawnKilled");
static_assert(sizeof(RBPlayerTriggerComponent_OnPawnKilled) == 0x000010, "Wrong size on RBPlayerTriggerComponent_OnPawnKilled");
static_assert(offsetof(RBPlayerTriggerComponent_OnPawnKilled, InstigatorActor) == 0x000000, "Member 'RBPlayerTriggerComponent_OnPawnKilled::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnPawnKilled, SubjectActor) == 0x000008, "Member 'RBPlayerTriggerComponent_OnPawnKilled::SubjectActor' has a wrong offset!");

// Function OPP.RBPlayerTriggerComponent.OnPawnRespawned
// 0x0008 (0x0008 - 0x0000)
struct RBPlayerTriggerComponent_OnPawnRespawned final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerComponent_OnPawnRespawned) == 0x000008, "Wrong alignment on RBPlayerTriggerComponent_OnPawnRespawned");
static_assert(sizeof(RBPlayerTriggerComponent_OnPawnRespawned) == 0x000008, "Wrong size on RBPlayerTriggerComponent_OnPawnRespawned");
static_assert(offsetof(RBPlayerTriggerComponent_OnPawnRespawned, Pawn) == 0x000000, "Member 'RBPlayerTriggerComponent_OnPawnRespawned::Pawn' has a wrong offset!");

// Function OPP.RBPlayerTriggerComponent.OnPlayerRevived
// 0x0010 (0x0010 - 0x0000)
struct RBPlayerTriggerComponent_OnPlayerRevived final
{
public:
	class ARBPlayer*                              InstigatorActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              SubjectActor;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerComponent_OnPlayerRevived) == 0x000008, "Wrong alignment on RBPlayerTriggerComponent_OnPlayerRevived");
static_assert(sizeof(RBPlayerTriggerComponent_OnPlayerRevived) == 0x000010, "Wrong size on RBPlayerTriggerComponent_OnPlayerRevived");
static_assert(offsetof(RBPlayerTriggerComponent_OnPlayerRevived, InstigatorActor) == 0x000000, "Member 'RBPlayerTriggerComponent_OnPlayerRevived::InstigatorActor' has a wrong offset!");
static_assert(offsetof(RBPlayerTriggerComponent_OnPlayerRevived, SubjectActor) == 0x000008, "Member 'RBPlayerTriggerComponent_OnPlayerRevived::SubjectActor' has a wrong offset!");

// Function OPP.RBPlayerTriggerComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBPlayerTriggerComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPlayerTriggerComponent_IsEnabled) == 0x000001, "Wrong alignment on RBPlayerTriggerComponent_IsEnabled");
static_assert(sizeof(RBPlayerTriggerComponent_IsEnabled) == 0x000001, "Wrong size on RBPlayerTriggerComponent_IsEnabled");
static_assert(offsetof(RBPlayerTriggerComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'RBPlayerTriggerComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBPolicyDocumentMenuWidget.Event_Setup
// 0x0010 (0x0010 - 0x0000)
struct RBPolicyDocumentMenuWidget_Event_Setup final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPolicyDocumentMenuWidget_Event_Setup) == 0x000008, "Wrong alignment on RBPolicyDocumentMenuWidget_Event_Setup");
static_assert(sizeof(RBPolicyDocumentMenuWidget_Event_Setup) == 0x000010, "Wrong size on RBPolicyDocumentMenuWidget_Event_Setup");
static_assert(offsetof(RBPolicyDocumentMenuWidget_Event_Setup, Content) == 0x000000, "Member 'RBPolicyDocumentMenuWidget_Event_Setup::Content' has a wrong offset!");

// Function OPP.RBPopUpConfirmCancelWidget.Event_InitializePopup
// 0x0060 (0x0060 - 0x0000)
struct RBPopUpConfirmCancelWidget_Event_InitializePopup final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   MainText;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ConfirmText;                                       // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   CancelText;                                        // 0x0048(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPopUpConfirmCancelWidget_Event_InitializePopup) == 0x000008, "Wrong alignment on RBPopUpConfirmCancelWidget_Event_InitializePopup");
static_assert(sizeof(RBPopUpConfirmCancelWidget_Event_InitializePopup) == 0x000060, "Wrong size on RBPopUpConfirmCancelWidget_Event_InitializePopup");
static_assert(offsetof(RBPopUpConfirmCancelWidget_Event_InitializePopup, TitleText) == 0x000000, "Member 'RBPopUpConfirmCancelWidget_Event_InitializePopup::TitleText' has a wrong offset!");
static_assert(offsetof(RBPopUpConfirmCancelWidget_Event_InitializePopup, MainText) == 0x000018, "Member 'RBPopUpConfirmCancelWidget_Event_InitializePopup::MainText' has a wrong offset!");
static_assert(offsetof(RBPopUpConfirmCancelWidget_Event_InitializePopup, ConfirmText) == 0x000030, "Member 'RBPopUpConfirmCancelWidget_Event_InitializePopup::ConfirmText' has a wrong offset!");
static_assert(offsetof(RBPopUpConfirmCancelWidget_Event_InitializePopup, CancelText) == 0x000048, "Member 'RBPopUpConfirmCancelWidget_Event_InitializePopup::CancelText' has a wrong offset!");

// Function OPP.RBPopUpWaitWidget.Event_InitializePopup
// 0x0030 (0x0030 - 0x0000)
struct RBPopUpWaitWidget_Event_InitializePopup final
{
public:
	class FText                                   TitleText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   MainText;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPopUpWaitWidget_Event_InitializePopup) == 0x000008, "Wrong alignment on RBPopUpWaitWidget_Event_InitializePopup");
static_assert(sizeof(RBPopUpWaitWidget_Event_InitializePopup) == 0x000030, "Wrong size on RBPopUpWaitWidget_Event_InitializePopup");
static_assert(offsetof(RBPopUpWaitWidget_Event_InitializePopup, TitleText) == 0x000000, "Member 'RBPopUpWaitWidget_Event_InitializePopup::TitleText' has a wrong offset!");
static_assert(offsetof(RBPopUpWaitWidget_Event_InitializePopup, MainText) == 0x000018, "Member 'RBPopUpWaitWidget_Event_InitializePopup::MainText' has a wrong offset!");

// Function OPP.RBPopUpInputTextWidget.BP_OnTextEntered
// 0x0010 (0x0010 - 0x0000)
struct RBPopUpInputTextWidget_BP_OnTextEntered final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPopUpInputTextWidget_BP_OnTextEntered) == 0x000008, "Wrong alignment on RBPopUpInputTextWidget_BP_OnTextEntered");
static_assert(sizeof(RBPopUpInputTextWidget_BP_OnTextEntered) == 0x000010, "Wrong size on RBPopUpInputTextWidget_BP_OnTextEntered");
static_assert(offsetof(RBPopUpInputTextWidget_BP_OnTextEntered, Text) == 0x000000, "Member 'RBPopUpInputTextWidget_BP_OnTextEntered::Text' has a wrong offset!");

// Function OPP.RBPressurePanelComponent.CurrentInputRatioChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPressurePanelComponent_CurrentInputRatioChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPressurePanelComponent_CurrentInputRatioChangedCallback) == 0x000001, "Wrong alignment on RBPressurePanelComponent_CurrentInputRatioChangedCallback");
static_assert(sizeof(RBPressurePanelComponent_CurrentInputRatioChangedCallback) == 0x000001, "Wrong size on RBPressurePanelComponent_CurrentInputRatioChangedCallback");
static_assert(offsetof(RBPressurePanelComponent_CurrentInputRatioChangedCallback, ChangeType) == 0x000000, "Member 'RBPressurePanelComponent_CurrentInputRatioChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBPressurePanelComponent.InputHeldChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPressurePanelComponent_InputHeldChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPressurePanelComponent_InputHeldChangedCallback) == 0x000001, "Wrong alignment on RBPressurePanelComponent_InputHeldChangedCallback");
static_assert(sizeof(RBPressurePanelComponent_InputHeldChangedCallback) == 0x000001, "Wrong size on RBPressurePanelComponent_InputHeldChangedCallback");
static_assert(offsetof(RBPressurePanelComponent_InputHeldChangedCallback, ChangeType) == 0x000000, "Member 'RBPressurePanelComponent_InputHeldChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBPressurePanelComponent.InputRatioInZoneChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPressurePanelComponent_InputRatioInZoneChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPressurePanelComponent_InputRatioInZoneChangedCallback) == 0x000001, "Wrong alignment on RBPressurePanelComponent_InputRatioInZoneChangedCallback");
static_assert(sizeof(RBPressurePanelComponent_InputRatioInZoneChangedCallback) == 0x000001, "Wrong size on RBPressurePanelComponent_InputRatioInZoneChangedCallback");
static_assert(offsetof(RBPressurePanelComponent_InputRatioInZoneChangedCallback, ChangeType) == 0x000000, "Member 'RBPressurePanelComponent_InputRatioInZoneChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBPressurePanelComponent.LastInputHeldStartedPawnTimeChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPressurePanelComponent_LastInputHeldStartedPawnTimeChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPressurePanelComponent_LastInputHeldStartedPawnTimeChangedCallback) == 0x000001, "Wrong alignment on RBPressurePanelComponent_LastInputHeldStartedPawnTimeChangedCallback");
static_assert(sizeof(RBPressurePanelComponent_LastInputHeldStartedPawnTimeChangedCallback) == 0x000001, "Wrong size on RBPressurePanelComponent_LastInputHeldStartedPawnTimeChangedCallback");
static_assert(offsetof(RBPressurePanelComponent_LastInputHeldStartedPawnTimeChangedCallback, ChangeType) == 0x000000, "Member 'RBPressurePanelComponent_LastInputHeldStartedPawnTimeChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBPressurePanelComponent.Multicast_OnPanelSucceeded
// 0x0008 (0x0008 - 0x0000)
struct RBPressurePanelComponent_Multicast_OnPanelSucceeded final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPressurePanelComponent_Multicast_OnPanelSucceeded) == 0x000008, "Wrong alignment on RBPressurePanelComponent_Multicast_OnPanelSucceeded");
static_assert(sizeof(RBPressurePanelComponent_Multicast_OnPanelSucceeded) == 0x000008, "Wrong size on RBPressurePanelComponent_Multicast_OnPanelSucceeded");
static_assert(offsetof(RBPressurePanelComponent_Multicast_OnPanelSucceeded, Pawn) == 0x000000, "Member 'RBPressurePanelComponent_Multicast_OnPanelSucceeded::Pawn' has a wrong offset!");

// Function OPP.RBPressurePanelComponent.OnUnlockingButtonStateChanged_Server
// 0x0008 (0x0008 - 0x0000)
struct RBPressurePanelComponent_OnUnlockingButtonStateChanged_Server final
{
public:
	class URBCoopOperatableComponent*             Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPressurePanelComponent_OnUnlockingButtonStateChanged_Server) == 0x000008, "Wrong alignment on RBPressurePanelComponent_OnUnlockingButtonStateChanged_Server");
static_assert(sizeof(RBPressurePanelComponent_OnUnlockingButtonStateChanged_Server) == 0x000008, "Wrong size on RBPressurePanelComponent_OnUnlockingButtonStateChanged_Server");
static_assert(offsetof(RBPressurePanelComponent_OnUnlockingButtonStateChanged_Server, Component) == 0x000000, "Member 'RBPressurePanelComponent_OnUnlockingButtonStateChanged_Server::Component' has a wrong offset!");

// Function OPP.RBPressurePanelComponent.GetCurrentMeterRatio
// 0x0004 (0x0004 - 0x0000)
struct RBPressurePanelComponent_GetCurrentMeterRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPressurePanelComponent_GetCurrentMeterRatio) == 0x000004, "Wrong alignment on RBPressurePanelComponent_GetCurrentMeterRatio");
static_assert(sizeof(RBPressurePanelComponent_GetCurrentMeterRatio) == 0x000004, "Wrong size on RBPressurePanelComponent_GetCurrentMeterRatio");
static_assert(offsetof(RBPressurePanelComponent_GetCurrentMeterRatio, ReturnValue) == 0x000000, "Member 'RBPressurePanelComponent_GetCurrentMeterRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBPressurePanelComponent.GetUnlockedTimeLeftRatio
// 0x0004 (0x0004 - 0x0000)
struct RBPressurePanelComponent_GetUnlockedTimeLeftRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPressurePanelComponent_GetUnlockedTimeLeftRatio) == 0x000004, "Wrong alignment on RBPressurePanelComponent_GetUnlockedTimeLeftRatio");
static_assert(sizeof(RBPressurePanelComponent_GetUnlockedTimeLeftRatio) == 0x000004, "Wrong size on RBPressurePanelComponent_GetUnlockedTimeLeftRatio");
static_assert(offsetof(RBPressurePanelComponent_GetUnlockedTimeLeftRatio, ReturnValue) == 0x000000, "Member 'RBPressurePanelComponent_GetUnlockedTimeLeftRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBPressurePanelComponent.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBPressurePanelComponent_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPressurePanelComponent_IsCompleted) == 0x000001, "Wrong alignment on RBPressurePanelComponent_IsCompleted");
static_assert(sizeof(RBPressurePanelComponent_IsCompleted) == 0x000001, "Wrong size on RBPressurePanelComponent_IsCompleted");
static_assert(offsetof(RBPressurePanelComponent_IsCompleted, ReturnValue) == 0x000000, "Member 'RBPressurePanelComponent_IsCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBPropOptimizerComponent.SetCustomControlledMeshes
// 0x0010 (0x0010 - 0x0000)
struct RBPropOptimizerComponent_SetCustomControlledMeshes final
{
public:
	TArray<class UPrimitiveComponent*>            ControlledMeshes;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPropOptimizerComponent_SetCustomControlledMeshes) == 0x000008, "Wrong alignment on RBPropOptimizerComponent_SetCustomControlledMeshes");
static_assert(sizeof(RBPropOptimizerComponent_SetCustomControlledMeshes) == 0x000010, "Wrong size on RBPropOptimizerComponent_SetCustomControlledMeshes");
static_assert(offsetof(RBPropOptimizerComponent_SetCustomControlledMeshes, ControlledMeshes) == 0x000000, "Member 'RBPropOptimizerComponent_SetCustomControlledMeshes::ControlledMeshes' has a wrong offset!");

// Function OPP.RBPropOptimizerComponent.SetCustomControlledTimelines
// 0x0010 (0x0010 - 0x0000)
struct RBPropOptimizerComponent_SetCustomControlledTimelines final
{
public:
	TArray<class UTimelineComponent*>             ControlledTimelines;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPropOptimizerComponent_SetCustomControlledTimelines) == 0x000008, "Wrong alignment on RBPropOptimizerComponent_SetCustomControlledTimelines");
static_assert(sizeof(RBPropOptimizerComponent_SetCustomControlledTimelines) == 0x000010, "Wrong size on RBPropOptimizerComponent_SetCustomControlledTimelines");
static_assert(offsetof(RBPropOptimizerComponent_SetCustomControlledTimelines, ControlledTimelines) == 0x000000, "Member 'RBPropOptimizerComponent_SetCustomControlledTimelines::ControlledTimelines' has a wrong offset!");

// Function OPP.RBPropOptimizerComponent.SetForceUpdateAnims
// 0x0001 (0x0001 - 0x0000)
struct RBPropOptimizerComponent_SetForceUpdateAnims final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPropOptimizerComponent_SetForceUpdateAnims) == 0x000001, "Wrong alignment on RBPropOptimizerComponent_SetForceUpdateAnims");
static_assert(sizeof(RBPropOptimizerComponent_SetForceUpdateAnims) == 0x000001, "Wrong size on RBPropOptimizerComponent_SetForceUpdateAnims");
static_assert(offsetof(RBPropOptimizerComponent_SetForceUpdateAnims, bForced) == 0x000000, "Member 'RBPropOptimizerComponent_SetForceUpdateAnims::bForced' has a wrong offset!");

// Function OPP.RBPropOptimizerComponent.SetOptimEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBPropOptimizerComponent_SetOptimEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPropOptimizerComponent_SetOptimEnabled) == 0x000001, "Wrong alignment on RBPropOptimizerComponent_SetOptimEnabled");
static_assert(sizeof(RBPropOptimizerComponent_SetOptimEnabled) == 0x000001, "Wrong size on RBPropOptimizerComponent_SetOptimEnabled");
static_assert(offsetof(RBPropOptimizerComponent_SetOptimEnabled, bEnabled) == 0x000000, "Member 'RBPropOptimizerComponent_SetOptimEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBPropOptimizerComponent.SetTickEnabledOnProps
// 0x0001 (0x0001 - 0x0000)
struct RBPropOptimizerComponent_SetTickEnabledOnProps final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPropOptimizerComponent_SetTickEnabledOnProps) == 0x000001, "Wrong alignment on RBPropOptimizerComponent_SetTickEnabledOnProps");
static_assert(sizeof(RBPropOptimizerComponent_SetTickEnabledOnProps) == 0x000001, "Wrong size on RBPropOptimizerComponent_SetTickEnabledOnProps");
static_assert(offsetof(RBPropOptimizerComponent_SetTickEnabledOnProps, bEnabled) == 0x000000, "Member 'RBPropOptimizerComponent_SetTickEnabledOnProps::bEnabled' has a wrong offset!");

// Function OPP.RBProximityDetectableComponent.BP_SetActive
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectableComponent_BP_SetActive final
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectableComponent_BP_SetActive) == 0x000001, "Wrong alignment on RBProximityDetectableComponent_BP_SetActive");
static_assert(sizeof(RBProximityDetectableComponent_BP_SetActive) == 0x000001, "Wrong size on RBProximityDetectableComponent_BP_SetActive");
static_assert(offsetof(RBProximityDetectableComponent_BP_SetActive, bNewActive) == 0x000000, "Member 'RBProximityDetectableComponent_BP_SetActive::bNewActive' has a wrong offset!");

// Function OPP.RBProximityDetectableComponent.BP_SetIsProgressLocked
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectableComponent_BP_SetIsProgressLocked final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectableComponent_BP_SetIsProgressLocked) == 0x000001, "Wrong alignment on RBProximityDetectableComponent_BP_SetIsProgressLocked");
static_assert(sizeof(RBProximityDetectableComponent_BP_SetIsProgressLocked) == 0x000001, "Wrong size on RBProximityDetectableComponent_BP_SetIsProgressLocked");
static_assert(offsetof(RBProximityDetectableComponent_BP_SetIsProgressLocked, bValue) == 0x000000, "Member 'RBProximityDetectableComponent_BP_SetIsProgressLocked::bValue' has a wrong offset!");

// Function OPP.RBProximityDetectableComponent.BP_ShouldTick
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectableComponent_BP_ShouldTick final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectableComponent_BP_ShouldTick) == 0x000001, "Wrong alignment on RBProximityDetectableComponent_BP_ShouldTick");
static_assert(sizeof(RBProximityDetectableComponent_BP_ShouldTick) == 0x000001, "Wrong size on RBProximityDetectableComponent_BP_ShouldTick");
static_assert(offsetof(RBProximityDetectableComponent_BP_ShouldTick, ReturnValue) == 0x000000, "Member 'RBProximityDetectableComponent_BP_ShouldTick::ReturnValue' has a wrong offset!");

// Function OPP.RBProximityDetectableComponent.GetProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct RBProximityDetectableComponent_GetProgressRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectableComponent_GetProgressRatio) == 0x000004, "Wrong alignment on RBProximityDetectableComponent_GetProgressRatio");
static_assert(sizeof(RBProximityDetectableComponent_GetProgressRatio) == 0x000004, "Wrong size on RBProximityDetectableComponent_GetProgressRatio");
static_assert(offsetof(RBProximityDetectableComponent_GetProgressRatio, ReturnValue) == 0x000000, "Member 'RBProximityDetectableComponent_GetProgressRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBProximityDetectableComponent.IsProgressLocked
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectableComponent_IsProgressLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectableComponent_IsProgressLocked) == 0x000001, "Wrong alignment on RBProximityDetectableComponent_IsProgressLocked");
static_assert(sizeof(RBProximityDetectableComponent_IsProgressLocked) == 0x000001, "Wrong size on RBProximityDetectableComponent_IsProgressLocked");
static_assert(offsetof(RBProximityDetectableComponent_IsProgressLocked, ReturnValue) == 0x000000, "Member 'RBProximityDetectableComponent_IsProgressLocked::ReturnValue' has a wrong offset!");

// Function OPP.RBProximityDetectionObjectiveCoordinator.OnProximityProgressCompleted
// 0x0008 (0x0008 - 0x0000)
struct RBProximityDetectionObjectiveCoordinator_OnProximityProgressCompleted final
{
public:
	class URBProximityDetectableComponent*        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectionObjectiveCoordinator_OnProximityProgressCompleted) == 0x000008, "Wrong alignment on RBProximityDetectionObjectiveCoordinator_OnProximityProgressCompleted");
static_assert(sizeof(RBProximityDetectionObjectiveCoordinator_OnProximityProgressCompleted) == 0x000008, "Wrong size on RBProximityDetectionObjectiveCoordinator_OnProximityProgressCompleted");
static_assert(offsetof(RBProximityDetectionObjectiveCoordinator_OnProximityProgressCompleted, Component) == 0x000000, "Member 'RBProximityDetectionObjectiveCoordinator_OnProximityProgressCompleted::Component' has a wrong offset!");

// Function OPP.RBProximityDetectionObjectiveCoordinator.SetShowProximityDetectorIconsVisible_Server
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectionObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectionObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server) == 0x000001, "Wrong alignment on RBProximityDetectionObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server");
static_assert(sizeof(RBProximityDetectionObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server) == 0x000001, "Wrong size on RBProximityDetectionObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server");
static_assert(offsetof(RBProximityDetectionObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server, bVisible) == 0x000000, "Member 'RBProximityDetectionObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server::bVisible' has a wrong offset!");

// Function OPP.RBProximityDetectionObjectiveCoordinator.SetShowProximityTriggerIconsVisible_Server
// 0x0001 (0x0001 - 0x0000)
struct RBProximityDetectionObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBProximityDetectionObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server) == 0x000001, "Wrong alignment on RBProximityDetectionObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server");
static_assert(sizeof(RBProximityDetectionObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server) == 0x000001, "Wrong size on RBProximityDetectionObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server");
static_assert(offsetof(RBProximityDetectionObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server, bVisible) == 0x000000, "Member 'RBProximityDetectionObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server::bVisible' has a wrong offset!");

// Function OPP.RBPsychosisMine.Multicast_OnDeploy
// 0x0040 (0x0040 - 0x0000)
struct RBPsychosisMine_Multicast_OnDeploy final
{
public:
	class ARBPawn*                                Deployer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E0[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPsychosisMine_Multicast_OnDeploy) == 0x000010, "Wrong alignment on RBPsychosisMine_Multicast_OnDeploy");
static_assert(sizeof(RBPsychosisMine_Multicast_OnDeploy) == 0x000040, "Wrong size on RBPsychosisMine_Multicast_OnDeploy");
static_assert(offsetof(RBPsychosisMine_Multicast_OnDeploy, Deployer) == 0x000000, "Member 'RBPsychosisMine_Multicast_OnDeploy::Deployer' has a wrong offset!");
static_assert(offsetof(RBPsychosisMine_Multicast_OnDeploy, Transform) == 0x000010, "Member 'RBPsychosisMine_Multicast_OnDeploy::Transform' has a wrong offset!");

// Function OPP.RBPsychosisMine.GetPsychosisMineTriggerRadius
// 0x0004 (0x0004 - 0x0000)
struct RBPsychosisMine_GetPsychosisMineTriggerRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPsychosisMine_GetPsychosisMineTriggerRadius) == 0x000004, "Wrong alignment on RBPsychosisMine_GetPsychosisMineTriggerRadius");
static_assert(sizeof(RBPsychosisMine_GetPsychosisMineTriggerRadius) == 0x000004, "Wrong size on RBPsychosisMine_GetPsychosisMineTriggerRadius");
static_assert(offsetof(RBPsychosisMine_GetPsychosisMineTriggerRadius, ReturnValue) == 0x000000, "Member 'RBPsychosisMine_GetPsychosisMineTriggerRadius::ReturnValue' has a wrong offset!");

// Function OPP.RBPushableComponent.OnPawnPushingChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBPushableComponent_OnPawnPushingChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPushableComponent_OnPawnPushingChangedCallback) == 0x000001, "Wrong alignment on RBPushableComponent_OnPawnPushingChangedCallback");
static_assert(sizeof(RBPushableComponent_OnPawnPushingChangedCallback) == 0x000001, "Wrong size on RBPushableComponent_OnPawnPushingChangedCallback");
static_assert(offsetof(RBPushableComponent_OnPawnPushingChangedCallback, ChangedType) == 0x000000, "Member 'RBPushableComponent_OnPawnPushingChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBPushableComponent.GetPawnPushing
// 0x0008 (0x0008 - 0x0000)
struct RBPushableComponent_GetPawnPushing final
{
public:
	class ARBPawn*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPushableComponent_GetPawnPushing) == 0x000008, "Wrong alignment on RBPushableComponent_GetPawnPushing");
static_assert(sizeof(RBPushableComponent_GetPawnPushing) == 0x000008, "Wrong size on RBPushableComponent_GetPawnPushing");
static_assert(offsetof(RBPushableComponent_GetPawnPushing, ReturnValue) == 0x000000, "Member 'RBPushableComponent_GetPawnPushing::ReturnValue' has a wrong offset!");

// Function OPP.RBPushCartObjectiveCoordinator.OnTargetTriggerBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22E9[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap) == 0x000008, "Wrong alignment on RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap");
static_assert(sizeof(RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap) == 0x0000A8, "Wrong size on RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap");
static_assert(offsetof(RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap, OtherActor) == 0x000008, "Member 'RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap, OtherComp) == 0x000010, "Member 'RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap, SweepResult) == 0x000020, "Member 'RBPushCartObjectiveCoordinator_OnTargetTriggerBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBPushCartRailBlocker.OnLinkedTriggered
// 0x0010 (0x0010 - 0x0000)
struct RBPushCartRailBlocker_OnLinkedTriggered final
{
public:
	bool                                          bIsOn;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22EA[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         Triggerable;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPushCartRailBlocker_OnLinkedTriggered) == 0x000008, "Wrong alignment on RBPushCartRailBlocker_OnLinkedTriggered");
static_assert(sizeof(RBPushCartRailBlocker_OnLinkedTriggered) == 0x000010, "Wrong size on RBPushCartRailBlocker_OnLinkedTriggered");
static_assert(offsetof(RBPushCartRailBlocker_OnLinkedTriggered, bIsOn) == 0x000000, "Member 'RBPushCartRailBlocker_OnLinkedTriggered::bIsOn' has a wrong offset!");
static_assert(offsetof(RBPushCartRailBlocker_OnLinkedTriggered, Triggerable) == 0x000008, "Member 'RBPushCartRailBlocker_OnLinkedTriggered::Triggerable' has a wrong offset!");

// Function OPP.RBPushCartSpawnerTrigger.GetGoalIconActor
// 0x0008 (0x0008 - 0x0000)
struct RBPushCartSpawnerTrigger_GetGoalIconActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPushCartSpawnerTrigger_GetGoalIconActor) == 0x000008, "Wrong alignment on RBPushCartSpawnerTrigger_GetGoalIconActor");
static_assert(sizeof(RBPushCartSpawnerTrigger_GetGoalIconActor) == 0x000008, "Wrong size on RBPushCartSpawnerTrigger_GetGoalIconActor");
static_assert(offsetof(RBPushCartSpawnerTrigger_GetGoalIconActor, ReturnValue) == 0x000000, "Member 'RBPushCartSpawnerTrigger_GetGoalIconActor::ReturnValue' has a wrong offset!");

// Function OPP.RBPushCartSpawnerTrigger.GetGoalTrigger
// 0x0008 (0x0008 - 0x0000)
struct RBPushCartSpawnerTrigger_GetGoalTrigger final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPushCartSpawnerTrigger_GetGoalTrigger) == 0x000008, "Wrong alignment on RBPushCartSpawnerTrigger_GetGoalTrigger");
static_assert(sizeof(RBPushCartSpawnerTrigger_GetGoalTrigger) == 0x000008, "Wrong size on RBPushCartSpawnerTrigger_GetGoalTrigger");
static_assert(offsetof(RBPushCartSpawnerTrigger_GetGoalTrigger, ReturnValue) == 0x000000, "Member 'RBPushCartSpawnerTrigger_GetGoalTrigger::ReturnValue' has a wrong offset!");

// Function OPP.RBTriggerableInterface.IsTriggered
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerableInterface_IsTriggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableInterface_IsTriggered) == 0x000001, "Wrong alignment on RBTriggerableInterface_IsTriggered");
static_assert(sizeof(RBTriggerableInterface_IsTriggered) == 0x000001, "Wrong size on RBTriggerableInterface_IsTriggered");
static_assert(offsetof(RBTriggerableInterface_IsTriggered, ReturnValue) == 0x000000, "Member 'RBTriggerableInterface_IsTriggered::ReturnValue' has a wrong offset!");

// Function OPP.RBPuzzleRoomComponent.OnPawnEnterRoom
// 0x0008 (0x0008 - 0x0000)
struct RBPuzzleRoomComponent_OnPawnEnterRoom final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomComponent_OnPawnEnterRoom) == 0x000008, "Wrong alignment on RBPuzzleRoomComponent_OnPawnEnterRoom");
static_assert(sizeof(RBPuzzleRoomComponent_OnPawnEnterRoom) == 0x000008, "Wrong size on RBPuzzleRoomComponent_OnPawnEnterRoom");
static_assert(offsetof(RBPuzzleRoomComponent_OnPawnEnterRoom, Pawn) == 0x000000, "Member 'RBPuzzleRoomComponent_OnPawnEnterRoom::Pawn' has a wrong offset!");

// Function OPP.RBPuzzleRoomComponent.TryActivatePuzzleRoom_Server
// 0x0010 (0x0010 - 0x0000)
struct RBPuzzleRoomComponent_TryActivatePuzzleRoom_Server final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractibleComponent*               Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomComponent_TryActivatePuzzleRoom_Server) == 0x000008, "Wrong alignment on RBPuzzleRoomComponent_TryActivatePuzzleRoom_Server");
static_assert(sizeof(RBPuzzleRoomComponent_TryActivatePuzzleRoom_Server) == 0x000010, "Wrong size on RBPuzzleRoomComponent_TryActivatePuzzleRoom_Server");
static_assert(offsetof(RBPuzzleRoomComponent_TryActivatePuzzleRoom_Server, Interactor) == 0x000000, "Member 'RBPuzzleRoomComponent_TryActivatePuzzleRoom_Server::Interactor' has a wrong offset!");
static_assert(offsetof(RBPuzzleRoomComponent_TryActivatePuzzleRoom_Server, Component) == 0x000008, "Member 'RBPuzzleRoomComponent_TryActivatePuzzleRoom_Server::Component' has a wrong offset!");

// Function OPP.RBPuzzleRoomComponent.GetAllLinkedBlacklights
// 0x0010 (0x0010 - 0x0000)
struct RBPuzzleRoomComponent_GetAllLinkedBlacklights final
{
public:
	TArray<class ARBBlacklight*>                  OutBlacklights;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomComponent_GetAllLinkedBlacklights) == 0x000008, "Wrong alignment on RBPuzzleRoomComponent_GetAllLinkedBlacklights");
static_assert(sizeof(RBPuzzleRoomComponent_GetAllLinkedBlacklights) == 0x000010, "Wrong size on RBPuzzleRoomComponent_GetAllLinkedBlacklights");
static_assert(offsetof(RBPuzzleRoomComponent_GetAllLinkedBlacklights, OutBlacklights) == 0x000000, "Member 'RBPuzzleRoomComponent_GetAllLinkedBlacklights::OutBlacklights' has a wrong offset!");

// Function OPP.RBPuzzleRoomComponent.GetAllLinkedLights
// 0x0010 (0x0010 - 0x0000)
struct RBPuzzleRoomComponent_GetAllLinkedLights final
{
public:
	TArray<class ARBLight*>                       OutLights;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomComponent_GetAllLinkedLights) == 0x000008, "Wrong alignment on RBPuzzleRoomComponent_GetAllLinkedLights");
static_assert(sizeof(RBPuzzleRoomComponent_GetAllLinkedLights) == 0x000010, "Wrong size on RBPuzzleRoomComponent_GetAllLinkedLights");
static_assert(offsetof(RBPuzzleRoomComponent_GetAllLinkedLights, OutLights) == 0x000000, "Member 'RBPuzzleRoomComponent_GetAllLinkedLights::OutLights' has a wrong offset!");

// Function OPP.RBPuzzleRoomComponent.GetAllLinkedPasscodeDecals
// 0x0010 (0x0010 - 0x0000)
struct RBPuzzleRoomComponent_GetAllLinkedPasscodeDecals final
{
public:
	TArray<class ARBPasscodeNumberDecalActor*>    OutActors;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomComponent_GetAllLinkedPasscodeDecals) == 0x000008, "Wrong alignment on RBPuzzleRoomComponent_GetAllLinkedPasscodeDecals");
static_assert(sizeof(RBPuzzleRoomComponent_GetAllLinkedPasscodeDecals) == 0x000010, "Wrong size on RBPuzzleRoomComponent_GetAllLinkedPasscodeDecals");
static_assert(offsetof(RBPuzzleRoomComponent_GetAllLinkedPasscodeDecals, OutActors) == 0x000000, "Member 'RBPuzzleRoomComponent_GetAllLinkedPasscodeDecals::OutActors' has a wrong offset!");

// Function OPP.RBPuzzleRoomComponent.GetAllLinkedPasscodePads
// 0x0010 (0x0010 - 0x0000)
struct RBPuzzleRoomComponent_GetAllLinkedPasscodePads final
{
public:
	TArray<class URBPasscodePadComponent*>        OutPads;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomComponent_GetAllLinkedPasscodePads) == 0x000008, "Wrong alignment on RBPuzzleRoomComponent_GetAllLinkedPasscodePads");
static_assert(sizeof(RBPuzzleRoomComponent_GetAllLinkedPasscodePads) == 0x000010, "Wrong size on RBPuzzleRoomComponent_GetAllLinkedPasscodePads");
static_assert(offsetof(RBPuzzleRoomComponent_GetAllLinkedPasscodePads, OutPads) == 0x000000, "Member 'RBPuzzleRoomComponent_GetAllLinkedPasscodePads::OutPads' has a wrong offset!");

// Function OPP.RBPuzzleRoomComponent.GetLinkedTimerButton
// 0x0008 (0x0008 - 0x0000)
struct RBPuzzleRoomComponent_GetLinkedTimerButton final
{
public:
	class URBSimpleInteractionComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomComponent_GetLinkedTimerButton) == 0x000008, "Wrong alignment on RBPuzzleRoomComponent_GetLinkedTimerButton");
static_assert(sizeof(RBPuzzleRoomComponent_GetLinkedTimerButton) == 0x000008, "Wrong size on RBPuzzleRoomComponent_GetLinkedTimerButton");
static_assert(offsetof(RBPuzzleRoomComponent_GetLinkedTimerButton, ReturnValue) == 0x000000, "Member 'RBPuzzleRoomComponent_GetLinkedTimerButton::ReturnValue' has a wrong offset!");

// Function OPP.RBPuzzleRoomComponent.GetNumberOfDigitsToUnlock
// 0x0004 (0x0004 - 0x0000)
struct RBPuzzleRoomComponent_GetNumberOfDigitsToUnlock final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomComponent_GetNumberOfDigitsToUnlock) == 0x000004, "Wrong alignment on RBPuzzleRoomComponent_GetNumberOfDigitsToUnlock");
static_assert(sizeof(RBPuzzleRoomComponent_GetNumberOfDigitsToUnlock) == 0x000004, "Wrong size on RBPuzzleRoomComponent_GetNumberOfDigitsToUnlock");
static_assert(offsetof(RBPuzzleRoomComponent_GetNumberOfDigitsToUnlock, ReturnValue) == 0x000000, "Member 'RBPuzzleRoomComponent_GetNumberOfDigitsToUnlock::ReturnValue' has a wrong offset!");

// Function OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator.OnInteractibleAddedToWorld
// 0x0008 (0x0008 - 0x0000)
struct RBPuzzleRoomLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld final
{
public:
	class ARBInteractible*                        Interactible;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong alignment on RBPuzzleRoomLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld");
static_assert(sizeof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld) == 0x000008, "Wrong size on RBPuzzleRoomLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld");
static_assert(offsetof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld, Interactible) == 0x000000, "Member 'RBPuzzleRoomLargeInteractObjectiveCoordinator_OnInteractibleAddedToWorld::Interactible' has a wrong offset!");

// Function OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator.OnLargeObjectInteractionDoAction
// 0x0018 (0x0018 - 0x0000)
struct RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction final
{
public:
	class URBLargeObjectInteractionPanelComponent* LargeObjectPanel;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Interactor;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction) == 0x000008, "Wrong alignment on RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction");
static_assert(sizeof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction) == 0x000018, "Wrong size on RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction");
static_assert(offsetof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction, LargeObjectPanel) == 0x000000, "Member 'RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction::LargeObjectPanel' has a wrong offset!");
static_assert(offsetof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction, LargePickup) == 0x000008, "Member 'RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction::LargePickup' has a wrong offset!");
static_assert(offsetof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction, Interactor) == 0x000010, "Member 'RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargeObjectInteractionDoAction::Interactor' has a wrong offset!");

// Function OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator.OnLargePickupUsedOnObject
// 0x0018 (0x0018 - 0x0000)
struct RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBLargeObjectInteractionPanelComponent* Interactible;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject) == 0x000008, "Wrong alignment on RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject");
static_assert(sizeof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject) == 0x000018, "Wrong size on RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject");
static_assert(offsetof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject, Interactor) == 0x000000, "Member 'RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject::Interactor' has a wrong offset!");
static_assert(offsetof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject, LargePickup) == 0x000008, "Member 'RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject::LargePickup' has a wrong offset!");
static_assert(offsetof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject, Interactible) == 0x000010, "Member 'RBPuzzleRoomLargeInteractObjectiveCoordinator_OnLargePickupUsedOnObject::Interactible' has a wrong offset!");

// Function OPP.RBPuzzleRoomLargeInteractObjectiveCoordinator.OnPickupHolderChanged
// 0x0010 (0x0010 - 0x0000)
struct RBPuzzleRoomLargeInteractObjectiveCoordinator_OnPickupHolderChanged final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnPickupHolderChanged) == 0x000008, "Wrong alignment on RBPuzzleRoomLargeInteractObjectiveCoordinator_OnPickupHolderChanged");
static_assert(sizeof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnPickupHolderChanged) == 0x000010, "Wrong size on RBPuzzleRoomLargeInteractObjectiveCoordinator_OnPickupHolderChanged");
static_assert(offsetof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnPickupHolderChanged, Player) == 0x000000, "Member 'RBPuzzleRoomLargeInteractObjectiveCoordinator_OnPickupHolderChanged::Player' has a wrong offset!");
static_assert(offsetof(RBPuzzleRoomLargeInteractObjectiveCoordinator_OnPickupHolderChanged, LargePickup) == 0x000008, "Member 'RBPuzzleRoomLargeInteractObjectiveCoordinator_OnPickupHolderChanged::LargePickup' has a wrong offset!");

// Function OPP.RBTutorialZoneComponent.OnObjectiveCoordinatorStateChanged
// 0x0010 (0x0010 - 0x0000)
struct RBTutorialZoneComponent_OnObjectiveCoordinatorStateChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveCoordinatorState                    State;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2302[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTutorialZoneComponent_OnObjectiveCoordinatorStateChanged) == 0x000008, "Wrong alignment on RBTutorialZoneComponent_OnObjectiveCoordinatorStateChanged");
static_assert(sizeof(RBTutorialZoneComponent_OnObjectiveCoordinatorStateChanged) == 0x000010, "Wrong size on RBTutorialZoneComponent_OnObjectiveCoordinatorStateChanged");
static_assert(offsetof(RBTutorialZoneComponent_OnObjectiveCoordinatorStateChanged, Coordinator) == 0x000000, "Member 'RBTutorialZoneComponent_OnObjectiveCoordinatorStateChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(RBTutorialZoneComponent_OnObjectiveCoordinatorStateChanged, State) == 0x000008, "Member 'RBTutorialZoneComponent_OnObjectiveCoordinatorStateChanged::State' has a wrong offset!");

// Function OPP.RBRadioDistraction.Event_Break
// 0x0008 (0x0008 - 0x0000)
struct RBRadioDistraction_Event_Break final
{
public:
	class ARBPawn*                                breakingPawn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRadioDistraction_Event_Break) == 0x000008, "Wrong alignment on RBRadioDistraction_Event_Break");
static_assert(sizeof(RBRadioDistraction_Event_Break) == 0x000008, "Wrong size on RBRadioDistraction_Event_Break");
static_assert(offsetof(RBRadioDistraction_Event_Break, breakingPawn) == 0x000000, "Member 'RBRadioDistraction_Event_Break::breakingPawn' has a wrong offset!");

// Function OPP.RBRadioDistraction.Multicast_Break
// 0x0008 (0x0008 - 0x0000)
struct RBRadioDistraction_Multicast_Break final
{
public:
	class ARBPawn*                                breakingPawn;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRadioDistraction_Multicast_Break) == 0x000008, "Wrong alignment on RBRadioDistraction_Multicast_Break");
static_assert(sizeof(RBRadioDistraction_Multicast_Break) == 0x000008, "Wrong size on RBRadioDistraction_Multicast_Break");
static_assert(offsetof(RBRadioDistraction_Multicast_Break, breakingPawn) == 0x000000, "Member 'RBRadioDistraction_Multicast_Break::breakingPawn' has a wrong offset!");

// Function OPP.RBRandomGroup.GetRandomActors
// 0x0010 (0x0010 - 0x0000)
struct RBRandomGroup_GetRandomActors final
{
public:
	TArray<class AActor*>                         OutActors;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomGroup_GetRandomActors) == 0x000008, "Wrong alignment on RBRandomGroup_GetRandomActors");
static_assert(sizeof(RBRandomGroup_GetRandomActors) == 0x000010, "Wrong size on RBRandomGroup_GetRandomActors");
static_assert(offsetof(RBRandomGroup_GetRandomActors, OutActors) == 0x000000, "Member 'RBRandomGroup_GetRandomActors::OutActors' has a wrong offset!");

// Function OPP.RBRandomizable.GetStateName
// 0x0028 (0x0028 - 0x0000)
struct RBRandomizable_GetStateName final
{
public:
	class FString                                 StateA;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StateB;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230B[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBRandomizable_GetStateName) == 0x000008, "Wrong alignment on RBRandomizable_GetStateName");
static_assert(sizeof(RBRandomizable_GetStateName) == 0x000028, "Wrong size on RBRandomizable_GetStateName");
static_assert(offsetof(RBRandomizable_GetStateName, StateA) == 0x000000, "Member 'RBRandomizable_GetStateName::StateA' has a wrong offset!");
static_assert(offsetof(RBRandomizable_GetStateName, StateB) == 0x000010, "Member 'RBRandomizable_GetStateName::StateB' has a wrong offset!");
static_assert(offsetof(RBRandomizable_GetStateName, ReturnValue) == 0x000020, "Member 'RBRandomizable_GetStateName::ReturnValue' has a wrong offset!");

// Function OPP.RBRandomizable.PrepareState
// 0x0010 (0x0010 - 0x0000)
struct RBRandomizable_PrepareState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230C[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 RandomOwner;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizable_PrepareState) == 0x000008, "Wrong alignment on RBRandomizable_PrepareState");
static_assert(sizeof(RBRandomizable_PrepareState) == 0x000010, "Wrong size on RBRandomizable_PrepareState");
static_assert(offsetof(RBRandomizable_PrepareState, bStateA) == 0x000000, "Member 'RBRandomizable_PrepareState::bStateA' has a wrong offset!");
static_assert(offsetof(RBRandomizable_PrepareState, RandomOwner) == 0x000008, "Member 'RBRandomizable_PrepareState::RandomOwner' has a wrong offset!");

// Function OPP.RBRandomizable.SetShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizable_SetShouldBeIgnoredForLots final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizable_SetShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on RBRandomizable_SetShouldBeIgnoredForLots");
static_assert(sizeof(RBRandomizable_SetShouldBeIgnoredForLots) == 0x000001, "Wrong size on RBRandomizable_SetShouldBeIgnoredForLots");
static_assert(offsetof(RBRandomizable_SetShouldBeIgnoredForLots, bValue) == 0x000000, "Member 'RBRandomizable_SetShouldBeIgnoredForLots::bValue' has a wrong offset!");

// Function OPP.RBRandomizable.SetState
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizable_SetState final
{
public:
	bool                                          bStateA;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizable_SetState) == 0x000001, "Wrong alignment on RBRandomizable_SetState");
static_assert(sizeof(RBRandomizable_SetState) == 0x000001, "Wrong size on RBRandomizable_SetState");
static_assert(offsetof(RBRandomizable_SetState, bStateA) == 0x000000, "Member 'RBRandomizable_SetState::bStateA' has a wrong offset!");

// Function OPP.RBRandomizable.IsStateA
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizable_IsStateA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizable_IsStateA) == 0x000001, "Wrong alignment on RBRandomizable_IsStateA");
static_assert(sizeof(RBRandomizable_IsStateA) == 0x000001, "Wrong size on RBRandomizable_IsStateA");
static_assert(offsetof(RBRandomizable_IsStateA, ReturnValue) == 0x000000, "Member 'RBRandomizable_IsStateA::ReturnValue' has a wrong offset!");

// Function OPP.RBRandomizable.ShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizable_ShouldBeIgnoredForLots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizable_ShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on RBRandomizable_ShouldBeIgnoredForLots");
static_assert(sizeof(RBRandomizable_ShouldBeIgnoredForLots) == 0x000001, "Wrong size on RBRandomizable_ShouldBeIgnoredForLots");
static_assert(offsetof(RBRandomizable_ShouldBeIgnoredForLots, ReturnValue) == 0x000000, "Member 'RBRandomizable_ShouldBeIgnoredForLots::ReturnValue' has a wrong offset!");

// Function OPP.RBRandomizableHelperComponent.BP_PrepareIsStateA
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizableHelperComponent_BP_PrepareIsStateA final
{
public:
	bool                                          bIsStateA;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizableHelperComponent_BP_PrepareIsStateA) == 0x000001, "Wrong alignment on RBRandomizableHelperComponent_BP_PrepareIsStateA");
static_assert(sizeof(RBRandomizableHelperComponent_BP_PrepareIsStateA) == 0x000001, "Wrong size on RBRandomizableHelperComponent_BP_PrepareIsStateA");
static_assert(offsetof(RBRandomizableHelperComponent_BP_PrepareIsStateA, bIsStateA) == 0x000000, "Member 'RBRandomizableHelperComponent_BP_PrepareIsStateA::bIsStateA' has a wrong offset!");

// Function OPP.RBRandomizableHelperComponent.BP_SetIsStateA
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizableHelperComponent_BP_SetIsStateA final
{
public:
	bool                                          bIsStateA;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizableHelperComponent_BP_SetIsStateA) == 0x000001, "Wrong alignment on RBRandomizableHelperComponent_BP_SetIsStateA");
static_assert(sizeof(RBRandomizableHelperComponent_BP_SetIsStateA) == 0x000001, "Wrong size on RBRandomizableHelperComponent_BP_SetIsStateA");
static_assert(offsetof(RBRandomizableHelperComponent_BP_SetIsStateA, bIsStateA) == 0x000000, "Member 'RBRandomizableHelperComponent_BP_SetIsStateA::bIsStateA' has a wrong offset!");

// Function OPP.RBRandomizableHelperComponent.BP_SetRandomState
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizableHelperComponent_BP_SetRandomState final
{
public:
	ERandomState                                  NewRandomState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizableHelperComponent_BP_SetRandomState) == 0x000001, "Wrong alignment on RBRandomizableHelperComponent_BP_SetRandomState");
static_assert(sizeof(RBRandomizableHelperComponent_BP_SetRandomState) == 0x000001, "Wrong size on RBRandomizableHelperComponent_BP_SetRandomState");
static_assert(offsetof(RBRandomizableHelperComponent_BP_SetRandomState, NewRandomState) == 0x000000, "Member 'RBRandomizableHelperComponent_BP_SetRandomState::NewRandomState' has a wrong offset!");

// Function OPP.RBRandomizableHelperComponent.BP_SetShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizableHelperComponent_BP_SetShouldBeIgnoredForLots final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizableHelperComponent_BP_SetShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on RBRandomizableHelperComponent_BP_SetShouldBeIgnoredForLots");
static_assert(sizeof(RBRandomizableHelperComponent_BP_SetShouldBeIgnoredForLots) == 0x000001, "Wrong size on RBRandomizableHelperComponent_BP_SetShouldBeIgnoredForLots");
static_assert(offsetof(RBRandomizableHelperComponent_BP_SetShouldBeIgnoredForLots, bValue) == 0x000000, "Member 'RBRandomizableHelperComponent_BP_SetShouldBeIgnoredForLots::bValue' has a wrong offset!");

// Function OPP.RBRandomizableHelperComponent.BP_IsStateA
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizableHelperComponent_BP_IsStateA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizableHelperComponent_BP_IsStateA) == 0x000001, "Wrong alignment on RBRandomizableHelperComponent_BP_IsStateA");
static_assert(sizeof(RBRandomizableHelperComponent_BP_IsStateA) == 0x000001, "Wrong size on RBRandomizableHelperComponent_BP_IsStateA");
static_assert(offsetof(RBRandomizableHelperComponent_BP_IsStateA, ReturnValue) == 0x000000, "Member 'RBRandomizableHelperComponent_BP_IsStateA::ReturnValue' has a wrong offset!");

// Function OPP.RBRandomizableHelperComponent.BP_IsStateSet
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizableHelperComponent_BP_IsStateSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizableHelperComponent_BP_IsStateSet) == 0x000001, "Wrong alignment on RBRandomizableHelperComponent_BP_IsStateSet");
static_assert(sizeof(RBRandomizableHelperComponent_BP_IsStateSet) == 0x000001, "Wrong size on RBRandomizableHelperComponent_BP_IsStateSet");
static_assert(offsetof(RBRandomizableHelperComponent_BP_IsStateSet, ReturnValue) == 0x000000, "Member 'RBRandomizableHelperComponent_BP_IsStateSet::ReturnValue' has a wrong offset!");

// Function OPP.RBRandomizableHelperComponent.BP_ShouldBeIgnoredForLots
// 0x0001 (0x0001 - 0x0000)
struct RBRandomizableHelperComponent_BP_ShouldBeIgnoredForLots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRandomizableHelperComponent_BP_ShouldBeIgnoredForLots) == 0x000001, "Wrong alignment on RBRandomizableHelperComponent_BP_ShouldBeIgnoredForLots");
static_assert(sizeof(RBRandomizableHelperComponent_BP_ShouldBeIgnoredForLots) == 0x000001, "Wrong size on RBRandomizableHelperComponent_BP_ShouldBeIgnoredForLots");
static_assert(offsetof(RBRandomizableHelperComponent_BP_ShouldBeIgnoredForLots, ReturnValue) == 0x000000, "Member 'RBRandomizableHelperComponent_BP_ShouldBeIgnoredForLots::ReturnValue' has a wrong offset!");

// Function OPP.RBRegroupObjectiveActor.OnNumberOfPlayerInZoneChanged
// 0x0004 (0x0004 - 0x0000)
struct RBRegroupObjectiveActor_OnNumberOfPlayerInZoneChanged final
{
public:
	int32                                         NumberOfPlayers;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRegroupObjectiveActor_OnNumberOfPlayerInZoneChanged) == 0x000004, "Wrong alignment on RBRegroupObjectiveActor_OnNumberOfPlayerInZoneChanged");
static_assert(sizeof(RBRegroupObjectiveActor_OnNumberOfPlayerInZoneChanged) == 0x000004, "Wrong size on RBRegroupObjectiveActor_OnNumberOfPlayerInZoneChanged");
static_assert(offsetof(RBRegroupObjectiveActor_OnNumberOfPlayerInZoneChanged, NumberOfPlayers) == 0x000000, "Member 'RBRegroupObjectiveActor_OnNumberOfPlayerInZoneChanged::NumberOfPlayers' has a wrong offset!");

// Function OPP.RBRegroupObjectiveActor.OnObjectiveStarted
// 0x0008 (0x0008 - 0x0000)
struct RBRegroupObjectiveActor_OnObjectiveStarted final
{
public:
	class ARBRegroupObjectiveCoordinator*         Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRegroupObjectiveActor_OnObjectiveStarted) == 0x000008, "Wrong alignment on RBRegroupObjectiveActor_OnObjectiveStarted");
static_assert(sizeof(RBRegroupObjectiveActor_OnObjectiveStarted) == 0x000008, "Wrong size on RBRegroupObjectiveActor_OnObjectiveStarted");
static_assert(offsetof(RBRegroupObjectiveActor_OnObjectiveStarted, Coordinator) == 0x000000, "Member 'RBRegroupObjectiveActor_OnObjectiveStarted::Coordinator' has a wrong offset!");

// Function OPP.RBRegroupObjectiveActor.OnRegroupObjectiveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBRegroupObjectiveActor_OnRegroupObjectiveStateChanged final
{
public:
	ERegroupObjectiveState                        NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRegroupObjectiveActor_OnRegroupObjectiveStateChanged) == 0x000001, "Wrong alignment on RBRegroupObjectiveActor_OnRegroupObjectiveStateChanged");
static_assert(sizeof(RBRegroupObjectiveActor_OnRegroupObjectiveStateChanged) == 0x000001, "Wrong size on RBRegroupObjectiveActor_OnRegroupObjectiveStateChanged");
static_assert(offsetof(RBRegroupObjectiveActor_OnRegroupObjectiveStateChanged, NewState) == 0x000000, "Member 'RBRegroupObjectiveActor_OnRegroupObjectiveStateChanged::NewState' has a wrong offset!");

// Function OPP.RBRegroupObjectiveActor.OnTotalNumberOfPlayersChanged
// 0x0004 (0x0004 - 0x0000)
struct RBRegroupObjectiveActor_OnTotalNumberOfPlayersChanged final
{
public:
	int32                                         NumberOfPlayers;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRegroupObjectiveActor_OnTotalNumberOfPlayersChanged) == 0x000004, "Wrong alignment on RBRegroupObjectiveActor_OnTotalNumberOfPlayersChanged");
static_assert(sizeof(RBRegroupObjectiveActor_OnTotalNumberOfPlayersChanged) == 0x000004, "Wrong size on RBRegroupObjectiveActor_OnTotalNumberOfPlayersChanged");
static_assert(offsetof(RBRegroupObjectiveActor_OnTotalNumberOfPlayersChanged, NumberOfPlayers) == 0x000000, "Member 'RBRegroupObjectiveActor_OnTotalNumberOfPlayersChanged::NumberOfPlayers' has a wrong offset!");

// Function OPP.RBRegroupObjectiveCoordinator.BP_SetWaitingForBP
// 0x0001 (0x0001 - 0x0000)
struct RBRegroupObjectiveCoordinator_BP_SetWaitingForBP final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRegroupObjectiveCoordinator_BP_SetWaitingForBP) == 0x000001, "Wrong alignment on RBRegroupObjectiveCoordinator_BP_SetWaitingForBP");
static_assert(sizeof(RBRegroupObjectiveCoordinator_BP_SetWaitingForBP) == 0x000001, "Wrong size on RBRegroupObjectiveCoordinator_BP_SetWaitingForBP");
static_assert(offsetof(RBRegroupObjectiveCoordinator_BP_SetWaitingForBP, bValue) == 0x000000, "Member 'RBRegroupObjectiveCoordinator_BP_SetWaitingForBP::bValue' has a wrong offset!");

// Function OPP.RBRegroupObjectiveCoordinator.OnOperatingFinished
// 0x0010 (0x0010 - 0x0000)
struct RBRegroupObjectiveCoordinator_OnOperatingFinished final
{
public:
	class URBOperatableComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRegroupObjectiveCoordinator_OnOperatingFinished) == 0x000008, "Wrong alignment on RBRegroupObjectiveCoordinator_OnOperatingFinished");
static_assert(sizeof(RBRegroupObjectiveCoordinator_OnOperatingFinished) == 0x000010, "Wrong size on RBRegroupObjectiveCoordinator_OnOperatingFinished");
static_assert(offsetof(RBRegroupObjectiveCoordinator_OnOperatingFinished, Component) == 0x000000, "Member 'RBRegroupObjectiveCoordinator_OnOperatingFinished::Component' has a wrong offset!");
static_assert(offsetof(RBRegroupObjectiveCoordinator_OnOperatingFinished, Player) == 0x000008, "Member 'RBRegroupObjectiveCoordinator_OnOperatingFinished::Player' has a wrong offset!");

// Function OPP.RBRegroupObjectiveCoordinator.OnPlayerDoAction
// 0x0010 (0x0010 - 0x0000)
struct RBRegroupObjectiveCoordinator_OnPlayerDoAction final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBInteractible*                        Interactible;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRegroupObjectiveCoordinator_OnPlayerDoAction) == 0x000008, "Wrong alignment on RBRegroupObjectiveCoordinator_OnPlayerDoAction");
static_assert(sizeof(RBRegroupObjectiveCoordinator_OnPlayerDoAction) == 0x000010, "Wrong size on RBRegroupObjectiveCoordinator_OnPlayerDoAction");
static_assert(offsetof(RBRegroupObjectiveCoordinator_OnPlayerDoAction, Player) == 0x000000, "Member 'RBRegroupObjectiveCoordinator_OnPlayerDoAction::Player' has a wrong offset!");
static_assert(offsetof(RBRegroupObjectiveCoordinator_OnPlayerDoAction, Interactible) == 0x000008, "Member 'RBRegroupObjectiveCoordinator_OnPlayerDoAction::Interactible' has a wrong offset!");

// Function OPP.RBRegroupObjectiveCoordinator.OnPlayerSimpleDoAction
// 0x0010 (0x0010 - 0x0000)
struct RBRegroupObjectiveCoordinator_OnPlayerSimpleDoAction final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractibleComponent*               Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRegroupObjectiveCoordinator_OnPlayerSimpleDoAction) == 0x000008, "Wrong alignment on RBRegroupObjectiveCoordinator_OnPlayerSimpleDoAction");
static_assert(sizeof(RBRegroupObjectiveCoordinator_OnPlayerSimpleDoAction) == 0x000010, "Wrong size on RBRegroupObjectiveCoordinator_OnPlayerSimpleDoAction");
static_assert(offsetof(RBRegroupObjectiveCoordinator_OnPlayerSimpleDoAction, Player) == 0x000000, "Member 'RBRegroupObjectiveCoordinator_OnPlayerSimpleDoAction::Player' has a wrong offset!");
static_assert(offsetof(RBRegroupObjectiveCoordinator_OnPlayerSimpleDoAction, Component) == 0x000008, "Member 'RBRegroupObjectiveCoordinator_OnPlayerSimpleDoAction::Component' has a wrong offset!");

// Function OPP.RBReleaseMenu.OnPlayerReleaseStateUpdated
// 0x0018 (0x0018 - 0x0000)
struct RBReleaseMenu_OnPlayerReleaseStateUpdated final
{
public:
	struct FPlayerReleaseState                    PlayerReleaseState;                                // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBReleaseMenu_OnPlayerReleaseStateUpdated) == 0x000008, "Wrong alignment on RBReleaseMenu_OnPlayerReleaseStateUpdated");
static_assert(sizeof(RBReleaseMenu_OnPlayerReleaseStateUpdated) == 0x000018, "Wrong size on RBReleaseMenu_OnPlayerReleaseStateUpdated");
static_assert(offsetof(RBReleaseMenu_OnPlayerReleaseStateUpdated, PlayerReleaseState) == 0x000000, "Member 'RBReleaseMenu_OnPlayerReleaseStateUpdated::PlayerReleaseState' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Client_SetAIConfigInfo
// 0x1308 (0x1308 - 0x0000)
struct RBRemoteDebuggingComponent_Client_SetAIConfigInfo final
{
public:
	struct FAIConfigData                          AddedOverrides;                                    // 0x0000(0x12F8)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class URBPartialAIConfig*>             AdditionalConfigs;                                 // 0x12F8(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Client_SetAIConfigInfo) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Client_SetAIConfigInfo");
static_assert(sizeof(RBRemoteDebuggingComponent_Client_SetAIConfigInfo) == 0x001308, "Wrong size on RBRemoteDebuggingComponent_Client_SetAIConfigInfo");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_SetAIConfigInfo, AddedOverrides) == 0x000000, "Member 'RBRemoteDebuggingComponent_Client_SetAIConfigInfo::AddedOverrides' has a wrong offset!");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_SetAIConfigInfo, AdditionalConfigs) == 0x0012F8, "Member 'RBRemoteDebuggingComponent_Client_SetAIConfigInfo::AdditionalConfigs' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Client_SetRecentAnalyticsEvents
// 0x0010 (0x0010 - 0x0000)
struct RBRemoteDebuggingComponent_Client_SetRecentAnalyticsEvents final
{
public:
	TArray<class FString>                         RecentEvents;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Client_SetRecentAnalyticsEvents) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Client_SetRecentAnalyticsEvents");
static_assert(sizeof(RBRemoteDebuggingComponent_Client_SetRecentAnalyticsEvents) == 0x000010, "Wrong size on RBRemoteDebuggingComponent_Client_SetRecentAnalyticsEvents");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_SetRecentAnalyticsEvents, RecentEvents) == 0x000000, "Member 'RBRemoteDebuggingComponent_Client_SetRecentAnalyticsEvents::RecentEvents' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Client_UpdateBotDebugInfo
// 0x0340 (0x0340 - 0x0000)
struct RBRemoteDebuggingComponent_Client_UpdateBotDebugInfo final
{
public:
	struct FBotDebugInfo                          DebugInfo;                                         // 0x0000(0x0340)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Client_UpdateBotDebugInfo) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Client_UpdateBotDebugInfo");
static_assert(sizeof(RBRemoteDebuggingComponent_Client_UpdateBotDebugInfo) == 0x000340, "Wrong size on RBRemoteDebuggingComponent_Client_UpdateBotDebugInfo");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_UpdateBotDebugInfo, DebugInfo) == 0x000000, "Member 'RBRemoteDebuggingComponent_Client_UpdateBotDebugInfo::DebugInfo' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Client_UpdateGameplayRandomizationDebugInfo
// 0x0100 (0x0100 - 0x0000)
struct RBRemoteDebuggingComponent_Client_UpdateGameplayRandomizationDebugInfo final
{
public:
	struct FGameplayRandomizationDebugInfo        DebugInfo;                                         // 0x0000(0x0100)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Client_UpdateGameplayRandomizationDebugInfo) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Client_UpdateGameplayRandomizationDebugInfo");
static_assert(sizeof(RBRemoteDebuggingComponent_Client_UpdateGameplayRandomizationDebugInfo) == 0x000100, "Wrong size on RBRemoteDebuggingComponent_Client_UpdateGameplayRandomizationDebugInfo");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_UpdateGameplayRandomizationDebugInfo, DebugInfo) == 0x000000, "Member 'RBRemoteDebuggingComponent_Client_UpdateGameplayRandomizationDebugInfo::DebugInfo' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Client_UpdateMusicDebugInfo
// 0x0018 (0x0018 - 0x0000)
struct RBRemoteDebuggingComponent_Client_UpdateMusicDebugInfo final
{
public:
	struct FMusicDebugInfo                        DebugInfo;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Client_UpdateMusicDebugInfo) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Client_UpdateMusicDebugInfo");
static_assert(sizeof(RBRemoteDebuggingComponent_Client_UpdateMusicDebugInfo) == 0x000018, "Wrong size on RBRemoteDebuggingComponent_Client_UpdateMusicDebugInfo");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_UpdateMusicDebugInfo, DebugInfo) == 0x000000, "Member 'RBRemoteDebuggingComponent_Client_UpdateMusicDebugInfo::DebugInfo' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Client_UpdateOverseerInfo
// 0x00B8 (0x00B8 - 0x0000)
struct RBRemoteDebuggingComponent_Client_UpdateOverseerInfo final
{
public:
	struct FOverseerInfo                          OverseerInfo;                                      // 0x0000(0x00B8)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Client_UpdateOverseerInfo) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Client_UpdateOverseerInfo");
static_assert(sizeof(RBRemoteDebuggingComponent_Client_UpdateOverseerInfo) == 0x0000B8, "Wrong size on RBRemoteDebuggingComponent_Client_UpdateOverseerInfo");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_UpdateOverseerInfo, OverseerInfo) == 0x000000, "Member 'RBRemoteDebuggingComponent_Client_UpdateOverseerInfo::OverseerInfo' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Client_UpdatePlayerDebugInfo
// 0x0028 (0x0028 - 0x0000)
struct RBRemoteDebuggingComponent_Client_UpdatePlayerDebugInfo final
{
public:
	struct FPlayerDebugInfo                       DebugInfo;                                         // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Client_UpdatePlayerDebugInfo) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Client_UpdatePlayerDebugInfo");
static_assert(sizeof(RBRemoteDebuggingComponent_Client_UpdatePlayerDebugInfo) == 0x000028, "Wrong size on RBRemoteDebuggingComponent_Client_UpdatePlayerDebugInfo");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_UpdatePlayerDebugInfo, DebugInfo) == 0x000000, "Member 'RBRemoteDebuggingComponent_Client_UpdatePlayerDebugInfo::DebugInfo' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Client_UpdateScoringDebugInfo
// 0x0010 (0x0010 - 0x0000)
struct RBRemoteDebuggingComponent_Client_UpdateScoringDebugInfo final
{
public:
	struct FScoringDebugInfo                      DebugInfo;                                         // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Client_UpdateScoringDebugInfo) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Client_UpdateScoringDebugInfo");
static_assert(sizeof(RBRemoteDebuggingComponent_Client_UpdateScoringDebugInfo) == 0x000010, "Wrong size on RBRemoteDebuggingComponent_Client_UpdateScoringDebugInfo");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_UpdateScoringDebugInfo, DebugInfo) == 0x000000, "Member 'RBRemoteDebuggingComponent_Client_UpdateScoringDebugInfo::DebugInfo' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Client_UpdateServerStreamingInfo
// 0x0080 (0x0080 - 0x0000)
struct RBRemoteDebuggingComponent_Client_UpdateServerStreamingInfo final
{
public:
	struct FLevelStreamingInfo                    DebugInfo;                                         // 0x0000(0x0080)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Client_UpdateServerStreamingInfo) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Client_UpdateServerStreamingInfo");
static_assert(sizeof(RBRemoteDebuggingComponent_Client_UpdateServerStreamingInfo) == 0x000080, "Wrong size on RBRemoteDebuggingComponent_Client_UpdateServerStreamingInfo");
static_assert(offsetof(RBRemoteDebuggingComponent_Client_UpdateServerStreamingInfo, DebugInfo) == 0x000000, "Member 'RBRemoteDebuggingComponent_Client_UpdateServerStreamingInfo::DebugInfo' has a wrong offset!");

// Function OPP.RBRemoteDebuggingComponent.Server_SetDebuggingState
// 0x0020 (0x0020 - 0x0000)
struct RBRemoteDebuggingComponent_Server_SetDebuggingState final
{
public:
	struct FRemoteDebuggingState                  Param_DebuggingState;                              // 0x0000(0x0020)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRemoteDebuggingComponent_Server_SetDebuggingState) == 0x000008, "Wrong alignment on RBRemoteDebuggingComponent_Server_SetDebuggingState");
static_assert(sizeof(RBRemoteDebuggingComponent_Server_SetDebuggingState) == 0x000020, "Wrong size on RBRemoteDebuggingComponent_Server_SetDebuggingState");
static_assert(offsetof(RBRemoteDebuggingComponent_Server_SetDebuggingState, Param_DebuggingState) == 0x000000, "Member 'RBRemoteDebuggingComponent_Server_SetDebuggingState::Param_DebuggingState' has a wrong offset!");

// Function OPP.RBReplayTutorialMenu.IsOperationPending
// 0x0001 (0x0001 - 0x0000)
struct RBReplayTutorialMenu_IsOperationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBReplayTutorialMenu_IsOperationPending) == 0x000001, "Wrong alignment on RBReplayTutorialMenu_IsOperationPending");
static_assert(sizeof(RBReplayTutorialMenu_IsOperationPending) == 0x000001, "Wrong size on RBReplayTutorialMenu_IsOperationPending");
static_assert(offsetof(RBReplayTutorialMenu_IsOperationPending, ReturnValue) == 0x000000, "Member 'RBReplayTutorialMenu_IsOperationPending::ReturnValue' has a wrong offset!");

// Function OPP.RBReportPlayerMenu.FilterDetailsText
// 0x0030 (0x0030 - 0x0000)
struct RBReportPlayerMenu_FilterDetailsText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBReportPlayerMenu_FilterDetailsText) == 0x000008, "Wrong alignment on RBReportPlayerMenu_FilterDetailsText");
static_assert(sizeof(RBReportPlayerMenu_FilterDetailsText) == 0x000030, "Wrong size on RBReportPlayerMenu_FilterDetailsText");
static_assert(offsetof(RBReportPlayerMenu_FilterDetailsText, Text) == 0x000000, "Member 'RBReportPlayerMenu_FilterDetailsText::Text' has a wrong offset!");
static_assert(offsetof(RBReportPlayerMenu_FilterDetailsText, ReturnValue) == 0x000018, "Member 'RBReportPlayerMenu_FilterDetailsText::ReturnValue' has a wrong offset!");

// Function OPP.RBReportPlayerMenu.Send
// 0x0018 (0x0018 - 0x0000)
struct RBReportPlayerMenu_Send final
{
public:
	EPlayerReportReason                           Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2324[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReasonText;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBReportPlayerMenu_Send) == 0x000008, "Wrong alignment on RBReportPlayerMenu_Send");
static_assert(sizeof(RBReportPlayerMenu_Send) == 0x000018, "Wrong size on RBReportPlayerMenu_Send");
static_assert(offsetof(RBReportPlayerMenu_Send, Reason) == 0x000000, "Member 'RBReportPlayerMenu_Send::Reason' has a wrong offset!");
static_assert(offsetof(RBReportPlayerMenu_Send, ReasonText) == 0x000008, "Member 'RBReportPlayerMenu_Send::ReasonText' has a wrong offset!");

// Function OPP.RBReportPlayerMenu.GetPlayerDisplayName
// 0x0010 (0x0010 - 0x0000)
struct RBReportPlayerMenu_GetPlayerDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBReportPlayerMenu_GetPlayerDisplayName) == 0x000008, "Wrong alignment on RBReportPlayerMenu_GetPlayerDisplayName");
static_assert(sizeof(RBReportPlayerMenu_GetPlayerDisplayName) == 0x000010, "Wrong size on RBReportPlayerMenu_GetPlayerDisplayName");
static_assert(offsetof(RBReportPlayerMenu_GetPlayerDisplayName, ReturnValue) == 0x000000, "Member 'RBReportPlayerMenu_GetPlayerDisplayName::ReturnValue' has a wrong offset!");

// Function OPP.RBReportPlayerMenu.GetPlayerPlatform
// 0x0001 (0x0001 - 0x0000)
struct RBReportPlayerMenu_GetPlayerPlatform final
{
public:
	EProfilePlatform                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBReportPlayerMenu_GetPlayerPlatform) == 0x000001, "Wrong alignment on RBReportPlayerMenu_GetPlayerPlatform");
static_assert(sizeof(RBReportPlayerMenu_GetPlayerPlatform) == 0x000001, "Wrong size on RBReportPlayerMenu_GetPlayerPlatform");
static_assert(offsetof(RBReportPlayerMenu_GetPlayerPlatform, ReturnValue) == 0x000000, "Member 'RBReportPlayerMenu_GetPlayerPlatform::ReturnValue' has a wrong offset!");

// Function OPP.RBReportPlayerMenu.GetPlayerReportReasonText
// 0x0020 (0x0020 - 0x0000)
struct RBReportPlayerMenu_GetPlayerReportReasonText final
{
public:
	EPlayerReportReason                           Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2325[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBReportPlayerMenu_GetPlayerReportReasonText) == 0x000008, "Wrong alignment on RBReportPlayerMenu_GetPlayerReportReasonText");
static_assert(sizeof(RBReportPlayerMenu_GetPlayerReportReasonText) == 0x000020, "Wrong size on RBReportPlayerMenu_GetPlayerReportReasonText");
static_assert(offsetof(RBReportPlayerMenu_GetPlayerReportReasonText, Reason) == 0x000000, "Member 'RBReportPlayerMenu_GetPlayerReportReasonText::Reason' has a wrong offset!");
static_assert(offsetof(RBReportPlayerMenu_GetPlayerReportReasonText, ReturnValue) == 0x000008, "Member 'RBReportPlayerMenu_GetPlayerReportReasonText::ReturnValue' has a wrong offset!");

// Function OPP.RBRepulsionComponent.AddPawnException
// 0x0008 (0x0008 - 0x0000)
struct RBRepulsionComponent_AddPawnException final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRepulsionComponent_AddPawnException) == 0x000008, "Wrong alignment on RBRepulsionComponent_AddPawnException");
static_assert(sizeof(RBRepulsionComponent_AddPawnException) == 0x000008, "Wrong size on RBRepulsionComponent_AddPawnException");
static_assert(offsetof(RBRepulsionComponent_AddPawnException, Pawn) == 0x000000, "Member 'RBRepulsionComponent_AddPawnException::Pawn' has a wrong offset!");

// Function OPP.RBRepulsionComponent.AddRepulsionRule
// 0x0040 (0x0040 - 0x0000)
struct RBRepulsionComponent_AddRepulsionRule final
{
public:
	ERepulsionRuleType                            RuleType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232B[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepulsionDirection;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVelocityOverLocation;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRepulsionRule                         ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRepulsionComponent_AddRepulsionRule) == 0x000008, "Wrong alignment on RBRepulsionComponent_AddRepulsionRule");
static_assert(sizeof(RBRepulsionComponent_AddRepulsionRule) == 0x000040, "Wrong size on RBRepulsionComponent_AddRepulsionRule");
static_assert(offsetof(RBRepulsionComponent_AddRepulsionRule, RuleType) == 0x000000, "Member 'RBRepulsionComponent_AddRepulsionRule::RuleType' has a wrong offset!");
static_assert(offsetof(RBRepulsionComponent_AddRepulsionRule, RepulsionDirection) == 0x000004, "Member 'RBRepulsionComponent_AddRepulsionRule::RepulsionDirection' has a wrong offset!");
static_assert(offsetof(RBRepulsionComponent_AddRepulsionRule, bUseVelocityOverLocation) == 0x000008, "Member 'RBRepulsionComponent_AddRepulsionRule::bUseVelocityOverLocation' has a wrong offset!");
static_assert(offsetof(RBRepulsionComponent_AddRepulsionRule, ReturnValue) == 0x000010, "Member 'RBRepulsionComponent_AddRepulsionRule::ReturnValue' has a wrong offset!");

// Function OPP.RBRepulsionComponent.BP_SetEnabled
// 0x000C (0x000C - 0x0000)
struct RBRepulsionComponent_BP_SetEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_232D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRepulsionComponent_BP_SetEnabled) == 0x000004, "Wrong alignment on RBRepulsionComponent_BP_SetEnabled");
static_assert(sizeof(RBRepulsionComponent_BP_SetEnabled) == 0x00000C, "Wrong size on RBRepulsionComponent_BP_SetEnabled");
static_assert(offsetof(RBRepulsionComponent_BP_SetEnabled, bNewValue) == 0x000000, "Member 'RBRepulsionComponent_BP_SetEnabled::bNewValue' has a wrong offset!");
static_assert(offsetof(RBRepulsionComponent_BP_SetEnabled, Delay) == 0x000004, "Member 'RBRepulsionComponent_BP_SetEnabled::Delay' has a wrong offset!");
static_assert(offsetof(RBRepulsionComponent_BP_SetEnabled, Duration) == 0x000008, "Member 'RBRepulsionComponent_BP_SetEnabled::Duration' has a wrong offset!");

// Function OPP.RBRewardRoomComponent.OnLinkedDoorUnlocked
// 0x0008 (0x0008 - 0x0000)
struct RBRewardRoomComponent_OnLinkedDoorUnlocked final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRewardRoomComponent_OnLinkedDoorUnlocked) == 0x000008, "Wrong alignment on RBRewardRoomComponent_OnLinkedDoorUnlocked");
static_assert(sizeof(RBRewardRoomComponent_OnLinkedDoorUnlocked) == 0x000008, "Wrong size on RBRewardRoomComponent_OnLinkedDoorUnlocked");
static_assert(offsetof(RBRewardRoomComponent_OnLinkedDoorUnlocked, Pawn) == 0x000000, "Member 'RBRewardRoomComponent_OnLinkedDoorUnlocked::Pawn' has a wrong offset!");

// Function OPP.RBRollingGateVariatorActor.SetVariatorEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBRollingGateVariatorActor_SetVariatorEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRollingGateVariatorActor_SetVariatorEnabled) == 0x000001, "Wrong alignment on RBRollingGateVariatorActor_SetVariatorEnabled");
static_assert(sizeof(RBRollingGateVariatorActor_SetVariatorEnabled) == 0x000001, "Wrong size on RBRollingGateVariatorActor_SetVariatorEnabled");
static_assert(offsetof(RBRollingGateVariatorActor_SetVariatorEnabled, bEnabled) == 0x000000, "Member 'RBRollingGateVariatorActor_SetVariatorEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBRoom.BP_GetActiveObjectivesInside
// 0x0010 (0x0010 - 0x0000)
struct RBRoom_BP_GetActiveObjectivesInside final
{
public:
	TArray<class AActor*>                         OutObjectiveActors;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoom_BP_GetActiveObjectivesInside) == 0x000008, "Wrong alignment on RBRoom_BP_GetActiveObjectivesInside");
static_assert(sizeof(RBRoom_BP_GetActiveObjectivesInside) == 0x000010, "Wrong size on RBRoom_BP_GetActiveObjectivesInside");
static_assert(offsetof(RBRoom_BP_GetActiveObjectivesInside, OutObjectiveActors) == 0x000000, "Member 'RBRoom_BP_GetActiveObjectivesInside::OutObjectiveActors' has a wrong offset!");

// Function OPP.RBRoom.BP_GetPossibleObjectivesInside
// 0x0010 (0x0010 - 0x0000)
struct RBRoom_BP_GetPossibleObjectivesInside final
{
public:
	TArray<class AActor*>                         OutObjectiveActors;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoom_BP_GetPossibleObjectivesInside) == 0x000008, "Wrong alignment on RBRoom_BP_GetPossibleObjectivesInside");
static_assert(sizeof(RBRoom_BP_GetPossibleObjectivesInside) == 0x000010, "Wrong size on RBRoom_BP_GetPossibleObjectivesInside");
static_assert(offsetof(RBRoom_BP_GetPossibleObjectivesInside, OutObjectiveActors) == 0x000000, "Member 'RBRoom_BP_GetPossibleObjectivesInside::OutObjectiveActors' has a wrong offset!");

// Function OPP.RBRoom.OnActorEnterRoom
// 0x0010 (0x0010 - 0x0000)
struct RBRoom_OnActorEnterRoom final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoom_OnActorEnterRoom) == 0x000008, "Wrong alignment on RBRoom_OnActorEnterRoom");
static_assert(sizeof(RBRoom_OnActorEnterRoom) == 0x000010, "Wrong size on RBRoom_OnActorEnterRoom");
static_assert(offsetof(RBRoom_OnActorEnterRoom, OverlappedActor) == 0x000000, "Member 'RBRoom_OnActorEnterRoom::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBRoom_OnActorEnterRoom, OtherActor) == 0x000008, "Member 'RBRoom_OnActorEnterRoom::OtherActor' has a wrong offset!");

// Function OPP.RBRoom.OnActorExitRoom
// 0x0010 (0x0010 - 0x0000)
struct RBRoom_OnActorExitRoom final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoom_OnActorExitRoom) == 0x000008, "Wrong alignment on RBRoom_OnActorExitRoom");
static_assert(sizeof(RBRoom_OnActorExitRoom) == 0x000010, "Wrong size on RBRoom_OnActorExitRoom");
static_assert(offsetof(RBRoom_OnActorExitRoom, OverlappedActor) == 0x000000, "Member 'RBRoom_OnActorExitRoom::OverlappedActor' has a wrong offset!");
static_assert(offsetof(RBRoom_OnActorExitRoom, OtherActor) == 0x000008, "Member 'RBRoom_OnActorExitRoom::OtherActor' has a wrong offset!");

// Function OPP.RBRoom.GetAllOverlappingActors
// 0x0050 (0x0050 - 0x0000)
struct RBRoom_GetAllOverlappingActors final
{
public:
	TSet<class AActor*>                           OutActors;                                         // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoom_GetAllOverlappingActors) == 0x000008, "Wrong alignment on RBRoom_GetAllOverlappingActors");
static_assert(sizeof(RBRoom_GetAllOverlappingActors) == 0x000050, "Wrong size on RBRoom_GetAllOverlappingActors");
static_assert(offsetof(RBRoom_GetAllOverlappingActors, OutActors) == 0x000000, "Member 'RBRoom_GetAllOverlappingActors::OutActors' has a wrong offset!");

// Function OPP.RBRoom.GetLinkedMissionRoomGroup
// 0x0008 (0x0008 - 0x0000)
struct RBRoom_GetLinkedMissionRoomGroup final
{
public:
	class ARBRoomGroup*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoom_GetLinkedMissionRoomGroup) == 0x000008, "Wrong alignment on RBRoom_GetLinkedMissionRoomGroup");
static_assert(sizeof(RBRoom_GetLinkedMissionRoomGroup) == 0x000008, "Wrong size on RBRoom_GetLinkedMissionRoomGroup");
static_assert(offsetof(RBRoom_GetLinkedMissionRoomGroup, ReturnValue) == 0x000000, "Member 'RBRoom_GetLinkedMissionRoomGroup::ReturnValue' has a wrong offset!");

// Function OPP.RBRoom.IsSlaveRoom
// 0x0001 (0x0001 - 0x0000)
struct RBRoom_IsSlaveRoom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoom_IsSlaveRoom) == 0x000001, "Wrong alignment on RBRoom_IsSlaveRoom");
static_assert(sizeof(RBRoom_IsSlaveRoom) == 0x000001, "Wrong size on RBRoom_IsSlaveRoom");
static_assert(offsetof(RBRoom_IsSlaveRoom, ReturnValue) == 0x000000, "Member 'RBRoom_IsSlaveRoom::ReturnValue' has a wrong offset!");

// Function OPP.RBRoomConnectorComponent.SetConnectionState
// 0x0001 (0x0001 - 0x0000)
struct RBRoomConnectorComponent_SetConnectionState final
{
public:
	ERoomConnectionState                          NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoomConnectorComponent_SetConnectionState) == 0x000001, "Wrong alignment on RBRoomConnectorComponent_SetConnectionState");
static_assert(sizeof(RBRoomConnectorComponent_SetConnectionState) == 0x000001, "Wrong size on RBRoomConnectorComponent_SetConnectionState");
static_assert(offsetof(RBRoomConnectorComponent_SetConnectionState, NewState) == 0x000000, "Member 'RBRoomConnectorComponent_SetConnectionState::NewState' has a wrong offset!");

// Function OPP.RBRoomConnectorComponent.GetRoomInBack
// 0x0008 (0x0008 - 0x0000)
struct RBRoomConnectorComponent_GetRoomInBack final
{
public:
	class ARBRoom*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoomConnectorComponent_GetRoomInBack) == 0x000008, "Wrong alignment on RBRoomConnectorComponent_GetRoomInBack");
static_assert(sizeof(RBRoomConnectorComponent_GetRoomInBack) == 0x000008, "Wrong size on RBRoomConnectorComponent_GetRoomInBack");
static_assert(offsetof(RBRoomConnectorComponent_GetRoomInBack, ReturnValue) == 0x000000, "Member 'RBRoomConnectorComponent_GetRoomInBack::ReturnValue' has a wrong offset!");

// Function OPP.RBRoomConnectorComponent.GetRoomInFront
// 0x0008 (0x0008 - 0x0000)
struct RBRoomConnectorComponent_GetRoomInFront final
{
public:
	class ARBRoom*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBRoomConnectorComponent_GetRoomInFront) == 0x000008, "Wrong alignment on RBRoomConnectorComponent_GetRoomInFront");
static_assert(sizeof(RBRoomConnectorComponent_GetRoomInFront) == 0x000008, "Wrong size on RBRoomConnectorComponent_GetRoomInFront");
static_assert(offsetof(RBRoomConnectorComponent_GetRoomInFront, ReturnValue) == 0x000000, "Member 'RBRoomConnectorComponent_GetRoomInFront::ReturnValue' has a wrong offset!");

// Function OPP.RBSAS.BP_Cheat_ForceSASState
// 0x0001 (0x0001 - 0x0000)
struct RBSAS_BP_Cheat_ForceSASState final
{
public:
	ESASState                                     State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_BP_Cheat_ForceSASState) == 0x000001, "Wrong alignment on RBSAS_BP_Cheat_ForceSASState");
static_assert(sizeof(RBSAS_BP_Cheat_ForceSASState) == 0x000001, "Wrong size on RBSAS_BP_Cheat_ForceSASState");
static_assert(offsetof(RBSAS_BP_Cheat_ForceSASState, State) == 0x000000, "Member 'RBSAS_BP_Cheat_ForceSASState::State' has a wrong offset!");

// Function OPP.RBSAS.BP_OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBSAS_BP_OnStateChanged final
{
public:
	ESASState                                     State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_BP_OnStateChanged) == 0x000001, "Wrong alignment on RBSAS_BP_OnStateChanged");
static_assert(sizeof(RBSAS_BP_OnStateChanged) == 0x000001, "Wrong size on RBSAS_BP_OnStateChanged");
static_assert(offsetof(RBSAS_BP_OnStateChanged, State) == 0x000000, "Member 'RBSAS_BP_OnStateChanged::State' has a wrong offset!");

// Function OPP.RBSAS.OnGamePhaseUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBSAS_OnGamePhaseUpdated final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_OnGamePhaseUpdated) == 0x000001, "Wrong alignment on RBSAS_OnGamePhaseUpdated");
static_assert(sizeof(RBSAS_OnGamePhaseUpdated) == 0x000001, "Wrong size on RBSAS_OnGamePhaseUpdated");
static_assert(offsetof(RBSAS_OnGamePhaseUpdated, GamePhase) == 0x000000, "Member 'RBSAS_OnGamePhaseUpdated::GamePhase' has a wrong offset!");

// Function OPP.RBSAS.OnPawnRespawned
// 0x0008 (0x0008 - 0x0000)
struct RBSAS_OnPawnRespawned final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_OnPawnRespawned) == 0x000008, "Wrong alignment on RBSAS_OnPawnRespawned");
static_assert(sizeof(RBSAS_OnPawnRespawned) == 0x000008, "Wrong size on RBSAS_OnPawnRespawned");
static_assert(offsetof(RBSAS_OnPawnRespawned, Player) == 0x000000, "Member 'RBSAS_OnPawnRespawned::Player' has a wrong offset!");

// Function OPP.RBSAS.OnPlayerEnteredEvent
// 0x0008 (0x0008 - 0x0000)
struct RBSAS_OnPlayerEnteredEvent final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_OnPlayerEnteredEvent) == 0x000008, "Wrong alignment on RBSAS_OnPlayerEnteredEvent");
static_assert(sizeof(RBSAS_OnPlayerEnteredEvent) == 0x000008, "Wrong size on RBSAS_OnPlayerEnteredEvent");
static_assert(offsetof(RBSAS_OnPlayerEnteredEvent, Player) == 0x000000, "Member 'RBSAS_OnPlayerEnteredEvent::Player' has a wrong offset!");

// Function OPP.RBSAS.OnPlayerExitedEvent
// 0x0008 (0x0008 - 0x0000)
struct RBSAS_OnPlayerExitedEvent final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_OnPlayerExitedEvent) == 0x000008, "Wrong alignment on RBSAS_OnPlayerExitedEvent");
static_assert(sizeof(RBSAS_OnPlayerExitedEvent) == 0x000008, "Wrong size on RBSAS_OnPlayerExitedEvent");
static_assert(offsetof(RBSAS_OnPlayerExitedEvent, Player) == 0x000000, "Member 'RBSAS_OnPlayerExitedEvent::Player' has a wrong offset!");

// Function OPP.RBSAS.OnStageEnded
// 0x0058 (0x0058 - 0x0000)
struct RBSAS_OnStageEnded final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsRestarting;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233E[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSAS_OnStageEnded) == 0x000008, "Wrong alignment on RBSAS_OnStageEnded");
static_assert(sizeof(RBSAS_OnStageEnded) == 0x000058, "Wrong size on RBSAS_OnStageEnded");
static_assert(offsetof(RBSAS_OnStageEnded, StageID) == 0x000000, "Member 'RBSAS_OnStageEnded::StageID' has a wrong offset!");
static_assert(offsetof(RBSAS_OnStageEnded, MissionID) == 0x000028, "Member 'RBSAS_OnStageEnded::MissionID' has a wrong offset!");
static_assert(offsetof(RBSAS_OnStageEnded, IsRestarting) == 0x000050, "Member 'RBSAS_OnStageEnded::IsRestarting' has a wrong offset!");

// Function OPP.RBSAS.OnStageReady
// 0x0050 (0x0050 - 0x0000)
struct RBSAS_OnStageReady final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_OnStageReady) == 0x000008, "Wrong alignment on RBSAS_OnStageReady");
static_assert(sizeof(RBSAS_OnStageReady) == 0x000050, "Wrong size on RBSAS_OnStageReady");
static_assert(offsetof(RBSAS_OnStageReady, StageID) == 0x000000, "Member 'RBSAS_OnStageReady::StageID' has a wrong offset!");
static_assert(offsetof(RBSAS_OnStageReady, MissionID) == 0x000028, "Member 'RBSAS_OnStageReady::MissionID' has a wrong offset!");

// Function OPP.RBSAS.BP_GetCurrentlyLoadedTrialStageName
// 0x0018 (0x0018 - 0x0000)
struct RBSAS_BP_GetCurrentlyLoadedTrialStageName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_BP_GetCurrentlyLoadedTrialStageName) == 0x000008, "Wrong alignment on RBSAS_BP_GetCurrentlyLoadedTrialStageName");
static_assert(sizeof(RBSAS_BP_GetCurrentlyLoadedTrialStageName) == 0x000018, "Wrong size on RBSAS_BP_GetCurrentlyLoadedTrialStageName");
static_assert(offsetof(RBSAS_BP_GetCurrentlyLoadedTrialStageName, ReturnValue) == 0x000000, "Member 'RBSAS_BP_GetCurrentlyLoadedTrialStageName::ReturnValue' has a wrong offset!");

// Function OPP.RBSAS.BP_GetNextTrialStageName
// 0x0018 (0x0018 - 0x0000)
struct RBSAS_BP_GetNextTrialStageName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_BP_GetNextTrialStageName) == 0x000008, "Wrong alignment on RBSAS_BP_GetNextTrialStageName");
static_assert(sizeof(RBSAS_BP_GetNextTrialStageName) == 0x000018, "Wrong size on RBSAS_BP_GetNextTrialStageName");
static_assert(offsetof(RBSAS_BP_GetNextTrialStageName, ReturnValue) == 0x000000, "Member 'RBSAS_BP_GetNextTrialStageName::ReturnValue' has a wrong offset!");

// Function OPP.RBSAS.BP_GetPreviousTrialStageName
// 0x0018 (0x0018 - 0x0000)
struct RBSAS_BP_GetPreviousTrialStageName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_BP_GetPreviousTrialStageName) == 0x000008, "Wrong alignment on RBSAS_BP_GetPreviousTrialStageName");
static_assert(sizeof(RBSAS_BP_GetPreviousTrialStageName) == 0x000018, "Wrong size on RBSAS_BP_GetPreviousTrialStageName");
static_assert(offsetof(RBSAS_BP_GetPreviousTrialStageName, ReturnValue) == 0x000000, "Member 'RBSAS_BP_GetPreviousTrialStageName::ReturnValue' has a wrong offset!");

// Function OPP.RBSAS.BP_GetTrialNameFromChainIndex
// 0x0020 (0x0020 - 0x0000)
struct RBSAS_BP_GetTrialNameFromChainIndex final
{
public:
	int32                                         ChainIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSAS_BP_GetTrialNameFromChainIndex) == 0x000008, "Wrong alignment on RBSAS_BP_GetTrialNameFromChainIndex");
static_assert(sizeof(RBSAS_BP_GetTrialNameFromChainIndex) == 0x000020, "Wrong size on RBSAS_BP_GetTrialNameFromChainIndex");
static_assert(offsetof(RBSAS_BP_GetTrialNameFromChainIndex, ChainIndex) == 0x000000, "Member 'RBSAS_BP_GetTrialNameFromChainIndex::ChainIndex' has a wrong offset!");
static_assert(offsetof(RBSAS_BP_GetTrialNameFromChainIndex, ReturnValue) == 0x000008, "Member 'RBSAS_BP_GetTrialNameFromChainIndex::ReturnValue' has a wrong offset!");

// Function OPP.RBSASChairPanelComponent.BP_SetIsInDrugSequence
// 0x0001 (0x0001 - 0x0000)
struct RBSASChairPanelComponent_BP_SetIsInDrugSequence final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASChairPanelComponent_BP_SetIsInDrugSequence) == 0x000001, "Wrong alignment on RBSASChairPanelComponent_BP_SetIsInDrugSequence");
static_assert(sizeof(RBSASChairPanelComponent_BP_SetIsInDrugSequence) == 0x000001, "Wrong size on RBSASChairPanelComponent_BP_SetIsInDrugSequence");
static_assert(offsetof(RBSASChairPanelComponent_BP_SetIsInDrugSequence, bValue) == 0x000000, "Member 'RBSASChairPanelComponent_BP_SetIsInDrugSequence::bValue' has a wrong offset!");

// Function OPP.RBSASChairPanelComponent.BP_SetShouldFaceTV
// 0x0001 (0x0001 - 0x0000)
struct RBSASChairPanelComponent_BP_SetShouldFaceTV final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASChairPanelComponent_BP_SetShouldFaceTV) == 0x000001, "Wrong alignment on RBSASChairPanelComponent_BP_SetShouldFaceTV");
static_assert(sizeof(RBSASChairPanelComponent_BP_SetShouldFaceTV) == 0x000001, "Wrong size on RBSASChairPanelComponent_BP_SetShouldFaceTV");
static_assert(offsetof(RBSASChairPanelComponent_BP_SetShouldFaceTV, bValue) == 0x000000, "Member 'RBSASChairPanelComponent_BP_SetShouldFaceTV::bValue' has a wrong offset!");

// Function OPP.RBSASChairPanelComponent.Debug_ForceAllowedToSit
// 0x0004 (0x0004 - 0x0000)
struct RBSASChairPanelComponent_Debug_ForceAllowedToSit final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASChairPanelComponent_Debug_ForceAllowedToSit) == 0x000004, "Wrong alignment on RBSASChairPanelComponent_Debug_ForceAllowedToSit");
static_assert(sizeof(RBSASChairPanelComponent_Debug_ForceAllowedToSit) == 0x000004, "Wrong size on RBSASChairPanelComponent_Debug_ForceAllowedToSit");
static_assert(offsetof(RBSASChairPanelComponent_Debug_ForceAllowedToSit, Delay) == 0x000000, "Member 'RBSASChairPanelComponent_Debug_ForceAllowedToSit::Delay' has a wrong offset!");

// Function OPP.RBSASChairPanelComponent.OnCanLeaveChairChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBSASChairPanelComponent_OnCanLeaveChairChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASChairPanelComponent_OnCanLeaveChairChangedCallback) == 0x000001, "Wrong alignment on RBSASChairPanelComponent_OnCanLeaveChairChangedCallback");
static_assert(sizeof(RBSASChairPanelComponent_OnCanLeaveChairChangedCallback) == 0x000001, "Wrong size on RBSASChairPanelComponent_OnCanLeaveChairChangedCallback");
static_assert(offsetof(RBSASChairPanelComponent_OnCanLeaveChairChangedCallback, ChangedType) == 0x000000, "Member 'RBSASChairPanelComponent_OnCanLeaveChairChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBSASChairPanelComponent.OnCanSitInChairChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBSASChairPanelComponent_OnCanSitInChairChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASChairPanelComponent_OnCanSitInChairChangedCallback) == 0x000001, "Wrong alignment on RBSASChairPanelComponent_OnCanSitInChairChangedCallback");
static_assert(sizeof(RBSASChairPanelComponent_OnCanSitInChairChangedCallback) == 0x000001, "Wrong size on RBSASChairPanelComponent_OnCanSitInChairChangedCallback");
static_assert(offsetof(RBSASChairPanelComponent_OnCanSitInChairChangedCallback, ChangedType) == 0x000000, "Member 'RBSASChairPanelComponent_OnCanSitInChairChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBSASChairPanelComponent.OnGamePhaseUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBSASChairPanelComponent_OnGamePhaseUpdated final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASChairPanelComponent_OnGamePhaseUpdated) == 0x000001, "Wrong alignment on RBSASChairPanelComponent_OnGamePhaseUpdated");
static_assert(sizeof(RBSASChairPanelComponent_OnGamePhaseUpdated) == 0x000001, "Wrong size on RBSASChairPanelComponent_OnGamePhaseUpdated");
static_assert(offsetof(RBSASChairPanelComponent_OnGamePhaseUpdated, GamePhase) == 0x000000, "Member 'RBSASChairPanelComponent_OnGamePhaseUpdated::GamePhase' has a wrong offset!");

// Function OPP.RBSASChairPanelComponent.GetCanLeaveChair
// 0x0001 (0x0001 - 0x0000)
struct RBSASChairPanelComponent_GetCanLeaveChair final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASChairPanelComponent_GetCanLeaveChair) == 0x000001, "Wrong alignment on RBSASChairPanelComponent_GetCanLeaveChair");
static_assert(sizeof(RBSASChairPanelComponent_GetCanLeaveChair) == 0x000001, "Wrong size on RBSASChairPanelComponent_GetCanLeaveChair");
static_assert(offsetof(RBSASChairPanelComponent_GetCanLeaveChair, ReturnValue) == 0x000000, "Member 'RBSASChairPanelComponent_GetCanLeaveChair::ReturnValue' has a wrong offset!");

// Function OPP.RBSASChairPanelComponent.GetCanSitInChair
// 0x0001 (0x0001 - 0x0000)
struct RBSASChairPanelComponent_GetCanSitInChair final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASChairPanelComponent_GetCanSitInChair) == 0x000001, "Wrong alignment on RBSASChairPanelComponent_GetCanSitInChair");
static_assert(sizeof(RBSASChairPanelComponent_GetCanSitInChair) == 0x000001, "Wrong size on RBSASChairPanelComponent_GetCanSitInChair");
static_assert(offsetof(RBSASChairPanelComponent_GetCanSitInChair, ReturnValue) == 0x000000, "Member 'RBSASChairPanelComponent_GetCanSitInChair::ReturnValue' has a wrong offset!");

// Function OPP.RBSASChairPanelComponent.ShouldFaceTV
// 0x0001 (0x0001 - 0x0000)
struct RBSASChairPanelComponent_ShouldFaceTV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASChairPanelComponent_ShouldFaceTV) == 0x000001, "Wrong alignment on RBSASChairPanelComponent_ShouldFaceTV");
static_assert(sizeof(RBSASChairPanelComponent_ShouldFaceTV) == 0x000001, "Wrong size on RBSASChairPanelComponent_ShouldFaceTV");
static_assert(offsetof(RBSASChairPanelComponent_ShouldFaceTV, ReturnValue) == 0x000000, "Member 'RBSASChairPanelComponent_ShouldFaceTV::ReturnValue' has a wrong offset!");

// Function OPP.RBSASTransitionZone.BP_ExecuteTranstion
// 0x0008 (0x0008 - 0x0000)
struct RBSASTransitionZone_BP_ExecuteTranstion final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASTransitionZone_BP_ExecuteTranstion) == 0x000008, "Wrong alignment on RBSASTransitionZone_BP_ExecuteTranstion");
static_assert(sizeof(RBSASTransitionZone_BP_ExecuteTranstion) == 0x000008, "Wrong size on RBSASTransitionZone_BP_ExecuteTranstion");
static_assert(offsetof(RBSASTransitionZone_BP_ExecuteTranstion, Player) == 0x000000, "Member 'RBSASTransitionZone_BP_ExecuteTranstion::Player' has a wrong offset!");

// Function OPP.RBSASTransitionZone.BP_SetActivated
// 0x0001 (0x0001 - 0x0000)
struct RBSASTransitionZone_BP_SetActivated final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASTransitionZone_BP_SetActivated) == 0x000001, "Wrong alignment on RBSASTransitionZone_BP_SetActivated");
static_assert(sizeof(RBSASTransitionZone_BP_SetActivated) == 0x000001, "Wrong size on RBSASTransitionZone_BP_SetActivated");
static_assert(offsetof(RBSASTransitionZone_BP_SetActivated, bActivated) == 0x000000, "Member 'RBSASTransitionZone_BP_SetActivated::bActivated' has a wrong offset!");

// Function OPP.RBSASTransitionZone.BP_SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBSASTransitionZone_BP_SetEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASTransitionZone_BP_SetEnabled) == 0x000001, "Wrong alignment on RBSASTransitionZone_BP_SetEnabled");
static_assert(sizeof(RBSASTransitionZone_BP_SetEnabled) == 0x000001, "Wrong size on RBSASTransitionZone_BP_SetEnabled");
static_assert(offsetof(RBSASTransitionZone_BP_SetEnabled, bEnabled) == 0x000000, "Member 'RBSASTransitionZone_BP_SetEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBSASTransitionZone.IsSASDoor
// 0x0001 (0x0001 - 0x0000)
struct RBSASTransitionZone_IsSASDoor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASTransitionZone_IsSASDoor) == 0x000001, "Wrong alignment on RBSASTransitionZone_IsSASDoor");
static_assert(sizeof(RBSASTransitionZone_IsSASDoor) == 0x000001, "Wrong size on RBSASTransitionZone_IsSASDoor");
static_assert(offsetof(RBSASTransitionZone_IsSASDoor, ReturnValue) == 0x000000, "Member 'RBSASTransitionZone_IsSASDoor::ReturnValue' has a wrong offset!");

// Function OPP.RBSASPlayerStartTransitionZone.BP_ExecuteTransitionOnPlayersInside
// 0x0010 (0x0010 - 0x0000)
struct RBSASPlayerStartTransitionZone_BP_ExecuteTransitionOnPlayersInside final
{
public:
	class AVolume*                                Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSASPlayerStartTransitionZone_BP_ExecuteTransitionOnPlayersInside) == 0x000008, "Wrong alignment on RBSASPlayerStartTransitionZone_BP_ExecuteTransitionOnPlayersInside");
static_assert(sizeof(RBSASPlayerStartTransitionZone_BP_ExecuteTransitionOnPlayersInside) == 0x000010, "Wrong size on RBSASPlayerStartTransitionZone_BP_ExecuteTransitionOnPlayersInside");
static_assert(offsetof(RBSASPlayerStartTransitionZone_BP_ExecuteTransitionOnPlayersInside, Volume) == 0x000000, "Member 'RBSASPlayerStartTransitionZone_BP_ExecuteTransitionOnPlayersInside::Volume' has a wrong offset!");
static_assert(offsetof(RBSASPlayerStartTransitionZone_BP_ExecuteTransitionOnPlayersInside, ReturnValue) == 0x000008, "Member 'RBSASPlayerStartTransitionZone_BP_ExecuteTransitionOnPlayersInside::ReturnValue' has a wrong offset!");

// Function OPP.RBTimedBreadcrumb.BP_OnNeedsActivation
// 0x0001 (0x0001 - 0x0000)
struct RBTimedBreadcrumb_BP_OnNeedsActivation final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTimedBreadcrumb_BP_OnNeedsActivation) == 0x000001, "Wrong alignment on RBTimedBreadcrumb_BP_OnNeedsActivation");
static_assert(sizeof(RBTimedBreadcrumb_BP_OnNeedsActivation) == 0x000001, "Wrong size on RBTimedBreadcrumb_BP_OnNeedsActivation");
static_assert(offsetof(RBTimedBreadcrumb_BP_OnNeedsActivation, bActivated) == 0x000000, "Member 'RBTimedBreadcrumb_BP_OnNeedsActivation::bActivated' has a wrong offset!");

// Function OPP.RBTimedBreadcrumb.Multicast_OnWrongSwitchUsed
// 0x0008 (0x0008 - 0x0000)
struct RBTimedBreadcrumb_Multicast_OnWrongSwitchUsed final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTimedBreadcrumb_Multicast_OnWrongSwitchUsed) == 0x000008, "Wrong alignment on RBTimedBreadcrumb_Multicast_OnWrongSwitchUsed");
static_assert(sizeof(RBTimedBreadcrumb_Multicast_OnWrongSwitchUsed) == 0x000008, "Wrong size on RBTimedBreadcrumb_Multicast_OnWrongSwitchUsed");
static_assert(offsetof(RBTimedBreadcrumb_Multicast_OnWrongSwitchUsed, Player) == 0x000000, "Member 'RBTimedBreadcrumb_Multicast_OnWrongSwitchUsed::Player' has a wrong offset!");

// Function OPP.RBSASTube.BP_ForceAutoDoorState
// 0x0001 (0x0001 - 0x0000)
struct RBSASTube_BP_ForceAutoDoorState final
{
public:
	EAutoDoorState                                InDoorState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASTube_BP_ForceAutoDoorState) == 0x000001, "Wrong alignment on RBSASTube_BP_ForceAutoDoorState");
static_assert(sizeof(RBSASTube_BP_ForceAutoDoorState) == 0x000001, "Wrong size on RBSASTube_BP_ForceAutoDoorState");
static_assert(offsetof(RBSASTube_BP_ForceAutoDoorState, InDoorState) == 0x000000, "Member 'RBSASTube_BP_ForceAutoDoorState::InDoorState' has a wrong offset!");

// Function OPP.RBSASTube.OnComponentBoxBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBSASTube_OnComponentBoxBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2355[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASTube_OnComponentBoxBeginOverlap) == 0x000008, "Wrong alignment on RBSASTube_OnComponentBoxBeginOverlap");
static_assert(sizeof(RBSASTube_OnComponentBoxBeginOverlap) == 0x0000A8, "Wrong size on RBSASTube_OnComponentBoxBeginOverlap");
static_assert(offsetof(RBSASTube_OnComponentBoxBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBSASTube_OnComponentBoxBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentBoxBeginOverlap, OtherActor) == 0x000008, "Member 'RBSASTube_OnComponentBoxBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentBoxBeginOverlap, OtherComp) == 0x000010, "Member 'RBSASTube_OnComponentBoxBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentBoxBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBSASTube_OnComponentBoxBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentBoxBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBSASTube_OnComponentBoxBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentBoxBeginOverlap, SweepResult) == 0x000020, "Member 'RBSASTube_OnComponentBoxBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBSASTube.OnComponentCapsuleBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBSASTube_OnComponentCapsuleBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2356[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASTube_OnComponentCapsuleBeginOverlap) == 0x000008, "Wrong alignment on RBSASTube_OnComponentCapsuleBeginOverlap");
static_assert(sizeof(RBSASTube_OnComponentCapsuleBeginOverlap) == 0x0000A8, "Wrong size on RBSASTube_OnComponentCapsuleBeginOverlap");
static_assert(offsetof(RBSASTube_OnComponentCapsuleBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBSASTube_OnComponentCapsuleBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentCapsuleBeginOverlap, OtherActor) == 0x000008, "Member 'RBSASTube_OnComponentCapsuleBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentCapsuleBeginOverlap, OtherComp) == 0x000010, "Member 'RBSASTube_OnComponentCapsuleBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentCapsuleBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBSASTube_OnComponentCapsuleBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentCapsuleBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBSASTube_OnComponentCapsuleBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentCapsuleBeginOverlap, SweepResult) == 0x000020, "Member 'RBSASTube_OnComponentCapsuleBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBSASTube.OnComponentCapsuleEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBSASTube_OnComponentCapsuleEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2357[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSASTube_OnComponentCapsuleEndOverlap) == 0x000008, "Wrong alignment on RBSASTube_OnComponentCapsuleEndOverlap");
static_assert(sizeof(RBSASTube_OnComponentCapsuleEndOverlap) == 0x000020, "Wrong size on RBSASTube_OnComponentCapsuleEndOverlap");
static_assert(offsetof(RBSASTube_OnComponentCapsuleEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBSASTube_OnComponentCapsuleEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentCapsuleEndOverlap, OtherActor) == 0x000008, "Member 'RBSASTube_OnComponentCapsuleEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentCapsuleEndOverlap, OtherComp) == 0x000010, "Member 'RBSASTube_OnComponentCapsuleEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBSASTube_OnComponentCapsuleEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBSASTube_OnComponentCapsuleEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBSASTube.GetDoorState
// 0x0001 (0x0001 - 0x0000)
struct RBSASTube_GetDoorState final
{
public:
	EAutoDoorState                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSASTube_GetDoorState) == 0x000001, "Wrong alignment on RBSASTube_GetDoorState");
static_assert(sizeof(RBSASTube_GetDoorState) == 0x000001, "Wrong size on RBSASTube_GetDoorState");
static_assert(offsetof(RBSASTube_GetDoorState, ReturnValue) == 0x000000, "Member 'RBSASTube_GetDoorState::ReturnValue' has a wrong offset!");

// Function OPP.RBSaveGameManager.AsyncLoadGameUserPreferencesDone
// 0x0020 (0x0020 - 0x0000)
struct RBSaveGameManager_AsyncLoadGameUserPreferencesDone final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235A[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              SaveGame;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSaveGameManager_AsyncLoadGameUserPreferencesDone) == 0x000008, "Wrong alignment on RBSaveGameManager_AsyncLoadGameUserPreferencesDone");
static_assert(sizeof(RBSaveGameManager_AsyncLoadGameUserPreferencesDone) == 0x000020, "Wrong size on RBSaveGameManager_AsyncLoadGameUserPreferencesDone");
static_assert(offsetof(RBSaveGameManager_AsyncLoadGameUserPreferencesDone, SlotName) == 0x000000, "Member 'RBSaveGameManager_AsyncLoadGameUserPreferencesDone::SlotName' has a wrong offset!");
static_assert(offsetof(RBSaveGameManager_AsyncLoadGameUserPreferencesDone, UserIndex) == 0x000010, "Member 'RBSaveGameManager_AsyncLoadGameUserPreferencesDone::UserIndex' has a wrong offset!");
static_assert(offsetof(RBSaveGameManager_AsyncLoadGameUserPreferencesDone, SaveGame) == 0x000018, "Member 'RBSaveGameManager_AsyncLoadGameUserPreferencesDone::SaveGame' has a wrong offset!");

// Function OPP.RBSaveGameManager.AsyncLoadProfileDone
// 0x0020 (0x0020 - 0x0000)
struct RBSaveGameManager_AsyncLoadProfileDone final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              SaveGame;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSaveGameManager_AsyncLoadProfileDone) == 0x000008, "Wrong alignment on RBSaveGameManager_AsyncLoadProfileDone");
static_assert(sizeof(RBSaveGameManager_AsyncLoadProfileDone) == 0x000020, "Wrong size on RBSaveGameManager_AsyncLoadProfileDone");
static_assert(offsetof(RBSaveGameManager_AsyncLoadProfileDone, SlotName) == 0x000000, "Member 'RBSaveGameManager_AsyncLoadProfileDone::SlotName' has a wrong offset!");
static_assert(offsetof(RBSaveGameManager_AsyncLoadProfileDone, UserIndex) == 0x000010, "Member 'RBSaveGameManager_AsyncLoadProfileDone::UserIndex' has a wrong offset!");
static_assert(offsetof(RBSaveGameManager_AsyncLoadProfileDone, SaveGame) == 0x000018, "Member 'RBSaveGameManager_AsyncLoadProfileDone::SaveGame' has a wrong offset!");

// Function OPP.RBSaveGameManager.AsyncWriteGameUserPreferencesDone
// 0x0018 (0x0018 - 0x0000)
struct RBSaveGameManager_AsyncWriteGameUserPreferencesDone final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235C[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSaveGameManager_AsyncWriteGameUserPreferencesDone) == 0x000008, "Wrong alignment on RBSaveGameManager_AsyncWriteGameUserPreferencesDone");
static_assert(sizeof(RBSaveGameManager_AsyncWriteGameUserPreferencesDone) == 0x000018, "Wrong size on RBSaveGameManager_AsyncWriteGameUserPreferencesDone");
static_assert(offsetof(RBSaveGameManager_AsyncWriteGameUserPreferencesDone, SlotName) == 0x000000, "Member 'RBSaveGameManager_AsyncWriteGameUserPreferencesDone::SlotName' has a wrong offset!");
static_assert(offsetof(RBSaveGameManager_AsyncWriteGameUserPreferencesDone, UserIndex) == 0x000010, "Member 'RBSaveGameManager_AsyncWriteGameUserPreferencesDone::UserIndex' has a wrong offset!");
static_assert(offsetof(RBSaveGameManager_AsyncWriteGameUserPreferencesDone, bSuccess) == 0x000014, "Member 'RBSaveGameManager_AsyncWriteGameUserPreferencesDone::bSuccess' has a wrong offset!");

// Function OPP.RBSaveGameManager.AsyncWriteProfileDone
// 0x0018 (0x0018 - 0x0000)
struct RBSaveGameManager_AsyncWriteProfileDone final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235D[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSaveGameManager_AsyncWriteProfileDone) == 0x000008, "Wrong alignment on RBSaveGameManager_AsyncWriteProfileDone");
static_assert(sizeof(RBSaveGameManager_AsyncWriteProfileDone) == 0x000018, "Wrong size on RBSaveGameManager_AsyncWriteProfileDone");
static_assert(offsetof(RBSaveGameManager_AsyncWriteProfileDone, SlotName) == 0x000000, "Member 'RBSaveGameManager_AsyncWriteProfileDone::SlotName' has a wrong offset!");
static_assert(offsetof(RBSaveGameManager_AsyncWriteProfileDone, UserIndex) == 0x000010, "Member 'RBSaveGameManager_AsyncWriteProfileDone::UserIndex' has a wrong offset!");
static_assert(offsetof(RBSaveGameManager_AsyncWriteProfileDone, bSuccess) == 0x000014, "Member 'RBSaveGameManager_AsyncWriteProfileDone::bSuccess' has a wrong offset!");

// Function OPP.RBSawPanelComponent.OnSlavePanelPawnInteractingChanged
// 0x0010 (0x0010 - 0x0000)
struct RBSawPanelComponent_OnSlavePanelPawnInteractingChanged final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                Pawn;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSawPanelComponent_OnSlavePanelPawnInteractingChanged) == 0x000008, "Wrong alignment on RBSawPanelComponent_OnSlavePanelPawnInteractingChanged");
static_assert(sizeof(RBSawPanelComponent_OnSlavePanelPawnInteractingChanged) == 0x000010, "Wrong size on RBSawPanelComponent_OnSlavePanelPawnInteractingChanged");
static_assert(offsetof(RBSawPanelComponent_OnSlavePanelPawnInteractingChanged, Panel) == 0x000000, "Member 'RBSawPanelComponent_OnSlavePanelPawnInteractingChanged::Panel' has a wrong offset!");
static_assert(offsetof(RBSawPanelComponent_OnSlavePanelPawnInteractingChanged, Pawn) == 0x000008, "Member 'RBSawPanelComponent_OnSlavePanelPawnInteractingChanged::Pawn' has a wrong offset!");

// Function OPP.RBSawPanelComponent.BP_GetPawnPushingIntentRatio
// 0x0004 (0x0004 - 0x0000)
struct RBSawPanelComponent_BP_GetPawnPushingIntentRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSawPanelComponent_BP_GetPawnPushingIntentRatio) == 0x000004, "Wrong alignment on RBSawPanelComponent_BP_GetPawnPushingIntentRatio");
static_assert(sizeof(RBSawPanelComponent_BP_GetPawnPushingIntentRatio) == 0x000004, "Wrong size on RBSawPanelComponent_BP_GetPawnPushingIntentRatio");
static_assert(offsetof(RBSawPanelComponent_BP_GetPawnPushingIntentRatio, ReturnValue) == 0x000000, "Member 'RBSawPanelComponent_BP_GetPawnPushingIntentRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBSawPanelComponent.BP_GetSawAccumulatedDistance
// 0x0004 (0x0004 - 0x0000)
struct RBSawPanelComponent_BP_GetSawAccumulatedDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSawPanelComponent_BP_GetSawAccumulatedDistance) == 0x000004, "Wrong alignment on RBSawPanelComponent_BP_GetSawAccumulatedDistance");
static_assert(sizeof(RBSawPanelComponent_BP_GetSawAccumulatedDistance) == 0x000004, "Wrong size on RBSawPanelComponent_BP_GetSawAccumulatedDistance");
static_assert(offsetof(RBSawPanelComponent_BP_GetSawAccumulatedDistance, ReturnValue) == 0x000000, "Member 'RBSawPanelComponent_BP_GetSawAccumulatedDistance::ReturnValue' has a wrong offset!");

// Function OPP.RBSawPanelComponent.BP_GetSawCurrentOffset
// 0x0004 (0x0004 - 0x0000)
struct RBSawPanelComponent_BP_GetSawCurrentOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSawPanelComponent_BP_GetSawCurrentOffset) == 0x000004, "Wrong alignment on RBSawPanelComponent_BP_GetSawCurrentOffset");
static_assert(sizeof(RBSawPanelComponent_BP_GetSawCurrentOffset) == 0x000004, "Wrong size on RBSawPanelComponent_BP_GetSawCurrentOffset");
static_assert(offsetof(RBSawPanelComponent_BP_GetSawCurrentOffset, ReturnValue) == 0x000000, "Member 'RBSawPanelComponent_BP_GetSawCurrentOffset::ReturnValue' has a wrong offset!");

// Function OPP.RBSawPanelComponent.BP_GetSawMovingSpeed
// 0x0004 (0x0004 - 0x0000)
struct RBSawPanelComponent_BP_GetSawMovingSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSawPanelComponent_BP_GetSawMovingSpeed) == 0x000004, "Wrong alignment on RBSawPanelComponent_BP_GetSawMovingSpeed");
static_assert(sizeof(RBSawPanelComponent_BP_GetSawMovingSpeed) == 0x000004, "Wrong size on RBSawPanelComponent_BP_GetSawMovingSpeed");
static_assert(offsetof(RBSawPanelComponent_BP_GetSawMovingSpeed, ReturnValue) == 0x000000, "Member 'RBSawPanelComponent_BP_GetSawMovingSpeed::ReturnValue' has a wrong offset!");

// Function OPP.RBSawPanelComponent.BP_GetSawOffsetRatioForSide
// 0x0004 (0x0004 - 0x0000)
struct RBSawPanelComponent_BP_GetSawOffsetRatioForSide final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSawPanelComponent_BP_GetSawOffsetRatioForSide) == 0x000004, "Wrong alignment on RBSawPanelComponent_BP_GetSawOffsetRatioForSide");
static_assert(sizeof(RBSawPanelComponent_BP_GetSawOffsetRatioForSide) == 0x000004, "Wrong size on RBSawPanelComponent_BP_GetSawOffsetRatioForSide");
static_assert(offsetof(RBSawPanelComponent_BP_GetSawOffsetRatioForSide, ReturnValue) == 0x000000, "Member 'RBSawPanelComponent_BP_GetSawOffsetRatioForSide::ReturnValue' has a wrong offset!");

// Function OPP.RBSawPanelComponent.BP_GetSawPushDelta
// 0x0004 (0x0004 - 0x0000)
struct RBSawPanelComponent_BP_GetSawPushDelta final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSawPanelComponent_BP_GetSawPushDelta) == 0x000004, "Wrong alignment on RBSawPanelComponent_BP_GetSawPushDelta");
static_assert(sizeof(RBSawPanelComponent_BP_GetSawPushDelta) == 0x000004, "Wrong size on RBSawPanelComponent_BP_GetSawPushDelta");
static_assert(offsetof(RBSawPanelComponent_BP_GetSawPushDelta, ReturnValue) == 0x000000, "Member 'RBSawPanelComponent_BP_GetSawPushDelta::ReturnValue' has a wrong offset!");

// Function OPP.RBSawPanelComponent.BP_IsSawConsideredMoving
// 0x0001 (0x0001 - 0x0000)
struct RBSawPanelComponent_BP_IsSawConsideredMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSawPanelComponent_BP_IsSawConsideredMoving) == 0x000001, "Wrong alignment on RBSawPanelComponent_BP_IsSawConsideredMoving");
static_assert(sizeof(RBSawPanelComponent_BP_IsSawConsideredMoving) == 0x000001, "Wrong size on RBSawPanelComponent_BP_IsSawConsideredMoving");
static_assert(offsetof(RBSawPanelComponent_BP_IsSawConsideredMoving, ReturnValue) == 0x000000, "Member 'RBSawPanelComponent_BP_IsSawConsideredMoving::ReturnValue' has a wrong offset!");

// Function OPP.RBSawPanelComponent.IsMaster
// 0x0001 (0x0001 - 0x0000)
struct RBSawPanelComponent_IsMaster final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSawPanelComponent_IsMaster) == 0x000001, "Wrong alignment on RBSawPanelComponent_IsMaster");
static_assert(sizeof(RBSawPanelComponent_IsMaster) == 0x000001, "Wrong size on RBSawPanelComponent_IsMaster");
static_assert(offsetof(RBSawPanelComponent_IsMaster, ReturnValue) == 0x000000, "Member 'RBSawPanelComponent_IsMaster::ReturnValue' has a wrong offset!");

// Function OPP.RBTortureObjectiveCoordinator.OnPanelActiveChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct RBTortureObjectiveCoordinator_OnPanelActiveChangedEvent final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTortureObjectiveCoordinator_OnPanelActiveChangedEvent) == 0x000008, "Wrong alignment on RBTortureObjectiveCoordinator_OnPanelActiveChangedEvent");
static_assert(sizeof(RBTortureObjectiveCoordinator_OnPanelActiveChangedEvent) == 0x000010, "Wrong size on RBTortureObjectiveCoordinator_OnPanelActiveChangedEvent");
static_assert(offsetof(RBTortureObjectiveCoordinator_OnPanelActiveChangedEvent, Panel) == 0x000000, "Member 'RBTortureObjectiveCoordinator_OnPanelActiveChangedEvent::Panel' has a wrong offset!");
static_assert(offsetof(RBTortureObjectiveCoordinator_OnPanelActiveChangedEvent, PawnInteracting) == 0x000008, "Member 'RBTortureObjectiveCoordinator_OnPanelActiveChangedEvent::PawnInteracting' has a wrong offset!");

// Function OPP.RBTortureObjectiveCoordinator.OnPanelPawnInteractingChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct RBTortureObjectiveCoordinator_OnPanelPawnInteractingChangedEvent final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTortureObjectiveCoordinator_OnPanelPawnInteractingChangedEvent) == 0x000008, "Wrong alignment on RBTortureObjectiveCoordinator_OnPanelPawnInteractingChangedEvent");
static_assert(sizeof(RBTortureObjectiveCoordinator_OnPanelPawnInteractingChangedEvent) == 0x000010, "Wrong size on RBTortureObjectiveCoordinator_OnPanelPawnInteractingChangedEvent");
static_assert(offsetof(RBTortureObjectiveCoordinator_OnPanelPawnInteractingChangedEvent, Panel) == 0x000000, "Member 'RBTortureObjectiveCoordinator_OnPanelPawnInteractingChangedEvent::Panel' has a wrong offset!");
static_assert(offsetof(RBTortureObjectiveCoordinator_OnPanelPawnInteractingChangedEvent, PawnInteracting) == 0x000008, "Member 'RBTortureObjectiveCoordinator_OnPanelPawnInteractingChangedEvent::PawnInteracting' has a wrong offset!");

// Function OPP.RBTortureObjectiveCoordinator.OnRep_TortureRoom
// 0x0008 (0x0008 - 0x0000)
struct RBTortureObjectiveCoordinator_OnRep_TortureRoom final
{
public:
	class ARBTortureRoom*                         OldTortureRoom;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTortureObjectiveCoordinator_OnRep_TortureRoom) == 0x000008, "Wrong alignment on RBTortureObjectiveCoordinator_OnRep_TortureRoom");
static_assert(sizeof(RBTortureObjectiveCoordinator_OnRep_TortureRoom) == 0x000008, "Wrong size on RBTortureObjectiveCoordinator_OnRep_TortureRoom");
static_assert(offsetof(RBTortureObjectiveCoordinator_OnRep_TortureRoom, OldTortureRoom) == 0x000000, "Member 'RBTortureObjectiveCoordinator_OnRep_TortureRoom::OldTortureRoom' has a wrong offset!");

// Function OPP.RBTortureObjectiveCoordinator.OnTortureRoomCompleted
// 0x0008 (0x0008 - 0x0000)
struct RBTortureObjectiveCoordinator_OnTortureRoomCompleted final
{
public:
	class ARBTortureRoom*                         Param_TortureRoom;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTortureObjectiveCoordinator_OnTortureRoomCompleted) == 0x000008, "Wrong alignment on RBTortureObjectiveCoordinator_OnTortureRoomCompleted");
static_assert(sizeof(RBTortureObjectiveCoordinator_OnTortureRoomCompleted) == 0x000008, "Wrong size on RBTortureObjectiveCoordinator_OnTortureRoomCompleted");
static_assert(offsetof(RBTortureObjectiveCoordinator_OnTortureRoomCompleted, Param_TortureRoom) == 0x000000, "Member 'RBTortureObjectiveCoordinator_OnTortureRoomCompleted::Param_TortureRoom' has a wrong offset!");

// Function OPP.RBTortureObjectiveCoordinator.OnTortureRoomCurrentMeterChanged
// 0x0008 (0x0008 - 0x0000)
struct RBTortureObjectiveCoordinator_OnTortureRoomCurrentMeterChanged final
{
public:
	class ARBTortureRoom*                         Param_TortureRoom;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTortureObjectiveCoordinator_OnTortureRoomCurrentMeterChanged) == 0x000008, "Wrong alignment on RBTortureObjectiveCoordinator_OnTortureRoomCurrentMeterChanged");
static_assert(sizeof(RBTortureObjectiveCoordinator_OnTortureRoomCurrentMeterChanged) == 0x000008, "Wrong size on RBTortureObjectiveCoordinator_OnTortureRoomCurrentMeterChanged");
static_assert(offsetof(RBTortureObjectiveCoordinator_OnTortureRoomCurrentMeterChanged, Param_TortureRoom) == 0x000000, "Member 'RBTortureObjectiveCoordinator_OnTortureRoomCurrentMeterChanged::Param_TortureRoom' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledBool
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledBool final
{
public:
	struct FScheduledBool                         ScheduledProperty;                                 // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235F[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledBool) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledBool");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledBool) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledBool");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledBool, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledBool::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledBool, ReturnValue) == 0x000070, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledBool::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledFloat
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledFloat final
{
public:
	struct FScheduledFloat                        ScheduledProperty;                                 // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2360[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledFloat) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledFloat");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledFloat) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledFloat");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledFloat, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledFloat::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledFloat, ReturnValue) == 0x000078, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledFloat::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledInt
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt final
{
public:
	struct FScheduledInt                          ScheduledProperty;                                 // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2361[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt, ReturnValue) == 0x000078, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledInt8
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt8 final
{
public:
	struct FScheduledInt8                         ScheduledProperty;                                 // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2362[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt8) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt8");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt8) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt8");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt8, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt8::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt8, ReturnValue) == 0x000070, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledInt8::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledTransform
// 0x0160 (0x0160 - 0x0000)
struct RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledTransform final
{
public:
	struct FScheduledTransform                    ScheduledProperty;                                 // 0x0000(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0130(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledTransform) == 0x000010, "Wrong alignment on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledTransform");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledTransform) == 0x000160, "Wrong size on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledTransform");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledTransform, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledTransform::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledTransform, ReturnValue) == 0x000130, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledTransform::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetCurrentValue_ScheduledUObject
// 0x0090 (0x0090 - 0x0000)
struct RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledUObject final
{
public:
	struct FScheduledUObject                      ScheduledProperty;                                 // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledUObject) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledUObject");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledUObject) == 0x000090, "Wrong size on RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledUObject");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledUObject, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledUObject::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledUObject, ReturnValue) == 0x000088, "Member 'RBScheduledBlueprintLibrary_GetCurrentValue_ScheduledUObject::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledBool
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_GetInitialValue_ScheduledBool final
{
public:
	struct FScheduledBool                         ScheduledProperty;                                 // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2363[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledBool) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledBool");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledBool) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledBool");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledBool, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledBool::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledBool, ReturnValue) == 0x000070, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledBool::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledFloat
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_GetInitialValue_ScheduledFloat final
{
public:
	struct FScheduledFloat                        ScheduledProperty;                                 // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2364[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledFloat) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledFloat");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledFloat) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledFloat");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledFloat, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledFloat::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledFloat, ReturnValue) == 0x000078, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledFloat::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledInt
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt final
{
public:
	struct FScheduledInt                          ScheduledProperty;                                 // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2365[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt, ReturnValue) == 0x000078, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledInt8
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt8 final
{
public:
	struct FScheduledInt8                         ScheduledProperty;                                 // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2366[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt8) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt8");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt8) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt8");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt8, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt8::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt8, ReturnValue) == 0x000070, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledInt8::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledTransform
// 0x0160 (0x0160 - 0x0000)
struct RBScheduledBlueprintLibrary_GetInitialValue_ScheduledTransform final
{
public:
	struct FScheduledTransform                    ScheduledProperty;                                 // 0x0000(0x0130)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0130(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledTransform) == 0x000010, "Wrong alignment on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledTransform");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledTransform) == 0x000160, "Wrong size on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledTransform");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledTransform, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledTransform::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledTransform, ReturnValue) == 0x000130, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledTransform::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.GetInitialValue_ScheduledUObject
// 0x0090 (0x0090 - 0x0000)
struct RBScheduledBlueprintLibrary_GetInitialValue_ScheduledUObject final
{
public:
	struct FScheduledUObject                      ScheduledProperty;                                 // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledUObject) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledUObject");
static_assert(sizeof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledUObject) == 0x000090, "Wrong size on RBScheduledBlueprintLibrary_GetInitialValue_ScheduledUObject");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledUObject, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledUObject::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_GetInitialValue_ScheduledUObject, ReturnValue) == 0x000088, "Member 'RBScheduledBlueprintLibrary_GetInitialValue_ScheduledUObject::ReturnValue' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledBool
// 0x0090 (0x0090 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledBool final
{
public:
	struct FScheduledBool                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0078(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledBool");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool) == 0x000090, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledBool");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledBool::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool, Owner) == 0x000070, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledBool::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool, InDelegate) == 0x000078, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledBool::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool, PropertyName) == 0x000088, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledBool::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledBool_Component
// 0x0090 (0x0090 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component final
{
public:
	struct FScheduledBool                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        Owner;                                             // 0x0070(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0078(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component) == 0x000090, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component, Owner) == 0x000070, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component, InDelegate) == 0x000078, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component, PropertyName) == 0x000088, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledBool_Component::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledFloat
// 0x0098 (0x0098 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledFloat final
{
public:
	struct FScheduledFloat                        ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0080(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledFloat");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat) == 0x000098, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledFloat");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledFloat::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat, Owner) == 0x000078, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledFloat::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat, InDelegate) == 0x000080, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledFloat::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat, PropertyName) == 0x000090, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledFloat::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledFloat_Component
// 0x0098 (0x0098 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component final
{
public:
	struct FScheduledFloat                        ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        Owner;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0080(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component) == 0x000098, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component, Owner) == 0x000078, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component, InDelegate) == 0x000080, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component, PropertyName) == 0x000090, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledFloat_Component::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledInt
// 0x0098 (0x0098 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledInt final
{
public:
	struct FScheduledInt                          ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0080(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledInt");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt) == 0x000098, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledInt");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt, Owner) == 0x000078, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt, InDelegate) == 0x000080, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt, PropertyName) == 0x000090, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledInt8
// 0x0090 (0x0090 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledInt8 final
{
public:
	struct FScheduledInt8                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0070(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0078(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledInt8");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8) == 0x000090, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledInt8");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt8::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8, Owner) == 0x000070, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt8::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8, InDelegate) == 0x000078, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt8::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8, PropertyName) == 0x000088, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt8::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledInt8_Component
// 0x0090 (0x0090 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component final
{
public:
	struct FScheduledInt8                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        Owner;                                             // 0x0070(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0078(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component) == 0x000090, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component, Owner) == 0x000070, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component, InDelegate) == 0x000078, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component, PropertyName) == 0x000088, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt8_Component::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledInt_Component
// 0x0098 (0x0098 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component final
{
public:
	struct FScheduledInt                          ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        Owner;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0080(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component) == 0x000098, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component, Owner) == 0x000078, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component, InDelegate) == 0x000080, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component, PropertyName) == 0x000090, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledInt_Component::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledTransform
// 0x0150 (0x0150 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledTransform final
{
public:
	struct FScheduledTransform                    ScheduledProperty;                                 // 0x0000(0x0130)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0130(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0138(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0148(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform) == 0x000010, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledTransform");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform) == 0x000150, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledTransform");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledTransform::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform, Owner) == 0x000130, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledTransform::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform, InDelegate) == 0x000138, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledTransform::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform, PropertyName) == 0x000148, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledTransform::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledTransform_Component
// 0x0150 (0x0150 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component final
{
public:
	struct FScheduledTransform                    ScheduledProperty;                                 // 0x0000(0x0130)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        Owner;                                             // 0x0130(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0138(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0148(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component) == 0x000010, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component) == 0x000150, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component, Owner) == 0x000130, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component, InDelegate) == 0x000138, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component, PropertyName) == 0x000148, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledTransform_Component::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledUObject
// 0x00A8 (0x00A8 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledUObject final
{
public:
	struct FScheduledUObject                      ScheduledProperty;                                 // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0090(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledUObject");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject) == 0x0000A8, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledUObject");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledUObject::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject, Owner) == 0x000088, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledUObject::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject, InDelegate) == 0x000090, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledUObject::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject, PropertyName) == 0x0000A0, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledUObject::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.Initialize_ScheduledUObject_Component
// 0x00A8 (0x00A8 - 0x0000)
struct RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component final
{
public:
	struct FScheduledUObject                      ScheduledProperty;                                 // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        Owner;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EScheduledPropertyValueChangedType ChangedType)> InDelegate;                                        // 0x0090(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component");
static_assert(sizeof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component) == 0x0000A8, "Wrong size on RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component, Owner) == 0x000088, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component::Owner' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component, InDelegate) == 0x000090, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component::InDelegate' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component, PropertyName) == 0x0000A0, "Member 'RBScheduledBlueprintLibrary_Initialize_ScheduledUObject_Component::PropertyName' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledBool
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_ScheduleValue_ScheduledBool final
{
public:
	struct FScheduledBool                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2367[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledBool) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledBool");
static_assert(sizeof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledBool) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledBool");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledBool, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledBool::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledBool, Value) == 0x000070, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledBool::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledFloat
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_ScheduleValue_ScheduledFloat final
{
public:
	struct FScheduledFloat                        ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2368[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledFloat) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledFloat");
static_assert(sizeof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledFloat) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledFloat");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledFloat, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledFloat::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledFloat, Value) == 0x000078, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledFloat::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledInt
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt final
{
public:
	struct FScheduledInt                          ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2369[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt");
static_assert(sizeof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt, Value) == 0x000078, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledInt8
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt8 final
{
public:
	struct FScheduledInt8                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236A[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt8) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt8");
static_assert(sizeof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt8) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt8");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt8, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt8::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt8, Value) == 0x000070, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledInt8::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledTransform
// 0x0160 (0x0160 - 0x0000)
struct RBScheduledBlueprintLibrary_ScheduleValue_ScheduledTransform final
{
public:
	struct FScheduledTransform                    ScheduledProperty;                                 // 0x0000(0x0130)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             Value;                                             // 0x0130(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledTransform) == 0x000010, "Wrong alignment on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledTransform");
static_assert(sizeof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledTransform) == 0x000160, "Wrong size on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledTransform");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledTransform, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledTransform::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledTransform, Value) == 0x000130, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledTransform::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.ScheduleValue_ScheduledUObject
// 0x0090 (0x0090 - 0x0000)
struct RBScheduledBlueprintLibrary_ScheduleValue_ScheduledUObject final
{
public:
	struct FScheduledUObject                      ScheduledProperty;                                 // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                Value;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledUObject) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledUObject");
static_assert(sizeof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledUObject) == 0x000090, "Wrong size on RBScheduledBlueprintLibrary_ScheduleValue_ScheduledUObject");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledUObject, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledUObject::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_ScheduleValue_ScheduledUObject, Value) == 0x000088, "Member 'RBScheduledBlueprintLibrary_ScheduleValue_ScheduledUObject::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledBool
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_SetInitialValue_ScheduledBool final
{
public:
	struct FScheduledBool                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236B[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledBool) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledBool");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledBool) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledBool");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledBool, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledBool::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledBool, Value) == 0x000070, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledBool::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledFloat
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_SetInitialValue_ScheduledFloat final
{
public:
	struct FScheduledFloat                        ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236C[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledFloat) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledFloat");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledFloat) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledFloat");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledFloat, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledFloat::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledFloat, Value) == 0x000078, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledFloat::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledInt
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt final
{
public:
	struct FScheduledInt                          ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236D[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt, Value) == 0x000078, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledInt8
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt8 final
{
public:
	struct FScheduledInt8                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236E[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt8) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt8");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt8) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt8");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt8, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt8::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt8, Value) == 0x000070, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledInt8::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledTransform
// 0x0160 (0x0160 - 0x0000)
struct RBScheduledBlueprintLibrary_SetInitialValue_ScheduledTransform final
{
public:
	struct FScheduledTransform                    ScheduledProperty;                                 // 0x0000(0x0130)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             Value;                                             // 0x0130(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledTransform) == 0x000010, "Wrong alignment on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledTransform");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledTransform) == 0x000160, "Wrong size on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledTransform");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledTransform, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledTransform::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledTransform, Value) == 0x000130, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledTransform::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetInitialValue_ScheduledUObject
// 0x0090 (0x0090 - 0x0000)
struct RBScheduledBlueprintLibrary_SetInitialValue_ScheduledUObject final
{
public:
	struct FScheduledUObject                      ScheduledProperty;                                 // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                Value;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledUObject) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledUObject");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledUObject) == 0x000090, "Wrong size on RBScheduledBlueprintLibrary_SetInitialValue_ScheduledUObject");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledUObject, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledUObject::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetInitialValue_ScheduledUObject, Value) == 0x000088, "Member 'RBScheduledBlueprintLibrary_SetInitialValue_ScheduledUObject::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledBool
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_SetValue_ScheduledBool final
{
public:
	struct FScheduledBool                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_236F[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetValue_ScheduledBool) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetValue_ScheduledBool");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetValue_ScheduledBool) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_SetValue_ScheduledBool");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledBool, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledBool::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledBool, Value) == 0x000070, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledBool::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledFloat
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_SetValue_ScheduledFloat final
{
public:
	struct FScheduledFloat                        ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2370[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetValue_ScheduledFloat) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetValue_ScheduledFloat");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetValue_ScheduledFloat) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_SetValue_ScheduledFloat");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledFloat, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledFloat::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledFloat, Value) == 0x000078, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledFloat::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledInt
// 0x0080 (0x0080 - 0x0000)
struct RBScheduledBlueprintLibrary_SetValue_ScheduledInt final
{
public:
	struct FScheduledInt                          ScheduledProperty;                                 // 0x0000(0x0078)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2371[0x4];                                     // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetValue_ScheduledInt) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetValue_ScheduledInt");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetValue_ScheduledInt) == 0x000080, "Wrong size on RBScheduledBlueprintLibrary_SetValue_ScheduledInt");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledInt, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledInt::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledInt, Value) == 0x000078, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledInt::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledInt8
// 0x0078 (0x0078 - 0x0000)
struct RBScheduledBlueprintLibrary_SetValue_ScheduledInt8 final
{
public:
	struct FScheduledInt8                         ScheduledProperty;                                 // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2372[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetValue_ScheduledInt8) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetValue_ScheduledInt8");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetValue_ScheduledInt8) == 0x000078, "Wrong size on RBScheduledBlueprintLibrary_SetValue_ScheduledInt8");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledInt8, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledInt8::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledInt8, Value) == 0x000070, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledInt8::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledTransform
// 0x0160 (0x0160 - 0x0000)
struct RBScheduledBlueprintLibrary_SetValue_ScheduledTransform final
{
public:
	struct FScheduledTransform                    ScheduledProperty;                                 // 0x0000(0x0130)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FTransform                             Value;                                             // 0x0130(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetValue_ScheduledTransform) == 0x000010, "Wrong alignment on RBScheduledBlueprintLibrary_SetValue_ScheduledTransform");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetValue_ScheduledTransform) == 0x000160, "Wrong size on RBScheduledBlueprintLibrary_SetValue_ScheduledTransform");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledTransform, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledTransform::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledTransform, Value) == 0x000130, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledTransform::Value' has a wrong offset!");

// Function OPP.RBScheduledBlueprintLibrary.SetValue_ScheduledUObject
// 0x0090 (0x0090 - 0x0000)
struct RBScheduledBlueprintLibrary_SetValue_ScheduledUObject final
{
public:
	struct FScheduledUObject                      ScheduledProperty;                                 // 0x0000(0x0088)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UObject*                                Value;                                             // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScheduledBlueprintLibrary_SetValue_ScheduledUObject) == 0x000008, "Wrong alignment on RBScheduledBlueprintLibrary_SetValue_ScheduledUObject");
static_assert(sizeof(RBScheduledBlueprintLibrary_SetValue_ScheduledUObject) == 0x000090, "Wrong size on RBScheduledBlueprintLibrary_SetValue_ScheduledUObject");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledUObject, ScheduledProperty) == 0x000000, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledUObject::ScheduledProperty' has a wrong offset!");
static_assert(offsetof(RBScheduledBlueprintLibrary_SetValue_ScheduledUObject, Value) == 0x000088, "Member 'RBScheduledBlueprintLibrary_SetValue_ScheduledUObject::Value' has a wrong offset!");

// Function OPP.RBTradeable.IsTradeable
// 0x0001 (0x0001 - 0x0000)
struct RBTradeable_IsTradeable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTradeable_IsTradeable) == 0x000001, "Wrong alignment on RBTradeable_IsTradeable");
static_assert(sizeof(RBTradeable_IsTradeable) == 0x000001, "Wrong size on RBTradeable_IsTradeable");
static_assert(offsetof(RBTradeable_IsTradeable, ReturnValue) == 0x000000, "Member 'RBTradeable_IsTradeable::ReturnValue' has a wrong offset!");

// Function OPP.RBScoringConfig.FilterScoringEvents
// 0x0028 (0x0028 - 0x0000)
struct RBScoringConfig_FilterScoringEvents final
{
public:
	TArray<struct FRecordedScoringEvent>          ScoringEvents;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         MaxEvents;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2375[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRecordedScoringEvent>          ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScoringConfig_FilterScoringEvents) == 0x000008, "Wrong alignment on RBScoringConfig_FilterScoringEvents");
static_assert(sizeof(RBScoringConfig_FilterScoringEvents) == 0x000028, "Wrong size on RBScoringConfig_FilterScoringEvents");
static_assert(offsetof(RBScoringConfig_FilterScoringEvents, ScoringEvents) == 0x000000, "Member 'RBScoringConfig_FilterScoringEvents::ScoringEvents' has a wrong offset!");
static_assert(offsetof(RBScoringConfig_FilterScoringEvents, MaxEvents) == 0x000010, "Member 'RBScoringConfig_FilterScoringEvents::MaxEvents' has a wrong offset!");
static_assert(offsetof(RBScoringConfig_FilterScoringEvents, ReturnValue) == 0x000018, "Member 'RBScoringConfig_FilterScoringEvents::ReturnValue' has a wrong offset!");

// Function OPP.RBScoringConfig.GetScoringRule
// 0x0060 (0x0060 - 0x0000)
struct RBScoringConfig_GetScoringRule final
{
public:
	class FName                                   RuleId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBScoringRuleRow                      ReturnValue;                                       // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScoringConfig_GetScoringRule) == 0x000008, "Wrong alignment on RBScoringConfig_GetScoringRule");
static_assert(sizeof(RBScoringConfig_GetScoringRule) == 0x000060, "Wrong size on RBScoringConfig_GetScoringRule");
static_assert(offsetof(RBScoringConfig_GetScoringRule, RuleId) == 0x000000, "Member 'RBScoringConfig_GetScoringRule::RuleId' has a wrong offset!");
static_assert(offsetof(RBScoringConfig_GetScoringRule, ReturnValue) == 0x000008, "Member 'RBScoringConfig_GetScoringRule::ReturnValue' has a wrong offset!");

// Function OPP.RBScoringConfig.GetTextValue
// 0x0040 (0x0040 - 0x0000)
struct RBScoringConfig_GetTextValue final
{
public:
	struct FRecordedScoringEvent                  ScoringEvent;                                      // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TrialSeed;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoringEventIndex;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2376[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScoringConfig_GetTextValue) == 0x000008, "Wrong alignment on RBScoringConfig_GetTextValue");
static_assert(sizeof(RBScoringConfig_GetTextValue) == 0x000040, "Wrong size on RBScoringConfig_GetTextValue");
static_assert(offsetof(RBScoringConfig_GetTextValue, ScoringEvent) == 0x000000, "Member 'RBScoringConfig_GetTextValue::ScoringEvent' has a wrong offset!");
static_assert(offsetof(RBScoringConfig_GetTextValue, TrialSeed) == 0x00001C, "Member 'RBScoringConfig_GetTextValue::TrialSeed' has a wrong offset!");
static_assert(offsetof(RBScoringConfig_GetTextValue, ScoringEventIndex) == 0x000020, "Member 'RBScoringConfig_GetTextValue::ScoringEventIndex' has a wrong offset!");
static_assert(offsetof(RBScoringConfig_GetTextValue, ReturnValue) == 0x000028, "Member 'RBScoringConfig_GetTextValue::ReturnValue' has a wrong offset!");

// Function OPP.RBScriptedAnimStation.BP_SetStationHidden
// 0x0001 (0x0001 - 0x0000)
struct RBScriptedAnimStation_BP_SetStationHidden final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScriptedAnimStation_BP_SetStationHidden) == 0x000001, "Wrong alignment on RBScriptedAnimStation_BP_SetStationHidden");
static_assert(sizeof(RBScriptedAnimStation_BP_SetStationHidden) == 0x000001, "Wrong size on RBScriptedAnimStation_BP_SetStationHidden");
static_assert(offsetof(RBScriptedAnimStation_BP_SetStationHidden, bValue) == 0x000000, "Member 'RBScriptedAnimStation_BP_SetStationHidden::bValue' has a wrong offset!");

// Function OPP.RBScriptedAnimStation.GetFacePoseAsset
// 0x0008 (0x0008 - 0x0000)
struct RBScriptedAnimStation_GetFacePoseAsset final
{
public:
	class UPoseAsset*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScriptedAnimStation_GetFacePoseAsset) == 0x000008, "Wrong alignment on RBScriptedAnimStation_GetFacePoseAsset");
static_assert(sizeof(RBScriptedAnimStation_GetFacePoseAsset) == 0x000008, "Wrong size on RBScriptedAnimStation_GetFacePoseAsset");
static_assert(offsetof(RBScriptedAnimStation_GetFacePoseAsset, ReturnValue) == 0x000000, "Member 'RBScriptedAnimStation_GetFacePoseAsset::ReturnValue' has a wrong offset!");

// Function OPP.RBScriptedAnimStation.SetForceClientMeshUpdate
// 0x0001 (0x0001 - 0x0000)
struct RBScriptedAnimStation_SetForceClientMeshUpdate final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBScriptedAnimStation_SetForceClientMeshUpdate) == 0x000001, "Wrong alignment on RBScriptedAnimStation_SetForceClientMeshUpdate");
static_assert(sizeof(RBScriptedAnimStation_SetForceClientMeshUpdate) == 0x000001, "Wrong size on RBScriptedAnimStation_SetForceClientMeshUpdate");
static_assert(offsetof(RBScriptedAnimStation_SetForceClientMeshUpdate, bValue) == 0x000000, "Member 'RBScriptedAnimStation_SetForceClientMeshUpdate::bValue' has a wrong offset!");

// Function OPP.RBScriptedAnimStation.BP_WillSkeletalMeshTick
// 0x0010 (0x0010 - 0x0000)
struct RBScriptedAnimStation_BP_WillSkeletalMeshTick final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBScriptedAnimStation_BP_WillSkeletalMeshTick) == 0x000008, "Wrong alignment on RBScriptedAnimStation_BP_WillSkeletalMeshTick");
static_assert(sizeof(RBScriptedAnimStation_BP_WillSkeletalMeshTick) == 0x000010, "Wrong size on RBScriptedAnimStation_BP_WillSkeletalMeshTick");
static_assert(offsetof(RBScriptedAnimStation_BP_WillSkeletalMeshTick, Mesh) == 0x000000, "Member 'RBScriptedAnimStation_BP_WillSkeletalMeshTick::Mesh' has a wrong offset!");
static_assert(offsetof(RBScriptedAnimStation_BP_WillSkeletalMeshTick, ReturnValue) == 0x000008, "Member 'RBScriptedAnimStation_BP_WillSkeletalMeshTick::ReturnValue' has a wrong offset!");

// Function OPP.RBSettings_Gameplay.GetIngameItemConfig
// 0x0030 (0x0030 - 0x0000)
struct RBSettings_Gameplay_GetIngameItemConfig final
{
public:
	EItemType                                     ItemType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIngameItemConfig                      ReturnValue;                                       // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSettings_Gameplay_GetIngameItemConfig) == 0x000008, "Wrong alignment on RBSettings_Gameplay_GetIngameItemConfig");
static_assert(sizeof(RBSettings_Gameplay_GetIngameItemConfig) == 0x000030, "Wrong size on RBSettings_Gameplay_GetIngameItemConfig");
static_assert(offsetof(RBSettings_Gameplay_GetIngameItemConfig, ItemType) == 0x000000, "Member 'RBSettings_Gameplay_GetIngameItemConfig::ItemType' has a wrong offset!");
static_assert(offsetof(RBSettings_Gameplay_GetIngameItemConfig, ReturnValue) == 0x000008, "Member 'RBSettings_Gameplay_GetIngameItemConfig::ReturnValue' has a wrong offset!");

// Function OPP.RBSimpleObjectiveCoordinator.Multicast_OnSimpleDoActionCompleted
// 0x0010 (0x0010 - 0x0000)
struct RBSimpleObjectiveCoordinator_Multicast_OnSimpleDoActionCompleted final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractibleComponent*               Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleObjectiveCoordinator_Multicast_OnSimpleDoActionCompleted) == 0x000008, "Wrong alignment on RBSimpleObjectiveCoordinator_Multicast_OnSimpleDoActionCompleted");
static_assert(sizeof(RBSimpleObjectiveCoordinator_Multicast_OnSimpleDoActionCompleted) == 0x000010, "Wrong size on RBSimpleObjectiveCoordinator_Multicast_OnSimpleDoActionCompleted");
static_assert(offsetof(RBSimpleObjectiveCoordinator_Multicast_OnSimpleDoActionCompleted, Player) == 0x000000, "Member 'RBSimpleObjectiveCoordinator_Multicast_OnSimpleDoActionCompleted::Player' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_Multicast_OnSimpleDoActionCompleted, Component) == 0x000008, "Member 'RBSimpleObjectiveCoordinator_Multicast_OnSimpleDoActionCompleted::Component' has a wrong offset!");

// Function OPP.RBSimpleObjectiveCoordinator.Multicast_ShowSimpleObjectiveTutorial
// 0x0010 (0x0010 - 0x0000)
struct RBSimpleObjectiveCoordinator_Multicast_ShowSimpleObjectiveTutorial final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBSimpleInteractionComponent*          SimpleComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleObjectiveCoordinator_Multicast_ShowSimpleObjectiveTutorial) == 0x000008, "Wrong alignment on RBSimpleObjectiveCoordinator_Multicast_ShowSimpleObjectiveTutorial");
static_assert(sizeof(RBSimpleObjectiveCoordinator_Multicast_ShowSimpleObjectiveTutorial) == 0x000010, "Wrong size on RBSimpleObjectiveCoordinator_Multicast_ShowSimpleObjectiveTutorial");
static_assert(offsetof(RBSimpleObjectiveCoordinator_Multicast_ShowSimpleObjectiveTutorial, Player) == 0x000000, "Member 'RBSimpleObjectiveCoordinator_Multicast_ShowSimpleObjectiveTutorial::Player' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_Multicast_ShowSimpleObjectiveTutorial, SimpleComponent) == 0x000008, "Member 'RBSimpleObjectiveCoordinator_Multicast_ShowSimpleObjectiveTutorial::SimpleComponent' has a wrong offset!");

// Function OPP.RBSimpleObjectiveCoordinator.OnPlayerCompletedOperatable
// 0x0010 (0x0010 - 0x0000)
struct RBSimpleObjectiveCoordinator_OnPlayerCompletedOperatable final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BC[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBOperatable*                          Operatable;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleObjectiveCoordinator_OnPlayerCompletedOperatable) == 0x000008, "Wrong alignment on RBSimpleObjectiveCoordinator_OnPlayerCompletedOperatable");
static_assert(sizeof(RBSimpleObjectiveCoordinator_OnPlayerCompletedOperatable) == 0x000010, "Wrong size on RBSimpleObjectiveCoordinator_OnPlayerCompletedOperatable");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnPlayerCompletedOperatable, IsOn) == 0x000000, "Member 'RBSimpleObjectiveCoordinator_OnPlayerCompletedOperatable::IsOn' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnPlayerCompletedOperatable, Operatable) == 0x000008, "Member 'RBSimpleObjectiveCoordinator_OnPlayerCompletedOperatable::Operatable' has a wrong offset!");

// Function OPP.RBSimpleObjectiveCoordinator.OnPlayerDoAction
// 0x0010 (0x0010 - 0x0000)
struct RBSimpleObjectiveCoordinator_OnPlayerDoAction final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBInteractible*                        Interactible;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleObjectiveCoordinator_OnPlayerDoAction) == 0x000008, "Wrong alignment on RBSimpleObjectiveCoordinator_OnPlayerDoAction");
static_assert(sizeof(RBSimpleObjectiveCoordinator_OnPlayerDoAction) == 0x000010, "Wrong size on RBSimpleObjectiveCoordinator_OnPlayerDoAction");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnPlayerDoAction, Player) == 0x000000, "Member 'RBSimpleObjectiveCoordinator_OnPlayerDoAction::Player' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnPlayerDoAction, Interactible) == 0x000008, "Member 'RBSimpleObjectiveCoordinator_OnPlayerDoAction::Interactible' has a wrong offset!");

// Function OPP.RBSimpleObjectiveCoordinator.OnPlayerSimpleDoAction
// 0x0010 (0x0010 - 0x0000)
struct RBSimpleObjectiveCoordinator_OnPlayerSimpleDoAction final
{
public:
	class ARBPawn*                                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractibleComponent*               Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleObjectiveCoordinator_OnPlayerSimpleDoAction) == 0x000008, "Wrong alignment on RBSimpleObjectiveCoordinator_OnPlayerSimpleDoAction");
static_assert(sizeof(RBSimpleObjectiveCoordinator_OnPlayerSimpleDoAction) == 0x000010, "Wrong size on RBSimpleObjectiveCoordinator_OnPlayerSimpleDoAction");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnPlayerSimpleDoAction, Player) == 0x000000, "Member 'RBSimpleObjectiveCoordinator_OnPlayerSimpleDoAction::Player' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnPlayerSimpleDoAction, Component) == 0x000008, "Member 'RBSimpleObjectiveCoordinator_OnPlayerSimpleDoAction::Component' has a wrong offset!");

// Function OPP.RBSimpleObjectiveCoordinator.OnTargetTriggerBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BD[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap) == 0x000008, "Wrong alignment on RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap");
static_assert(sizeof(RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap) == 0x0000A8, "Wrong size on RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap, OtherActor) == 0x000008, "Member 'RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap, OtherComp) == 0x000010, "Member 'RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap, SweepResult) == 0x000020, "Member 'RBSimpleObjectiveCoordinator_OnTargetTriggerBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBSimpleObjectiveCoordinator.OnTriggered
// 0x0010 (0x0010 - 0x0000)
struct RBSimpleObjectiveCoordinator_OnTriggered final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23BE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         Triggerable;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleObjectiveCoordinator_OnTriggered) == 0x000008, "Wrong alignment on RBSimpleObjectiveCoordinator_OnTriggered");
static_assert(sizeof(RBSimpleObjectiveCoordinator_OnTriggered) == 0x000010, "Wrong size on RBSimpleObjectiveCoordinator_OnTriggered");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnTriggered, IsOn) == 0x000000, "Member 'RBSimpleObjectiveCoordinator_OnTriggered::IsOn' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnTriggered, Triggerable) == 0x000008, "Member 'RBSimpleObjectiveCoordinator_OnTriggered::Triggerable' has a wrong offset!");

// Function OPP.RBSimpleObjectiveCoordinator.OnTriggeredVolumeEvent
// 0x0008 (0x0008 - 0x0000)
struct RBSimpleObjectiveCoordinator_OnTriggeredVolumeEvent final
{
public:
	class URBPlayerTriggerComponent*              Trigger;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleObjectiveCoordinator_OnTriggeredVolumeEvent) == 0x000008, "Wrong alignment on RBSimpleObjectiveCoordinator_OnTriggeredVolumeEvent");
static_assert(sizeof(RBSimpleObjectiveCoordinator_OnTriggeredVolumeEvent) == 0x000008, "Wrong size on RBSimpleObjectiveCoordinator_OnTriggeredVolumeEvent");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnTriggeredVolumeEvent, Trigger) == 0x000000, "Member 'RBSimpleObjectiveCoordinator_OnTriggeredVolumeEvent::Trigger' has a wrong offset!");

// Function OPP.RBSimpleObjectiveCoordinator.OnUsedOnObject
// 0x0018 (0x0018 - 0x0000)
struct RBSimpleObjectiveCoordinator_OnUsedOnObject final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBLargeObjectInteractionPanelComponent* Panel;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimpleObjectiveCoordinator_OnUsedOnObject) == 0x000008, "Wrong alignment on RBSimpleObjectiveCoordinator_OnUsedOnObject");
static_assert(sizeof(RBSimpleObjectiveCoordinator_OnUsedOnObject) == 0x000018, "Wrong size on RBSimpleObjectiveCoordinator_OnUsedOnObject");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnUsedOnObject, Interactor) == 0x000000, "Member 'RBSimpleObjectiveCoordinator_OnUsedOnObject::Interactor' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnUsedOnObject, LargePickup) == 0x000008, "Member 'RBSimpleObjectiveCoordinator_OnUsedOnObject::LargePickup' has a wrong offset!");
static_assert(offsetof(RBSimpleObjectiveCoordinator_OnUsedOnObject, Panel) == 0x000010, "Member 'RBSimpleObjectiveCoordinator_OnUsedOnObject::Panel' has a wrong offset!");

// Function OPP.RBSimplePasscodeButtonComponent.BP_IsPressed
// 0x0001 (0x0001 - 0x0000)
struct RBSimplePasscodeButtonComponent_BP_IsPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimplePasscodeButtonComponent_BP_IsPressed) == 0x000001, "Wrong alignment on RBSimplePasscodeButtonComponent_BP_IsPressed");
static_assert(sizeof(RBSimplePasscodeButtonComponent_BP_IsPressed) == 0x000001, "Wrong size on RBSimplePasscodeButtonComponent_BP_IsPressed");
static_assert(offsetof(RBSimplePasscodeButtonComponent_BP_IsPressed, ReturnValue) == 0x000000, "Member 'RBSimplePasscodeButtonComponent_BP_IsPressed::ReturnValue' has a wrong offset!");

// Function OPP.RBSimplePasscodePadComponent.BP_SetOnStateOnAllButtons
// 0x0001 (0x0001 - 0x0000)
struct RBSimplePasscodePadComponent_BP_SetOnStateOnAllButtons final
{
public:
	bool                                          bOn;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimplePasscodePadComponent_BP_SetOnStateOnAllButtons) == 0x000001, "Wrong alignment on RBSimplePasscodePadComponent_BP_SetOnStateOnAllButtons");
static_assert(sizeof(RBSimplePasscodePadComponent_BP_SetOnStateOnAllButtons) == 0x000001, "Wrong size on RBSimplePasscodePadComponent_BP_SetOnStateOnAllButtons");
static_assert(offsetof(RBSimplePasscodePadComponent_BP_SetOnStateOnAllButtons, bOn) == 0x000000, "Member 'RBSimplePasscodePadComponent_BP_SetOnStateOnAllButtons::bOn' has a wrong offset!");

// Function OPP.RBSimplePasscodePadComponent.Multicast_OnPasscodePadValidation
// 0x0001 (0x0001 - 0x0000)
struct RBSimplePasscodePadComponent_Multicast_OnPasscodePadValidation final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimplePasscodePadComponent_Multicast_OnPasscodePadValidation) == 0x000001, "Wrong alignment on RBSimplePasscodePadComponent_Multicast_OnPasscodePadValidation");
static_assert(sizeof(RBSimplePasscodePadComponent_Multicast_OnPasscodePadValidation) == 0x000001, "Wrong size on RBSimplePasscodePadComponent_Multicast_OnPasscodePadValidation");
static_assert(offsetof(RBSimplePasscodePadComponent_Multicast_OnPasscodePadValidation, bValid) == 0x000000, "Member 'RBSimplePasscodePadComponent_Multicast_OnPasscodePadValidation::bValid' has a wrong offset!");

// Function OPP.RBSimplePasscodePadComponent.IsSolved_Server
// 0x0001 (0x0001 - 0x0000)
struct RBSimplePasscodePadComponent_IsSolved_Server final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSimplePasscodePadComponent_IsSolved_Server) == 0x000001, "Wrong alignment on RBSimplePasscodePadComponent_IsSolved_Server");
static_assert(sizeof(RBSimplePasscodePadComponent_IsSolved_Server) == 0x000001, "Wrong size on RBSimplePasscodePadComponent_IsSolved_Server");
static_assert(offsetof(RBSimplePasscodePadComponent_IsSolved_Server, ReturnValue) == 0x000000, "Member 'RBSimplePasscodePadComponent_IsSolved_Server::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.BP_GetRBPlayerState
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuEntry_BP_GetRBPlayerState final
{
public:
	const class ARBPlayerState*                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_BP_GetRBPlayerState) == 0x000008, "Wrong alignment on RBSocialMenuEntry_BP_GetRBPlayerState");
static_assert(sizeof(RBSocialMenuEntry_BP_GetRBPlayerState) == 0x000008, "Wrong size on RBSocialMenuEntry_BP_GetRBPlayerState");
static_assert(offsetof(RBSocialMenuEntry_BP_GetRBPlayerState, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_BP_GetRBPlayerState::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.OnPlayerCustomizationUpdated
// 0x0038 (0x0038 - 0x0000)
struct RBSocialMenuEntry_OnPlayerCustomizationUpdated final
{
public:
	struct FRBPlayerCustomizationInfo             CustomizationInfo;                                 // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_OnPlayerCustomizationUpdated) == 0x000008, "Wrong alignment on RBSocialMenuEntry_OnPlayerCustomizationUpdated");
static_assert(sizeof(RBSocialMenuEntry_OnPlayerCustomizationUpdated) == 0x000038, "Wrong size on RBSocialMenuEntry_OnPlayerCustomizationUpdated");
static_assert(offsetof(RBSocialMenuEntry_OnPlayerCustomizationUpdated, CustomizationInfo) == 0x000000, "Member 'RBSocialMenuEntry_OnPlayerCustomizationUpdated::CustomizationInfo' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.OnPlayerLeaving
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_OnPlayerLeaving final
{
public:
	EPlayerLeaveTarget                            Target;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_OnPlayerLeaving) == 0x000001, "Wrong alignment on RBSocialMenuEntry_OnPlayerLeaving");
static_assert(sizeof(RBSocialMenuEntry_OnPlayerLeaving) == 0x000001, "Wrong size on RBSocialMenuEntry_OnPlayerLeaving");
static_assert(offsetof(RBSocialMenuEntry_OnPlayerLeaving, Target) == 0x000000, "Member 'RBSocialMenuEntry_OnPlayerLeaving::Target' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.OnPlayerPartyStateUpdated
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuEntry_OnPlayerPartyStateUpdated final
{
public:
	class ARBPlayerState*                         Param_RBPlayerState;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_OnPlayerPartyStateUpdated) == 0x000008, "Wrong alignment on RBSocialMenuEntry_OnPlayerPartyStateUpdated");
static_assert(sizeof(RBSocialMenuEntry_OnPlayerPartyStateUpdated) == 0x000008, "Wrong size on RBSocialMenuEntry_OnPlayerPartyStateUpdated");
static_assert(offsetof(RBSocialMenuEntry_OnPlayerPartyStateUpdated, Param_RBPlayerState) == 0x000000, "Member 'RBSocialMenuEntry_OnPlayerPartyStateUpdated::Param_RBPlayerState' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.OnPlayerStateMatchStateUpdated
// 0x0028 (0x0028 - 0x0000)
struct RBSocialMenuEntry_OnPlayerStateMatchStateUpdated final
{
public:
	class ARBLobbyPlayerState*                    RBLobbyPlayerState;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchState                            MatchState;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_OnPlayerStateMatchStateUpdated) == 0x000008, "Wrong alignment on RBSocialMenuEntry_OnPlayerStateMatchStateUpdated");
static_assert(sizeof(RBSocialMenuEntry_OnPlayerStateMatchStateUpdated) == 0x000028, "Wrong size on RBSocialMenuEntry_OnPlayerStateMatchStateUpdated");
static_assert(offsetof(RBSocialMenuEntry_OnPlayerStateMatchStateUpdated, RBLobbyPlayerState) == 0x000000, "Member 'RBSocialMenuEntry_OnPlayerStateMatchStateUpdated::RBLobbyPlayerState' has a wrong offset!");
static_assert(offsetof(RBSocialMenuEntry_OnPlayerStateMatchStateUpdated, MatchState) == 0x000008, "Member 'RBSocialMenuEntry_OnPlayerStateMatchStateUpdated::MatchState' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.OnSocialMenuEntryActionCompleted
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuEntry_OnSocialMenuEntryActionCompleted final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBSocialMenuEntryAction                      Action;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSocialMenuEntry_OnSocialMenuEntryActionCompleted) == 0x000008, "Wrong alignment on RBSocialMenuEntry_OnSocialMenuEntryActionCompleted");
static_assert(sizeof(RBSocialMenuEntry_OnSocialMenuEntryActionCompleted) == 0x000010, "Wrong size on RBSocialMenuEntry_OnSocialMenuEntryActionCompleted");
static_assert(offsetof(RBSocialMenuEntry_OnSocialMenuEntryActionCompleted, Entry) == 0x000000, "Member 'RBSocialMenuEntry_OnSocialMenuEntryActionCompleted::Entry' has a wrong offset!");
static_assert(offsetof(RBSocialMenuEntry_OnSocialMenuEntryActionCompleted, Action) == 0x000008, "Member 'RBSocialMenuEntry_OnSocialMenuEntryActionCompleted::Action' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.OnSocialMenuEntryActionStarted
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuEntry_OnSocialMenuEntryActionStarted final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBSocialMenuEntryAction                      Action;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSocialMenuEntry_OnSocialMenuEntryActionStarted) == 0x000008, "Wrong alignment on RBSocialMenuEntry_OnSocialMenuEntryActionStarted");
static_assert(sizeof(RBSocialMenuEntry_OnSocialMenuEntryActionStarted) == 0x000010, "Wrong size on RBSocialMenuEntry_OnSocialMenuEntryActionStarted");
static_assert(offsetof(RBSocialMenuEntry_OnSocialMenuEntryActionStarted, Entry) == 0x000000, "Member 'RBSocialMenuEntry_OnSocialMenuEntryActionStarted::Entry' has a wrong offset!");
static_assert(offsetof(RBSocialMenuEntry_OnSocialMenuEntryActionStarted, Action) == 0x000008, "Member 'RBSocialMenuEntry_OnSocialMenuEntryActionStarted::Action' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.OnSocialMenuPartyInviteWidgetVisibilityUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_OnSocialMenuPartyInviteWidgetVisibilityUpdated final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_OnSocialMenuPartyInviteWidgetVisibilityUpdated) == 0x000001, "Wrong alignment on RBSocialMenuEntry_OnSocialMenuPartyInviteWidgetVisibilityUpdated");
static_assert(sizeof(RBSocialMenuEntry_OnSocialMenuPartyInviteWidgetVisibilityUpdated) == 0x000001, "Wrong size on RBSocialMenuEntry_OnSocialMenuPartyInviteWidgetVisibilityUpdated");
static_assert(offsetof(RBSocialMenuEntry_OnSocialMenuPartyInviteWidgetVisibilityUpdated, bVisible) == 0x000000, "Member 'RBSocialMenuEntry_OnSocialMenuPartyInviteWidgetVisibilityUpdated::bVisible' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.RequestAction
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_RequestAction final
{
public:
	ERBSocialMenuEntryAction                      Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_RequestAction) == 0x000001, "Wrong alignment on RBSocialMenuEntry_RequestAction");
static_assert(sizeof(RBSocialMenuEntry_RequestAction) == 0x000001, "Wrong size on RBSocialMenuEntry_RequestAction");
static_assert(offsetof(RBSocialMenuEntry_RequestAction, Action) == 0x000000, "Member 'RBSocialMenuEntry_RequestAction::Action' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.Setup
// 0x0068 (0x0068 - 0x0000)
struct RBSocialMenuEntry_Setup final
{
public:
	class URBSocialMenuManager*                   Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRBSocialMenuEntryDetails              EntryDetails;                                      // 0x0008(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_Setup) == 0x000008, "Wrong alignment on RBSocialMenuEntry_Setup");
static_assert(sizeof(RBSocialMenuEntry_Setup) == 0x000068, "Wrong size on RBSocialMenuEntry_Setup");
static_assert(offsetof(RBSocialMenuEntry_Setup, Parent) == 0x000000, "Member 'RBSocialMenuEntry_Setup::Parent' has a wrong offset!");
static_assert(offsetof(RBSocialMenuEntry_Setup, EntryDetails) == 0x000008, "Member 'RBSocialMenuEntry_Setup::EntryDetails' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.SetVoiceChatOutputVolume
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuEntry_SetVoiceChatOutputVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_SetVoiceChatOutputVolume) == 0x000004, "Wrong alignment on RBSocialMenuEntry_SetVoiceChatOutputVolume");
static_assert(sizeof(RBSocialMenuEntry_SetVoiceChatOutputVolume) == 0x000004, "Wrong size on RBSocialMenuEntry_SetVoiceChatOutputVolume");
static_assert(offsetof(RBSocialMenuEntry_SetVoiceChatOutputVolume, Volume) == 0x000000, "Member 'RBSocialMenuEntry_SetVoiceChatOutputVolume::Volume' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.SetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuEntry_SetVoiceChatVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_SetVoiceChatVolume) == 0x000004, "Wrong alignment on RBSocialMenuEntry_SetVoiceChatVolume");
static_assert(sizeof(RBSocialMenuEntry_SetVoiceChatVolume) == 0x000004, "Wrong size on RBSocialMenuEntry_SetVoiceChatVolume");
static_assert(offsetof(RBSocialMenuEntry_SetVoiceChatVolume, Volume) == 0x000000, "Member 'RBSocialMenuEntry_SetVoiceChatVolume::Volume' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.CanOpenContextualMenu
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_CanOpenContextualMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_CanOpenContextualMenu) == 0x000001, "Wrong alignment on RBSocialMenuEntry_CanOpenContextualMenu");
static_assert(sizeof(RBSocialMenuEntry_CanOpenContextualMenu) == 0x000001, "Wrong size on RBSocialMenuEntry_CanOpenContextualMenu");
static_assert(offsetof(RBSocialMenuEntry_CanOpenContextualMenu, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_CanOpenContextualMenu::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.CanSendPartyInvite
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_CanSendPartyInvite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_CanSendPartyInvite) == 0x000001, "Wrong alignment on RBSocialMenuEntry_CanSendPartyInvite");
static_assert(sizeof(RBSocialMenuEntry_CanSendPartyInvite) == 0x000001, "Wrong size on RBSocialMenuEntry_CanSendPartyInvite");
static_assert(offsetof(RBSocialMenuEntry_CanSendPartyInvite, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_CanSendPartyInvite::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.CanUpdateVoiceChatVolume
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_CanUpdateVoiceChatVolume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_CanUpdateVoiceChatVolume) == 0x000001, "Wrong alignment on RBSocialMenuEntry_CanUpdateVoiceChatVolume");
static_assert(sizeof(RBSocialMenuEntry_CanUpdateVoiceChatVolume) == 0x000001, "Wrong size on RBSocialMenuEntry_CanUpdateVoiceChatVolume");
static_assert(offsetof(RBSocialMenuEntry_CanUpdateVoiceChatVolume, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_CanUpdateVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetAvailableActions
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuEntry_GetAvailableActions final
{
public:
	TArray<ERBSocialMenuEntryAction>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetAvailableActions) == 0x000008, "Wrong alignment on RBSocialMenuEntry_GetAvailableActions");
static_assert(sizeof(RBSocialMenuEntry_GetAvailableActions) == 0x000010, "Wrong size on RBSocialMenuEntry_GetAvailableActions");
static_assert(offsetof(RBSocialMenuEntry_GetAvailableActions, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetAvailableActions::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetFlags
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuEntry_GetFlags final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetFlags) == 0x000004, "Wrong alignment on RBSocialMenuEntry_GetFlags");
static_assert(sizeof(RBSocialMenuEntry_GetFlags) == 0x000004, "Wrong size on RBSocialMenuEntry_GetFlags");
static_assert(offsetof(RBSocialMenuEntry_GetFlags, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetFlags::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetName
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuEntry_GetName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetName) == 0x000008, "Wrong alignment on RBSocialMenuEntry_GetName");
static_assert(sizeof(RBSocialMenuEntry_GetName) == 0x000010, "Wrong size on RBSocialMenuEntry_GetName");
static_assert(offsetof(RBSocialMenuEntry_GetName, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetName::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetPlatform
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_GetPlatform final
{
public:
	EProfilePlatform                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetPlatform) == 0x000001, "Wrong alignment on RBSocialMenuEntry_GetPlatform");
static_assert(sizeof(RBSocialMenuEntry_GetPlatform) == 0x000001, "Wrong size on RBSocialMenuEntry_GetPlatform");
static_assert(offsetof(RBSocialMenuEntry_GetPlatform, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetPlatform::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetPlayerIcon
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuEntry_GetPlayerIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetPlayerIcon) == 0x000008, "Wrong alignment on RBSocialMenuEntry_GetPlayerIcon");
static_assert(sizeof(RBSocialMenuEntry_GetPlayerIcon) == 0x000008, "Wrong size on RBSocialMenuEntry_GetPlayerIcon");
static_assert(offsetof(RBSocialMenuEntry_GetPlayerIcon, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetPlayerIcon::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetPlayerLevel
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuEntry_GetPlayerLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetPlayerLevel) == 0x000004, "Wrong alignment on RBSocialMenuEntry_GetPlayerLevel");
static_assert(sizeof(RBSocialMenuEntry_GetPlayerLevel) == 0x000004, "Wrong size on RBSocialMenuEntry_GetPlayerLevel");
static_assert(offsetof(RBSocialMenuEntry_GetPlayerLevel, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetPlayerLevel::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetPresenceText
// 0x0018 (0x0018 - 0x0000)
struct RBSocialMenuEntry_GetPresenceText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetPresenceText) == 0x000008, "Wrong alignment on RBSocialMenuEntry_GetPresenceText");
static_assert(sizeof(RBSocialMenuEntry_GetPresenceText) == 0x000018, "Wrong size on RBSocialMenuEntry_GetPresenceText");
static_assert(offsetof(RBSocialMenuEntry_GetPresenceText, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetPresenceText::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetProfileId
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuEntry_GetProfileId final
{
public:
	struct FProfileId                             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetProfileId) == 0x000004, "Wrong alignment on RBSocialMenuEntry_GetProfileId");
static_assert(sizeof(RBSocialMenuEntry_GetProfileId) == 0x000010, "Wrong size on RBSocialMenuEntry_GetProfileId");
static_assert(offsetof(RBSocialMenuEntry_GetProfileId, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetProfileId::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetReleaseCount
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuEntry_GetReleaseCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetReleaseCount) == 0x000004, "Wrong alignment on RBSocialMenuEntry_GetReleaseCount");
static_assert(sizeof(RBSocialMenuEntry_GetReleaseCount) == 0x000004, "Wrong size on RBSocialMenuEntry_GetReleaseCount");
static_assert(offsetof(RBSocialMenuEntry_GetReleaseCount, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetReleaseCount::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetSelectedActiveSkill
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_GetSelectedActiveSkill final
{
public:
	EActiveSkillType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetSelectedActiveSkill) == 0x000001, "Wrong alignment on RBSocialMenuEntry_GetSelectedActiveSkill");
static_assert(sizeof(RBSocialMenuEntry_GetSelectedActiveSkill) == 0x000001, "Wrong size on RBSocialMenuEntry_GetSelectedActiveSkill");
static_assert(offsetof(RBSocialMenuEntry_GetSelectedActiveSkill, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetSelectedActiveSkill::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetSessionMaxMemberCount
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuEntry_GetSessionMaxMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetSessionMaxMemberCount) == 0x000004, "Wrong alignment on RBSocialMenuEntry_GetSessionMaxMemberCount");
static_assert(sizeof(RBSocialMenuEntry_GetSessionMaxMemberCount) == 0x000004, "Wrong size on RBSocialMenuEntry_GetSessionMaxMemberCount");
static_assert(offsetof(RBSocialMenuEntry_GetSessionMaxMemberCount, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetSessionMaxMemberCount::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetSessionMemberCount
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuEntry_GetSessionMemberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetSessionMemberCount) == 0x000004, "Wrong alignment on RBSocialMenuEntry_GetSessionMemberCount");
static_assert(sizeof(RBSocialMenuEntry_GetSessionMemberCount) == 0x000004, "Wrong size on RBSocialMenuEntry_GetSessionMemberCount");
static_assert(offsetof(RBSocialMenuEntry_GetSessionMemberCount, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetSessionMemberCount::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetSocialMenuEntryListType
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_GetSocialMenuEntryListType final
{
public:
	ERBSocialMenuEntryListType                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetSocialMenuEntryListType) == 0x000001, "Wrong alignment on RBSocialMenuEntry_GetSocialMenuEntryListType");
static_assert(sizeof(RBSocialMenuEntry_GetSocialMenuEntryListType) == 0x000001, "Wrong size on RBSocialMenuEntry_GetSocialMenuEntryListType");
static_assert(offsetof(RBSocialMenuEntry_GetSocialMenuEntryListType, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetSocialMenuEntryListType::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetVoiceChatOutputVolume
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuEntry_GetVoiceChatOutputVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetVoiceChatOutputVolume) == 0x000004, "Wrong alignment on RBSocialMenuEntry_GetVoiceChatOutputVolume");
static_assert(sizeof(RBSocialMenuEntry_GetVoiceChatOutputVolume) == 0x000004, "Wrong size on RBSocialMenuEntry_GetVoiceChatOutputVolume");
static_assert(offsetof(RBSocialMenuEntry_GetVoiceChatOutputVolume, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetVoiceChatOutputVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.GetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuEntry_GetVoiceChatVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_GetVoiceChatVolume) == 0x000004, "Wrong alignment on RBSocialMenuEntry_GetVoiceChatVolume");
static_assert(sizeof(RBSocialMenuEntry_GetVoiceChatVolume) == 0x000004, "Wrong size on RBSocialMenuEntry_GetVoiceChatVolume");
static_assert(offsetof(RBSocialMenuEntry_GetVoiceChatVolume, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_GetVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.HasFlag
// 0x0002 (0x0002 - 0x0000)
struct RBSocialMenuEntry_HasFlag final
{
public:
	ERBSocialMenuEntryFlag                        Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_HasFlag) == 0x000001, "Wrong alignment on RBSocialMenuEntry_HasFlag");
static_assert(sizeof(RBSocialMenuEntry_HasFlag) == 0x000002, "Wrong size on RBSocialMenuEntry_HasFlag");
static_assert(offsetof(RBSocialMenuEntry_HasFlag, Flag) == 0x000000, "Member 'RBSocialMenuEntry_HasFlag::Flag' has a wrong offset!");
static_assert(offsetof(RBSocialMenuEntry_HasFlag, ReturnValue) == 0x000001, "Member 'RBSocialMenuEntry_HasFlag::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.HasPlayerLevel
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_HasPlayerLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_HasPlayerLevel) == 0x000001, "Wrong alignment on RBSocialMenuEntry_HasPlayerLevel");
static_assert(sizeof(RBSocialMenuEntry_HasPlayerLevel) == 0x000001, "Wrong size on RBSocialMenuEntry_HasPlayerLevel");
static_assert(offsetof(RBSocialMenuEntry_HasPlayerLevel, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_HasPlayerLevel::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsBlocked
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsBlocked) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsBlocked");
static_assert(sizeof(RBSocialMenuEntry_IsBlocked) == 0x000001, "Wrong size on RBSocialMenuEntry_IsBlocked");
static_assert(offsetof(RBSocialMenuEntry_IsBlocked, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsBlocked::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsCompatibleBuild
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsCompatibleBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsCompatibleBuild) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsCompatibleBuild");
static_assert(sizeof(RBSocialMenuEntry_IsCompatibleBuild) == 0x000001, "Wrong size on RBSocialMenuEntry_IsCompatibleBuild");
static_assert(offsetof(RBSocialMenuEntry_IsCompatibleBuild, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsCompatibleBuild::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsInGame
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsInGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsInGame) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsInGame");
static_assert(sizeof(RBSocialMenuEntry_IsInGame) == 0x000001, "Wrong size on RBSocialMenuEntry_IsInGame");
static_assert(offsetof(RBSocialMenuEntry_IsInGame, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsInGame::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsInYourGame
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsInYourGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsInYourGame) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsInYourGame");
static_assert(sizeof(RBSocialMenuEntry_IsInYourGame) == 0x000001, "Wrong size on RBSocialMenuEntry_IsInYourGame");
static_assert(offsetof(RBSocialMenuEntry_IsInYourGame, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsInYourGame::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsInYourParty
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsInYourParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsInYourParty) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsInYourParty");
static_assert(sizeof(RBSocialMenuEntry_IsInYourParty) == 0x000001, "Wrong size on RBSocialMenuEntry_IsInYourParty");
static_assert(offsetof(RBSocialMenuEntry_IsInYourParty, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsInYourParty::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsJoinable
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsJoinable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsJoinable) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsJoinable");
static_assert(sizeof(RBSocialMenuEntry_IsJoinable) == 0x000001, "Wrong size on RBSocialMenuEntry_IsJoinable");
static_assert(offsetof(RBSocialMenuEntry_IsJoinable, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsJoinable::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsOnline
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsOnline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsOnline) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsOnline");
static_assert(sizeof(RBSocialMenuEntry_IsOnline) == 0x000001, "Wrong size on RBSocialMenuEntry_IsOnline");
static_assert(offsetof(RBSocialMenuEntry_IsOnline, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsOnline::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsOperationPending
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsOperationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsOperationPending) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsOperationPending");
static_assert(sizeof(RBSocialMenuEntry_IsOperationPending) == 0x000001, "Wrong size on RBSocialMenuEntry_IsOperationPending");
static_assert(offsetof(RBSocialMenuEntry_IsOperationPending, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsOperationPending::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsPartyInviteWidgetShown
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsPartyInviteWidgetShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsPartyInviteWidgetShown) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsPartyInviteWidgetShown");
static_assert(sizeof(RBSocialMenuEntry_IsPartyInviteWidgetShown) == 0x000001, "Wrong size on RBSocialMenuEntry_IsPartyInviteWidgetShown");
static_assert(offsetof(RBSocialMenuEntry_IsPartyInviteWidgetShown, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsPartyInviteWidgetShown::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsPartyOwner
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsPartyOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsPartyOwner) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsPartyOwner");
static_assert(sizeof(RBSocialMenuEntry_IsPartyOwner) == 0x000001, "Wrong size on RBSocialMenuEntry_IsPartyOwner");
static_assert(offsetof(RBSocialMenuEntry_IsPartyOwner, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsPartyOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.IsVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_IsVoiceChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_IsVoiceChatEnabled) == 0x000001, "Wrong alignment on RBSocialMenuEntry_IsVoiceChatEnabled");
static_assert(sizeof(RBSocialMenuEntry_IsVoiceChatEnabled) == 0x000001, "Wrong size on RBSocialMenuEntry_IsVoiceChatEnabled");
static_assert(offsetof(RBSocialMenuEntry_IsVoiceChatEnabled, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_IsVoiceChatEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.RequiresInvite
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_RequiresInvite final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_RequiresInvite) == 0x000001, "Wrong alignment on RBSocialMenuEntry_RequiresInvite");
static_assert(sizeof(RBSocialMenuEntry_RequiresInvite) == 0x000001, "Wrong size on RBSocialMenuEntry_RequiresInvite");
static_assert(offsetof(RBSocialMenuEntry_RequiresInvite, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_RequiresInvite::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntry.ShouldDisplayPresence
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntry_ShouldDisplayPresence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntry_ShouldDisplayPresence) == 0x000001, "Wrong alignment on RBSocialMenuEntry_ShouldDisplayPresence");
static_assert(sizeof(RBSocialMenuEntry_ShouldDisplayPresence) == 0x000001, "Wrong size on RBSocialMenuEntry_ShouldDisplayPresence");
static_assert(offsetof(RBSocialMenuEntry_ShouldDisplayPresence, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntry_ShouldDisplayPresence::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntryContextualMenu.RequestAction
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntryContextualMenu_RequestAction final
{
public:
	ERBSocialMenuEntryAction                      Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryContextualMenu_RequestAction) == 0x000001, "Wrong alignment on RBSocialMenuEntryContextualMenu_RequestAction");
static_assert(sizeof(RBSocialMenuEntryContextualMenu_RequestAction) == 0x000001, "Wrong size on RBSocialMenuEntryContextualMenu_RequestAction");
static_assert(offsetof(RBSocialMenuEntryContextualMenu_RequestAction, Action) == 0x000000, "Member 'RBSocialMenuEntryContextualMenu_RequestAction::Action' has a wrong offset!");

// Function OPP.RBSocialMenuEntryContextualMenu.Setup
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuEntryContextualMenu_Setup final
{
public:
	class URBSocialMenuEntry*                     Param_AssociatedEntry;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryContextualMenu_Setup) == 0x000008, "Wrong alignment on RBSocialMenuEntryContextualMenu_Setup");
static_assert(sizeof(RBSocialMenuEntryContextualMenu_Setup) == 0x000008, "Wrong size on RBSocialMenuEntryContextualMenu_Setup");
static_assert(offsetof(RBSocialMenuEntryContextualMenu_Setup, Param_AssociatedEntry) == 0x000000, "Member 'RBSocialMenuEntryContextualMenu_Setup::Param_AssociatedEntry' has a wrong offset!");

// Function OPP.RBSocialMenuEntryContextualMenu.GetAssociatedEntry
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuEntryContextualMenu_GetAssociatedEntry final
{
public:
	class URBSocialMenuEntry*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryContextualMenu_GetAssociatedEntry) == 0x000008, "Wrong alignment on RBSocialMenuEntryContextualMenu_GetAssociatedEntry");
static_assert(sizeof(RBSocialMenuEntryContextualMenu_GetAssociatedEntry) == 0x000008, "Wrong size on RBSocialMenuEntryContextualMenu_GetAssociatedEntry");
static_assert(offsetof(RBSocialMenuEntryContextualMenu_GetAssociatedEntry, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntryContextualMenu_GetAssociatedEntry::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntryContextualMenu.GetAvailableActions
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuEntryContextualMenu_GetAvailableActions final
{
public:
	TArray<ERBSocialMenuEntryAction>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryContextualMenu_GetAvailableActions) == 0x000008, "Wrong alignment on RBSocialMenuEntryContextualMenu_GetAvailableActions");
static_assert(sizeof(RBSocialMenuEntryContextualMenu_GetAvailableActions) == 0x000010, "Wrong size on RBSocialMenuEntryContextualMenu_GetAvailableActions");
static_assert(offsetof(RBSocialMenuEntryContextualMenu_GetAvailableActions, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntryContextualMenu_GetAvailableActions::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.Activate
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuEntryListWidget_Activate final
{
public:
	class URBSocialMenuManager*                   Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_Activate) == 0x000008, "Wrong alignment on RBSocialMenuEntryListWidget_Activate");
static_assert(sizeof(RBSocialMenuEntryListWidget_Activate) == 0x000008, "Wrong size on RBSocialMenuEntryListWidget_Activate");
static_assert(offsetof(RBSocialMenuEntryListWidget_Activate, Parent) == 0x000000, "Member 'RBSocialMenuEntryListWidget_Activate::Parent' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.Event_OnDataPending
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntryListWidget_Event_OnDataPending final
{
public:
	bool                                          bIsDataPending;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_Event_OnDataPending) == 0x000001, "Wrong alignment on RBSocialMenuEntryListWidget_Event_OnDataPending");
static_assert(sizeof(RBSocialMenuEntryListWidget_Event_OnDataPending) == 0x000001, "Wrong size on RBSocialMenuEntryListWidget_Event_OnDataPending");
static_assert(offsetof(RBSocialMenuEntryListWidget_Event_OnDataPending, bIsDataPending) == 0x000000, "Member 'RBSocialMenuEntryListWidget_Event_OnDataPending::bIsDataPending' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.Event_OnEmptyStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntryListWidget_Event_OnEmptyStateChanged final
{
public:
	bool                                          bIsEmpty;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_Event_OnEmptyStateChanged) == 0x000001, "Wrong alignment on RBSocialMenuEntryListWidget_Event_OnEmptyStateChanged");
static_assert(sizeof(RBSocialMenuEntryListWidget_Event_OnEmptyStateChanged) == 0x000001, "Wrong size on RBSocialMenuEntryListWidget_Event_OnEmptyStateChanged");
static_assert(offsetof(RBSocialMenuEntryListWidget_Event_OnEmptyStateChanged, bIsEmpty) == 0x000000, "Member 'RBSocialMenuEntryListWidget_Event_OnEmptyStateChanged::bIsEmpty' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.Event_RemoveEntry
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuEntryListWidget_Event_RemoveEntry final
{
public:
	class URBUserWidget*                          Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_Event_RemoveEntry) == 0x000008, "Wrong alignment on RBSocialMenuEntryListWidget_Event_RemoveEntry");
static_assert(sizeof(RBSocialMenuEntryListWidget_Event_RemoveEntry) == 0x000008, "Wrong size on RBSocialMenuEntryListWidget_Event_RemoveEntry");
static_assert(offsetof(RBSocialMenuEntryListWidget_Event_RemoveEntry, Entry) == 0x000000, "Member 'RBSocialMenuEntryListWidget_Event_RemoveEntry::Entry' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.Event_UpdateEntry
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuEntryListWidget_Event_UpdateEntry final
{
public:
	class URBUserWidget*                          Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_Event_UpdateEntry) == 0x000008, "Wrong alignment on RBSocialMenuEntryListWidget_Event_UpdateEntry");
static_assert(sizeof(RBSocialMenuEntryListWidget_Event_UpdateEntry) == 0x000010, "Wrong size on RBSocialMenuEntryListWidget_Event_UpdateEntry");
static_assert(offsetof(RBSocialMenuEntryListWidget_Event_UpdateEntry, Entry) == 0x000000, "Member 'RBSocialMenuEntryListWidget_Event_UpdateEntry::Entry' has a wrong offset!");
static_assert(offsetof(RBSocialMenuEntryListWidget_Event_UpdateEntry, Column) == 0x000008, "Member 'RBSocialMenuEntryListWidget_Event_UpdateEntry::Column' has a wrong offset!");
static_assert(offsetof(RBSocialMenuEntryListWidget_Event_UpdateEntry, Row) == 0x00000C, "Member 'RBSocialMenuEntryListWidget_Event_UpdateEntry::Row' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.OnEntryActionRequested
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuEntryListWidget_OnEntryActionRequested final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBSocialMenuEntryAction                      Action;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSocialMenuEntryListWidget_OnEntryActionRequested) == 0x000008, "Wrong alignment on RBSocialMenuEntryListWidget_OnEntryActionRequested");
static_assert(sizeof(RBSocialMenuEntryListWidget_OnEntryActionRequested) == 0x000010, "Wrong size on RBSocialMenuEntryListWidget_OnEntryActionRequested");
static_assert(offsetof(RBSocialMenuEntryListWidget_OnEntryActionRequested, Entry) == 0x000000, "Member 'RBSocialMenuEntryListWidget_OnEntryActionRequested::Entry' has a wrong offset!");
static_assert(offsetof(RBSocialMenuEntryListWidget_OnEntryActionRequested, Action) == 0x000008, "Member 'RBSocialMenuEntryListWidget_OnEntryActionRequested::Action' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.OnFilterChanged
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntryListWidget_OnFilterChanged final
{
public:
	ERBSocialMenuEntryFilter                      Param_Filter;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_OnFilterChanged) == 0x000001, "Wrong alignment on RBSocialMenuEntryListWidget_OnFilterChanged");
static_assert(sizeof(RBSocialMenuEntryListWidget_OnFilterChanged) == 0x000001, "Wrong size on RBSocialMenuEntryListWidget_OnFilterChanged");
static_assert(offsetof(RBSocialMenuEntryListWidget_OnFilterChanged, Param_Filter) == 0x000000, "Member 'RBSocialMenuEntryListWidget_OnFilterChanged::Param_Filter' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.OnPlayerJoinedGame
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuEntryListWidget_OnPlayerJoinedGame final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_OnPlayerJoinedGame) == 0x000008, "Wrong alignment on RBSocialMenuEntryListWidget_OnPlayerJoinedGame");
static_assert(sizeof(RBSocialMenuEntryListWidget_OnPlayerJoinedGame) == 0x000008, "Wrong size on RBSocialMenuEntryListWidget_OnPlayerJoinedGame");
static_assert(offsetof(RBSocialMenuEntryListWidget_OnPlayerJoinedGame, RBPlayerState) == 0x000000, "Member 'RBSocialMenuEntryListWidget_OnPlayerJoinedGame::RBPlayerState' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.OnPlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuEntryListWidget_OnPlayerLeftGame final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_OnPlayerLeftGame) == 0x000008, "Wrong alignment on RBSocialMenuEntryListWidget_OnPlayerLeftGame");
static_assert(sizeof(RBSocialMenuEntryListWidget_OnPlayerLeftGame) == 0x000008, "Wrong size on RBSocialMenuEntryListWidget_OnPlayerLeftGame");
static_assert(offsetof(RBSocialMenuEntryListWidget_OnPlayerLeftGame, RBPlayerState) == 0x000000, "Member 'RBSocialMenuEntryListWidget_OnPlayerLeftGame::RBPlayerState' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.SetFilter
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntryListWidget_SetFilter final
{
public:
	ERBSocialMenuEntryFilter                      Param_Filter;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_SetFilter) == 0x000001, "Wrong alignment on RBSocialMenuEntryListWidget_SetFilter");
static_assert(sizeof(RBSocialMenuEntryListWidget_SetFilter) == 0x000001, "Wrong size on RBSocialMenuEntryListWidget_SetFilter");
static_assert(offsetof(RBSocialMenuEntryListWidget_SetFilter, Param_Filter) == 0x000000, "Member 'RBSocialMenuEntryListWidget_SetFilter::Param_Filter' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.GetFilter
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntryListWidget_GetFilter final
{
public:
	ERBSocialMenuEntryFilter                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_GetFilter) == 0x000001, "Wrong alignment on RBSocialMenuEntryListWidget_GetFilter");
static_assert(sizeof(RBSocialMenuEntryListWidget_GetFilter) == 0x000001, "Wrong size on RBSocialMenuEntryListWidget_GetFilter");
static_assert(offsetof(RBSocialMenuEntryListWidget_GetFilter, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntryListWidget_GetFilter::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.IsDataPending
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntryListWidget_IsDataPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_IsDataPending) == 0x000001, "Wrong alignment on RBSocialMenuEntryListWidget_IsDataPending");
static_assert(sizeof(RBSocialMenuEntryListWidget_IsDataPending) == 0x000001, "Wrong size on RBSocialMenuEntryListWidget_IsDataPending");
static_assert(offsetof(RBSocialMenuEntryListWidget_IsDataPending, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntryListWidget_IsDataPending::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntryListWidget_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_IsEmpty) == 0x000001, "Wrong alignment on RBSocialMenuEntryListWidget_IsEmpty");
static_assert(sizeof(RBSocialMenuEntryListWidget_IsEmpty) == 0x000001, "Wrong size on RBSocialMenuEntryListWidget_IsEmpty");
static_assert(offsetof(RBSocialMenuEntryListWidget_IsEmpty, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntryListWidget_IsEmpty::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuEntryListWidget.IsOperationPending
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuEntryListWidget_IsOperationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuEntryListWidget_IsOperationPending) == 0x000001, "Wrong alignment on RBSocialMenuEntryListWidget_IsOperationPending");
static_assert(sizeof(RBSocialMenuEntryListWidget_IsOperationPending) == 0x000001, "Wrong size on RBSocialMenuEntryListWidget_IsOperationPending");
static_assert(offsetof(RBSocialMenuEntryListWidget_IsOperationPending, ReturnValue) == 0x000000, "Member 'RBSocialMenuEntryListWidget_IsOperationPending::ReturnValue' has a wrong offset!");

// DelegateFunction OPP.RBSocialMenuManager.OnFilterChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuManager_OnFilterChanged__DelegateSignature final
{
public:
	ERBSocialMenuEntryFilter                      Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuManager_OnFilterChanged__DelegateSignature) == 0x000001, "Wrong alignment on RBSocialMenuManager_OnFilterChanged__DelegateSignature");
static_assert(sizeof(RBSocialMenuManager_OnFilterChanged__DelegateSignature) == 0x000001, "Wrong size on RBSocialMenuManager_OnFilterChanged__DelegateSignature");
static_assert(offsetof(RBSocialMenuManager_OnFilterChanged__DelegateSignature, Filter) == 0x000000, "Member 'RBSocialMenuManager_OnFilterChanged__DelegateSignature::Filter' has a wrong offset!");

// Function OPP.RBSocialMenuManager.SetFilter
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuManager_SetFilter final
{
public:
	ERBSocialMenuEntryFilter                      Filter;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuManager_SetFilter) == 0x000001, "Wrong alignment on RBSocialMenuManager_SetFilter");
static_assert(sizeof(RBSocialMenuManager_SetFilter) == 0x000001, "Wrong size on RBSocialMenuManager_SetFilter");
static_assert(offsetof(RBSocialMenuManager_SetFilter, Filter) == 0x000000, "Member 'RBSocialMenuManager_SetFilter::Filter' has a wrong offset!");

// Function OPP.RBSocialMenuManager.GetFilter
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuManager_GetFilter final
{
public:
	ERBSocialMenuEntryFilter                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuManager_GetFilter) == 0x000001, "Wrong alignment on RBSocialMenuManager_GetFilter");
static_assert(sizeof(RBSocialMenuManager_GetFilter) == 0x000001, "Wrong size on RBSocialMenuManager_GetFilter");
static_assert(offsetof(RBSocialMenuManager_GetFilter, ReturnValue) == 0x000000, "Member 'RBSocialMenuManager_GetFilter::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuManager.HasContextualMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuManager_HasContextualMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuManager_HasContextualMenuOpen) == 0x000001, "Wrong alignment on RBSocialMenuManager_HasContextualMenuOpen");
static_assert(sizeof(RBSocialMenuManager_HasContextualMenuOpen) == 0x000001, "Wrong size on RBSocialMenuManager_HasContextualMenuOpen");
static_assert(offsetof(RBSocialMenuManager_HasContextualMenuOpen, ReturnValue) == 0x000000, "Member 'RBSocialMenuManager_HasContextualMenuOpen::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuManager.HasPendingFriendRequest
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuManager_HasPendingFriendRequest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuManager_HasPendingFriendRequest) == 0x000001, "Wrong alignment on RBSocialMenuManager_HasPendingFriendRequest");
static_assert(sizeof(RBSocialMenuManager_HasPendingFriendRequest) == 0x000001, "Wrong size on RBSocialMenuManager_HasPendingFriendRequest");
static_assert(offsetof(RBSocialMenuManager_HasPendingFriendRequest, ReturnValue) == 0x000000, "Member 'RBSocialMenuManager_HasPendingFriendRequest::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuManager.IsCrossplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuManager_IsCrossplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuManager_IsCrossplayEnabled) == 0x000001, "Wrong alignment on RBSocialMenuManager_IsCrossplayEnabled");
static_assert(sizeof(RBSocialMenuManager_IsCrossplayEnabled) == 0x000001, "Wrong size on RBSocialMenuManager_IsCrossplayEnabled");
static_assert(offsetof(RBSocialMenuManager_IsCrossplayEnabled, ReturnValue) == 0x000000, "Member 'RBSocialMenuManager_IsCrossplayEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuManager.IsPartyInviteWidgetShown
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuManager_IsPartyInviteWidgetShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuManager_IsPartyInviteWidgetShown) == 0x000001, "Wrong alignment on RBSocialMenuManager_IsPartyInviteWidgetShown");
static_assert(sizeof(RBSocialMenuManager_IsPartyInviteWidgetShown) == 0x000001, "Wrong size on RBSocialMenuManager_IsPartyInviteWidgetShown");
static_assert(offsetof(RBSocialMenuManager_IsPartyInviteWidgetShown, ReturnValue) == 0x000000, "Member 'RBSocialMenuManager_IsPartyInviteWidgetShown::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuManager.ShouldEnableFindFriendMenuOption
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuManager_ShouldEnableFindFriendMenuOption final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuManager_ShouldEnableFindFriendMenuOption) == 0x000001, "Wrong alignment on RBSocialMenuManager_ShouldEnableFindFriendMenuOption");
static_assert(sizeof(RBSocialMenuManager_ShouldEnableFindFriendMenuOption) == 0x000001, "Wrong size on RBSocialMenuManager_ShouldEnableFindFriendMenuOption");
static_assert(offsetof(RBSocialMenuManager_ShouldEnableFindFriendMenuOption, ReturnValue) == 0x000000, "Member 'RBSocialMenuManager_ShouldEnableFindFriendMenuOption::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuManager.ShowFilter
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuManager_ShowFilter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuManager_ShowFilter) == 0x000001, "Wrong alignment on RBSocialMenuManager_ShowFilter");
static_assert(sizeof(RBSocialMenuManager_ShowFilter) == 0x000001, "Wrong size on RBSocialMenuManager_ShowFilter");
static_assert(offsetof(RBSocialMenuManager_ShowFilter, ReturnValue) == 0x000000, "Member 'RBSocialMenuManager_ShowFilter::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.Activate
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuPartyWidget_Activate final
{
public:
	class URBSocialMenuManager*                   Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_Activate) == 0x000008, "Wrong alignment on RBSocialMenuPartyWidget_Activate");
static_assert(sizeof(RBSocialMenuPartyWidget_Activate) == 0x000008, "Wrong size on RBSocialMenuPartyWidget_Activate");
static_assert(offsetof(RBSocialMenuPartyWidget_Activate, Parent) == 0x000000, "Member 'RBSocialMenuPartyWidget_Activate::Parent' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.Event_OnDataPending
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_Event_OnDataPending final
{
public:
	bool                                          bIsDataPending;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_Event_OnDataPending) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_Event_OnDataPending");
static_assert(sizeof(RBSocialMenuPartyWidget_Event_OnDataPending) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_Event_OnDataPending");
static_assert(offsetof(RBSocialMenuPartyWidget_Event_OnDataPending, bIsDataPending) == 0x000000, "Member 'RBSocialMenuPartyWidget_Event_OnDataPending::bIsDataPending' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.Event_RemoveEntry
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuPartyWidget_Event_RemoveEntry final
{
public:
	class URBUserWidget*                          Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_Event_RemoveEntry) == 0x000008, "Wrong alignment on RBSocialMenuPartyWidget_Event_RemoveEntry");
static_assert(sizeof(RBSocialMenuPartyWidget_Event_RemoveEntry) == 0x000008, "Wrong size on RBSocialMenuPartyWidget_Event_RemoveEntry");
static_assert(offsetof(RBSocialMenuPartyWidget_Event_RemoveEntry, Entry) == 0x000000, "Member 'RBSocialMenuPartyWidget_Event_RemoveEntry::Entry' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.Event_UpdateEntry
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuPartyWidget_Event_UpdateEntry final
{
public:
	class URBUserWidget*                          Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_Event_UpdateEntry) == 0x000008, "Wrong alignment on RBSocialMenuPartyWidget_Event_UpdateEntry");
static_assert(sizeof(RBSocialMenuPartyWidget_Event_UpdateEntry) == 0x000010, "Wrong size on RBSocialMenuPartyWidget_Event_UpdateEntry");
static_assert(offsetof(RBSocialMenuPartyWidget_Event_UpdateEntry, Entry) == 0x000000, "Member 'RBSocialMenuPartyWidget_Event_UpdateEntry::Entry' has a wrong offset!");
static_assert(offsetof(RBSocialMenuPartyWidget_Event_UpdateEntry, Column) == 0x000008, "Member 'RBSocialMenuPartyWidget_Event_UpdateEntry::Column' has a wrong offset!");
static_assert(offsetof(RBSocialMenuPartyWidget_Event_UpdateEntry, Row) == 0x00000C, "Member 'RBSocialMenuPartyWidget_Event_UpdateEntry::Row' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.OnEntryActionRequested
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuPartyWidget_OnEntryActionRequested final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBSocialMenuEntryAction                      Action;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSocialMenuPartyWidget_OnEntryActionRequested) == 0x000008, "Wrong alignment on RBSocialMenuPartyWidget_OnEntryActionRequested");
static_assert(sizeof(RBSocialMenuPartyWidget_OnEntryActionRequested) == 0x000010, "Wrong size on RBSocialMenuPartyWidget_OnEntryActionRequested");
static_assert(offsetof(RBSocialMenuPartyWidget_OnEntryActionRequested, Entry) == 0x000000, "Member 'RBSocialMenuPartyWidget_OnEntryActionRequested::Entry' has a wrong offset!");
static_assert(offsetof(RBSocialMenuPartyWidget_OnEntryActionRequested, Action) == 0x000008, "Member 'RBSocialMenuPartyWidget_OnEntryActionRequested::Action' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.OnPlayerJoinedGame
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuPartyWidget_OnPlayerJoinedGame final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_OnPlayerJoinedGame) == 0x000008, "Wrong alignment on RBSocialMenuPartyWidget_OnPlayerJoinedGame");
static_assert(sizeof(RBSocialMenuPartyWidget_OnPlayerJoinedGame) == 0x000008, "Wrong size on RBSocialMenuPartyWidget_OnPlayerJoinedGame");
static_assert(offsetof(RBSocialMenuPartyWidget_OnPlayerJoinedGame, RBPlayerState) == 0x000000, "Member 'RBSocialMenuPartyWidget_OnPlayerJoinedGame::RBPlayerState' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.OnPlayerLeaving
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_OnPlayerLeaving final
{
public:
	EPlayerLeaveTarget                            Target;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_OnPlayerLeaving) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_OnPlayerLeaving");
static_assert(sizeof(RBSocialMenuPartyWidget_OnPlayerLeaving) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_OnPlayerLeaving");
static_assert(offsetof(RBSocialMenuPartyWidget_OnPlayerLeaving, Target) == 0x000000, "Member 'RBSocialMenuPartyWidget_OnPlayerLeaving::Target' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.OnPlayerLeftGame
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuPartyWidget_OnPlayerLeftGame final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_OnPlayerLeftGame) == 0x000008, "Wrong alignment on RBSocialMenuPartyWidget_OnPlayerLeftGame");
static_assert(sizeof(RBSocialMenuPartyWidget_OnPlayerLeftGame) == 0x000008, "Wrong size on RBSocialMenuPartyWidget_OnPlayerLeftGame");
static_assert(offsetof(RBSocialMenuPartyWidget_OnPlayerLeftGame, RBPlayerState) == 0x000000, "Member 'RBSocialMenuPartyWidget_OnPlayerLeftGame::RBPlayerState' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.OnSocialMenuEntryActionCompleted
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuPartyWidget_OnSocialMenuEntryActionCompleted final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBSocialMenuEntryAction                      Action;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23D9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSocialMenuPartyWidget_OnSocialMenuEntryActionCompleted) == 0x000008, "Wrong alignment on RBSocialMenuPartyWidget_OnSocialMenuEntryActionCompleted");
static_assert(sizeof(RBSocialMenuPartyWidget_OnSocialMenuEntryActionCompleted) == 0x000010, "Wrong size on RBSocialMenuPartyWidget_OnSocialMenuEntryActionCompleted");
static_assert(offsetof(RBSocialMenuPartyWidget_OnSocialMenuEntryActionCompleted, Entry) == 0x000000, "Member 'RBSocialMenuPartyWidget_OnSocialMenuEntryActionCompleted::Entry' has a wrong offset!");
static_assert(offsetof(RBSocialMenuPartyWidget_OnSocialMenuEntryActionCompleted, Action) == 0x000008, "Member 'RBSocialMenuPartyWidget_OnSocialMenuEntryActionCompleted::Action' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.OnSocialMenuEntryActionStarted
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuPartyWidget_OnSocialMenuEntryActionStarted final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERBSocialMenuEntryAction                      Action;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DA[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSocialMenuPartyWidget_OnSocialMenuEntryActionStarted) == 0x000008, "Wrong alignment on RBSocialMenuPartyWidget_OnSocialMenuEntryActionStarted");
static_assert(sizeof(RBSocialMenuPartyWidget_OnSocialMenuEntryActionStarted) == 0x000010, "Wrong size on RBSocialMenuPartyWidget_OnSocialMenuEntryActionStarted");
static_assert(offsetof(RBSocialMenuPartyWidget_OnSocialMenuEntryActionStarted, Entry) == 0x000000, "Member 'RBSocialMenuPartyWidget_OnSocialMenuEntryActionStarted::Entry' has a wrong offset!");
static_assert(offsetof(RBSocialMenuPartyWidget_OnSocialMenuEntryActionStarted, Action) == 0x000008, "Member 'RBSocialMenuPartyWidget_OnSocialMenuEntryActionStarted::Action' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.OnSocialMenuEntryCustomizationUpdated
// 0x0008 (0x0008 - 0x0000)
struct RBSocialMenuPartyWidget_OnSocialMenuEntryCustomizationUpdated final
{
public:
	class URBSocialMenuEntry*                     Entry;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_OnSocialMenuEntryCustomizationUpdated) == 0x000008, "Wrong alignment on RBSocialMenuPartyWidget_OnSocialMenuEntryCustomizationUpdated");
static_assert(sizeof(RBSocialMenuPartyWidget_OnSocialMenuEntryCustomizationUpdated) == 0x000008, "Wrong size on RBSocialMenuPartyWidget_OnSocialMenuEntryCustomizationUpdated");
static_assert(offsetof(RBSocialMenuPartyWidget_OnSocialMenuEntryCustomizationUpdated, Entry) == 0x000000, "Member 'RBSocialMenuPartyWidget_OnSocialMenuEntryCustomizationUpdated::Entry' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.SetAllowPartyMemberInvites
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_SetAllowPartyMemberInvites final
{
public:
	bool                                          bAllowPartyMemberInvites;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_SetAllowPartyMemberInvites) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_SetAllowPartyMemberInvites");
static_assert(sizeof(RBSocialMenuPartyWidget_SetAllowPartyMemberInvites) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_SetAllowPartyMemberInvites");
static_assert(offsetof(RBSocialMenuPartyWidget_SetAllowPartyMemberInvites, bAllowPartyMemberInvites) == 0x000000, "Member 'RBSocialMenuPartyWidget_SetAllowPartyMemberInvites::bAllowPartyMemberInvites' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.SetPartyInviteFilter
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuPartyWidget_SetPartyInviteFilter final
{
public:
	int32                                         PartyInviteFilter;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_SetPartyInviteFilter) == 0x000004, "Wrong alignment on RBSocialMenuPartyWidget_SetPartyInviteFilter");
static_assert(sizeof(RBSocialMenuPartyWidget_SetPartyInviteFilter) == 0x000004, "Wrong size on RBSocialMenuPartyWidget_SetPartyInviteFilter");
static_assert(offsetof(RBSocialMenuPartyWidget_SetPartyInviteFilter, PartyInviteFilter) == 0x000000, "Member 'RBSocialMenuPartyWidget_SetPartyInviteFilter::PartyInviteFilter' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.SetPartyPrivacy
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_SetPartyPrivacy final
{
public:
	EPartyPrivacy                                 Privacy;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_SetPartyPrivacy) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_SetPartyPrivacy");
static_assert(sizeof(RBSocialMenuPartyWidget_SetPartyPrivacy) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_SetPartyPrivacy");
static_assert(offsetof(RBSocialMenuPartyWidget_SetPartyPrivacy, Privacy) == 0x000000, "Member 'RBSocialMenuPartyWidget_SetPartyPrivacy::Privacy' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.AllowPartyMemberInvites
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_AllowPartyMemberInvites final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_AllowPartyMemberInvites) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_AllowPartyMemberInvites");
static_assert(sizeof(RBSocialMenuPartyWidget_AllowPartyMemberInvites) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_AllowPartyMemberInvites");
static_assert(offsetof(RBSocialMenuPartyWidget_AllowPartyMemberInvites, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_AllowPartyMemberInvites::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.CanLeaveParty
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_CanLeaveParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_CanLeaveParty) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_CanLeaveParty");
static_assert(sizeof(RBSocialMenuPartyWidget_CanLeaveParty) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_CanLeaveParty");
static_assert(offsetof(RBSocialMenuPartyWidget_CanLeaveParty, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_CanLeaveParty::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.GetPartyInviteFilter
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuPartyWidget_GetPartyInviteFilter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_GetPartyInviteFilter) == 0x000004, "Wrong alignment on RBSocialMenuPartyWidget_GetPartyInviteFilter");
static_assert(sizeof(RBSocialMenuPartyWidget_GetPartyInviteFilter) == 0x000004, "Wrong size on RBSocialMenuPartyWidget_GetPartyInviteFilter");
static_assert(offsetof(RBSocialMenuPartyWidget_GetPartyInviteFilter, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_GetPartyInviteFilter::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.GetPartyPrivacy
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_GetPartyPrivacy final
{
public:
	EPartyPrivacy                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_GetPartyPrivacy) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_GetPartyPrivacy");
static_assert(sizeof(RBSocialMenuPartyWidget_GetPartyPrivacy) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_GetPartyPrivacy");
static_assert(offsetof(RBSocialMenuPartyWidget_GetPartyPrivacy, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_GetPartyPrivacy::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.IsCrossplayEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_IsCrossplayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_IsCrossplayEnabled) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_IsCrossplayEnabled");
static_assert(sizeof(RBSocialMenuPartyWidget_IsCrossplayEnabled) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_IsCrossplayEnabled");
static_assert(offsetof(RBSocialMenuPartyWidget_IsCrossplayEnabled, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_IsCrossplayEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.IsDataPending
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_IsDataPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_IsDataPending) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_IsDataPending");
static_assert(sizeof(RBSocialMenuPartyWidget_IsDataPending) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_IsDataPending");
static_assert(offsetof(RBSocialMenuPartyWidget_IsDataPending, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_IsDataPending::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_IsEmpty) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_IsEmpty");
static_assert(sizeof(RBSocialMenuPartyWidget_IsEmpty) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_IsEmpty");
static_assert(offsetof(RBSocialMenuPartyWidget_IsEmpty, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_IsEmpty::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.IsOperationPending
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_IsOperationPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_IsOperationPending) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_IsOperationPending");
static_assert(sizeof(RBSocialMenuPartyWidget_IsOperationPending) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_IsOperationPending");
static_assert(offsetof(RBSocialMenuPartyWidget_IsOperationPending, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_IsOperationPending::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.IsPartyOwner
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_IsPartyOwner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_IsPartyOwner) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_IsPartyOwner");
static_assert(sizeof(RBSocialMenuPartyWidget_IsPartyOwner) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_IsPartyOwner");
static_assert(offsetof(RBSocialMenuPartyWidget_IsPartyOwner, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_IsPartyOwner::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.ShouldDisplayCrossplaySetting
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_ShouldDisplayCrossplaySetting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_ShouldDisplayCrossplaySetting) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_ShouldDisplayCrossplaySetting");
static_assert(sizeof(RBSocialMenuPartyWidget_ShouldDisplayCrossplaySetting) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_ShouldDisplayCrossplaySetting");
static_assert(offsetof(RBSocialMenuPartyWidget_ShouldDisplayCrossplaySetting, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_ShouldDisplayCrossplaySetting::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.ShouldDisplayGroupInvitationRequests
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_ShouldDisplayGroupInvitationRequests final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_ShouldDisplayGroupInvitationRequests) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_ShouldDisplayGroupInvitationRequests");
static_assert(sizeof(RBSocialMenuPartyWidget_ShouldDisplayGroupInvitationRequests) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_ShouldDisplayGroupInvitationRequests");
static_assert(offsetof(RBSocialMenuPartyWidget_ShouldDisplayGroupInvitationRequests, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_ShouldDisplayGroupInvitationRequests::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuPartyWidget.ShouldShowPartyOptions
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuPartyWidget_ShouldShowPartyOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuPartyWidget_ShouldShowPartyOptions) == 0x000001, "Wrong alignment on RBSocialMenuPartyWidget_ShouldShowPartyOptions");
static_assert(sizeof(RBSocialMenuPartyWidget_ShouldShowPartyOptions) == 0x000001, "Wrong size on RBSocialMenuPartyWidget_ShouldShowPartyOptions");
static_assert(offsetof(RBSocialMenuPartyWidget_ShouldShowPartyOptions, ReturnValue) == 0x000000, "Member 'RBSocialMenuPartyWidget_ShouldShowPartyOptions::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuSceneActor.Event_UpdateNumDisplayedSlots
// 0x0004 (0x0004 - 0x0000)
struct RBSocialMenuSceneActor_Event_UpdateNumDisplayedSlots final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuSceneActor_Event_UpdateNumDisplayedSlots) == 0x000004, "Wrong alignment on RBSocialMenuSceneActor_Event_UpdateNumDisplayedSlots");
static_assert(sizeof(RBSocialMenuSceneActor_Event_UpdateNumDisplayedSlots) == 0x000004, "Wrong size on RBSocialMenuSceneActor_Event_UpdateNumDisplayedSlots");
static_assert(offsetof(RBSocialMenuSceneActor_Event_UpdateNumDisplayedSlots, Num) == 0x000000, "Member 'RBSocialMenuSceneActor_Event_UpdateNumDisplayedSlots::Num' has a wrong offset!");

// Function OPP.RBSocialMenuSceneActor.IsFailureScene
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuSceneActor_IsFailureScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuSceneActor_IsFailureScene) == 0x000001, "Wrong alignment on RBSocialMenuSceneActor_IsFailureScene");
static_assert(sizeof(RBSocialMenuSceneActor_IsFailureScene) == 0x000001, "Wrong size on RBSocialMenuSceneActor_IsFailureScene");
static_assert(offsetof(RBSocialMenuSceneActor_IsFailureScene, ReturnValue) == 0x000000, "Member 'RBSocialMenuSceneActor_IsFailureScene::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuSceneActor.GetMenuCharacter
// 0x0010 (0x0010 - 0x0000)
struct RBSocialMenuSceneActor_GetMenuCharacter final
{
public:
	ESocialMenuSceneActorSlot                     Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBMenuCharacter*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuSceneActor_GetMenuCharacter) == 0x000008, "Wrong alignment on RBSocialMenuSceneActor_GetMenuCharacter");
static_assert(sizeof(RBSocialMenuSceneActor_GetMenuCharacter) == 0x000010, "Wrong size on RBSocialMenuSceneActor_GetMenuCharacter");
static_assert(offsetof(RBSocialMenuSceneActor_GetMenuCharacter, Slot) == 0x000000, "Member 'RBSocialMenuSceneActor_GetMenuCharacter::Slot' has a wrong offset!");
static_assert(offsetof(RBSocialMenuSceneActor_GetMenuCharacter, ReturnValue) == 0x000008, "Member 'RBSocialMenuSceneActor_GetMenuCharacter::ReturnValue' has a wrong offset!");

// Function OPP.RBSocialMenuSceneActor.GetType
// 0x0001 (0x0001 - 0x0000)
struct RBSocialMenuSceneActor_GetType final
{
public:
	ESocialMenuSceneActorType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSocialMenuSceneActor_GetType) == 0x000001, "Wrong alignment on RBSocialMenuSceneActor_GetType");
static_assert(sizeof(RBSocialMenuSceneActor_GetType) == 0x000001, "Wrong size on RBSocialMenuSceneActor_GetType");
static_assert(offsetof(RBSocialMenuSceneActor_GetType, ReturnValue) == 0x000000, "Member 'RBSocialMenuSceneActor_GetType::ReturnValue' has a wrong offset!");

// Function OPP.RBSoundTrap.BP_OnHitByThrowable
// 0x0018 (0x0018 - 0x0000)
struct RBSoundTrap_BP_OnHitByThrowable final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E0[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBThrowableWeapon*                     ThrowableWeapon;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundTrap_BP_OnHitByThrowable) == 0x000008, "Wrong alignment on RBSoundTrap_BP_OnHitByThrowable");
static_assert(sizeof(RBSoundTrap_BP_OnHitByThrowable) == 0x000018, "Wrong size on RBSoundTrap_BP_OnHitByThrowable");
static_assert(offsetof(RBSoundTrap_BP_OnHitByThrowable, HitLocation) == 0x000000, "Member 'RBSoundTrap_BP_OnHitByThrowable::HitLocation' has a wrong offset!");
static_assert(offsetof(RBSoundTrap_BP_OnHitByThrowable, ThrowableWeapon) == 0x000010, "Member 'RBSoundTrap_BP_OnHitByThrowable::ThrowableWeapon' has a wrong offset!");

// Function OPP.RBSoundTrap.Multicast_OnTrapTriggered
// 0x0008 (0x0008 - 0x0000)
struct RBSoundTrap_Multicast_OnTrapTriggered final
{
public:
	class ARBPawn*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundTrap_Multicast_OnTrapTriggered) == 0x000008, "Wrong alignment on RBSoundTrap_Multicast_OnTrapTriggered");
static_assert(sizeof(RBSoundTrap_Multicast_OnTrapTriggered) == 0x000008, "Wrong size on RBSoundTrap_Multicast_OnTrapTriggered");
static_assert(offsetof(RBSoundTrap_Multicast_OnTrapTriggered, Source) == 0x000000, "Member 'RBSoundTrap_Multicast_OnTrapTriggered::Source' has a wrong offset!");

// Function OPP.RBSoundTrap.OnCapsuleBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBSoundTrap_OnCapsuleBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23E1[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundTrap_OnCapsuleBeginOverlap) == 0x000008, "Wrong alignment on RBSoundTrap_OnCapsuleBeginOverlap");
static_assert(sizeof(RBSoundTrap_OnCapsuleBeginOverlap) == 0x0000A8, "Wrong size on RBSoundTrap_OnCapsuleBeginOverlap");
static_assert(offsetof(RBSoundTrap_OnCapsuleBeginOverlap, OverlappedComp) == 0x000000, "Member 'RBSoundTrap_OnCapsuleBeginOverlap::OverlappedComp' has a wrong offset!");
static_assert(offsetof(RBSoundTrap_OnCapsuleBeginOverlap, OtherActor) == 0x000008, "Member 'RBSoundTrap_OnCapsuleBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBSoundTrap_OnCapsuleBeginOverlap, OtherComp) == 0x000010, "Member 'RBSoundTrap_OnCapsuleBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBSoundTrap_OnCapsuleBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBSoundTrap_OnCapsuleBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBSoundTrap_OnCapsuleBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBSoundTrap_OnCapsuleBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBSoundTrap_OnCapsuleBeginOverlap, SweepResult) == 0x000020, "Member 'RBSoundTrap_OnCapsuleBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBSoundTrap.BP_GetCollisionCapsule
// 0x0008 (0x0008 - 0x0000)
struct RBSoundTrap_BP_GetCollisionCapsule final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundTrap_BP_GetCollisionCapsule) == 0x000008, "Wrong alignment on RBSoundTrap_BP_GetCollisionCapsule");
static_assert(sizeof(RBSoundTrap_BP_GetCollisionCapsule) == 0x000008, "Wrong size on RBSoundTrap_BP_GetCollisionCapsule");
static_assert(offsetof(RBSoundTrap_BP_GetCollisionCapsule, ReturnValue) == 0x000000, "Member 'RBSoundTrap_BP_GetCollisionCapsule::ReturnValue' has a wrong offset!");

// Function OPP.RBSoundVolume.AddDynamicEvent
// 0x0010 (0x0010 - 0x0000)
struct RBSoundVolume_AddDynamicEvent final
{
public:
	struct FSoundTriggerEvent                     SoundTriggerEvent;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundVolume_AddDynamicEvent) == 0x000008, "Wrong alignment on RBSoundVolume_AddDynamicEvent");
static_assert(sizeof(RBSoundVolume_AddDynamicEvent) == 0x000010, "Wrong size on RBSoundVolume_AddDynamicEvent");
static_assert(offsetof(RBSoundVolume_AddDynamicEvent, SoundTriggerEvent) == 0x000000, "Member 'RBSoundVolume_AddDynamicEvent::SoundTriggerEvent' has a wrong offset!");

// Function OPP.RBSoundVolume.RemoveDynamicEvent
// 0x0010 (0x0010 - 0x0000)
struct RBSoundVolume_RemoveDynamicEvent final
{
public:
	struct FSoundTriggerEvent                     SoundTriggerEvent;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSoundVolume_RemoveDynamicEvent) == 0x000008, "Wrong alignment on RBSoundVolume_RemoveDynamicEvent");
static_assert(sizeof(RBSoundVolume_RemoveDynamicEvent) == 0x000010, "Wrong size on RBSoundVolume_RemoveDynamicEvent");
static_assert(offsetof(RBSoundVolume_RemoveDynamicEvent, SoundTriggerEvent) == 0x000000, "Member 'RBSoundVolume_RemoveDynamicEvent::SoundTriggerEvent' has a wrong offset!");

// Function OPP.RBSpectraSkill.Event_OnVisionActiveChanged
// 0x0002 (0x0002 - 0x0000)
struct RBSpectraSkill_Event_OnVisionActiveChanged final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullEffect;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSpectraSkill_Event_OnVisionActiveChanged) == 0x000001, "Wrong alignment on RBSpectraSkill_Event_OnVisionActiveChanged");
static_assert(sizeof(RBSpectraSkill_Event_OnVisionActiveChanged) == 0x000002, "Wrong size on RBSpectraSkill_Event_OnVisionActiveChanged");
static_assert(offsetof(RBSpectraSkill_Event_OnVisionActiveChanged, IsActive) == 0x000000, "Member 'RBSpectraSkill_Event_OnVisionActiveChanged::IsActive' has a wrong offset!");
static_assert(offsetof(RBSpectraSkill_Event_OnVisionActiveChanged, bFullEffect) == 0x000001, "Member 'RBSpectraSkill_Event_OnVisionActiveChanged::bFullEffect' has a wrong offset!");

// Function OPP.RBSpectraSkill.Event_OnVisionActorAdded
// 0x0008 (0x0008 - 0x0000)
struct RBSpectraSkill_Event_OnVisionActorAdded final
{
public:
	class AActor*                                 VisionActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSpectraSkill_Event_OnVisionActorAdded) == 0x000008, "Wrong alignment on RBSpectraSkill_Event_OnVisionActorAdded");
static_assert(sizeof(RBSpectraSkill_Event_OnVisionActorAdded) == 0x000008, "Wrong size on RBSpectraSkill_Event_OnVisionActorAdded");
static_assert(offsetof(RBSpectraSkill_Event_OnVisionActorAdded, VisionActor) == 0x000000, "Member 'RBSpectraSkill_Event_OnVisionActorAdded::VisionActor' has a wrong offset!");

// Function OPP.RBSpectraSkill.Event_OnVisionActorRemoved
// 0x0008 (0x0008 - 0x0000)
struct RBSpectraSkill_Event_OnVisionActorRemoved final
{
public:
	class AActor*                                 VisionActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSpectraSkill_Event_OnVisionActorRemoved) == 0x000008, "Wrong alignment on RBSpectraSkill_Event_OnVisionActorRemoved");
static_assert(sizeof(RBSpectraSkill_Event_OnVisionActorRemoved) == 0x000008, "Wrong size on RBSpectraSkill_Event_OnVisionActorRemoved");
static_assert(offsetof(RBSpectraSkill_Event_OnVisionActorRemoved, VisionActor) == 0x000000, "Member 'RBSpectraSkill_Event_OnVisionActorRemoved::VisionActor' has a wrong offset!");

// Function OPP.RBSpectraSkill.Event_OnVisionFullEffectStateChanged
// 0x0001 (0x0001 - 0x0000)
struct RBSpectraSkill_Event_OnVisionFullEffectStateChanged final
{
public:
	bool                                          bFullEffect;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSpectraSkill_Event_OnVisionFullEffectStateChanged) == 0x000001, "Wrong alignment on RBSpectraSkill_Event_OnVisionFullEffectStateChanged");
static_assert(sizeof(RBSpectraSkill_Event_OnVisionFullEffectStateChanged) == 0x000001, "Wrong size on RBSpectraSkill_Event_OnVisionFullEffectStateChanged");
static_assert(offsetof(RBSpectraSkill_Event_OnVisionFullEffectStateChanged, bFullEffect) == 0x000000, "Member 'RBSpectraSkill_Event_OnVisionFullEffectStateChanged::bFullEffect' has a wrong offset!");

// Function OPP.RBSplineFollowingStation.BP_SetStationEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBSplineFollowingStation_BP_SetStationEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingStation_BP_SetStationEnabled) == 0x000001, "Wrong alignment on RBSplineFollowingStation_BP_SetStationEnabled");
static_assert(sizeof(RBSplineFollowingStation_BP_SetStationEnabled) == 0x000001, "Wrong size on RBSplineFollowingStation_BP_SetStationEnabled");
static_assert(offsetof(RBSplineFollowingStation_BP_SetStationEnabled, bEnabled) == 0x000000, "Member 'RBSplineFollowingStation_BP_SetStationEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBSplineFollowingStation.Event_OnSplineFollowingActorAnimationDone
// 0x0008 (0x0008 - 0x0000)
struct RBSplineFollowingStation_Event_OnSplineFollowingActorAnimationDone final
{
public:
	class ARBSplineFollowingActor*                SplineFollowingActor;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingStation_Event_OnSplineFollowingActorAnimationDone) == 0x000008, "Wrong alignment on RBSplineFollowingStation_Event_OnSplineFollowingActorAnimationDone");
static_assert(sizeof(RBSplineFollowingStation_Event_OnSplineFollowingActorAnimationDone) == 0x000008, "Wrong size on RBSplineFollowingStation_Event_OnSplineFollowingActorAnimationDone");
static_assert(offsetof(RBSplineFollowingStation_Event_OnSplineFollowingActorAnimationDone, SplineFollowingActor) == 0x000000, "Member 'RBSplineFollowingStation_Event_OnSplineFollowingActorAnimationDone::SplineFollowingActor' has a wrong offset!");

// Function OPP.RBSplineFollowingStation.Multicast_OnSplineFollowingActorReachedStation
// 0x0008 (0x0008 - 0x0000)
struct RBSplineFollowingStation_Multicast_OnSplineFollowingActorReachedStation final
{
public:
	class ARBSplineFollowingActor*                SplineFollowingActor;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingStation_Multicast_OnSplineFollowingActorReachedStation) == 0x000008, "Wrong alignment on RBSplineFollowingStation_Multicast_OnSplineFollowingActorReachedStation");
static_assert(sizeof(RBSplineFollowingStation_Multicast_OnSplineFollowingActorReachedStation) == 0x000008, "Wrong size on RBSplineFollowingStation_Multicast_OnSplineFollowingActorReachedStation");
static_assert(offsetof(RBSplineFollowingStation_Multicast_OnSplineFollowingActorReachedStation, SplineFollowingActor) == 0x000000, "Member 'RBSplineFollowingStation_Multicast_OnSplineFollowingActorReachedStation::SplineFollowingActor' has a wrong offset!");

// Function OPP.RBSplineFollowingStation.OnActorEnterProximity
// 0x0008 (0x0008 - 0x0000)
struct RBSplineFollowingStation_OnActorEnterProximity final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingStation_OnActorEnterProximity) == 0x000008, "Wrong alignment on RBSplineFollowingStation_OnActorEnterProximity");
static_assert(sizeof(RBSplineFollowingStation_OnActorEnterProximity) == 0x000008, "Wrong size on RBSplineFollowingStation_OnActorEnterProximity");
static_assert(offsetof(RBSplineFollowingStation_OnActorEnterProximity, Actor) == 0x000000, "Member 'RBSplineFollowingStation_OnActorEnterProximity::Actor' has a wrong offset!");

// Function OPP.RBSplineFollowingStation.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBSplineFollowingStation_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F1[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingStation_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBSplineFollowingStation_OnComponentBeginOverlap");
static_assert(sizeof(RBSplineFollowingStation_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBSplineFollowingStation_OnComponentBeginOverlap");
static_assert(offsetof(RBSplineFollowingStation_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBSplineFollowingStation_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBSplineFollowingStation_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBSplineFollowingStation_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBSplineFollowingStation_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBSplineFollowingStation_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBSplineFollowingStation_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBSplineFollowingStation_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBSplineFollowingStation_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBSplineFollowingStation_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBSplineFollowingStation_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBSplineFollowingStation_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBSplineFollowingStation.OnSplineFollowingActorReachedStation
// 0x0008 (0x0008 - 0x0000)
struct RBSplineFollowingStation_OnSplineFollowingActorReachedStation final
{
public:
	class ARBSplineFollowingActor*                SplineFollowingActor;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineFollowingStation_OnSplineFollowingActorReachedStation) == 0x000008, "Wrong alignment on RBSplineFollowingStation_OnSplineFollowingActorReachedStation");
static_assert(sizeof(RBSplineFollowingStation_OnSplineFollowingActorReachedStation) == 0x000008, "Wrong size on RBSplineFollowingStation_OnSplineFollowingActorReachedStation");
static_assert(offsetof(RBSplineFollowingStation_OnSplineFollowingActorReachedStation, SplineFollowingActor) == 0x000000, "Member 'RBSplineFollowingStation_OnSplineFollowingActorReachedStation::SplineFollowingActor' has a wrong offset!");

// Function OPP.RBSplineHelperComponent.OnLargePickupDropped
// 0x0008 (0x0008 - 0x0000)
struct RBSplineHelperComponent_OnLargePickupDropped final
{
public:
	class ARBLargePickup*                         LargePickup;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineHelperComponent_OnLargePickupDropped) == 0x000008, "Wrong alignment on RBSplineHelperComponent_OnLargePickupDropped");
static_assert(sizeof(RBSplineHelperComponent_OnLargePickupDropped) == 0x000008, "Wrong size on RBSplineHelperComponent_OnLargePickupDropped");
static_assert(offsetof(RBSplineHelperComponent_OnLargePickupDropped, LargePickup) == 0x000000, "Member 'RBSplineHelperComponent_OnLargePickupDropped::LargePickup' has a wrong offset!");

// Function OPP.RBSplineHelperComponent.OnLargePickupHoldingPlayerChanged
// 0x0010 (0x0010 - 0x0000)
struct RBSplineHelperComponent_OnLargePickupHoldingPlayerChanged final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBLargePickup*                         LargePickup;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplineHelperComponent_OnLargePickupHoldingPlayerChanged) == 0x000008, "Wrong alignment on RBSplineHelperComponent_OnLargePickupHoldingPlayerChanged");
static_assert(sizeof(RBSplineHelperComponent_OnLargePickupHoldingPlayerChanged) == 0x000010, "Wrong size on RBSplineHelperComponent_OnLargePickupHoldingPlayerChanged");
static_assert(offsetof(RBSplineHelperComponent_OnLargePickupHoldingPlayerChanged, Pawn) == 0x000000, "Member 'RBSplineHelperComponent_OnLargePickupHoldingPlayerChanged::Pawn' has a wrong offset!");
static_assert(offsetof(RBSplineHelperComponent_OnLargePickupHoldingPlayerChanged, LargePickup) == 0x000008, "Member 'RBSplineHelperComponent_OnLargePickupHoldingPlayerChanged::LargePickup' has a wrong offset!");

// Function OPP.RBSplineMeshActor.BP_SetNextSpline
// 0x0010 (0x0010 - 0x0000)
struct RBSplineMeshActor_BP_SetNextSpline final
{
public:
	class ARBSplineMeshActor*                     NextSplineMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToFirstNode;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F8[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSplineMeshActor_BP_SetNextSpline) == 0x000008, "Wrong alignment on RBSplineMeshActor_BP_SetNextSpline");
static_assert(sizeof(RBSplineMeshActor_BP_SetNextSpline) == 0x000010, "Wrong size on RBSplineMeshActor_BP_SetNextSpline");
static_assert(offsetof(RBSplineMeshActor_BP_SetNextSpline, NextSplineMesh) == 0x000000, "Member 'RBSplineMeshActor_BP_SetNextSpline::NextSplineMesh' has a wrong offset!");
static_assert(offsetof(RBSplineMeshActor_BP_SetNextSpline, bToFirstNode) == 0x000008, "Member 'RBSplineMeshActor_BP_SetNextSpline::bToFirstNode' has a wrong offset!");

// Function OPP.RBSplineMeshActor.BP_SetPreviousSpline
// 0x0010 (0x0010 - 0x0000)
struct RBSplineMeshActor_BP_SetPreviousSpline final
{
public:
	class ARBSplineMeshActor*                     PreviousSplineMesh;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToLastNode;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23F9[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBSplineMeshActor_BP_SetPreviousSpline) == 0x000008, "Wrong alignment on RBSplineMeshActor_BP_SetPreviousSpline");
static_assert(sizeof(RBSplineMeshActor_BP_SetPreviousSpline) == 0x000010, "Wrong size on RBSplineMeshActor_BP_SetPreviousSpline");
static_assert(offsetof(RBSplineMeshActor_BP_SetPreviousSpline, PreviousSplineMesh) == 0x000000, "Member 'RBSplineMeshActor_BP_SetPreviousSpline::PreviousSplineMesh' has a wrong offset!");
static_assert(offsetof(RBSplineMeshActor_BP_SetPreviousSpline, bToLastNode) == 0x000008, "Member 'RBSplineMeshActor_BP_SetPreviousSpline::bToLastNode' has a wrong offset!");

// Function OPP.RBSplinePushable.AutoMove
// 0x0008 (0x0008 - 0x0000)
struct RBSplinePushable_AutoMove final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplinePushable_AutoMove) == 0x000004, "Wrong alignment on RBSplinePushable_AutoMove");
static_assert(sizeof(RBSplinePushable_AutoMove) == 0x000008, "Wrong size on RBSplinePushable_AutoMove");
static_assert(offsetof(RBSplinePushable_AutoMove, Distance) == 0x000000, "Member 'RBSplinePushable_AutoMove::Distance' has a wrong offset!");
static_assert(offsetof(RBSplinePushable_AutoMove, Speed) == 0x000004, "Member 'RBSplinePushable_AutoMove::Speed' has a wrong offset!");

// Function OPP.RBSplinePushable.BP_PostRotated
// 0x0018 (0x0018 - 0x0000)
struct RBSplinePushable_BP_PostRotated final
{
public:
	struct FRotator                               FrontRotation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RearRotation;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplinePushable_BP_PostRotated) == 0x000004, "Wrong alignment on RBSplinePushable_BP_PostRotated");
static_assert(sizeof(RBSplinePushable_BP_PostRotated) == 0x000018, "Wrong size on RBSplinePushable_BP_PostRotated");
static_assert(offsetof(RBSplinePushable_BP_PostRotated, FrontRotation) == 0x000000, "Member 'RBSplinePushable_BP_PostRotated::FrontRotation' has a wrong offset!");
static_assert(offsetof(RBSplinePushable_BP_PostRotated, RearRotation) == 0x00000C, "Member 'RBSplinePushable_BP_PostRotated::RearRotation' has a wrong offset!");

// Function OPP.RBSplinePushable.IsRollbacking
// 0x0001 (0x0001 - 0x0000)
struct RBSplinePushable_IsRollbacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSplinePushable_IsRollbacking) == 0x000001, "Wrong alignment on RBSplinePushable_IsRollbacking");
static_assert(sizeof(RBSplinePushable_IsRollbacking) == 0x000001, "Wrong size on RBSplinePushable_IsRollbacking");
static_assert(offsetof(RBSplinePushable_IsRollbacking, ReturnValue) == 0x000000, "Member 'RBSplinePushable_IsRollbacking::ReturnValue' has a wrong offset!");

// Function OPP.RBStairsMarker.CastLocationOnStairs
// 0x002C (0x002C - 0x0000)
struct RBStairsMarker_CastLocationOnStairs final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustToCenterOfStepDepth;                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustToCenterOfStepHeight;                       // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2402[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DropOffset;                                        // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStairsMarker_CastLocationOnStairs) == 0x000004, "Wrong alignment on RBStairsMarker_CastLocationOnStairs");
static_assert(sizeof(RBStairsMarker_CastLocationOnStairs) == 0x00002C, "Wrong size on RBStairsMarker_CastLocationOnStairs");
static_assert(offsetof(RBStairsMarker_CastLocationOnStairs, Location) == 0x000000, "Member 'RBStairsMarker_CastLocationOnStairs::Location' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_CastLocationOnStairs, Radius) == 0x00000C, "Member 'RBStairsMarker_CastLocationOnStairs::Radius' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_CastLocationOnStairs, bAdjustToCenterOfStepDepth) == 0x000010, "Member 'RBStairsMarker_CastLocationOnStairs::bAdjustToCenterOfStepDepth' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_CastLocationOnStairs, bAdjustToCenterOfStepHeight) == 0x000011, "Member 'RBStairsMarker_CastLocationOnStairs::bAdjustToCenterOfStepHeight' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_CastLocationOnStairs, DropOffset) == 0x000014, "Member 'RBStairsMarker_CastLocationOnStairs::DropOffset' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_CastLocationOnStairs, ReturnValue) == 0x000020, "Member 'RBStairsMarker_CastLocationOnStairs::ReturnValue' has a wrong offset!");

// Function OPP.RBStairsMarker.GetApproximateStairsDistanceSqr2D
// 0x0010 (0x0010 - 0x0000)
struct RBStairsMarker_GetApproximateStairsDistanceSqr2D final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStairsMarker_GetApproximateStairsDistanceSqr2D) == 0x000004, "Wrong alignment on RBStairsMarker_GetApproximateStairsDistanceSqr2D");
static_assert(sizeof(RBStairsMarker_GetApproximateStairsDistanceSqr2D) == 0x000010, "Wrong size on RBStairsMarker_GetApproximateStairsDistanceSqr2D");
static_assert(offsetof(RBStairsMarker_GetApproximateStairsDistanceSqr2D, Location) == 0x000000, "Member 'RBStairsMarker_GetApproximateStairsDistanceSqr2D::Location' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_GetApproximateStairsDistanceSqr2D, ReturnValue) == 0x00000C, "Member 'RBStairsMarker_GetApproximateStairsDistanceSqr2D::ReturnValue' has a wrong offset!");

// Function OPP.RBStairsMarker.GetStairsDownDirection
// 0x000C (0x000C - 0x0000)
struct RBStairsMarker_GetStairsDownDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStairsMarker_GetStairsDownDirection) == 0x000004, "Wrong alignment on RBStairsMarker_GetStairsDownDirection");
static_assert(sizeof(RBStairsMarker_GetStairsDownDirection) == 0x00000C, "Wrong size on RBStairsMarker_GetStairsDownDirection");
static_assert(offsetof(RBStairsMarker_GetStairsDownDirection, ReturnValue) == 0x000000, "Member 'RBStairsMarker_GetStairsDownDirection::ReturnValue' has a wrong offset!");

// Function OPP.RBStairsMarker.GetStairsKnockdownSlideVelocity
// 0x0018 (0x0018 - 0x0000)
struct RBStairsMarker_GetStairsKnockdownSlideVelocity final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2403[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStairsMarker_GetStairsKnockdownSlideVelocity) == 0x000008, "Wrong alignment on RBStairsMarker_GetStairsKnockdownSlideVelocity");
static_assert(sizeof(RBStairsMarker_GetStairsKnockdownSlideVelocity) == 0x000018, "Wrong size on RBStairsMarker_GetStairsKnockdownSlideVelocity");
static_assert(offsetof(RBStairsMarker_GetStairsKnockdownSlideVelocity, Player) == 0x000000, "Member 'RBStairsMarker_GetStairsKnockdownSlideVelocity::Player' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_GetStairsKnockdownSlideVelocity, ReturnValue) == 0x000008, "Member 'RBStairsMarker_GetStairsKnockdownSlideVelocity::ReturnValue' has a wrong offset!");

// Function OPP.RBStairsMarker.IsLocationOnStairs
// 0x0014 (0x0014 - 0x0000)
struct RBStairsMarker_IsLocationOnStairs final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsiderPhantomSteps;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2404[0x2];                                     // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStairsMarker_IsLocationOnStairs) == 0x000004, "Wrong alignment on RBStairsMarker_IsLocationOnStairs");
static_assert(sizeof(RBStairsMarker_IsLocationOnStairs) == 0x000014, "Wrong size on RBStairsMarker_IsLocationOnStairs");
static_assert(offsetof(RBStairsMarker_IsLocationOnStairs, Location) == 0x000000, "Member 'RBStairsMarker_IsLocationOnStairs::Location' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_IsLocationOnStairs, Radius) == 0x00000C, "Member 'RBStairsMarker_IsLocationOnStairs::Radius' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_IsLocationOnStairs, bConsiderPhantomSteps) == 0x000010, "Member 'RBStairsMarker_IsLocationOnStairs::bConsiderPhantomSteps' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_IsLocationOnStairs, ReturnValue) == 0x000011, "Member 'RBStairsMarker_IsLocationOnStairs::ReturnValue' has a wrong offset!");

// Function OPP.RBStairsMarker.IsLocationValidInZ
// 0x0014 (0x0014 - 0x0000)
struct RBStairsMarker_IsLocationValidInZ final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZBuffer;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2405[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStairsMarker_IsLocationValidInZ) == 0x000004, "Wrong alignment on RBStairsMarker_IsLocationValidInZ");
static_assert(sizeof(RBStairsMarker_IsLocationValidInZ) == 0x000014, "Wrong size on RBStairsMarker_IsLocationValidInZ");
static_assert(offsetof(RBStairsMarker_IsLocationValidInZ, Location) == 0x000000, "Member 'RBStairsMarker_IsLocationValidInZ::Location' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_IsLocationValidInZ, ZBuffer) == 0x00000C, "Member 'RBStairsMarker_IsLocationValidInZ::ZBuffer' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_IsLocationValidInZ, ReturnValue) == 0x000010, "Member 'RBStairsMarker_IsLocationValidInZ::ReturnValue' has a wrong offset!");

// Function OPP.RBStairsMarker.RotateObjectOnStairsSlope
// 0x0020 (0x0020 - 0x0000)
struct RBStairsMarker_RotateObjectOnStairsSlope final
{
public:
	struct FQuat                                  ObjectRotationQuat;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStairsMarker_RotateObjectOnStairsSlope) == 0x000010, "Wrong alignment on RBStairsMarker_RotateObjectOnStairsSlope");
static_assert(sizeof(RBStairsMarker_RotateObjectOnStairsSlope) == 0x000020, "Wrong size on RBStairsMarker_RotateObjectOnStairsSlope");
static_assert(offsetof(RBStairsMarker_RotateObjectOnStairsSlope, ObjectRotationQuat) == 0x000000, "Member 'RBStairsMarker_RotateObjectOnStairsSlope::ObjectRotationQuat' has a wrong offset!");
static_assert(offsetof(RBStairsMarker_RotateObjectOnStairsSlope, ReturnValue) == 0x000010, "Member 'RBStairsMarker_RotateObjectOnStairsSlope::ReturnValue' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.Event_OnLocallyStalkingNPCBegin
// 0x0008 (0x0008 - 0x0000)
struct RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCBegin final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCBegin) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCBegin");
static_assert(sizeof(RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCBegin) == 0x000008, "Wrong size on RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCBegin");
static_assert(offsetof(RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCBegin, NPC) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCBegin::NPC' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.Event_OnLocallyStalkingNPCEnd
// 0x0008 (0x0008 - 0x0000)
struct RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCEnd final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCEnd) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCEnd");
static_assert(sizeof(RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCEnd) == 0x000008, "Wrong size on RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCEnd");
static_assert(offsetof(RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCEnd, NPC) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_Event_OnLocallyStalkingNPCEnd::NPC' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.Event_OnNPCStalkedBegin
// 0x0008 (0x0008 - 0x0000)
struct RBStalkerObjectiveCoordinator_Event_OnNPCStalkedBegin final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_Event_OnNPCStalkedBegin) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_Event_OnNPCStalkedBegin");
static_assert(sizeof(RBStalkerObjectiveCoordinator_Event_OnNPCStalkedBegin) == 0x000008, "Wrong size on RBStalkerObjectiveCoordinator_Event_OnNPCStalkedBegin");
static_assert(offsetof(RBStalkerObjectiveCoordinator_Event_OnNPCStalkedBegin, NPC) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_Event_OnNPCStalkedBegin::NPC' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.Event_OnNPCStalkedEnd
// 0x0008 (0x0008 - 0x0000)
struct RBStalkerObjectiveCoordinator_Event_OnNPCStalkedEnd final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_Event_OnNPCStalkedEnd) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_Event_OnNPCStalkedEnd");
static_assert(sizeof(RBStalkerObjectiveCoordinator_Event_OnNPCStalkedEnd) == 0x000008, "Wrong size on RBStalkerObjectiveCoordinator_Event_OnNPCStalkedEnd");
static_assert(offsetof(RBStalkerObjectiveCoordinator_Event_OnNPCStalkedEnd, NPC) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_Event_OnNPCStalkedEnd::NPC' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.OnBotSpawned
// 0x0018 (0x0018 - 0x0000)
struct RBStalkerObjectiveCoordinator_OnBotSpawned final
{
public:
	class ARBAISpawner*                           Spawner;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBBot*                                 bot;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBNPC*                                 NPC;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_OnBotSpawned) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_OnBotSpawned");
static_assert(sizeof(RBStalkerObjectiveCoordinator_OnBotSpawned) == 0x000018, "Wrong size on RBStalkerObjectiveCoordinator_OnBotSpawned");
static_assert(offsetof(RBStalkerObjectiveCoordinator_OnBotSpawned, Spawner) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_OnBotSpawned::Spawner' has a wrong offset!");
static_assert(offsetof(RBStalkerObjectiveCoordinator_OnBotSpawned, bot) == 0x000008, "Member 'RBStalkerObjectiveCoordinator_OnBotSpawned::bot' has a wrong offset!");
static_assert(offsetof(RBStalkerObjectiveCoordinator_OnBotSpawned, NPC) == 0x000010, "Member 'RBStalkerObjectiveCoordinator_OnBotSpawned::NPC' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.OnProximityProgressCompleted
// 0x0008 (0x0008 - 0x0000)
struct RBStalkerObjectiveCoordinator_OnProximityProgressCompleted final
{
public:
	class URBProximityDetectableComponent*        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_OnProximityProgressCompleted) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_OnProximityProgressCompleted");
static_assert(sizeof(RBStalkerObjectiveCoordinator_OnProximityProgressCompleted) == 0x000008, "Wrong size on RBStalkerObjectiveCoordinator_OnProximityProgressCompleted");
static_assert(offsetof(RBStalkerObjectiveCoordinator_OnProximityProgressCompleted, Component) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_OnProximityProgressCompleted::Component' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.OnStartSpectatingPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBStalkerObjectiveCoordinator_OnStartSpectatingPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_OnStartSpectatingPlayer) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_OnStartSpectatingPlayer");
static_assert(sizeof(RBStalkerObjectiveCoordinator_OnStartSpectatingPlayer) == 0x000008, "Wrong size on RBStalkerObjectiveCoordinator_OnStartSpectatingPlayer");
static_assert(offsetof(RBStalkerObjectiveCoordinator_OnStartSpectatingPlayer, Player) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_OnStartSpectatingPlayer::Player' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.OnTargetDie
// 0x0008 (0x0008 - 0x0000)
struct RBStalkerObjectiveCoordinator_OnTargetDie final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_OnTargetDie) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_OnTargetDie");
static_assert(sizeof(RBStalkerObjectiveCoordinator_OnTargetDie) == 0x000008, "Wrong size on RBStalkerObjectiveCoordinator_OnTargetDie");
static_assert(offsetof(RBStalkerObjectiveCoordinator_OnTargetDie, NPC) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_OnTargetDie::NPC' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.SetShowProximityDetectorIconsVisible_Server
// 0x0001 (0x0001 - 0x0000)
struct RBStalkerObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server) == 0x000001, "Wrong alignment on RBStalkerObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server");
static_assert(sizeof(RBStalkerObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server) == 0x000001, "Wrong size on RBStalkerObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server");
static_assert(offsetof(RBStalkerObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server, bVisible) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_SetShowProximityDetectorIconsVisible_Server::bVisible' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.SetShowProximityTriggerIconsVisible_Server
// 0x0001 (0x0001 - 0x0000)
struct RBStalkerObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server) == 0x000001, "Wrong alignment on RBStalkerObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server");
static_assert(sizeof(RBStalkerObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server) == 0x000001, "Wrong size on RBStalkerObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server");
static_assert(offsetof(RBStalkerObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server, bVisible) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_SetShowProximityTriggerIconsVisible_Server::bVisible' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.IsLocalPlayerStalking
// 0x0001 (0x0001 - 0x0000)
struct RBStalkerObjectiveCoordinator_IsLocalPlayerStalking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStalkerObjectiveCoordinator_IsLocalPlayerStalking) == 0x000001, "Wrong alignment on RBStalkerObjectiveCoordinator_IsLocalPlayerStalking");
static_assert(sizeof(RBStalkerObjectiveCoordinator_IsLocalPlayerStalking) == 0x000001, "Wrong size on RBStalkerObjectiveCoordinator_IsLocalPlayerStalking");
static_assert(offsetof(RBStalkerObjectiveCoordinator_IsLocalPlayerStalking, ReturnValue) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_IsLocalPlayerStalking::ReturnValue' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.IsNPCLocallyStalked
// 0x0010 (0x0010 - 0x0000)
struct RBStalkerObjectiveCoordinator_IsNPCLocallyStalked final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240B[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStalkerObjectiveCoordinator_IsNPCLocallyStalked) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_IsNPCLocallyStalked");
static_assert(sizeof(RBStalkerObjectiveCoordinator_IsNPCLocallyStalked) == 0x000010, "Wrong size on RBStalkerObjectiveCoordinator_IsNPCLocallyStalked");
static_assert(offsetof(RBStalkerObjectiveCoordinator_IsNPCLocallyStalked, NPC) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_IsNPCLocallyStalked::NPC' has a wrong offset!");
static_assert(offsetof(RBStalkerObjectiveCoordinator_IsNPCLocallyStalked, ReturnValue) == 0x000008, "Member 'RBStalkerObjectiveCoordinator_IsNPCLocallyStalked::ReturnValue' has a wrong offset!");

// Function OPP.RBStalkerObjectiveCoordinator.IsNPCStalked
// 0x0010 (0x0010 - 0x0000)
struct RBStalkerObjectiveCoordinator_IsNPCStalked final
{
public:
	class ARBNPC*                                 NPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStalkerObjectiveCoordinator_IsNPCStalked) == 0x000008, "Wrong alignment on RBStalkerObjectiveCoordinator_IsNPCStalked");
static_assert(sizeof(RBStalkerObjectiveCoordinator_IsNPCStalked) == 0x000010, "Wrong size on RBStalkerObjectiveCoordinator_IsNPCStalked");
static_assert(offsetof(RBStalkerObjectiveCoordinator_IsNPCStalked, NPC) == 0x000000, "Member 'RBStalkerObjectiveCoordinator_IsNPCStalked::NPC' has a wrong offset!");
static_assert(offsetof(RBStalkerObjectiveCoordinator_IsNPCStalked, ReturnValue) == 0x000008, "Member 'RBStalkerObjectiveCoordinator_IsNPCStalked::ReturnValue' has a wrong offset!");

// Function OPP.RBStatsManager.GetGlobalStatContext
// 0x0010 (0x0010 - 0x0000)
struct RBStatsManager_GetGlobalStatContext final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStatsManager_GetGlobalStatContext) == 0x000008, "Wrong alignment on RBStatsManager_GetGlobalStatContext");
static_assert(sizeof(RBStatsManager_GetGlobalStatContext) == 0x000010, "Wrong size on RBStatsManager_GetGlobalStatContext");
static_assert(offsetof(RBStatsManager_GetGlobalStatContext, ReturnValue) == 0x000000, "Member 'RBStatsManager_GetGlobalStatContext::ReturnValue' has a wrong offset!");

// Function OPP.RBStatsManager.GetTrialStatContext
// 0x0018 (0x0018 - 0x0000)
struct RBStatsManager_GetTrialStatContext final
{
public:
	class FName                                   TrialId;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStatsManager_GetTrialStatContext) == 0x000008, "Wrong alignment on RBStatsManager_GetTrialStatContext");
static_assert(sizeof(RBStatsManager_GetTrialStatContext) == 0x000018, "Wrong size on RBStatsManager_GetTrialStatContext");
static_assert(offsetof(RBStatsManager_GetTrialStatContext, TrialId) == 0x000000, "Member 'RBStatsManager_GetTrialStatContext::TrialId' has a wrong offset!");
static_assert(offsetof(RBStatsManager_GetTrialStatContext, ReturnValue) == 0x000008, "Member 'RBStatsManager_GetTrialStatContext::ReturnValue' has a wrong offset!");

// Function OPP.RBStatsManager.GetCurrentTrialStatContext
// 0x0010 (0x0010 - 0x0000)
struct RBStatsManager_GetCurrentTrialStatContext final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStatsManager_GetCurrentTrialStatContext) == 0x000008, "Wrong alignment on RBStatsManager_GetCurrentTrialStatContext");
static_assert(sizeof(RBStatsManager_GetCurrentTrialStatContext) == 0x000010, "Wrong size on RBStatsManager_GetCurrentTrialStatContext");
static_assert(offsetof(RBStatsManager_GetCurrentTrialStatContext, ReturnValue) == 0x000000, "Member 'RBStatsManager_GetCurrentTrialStatContext::ReturnValue' has a wrong offset!");

// Function OPP.RBStatsManager.OnGamePhaseUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBStatsManager_OnGamePhaseUpdated final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStatsManager_OnGamePhaseUpdated) == 0x000001, "Wrong alignment on RBStatsManager_OnGamePhaseUpdated");
static_assert(sizeof(RBStatsManager_OnGamePhaseUpdated) == 0x000001, "Wrong size on RBStatsManager_OnGamePhaseUpdated");
static_assert(offsetof(RBStatsManager_OnGamePhaseUpdated, GamePhase) == 0x000000, "Member 'RBStatsManager_OnGamePhaseUpdated::GamePhase' has a wrong offset!");

// Function OPP.RBStatsManager.GetCharacterStatContext
// 0x0018 (0x0018 - 0x0000)
struct RBStatsManager_GetCharacterStatContext final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStatsManager_GetCharacterStatContext) == 0x000008, "Wrong alignment on RBStatsManager_GetCharacterStatContext");
static_assert(sizeof(RBStatsManager_GetCharacterStatContext) == 0x000018, "Wrong size on RBStatsManager_GetCharacterStatContext");
static_assert(offsetof(RBStatsManager_GetCharacterStatContext, RBPlayerState) == 0x000000, "Member 'RBStatsManager_GetCharacterStatContext::RBPlayerState' has a wrong offset!");
static_assert(offsetof(RBStatsManager_GetCharacterStatContext, ReturnValue) == 0x000008, "Member 'RBStatsManager_GetCharacterStatContext::ReturnValue' has a wrong offset!");

// Function OPP.RBStatsManager.GetCurrentCharacterStatContext
// 0x0010 (0x0010 - 0x0000)
struct RBStatsManager_GetCurrentCharacterStatContext final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStatsManager_GetCurrentCharacterStatContext) == 0x000008, "Wrong alignment on RBStatsManager_GetCurrentCharacterStatContext");
static_assert(sizeof(RBStatsManager_GetCurrentCharacterStatContext) == 0x000010, "Wrong size on RBStatsManager_GetCurrentCharacterStatContext");
static_assert(offsetof(RBStatsManager_GetCurrentCharacterStatContext, ReturnValue) == 0x000000, "Member 'RBStatsManager_GetCurrentCharacterStatContext::ReturnValue' has a wrong offset!");

// Function OPP.RBStreaming.AddLocalForcedLoadedLevels
// 0x0010 (0x0010 - 0x0000)
struct RBStreaming_AddLocalForcedLoadedLevels final
{
public:
	TArray<class FName>                           LevelNames;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStreaming_AddLocalForcedLoadedLevels) == 0x000008, "Wrong alignment on RBStreaming_AddLocalForcedLoadedLevels");
static_assert(sizeof(RBStreaming_AddLocalForcedLoadedLevels) == 0x000010, "Wrong size on RBStreaming_AddLocalForcedLoadedLevels");
static_assert(offsetof(RBStreaming_AddLocalForcedLoadedLevels, LevelNames) == 0x000000, "Member 'RBStreaming_AddLocalForcedLoadedLevels::LevelNames' has a wrong offset!");

// Function OPP.RBStreaming.Multicast_ForceUnloadLevels
// 0x0018 (0x0018 - 0x0000)
struct RBStreaming_Multicast_ForceUnloadLevels final
{
public:
	TArray<class FName>                           LevelsToUnload;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bResetWorld;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStreaming_Multicast_ForceUnloadLevels) == 0x000008, "Wrong alignment on RBStreaming_Multicast_ForceUnloadLevels");
static_assert(sizeof(RBStreaming_Multicast_ForceUnloadLevels) == 0x000018, "Wrong size on RBStreaming_Multicast_ForceUnloadLevels");
static_assert(offsetof(RBStreaming_Multicast_ForceUnloadLevels, LevelsToUnload) == 0x000000, "Member 'RBStreaming_Multicast_ForceUnloadLevels::LevelsToUnload' has a wrong offset!");
static_assert(offsetof(RBStreaming_Multicast_ForceUnloadLevels, bResetWorld) == 0x000010, "Member 'RBStreaming_Multicast_ForceUnloadLevels::bResetWorld' has a wrong offset!");

// Function OPP.RBStreaming.PrepareMapChange
// 0x0020 (0x0020 - 0x0000)
struct RBStreaming_PrepareMapChange final
{
public:
	TArray<class FName>                           LevelNames;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ForcedLevelNames;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStreaming_PrepareMapChange) == 0x000008, "Wrong alignment on RBStreaming_PrepareMapChange");
static_assert(sizeof(RBStreaming_PrepareMapChange) == 0x000020, "Wrong size on RBStreaming_PrepareMapChange");
static_assert(offsetof(RBStreaming_PrepareMapChange, LevelNames) == 0x000000, "Member 'RBStreaming_PrepareMapChange::LevelNames' has a wrong offset!");
static_assert(offsetof(RBStreaming_PrepareMapChange, ForcedLevelNames) == 0x000010, "Member 'RBStreaming_PrepareMapChange::ForcedLevelNames' has a wrong offset!");

// Function OPP.RBStreaming.UnloadLevels
// 0x0010 (0x0010 - 0x0000)
struct RBStreaming_UnloadLevels final
{
public:
	TArray<class FName>                           LevelNames;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStreaming_UnloadLevels) == 0x000008, "Wrong alignment on RBStreaming_UnloadLevels");
static_assert(sizeof(RBStreaming_UnloadLevels) == 0x000010, "Wrong size on RBStreaming_UnloadLevels");
static_assert(offsetof(RBStreaming_UnloadLevels, LevelNames) == 0x000000, "Member 'RBStreaming_UnloadLevels::LevelNames' has a wrong offset!");

// Function OPP.RBStreaming.IsTargetStateReachedAndStreamingStable
// 0x0001 (0x0001 - 0x0000)
struct RBStreaming_IsTargetStateReachedAndStreamingStable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStreaming_IsTargetStateReachedAndStreamingStable) == 0x000001, "Wrong alignment on RBStreaming_IsTargetStateReachedAndStreamingStable");
static_assert(sizeof(RBStreaming_IsTargetStateReachedAndStreamingStable) == 0x000001, "Wrong size on RBStreaming_IsTargetStateReachedAndStreamingStable");
static_assert(offsetof(RBStreaming_IsTargetStateReachedAndStreamingStable, ReturnValue) == 0x000000, "Member 'RBStreaming_IsTargetStateReachedAndStreamingStable::ReturnValue' has a wrong offset!");

// Function OPP.RBStroopGame.GetPlayerRoundDataFromPanel
// 0x0020 (0x0020 - 0x0000)
struct RBStroopGame_GetPlayerRoundDataFromPanel final
{
public:
	class URBStroopGamePanelComponent*            Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStroopPlayerMatchData                 ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStroopGame_GetPlayerRoundDataFromPanel) == 0x000008, "Wrong alignment on RBStroopGame_GetPlayerRoundDataFromPanel");
static_assert(sizeof(RBStroopGame_GetPlayerRoundDataFromPanel) == 0x000020, "Wrong size on RBStroopGame_GetPlayerRoundDataFromPanel");
static_assert(offsetof(RBStroopGame_GetPlayerRoundDataFromPanel, Panel) == 0x000000, "Member 'RBStroopGame_GetPlayerRoundDataFromPanel::Panel' has a wrong offset!");
static_assert(offsetof(RBStroopGame_GetPlayerRoundDataFromPanel, ReturnValue) == 0x000008, "Member 'RBStroopGame_GetPlayerRoundDataFromPanel::ReturnValue' has a wrong offset!");

// Function OPP.RBStroopGame.SetDisturbanceActivation
// 0x0008 (0x0008 - 0x0000)
struct RBStroopGame_SetDisturbanceActivation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivePlayer1;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivePlayer2;                                    // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2415[0x2];                                     // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStroopGame_SetDisturbanceActivation) == 0x000004, "Wrong alignment on RBStroopGame_SetDisturbanceActivation");
static_assert(sizeof(RBStroopGame_SetDisturbanceActivation) == 0x000008, "Wrong size on RBStroopGame_SetDisturbanceActivation");
static_assert(offsetof(RBStroopGame_SetDisturbanceActivation, Param_Index) == 0x000000, "Member 'RBStroopGame_SetDisturbanceActivation::Param_Index' has a wrong offset!");
static_assert(offsetof(RBStroopGame_SetDisturbanceActivation, bActivePlayer1) == 0x000004, "Member 'RBStroopGame_SetDisturbanceActivation::bActivePlayer1' has a wrong offset!");
static_assert(offsetof(RBStroopGame_SetDisturbanceActivation, bActivePlayer2) == 0x000005, "Member 'RBStroopGame_SetDisturbanceActivation::bActivePlayer2' has a wrong offset!");

// Function OPP.RBStroopGame.GetButtonSelectionIndexesFromMode
// 0x0018 (0x0018 - 0x0000)
struct RBStroopGame_GetButtonSelectionIndexesFromMode final
{
public:
	EStroopButtonSelectionMode                    Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2416[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStroopGame_GetButtonSelectionIndexesFromMode) == 0x000008, "Wrong alignment on RBStroopGame_GetButtonSelectionIndexesFromMode");
static_assert(sizeof(RBStroopGame_GetButtonSelectionIndexesFromMode) == 0x000018, "Wrong size on RBStroopGame_GetButtonSelectionIndexesFromMode");
static_assert(offsetof(RBStroopGame_GetButtonSelectionIndexesFromMode, Mode) == 0x000000, "Member 'RBStroopGame_GetButtonSelectionIndexesFromMode::Mode' has a wrong offset!");
static_assert(offsetof(RBStroopGame_GetButtonSelectionIndexesFromMode, ReturnValue) == 0x000008, "Member 'RBStroopGame_GetButtonSelectionIndexesFromMode::ReturnValue' has a wrong offset!");

// Function OPP.RBStroopGame.GetPlayerScore
// 0x0010 (0x0010 - 0x0000)
struct RBStroopGame_GetPlayerScore final
{
public:
	class URBStroopGamePanelComponent*            Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2417[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStroopGame_GetPlayerScore) == 0x000008, "Wrong alignment on RBStroopGame_GetPlayerScore");
static_assert(sizeof(RBStroopGame_GetPlayerScore) == 0x000010, "Wrong size on RBStroopGame_GetPlayerScore");
static_assert(offsetof(RBStroopGame_GetPlayerScore, Panel) == 0x000000, "Member 'RBStroopGame_GetPlayerScore::Panel' has a wrong offset!");
static_assert(offsetof(RBStroopGame_GetPlayerScore, ReturnValue) == 0x000008, "Member 'RBStroopGame_GetPlayerScore::ReturnValue' has a wrong offset!");

// Function OPP.RBStroopGame.GetScore
// 0x0004 (0x0004 - 0x0000)
struct RBStroopGame_GetScore final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStroopGame_GetScore) == 0x000004, "Wrong alignment on RBStroopGame_GetScore");
static_assert(sizeof(RBStroopGame_GetScore) == 0x000004, "Wrong size on RBStroopGame_GetScore");
static_assert(offsetof(RBStroopGame_GetScore, ReturnValue) == 0x000000, "Member 'RBStroopGame_GetScore::ReturnValue' has a wrong offset!");

// Function OPP.RBStroopGameButton.Event_ButtonActivatedChanged
// 0x0001 (0x0001 - 0x0000)
struct RBStroopGameButton_Event_ButtonActivatedChanged final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStroopGameButton_Event_ButtonActivatedChanged) == 0x000001, "Wrong alignment on RBStroopGameButton_Event_ButtonActivatedChanged");
static_assert(sizeof(RBStroopGameButton_Event_ButtonActivatedChanged) == 0x000001, "Wrong size on RBStroopGameButton_Event_ButtonActivatedChanged");
static_assert(offsetof(RBStroopGameButton_Event_ButtonActivatedChanged, bActive) == 0x000000, "Member 'RBStroopGameButton_Event_ButtonActivatedChanged::bActive' has a wrong offset!");

// Function OPP.RBStroopGameButton.Event_ButtonChosenChanged
// 0x0001 (0x0001 - 0x0000)
struct RBStroopGameButton_Event_ButtonChosenChanged final
{
public:
	bool                                          bChosen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStroopGameButton_Event_ButtonChosenChanged) == 0x000001, "Wrong alignment on RBStroopGameButton_Event_ButtonChosenChanged");
static_assert(sizeof(RBStroopGameButton_Event_ButtonChosenChanged) == 0x000001, "Wrong size on RBStroopGameButton_Event_ButtonChosenChanged");
static_assert(offsetof(RBStroopGameButton_Event_ButtonChosenChanged, bChosen) == 0x000000, "Member 'RBStroopGameButton_Event_ButtonChosenChanged::bChosen' has a wrong offset!");

// Function OPP.RBStroopGameButton.FlipButtonTo
// 0x0004 (0x0004 - 0x0000)
struct RBStroopGameButton_FlipButtonTo final
{
public:
	int32                                         SideIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStroopGameButton_FlipButtonTo) == 0x000004, "Wrong alignment on RBStroopGameButton_FlipButtonTo");
static_assert(sizeof(RBStroopGameButton_FlipButtonTo) == 0x000004, "Wrong size on RBStroopGameButton_FlipButtonTo");
static_assert(offsetof(RBStroopGameButton_FlipButtonTo, SideIndex) == 0x000000, "Member 'RBStroopGameButton_FlipButtonTo::SideIndex' has a wrong offset!");

// Function OPP.RBStroopGameButton.OnButtonFocused
// 0x0001 (0x0001 - 0x0000)
struct RBStroopGameButton_OnButtonFocused final
{
public:
	bool                                          bFocused;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStroopGameButton_OnButtonFocused) == 0x000001, "Wrong alignment on RBStroopGameButton_OnButtonFocused");
static_assert(sizeof(RBStroopGameButton_OnButtonFocused) == 0x000001, "Wrong size on RBStroopGameButton_OnButtonFocused");
static_assert(offsetof(RBStroopGameButton_OnButtonFocused, bFocused) == 0x000000, "Member 'RBStroopGameButton_OnButtonFocused::bFocused' has a wrong offset!");

// Function OPP.RBStroopGameButton.OnButtonSideChanged
// 0x0004 (0x0004 - 0x0000)
struct RBStroopGameButton_OnButtonSideChanged final
{
public:
	int32                                         NewSideIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStroopGameButton_OnButtonSideChanged) == 0x000004, "Wrong alignment on RBStroopGameButton_OnButtonSideChanged");
static_assert(sizeof(RBStroopGameButton_OnButtonSideChanged) == 0x000004, "Wrong size on RBStroopGameButton_OnButtonSideChanged");
static_assert(offsetof(RBStroopGameButton_OnButtonSideChanged, NewSideIndex) == 0x000000, "Member 'RBStroopGameButton_OnButtonSideChanged::NewSideIndex' has a wrong offset!");

// Function OPP.RBStroopGamePanelComponent.Multicast_OptionChosen
// 0x0010 (0x0010 - 0x0000)
struct RBStroopGamePanelComponent_Multicast_OptionChosen final
{
public:
	class ARBStroopGameButton*                    Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRightAnswer;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStroopGamePanelComponent_Multicast_OptionChosen) == 0x000008, "Wrong alignment on RBStroopGamePanelComponent_Multicast_OptionChosen");
static_assert(sizeof(RBStroopGamePanelComponent_Multicast_OptionChosen) == 0x000010, "Wrong size on RBStroopGamePanelComponent_Multicast_OptionChosen");
static_assert(offsetof(RBStroopGamePanelComponent_Multicast_OptionChosen, Button) == 0x000000, "Member 'RBStroopGamePanelComponent_Multicast_OptionChosen::Button' has a wrong offset!");
static_assert(offsetof(RBStroopGamePanelComponent_Multicast_OptionChosen, bRightAnswer) == 0x000008, "Member 'RBStroopGamePanelComponent_Multicast_OptionChosen::bRightAnswer' has a wrong offset!");

// Function OPP.RBStroopGamePanelComponent.SetButtonsSpinningState
// 0x0001 (0x0001 - 0x0000)
struct RBStroopGamePanelComponent_SetButtonsSpinningState final
{
public:
	bool                                          bSpinning;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBStroopGamePanelComponent_SetButtonsSpinningState) == 0x000001, "Wrong alignment on RBStroopGamePanelComponent_SetButtonsSpinningState");
static_assert(sizeof(RBStroopGamePanelComponent_SetButtonsSpinningState) == 0x000001, "Wrong size on RBStroopGamePanelComponent_SetButtonsSpinningState");
static_assert(offsetof(RBStroopGamePanelComponent_SetButtonsSpinningState, bSpinning) == 0x000000, "Member 'RBStroopGamePanelComponent_SetButtonsSpinningState::bSpinning' has a wrong offset!");

// Function OPP.RBStroopGamePanelComponent.GetButtonAnswer
// 0x0010 (0x0010 - 0x0000)
struct RBStroopGamePanelComponent_GetButtonAnswer final
{
public:
	class ARBStroopGameButton*                    Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStroopGameColor                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBStroopGamePanelComponent_GetButtonAnswer) == 0x000008, "Wrong alignment on RBStroopGamePanelComponent_GetButtonAnswer");
static_assert(sizeof(RBStroopGamePanelComponent_GetButtonAnswer) == 0x000010, "Wrong size on RBStroopGamePanelComponent_GetButtonAnswer");
static_assert(offsetof(RBStroopGamePanelComponent_GetButtonAnswer, Button) == 0x000000, "Member 'RBStroopGamePanelComponent_GetButtonAnswer::Button' has a wrong offset!");
static_assert(offsetof(RBStroopGamePanelComponent_GetButtonAnswer, ReturnValue) == 0x000008, "Member 'RBStroopGamePanelComponent_GetButtonAnswer::ReturnValue' has a wrong offset!");

// Function OPP.RBSubtitleVisibilityInterface.ShouldHideSubtitles
// 0x0001 (0x0001 - 0x0000)
struct RBSubtitleVisibilityInterface_ShouldHideSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSubtitleVisibilityInterface_ShouldHideSubtitles) == 0x000001, "Wrong alignment on RBSubtitleVisibilityInterface_ShouldHideSubtitles");
static_assert(sizeof(RBSubtitleVisibilityInterface_ShouldHideSubtitles) == 0x000001, "Wrong size on RBSubtitleVisibilityInterface_ShouldHideSubtitles");
static_assert(offsetof(RBSubtitleVisibilityInterface_ShouldHideSubtitles, ReturnValue) == 0x000000, "Member 'RBSubtitleVisibilityInterface_ShouldHideSubtitles::ReturnValue' has a wrong offset!");

// Function OPP.RBSwitchMatchFlipSwitchComponent.OnCurrentFlipSwitchStateCallback
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchMatchFlipSwitchComponent_OnCurrentFlipSwitchStateCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchMatchFlipSwitchComponent_OnCurrentFlipSwitchStateCallback) == 0x000001, "Wrong alignment on RBSwitchMatchFlipSwitchComponent_OnCurrentFlipSwitchStateCallback");
static_assert(sizeof(RBSwitchMatchFlipSwitchComponent_OnCurrentFlipSwitchStateCallback) == 0x000001, "Wrong size on RBSwitchMatchFlipSwitchComponent_OnCurrentFlipSwitchStateCallback");
static_assert(offsetof(RBSwitchMatchFlipSwitchComponent_OnCurrentFlipSwitchStateCallback, ChangedType) == 0x000000, "Member 'RBSwitchMatchFlipSwitchComponent_OnCurrentFlipSwitchStateCallback::ChangedType' has a wrong offset!");

// Function OPP.RBSwitchMatchFlipSwitchComponent.OnLocallyFocusStateChange
// 0x0008 (0x0008 - 0x0000)
struct RBSwitchMatchFlipSwitchComponent_OnLocallyFocusStateChange final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchMatchFlipSwitchComponent_OnLocallyFocusStateChange) == 0x000008, "Wrong alignment on RBSwitchMatchFlipSwitchComponent_OnLocallyFocusStateChange");
static_assert(sizeof(RBSwitchMatchFlipSwitchComponent_OnLocallyFocusStateChange) == 0x000008, "Wrong size on RBSwitchMatchFlipSwitchComponent_OnLocallyFocusStateChange");
static_assert(offsetof(RBSwitchMatchFlipSwitchComponent_OnLocallyFocusStateChange, Player) == 0x000000, "Member 'RBSwitchMatchFlipSwitchComponent_OnLocallyFocusStateChange::Player' has a wrong offset!");

// Function OPP.RBSwitchMatchFlipSwitchComponent.GetFlipSwitchState
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchMatchFlipSwitchComponent_GetFlipSwitchState final
{
public:
	EFlipSwitchState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchMatchFlipSwitchComponent_GetFlipSwitchState) == 0x000001, "Wrong alignment on RBSwitchMatchFlipSwitchComponent_GetFlipSwitchState");
static_assert(sizeof(RBSwitchMatchFlipSwitchComponent_GetFlipSwitchState) == 0x000001, "Wrong size on RBSwitchMatchFlipSwitchComponent_GetFlipSwitchState");
static_assert(offsetof(RBSwitchMatchFlipSwitchComponent_GetFlipSwitchState, ReturnValue) == 0x000000, "Member 'RBSwitchMatchFlipSwitchComponent_GetFlipSwitchState::ReturnValue' has a wrong offset!");

// Function OPP.RBSwitchMatchFlipSwitchComponent.IsLocallyFocused
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchMatchFlipSwitchComponent_IsLocallyFocused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchMatchFlipSwitchComponent_IsLocallyFocused) == 0x000001, "Wrong alignment on RBSwitchMatchFlipSwitchComponent_IsLocallyFocused");
static_assert(sizeof(RBSwitchMatchFlipSwitchComponent_IsLocallyFocused) == 0x000001, "Wrong size on RBSwitchMatchFlipSwitchComponent_IsLocallyFocused");
static_assert(offsetof(RBSwitchMatchFlipSwitchComponent_IsLocallyFocused, ReturnValue) == 0x000000, "Member 'RBSwitchMatchFlipSwitchComponent_IsLocallyFocused::ReturnValue' has a wrong offset!");

// Function OPP.RBSwitchMatchPanelComponent.OnCurrentNumberOfInteractionCallback
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchMatchPanelComponent_OnCurrentNumberOfInteractionCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchMatchPanelComponent_OnCurrentNumberOfInteractionCallback) == 0x000001, "Wrong alignment on RBSwitchMatchPanelComponent_OnCurrentNumberOfInteractionCallback");
static_assert(sizeof(RBSwitchMatchPanelComponent_OnCurrentNumberOfInteractionCallback) == 0x000001, "Wrong size on RBSwitchMatchPanelComponent_OnCurrentNumberOfInteractionCallback");
static_assert(offsetof(RBSwitchMatchPanelComponent_OnCurrentNumberOfInteractionCallback, ChangedType) == 0x000000, "Member 'RBSwitchMatchPanelComponent_OnCurrentNumberOfInteractionCallback::ChangedType' has a wrong offset!");

// Function OPP.RBSwitchPanelPart.BP_OnAddInputHorizontal
// 0x000C (0x000C - 0x0000)
struct RBSwitchPanelPart_BP_OnAddInputHorizontal final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGamepad;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2433[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanelPart_BP_OnAddInputHorizontal) == 0x000004, "Wrong alignment on RBSwitchPanelPart_BP_OnAddInputHorizontal");
static_assert(sizeof(RBSwitchPanelPart_BP_OnAddInputHorizontal) == 0x00000C, "Wrong size on RBSwitchPanelPart_BP_OnAddInputHorizontal");
static_assert(offsetof(RBSwitchPanelPart_BP_OnAddInputHorizontal, Val) == 0x000000, "Member 'RBSwitchPanelPart_BP_OnAddInputHorizontal::Val' has a wrong offset!");
static_assert(offsetof(RBSwitchPanelPart_BP_OnAddInputHorizontal, bIsGamepad) == 0x000004, "Member 'RBSwitchPanelPart_BP_OnAddInputHorizontal::bIsGamepad' has a wrong offset!");
static_assert(offsetof(RBSwitchPanelPart_BP_OnAddInputHorizontal, DeltaValue) == 0x000008, "Member 'RBSwitchPanelPart_BP_OnAddInputHorizontal::DeltaValue' has a wrong offset!");

// Function OPP.RBSwitchPanelPart.BP_OnAddInputVertical
// 0x000C (0x000C - 0x0000)
struct RBSwitchPanelPart_BP_OnAddInputVertical final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGamepad;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2434[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanelPart_BP_OnAddInputVertical) == 0x000004, "Wrong alignment on RBSwitchPanelPart_BP_OnAddInputVertical");
static_assert(sizeof(RBSwitchPanelPart_BP_OnAddInputVertical) == 0x00000C, "Wrong size on RBSwitchPanelPart_BP_OnAddInputVertical");
static_assert(offsetof(RBSwitchPanelPart_BP_OnAddInputVertical, Val) == 0x000000, "Member 'RBSwitchPanelPart_BP_OnAddInputVertical::Val' has a wrong offset!");
static_assert(offsetof(RBSwitchPanelPart_BP_OnAddInputVertical, bIsGamepad) == 0x000004, "Member 'RBSwitchPanelPart_BP_OnAddInputVertical::bIsGamepad' has a wrong offset!");
static_assert(offsetof(RBSwitchPanelPart_BP_OnAddInputVertical, DeltaValue) == 0x000008, "Member 'RBSwitchPanelPart_BP_OnAddInputVertical::DeltaValue' has a wrong offset!");

// Function OPP.RBSwitchPanelPart.BP_ResetValues
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchPanelPart_BP_ResetValues final
{
public:
	bool                                          bKeepCurrentValues;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanelPart_BP_ResetValues) == 0x000001, "Wrong alignment on RBSwitchPanelPart_BP_ResetValues");
static_assert(sizeof(RBSwitchPanelPart_BP_ResetValues) == 0x000001, "Wrong size on RBSwitchPanelPart_BP_ResetValues");
static_assert(offsetof(RBSwitchPanelPart_BP_ResetValues, bKeepCurrentValues) == 0x000000, "Member 'RBSwitchPanelPart_BP_ResetValues::bKeepCurrentValues' has a wrong offset!");

// Function OPP.RBSwitchPanelPart.BP_SetSwitchStatus
// 0x0004 (0x0004 - 0x0000)
struct RBSwitchPanelPart_BP_SetSwitchStatus final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanelPart_BP_SetSwitchStatus) == 0x000004, "Wrong alignment on RBSwitchPanelPart_BP_SetSwitchStatus");
static_assert(sizeof(RBSwitchPanelPart_BP_SetSwitchStatus) == 0x000004, "Wrong size on RBSwitchPanelPart_BP_SetSwitchStatus");
static_assert(offsetof(RBSwitchPanelPart_BP_SetSwitchStatus, Value) == 0x000000, "Member 'RBSwitchPanelPart_BP_SetSwitchStatus::Value' has a wrong offset!");

// Function OPP.RBSwitchPanelPart.Multicast_ResetValues
// 0x0004 (0x0004 - 0x0000)
struct RBSwitchPanelPart_Multicast_ResetValues final
{
public:
	float                                         DesiredSwitchStatusValue;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanelPart_Multicast_ResetValues) == 0x000004, "Wrong alignment on RBSwitchPanelPart_Multicast_ResetValues");
static_assert(sizeof(RBSwitchPanelPart_Multicast_ResetValues) == 0x000004, "Wrong size on RBSwitchPanelPart_Multicast_ResetValues");
static_assert(offsetof(RBSwitchPanelPart_Multicast_ResetValues, DesiredSwitchStatusValue) == 0x000000, "Member 'RBSwitchPanelPart_Multicast_ResetValues::DesiredSwitchStatusValue' has a wrong offset!");

// Function OPP.RBSwitchPanelPart.BP_IsActive
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchPanelPart_BP_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanelPart_BP_IsActive) == 0x000001, "Wrong alignment on RBSwitchPanelPart_BP_IsActive");
static_assert(sizeof(RBSwitchPanelPart_BP_IsActive) == 0x000001, "Wrong size on RBSwitchPanelPart_BP_IsActive");
static_assert(offsetof(RBSwitchPanelPart_BP_IsActive, ReturnValue) == 0x000000, "Member 'RBSwitchPanelPart_BP_IsActive::ReturnValue' has a wrong offset!");

// Function OPP.RBSwitchPanelPart.BP_IsCloseToActive
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchPanelPart_BP_IsCloseToActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanelPart_BP_IsCloseToActive) == 0x000001, "Wrong alignment on RBSwitchPanelPart_BP_IsCloseToActive");
static_assert(sizeof(RBSwitchPanelPart_BP_IsCloseToActive) == 0x000001, "Wrong size on RBSwitchPanelPart_BP_IsCloseToActive");
static_assert(offsetof(RBSwitchPanelPart_BP_IsCloseToActive, ReturnValue) == 0x000000, "Member 'RBSwitchPanelPart_BP_IsCloseToActive::ReturnValue' has a wrong offset!");

// Function OPP.RBSwitchPanelPart.BP_IsPanelEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBSwitchPanelPart_BP_IsPanelEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBSwitchPanelPart_BP_IsPanelEnabled) == 0x000001, "Wrong alignment on RBSwitchPanelPart_BP_IsPanelEnabled");
static_assert(sizeof(RBSwitchPanelPart_BP_IsPanelEnabled) == 0x000001, "Wrong size on RBSwitchPanelPart_BP_IsPanelEnabled");
static_assert(offsetof(RBSwitchPanelPart_BP_IsPanelEnabled, ReturnValue) == 0x000000, "Member 'RBSwitchPanelPart_BP_IsPanelEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.OnGamePhaseUpdated
// 0x0001 (0x0001 - 0x0000)
struct RBTask_OnGamePhaseUpdated final
{
public:
	EGamePhase                                    GamePhase;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_OnGamePhaseUpdated) == 0x000001, "Wrong alignment on RBTask_OnGamePhaseUpdated");
static_assert(sizeof(RBTask_OnGamePhaseUpdated) == 0x000001, "Wrong size on RBTask_OnGamePhaseUpdated");
static_assert(offsetof(RBTask_OnGamePhaseUpdated, GamePhase) == 0x000000, "Member 'RBTask_OnGamePhaseUpdated::GamePhase' has a wrong offset!");

// Function OPP.RBTask.GetExpirationTimeText
// 0x0018 (0x0018 - 0x0000)
struct RBTask_GetExpirationTimeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetExpirationTimeText) == 0x000008, "Wrong alignment on RBTask_GetExpirationTimeText");
static_assert(sizeof(RBTask_GetExpirationTimeText) == 0x000018, "Wrong size on RBTask_GetExpirationTimeText");
static_assert(offsetof(RBTask_GetExpirationTimeText, ReturnValue) == 0x000000, "Member 'RBTask_GetExpirationTimeText::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.GetObjectiveText
// 0x0018 (0x0018 - 0x0000)
struct RBTask_GetObjectiveText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetObjectiveText) == 0x000008, "Wrong alignment on RBTask_GetObjectiveText");
static_assert(sizeof(RBTask_GetObjectiveText) == 0x000018, "Wrong size on RBTask_GetObjectiveText");
static_assert(offsetof(RBTask_GetObjectiveText, ReturnValue) == 0x000000, "Member 'RBTask_GetObjectiveText::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.GetProgressionCounterCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct RBTask_GetProgressionCounterCurrentValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetProgressionCounterCurrentValue) == 0x000004, "Wrong alignment on RBTask_GetProgressionCounterCurrentValue");
static_assert(sizeof(RBTask_GetProgressionCounterCurrentValue) == 0x000004, "Wrong size on RBTask_GetProgressionCounterCurrentValue");
static_assert(offsetof(RBTask_GetProgressionCounterCurrentValue, ReturnValue) == 0x000000, "Member 'RBTask_GetProgressionCounterCurrentValue::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.GetProgressionCounterMaxValue
// 0x0004 (0x0004 - 0x0000)
struct RBTask_GetProgressionCounterMaxValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetProgressionCounterMaxValue) == 0x000004, "Wrong alignment on RBTask_GetProgressionCounterMaxValue");
static_assert(sizeof(RBTask_GetProgressionCounterMaxValue) == 0x000004, "Wrong size on RBTask_GetProgressionCounterMaxValue");
static_assert(offsetof(RBTask_GetProgressionCounterMaxValue, ReturnValue) == 0x000000, "Member 'RBTask_GetProgressionCounterMaxValue::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.GetProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct RBTask_GetProgressRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetProgressRatio) == 0x000004, "Wrong alignment on RBTask_GetProgressRatio");
static_assert(sizeof(RBTask_GetProgressRatio) == 0x000004, "Wrong size on RBTask_GetProgressRatio");
static_assert(offsetof(RBTask_GetProgressRatio, ReturnValue) == 0x000000, "Member 'RBTask_GetProgressRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.GetProgressText
// 0x0018 (0x0018 - 0x0000)
struct RBTask_GetProgressText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetProgressText) == 0x000008, "Wrong alignment on RBTask_GetProgressText");
static_assert(sizeof(RBTask_GetProgressText) == 0x000018, "Wrong size on RBTask_GetProgressText");
static_assert(offsetof(RBTask_GetProgressText, ReturnValue) == 0x000000, "Member 'RBTask_GetProgressText::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.GetSecondsUntilExpiration
// 0x0008 (0x0008 - 0x0000)
struct RBTask_GetSecondsUntilExpiration final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetSecondsUntilExpiration) == 0x000008, "Wrong alignment on RBTask_GetSecondsUntilExpiration");
static_assert(sizeof(RBTask_GetSecondsUntilExpiration) == 0x000008, "Wrong size on RBTask_GetSecondsUntilExpiration");
static_assert(offsetof(RBTask_GetSecondsUntilExpiration, ReturnValue) == 0x000000, "Member 'RBTask_GetSecondsUntilExpiration::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.GetTaskData
// 0x0008 (0x0008 - 0x0000)
struct RBTask_GetTaskData final
{
public:
	class URBTaskData*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetTaskData) == 0x000008, "Wrong alignment on RBTask_GetTaskData");
static_assert(sizeof(RBTask_GetTaskData) == 0x000008, "Wrong size on RBTask_GetTaskData");
static_assert(offsetof(RBTask_GetTaskData, ReturnValue) == 0x000000, "Member 'RBTask_GetTaskData::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.GetTaskState
// 0x0001 (0x0001 - 0x0000)
struct RBTask_GetTaskState final
{
public:
	ETaskState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetTaskState) == 0x000001, "Wrong alignment on RBTask_GetTaskState");
static_assert(sizeof(RBTask_GetTaskState) == 0x000001, "Wrong size on RBTask_GetTaskState");
static_assert(offsetof(RBTask_GetTaskState, ReturnValue) == 0x000000, "Member 'RBTask_GetTaskState::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.GetTaskUniqueId
// 0x0008 (0x0008 - 0x0000)
struct RBTask_GetTaskUniqueId final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_GetTaskUniqueId) == 0x000008, "Wrong alignment on RBTask_GetTaskUniqueId");
static_assert(sizeof(RBTask_GetTaskUniqueId) == 0x000008, "Wrong size on RBTask_GetTaskUniqueId");
static_assert(offsetof(RBTask_GetTaskUniqueId, ReturnValue) == 0x000000, "Member 'RBTask_GetTaskUniqueId::ReturnValue' has a wrong offset!");

// Function OPP.RBTask.IsExpiringSoon
// 0x0001 (0x0001 - 0x0000)
struct RBTask_IsExpiringSoon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_IsExpiringSoon) == 0x000001, "Wrong alignment on RBTask_IsExpiringSoon");
static_assert(sizeof(RBTask_IsExpiringSoon) == 0x000001, "Wrong size on RBTask_IsExpiringSoon");
static_assert(offsetof(RBTask_IsExpiringSoon, ReturnValue) == 0x000000, "Member 'RBTask_IsExpiringSoon::ReturnValue' has a wrong offset!");

// Function OPP.RBTask_PlayerEvent.OnPlayerEvent
// 0x0008 (0x0008 - 0x0000)
struct RBTask_PlayerEvent_OnPlayerEvent final
{
public:
	EPlayerEvent                                  EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2437[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_PlayerEvent_OnPlayerEvent) == 0x000004, "Wrong alignment on RBTask_PlayerEvent_OnPlayerEvent");
static_assert(sizeof(RBTask_PlayerEvent_OnPlayerEvent) == 0x000008, "Wrong size on RBTask_PlayerEvent_OnPlayerEvent");
static_assert(offsetof(RBTask_PlayerEvent_OnPlayerEvent, EventType) == 0x000000, "Member 'RBTask_PlayerEvent_OnPlayerEvent::EventType' has a wrong offset!");
static_assert(offsetof(RBTask_PlayerEvent_OnPlayerEvent, Value) == 0x000004, "Member 'RBTask_PlayerEvent_OnPlayerEvent::Value' has a wrong offset!");

// Function OPP.RBWaterValveObjectiveCoordinator.OnPanelActiveChangedEvent_Server
// 0x0010 (0x0010 - 0x0000)
struct RBWaterValveObjectiveCoordinator_OnPanelActiveChangedEvent_Server final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWaterValveObjectiveCoordinator_OnPanelActiveChangedEvent_Server) == 0x000008, "Wrong alignment on RBWaterValveObjectiveCoordinator_OnPanelActiveChangedEvent_Server");
static_assert(sizeof(RBWaterValveObjectiveCoordinator_OnPanelActiveChangedEvent_Server) == 0x000010, "Wrong size on RBWaterValveObjectiveCoordinator_OnPanelActiveChangedEvent_Server");
static_assert(offsetof(RBWaterValveObjectiveCoordinator_OnPanelActiveChangedEvent_Server, Panel) == 0x000000, "Member 'RBWaterValveObjectiveCoordinator_OnPanelActiveChangedEvent_Server::Panel' has a wrong offset!");
static_assert(offsetof(RBWaterValveObjectiveCoordinator_OnPanelActiveChangedEvent_Server, PawnInteracting) == 0x000008, "Member 'RBWaterValveObjectiveCoordinator_OnPanelActiveChangedEvent_Server::PawnInteracting' has a wrong offset!");

// Function OPP.RBWaterValveObjectiveCoordinator.OnPumpInteractionEvent_Server
// 0x0010 (0x0010 - 0x0000)
struct RBWaterValveObjectiveCoordinator_OnPumpInteractionEvent_Server final
{
public:
	class ARBPawn*                                Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URBInteractibleComponent*               Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWaterValveObjectiveCoordinator_OnPumpInteractionEvent_Server) == 0x000008, "Wrong alignment on RBWaterValveObjectiveCoordinator_OnPumpInteractionEvent_Server");
static_assert(sizeof(RBWaterValveObjectiveCoordinator_OnPumpInteractionEvent_Server) == 0x000010, "Wrong size on RBWaterValveObjectiveCoordinator_OnPumpInteractionEvent_Server");
static_assert(offsetof(RBWaterValveObjectiveCoordinator_OnPumpInteractionEvent_Server, Interactor) == 0x000000, "Member 'RBWaterValveObjectiveCoordinator_OnPumpInteractionEvent_Server::Interactor' has a wrong offset!");
static_assert(offsetof(RBWaterValveObjectiveCoordinator_OnPumpInteractionEvent_Server, Component) == 0x000008, "Member 'RBWaterValveObjectiveCoordinator_OnPumpInteractionEvent_Server::Component' has a wrong offset!");

// Function OPP.RBWaterValveObjectiveCoordinator.OnValveInitialInteraction_Server
// 0x0010 (0x0010 - 0x0000)
struct RBWaterValveObjectiveCoordinator_OnValveInitialInteraction_Server final
{
public:
	class URBInteractiblePanelComponent*          Panel;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPawn*                                PawnInteracting;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWaterValveObjectiveCoordinator_OnValveInitialInteraction_Server) == 0x000008, "Wrong alignment on RBWaterValveObjectiveCoordinator_OnValveInitialInteraction_Server");
static_assert(sizeof(RBWaterValveObjectiveCoordinator_OnValveInitialInteraction_Server) == 0x000010, "Wrong size on RBWaterValveObjectiveCoordinator_OnValveInitialInteraction_Server");
static_assert(offsetof(RBWaterValveObjectiveCoordinator_OnValveInitialInteraction_Server, Panel) == 0x000000, "Member 'RBWaterValveObjectiveCoordinator_OnValveInitialInteraction_Server::Panel' has a wrong offset!");
static_assert(offsetof(RBWaterValveObjectiveCoordinator_OnValveInitialInteraction_Server, PawnInteracting) == 0x000008, "Member 'RBWaterValveObjectiveCoordinator_OnValveInitialInteraction_Server::PawnInteracting' has a wrong offset!");

// Function OPP.RBTask_StageCompletion.OnPlayerEvent
// 0x0008 (0x0008 - 0x0000)
struct RBTask_StageCompletion_OnPlayerEvent final
{
public:
	EPlayerEvent                                  EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTask_StageCompletion_OnPlayerEvent) == 0x000004, "Wrong alignment on RBTask_StageCompletion_OnPlayerEvent");
static_assert(sizeof(RBTask_StageCompletion_OnPlayerEvent) == 0x000008, "Wrong size on RBTask_StageCompletion_OnPlayerEvent");
static_assert(offsetof(RBTask_StageCompletion_OnPlayerEvent, EventType) == 0x000000, "Member 'RBTask_StageCompletion_OnPlayerEvent::EventType' has a wrong offset!");
static_assert(offsetof(RBTask_StageCompletion_OnPlayerEvent, Value) == 0x000004, "Member 'RBTask_StageCompletion_OnPlayerEvent::Value' has a wrong offset!");

// Function OPP.RBTask_StageCompletion.OnStageEnded
// 0x0058 (0x0058 - 0x0000)
struct RBTask_StageCompletion_OnStageEnded final
{
public:
	struct FRBStageID                             StageID;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRBMissionID                           MissionID;                                         // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bisReset;                                          // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_243D[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTask_StageCompletion_OnStageEnded) == 0x000008, "Wrong alignment on RBTask_StageCompletion_OnStageEnded");
static_assert(sizeof(RBTask_StageCompletion_OnStageEnded) == 0x000058, "Wrong size on RBTask_StageCompletion_OnStageEnded");
static_assert(offsetof(RBTask_StageCompletion_OnStageEnded, StageID) == 0x000000, "Member 'RBTask_StageCompletion_OnStageEnded::StageID' has a wrong offset!");
static_assert(offsetof(RBTask_StageCompletion_OnStageEnded, MissionID) == 0x000028, "Member 'RBTask_StageCompletion_OnStageEnded::MissionID' has a wrong offset!");
static_assert(offsetof(RBTask_StageCompletion_OnStageEnded, bisReset) == 0x000050, "Member 'RBTask_StageCompletion_OnStageEnded::bisReset' has a wrong offset!");

// Function OPP.RBTaskData.FormatDescription
// 0x0018 (0x0018 - 0x0000)
struct RBTaskData_FormatDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTaskData_FormatDescription) == 0x000008, "Wrong alignment on RBTaskData_FormatDescription");
static_assert(sizeof(RBTaskData_FormatDescription) == 0x000018, "Wrong size on RBTaskData_FormatDescription");
static_assert(offsetof(RBTaskData_FormatDescription, ReturnValue) == 0x000000, "Member 'RBTaskData_FormatDescription::ReturnValue' has a wrong offset!");

// Function OPP.RBTaskData.FormatObjective
// 0x0018 (0x0018 - 0x0000)
struct RBTaskData_FormatObjective final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTaskData_FormatObjective) == 0x000008, "Wrong alignment on RBTaskData_FormatObjective");
static_assert(sizeof(RBTaskData_FormatObjective) == 0x000018, "Wrong size on RBTaskData_FormatObjective");
static_assert(offsetof(RBTaskData_FormatObjective, ReturnValue) == 0x000000, "Member 'RBTaskData_FormatObjective::ReturnValue' has a wrong offset!");

// Function OPP.RBTaskData.FormatTitle
// 0x0018 (0x0018 - 0x0000)
struct RBTaskData_FormatTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTaskData_FormatTitle) == 0x000008, "Wrong alignment on RBTaskData_FormatTitle");
static_assert(sizeof(RBTaskData_FormatTitle) == 0x000018, "Wrong size on RBTaskData_FormatTitle");
static_assert(offsetof(RBTaskData_FormatTitle, ReturnValue) == 0x000000, "Member 'RBTaskData_FormatTitle::ReturnValue' has a wrong offset!");

// Function OPP.RBTaskData.GetProgressionCounterMaxValue
// 0x0004 (0x0004 - 0x0000)
struct RBTaskData_GetProgressionCounterMaxValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTaskData_GetProgressionCounterMaxValue) == 0x000004, "Wrong alignment on RBTaskData_GetProgressionCounterMaxValue");
static_assert(sizeof(RBTaskData_GetProgressionCounterMaxValue) == 0x000004, "Wrong size on RBTaskData_GetProgressionCounterMaxValue");
static_assert(offsetof(RBTaskData_GetProgressionCounterMaxValue, ReturnValue) == 0x000000, "Member 'RBTaskData_GetProgressionCounterMaxValue::ReturnValue' has a wrong offset!");

// Function OPP.RBTaskManager.OnPlayerProgressionReceived
// 0x0008 (0x0008 - 0x0000)
struct RBTaskManager_OnPlayerProgressionReceived final
{
public:
	class ARBPlayerState*                         RBPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTaskManager_OnPlayerProgressionReceived) == 0x000008, "Wrong alignment on RBTaskManager_OnPlayerProgressionReceived");
static_assert(sizeof(RBTaskManager_OnPlayerProgressionReceived) == 0x000008, "Wrong size on RBTaskManager_OnPlayerProgressionReceived");
static_assert(offsetof(RBTaskManager_OnPlayerProgressionReceived, RBPlayerState) == 0x000000, "Member 'RBTaskManager_OnPlayerProgressionReceived::RBPlayerState' has a wrong offset!");

// Function OPP.RBTaskManager.GetAvailableTasks
// 0x0010 (0x0010 - 0x0000)
struct RBTaskManager_GetAvailableTasks final
{
public:
	TArray<struct FAvailableTask>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTaskManager_GetAvailableTasks) == 0x000008, "Wrong alignment on RBTaskManager_GetAvailableTasks");
static_assert(sizeof(RBTaskManager_GetAvailableTasks) == 0x000010, "Wrong size on RBTaskManager_GetAvailableTasks");
static_assert(offsetof(RBTaskManager_GetAvailableTasks, ReturnValue) == 0x000000, "Member 'RBTaskManager_GetAvailableTasks::ReturnValue' has a wrong offset!");

// Function OPP.RBTaskManager.GetPlayerTasks
// 0x0028 (0x0028 - 0x0000)
struct RBTaskManager_GetPlayerTasks final
{
public:
	struct FPlayerTasks                           ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTaskManager_GetPlayerTasks) == 0x000008, "Wrong alignment on RBTaskManager_GetPlayerTasks");
static_assert(sizeof(RBTaskManager_GetPlayerTasks) == 0x000028, "Wrong size on RBTaskManager_GetPlayerTasks");
static_assert(offsetof(RBTaskManager_GetPlayerTasks, ReturnValue) == 0x000000, "Member 'RBTaskManager_GetPlayerTasks::ReturnValue' has a wrong offset!");

// Function OPP.RBToasterDetector.BP_SetExternalAlertedStateActions
// 0x0020 (0x0020 - 0x0000)
struct RBToasterDetector_BP_SetExternalAlertedStateActions final
{
public:
	struct FAlertedStateActions                   InAlertedStateActions;                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBToasterDetector_BP_SetExternalAlertedStateActions) == 0x000008, "Wrong alignment on RBToasterDetector_BP_SetExternalAlertedStateActions");
static_assert(sizeof(RBToasterDetector_BP_SetExternalAlertedStateActions) == 0x000020, "Wrong size on RBToasterDetector_BP_SetExternalAlertedStateActions");
static_assert(offsetof(RBToasterDetector_BP_SetExternalAlertedStateActions, InAlertedStateActions) == 0x000000, "Member 'RBToasterDetector_BP_SetExternalAlertedStateActions::InAlertedStateActions' has a wrong offset!");

// Function OPP.RBToasterDetector.BP_GetAllLinkedTriggerables
// 0x0010 (0x0010 - 0x0000)
struct RBToasterDetector_BP_GetAllLinkedTriggerables final
{
public:
	TArray<class ARBTriggerable*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBToasterDetector_BP_GetAllLinkedTriggerables) == 0x000008, "Wrong alignment on RBToasterDetector_BP_GetAllLinkedTriggerables");
static_assert(sizeof(RBToasterDetector_BP_GetAllLinkedTriggerables) == 0x000010, "Wrong size on RBToasterDetector_BP_GetAllLinkedTriggerables");
static_assert(offsetof(RBToasterDetector_BP_GetAllLinkedTriggerables, ReturnValue) == 0x000000, "Member 'RBToasterDetector_BP_GetAllLinkedTriggerables::ReturnValue' has a wrong offset!");

// Function OPP.RBTortureRoom.Event_OnPlayerConnected
// 0x0010 (0x0010 - 0x0000)
struct RBTortureRoom_Event_OnPlayerConnected final
{
public:
	class URBTorturePanelComponent*               TortureComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTortureRoom_Event_OnPlayerConnected) == 0x000008, "Wrong alignment on RBTortureRoom_Event_OnPlayerConnected");
static_assert(sizeof(RBTortureRoom_Event_OnPlayerConnected) == 0x000010, "Wrong size on RBTortureRoom_Event_OnPlayerConnected");
static_assert(offsetof(RBTortureRoom_Event_OnPlayerConnected, TortureComponent) == 0x000000, "Member 'RBTortureRoom_Event_OnPlayerConnected::TortureComponent' has a wrong offset!");
static_assert(offsetof(RBTortureRoom_Event_OnPlayerConnected, Player) == 0x000008, "Member 'RBTortureRoom_Event_OnPlayerConnected::Player' has a wrong offset!");

// Function OPP.RBTortureRoom.Event_OnPlayerDisconnected
// 0x0010 (0x0010 - 0x0000)
struct RBTortureRoom_Event_OnPlayerDisconnected final
{
public:
	class URBTorturePanelComponent*               TortureComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTortureRoom_Event_OnPlayerDisconnected) == 0x000008, "Wrong alignment on RBTortureRoom_Event_OnPlayerDisconnected");
static_assert(sizeof(RBTortureRoom_Event_OnPlayerDisconnected) == 0x000010, "Wrong size on RBTortureRoom_Event_OnPlayerDisconnected");
static_assert(offsetof(RBTortureRoom_Event_OnPlayerDisconnected, TortureComponent) == 0x000000, "Member 'RBTortureRoom_Event_OnPlayerDisconnected::TortureComponent' has a wrong offset!");
static_assert(offsetof(RBTortureRoom_Event_OnPlayerDisconnected, Player) == 0x000008, "Member 'RBTortureRoom_Event_OnPlayerDisconnected::Player' has a wrong offset!");

// Function OPP.RBTortureRoom.Event_OnPlayerInputFailed
// 0x0010 (0x0010 - 0x0000)
struct RBTortureRoom_Event_OnPlayerInputFailed final
{
public:
	class URBTorturePanelComponent*               TortureComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTortureRoom_Event_OnPlayerInputFailed) == 0x000008, "Wrong alignment on RBTortureRoom_Event_OnPlayerInputFailed");
static_assert(sizeof(RBTortureRoom_Event_OnPlayerInputFailed) == 0x000010, "Wrong size on RBTortureRoom_Event_OnPlayerInputFailed");
static_assert(offsetof(RBTortureRoom_Event_OnPlayerInputFailed, TortureComponent) == 0x000000, "Member 'RBTortureRoom_Event_OnPlayerInputFailed::TortureComponent' has a wrong offset!");
static_assert(offsetof(RBTortureRoom_Event_OnPlayerInputFailed, Player) == 0x000008, "Member 'RBTortureRoom_Event_OnPlayerInputFailed::Player' has a wrong offset!");

// Function OPP.RBTortureRoom.Event_OnPlayerInputSuccess
// 0x0010 (0x0010 - 0x0000)
struct RBTortureRoom_Event_OnPlayerInputSuccess final
{
public:
	class URBTorturePanelComponent*               TortureComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPlayer*                              Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTortureRoom_Event_OnPlayerInputSuccess) == 0x000008, "Wrong alignment on RBTortureRoom_Event_OnPlayerInputSuccess");
static_assert(sizeof(RBTortureRoom_Event_OnPlayerInputSuccess) == 0x000010, "Wrong size on RBTortureRoom_Event_OnPlayerInputSuccess");
static_assert(offsetof(RBTortureRoom_Event_OnPlayerInputSuccess, TortureComponent) == 0x000000, "Member 'RBTortureRoom_Event_OnPlayerInputSuccess::TortureComponent' has a wrong offset!");
static_assert(offsetof(RBTortureRoom_Event_OnPlayerInputSuccess, Player) == 0x000008, "Member 'RBTortureRoom_Event_OnPlayerInputSuccess::Player' has a wrong offset!");

// Function OPP.RBTrapDart.BP_DoesDamage
// 0x0001 (0x0001 - 0x0000)
struct RBTrapDart_BP_DoesDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrapDart_BP_DoesDamage) == 0x000001, "Wrong alignment on RBTrapDart_BP_DoesDamage");
static_assert(sizeof(RBTrapDart_BP_DoesDamage) == 0x000001, "Wrong size on RBTrapDart_BP_DoesDamage");
static_assert(offsetof(RBTrapDart_BP_DoesDamage, ReturnValue) == 0x000000, "Member 'RBTrapDart_BP_DoesDamage::ReturnValue' has a wrong offset!");

// Function OPP.RBTrapDart.BP_DoesPsychosis
// 0x0001 (0x0001 - 0x0000)
struct RBTrapDart_BP_DoesPsychosis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrapDart_BP_DoesPsychosis) == 0x000001, "Wrong alignment on RBTrapDart_BP_DoesPsychosis");
static_assert(sizeof(RBTrapDart_BP_DoesPsychosis) == 0x000001, "Wrong size on RBTrapDart_BP_DoesPsychosis");
static_assert(offsetof(RBTrapDart_BP_DoesPsychosis, ReturnValue) == 0x000000, "Member 'RBTrapDart_BP_DoesPsychosis::ReturnValue' has a wrong offset!");

// Function OPP.RBTrapDart.BP_Launch
// 0x000C (0x000C - 0x0000)
struct RBTrapDart_BP_Launch final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrapDart_BP_Launch) == 0x000004, "Wrong alignment on RBTrapDart_BP_Launch");
static_assert(sizeof(RBTrapDart_BP_Launch) == 0x00000C, "Wrong size on RBTrapDart_BP_Launch");
static_assert(offsetof(RBTrapDart_BP_Launch, Direction) == 0x000000, "Member 'RBTrapDart_BP_Launch::Direction' has a wrong offset!");

// Function OPP.RBTrapDart.BP_OnDetachFromPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBTrapDart_BP_OnDetachFromPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrapDart_BP_OnDetachFromPlayer) == 0x000008, "Wrong alignment on RBTrapDart_BP_OnDetachFromPlayer");
static_assert(sizeof(RBTrapDart_BP_OnDetachFromPlayer) == 0x000008, "Wrong size on RBTrapDart_BP_OnDetachFromPlayer");
static_assert(offsetof(RBTrapDart_BP_OnDetachFromPlayer, Player) == 0x000000, "Member 'RBTrapDart_BP_OnDetachFromPlayer::Player' has a wrong offset!");

// Function OPP.RBTrapDart.BP_OnHitPlayer
// 0x0008 (0x0008 - 0x0000)
struct RBTrapDart_BP_OnHitPlayer final
{
public:
	class ARBPlayer*                              Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrapDart_BP_OnHitPlayer) == 0x000008, "Wrong alignment on RBTrapDart_BP_OnHitPlayer");
static_assert(sizeof(RBTrapDart_BP_OnHitPlayer) == 0x000008, "Wrong size on RBTrapDart_BP_OnHitPlayer");
static_assert(offsetof(RBTrapDart_BP_OnHitPlayer, Player) == 0x000000, "Member 'RBTrapDart_BP_OnHitPlayer::Player' has a wrong offset!");

// Function OPP.RBTrapDart.Multicast_TriggerTrap
// 0x0001 (0x0001 - 0x0000)
struct RBTrapDart_Multicast_TriggerTrap final
{
public:
	bool                                          bInitial;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrapDart_Multicast_TriggerTrap) == 0x000001, "Wrong alignment on RBTrapDart_Multicast_TriggerTrap");
static_assert(sizeof(RBTrapDart_Multicast_TriggerTrap) == 0x000001, "Wrong size on RBTrapDart_Multicast_TriggerTrap");
static_assert(offsetof(RBTrapDart_Multicast_TriggerTrap, bInitial) == 0x000000, "Member 'RBTrapDart_Multicast_TriggerTrap::bInitial' has a wrong offset!");

// Function OPP.RBTrapDart.OnPawnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBTrapDart_OnPawnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2453[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTrapDart_OnPawnBeginOverlap) == 0x000008, "Wrong alignment on RBTrapDart_OnPawnBeginOverlap");
static_assert(sizeof(RBTrapDart_OnPawnBeginOverlap) == 0x0000A8, "Wrong size on RBTrapDart_OnPawnBeginOverlap");
static_assert(offsetof(RBTrapDart_OnPawnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBTrapDart_OnPawnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBTrapDart_OnPawnBeginOverlap, OtherActor) == 0x000008, "Member 'RBTrapDart_OnPawnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBTrapDart_OnPawnBeginOverlap, OtherComponent) == 0x000010, "Member 'RBTrapDart_OnPawnBeginOverlap::OtherComponent' has a wrong offset!");
static_assert(offsetof(RBTrapDart_OnPawnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBTrapDart_OnPawnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBTrapDart_OnPawnBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBTrapDart_OnPawnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBTrapDart_OnPawnBeginOverlap, SweepResult) == 0x000020, "Member 'RBTrapDart_OnPawnBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBTriggerableDoorWayDetector.BP_SetShouldBeOpened
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerableDoorWayDetector_BP_SetShouldBeOpened final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableDoorWayDetector_BP_SetShouldBeOpened) == 0x000001, "Wrong alignment on RBTriggerableDoorWayDetector_BP_SetShouldBeOpened");
static_assert(sizeof(RBTriggerableDoorWayDetector_BP_SetShouldBeOpened) == 0x000001, "Wrong size on RBTriggerableDoorWayDetector_BP_SetShouldBeOpened");
static_assert(offsetof(RBTriggerableDoorWayDetector_BP_SetShouldBeOpened, bValue) == 0x000000, "Member 'RBTriggerableDoorWayDetector_BP_SetShouldBeOpened::bValue' has a wrong offset!");

// Function OPP.RBTriggerableDoorWayDetector.IsBlockingDoorWaybackChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerableDoorWayDetector_IsBlockingDoorWaybackChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangedType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableDoorWayDetector_IsBlockingDoorWaybackChangedCallback) == 0x000001, "Wrong alignment on RBTriggerableDoorWayDetector_IsBlockingDoorWaybackChangedCallback");
static_assert(sizeof(RBTriggerableDoorWayDetector_IsBlockingDoorWaybackChangedCallback) == 0x000001, "Wrong size on RBTriggerableDoorWayDetector_IsBlockingDoorWaybackChangedCallback");
static_assert(offsetof(RBTriggerableDoorWayDetector_IsBlockingDoorWaybackChangedCallback, ChangedType) == 0x000000, "Member 'RBTriggerableDoorWayDetector_IsBlockingDoorWaybackChangedCallback::ChangedType' has a wrong offset!");

// Function OPP.RBTriggerableDoorWayDetector.OnComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBTriggerableDoorWayDetector_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2458[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableDoorWayDetector_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on RBTriggerableDoorWayDetector_OnComponentBeginOverlap");
static_assert(sizeof(RBTriggerableDoorWayDetector_OnComponentBeginOverlap) == 0x0000A8, "Wrong size on RBTriggerableDoorWayDetector_OnComponentBeginOverlap");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBTriggerableDoorWayDetector_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'RBTriggerableDoorWayDetector_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'RBTriggerableDoorWayDetector_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBTriggerableDoorWayDetector_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBTriggerableDoorWayDetector_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'RBTriggerableDoorWayDetector_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBTriggerableDoorWayDetector.OnComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBTriggerableDoorWayDetector_OnComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2459[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTriggerableDoorWayDetector_OnComponentEndOverlap) == 0x000008, "Wrong alignment on RBTriggerableDoorWayDetector_OnComponentEndOverlap");
static_assert(sizeof(RBTriggerableDoorWayDetector_OnComponentEndOverlap) == 0x000020, "Wrong size on RBTriggerableDoorWayDetector_OnComponentEndOverlap");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBTriggerableDoorWayDetector_OnComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentEndOverlap, OtherActor) == 0x000008, "Member 'RBTriggerableDoorWayDetector_OnComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentEndOverlap, OtherComp) == 0x000010, "Member 'RBTriggerableDoorWayDetector_OnComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBTriggerableDoorWayDetector_OnComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBTriggerableDoorWayDetector.OnLargePickupDropped
// 0x0008 (0x0008 - 0x0000)
struct RBTriggerableDoorWayDetector_OnLargePickupDropped final
{
public:
	class ARBLargePickup*                         LargePickup;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableDoorWayDetector_OnLargePickupDropped) == 0x000008, "Wrong alignment on RBTriggerableDoorWayDetector_OnLargePickupDropped");
static_assert(sizeof(RBTriggerableDoorWayDetector_OnLargePickupDropped) == 0x000008, "Wrong size on RBTriggerableDoorWayDetector_OnLargePickupDropped");
static_assert(offsetof(RBTriggerableDoorWayDetector_OnLargePickupDropped, LargePickup) == 0x000000, "Member 'RBTriggerableDoorWayDetector_OnLargePickupDropped::LargePickup' has a wrong offset!");

// Function OPP.RBTriggerableDoorWayDetector.IsBlockingDoorway
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerableDoorWayDetector_IsBlockingDoorway final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableDoorWayDetector_IsBlockingDoorway) == 0x000001, "Wrong alignment on RBTriggerableDoorWayDetector_IsBlockingDoorway");
static_assert(sizeof(RBTriggerableDoorWayDetector_IsBlockingDoorway) == 0x000001, "Wrong size on RBTriggerableDoorWayDetector_IsBlockingDoorway");
static_assert(offsetof(RBTriggerableDoorWayDetector_IsBlockingDoorway, ReturnValue) == 0x000000, "Member 'RBTriggerableDoorWayDetector_IsBlockingDoorway::ReturnValue' has a wrong offset!");

// Function OPP.RBTriggerableGate.BP_ForceVariatorType
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerableGate_BP_ForceVariatorType final
{
public:
	ERollingGateVariatorType                      VariatorType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableGate_BP_ForceVariatorType) == 0x000001, "Wrong alignment on RBTriggerableGate_BP_ForceVariatorType");
static_assert(sizeof(RBTriggerableGate_BP_ForceVariatorType) == 0x000001, "Wrong size on RBTriggerableGate_BP_ForceVariatorType");
static_assert(offsetof(RBTriggerableGate_BP_ForceVariatorType, VariatorType) == 0x000000, "Member 'RBTriggerableGate_BP_ForceVariatorType::VariatorType' has a wrong offset!");

// Function OPP.RBTriggerableGate.SetVariatorActorsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerableGate_SetVariatorActorsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableGate_SetVariatorActorsEnabled) == 0x000001, "Wrong alignment on RBTriggerableGate_SetVariatorActorsEnabled");
static_assert(sizeof(RBTriggerableGate_SetVariatorActorsEnabled) == 0x000001, "Wrong size on RBTriggerableGate_SetVariatorActorsEnabled");
static_assert(offsetof(RBTriggerableGate_SetVariatorActorsEnabled, bEnabled) == 0x000000, "Member 'RBTriggerableGate_SetVariatorActorsEnabled::bEnabled' has a wrong offset!");

// Function OPP.RBTriggerableGate.GetBlockableState
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerableGate_GetBlockableState final
{
public:
	EBlockableState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableGate_GetBlockableState) == 0x000001, "Wrong alignment on RBTriggerableGate_GetBlockableState");
static_assert(sizeof(RBTriggerableGate_GetBlockableState) == 0x000001, "Wrong size on RBTriggerableGate_GetBlockableState");
static_assert(offsetof(RBTriggerableGate_GetBlockableState, ReturnValue) == 0x000000, "Member 'RBTriggerableGate_GetBlockableState::ReturnValue' has a wrong offset!");

// Function OPP.RBTriggerableGate.GetCurrentVariatorType
// 0x0001 (0x0001 - 0x0000)
struct RBTriggerableGate_GetCurrentVariatorType final
{
public:
	ERollingGateVariatorType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBTriggerableGate_GetCurrentVariatorType) == 0x000001, "Wrong alignment on RBTriggerableGate_GetCurrentVariatorType");
static_assert(sizeof(RBTriggerableGate_GetCurrentVariatorType) == 0x000001, "Wrong size on RBTriggerableGate_GetCurrentVariatorType");
static_assert(offsetof(RBTriggerableGate_GetCurrentVariatorType, ReturnValue) == 0x000000, "Member 'RBTriggerableGate_GetCurrentVariatorType::ReturnValue' has a wrong offset!");

// Function OPP.CoordinatorTutorialInfo.OnCompletionInProgressChanged
// 0x0010 (0x0010 - 0x0000)
struct CoordinatorTutorialInfo_OnCompletionInProgressChanged final
{
public:
	class ARBBaseObjectiveCoordinator*            Coordinator;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsProgressionInProgress;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCompletedByLocalPlayer;                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2462[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoordinatorTutorialInfo_OnCompletionInProgressChanged) == 0x000008, "Wrong alignment on CoordinatorTutorialInfo_OnCompletionInProgressChanged");
static_assert(sizeof(CoordinatorTutorialInfo_OnCompletionInProgressChanged) == 0x000010, "Wrong size on CoordinatorTutorialInfo_OnCompletionInProgressChanged");
static_assert(offsetof(CoordinatorTutorialInfo_OnCompletionInProgressChanged, Coordinator) == 0x000000, "Member 'CoordinatorTutorialInfo_OnCompletionInProgressChanged::Coordinator' has a wrong offset!");
static_assert(offsetof(CoordinatorTutorialInfo_OnCompletionInProgressChanged, IsProgressionInProgress) == 0x000008, "Member 'CoordinatorTutorialInfo_OnCompletionInProgressChanged::IsProgressionInProgress' has a wrong offset!");
static_assert(offsetof(CoordinatorTutorialInfo_OnCompletionInProgressChanged, IsCompletedByLocalPlayer) == 0x000009, "Member 'CoordinatorTutorialInfo_OnCompletionInProgressChanged::IsCompletedByLocalPlayer' has a wrong offset!");

// Function OPP.RBQuestItemSpawner.GetSpecificObjectiveActorTarget
// 0x0008 (0x0008 - 0x0000)
struct RBQuestItemSpawner_GetSpecificObjectiveActorTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBQuestItemSpawner_GetSpecificObjectiveActorTarget) == 0x000008, "Wrong alignment on RBQuestItemSpawner_GetSpecificObjectiveActorTarget");
static_assert(sizeof(RBQuestItemSpawner_GetSpecificObjectiveActorTarget) == 0x000008, "Wrong size on RBQuestItemSpawner_GetSpecificObjectiveActorTarget");
static_assert(offsetof(RBQuestItemSpawner_GetSpecificObjectiveActorTarget, ReturnValue) == 0x000000, "Member 'RBQuestItemSpawner_GetSpecificObjectiveActorTarget::ReturnValue' has a wrong offset!");

// Function OPP.RBQuestItemSpawner.SpawnQuestItem
// 0x0010 (0x0010 - 0x0000)
struct RBQuestItemSpawner_SpawnQuestItem final
{
public:
	TSubclassOf<class ARBPickup>                  SpecificItemClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARBPickup*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBQuestItemSpawner_SpawnQuestItem) == 0x000008, "Wrong alignment on RBQuestItemSpawner_SpawnQuestItem");
static_assert(sizeof(RBQuestItemSpawner_SpawnQuestItem) == 0x000010, "Wrong size on RBQuestItemSpawner_SpawnQuestItem");
static_assert(offsetof(RBQuestItemSpawner_SpawnQuestItem, SpecificItemClass) == 0x000000, "Member 'RBQuestItemSpawner_SpawnQuestItem::SpecificItemClass' has a wrong offset!");
static_assert(offsetof(RBQuestItemSpawner_SpawnQuestItem, ReturnValue) == 0x000008, "Member 'RBQuestItemSpawner_SpawnQuestItem::ReturnValue' has a wrong offset!");

// Function OPP.RBValvePanelComponent.CurrentGameplayRatioChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBValvePanelComponent_CurrentGameplayRatioChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_CurrentGameplayRatioChangedCallback) == 0x000001, "Wrong alignment on RBValvePanelComponent_CurrentGameplayRatioChangedCallback");
static_assert(sizeof(RBValvePanelComponent_CurrentGameplayRatioChangedCallback) == 0x000001, "Wrong size on RBValvePanelComponent_CurrentGameplayRatioChangedCallback");
static_assert(offsetof(RBValvePanelComponent_CurrentGameplayRatioChangedCallback, ChangeType) == 0x000000, "Member 'RBValvePanelComponent_CurrentGameplayRatioChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBValvePanelComponent.CurrentMeterChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBValvePanelComponent_CurrentMeterChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_CurrentMeterChangedCallback) == 0x000001, "Wrong alignment on RBValvePanelComponent_CurrentMeterChangedCallback");
static_assert(sizeof(RBValvePanelComponent_CurrentMeterChangedCallback) == 0x000001, "Wrong size on RBValvePanelComponent_CurrentMeterChangedCallback");
static_assert(offsetof(RBValvePanelComponent_CurrentMeterChangedCallback, ChangeType) == 0x000000, "Member 'RBValvePanelComponent_CurrentMeterChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBValvePanelComponent.InputDirectionHeldSideChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBValvePanelComponent_InputDirectionHeldSideChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_InputDirectionHeldSideChangedCallback) == 0x000001, "Wrong alignment on RBValvePanelComponent_InputDirectionHeldSideChangedCallback");
static_assert(sizeof(RBValvePanelComponent_InputDirectionHeldSideChangedCallback) == 0x000001, "Wrong size on RBValvePanelComponent_InputDirectionHeldSideChangedCallback");
static_assert(offsetof(RBValvePanelComponent_InputDirectionHeldSideChangedCallback, ChangeType) == 0x000000, "Member 'RBValvePanelComponent_InputDirectionHeldSideChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBValvePanelComponent.IsInFailureZoneChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBValvePanelComponent_IsInFailureZoneChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_IsInFailureZoneChangedCallback) == 0x000001, "Wrong alignment on RBValvePanelComponent_IsInFailureZoneChangedCallback");
static_assert(sizeof(RBValvePanelComponent_IsInFailureZoneChangedCallback) == 0x000001, "Wrong size on RBValvePanelComponent_IsInFailureZoneChangedCallback");
static_assert(offsetof(RBValvePanelComponent_IsInFailureZoneChangedCallback, ChangeType) == 0x000000, "Member 'RBValvePanelComponent_IsInFailureZoneChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBValvePanelComponent.IsInSuccessZoneChangedCallback
// 0x0001 (0x0001 - 0x0000)
struct RBValvePanelComponent_IsInSuccessZoneChangedCallback final
{
public:
	EScheduledPropertyValueChangedType            ChangeType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_IsInSuccessZoneChangedCallback) == 0x000001, "Wrong alignment on RBValvePanelComponent_IsInSuccessZoneChangedCallback");
static_assert(sizeof(RBValvePanelComponent_IsInSuccessZoneChangedCallback) == 0x000001, "Wrong size on RBValvePanelComponent_IsInSuccessZoneChangedCallback");
static_assert(offsetof(RBValvePanelComponent_IsInSuccessZoneChangedCallback, ChangeType) == 0x000000, "Member 'RBValvePanelComponent_IsInSuccessZoneChangedCallback::ChangeType' has a wrong offset!");

// Function OPP.RBValvePanelComponent.Multicast_OnPanelSucceeded
// 0x0008 (0x0008 - 0x0000)
struct RBValvePanelComponent_Multicast_OnPanelSucceeded final
{
public:
	class ARBPawn*                                Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_Multicast_OnPanelSucceeded) == 0x000008, "Wrong alignment on RBValvePanelComponent_Multicast_OnPanelSucceeded");
static_assert(sizeof(RBValvePanelComponent_Multicast_OnPanelSucceeded) == 0x000008, "Wrong size on RBValvePanelComponent_Multicast_OnPanelSucceeded");
static_assert(offsetof(RBValvePanelComponent_Multicast_OnPanelSucceeded, Pawn) == 0x000000, "Member 'RBValvePanelComponent_Multicast_OnPanelSucceeded::Pawn' has a wrong offset!");

// Function OPP.RBValvePanelComponent.OnUnlockingButtonStateChanged_Server
// 0x0008 (0x0008 - 0x0000)
struct RBValvePanelComponent_OnUnlockingButtonStateChanged_Server final
{
public:
	class URBCoopOperatableComponent*             Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_OnUnlockingButtonStateChanged_Server) == 0x000008, "Wrong alignment on RBValvePanelComponent_OnUnlockingButtonStateChanged_Server");
static_assert(sizeof(RBValvePanelComponent_OnUnlockingButtonStateChanged_Server) == 0x000008, "Wrong size on RBValvePanelComponent_OnUnlockingButtonStateChanged_Server");
static_assert(offsetof(RBValvePanelComponent_OnUnlockingButtonStateChanged_Server, Component) == 0x000000, "Member 'RBValvePanelComponent_OnUnlockingButtonStateChanged_Server::Component' has a wrong offset!");

// Function OPP.RBValvePanelComponent.BP_GetCurrentPawnTurningIntent
// 0x0004 (0x0004 - 0x0000)
struct RBValvePanelComponent_BP_GetCurrentPawnTurningIntent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_BP_GetCurrentPawnTurningIntent) == 0x000004, "Wrong alignment on RBValvePanelComponent_BP_GetCurrentPawnTurningIntent");
static_assert(sizeof(RBValvePanelComponent_BP_GetCurrentPawnTurningIntent) == 0x000004, "Wrong size on RBValvePanelComponent_BP_GetCurrentPawnTurningIntent");
static_assert(offsetof(RBValvePanelComponent_BP_GetCurrentPawnTurningIntent, ReturnValue) == 0x000000, "Member 'RBValvePanelComponent_BP_GetCurrentPawnTurningIntent::ReturnValue' has a wrong offset!");

// Function OPP.RBValvePanelComponent.BP_IsInFailureZone
// 0x0001 (0x0001 - 0x0000)
struct RBValvePanelComponent_BP_IsInFailureZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_BP_IsInFailureZone) == 0x000001, "Wrong alignment on RBValvePanelComponent_BP_IsInFailureZone");
static_assert(sizeof(RBValvePanelComponent_BP_IsInFailureZone) == 0x000001, "Wrong size on RBValvePanelComponent_BP_IsInFailureZone");
static_assert(offsetof(RBValvePanelComponent_BP_IsInFailureZone, ReturnValue) == 0x000000, "Member 'RBValvePanelComponent_BP_IsInFailureZone::ReturnValue' has a wrong offset!");

// Function OPP.RBValvePanelComponent.BP_IsInSuccessZone
// 0x0001 (0x0001 - 0x0000)
struct RBValvePanelComponent_BP_IsInSuccessZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_BP_IsInSuccessZone) == 0x000001, "Wrong alignment on RBValvePanelComponent_BP_IsInSuccessZone");
static_assert(sizeof(RBValvePanelComponent_BP_IsInSuccessZone) == 0x000001, "Wrong size on RBValvePanelComponent_BP_IsInSuccessZone");
static_assert(offsetof(RBValvePanelComponent_BP_IsInSuccessZone, ReturnValue) == 0x000000, "Member 'RBValvePanelComponent_BP_IsInSuccessZone::ReturnValue' has a wrong offset!");

// Function OPP.RBValvePanelComponent.GetCurrentMeterRatio
// 0x0004 (0x0004 - 0x0000)
struct RBValvePanelComponent_GetCurrentMeterRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_GetCurrentMeterRatio) == 0x000004, "Wrong alignment on RBValvePanelComponent_GetCurrentMeterRatio");
static_assert(sizeof(RBValvePanelComponent_GetCurrentMeterRatio) == 0x000004, "Wrong size on RBValvePanelComponent_GetCurrentMeterRatio");
static_assert(offsetof(RBValvePanelComponent_GetCurrentMeterRatio, ReturnValue) == 0x000000, "Member 'RBValvePanelComponent_GetCurrentMeterRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBValvePanelComponent.GetUnlockedTimeLeftRatio
// 0x0004 (0x0004 - 0x0000)
struct RBValvePanelComponent_GetUnlockedTimeLeftRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_GetUnlockedTimeLeftRatio) == 0x000004, "Wrong alignment on RBValvePanelComponent_GetUnlockedTimeLeftRatio");
static_assert(sizeof(RBValvePanelComponent_GetUnlockedTimeLeftRatio) == 0x000004, "Wrong size on RBValvePanelComponent_GetUnlockedTimeLeftRatio");
static_assert(offsetof(RBValvePanelComponent_GetUnlockedTimeLeftRatio, ReturnValue) == 0x000000, "Member 'RBValvePanelComponent_GetUnlockedTimeLeftRatio::ReturnValue' has a wrong offset!");

// Function OPP.RBValvePanelComponent.IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct RBValvePanelComponent_IsCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBValvePanelComponent_IsCompleted) == 0x000001, "Wrong alignment on RBValvePanelComponent_IsCompleted");
static_assert(sizeof(RBValvePanelComponent_IsCompleted) == 0x000001, "Wrong size on RBValvePanelComponent_IsCompleted");
static_assert(offsetof(RBValvePanelComponent_IsCompleted, ReturnValue) == 0x000000, "Member 'RBValvePanelComponent_IsCompleted::ReturnValue' has a wrong offset!");

// Function OPP.RBVariatorManager.GetCurrentVariatorConfigs
// 0x0010 (0x0010 - 0x0000)
struct RBVariatorManager_GetCurrentVariatorConfigs final
{
public:
	TArray<class URBVariatorInfo*>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBVariatorManager_GetCurrentVariatorConfigs) == 0x000008, "Wrong alignment on RBVariatorManager_GetCurrentVariatorConfigs");
static_assert(sizeof(RBVariatorManager_GetCurrentVariatorConfigs) == 0x000010, "Wrong size on RBVariatorManager_GetCurrentVariatorConfigs");
static_assert(offsetof(RBVariatorManager_GetCurrentVariatorConfigs, ReturnValue) == 0x000000, "Member 'RBVariatorManager_GetCurrentVariatorConfigs::ReturnValue' has a wrong offset!");

// Function OPP.RBVariatorManager.GetFixedRollingGateVariatorType
// 0x0001 (0x0001 - 0x0000)
struct RBVariatorManager_GetFixedRollingGateVariatorType final
{
public:
	ERollingGateVariatorType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBVariatorManager_GetFixedRollingGateVariatorType) == 0x000001, "Wrong alignment on RBVariatorManager_GetFixedRollingGateVariatorType");
static_assert(sizeof(RBVariatorManager_GetFixedRollingGateVariatorType) == 0x000001, "Wrong size on RBVariatorManager_GetFixedRollingGateVariatorType");
static_assert(offsetof(RBVariatorManager_GetFixedRollingGateVariatorType, ReturnValue) == 0x000000, "Member 'RBVariatorManager_GetFixedRollingGateVariatorType::ReturnValue' has a wrong offset!");

// Function OPP.RBVariatorManager.IsVariatorUniqueTypeActive
// 0x0002 (0x0002 - 0x0000)
struct RBVariatorManager_IsVariatorUniqueTypeActive final
{
public:
	EUniqueVariatorType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBVariatorManager_IsVariatorUniqueTypeActive) == 0x000001, "Wrong alignment on RBVariatorManager_IsVariatorUniqueTypeActive");
static_assert(sizeof(RBVariatorManager_IsVariatorUniqueTypeActive) == 0x000002, "Wrong size on RBVariatorManager_IsVariatorUniqueTypeActive");
static_assert(offsetof(RBVariatorManager_IsVariatorUniqueTypeActive, Type) == 0x000000, "Member 'RBVariatorManager_IsVariatorUniqueTypeActive::Type' has a wrong offset!");
static_assert(offsetof(RBVariatorManager_IsVariatorUniqueTypeActive, ReturnValue) == 0x000001, "Member 'RBVariatorManager_IsVariatorUniqueTypeActive::ReturnValue' has a wrong offset!");

// Function OPP.RBWaterVolume.OnWaterVolumeBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct RBWaterVolume_OnWaterVolumeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2477[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWaterVolume_OnWaterVolumeBeginOverlap) == 0x000008, "Wrong alignment on RBWaterVolume_OnWaterVolumeBeginOverlap");
static_assert(sizeof(RBWaterVolume_OnWaterVolumeBeginOverlap) == 0x0000A8, "Wrong size on RBWaterVolume_OnWaterVolumeBeginOverlap");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'RBWaterVolume_OnWaterVolumeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeBeginOverlap, OtherActor) == 0x000008, "Member 'RBWaterVolume_OnWaterVolumeBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeBeginOverlap, OtherComp) == 0x000010, "Member 'RBWaterVolume_OnWaterVolumeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'RBWaterVolume_OnWaterVolumeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeBeginOverlap, bFromSweep) == 0x00001C, "Member 'RBWaterVolume_OnWaterVolumeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeBeginOverlap, SweepResult) == 0x000020, "Member 'RBWaterVolume_OnWaterVolumeBeginOverlap::SweepResult' has a wrong offset!");

// Function OPP.RBWaterVolume.OnWaterVolumeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct RBWaterVolume_OnWaterVolumeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2478[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBWaterVolume_OnWaterVolumeEndOverlap) == 0x000008, "Wrong alignment on RBWaterVolume_OnWaterVolumeEndOverlap");
static_assert(sizeof(RBWaterVolume_OnWaterVolumeEndOverlap) == 0x000020, "Wrong size on RBWaterVolume_OnWaterVolumeEndOverlap");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeEndOverlap, OverlappedComponent) == 0x000000, "Member 'RBWaterVolume_OnWaterVolumeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeEndOverlap, OtherActor) == 0x000008, "Member 'RBWaterVolume_OnWaterVolumeEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeEndOverlap, OtherComp) == 0x000010, "Member 'RBWaterVolume_OnWaterVolumeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(RBWaterVolume_OnWaterVolumeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'RBWaterVolume_OnWaterVolumeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function OPP.RBWaypoint.Event_OnReached
// 0x0008 (0x0008 - 0x0000)
struct RBWaypoint_Event_OnReached final
{
public:
	class ARBBot*                                 bot;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWaypoint_Event_OnReached) == 0x000008, "Wrong alignment on RBWaypoint_Event_OnReached");
static_assert(sizeof(RBWaypoint_Event_OnReached) == 0x000008, "Wrong size on RBWaypoint_Event_OnReached");
static_assert(offsetof(RBWaypoint_Event_OnReached, bot) == 0x000000, "Member 'RBWaypoint_Event_OnReached::bot' has a wrong offset!");

// Function OPP.RBWaypoint.BP_IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBWaypoint_BP_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWaypoint_BP_IsEnabled) == 0x000001, "Wrong alignment on RBWaypoint_BP_IsEnabled");
static_assert(sizeof(RBWaypoint_BP_IsEnabled) == 0x000001, "Wrong size on RBWaypoint_BP_IsEnabled");
static_assert(offsetof(RBWaypoint_BP_IsEnabled, ReturnValue) == 0x000000, "Member 'RBWaypoint_BP_IsEnabled::ReturnValue' has a wrong offset!");

// Function OPP.RBWindowShutter.BP_ForceBlockableState
// 0x0001 (0x0001 - 0x0000)
struct RBWindowShutter_BP_ForceBlockableState final
{
public:
	EBlockableState                               InBlockableState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWindowShutter_BP_ForceBlockableState) == 0x000001, "Wrong alignment on RBWindowShutter_BP_ForceBlockableState");
static_assert(sizeof(RBWindowShutter_BP_ForceBlockableState) == 0x000001, "Wrong size on RBWindowShutter_BP_ForceBlockableState");
static_assert(offsetof(RBWindowShutter_BP_ForceBlockableState, InBlockableState) == 0x000000, "Member 'RBWindowShutter_BP_ForceBlockableState::InBlockableState' has a wrong offset!");

// Function OPP.RBWindowShutter.GetBlockableState
// 0x0001 (0x0001 - 0x0000)
struct RBWindowShutter_GetBlockableState final
{
public:
	EBlockableState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBWindowShutter_GetBlockableState) == 0x000001, "Wrong alignment on RBWindowShutter_GetBlockableState");
static_assert(sizeof(RBWindowShutter_GetBlockableState) == 0x000001, "Wrong size on RBWindowShutter_GetBlockableState");
static_assert(offsetof(RBWindowShutter_GetBlockableState, ReturnValue) == 0x000000, "Member 'RBWindowShutter_GetBlockableState::ReturnValue' has a wrong offset!");

// Function OPP.RBZoneDefenceLocation.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct RBZoneDefenceLocation_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBZoneDefenceLocation_IsEnabled) == 0x000001, "Wrong alignment on RBZoneDefenceLocation_IsEnabled");
static_assert(sizeof(RBZoneDefenceLocation_IsEnabled) == 0x000001, "Wrong size on RBZoneDefenceLocation_IsEnabled");
static_assert(offsetof(RBZoneDefenceLocation_IsEnabled, ReturnValue) == 0x000000, "Member 'RBZoneDefenceLocation_IsEnabled::ReturnValue' has a wrong offset!");

}

