#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArmWreslingTable_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OPP_structs.hpp"
#include "OPP_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ArmWreslingTable_BP.ArmWreslingTable_BP_C
// 0x00C0 (0x04D0 - 0x0410)
class AArmWreslingTable_BP_C final : public ARBArmWreslingTable
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Watch4Ref;                                         // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Watch3Ref;                                         // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Watch2Ref;                                         // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Watch1Ref;                                         // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULobbyArmWrestlingSpectatorComponentBase_C* LobbyArmWrestlingSpectatorComponentBase3;          // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULobbyArmWrestlingSpectatorComponentBase_C* LobbyArmWrestlingSpectatorComponentBase2;          // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULobbyArmWrestlingSpectatorComponentBase_C* LobbyArmWrestlingSpectatorComponentBase1;          // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULobbyArmWrestlingSpectatorComponentBase_C* LobbyArmWrestlingSpectatorComponentBase;           // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Player1Anchor;                                     // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Player2Anchor;                                     // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Table;                                             // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ArmWrestleRatio;                                   // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3892[0x4];                                     // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALobbyArmWrestlingSpectatorStation_C*> Player1Spectators;                                 // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ALobbyArmWrestlingSpectatorStation_C*> Player2Spectators;                                 // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	float                                         ArmWrestleRatio_Noised;                            // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitAmount;                                         // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         P1InputPushAmount;                                 // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         P2InputPushAmount;                                 // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Push;                                              // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PushSmoothed;                                      // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ArmWrestleSmoothed;                                // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3893[0x4];                                     // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             PlayerLeaving;                                     // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ArmWreslingTable_BP_AutoGenFunc(class ARBPawn* PawnInteracting);
	void ApplyNoise(float DeltaTime);
	void ApplyVisualPush(float DeltaTime);
	void SetPawnReaction(bool Win, class URBInteractiblePanelComponent* SpectatorComponent);
	void PlayReactions();
	void SetTargetWinRatio();
	void Reset_Players();
	void EndRound();
	void StartRound();
	void SetPlayersRatio(float Param_ArmWrestleRatio);
	void SetPlayersReady(bool bReady);
	void Event_OnTableStateChanged();
	void CustomEvent_0(const struct FArmWreslingPlayerRoundData& PlayerRoundData);
	void ReceiveTick(float DeltaSeconds);
	void BindOnPlayerTaunt();
	void SnapTableToState();
	void OnWorldPopulateFinished();
	void ExecuteUbergraph_ArmWreslingTable_BP(int32 EntryPoint);
	void PlayerLeaving__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ArmWreslingTable_BP_C">();
	}
	static class AArmWreslingTable_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AArmWreslingTable_BP_C>();
	}
};
static_assert(alignof(AArmWreslingTable_BP_C) == 0x000008, "Wrong alignment on AArmWreslingTable_BP_C");
static_assert(sizeof(AArmWreslingTable_BP_C) == 0x0004D0, "Wrong size on AArmWreslingTable_BP_C");
static_assert(offsetof(AArmWreslingTable_BP_C, UberGraphFrame) == 0x000410, "Member 'AArmWreslingTable_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Watch4Ref) == 0x000418, "Member 'AArmWreslingTable_BP_C::Watch4Ref' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Watch3Ref) == 0x000420, "Member 'AArmWreslingTable_BP_C::Watch3Ref' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Watch2Ref) == 0x000428, "Member 'AArmWreslingTable_BP_C::Watch2Ref' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Watch1Ref) == 0x000430, "Member 'AArmWreslingTable_BP_C::Watch1Ref' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, LobbyArmWrestlingSpectatorComponentBase3) == 0x000438, "Member 'AArmWreslingTable_BP_C::LobbyArmWrestlingSpectatorComponentBase3' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, LobbyArmWrestlingSpectatorComponentBase2) == 0x000440, "Member 'AArmWreslingTable_BP_C::LobbyArmWrestlingSpectatorComponentBase2' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, LobbyArmWrestlingSpectatorComponentBase1) == 0x000448, "Member 'AArmWreslingTable_BP_C::LobbyArmWrestlingSpectatorComponentBase1' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, LobbyArmWrestlingSpectatorComponentBase) == 0x000450, "Member 'AArmWreslingTable_BP_C::LobbyArmWrestlingSpectatorComponentBase' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Player1Anchor) == 0x000458, "Member 'AArmWreslingTable_BP_C::Player1Anchor' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Player2Anchor) == 0x000460, "Member 'AArmWreslingTable_BP_C::Player2Anchor' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Table) == 0x000468, "Member 'AArmWreslingTable_BP_C::Table' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Root) == 0x000470, "Member 'AArmWreslingTable_BP_C::Root' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, ArmWrestleRatio) == 0x000478, "Member 'AArmWreslingTable_BP_C::ArmWrestleRatio' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Player1Spectators) == 0x000480, "Member 'AArmWreslingTable_BP_C::Player1Spectators' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Player2Spectators) == 0x000490, "Member 'AArmWreslingTable_BP_C::Player2Spectators' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, ArmWrestleRatio_Noised) == 0x0004A0, "Member 'AArmWreslingTable_BP_C::ArmWrestleRatio_Noised' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, HitAmount) == 0x0004A4, "Member 'AArmWreslingTable_BP_C::HitAmount' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, P1InputPushAmount) == 0x0004A8, "Member 'AArmWreslingTable_BP_C::P1InputPushAmount' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, P2InputPushAmount) == 0x0004AC, "Member 'AArmWreslingTable_BP_C::P2InputPushAmount' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, Push) == 0x0004B0, "Member 'AArmWreslingTable_BP_C::Push' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, PushSmoothed) == 0x0004B4, "Member 'AArmWreslingTable_BP_C::PushSmoothed' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, ArmWrestleSmoothed) == 0x0004B8, "Member 'AArmWreslingTable_BP_C::ArmWrestleSmoothed' has a wrong offset!");
static_assert(offsetof(AArmWreslingTable_BP_C, PlayerLeaving) == 0x0004C0, "Member 'AArmWreslingTable_BP_C::PlayerLeaving' has a wrong offset!");

}

