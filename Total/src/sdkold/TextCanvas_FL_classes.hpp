#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TextCanvas_FL

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TextCanvas_FL.TextCanvas_FL_C
// 0x0000 (0x0028 - 0x0028)
class UTextCanvas_FL_C final : public UBlueprintFunctionLibrary
{
public:
	static void Draw_Icons_Material(class UCanvas* Canvas, const struct FVector2D& ScreenSize, class UMaterialInstanceDynamic* IconMaterial, const struct FVector2D& ScaleFactor, TArray<struct FIconBox>& Icon, class UObject* __WorldContext);
	static void Add_Item_to_Mimic(TArray<class AActor*>& Array, class UObject* __WorldContext);
	static void SetMimicMaterial(class UPrimitiveComponent* MeshTarget, class UMaterialInterface* Material, class UObject* __WorldContext);
	static void Update_Mimic(TArray<class AActor*>& Array, class UPrimitiveComponent* MeshTarget, class UMaterialInterface* Material, class UObject* __WorldContext);
	static void DrawTextBox(const struct FVector2D& ScaleFactor, const struct FVector2D& RenderTextureSize, class UCanvas* Canvas, const struct FVector2D& ScreenSize, float KerningJustifyMax, float KerningJustifyMin, const struct FTextBox& TextBox, class UObject* __WorldContext);
	static void FindFontSize(TArray<class FString>& String, class UFont* RenderFont, float Scale, const struct FVector2D& BoxSize, float Kerning, class UCanvas* Canvas, class UObject* __WorldContext, float* FontScale);
	static void AdjustText(class UFont* RenderFont, float FontScale, const struct FVector2D& BoxSize, float Kerning, class UCanvas* Canvas, const class FString& Text, float KerningJustifyMax, float KerningJustifyMin, float LineScale, class UObject* __WorldContext, float* ScaleFont, TArray<class FString>* _AdjustedLines1, TArray<float>* _KerningScale1);
	static void DrawTextBoxArray(const struct FVector2D& ScaleFactor, const struct FVector2D& RenderTextureSize, const struct FVector2D& ScreenSize, class UCanvas* Canvas, float KerningJustifyMax, float KerningJustifyMin, TArray<struct FTextBox>& TextBox, class UObject* __WorldContext);
	static void Draw_Icons(TArray<struct FIconBox>& Icons, class UCanvas* Canvas, const struct FVector2D& ScreenSize, const struct FVector2D& UVSize, const struct FVector2D& Ratio, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TextCanvas_FL_C">();
	}
	static class UTextCanvas_FL_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextCanvas_FL_C>();
	}
};
static_assert(alignof(UTextCanvas_FL_C) == 0x000008, "Wrong alignment on UTextCanvas_FL_C");
static_assert(sizeof(UTextCanvas_FL_C) == 0x000028, "Wrong size on UTextCanvas_FL_C");

}

