#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TimerCountdownMinus01_BP

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.FindFlipSpeed
// 0x0030 (0x0030 - 0x0000)
struct TimerCountdownMinus01_BP_C_FindFlipSpeed final
{
public:
	int32                                         CurrentNumber;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastNumber;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewParam;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30C6[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30C7[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_FindFlipSpeed) == 0x000004, "Wrong alignment on TimerCountdownMinus01_BP_C_FindFlipSpeed");
static_assert(sizeof(TimerCountdownMinus01_BP_C_FindFlipSpeed) == 0x000030, "Wrong size on TimerCountdownMinus01_BP_C_FindFlipSpeed");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, CurrentNumber) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::CurrentNumber' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, LastNumber) == 0x000004, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::LastNumber' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, NewParam) == 0x000008, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::NewParam' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, Temp_bool_Variable) == 0x00000C, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, Temp_int_Variable) == 0x000014, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, Temp_int_Variable_1) == 0x00001C, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, K2Node_Select_Default) == 0x000020, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, CallFunc_Multiply_IntInt_ReturnValue) == 0x000028, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_FindFlipSpeed, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00002C, "Member 'TimerCountdownMinus01_BP_C_FindFlipSpeed::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.SetTimerFrozen
// 0x0001 (0x0001 - 0x0000)
struct TimerCountdownMinus01_BP_C_SetTimerFrozen final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_SetTimerFrozen) == 0x000001, "Wrong alignment on TimerCountdownMinus01_BP_C_SetTimerFrozen");
static_assert(sizeof(TimerCountdownMinus01_BP_C_SetTimerFrozen) == 0x000001, "Wrong size on TimerCountdownMinus01_BP_C_SetTimerFrozen");
static_assert(offsetof(TimerCountdownMinus01_BP_C_SetTimerFrozen, Value) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_SetTimerFrozen::Value' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.SetTimerEnabled
// 0x0002 (0x0002 - 0x0000)
struct TimerCountdownMinus01_BP_C_SetTimerEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_SetTimerEnabled) == 0x000001, "Wrong alignment on TimerCountdownMinus01_BP_C_SetTimerEnabled");
static_assert(sizeof(TimerCountdownMinus01_BP_C_SetTimerEnabled) == 0x000002, "Wrong size on TimerCountdownMinus01_BP_C_SetTimerEnabled");
static_assert(offsetof(TimerCountdownMinus01_BP_C_SetTimerEnabled, Enabled) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_SetTimerEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_SetTimerEnabled, CallFunc_HasAuthority_ReturnValue) == 0x000001, "Member 'TimerCountdownMinus01_BP_C_SetTimerEnabled::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.TrySetTriggered
// 0x0001 (0x0001 - 0x0000)
struct TimerCountdownMinus01_BP_C_TrySetTriggered final
{
public:
	bool                                          Triggered;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_TrySetTriggered) == 0x000001, "Wrong alignment on TimerCountdownMinus01_BP_C_TrySetTriggered");
static_assert(sizeof(TimerCountdownMinus01_BP_C_TrySetTriggered) == 0x000001, "Wrong size on TimerCountdownMinus01_BP_C_TrySetTriggered");
static_assert(offsetof(TimerCountdownMinus01_BP_C_TrySetTriggered, Triggered) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_TrySetTriggered::Triggered' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.SetLinkedTriggerable
// 0x0010 (0x0010 - 0x0000)
struct TimerCountdownMinus01_BP_C_SetLinkedTriggerable final
{
public:
	class ARBTriggerable*                         Trigerable;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_SetLinkedTriggerable) == 0x000008, "Wrong alignment on TimerCountdownMinus01_BP_C_SetLinkedTriggerable");
static_assert(sizeof(TimerCountdownMinus01_BP_C_SetLinkedTriggerable) == 0x000010, "Wrong size on TimerCountdownMinus01_BP_C_SetLinkedTriggerable");
static_assert(offsetof(TimerCountdownMinus01_BP_C_SetLinkedTriggerable, Trigerable) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_SetLinkedTriggerable::Trigerable' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_SetLinkedTriggerable, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'TimerCountdownMinus01_BP_C_SetLinkedTriggerable::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.OnCurrentTimeChanged_Server
// 0x0008 (0x0008 - 0x0000)
struct TimerCountdownMinus01_BP_C_OnCurrentTimeChanged_Server final
{
public:
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_OnCurrentTimeChanged_Server) == 0x000004, "Wrong alignment on TimerCountdownMinus01_BP_C_OnCurrentTimeChanged_Server");
static_assert(sizeof(TimerCountdownMinus01_BP_C_OnCurrentTimeChanged_Server) == 0x000008, "Wrong size on TimerCountdownMinus01_BP_C_OnCurrentTimeChanged_Server");
static_assert(offsetof(TimerCountdownMinus01_BP_C_OnCurrentTimeChanged_Server, CallFunc_Round_ReturnValue) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_OnCurrentTimeChanged_Server::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_OnCurrentTimeChanged_Server, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000004, "Member 'TimerCountdownMinus01_BP_C_OnCurrentTimeChanged_Server::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.OnRep_CurrentDisplayTime
// 0x0018 (0x0018 - 0x0000)
struct TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0010)(ConstParm, ZeroConstructor, NoDestructor)
	int32                                         CallFunc_PostEventOnActor_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime) == 0x000004, "Wrong alignment on TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime");
static_assert(sizeof(TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime) == 0x000018, "Wrong size on TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime");
static_assert(offsetof(TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime, Temp_delegate_Variable) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime, CallFunc_PostEventOnActor_ReturnValue) == 0x000010, "Member 'TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime::CallFunc_PostEventOnActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000014, "Member 'TimerCountdownMinus01_BP_C_OnRep_CurrentDisplayTime::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.UpdateTick
// 0x0008 (0x0008 - 0x0000)
struct TimerCountdownMinus01_BP_C_UpdateTick final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActorTickEnabled_ReturnValue;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_UpdateTick) == 0x000001, "Wrong alignment on TimerCountdownMinus01_BP_C_UpdateTick");
static_assert(sizeof(TimerCountdownMinus01_BP_C_UpdateTick) == 0x000008, "Wrong size on TimerCountdownMinus01_BP_C_UpdateTick");
static_assert(offsetof(TimerCountdownMinus01_BP_C_UpdateTick, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_UpdateTick::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_UpdateTick, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'TimerCountdownMinus01_BP_C_UpdateTick::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_UpdateTick, CallFunc_IsActorTickEnabled_ReturnValue) == 0x000002, "Member 'TimerCountdownMinus01_BP_C_UpdateTick::CallFunc_IsActorTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_UpdateTick, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'TimerCountdownMinus01_BP_C_UpdateTick::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_UpdateTick, CallFunc_BooleanAND_ReturnValue_1) == 0x000004, "Member 'TimerCountdownMinus01_BP_C_UpdateTick::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_UpdateTick, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000005, "Member 'TimerCountdownMinus01_BP_C_UpdateTick::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_UpdateTick, CallFunc_BooleanOR_ReturnValue) == 0x000006, "Member 'TimerCountdownMinus01_BP_C_UpdateTick::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_UpdateTick, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000007, "Member 'TimerCountdownMinus01_BP_C_UpdateTick::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.SetTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct TimerCountdownMinus01_BP_C_SetTickEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_SetTickEnabled) == 0x000001, "Wrong alignment on TimerCountdownMinus01_BP_C_SetTickEnabled");
static_assert(sizeof(TimerCountdownMinus01_BP_C_SetTickEnabled) == 0x000001, "Wrong size on TimerCountdownMinus01_BP_C_SetTickEnabled");
static_assert(offsetof(TimerCountdownMinus01_BP_C_SetTickEnabled, bEnabled) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_SetTickEnabled::bEnabled' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.SetCountdownTimer
// 0x0008 (0x0008 - 0x0000)
struct TimerCountdownMinus01_BP_C_SetCountdownTimer final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_SetCountdownTimer) == 0x000004, "Wrong alignment on TimerCountdownMinus01_BP_C_SetCountdownTimer");
static_assert(sizeof(TimerCountdownMinus01_BP_C_SetCountdownTimer) == 0x000008, "Wrong size on TimerCountdownMinus01_BP_C_SetCountdownTimer");
static_assert(offsetof(TimerCountdownMinus01_BP_C_SetCountdownTimer, Time) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_SetCountdownTimer::Time' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_SetCountdownTimer, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'TimerCountdownMinus01_BP_C_SetCountdownTimer::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.Set Lights On
// 0x0020 (0x0020 - 0x0000)
struct TimerCountdownMinus01_BP_C_Set_Lights_On final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30C8[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_Set_Lights_On) == 0x000004, "Wrong alignment on TimerCountdownMinus01_BP_C_Set_Lights_On");
static_assert(sizeof(TimerCountdownMinus01_BP_C_Set_Lights_On) == 0x000020, "Wrong size on TimerCountdownMinus01_BP_C_Set_Lights_On");
static_assert(offsetof(TimerCountdownMinus01_BP_C_Set_Lights_On, bNewVisibility) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_Set_Lights_On::bNewVisibility' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_Set_Lights_On, Temp_bool_Variable) == 0x000001, "Member 'TimerCountdownMinus01_BP_C_Set_Lights_On::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_Set_Lights_On, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'TimerCountdownMinus01_BP_C_Set_Lights_On::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_Set_Lights_On, Temp_float_Variable) == 0x000004, "Member 'TimerCountdownMinus01_BP_C_Set_Lights_On::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_Set_Lights_On, Temp_float_Variable_1) == 0x000008, "Member 'TimerCountdownMinus01_BP_C_Set_Lights_On::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_Set_Lights_On, K2Node_Select_Default) == 0x00000C, "Member 'TimerCountdownMinus01_BP_C_Set_Lights_On::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_Set_Lights_On, K2Node_MakeStruct_LinearColor) == 0x000010, "Member 'TimerCountdownMinus01_BP_C_Set_Lights_On::K2Node_MakeStruct_LinearColor' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.DisplayTime
// 0x0068 (0x0068 - 0x0000)
struct TimerCountdownMinus01_BP_C_DisplayTime final
{
public:
	float                                         TimeSeconds;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlipNumberCountDownMinus01_BP_C*       K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30CA[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_1;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue_1;         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_2;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue_3;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFlipNumberCountDownMinus01_BP_C*       K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_1; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30CB[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlipNumberCountDownMinus01_BP_C*       K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_2; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30CC[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFlipNumberCountDownMinus01_BP_C*       K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_3; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_DisplayTime) == 0x000008, "Wrong alignment on TimerCountdownMinus01_BP_C_DisplayTime");
static_assert(sizeof(TimerCountdownMinus01_BP_C_DisplayTime) == 0x000068, "Wrong size on TimerCountdownMinus01_BP_C_DisplayTime");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, TimeSeconds) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::TimeSeconds' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000004, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000008, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP) == 0x000010, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, CallFunc_FFloor_ReturnValue) == 0x00001C, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, CallFunc_FFloor_ReturnValue_1) == 0x000020, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::CallFunc_FFloor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000024, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000028, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, CallFunc_Percent_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::CallFunc_Percent_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, CallFunc_FFloor_ReturnValue_2) == 0x000030, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::CallFunc_FFloor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, CallFunc_FFloor_ReturnValue_3) == 0x000034, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::CallFunc_FFloor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_1) == 0x000038, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_2) == 0x000048, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_2' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_3) == 0x000058, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::K2Node_DynamicCast_AsFlip_Number_Count_Down_01_BP_3' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_DisplayTime, K2Node_DynamicCast_bSuccess_3) == 0x000060, "Member 'TimerCountdownMinus01_BP_C_DisplayTime::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct TimerCountdownMinus01_BP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_ReceiveTick) == 0x000004, "Wrong alignment on TimerCountdownMinus01_BP_C_ReceiveTick");
static_assert(sizeof(TimerCountdownMinus01_BP_C_ReceiveTick) == 0x000004, "Wrong size on TimerCountdownMinus01_BP_C_ReceiveTick");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.TriggerChanged
// 0x0010 (0x0010 - 0x0000)
struct TimerCountdownMinus01_BP_C_TriggerChanged final
{
public:
	bool                                          IsOn;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30CD[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         Triggerable;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_TriggerChanged) == 0x000008, "Wrong alignment on TimerCountdownMinus01_BP_C_TriggerChanged");
static_assert(sizeof(TimerCountdownMinus01_BP_C_TriggerChanged) == 0x000010, "Wrong size on TimerCountdownMinus01_BP_C_TriggerChanged");
static_assert(offsetof(TimerCountdownMinus01_BP_C_TriggerChanged, IsOn) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_TriggerChanged::IsOn' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_TriggerChanged, Triggerable) == 0x000008, "Member 'TimerCountdownMinus01_BP_C_TriggerChanged::Triggerable' has a wrong offset!");

// Function TimerCountdown-01_BP.TimerCountdown-01_BP_C.ExecuteUbergraph_TimerCountdown-01_BP
// 0x0058 (0x0058 - 0x0000)
struct TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30CE[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30CF[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D0[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D1[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D2[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool IsOn, class ARBTriggerable* Triggerable)> K2Node_CreateDelegate_OutputDelegate;              // 0x0030(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_4;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsOn;                           // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D3[0x6];                                     // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARBTriggerable*                         K2Node_CustomEvent_triggerable;                    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP) == 0x000008, "Wrong alignment on TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP");
static_assert(sizeof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP) == 0x000058, "Wrong size on TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, EntryPoint) == 0x000000, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_HasAuthority_ReturnValue_1) == 0x000005, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_HasAuthority_ReturnValue_2) == 0x000006, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_HasAuthority_ReturnValue_3) == 0x00000C, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_FMax_ReturnValue) == 0x000014, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_FMax_ReturnValue_1) == 0x000020, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000024, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000025, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000028, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, K2Node_CreateDelegate_OutputDelegate) == 0x000030, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_HasAuthority_ReturnValue_4) == 0x000040, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_HasAuthority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, K2Node_CustomEvent_IsOn) == 0x000041, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::K2Node_CustomEvent_IsOn' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, K2Node_CustomEvent_triggerable) == 0x000048, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::K2Node_CustomEvent_triggerable' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_Not_PreBool_ReturnValue) == 0x000051, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP, CallFunc_BooleanAND_ReturnValue_1) == 0x000052, "Member 'TimerCountdownMinus01_BP_C_ExecuteUbergraph_TimerCountdownMinus01_BP::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

}

